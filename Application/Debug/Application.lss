
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002a264  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f4  20000000  0002a264  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005614  20000300  0002a570  00040300  2**4
                  ALLOC
  3 .stack        00002004  20005914  0002fb84  00040300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000402f4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0004031c  2**0
                  CONTENTS, READONLY
  6 .debug_info   001383fe  00000000  00000000  00040375  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000114f3  00000000  00000000  00178773  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000173c1  00000000  00000000  00189c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003e58  00000000  00000000  001a1027  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003aa0  00000000  00000000  001a4e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00042434  00000000  00000000  001a891f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00060952  00000000  00000000  001ead53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c4304  00000000  00000000  0024b6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000ec70  00000000  00000000  0030f9ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 79 00 20 d1 a1 01 00 c9 a2 01 00 c9 a2 01 00     .y. ............
	...
      2c:	fd 92 00 00 00 00 00 00 00 00 00 00 21 94 00 00     ............!...
      3c:	69 94 00 00 c9 a2 01 00 c9 a2 01 00 c9 a2 01 00     i...............
      4c:	21 63 01 00 4d 58 01 00 c9 a2 01 00 b9 10 00 00     !c..MX..........
      5c:	c9 a2 01 00 fd 11 00 00 c5 69 01 00 dd 69 01 00     .........i...i..
      6c:	f5 69 01 00 0d 6a 01 00 25 6a 01 00 3d 6a 01 00     .i...j..%j..=j..
      7c:	19 a1 01 00 2d a1 01 00 41 a1 01 00 e9 6f 00 00     ....-...A....o..
      8c:	fd 6f 00 00 11 70 00 00 00 00 00 00 00 00 00 00     .o...p..........
      9c:	41 0f 00 00 c9 a2 01 00 7d 10 00 00 c9 a2 01 00     A.......}.......
      ac:	c9 a2 01 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000300 	.word	0x20000300
      d4:	00000000 	.word	0x00000000
      d8:	0002a264 	.word	0x0002a264

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000304 	.word	0x20000304
     108:	0002a264 	.word	0x0002a264
     10c:	0002a264 	.word	0x0002a264
     110:	00000000 	.word	0x00000000

00000114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}

0000011e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
     11e:	b580      	push	{r7, lr}
     120:	af00      	add	r7, sp, #0

}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	bd80      	pop	{r7, pc}

00000128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
     128:	b580      	push	{r7, lr}
     12a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
     12c:	4b25      	ldr	r3, [pc, #148]	; (1c4 <ssd1306_init+0x9c>)
     12e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
     130:	4b25      	ldr	r3, [pc, #148]	; (1c8 <ssd1306_init+0xa0>)
     132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
     134:	20ae      	movs	r0, #174	; 0xae
     136:	4b25      	ldr	r3, [pc, #148]	; (1cc <ssd1306_init+0xa4>)
     138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
     13a:	20d5      	movs	r0, #213	; 0xd5
     13c:	4b23      	ldr	r3, [pc, #140]	; (1cc <ssd1306_init+0xa4>)
     13e:	4798      	blx	r3
	ssd1306_write_command(0x80);
     140:	2080      	movs	r0, #128	; 0x80
     142:	4b22      	ldr	r3, [pc, #136]	; (1cc <ssd1306_init+0xa4>)
     144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
     146:	20a8      	movs	r0, #168	; 0xa8
     148:	4b20      	ldr	r3, [pc, #128]	; (1cc <ssd1306_init+0xa4>)
     14a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
     14c:	202f      	movs	r0, #47	; 0x2f
     14e:	4b1f      	ldr	r3, [pc, #124]	; (1cc <ssd1306_init+0xa4>)
     150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
     152:	20d3      	movs	r0, #211	; 0xd3
     154:	4b1d      	ldr	r3, [pc, #116]	; (1cc <ssd1306_init+0xa4>)
     156:	4798      	blx	r3
	ssd1306_write_command(0x00);
     158:	2000      	movs	r0, #0
     15a:	4b1c      	ldr	r3, [pc, #112]	; (1cc <ssd1306_init+0xa4>)
     15c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
     15e:	2040      	movs	r0, #64	; 0x40
     160:	4b1a      	ldr	r3, [pc, #104]	; (1cc <ssd1306_init+0xa4>)
     162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
     164:	208d      	movs	r0, #141	; 0x8d
     166:	4b19      	ldr	r3, [pc, #100]	; (1cc <ssd1306_init+0xa4>)
     168:	4798      	blx	r3
	ssd1306_write_command(0x14);
     16a:	2014      	movs	r0, #20
     16c:	4b17      	ldr	r3, [pc, #92]	; (1cc <ssd1306_init+0xa4>)
     16e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
     170:	20a6      	movs	r0, #166	; 0xa6
     172:	4b16      	ldr	r3, [pc, #88]	; (1cc <ssd1306_init+0xa4>)
     174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
     176:	20a4      	movs	r0, #164	; 0xa4
     178:	4b14      	ldr	r3, [pc, #80]	; (1cc <ssd1306_init+0xa4>)
     17a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
     17c:	20a1      	movs	r0, #161	; 0xa1
     17e:	4b13      	ldr	r3, [pc, #76]	; (1cc <ssd1306_init+0xa4>)
     180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
     182:	20c8      	movs	r0, #200	; 0xc8
     184:	4b11      	ldr	r3, [pc, #68]	; (1cc <ssd1306_init+0xa4>)
     186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
     188:	20da      	movs	r0, #218	; 0xda
     18a:	4b10      	ldr	r3, [pc, #64]	; (1cc <ssd1306_init+0xa4>)
     18c:	4798      	blx	r3
	ssd1306_write_command(0x12);
     18e:	2012      	movs	r0, #18
     190:	4b0e      	ldr	r3, [pc, #56]	; (1cc <ssd1306_init+0xa4>)
     192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
     194:	2081      	movs	r0, #129	; 0x81
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <ssd1306_init+0xa4>)
     198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
     19a:	208f      	movs	r0, #143	; 0x8f
     19c:	4b0b      	ldr	r3, [pc, #44]	; (1cc <ssd1306_init+0xa4>)
     19e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
     1a0:	20d9      	movs	r0, #217	; 0xd9
     1a2:	4b0a      	ldr	r3, [pc, #40]	; (1cc <ssd1306_init+0xa4>)
     1a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
     1a6:	20f1      	movs	r0, #241	; 0xf1
     1a8:	4b08      	ldr	r3, [pc, #32]	; (1cc <ssd1306_init+0xa4>)
     1aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
     1ac:	20db      	movs	r0, #219	; 0xdb
     1ae:	4b07      	ldr	r3, [pc, #28]	; (1cc <ssd1306_init+0xa4>)
     1b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
     1b2:	2040      	movs	r0, #64	; 0x40
     1b4:	4b05      	ldr	r3, [pc, #20]	; (1cc <ssd1306_init+0xa4>)
     1b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     1b8:	20af      	movs	r0, #175	; 0xaf
     1ba:	4b04      	ldr	r3, [pc, #16]	; (1cc <ssd1306_init+0xa4>)
     1bc:	4798      	blx	r3

}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	bd80      	pop	{r7, pc}
     1c4:	0000011f 	.word	0x0000011f
     1c8:	00000115 	.word	0x00000115
     1cc:	000001d1 	.word	0x000001d1

000001d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b084      	sub	sp, #16
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
     1dc:	230c      	movs	r3, #12
     1de:	18fb      	adds	r3, r7, r3
     1e0:	2200      	movs	r2, #0
     1e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
     1e4:	230c      	movs	r3, #12
     1e6:	18fb      	adds	r3, r7, r3
     1e8:	1dfa      	adds	r2, r7, #7
     1ea:	7812      	ldrb	r2, [r2, #0]
     1ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
     1ee:	4b0c      	ldr	r3, [pc, #48]	; (220 <ssd1306_write_command+0x50>)
     1f0:	223d      	movs	r2, #61	; 0x3d
     1f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
     1f4:	4b0a      	ldr	r3, [pc, #40]	; (220 <ssd1306_write_command+0x50>)
     1f6:	220c      	movs	r2, #12
     1f8:	18ba      	adds	r2, r7, r2
     1fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
     1fc:	4b08      	ldr	r3, [pc, #32]	; (220 <ssd1306_write_command+0x50>)
     1fe:	2202      	movs	r2, #2
     200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
     202:	4b07      	ldr	r3, [pc, #28]	; (220 <ssd1306_write_command+0x50>)
     204:	2200      	movs	r2, #0
     206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
     208:	4b05      	ldr	r3, [pc, #20]	; (220 <ssd1306_write_command+0x50>)
     20a:	2200      	movs	r2, #0
     20c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
     20e:	4b04      	ldr	r3, [pc, #16]	; (220 <ssd1306_write_command+0x50>)
     210:	2164      	movs	r1, #100	; 0x64
     212:	0018      	movs	r0, r3
     214:	4b03      	ldr	r3, [pc, #12]	; (224 <ssd1306_write_command+0x54>)
     216:	4798      	blx	r3
}
     218:	46c0      	nop			; (mov r8, r8)
     21a:	46bd      	mov	sp, r7
     21c:	b004      	add	sp, #16
     21e:	bd80      	pop	{r7, pc}
     220:	200043a4 	.word	0x200043a4
     224:	000030b5 	.word	0x000030b5

00000228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     228:	b580      	push	{r7, lr}
     22a:	b084      	sub	sp, #16
     22c:	af00      	add	r7, sp, #0
     22e:	0002      	movs	r2, r0
     230:	1dfb      	adds	r3, r7, #7
     232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
     234:	230c      	movs	r3, #12
     236:	18fb      	adds	r3, r7, r3
     238:	2240      	movs	r2, #64	; 0x40
     23a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
     23c:	230c      	movs	r3, #12
     23e:	18fb      	adds	r3, r7, r3
     240:	1dfa      	adds	r2, r7, #7
     242:	7812      	ldrb	r2, [r2, #0]
     244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
     246:	4b0c      	ldr	r3, [pc, #48]	; (278 <ssd1306_write_data+0x50>)
     248:	223d      	movs	r2, #61	; 0x3d
     24a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
     24c:	4b0a      	ldr	r3, [pc, #40]	; (278 <ssd1306_write_data+0x50>)
     24e:	220c      	movs	r2, #12
     250:	18ba      	adds	r2, r7, r2
     252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
     254:	4b08      	ldr	r3, [pc, #32]	; (278 <ssd1306_write_data+0x50>)
     256:	2202      	movs	r2, #2
     258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
     25a:	4b07      	ldr	r3, [pc, #28]	; (278 <ssd1306_write_data+0x50>)
     25c:	2200      	movs	r2, #0
     25e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
     260:	4b05      	ldr	r3, [pc, #20]	; (278 <ssd1306_write_data+0x50>)
     262:	2200      	movs	r2, #0
     264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
     266:	4b04      	ldr	r3, [pc, #16]	; (278 <ssd1306_write_data+0x50>)
     268:	2164      	movs	r1, #100	; 0x64
     26a:	0018      	movs	r0, r3
     26c:	4b03      	ldr	r3, [pc, #12]	; (27c <ssd1306_write_data+0x54>)
     26e:	4798      	blx	r3
}
     270:	46c0      	nop			; (mov r8, r8)
     272:	46bd      	mov	sp, r7
     274:	b004      	add	sp, #16
     276:	bd80      	pop	{r7, pc}
     278:	200043a4 	.word	0x200043a4
     27c:	000030b5 	.word	0x000030b5

00000280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
     288:	4b03      	ldr	r3, [pc, #12]	; (298 <gfx_mono_set_framebuffer+0x18>)
     28a:	687a      	ldr	r2, [r7, #4]
     28c:	601a      	str	r2, [r3, #0]
}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	46bd      	mov	sp, r7
     292:	b002      	add	sp, #8
     294:	bd80      	pop	{r7, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	2000031c 	.word	0x2000031c

0000029c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     29c:	b590      	push	{r4, r7, lr}
     29e:	b083      	sub	sp, #12
     2a0:	af00      	add	r7, sp, #0
     2a2:	0004      	movs	r4, r0
     2a4:	0008      	movs	r0, r1
     2a6:	0011      	movs	r1, r2
     2a8:	1dfb      	adds	r3, r7, #7
     2aa:	1c22      	adds	r2, r4, #0
     2ac:	701a      	strb	r2, [r3, #0]
     2ae:	1dbb      	adds	r3, r7, #6
     2b0:	1c02      	adds	r2, r0, #0
     2b2:	701a      	strb	r2, [r3, #0]
     2b4:	1d7b      	adds	r3, r7, #5
     2b6:	1c0a      	adds	r2, r1, #0
     2b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     2ba:	4b0a      	ldr	r3, [pc, #40]	; (2e4 <gfx_mono_framebuffer_put_byte+0x48>)
     2bc:	6819      	ldr	r1, [r3, #0]
     2be:	1dfb      	adds	r3, r7, #7
     2c0:	781a      	ldrb	r2, [r3, #0]
     2c2:	0013      	movs	r3, r2
     2c4:	011b      	lsls	r3, r3, #4
     2c6:	189b      	adds	r3, r3, r2
     2c8:	009b      	lsls	r3, r3, #2
     2ca:	001a      	movs	r2, r3
     2cc:	1dbb      	adds	r3, r7, #6
     2ce:	781b      	ldrb	r3, [r3, #0]
     2d0:	18d3      	adds	r3, r2, r3
     2d2:	18cb      	adds	r3, r1, r3
     2d4:	1d7a      	adds	r2, r7, #5
     2d6:	7812      	ldrb	r2, [r2, #0]
     2d8:	701a      	strb	r2, [r3, #0]
}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	46bd      	mov	sp, r7
     2de:	b003      	add	sp, #12
     2e0:	bd90      	pop	{r4, r7, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	2000031c 	.word	0x2000031c

000002e8 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b082      	sub	sp, #8
     2ec:	af00      	add	r7, sp, #0
     2ee:	0002      	movs	r2, r0
     2f0:	1dfb      	adds	r3, r7, #7
     2f2:	701a      	strb	r2, [r3, #0]
     2f4:	1dbb      	adds	r3, r7, #6
     2f6:	1c0a      	adds	r2, r1, #0
     2f8:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     2fa:	4b09      	ldr	r3, [pc, #36]	; (320 <gfx_mono_framebuffer_get_byte+0x38>)
     2fc:	6819      	ldr	r1, [r3, #0]
     2fe:	1dfb      	adds	r3, r7, #7
     300:	781a      	ldrb	r2, [r3, #0]
     302:	0013      	movs	r3, r2
     304:	011b      	lsls	r3, r3, #4
     306:	189b      	adds	r3, r3, r2
     308:	009b      	lsls	r3, r3, #2
     30a:	001a      	movs	r2, r3
     30c:	1dbb      	adds	r3, r7, #6
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	18d3      	adds	r3, r2, r3
     312:	18cb      	adds	r3, r1, r3
     314:	781b      	ldrb	r3, [r3, #0]
}
     316:	0018      	movs	r0, r3
     318:	46bd      	mov	sp, r7
     31a:	b002      	add	sp, #8
     31c:	bd80      	pop	{r7, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	2000031c 	.word	0x2000031c

00000324 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     324:	b5b0      	push	{r4, r5, r7, lr}
     326:	b084      	sub	sp, #16
     328:	af00      	add	r7, sp, #0
     32a:	0005      	movs	r5, r0
     32c:	000c      	movs	r4, r1
     32e:	0010      	movs	r0, r2
     330:	0019      	movs	r1, r3
     332:	1dfb      	adds	r3, r7, #7
     334:	1c2a      	adds	r2, r5, #0
     336:	701a      	strb	r2, [r3, #0]
     338:	1dbb      	adds	r3, r7, #6
     33a:	1c22      	adds	r2, r4, #0
     33c:	701a      	strb	r2, [r3, #0]
     33e:	1d7b      	adds	r3, r7, #5
     340:	1c02      	adds	r2, r0, #0
     342:	701a      	strb	r2, [r3, #0]
     344:	1d3b      	adds	r3, r7, #4
     346:	1c0a      	adds	r2, r1, #0
     348:	701a      	strb	r2, [r3, #0]
	if (length == 0) {
     34a:	1d7b      	adds	r3, r7, #5
     34c:	781b      	ldrb	r3, [r3, #0]
     34e:	2b00      	cmp	r3, #0
     350:	d100      	bne.n	354 <gfx_mono_generic_draw_vertical_line+0x30>
     352:	e0a7      	b.n	4a4 <gfx_mono_generic_draw_vertical_line+0x180>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     354:	1dba      	adds	r2, r7, #6
     356:	1d7b      	adds	r3, r7, #5
     358:	7812      	ldrb	r2, [r2, #0]
     35a:	781b      	ldrb	r3, [r3, #0]
     35c:	18d3      	adds	r3, r2, r3
     35e:	b2da      	uxtb	r2, r3
     360:	230f      	movs	r3, #15
     362:	18fb      	adds	r3, r7, r3
     364:	3a01      	subs	r2, #1
     366:	701a      	strb	r2, [r3, #0]

	if (y == y2) {
     368:	1dba      	adds	r2, r7, #6
     36a:	230f      	movs	r3, #15
     36c:	18fb      	adds	r3, r7, r3
     36e:	7812      	ldrb	r2, [r2, #0]
     370:	781b      	ldrb	r3, [r3, #0]
     372:	429a      	cmp	r2, r3
     374:	d109      	bne.n	38a <gfx_mono_generic_draw_vertical_line+0x66>
		gfx_mono_draw_pixel(x, y, color);
     376:	1d3b      	adds	r3, r7, #4
     378:	781a      	ldrb	r2, [r3, #0]
     37a:	1dbb      	adds	r3, r7, #6
     37c:	7819      	ldrb	r1, [r3, #0]
     37e:	1dfb      	adds	r3, r7, #7
     380:	781b      	ldrb	r3, [r3, #0]
     382:	0018      	movs	r0, r3
     384:	4b49      	ldr	r3, [pc, #292]	; (4ac <gfx_mono_generic_draw_vertical_line+0x188>)
     386:	4798      	blx	r3
		return;
     388:	e08d      	b.n	4a6 <gfx_mono_generic_draw_vertical_line+0x182>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     38a:	230f      	movs	r3, #15
     38c:	18fb      	adds	r3, r7, r3
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	2b2e      	cmp	r3, #46	; 0x2e
     392:	d903      	bls.n	39c <gfx_mono_generic_draw_vertical_line+0x78>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     394:	230f      	movs	r3, #15
     396:	18fb      	adds	r3, r7, r3
     398:	222f      	movs	r2, #47	; 0x2f
     39a:	701a      	strb	r2, [r3, #0]
	}

	gfx_coord_t y1page = y / 8;
     39c:	230e      	movs	r3, #14
     39e:	18fb      	adds	r3, r7, r3
     3a0:	1dba      	adds	r2, r7, #6
     3a2:	7812      	ldrb	r2, [r2, #0]
     3a4:	08d2      	lsrs	r2, r2, #3
     3a6:	701a      	strb	r2, [r3, #0]
	gfx_coord_t y2page = y2 / 8;
     3a8:	230d      	movs	r3, #13
     3aa:	18fb      	adds	r3, r7, r3
     3ac:	220f      	movs	r2, #15
     3ae:	18ba      	adds	r2, r7, r2
     3b0:	7812      	ldrb	r2, [r2, #0]
     3b2:	08d2      	lsrs	r2, r2, #3
     3b4:	701a      	strb	r2, [r3, #0]

	uint8_t y1bitpos = y & 0x07;
     3b6:	230c      	movs	r3, #12
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	1dba      	adds	r2, r7, #6
     3bc:	7812      	ldrb	r2, [r2, #0]
     3be:	2107      	movs	r1, #7
     3c0:	400a      	ands	r2, r1
     3c2:	701a      	strb	r2, [r3, #0]
	uint8_t y2bitpos = y2 & 0x07;
     3c4:	230b      	movs	r3, #11
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	220f      	movs	r2, #15
     3ca:	18ba      	adds	r2, r7, r2
     3cc:	7812      	ldrb	r2, [r2, #0]
     3ce:	2107      	movs	r1, #7
     3d0:	400a      	ands	r2, r1
     3d2:	701a      	strb	r2, [r3, #0]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     3d4:	230c      	movs	r3, #12
     3d6:	18fb      	adds	r3, r7, r3
     3d8:	781b      	ldrb	r3, [r3, #0]
     3da:	22ff      	movs	r2, #255	; 0xff
     3dc:	409a      	lsls	r2, r3
     3de:	230a      	movs	r3, #10
     3e0:	18fb      	adds	r3, r7, r3
     3e2:	701a      	strb	r2, [r3, #0]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     3e4:	230b      	movs	r3, #11
     3e6:	18fb      	adds	r3, r7, r3
     3e8:	781b      	ldrb	r3, [r3, #0]
     3ea:	2207      	movs	r2, #7
     3ec:	1ad3      	subs	r3, r2, r3
     3ee:	22ff      	movs	r2, #255	; 0xff
     3f0:	411a      	asrs	r2, r3
     3f2:	2309      	movs	r3, #9
     3f4:	18fb      	adds	r3, r7, r3
     3f6:	701a      	strb	r2, [r3, #0]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     3f8:	230e      	movs	r3, #14
     3fa:	18fa      	adds	r2, r7, r3
     3fc:	230d      	movs	r3, #13
     3fe:	18fb      	adds	r3, r7, r3
     400:	7812      	ldrb	r2, [r2, #0]
     402:	781b      	ldrb	r3, [r3, #0]
     404:	429a      	cmp	r2, r3
     406:	d117      	bne.n	438 <gfx_mono_generic_draw_vertical_line+0x114>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
     408:	2308      	movs	r3, #8
     40a:	18fb      	adds	r3, r7, r3
     40c:	220a      	movs	r2, #10
     40e:	18ba      	adds	r2, r7, r2
     410:	2109      	movs	r1, #9
     412:	1879      	adds	r1, r7, r1
     414:	7812      	ldrb	r2, [r2, #0]
     416:	7809      	ldrb	r1, [r1, #0]
     418:	400a      	ands	r2, r1
     41a:	701a      	strb	r2, [r3, #0]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     41c:	1d3b      	adds	r3, r7, #4
     41e:	781c      	ldrb	r4, [r3, #0]
     420:	2308      	movs	r3, #8
     422:	18fb      	adds	r3, r7, r3
     424:	781a      	ldrb	r2, [r3, #0]
     426:	1dfb      	adds	r3, r7, #7
     428:	7819      	ldrb	r1, [r3, #0]
     42a:	230e      	movs	r3, #14
     42c:	18fb      	adds	r3, r7, r3
     42e:	7818      	ldrb	r0, [r3, #0]
     430:	0023      	movs	r3, r4
     432:	4c1f      	ldr	r4, [pc, #124]	; (4b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
     434:	47a0      	blx	r4
     436:	e036      	b.n	4a6 <gfx_mono_generic_draw_vertical_line+0x182>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
     438:	1d3b      	adds	r3, r7, #4
     43a:	781c      	ldrb	r4, [r3, #0]
     43c:	230a      	movs	r3, #10
     43e:	18fb      	adds	r3, r7, r3
     440:	781a      	ldrb	r2, [r3, #0]
     442:	1dfb      	adds	r3, r7, #7
     444:	7819      	ldrb	r1, [r3, #0]
     446:	230e      	movs	r3, #14
     448:	18fb      	adds	r3, r7, r3
     44a:	7818      	ldrb	r0, [r3, #0]
     44c:	0023      	movs	r3, r4
     44e:	4c18      	ldr	r4, [pc, #96]	; (4b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
     450:	47a0      	blx	r4

		while (++y1page < y2page) {
     452:	e00a      	b.n	46a <gfx_mono_generic_draw_vertical_line+0x146>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     454:	1d3b      	adds	r3, r7, #4
     456:	781a      	ldrb	r2, [r3, #0]
     458:	1dfb      	adds	r3, r7, #7
     45a:	7819      	ldrb	r1, [r3, #0]
     45c:	230e      	movs	r3, #14
     45e:	18fb      	adds	r3, r7, r3
     460:	7818      	ldrb	r0, [r3, #0]
     462:	0013      	movs	r3, r2
     464:	22ff      	movs	r2, #255	; 0xff
     466:	4c12      	ldr	r4, [pc, #72]	; (4b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
     468:	47a0      	blx	r4
		while (++y1page < y2page) {
     46a:	230e      	movs	r3, #14
     46c:	18fb      	adds	r3, r7, r3
     46e:	220e      	movs	r2, #14
     470:	18ba      	adds	r2, r7, r2
     472:	7812      	ldrb	r2, [r2, #0]
     474:	3201      	adds	r2, #1
     476:	701a      	strb	r2, [r3, #0]
     478:	230e      	movs	r3, #14
     47a:	18fa      	adds	r2, r7, r3
     47c:	230d      	movs	r3, #13
     47e:	18fb      	adds	r3, r7, r3
     480:	7812      	ldrb	r2, [r2, #0]
     482:	781b      	ldrb	r3, [r3, #0]
     484:	429a      	cmp	r2, r3
     486:	d3e5      	bcc.n	454 <gfx_mono_generic_draw_vertical_line+0x130>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     488:	1d3b      	adds	r3, r7, #4
     48a:	781c      	ldrb	r4, [r3, #0]
     48c:	2309      	movs	r3, #9
     48e:	18fb      	adds	r3, r7, r3
     490:	781a      	ldrb	r2, [r3, #0]
     492:	1dfb      	adds	r3, r7, #7
     494:	7819      	ldrb	r1, [r3, #0]
     496:	230d      	movs	r3, #13
     498:	18fb      	adds	r3, r7, r3
     49a:	7818      	ldrb	r0, [r3, #0]
     49c:	0023      	movs	r3, r4
     49e:	4c04      	ldr	r4, [pc, #16]	; (4b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
     4a0:	47a0      	blx	r4
     4a2:	e000      	b.n	4a6 <gfx_mono_generic_draw_vertical_line+0x182>
		return;
     4a4:	46c0      	nop			; (mov r8, r8)
	}
}
     4a6:	46bd      	mov	sp, r7
     4a8:	b004      	add	sp, #16
     4aa:	bdb0      	pop	{r4, r5, r7, pc}
     4ac:	00000aed 	.word	0x00000aed
     4b0:	00000cb1 	.word	0x00000cb1

000004b4 <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     4b4:	b5b0      	push	{r4, r5, r7, lr}
     4b6:	b084      	sub	sp, #16
     4b8:	af00      	add	r7, sp, #0
     4ba:	0005      	movs	r5, r0
     4bc:	000c      	movs	r4, r1
     4be:	0010      	movs	r0, r2
     4c0:	0019      	movs	r1, r3
     4c2:	1dfb      	adds	r3, r7, #7
     4c4:	1c2a      	adds	r2, r5, #0
     4c6:	701a      	strb	r2, [r3, #0]
     4c8:	1dbb      	adds	r3, r7, #6
     4ca:	1c22      	adds	r2, r4, #0
     4cc:	701a      	strb	r2, [r3, #0]
     4ce:	1d7b      	adds	r3, r7, #5
     4d0:	1c02      	adds	r2, r0, #0
     4d2:	701a      	strb	r2, [r3, #0]
     4d4:	1d3b      	adds	r3, r7, #4
     4d6:	1c0a      	adds	r2, r1, #0
     4d8:	701a      	strb	r2, [r3, #0]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     4da:	1dfa      	adds	r2, r7, #7
     4dc:	1d7b      	adds	r3, r7, #5
     4de:	7812      	ldrb	r2, [r2, #0]
     4e0:	781b      	ldrb	r3, [r3, #0]
     4e2:	429a      	cmp	r2, r3
     4e4:	d91b      	bls.n	51e <gfx_mono_generic_draw_line+0x6a>
		dx = x1;
     4e6:	230a      	movs	r3, #10
     4e8:	18fb      	adds	r3, r7, r3
     4ea:	1dfa      	adds	r2, r7, #7
     4ec:	7812      	ldrb	r2, [r2, #0]
     4ee:	701a      	strb	r2, [r3, #0]
		x1 = x2;
     4f0:	1dfb      	adds	r3, r7, #7
     4f2:	1d7a      	adds	r2, r7, #5
     4f4:	7812      	ldrb	r2, [r2, #0]
     4f6:	701a      	strb	r2, [r3, #0]
		x2 = dx;
     4f8:	1d7b      	adds	r3, r7, #5
     4fa:	220a      	movs	r2, #10
     4fc:	18ba      	adds	r2, r7, r2
     4fe:	7812      	ldrb	r2, [r2, #0]
     500:	701a      	strb	r2, [r3, #0]
		dy = y1;
     502:	2309      	movs	r3, #9
     504:	18fb      	adds	r3, r7, r3
     506:	1dba      	adds	r2, r7, #6
     508:	7812      	ldrb	r2, [r2, #0]
     50a:	701a      	strb	r2, [r3, #0]
		y1 = y2;
     50c:	1dbb      	adds	r3, r7, #6
     50e:	1d3a      	adds	r2, r7, #4
     510:	7812      	ldrb	r2, [r2, #0]
     512:	701a      	strb	r2, [r3, #0]
		y2 = dy;
     514:	1d3b      	adds	r3, r7, #4
     516:	2209      	movs	r2, #9
     518:	18ba      	adds	r2, r7, r2
     51a:	7812      	ldrb	r2, [r2, #0]
     51c:	701a      	strb	r2, [r3, #0]
	}

	dx = x2 - x1;
     51e:	1d7a      	adds	r2, r7, #5
     520:	1dfb      	adds	r3, r7, #7
     522:	7812      	ldrb	r2, [r2, #0]
     524:	781b      	ldrb	r3, [r3, #0]
     526:	1ad3      	subs	r3, r2, r3
     528:	b2da      	uxtb	r2, r3
     52a:	230a      	movs	r3, #10
     52c:	18fb      	adds	r3, r7, r3
     52e:	701a      	strb	r2, [r3, #0]
	dy = y2 - y1;
     530:	1d3a      	adds	r2, r7, #4
     532:	1dbb      	adds	r3, r7, #6
     534:	7812      	ldrb	r2, [r2, #0]
     536:	781b      	ldrb	r3, [r3, #0]
     538:	1ad3      	subs	r3, r2, r3
     53a:	b2da      	uxtb	r2, r3
     53c:	2309      	movs	r3, #9
     53e:	18fb      	adds	r3, r7, r3
     540:	701a      	strb	r2, [r3, #0]

	x = x1;
     542:	230e      	movs	r3, #14
     544:	18fb      	adds	r3, r7, r3
     546:	1dfa      	adds	r2, r7, #7
     548:	7812      	ldrb	r2, [r2, #0]
     54a:	701a      	strb	r2, [r3, #0]
	y = y1;
     54c:	230d      	movs	r3, #13
     54e:	18fb      	adds	r3, r7, r3
     550:	1dba      	adds	r2, r7, #6
     552:	7812      	ldrb	r2, [r2, #0]
     554:	701a      	strb	r2, [r3, #0]

	if (dx < 0) {
     556:	230a      	movs	r3, #10
     558:	18fb      	adds	r3, r7, r3
     55a:	781b      	ldrb	r3, [r3, #0]
     55c:	2b7f      	cmp	r3, #127	; 0x7f
     55e:	d90c      	bls.n	57a <gfx_mono_generic_draw_line+0xc6>
		xinc = -1;
     560:	230c      	movs	r3, #12
     562:	18fb      	adds	r3, r7, r3
     564:	22ff      	movs	r2, #255	; 0xff
     566:	701a      	strb	r2, [r3, #0]
		dx = -dx;
     568:	230a      	movs	r3, #10
     56a:	18fb      	adds	r3, r7, r3
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	425b      	negs	r3, r3
     570:	b2da      	uxtb	r2, r3
     572:	230a      	movs	r3, #10
     574:	18fb      	adds	r3, r7, r3
     576:	701a      	strb	r2, [r3, #0]
     578:	e003      	b.n	582 <gfx_mono_generic_draw_line+0xce>
	} else {
		xinc = 1;
     57a:	230c      	movs	r3, #12
     57c:	18fb      	adds	r3, r7, r3
     57e:	2201      	movs	r2, #1
     580:	701a      	strb	r2, [r3, #0]
	}

	if (dy < 0) {
     582:	2309      	movs	r3, #9
     584:	18fb      	adds	r3, r7, r3
     586:	781b      	ldrb	r3, [r3, #0]
     588:	2b7f      	cmp	r3, #127	; 0x7f
     58a:	d90c      	bls.n	5a6 <gfx_mono_generic_draw_line+0xf2>
		yinc = -1;
     58c:	230b      	movs	r3, #11
     58e:	18fb      	adds	r3, r7, r3
     590:	22ff      	movs	r2, #255	; 0xff
     592:	701a      	strb	r2, [r3, #0]
		dy = -dy;
     594:	2309      	movs	r3, #9
     596:	18fb      	adds	r3, r7, r3
     598:	781b      	ldrb	r3, [r3, #0]
     59a:	425b      	negs	r3, r3
     59c:	b2da      	uxtb	r2, r3
     59e:	2309      	movs	r3, #9
     5a0:	18fb      	adds	r3, r7, r3
     5a2:	701a      	strb	r2, [r3, #0]
     5a4:	e003      	b.n	5ae <gfx_mono_generic_draw_line+0xfa>
	} else {
		yinc = 1;
     5a6:	230b      	movs	r3, #11
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	2201      	movs	r2, #1
     5ac:	701a      	strb	r2, [r3, #0]
	}

	if (dx > dy) {
     5ae:	230a      	movs	r3, #10
     5b0:	18fa      	adds	r2, r7, r3
     5b2:	2309      	movs	r3, #9
     5b4:	18fb      	adds	r3, r7, r3
     5b6:	7812      	ldrb	r2, [r2, #0]
     5b8:	b252      	sxtb	r2, r2
     5ba:	781b      	ldrb	r3, [r3, #0]
     5bc:	b25b      	sxtb	r3, r3
     5be:	429a      	cmp	r2, r3
     5c0:	dd5b      	ble.n	67a <gfx_mono_generic_draw_line+0x1c6>
		e = dy - dx;
     5c2:	2309      	movs	r3, #9
     5c4:	18fb      	adds	r3, r7, r3
     5c6:	781a      	ldrb	r2, [r3, #0]
     5c8:	230a      	movs	r3, #10
     5ca:	18fb      	adds	r3, r7, r3
     5cc:	781b      	ldrb	r3, [r3, #0]
     5ce:	1ad3      	subs	r3, r2, r3
     5d0:	b2da      	uxtb	r2, r3
     5d2:	2308      	movs	r3, #8
     5d4:	18fb      	adds	r3, r7, r3
     5d6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
     5d8:	230f      	movs	r3, #15
     5da:	18fb      	adds	r3, r7, r3
     5dc:	2200      	movs	r2, #0
     5de:	701a      	strb	r2, [r3, #0]
     5e0:	e041      	b.n	666 <gfx_mono_generic_draw_line+0x1b2>
			gfx_mono_draw_pixel(x, y, color);
     5e2:	2320      	movs	r3, #32
     5e4:	18fb      	adds	r3, r7, r3
     5e6:	781a      	ldrb	r2, [r3, #0]
     5e8:	230d      	movs	r3, #13
     5ea:	18fb      	adds	r3, r7, r3
     5ec:	7819      	ldrb	r1, [r3, #0]
     5ee:	230e      	movs	r3, #14
     5f0:	18fb      	adds	r3, r7, r3
     5f2:	781b      	ldrb	r3, [r3, #0]
     5f4:	0018      	movs	r0, r3
     5f6:	4b50      	ldr	r3, [pc, #320]	; (738 <gfx_mono_generic_draw_line+0x284>)
     5f8:	4798      	blx	r3
			if (e >= 0) {
     5fa:	2308      	movs	r3, #8
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	2b7f      	cmp	r3, #127	; 0x7f
     602:	d814      	bhi.n	62e <gfx_mono_generic_draw_line+0x17a>
				e -= dx;
     604:	2308      	movs	r3, #8
     606:	18fb      	adds	r3, r7, r3
     608:	781a      	ldrb	r2, [r3, #0]
     60a:	230a      	movs	r3, #10
     60c:	18fb      	adds	r3, r7, r3
     60e:	781b      	ldrb	r3, [r3, #0]
     610:	1ad3      	subs	r3, r2, r3
     612:	b2da      	uxtb	r2, r3
     614:	2308      	movs	r3, #8
     616:	18fb      	adds	r3, r7, r3
     618:	701a      	strb	r2, [r3, #0]
				y += yinc;
     61a:	230b      	movs	r3, #11
     61c:	18fb      	adds	r3, r7, r3
     61e:	7819      	ldrb	r1, [r3, #0]
     620:	230d      	movs	r3, #13
     622:	18fb      	adds	r3, r7, r3
     624:	220d      	movs	r2, #13
     626:	18ba      	adds	r2, r7, r2
     628:	7812      	ldrb	r2, [r2, #0]
     62a:	188a      	adds	r2, r1, r2
     62c:	701a      	strb	r2, [r3, #0]
			}

			e += dy;
     62e:	2308      	movs	r3, #8
     630:	18fb      	adds	r3, r7, r3
     632:	781a      	ldrb	r2, [r3, #0]
     634:	2309      	movs	r3, #9
     636:	18fb      	adds	r3, r7, r3
     638:	781b      	ldrb	r3, [r3, #0]
     63a:	18d3      	adds	r3, r2, r3
     63c:	b2da      	uxtb	r2, r3
     63e:	2308      	movs	r3, #8
     640:	18fb      	adds	r3, r7, r3
     642:	701a      	strb	r2, [r3, #0]
			x += xinc;
     644:	230c      	movs	r3, #12
     646:	18fb      	adds	r3, r7, r3
     648:	7819      	ldrb	r1, [r3, #0]
     64a:	230e      	movs	r3, #14
     64c:	18fb      	adds	r3, r7, r3
     64e:	220e      	movs	r2, #14
     650:	18ba      	adds	r2, r7, r2
     652:	7812      	ldrb	r2, [r2, #0]
     654:	188a      	adds	r2, r1, r2
     656:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
     658:	230f      	movs	r3, #15
     65a:	18fb      	adds	r3, r7, r3
     65c:	781a      	ldrb	r2, [r3, #0]
     65e:	230f      	movs	r3, #15
     660:	18fb      	adds	r3, r7, r3
     662:	3201      	adds	r2, #1
     664:	701a      	strb	r2, [r3, #0]
     666:	230f      	movs	r3, #15
     668:	18fb      	adds	r3, r7, r3
     66a:	781a      	ldrb	r2, [r3, #0]
     66c:	230a      	movs	r3, #10
     66e:	18fb      	adds	r3, r7, r3
     670:	781b      	ldrb	r3, [r3, #0]
     672:	b25b      	sxtb	r3, r3
     674:	429a      	cmp	r2, r3
     676:	ddb4      	ble.n	5e2 <gfx_mono_generic_draw_line+0x12e>

			e += dx;
			y += yinc;
		}
	}
}
     678:	e05a      	b.n	730 <gfx_mono_generic_draw_line+0x27c>
		e = dx - dy;
     67a:	230a      	movs	r3, #10
     67c:	18fb      	adds	r3, r7, r3
     67e:	781a      	ldrb	r2, [r3, #0]
     680:	2309      	movs	r3, #9
     682:	18fb      	adds	r3, r7, r3
     684:	781b      	ldrb	r3, [r3, #0]
     686:	1ad3      	subs	r3, r2, r3
     688:	b2da      	uxtb	r2, r3
     68a:	2308      	movs	r3, #8
     68c:	18fb      	adds	r3, r7, r3
     68e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
     690:	230f      	movs	r3, #15
     692:	18fb      	adds	r3, r7, r3
     694:	2200      	movs	r2, #0
     696:	701a      	strb	r2, [r3, #0]
     698:	e041      	b.n	71e <gfx_mono_generic_draw_line+0x26a>
			gfx_mono_draw_pixel(x, y, color);
     69a:	2320      	movs	r3, #32
     69c:	18fb      	adds	r3, r7, r3
     69e:	781a      	ldrb	r2, [r3, #0]
     6a0:	230d      	movs	r3, #13
     6a2:	18fb      	adds	r3, r7, r3
     6a4:	7819      	ldrb	r1, [r3, #0]
     6a6:	230e      	movs	r3, #14
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	781b      	ldrb	r3, [r3, #0]
     6ac:	0018      	movs	r0, r3
     6ae:	4b22      	ldr	r3, [pc, #136]	; (738 <gfx_mono_generic_draw_line+0x284>)
     6b0:	4798      	blx	r3
			if (e >= 0) {
     6b2:	2308      	movs	r3, #8
     6b4:	18fb      	adds	r3, r7, r3
     6b6:	781b      	ldrb	r3, [r3, #0]
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	d814      	bhi.n	6e6 <gfx_mono_generic_draw_line+0x232>
				e -= dy;
     6bc:	2308      	movs	r3, #8
     6be:	18fb      	adds	r3, r7, r3
     6c0:	781a      	ldrb	r2, [r3, #0]
     6c2:	2309      	movs	r3, #9
     6c4:	18fb      	adds	r3, r7, r3
     6c6:	781b      	ldrb	r3, [r3, #0]
     6c8:	1ad3      	subs	r3, r2, r3
     6ca:	b2da      	uxtb	r2, r3
     6cc:	2308      	movs	r3, #8
     6ce:	18fb      	adds	r3, r7, r3
     6d0:	701a      	strb	r2, [r3, #0]
				x += xinc;
     6d2:	230c      	movs	r3, #12
     6d4:	18fb      	adds	r3, r7, r3
     6d6:	7819      	ldrb	r1, [r3, #0]
     6d8:	230e      	movs	r3, #14
     6da:	18fb      	adds	r3, r7, r3
     6dc:	220e      	movs	r2, #14
     6de:	18ba      	adds	r2, r7, r2
     6e0:	7812      	ldrb	r2, [r2, #0]
     6e2:	188a      	adds	r2, r1, r2
     6e4:	701a      	strb	r2, [r3, #0]
			e += dx;
     6e6:	2308      	movs	r3, #8
     6e8:	18fb      	adds	r3, r7, r3
     6ea:	781a      	ldrb	r2, [r3, #0]
     6ec:	230a      	movs	r3, #10
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	781b      	ldrb	r3, [r3, #0]
     6f2:	18d3      	adds	r3, r2, r3
     6f4:	b2da      	uxtb	r2, r3
     6f6:	2308      	movs	r3, #8
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	701a      	strb	r2, [r3, #0]
			y += yinc;
     6fc:	230b      	movs	r3, #11
     6fe:	18fb      	adds	r3, r7, r3
     700:	7819      	ldrb	r1, [r3, #0]
     702:	230d      	movs	r3, #13
     704:	18fb      	adds	r3, r7, r3
     706:	220d      	movs	r2, #13
     708:	18ba      	adds	r2, r7, r2
     70a:	7812      	ldrb	r2, [r2, #0]
     70c:	188a      	adds	r2, r1, r2
     70e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
     710:	230f      	movs	r3, #15
     712:	18fb      	adds	r3, r7, r3
     714:	781a      	ldrb	r2, [r3, #0]
     716:	230f      	movs	r3, #15
     718:	18fb      	adds	r3, r7, r3
     71a:	3201      	adds	r2, #1
     71c:	701a      	strb	r2, [r3, #0]
     71e:	230f      	movs	r3, #15
     720:	18fb      	adds	r3, r7, r3
     722:	781a      	ldrb	r2, [r3, #0]
     724:	2309      	movs	r3, #9
     726:	18fb      	adds	r3, r7, r3
     728:	781b      	ldrb	r3, [r3, #0]
     72a:	b25b      	sxtb	r3, r3
     72c:	429a      	cmp	r2, r3
     72e:	ddb4      	ble.n	69a <gfx_mono_generic_draw_line+0x1e6>
}
     730:	46c0      	nop			; (mov r8, r8)
     732:	46bd      	mov	sp, r7
     734:	b004      	add	sp, #16
     736:	bdb0      	pop	{r4, r5, r7, pc}
     738:	00000aed 	.word	0x00000aed

0000073c <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     73c:	b5b0      	push	{r4, r5, r7, lr}
     73e:	b084      	sub	sp, #16
     740:	af00      	add	r7, sp, #0
     742:	0005      	movs	r5, r0
     744:	000c      	movs	r4, r1
     746:	0010      	movs	r0, r2
     748:	0019      	movs	r1, r3
     74a:	1dfb      	adds	r3, r7, #7
     74c:	1c2a      	adds	r2, r5, #0
     74e:	701a      	strb	r2, [r3, #0]
     750:	1dbb      	adds	r3, r7, #6
     752:	1c22      	adds	r2, r4, #0
     754:	701a      	strb	r2, [r3, #0]
     756:	1d7b      	adds	r3, r7, #5
     758:	1c02      	adds	r2, r0, #0
     75a:	701a      	strb	r2, [r3, #0]
     75c:	1d3b      	adds	r3, r7, #4
     75e:	1c0a      	adds	r2, r1, #0
     760:	701a      	strb	r2, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     762:	1d7b      	adds	r3, r7, #5
     764:	781b      	ldrb	r3, [r3, #0]
     766:	2b00      	cmp	r3, #0
     768:	d109      	bne.n	77e <gfx_mono_generic_draw_filled_circle+0x42>
		gfx_mono_draw_pixel(x, y, color);
     76a:	1d3b      	adds	r3, r7, #4
     76c:	781a      	ldrb	r2, [r3, #0]
     76e:	1dbb      	adds	r3, r7, #6
     770:	7819      	ldrb	r1, [r3, #0]
     772:	1dfb      	adds	r3, r7, #7
     774:	781b      	ldrb	r3, [r3, #0]
     776:	0018      	movs	r0, r3
     778:	4b8f      	ldr	r3, [pc, #572]	; (9b8 <gfx_mono_generic_draw_filled_circle+0x27c>)
     77a:	4798      	blx	r3
		return;
     77c:	e118      	b.n	9b0 <gfx_mono_generic_draw_filled_circle+0x274>
	}

	/* Set up start iterators. */
	offset_x = 0;
     77e:	230f      	movs	r3, #15
     780:	18fb      	adds	r3, r7, r3
     782:	2200      	movs	r2, #0
     784:	701a      	strb	r2, [r3, #0]
	offset_y = radius;
     786:	230e      	movs	r3, #14
     788:	18fb      	adds	r3, r7, r3
     78a:	1d7a      	adds	r2, r7, #5
     78c:	7812      	ldrb	r2, [r2, #0]
     78e:	701a      	strb	r2, [r3, #0]
	error = 3 - 2 * radius;
     790:	1d7b      	adds	r3, r7, #5
     792:	781b      	ldrb	r3, [r3, #0]
     794:	b29b      	uxth	r3, r3
     796:	18db      	adds	r3, r3, r3
     798:	b29b      	uxth	r3, r3
     79a:	2203      	movs	r2, #3
     79c:	1ad3      	subs	r3, r2, r3
     79e:	b29a      	uxth	r2, r3
     7a0:	230c      	movs	r3, #12
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	801a      	strh	r2, [r3, #0]

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     7a6:	e0fa      	b.n	99e <gfx_mono_generic_draw_filled_circle+0x262>
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     7a8:	2320      	movs	r3, #32
     7aa:	18fb      	adds	r3, r7, r3
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	2203      	movs	r2, #3
     7b0:	4013      	ands	r3, r2
     7b2:	d02d      	beq.n	810 <gfx_mono_generic_draw_filled_circle+0xd4>
			gfx_mono_draw_vertical_line(x + offset_y,
     7b4:	1dfa      	adds	r2, r7, #7
     7b6:	230e      	movs	r3, #14
     7b8:	18fb      	adds	r3, r7, r3
     7ba:	7812      	ldrb	r2, [r2, #0]
     7bc:	781b      	ldrb	r3, [r3, #0]
     7be:	18d3      	adds	r3, r2, r3
     7c0:	b2d8      	uxtb	r0, r3
     7c2:	1dba      	adds	r2, r7, #6
     7c4:	230f      	movs	r3, #15
     7c6:	18fb      	adds	r3, r7, r3
     7c8:	7812      	ldrb	r2, [r2, #0]
     7ca:	781b      	ldrb	r3, [r3, #0]
     7cc:	1ad3      	subs	r3, r2, r3
     7ce:	b2d9      	uxtb	r1, r3
     7d0:	230f      	movs	r3, #15
     7d2:	18fb      	adds	r3, r7, r3
     7d4:	781b      	ldrb	r3, [r3, #0]
     7d6:	3301      	adds	r3, #1
     7d8:	b2da      	uxtb	r2, r3
     7da:	1d3b      	adds	r3, r7, #4
     7dc:	781b      	ldrb	r3, [r3, #0]
     7de:	4c77      	ldr	r4, [pc, #476]	; (9bc <gfx_mono_generic_draw_filled_circle+0x280>)
     7e0:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     7e2:	1dfa      	adds	r2, r7, #7
     7e4:	230f      	movs	r3, #15
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	7812      	ldrb	r2, [r2, #0]
     7ea:	781b      	ldrb	r3, [r3, #0]
     7ec:	18d3      	adds	r3, r2, r3
     7ee:	b2d8      	uxtb	r0, r3
     7f0:	1dba      	adds	r2, r7, #6
     7f2:	230e      	movs	r3, #14
     7f4:	18fb      	adds	r3, r7, r3
     7f6:	7812      	ldrb	r2, [r2, #0]
     7f8:	781b      	ldrb	r3, [r3, #0]
     7fa:	1ad3      	subs	r3, r2, r3
     7fc:	b2d9      	uxtb	r1, r3
     7fe:	230e      	movs	r3, #14
     800:	18fb      	adds	r3, r7, r3
     802:	781b      	ldrb	r3, [r3, #0]
     804:	3301      	adds	r3, #1
     806:	b2da      	uxtb	r2, r3
     808:	1d3b      	adds	r3, r7, #4
     80a:	781b      	ldrb	r3, [r3, #0]
     80c:	4c6b      	ldr	r4, [pc, #428]	; (9bc <gfx_mono_generic_draw_filled_circle+0x280>)
     80e:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     810:	2320      	movs	r3, #32
     812:	18fb      	adds	r3, r7, r3
     814:	781b      	ldrb	r3, [r3, #0]
     816:	220c      	movs	r2, #12
     818:	4013      	ands	r3, r2
     81a:	d02d      	beq.n	878 <gfx_mono_generic_draw_filled_circle+0x13c>
			gfx_mono_draw_vertical_line(x - offset_y,
     81c:	1dfa      	adds	r2, r7, #7
     81e:	230e      	movs	r3, #14
     820:	18fb      	adds	r3, r7, r3
     822:	7812      	ldrb	r2, [r2, #0]
     824:	781b      	ldrb	r3, [r3, #0]
     826:	1ad3      	subs	r3, r2, r3
     828:	b2d8      	uxtb	r0, r3
     82a:	1dba      	adds	r2, r7, #6
     82c:	230f      	movs	r3, #15
     82e:	18fb      	adds	r3, r7, r3
     830:	7812      	ldrb	r2, [r2, #0]
     832:	781b      	ldrb	r3, [r3, #0]
     834:	1ad3      	subs	r3, r2, r3
     836:	b2d9      	uxtb	r1, r3
     838:	230f      	movs	r3, #15
     83a:	18fb      	adds	r3, r7, r3
     83c:	781b      	ldrb	r3, [r3, #0]
     83e:	3301      	adds	r3, #1
     840:	b2da      	uxtb	r2, r3
     842:	1d3b      	adds	r3, r7, #4
     844:	781b      	ldrb	r3, [r3, #0]
     846:	4c5d      	ldr	r4, [pc, #372]	; (9bc <gfx_mono_generic_draw_filled_circle+0x280>)
     848:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     84a:	1dfa      	adds	r2, r7, #7
     84c:	230f      	movs	r3, #15
     84e:	18fb      	adds	r3, r7, r3
     850:	7812      	ldrb	r2, [r2, #0]
     852:	781b      	ldrb	r3, [r3, #0]
     854:	1ad3      	subs	r3, r2, r3
     856:	b2d8      	uxtb	r0, r3
     858:	1dba      	adds	r2, r7, #6
     85a:	230e      	movs	r3, #14
     85c:	18fb      	adds	r3, r7, r3
     85e:	7812      	ldrb	r2, [r2, #0]
     860:	781b      	ldrb	r3, [r3, #0]
     862:	1ad3      	subs	r3, r2, r3
     864:	b2d9      	uxtb	r1, r3
     866:	230e      	movs	r3, #14
     868:	18fb      	adds	r3, r7, r3
     86a:	781b      	ldrb	r3, [r3, #0]
     86c:	3301      	adds	r3, #1
     86e:	b2da      	uxtb	r2, r3
     870:	1d3b      	adds	r3, r7, #4
     872:	781b      	ldrb	r3, [r3, #0]
     874:	4c51      	ldr	r4, [pc, #324]	; (9bc <gfx_mono_generic_draw_filled_circle+0x280>)
     876:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     878:	2320      	movs	r3, #32
     87a:	18fb      	adds	r3, r7, r3
     87c:	781b      	ldrb	r3, [r3, #0]
     87e:	2230      	movs	r2, #48	; 0x30
     880:	4013      	ands	r3, r2
     882:	d025      	beq.n	8d0 <gfx_mono_generic_draw_filled_circle+0x194>
			gfx_mono_draw_vertical_line(x - offset_y,
     884:	1dfa      	adds	r2, r7, #7
     886:	230e      	movs	r3, #14
     888:	18fb      	adds	r3, r7, r3
     88a:	7812      	ldrb	r2, [r2, #0]
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	1ad3      	subs	r3, r2, r3
     890:	b2d8      	uxtb	r0, r3
     892:	230f      	movs	r3, #15
     894:	18fb      	adds	r3, r7, r3
     896:	781b      	ldrb	r3, [r3, #0]
     898:	3301      	adds	r3, #1
     89a:	b2da      	uxtb	r2, r3
     89c:	1d3b      	adds	r3, r7, #4
     89e:	781c      	ldrb	r4, [r3, #0]
     8a0:	1dbb      	adds	r3, r7, #6
     8a2:	7819      	ldrb	r1, [r3, #0]
     8a4:	0023      	movs	r3, r4
     8a6:	4c45      	ldr	r4, [pc, #276]	; (9bc <gfx_mono_generic_draw_filled_circle+0x280>)
     8a8:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     8aa:	1dfa      	adds	r2, r7, #7
     8ac:	230f      	movs	r3, #15
     8ae:	18fb      	adds	r3, r7, r3
     8b0:	7812      	ldrb	r2, [r2, #0]
     8b2:	781b      	ldrb	r3, [r3, #0]
     8b4:	1ad3      	subs	r3, r2, r3
     8b6:	b2d8      	uxtb	r0, r3
     8b8:	230e      	movs	r3, #14
     8ba:	18fb      	adds	r3, r7, r3
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	3301      	adds	r3, #1
     8c0:	b2da      	uxtb	r2, r3
     8c2:	1d3b      	adds	r3, r7, #4
     8c4:	781c      	ldrb	r4, [r3, #0]
     8c6:	1dbb      	adds	r3, r7, #6
     8c8:	7819      	ldrb	r1, [r3, #0]
     8ca:	0023      	movs	r3, r4
     8cc:	4c3b      	ldr	r4, [pc, #236]	; (9bc <gfx_mono_generic_draw_filled_circle+0x280>)
     8ce:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     8d0:	2320      	movs	r3, #32
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	781b      	ldrb	r3, [r3, #0]
     8d6:	22c0      	movs	r2, #192	; 0xc0
     8d8:	4013      	ands	r3, r2
     8da:	d025      	beq.n	928 <gfx_mono_generic_draw_filled_circle+0x1ec>
			gfx_mono_draw_vertical_line(x + offset_y,
     8dc:	1dfa      	adds	r2, r7, #7
     8de:	230e      	movs	r3, #14
     8e0:	18fb      	adds	r3, r7, r3
     8e2:	7812      	ldrb	r2, [r2, #0]
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	18d3      	adds	r3, r2, r3
     8e8:	b2d8      	uxtb	r0, r3
     8ea:	230f      	movs	r3, #15
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	781b      	ldrb	r3, [r3, #0]
     8f0:	3301      	adds	r3, #1
     8f2:	b2da      	uxtb	r2, r3
     8f4:	1d3b      	adds	r3, r7, #4
     8f6:	781c      	ldrb	r4, [r3, #0]
     8f8:	1dbb      	adds	r3, r7, #6
     8fa:	7819      	ldrb	r1, [r3, #0]
     8fc:	0023      	movs	r3, r4
     8fe:	4c2f      	ldr	r4, [pc, #188]	; (9bc <gfx_mono_generic_draw_filled_circle+0x280>)
     900:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     902:	1dfa      	adds	r2, r7, #7
     904:	230f      	movs	r3, #15
     906:	18fb      	adds	r3, r7, r3
     908:	7812      	ldrb	r2, [r2, #0]
     90a:	781b      	ldrb	r3, [r3, #0]
     90c:	18d3      	adds	r3, r2, r3
     90e:	b2d8      	uxtb	r0, r3
     910:	230e      	movs	r3, #14
     912:	18fb      	adds	r3, r7, r3
     914:	781b      	ldrb	r3, [r3, #0]
     916:	3301      	adds	r3, #1
     918:	b2da      	uxtb	r2, r3
     91a:	1d3b      	adds	r3, r7, #4
     91c:	781c      	ldrb	r4, [r3, #0]
     91e:	1dbb      	adds	r3, r7, #6
     920:	7819      	ldrb	r1, [r3, #0]
     922:	0023      	movs	r3, r4
     924:	4c25      	ldr	r4, [pc, #148]	; (9bc <gfx_mono_generic_draw_filled_circle+0x280>)
     926:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     928:	230c      	movs	r3, #12
     92a:	18fb      	adds	r3, r7, r3
     92c:	2200      	movs	r2, #0
     92e:	5e9b      	ldrsh	r3, [r3, r2]
     930:	2b00      	cmp	r3, #0
     932:	da10      	bge.n	956 <gfx_mono_generic_draw_filled_circle+0x21a>
			error += ((offset_x << 2) + 6);
     934:	230f      	movs	r3, #15
     936:	18fb      	adds	r3, r7, r3
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	b29b      	uxth	r3, r3
     93c:	009b      	lsls	r3, r3, #2
     93e:	b29a      	uxth	r2, r3
     940:	230c      	movs	r3, #12
     942:	18fb      	adds	r3, r7, r3
     944:	881b      	ldrh	r3, [r3, #0]
     946:	18d3      	adds	r3, r2, r3
     948:	b29b      	uxth	r3, r3
     94a:	3306      	adds	r3, #6
     94c:	b29a      	uxth	r2, r3
     94e:	230c      	movs	r3, #12
     950:	18fb      	adds	r3, r7, r3
     952:	801a      	strh	r2, [r3, #0]
     954:	e01c      	b.n	990 <gfx_mono_generic_draw_filled_circle+0x254>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     956:	230f      	movs	r3, #15
     958:	18fb      	adds	r3, r7, r3
     95a:	781b      	ldrb	r3, [r3, #0]
     95c:	b29a      	uxth	r2, r3
     95e:	230e      	movs	r3, #14
     960:	18fb      	adds	r3, r7, r3
     962:	781b      	ldrb	r3, [r3, #0]
     964:	b29b      	uxth	r3, r3
     966:	1ad3      	subs	r3, r2, r3
     968:	b29b      	uxth	r3, r3
     96a:	009b      	lsls	r3, r3, #2
     96c:	b29a      	uxth	r2, r3
     96e:	230c      	movs	r3, #12
     970:	18fb      	adds	r3, r7, r3
     972:	881b      	ldrh	r3, [r3, #0]
     974:	18d3      	adds	r3, r2, r3
     976:	b29b      	uxth	r3, r3
     978:	330a      	adds	r3, #10
     97a:	b29a      	uxth	r2, r3
     97c:	230c      	movs	r3, #12
     97e:	18fb      	adds	r3, r7, r3
     980:	801a      	strh	r2, [r3, #0]
			--offset_y;
     982:	230e      	movs	r3, #14
     984:	18fb      	adds	r3, r7, r3
     986:	220e      	movs	r2, #14
     988:	18ba      	adds	r2, r7, r2
     98a:	7812      	ldrb	r2, [r2, #0]
     98c:	3a01      	subs	r2, #1
     98e:	701a      	strb	r2, [r3, #0]
		}

		/* Next X. */
		++offset_x;
     990:	230f      	movs	r3, #15
     992:	18fb      	adds	r3, r7, r3
     994:	220f      	movs	r2, #15
     996:	18ba      	adds	r2, r7, r2
     998:	7812      	ldrb	r2, [r2, #0]
     99a:	3201      	adds	r2, #1
     99c:	701a      	strb	r2, [r3, #0]
	while (offset_x <= offset_y) {
     99e:	230f      	movs	r3, #15
     9a0:	18fa      	adds	r2, r7, r3
     9a2:	230e      	movs	r3, #14
     9a4:	18fb      	adds	r3, r7, r3
     9a6:	7812      	ldrb	r2, [r2, #0]
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	429a      	cmp	r2, r3
     9ac:	d800      	bhi.n	9b0 <gfx_mono_generic_draw_filled_circle+0x274>
     9ae:	e6fb      	b.n	7a8 <gfx_mono_generic_draw_filled_circle+0x6c>
	}
}
     9b0:	46bd      	mov	sp, r7
     9b2:	b004      	add	sp, #16
     9b4:	bdb0      	pop	{r4, r5, r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	00000aed 	.word	0x00000aed
     9bc:	00000325 	.word	0x00000325

000009c0 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	b082      	sub	sp, #8
     9c4:	af00      	add	r7, sp, #0
     9c6:	0002      	movs	r2, r0
     9c8:	1dfb      	adds	r3, r7, #7
     9ca:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
     9cc:	1dfb      	adds	r3, r7, #7
     9ce:	1dfa      	adds	r2, r7, #7
     9d0:	7812      	ldrb	r2, [r2, #0]
     9d2:	210f      	movs	r1, #15
     9d4:	400a      	ands	r2, r1
     9d6:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     9d8:	1dfb      	adds	r3, r7, #7
     9da:	781b      	ldrb	r3, [r3, #0]
     9dc:	2250      	movs	r2, #80	; 0x50
     9de:	4252      	negs	r2, r2
     9e0:	4313      	orrs	r3, r2
     9e2:	b2db      	uxtb	r3, r3
     9e4:	0018      	movs	r0, r3
     9e6:	4b03      	ldr	r3, [pc, #12]	; (9f4 <ssd1306_set_page_address+0x34>)
     9e8:	4798      	blx	r3
}
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	46bd      	mov	sp, r7
     9ee:	b002      	add	sp, #8
     9f0:	bd80      	pop	{r7, pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	000001d1 	.word	0x000001d1

000009f8 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	b082      	sub	sp, #8
     9fc:	af00      	add	r7, sp, #0
     9fe:	0002      	movs	r2, r0
     a00:	1dfb      	adds	r3, r7, #7
     a02:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
     a04:	1dfb      	adds	r3, r7, #7
     a06:	1dfa      	adds	r2, r7, #7
     a08:	7812      	ldrb	r2, [r2, #0]
     a0a:	217f      	movs	r1, #127	; 0x7f
     a0c:	400a      	ands	r2, r1
     a0e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
     a10:	1dfb      	adds	r3, r7, #7
     a12:	781b      	ldrb	r3, [r3, #0]
     a14:	091b      	lsrs	r3, r3, #4
     a16:	b2db      	uxtb	r3, r3
     a18:	2210      	movs	r2, #16
     a1a:	4313      	orrs	r3, r2
     a1c:	b2db      	uxtb	r3, r3
     a1e:	0018      	movs	r0, r3
     a20:	4b06      	ldr	r3, [pc, #24]	; (a3c <ssd1306_set_column_address+0x44>)
     a22:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
     a24:	1dfb      	adds	r3, r7, #7
     a26:	781b      	ldrb	r3, [r3, #0]
     a28:	220f      	movs	r2, #15
     a2a:	4013      	ands	r3, r2
     a2c:	b2db      	uxtb	r3, r3
     a2e:	0018      	movs	r0, r3
     a30:	4b02      	ldr	r3, [pc, #8]	; (a3c <ssd1306_set_column_address+0x44>)
     a32:	4798      	blx	r3
}
     a34:	46c0      	nop			; (mov r8, r8)
     a36:	46bd      	mov	sp, r7
     a38:	b002      	add	sp, #8
     a3a:	bd80      	pop	{r7, pc}
     a3c:	000001d1 	.word	0x000001d1

00000a40 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
     a40:	b580      	push	{r7, lr}
     a42:	b082      	sub	sp, #8
     a44:	af00      	add	r7, sp, #0
     a46:	0002      	movs	r2, r0
     a48:	1dfb      	adds	r3, r7, #7
     a4a:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
     a4c:	1dfb      	adds	r3, r7, #7
     a4e:	1dfa      	adds	r2, r7, #7
     a50:	7812      	ldrb	r2, [r2, #0]
     a52:	213f      	movs	r1, #63	; 0x3f
     a54:	400a      	ands	r2, r1
     a56:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
     a58:	1dfb      	adds	r3, r7, #7
     a5a:	781b      	ldrb	r3, [r3, #0]
     a5c:	2240      	movs	r2, #64	; 0x40
     a5e:	4313      	orrs	r3, r2
     a60:	b2db      	uxtb	r3, r3
     a62:	0018      	movs	r0, r3
     a64:	4b02      	ldr	r3, [pc, #8]	; (a70 <ssd1306_set_display_start_line_address+0x30>)
     a66:	4798      	blx	r3
}
     a68:	46c0      	nop			; (mov r8, r8)
     a6a:	46bd      	mov	sp, r7
     a6c:	b002      	add	sp, #8
     a6e:	bd80      	pop	{r7, pc}
     a70:	000001d1 	.word	0x000001d1

00000a74 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
     a74:	b590      	push	{r4, r7, lr}
     a76:	b083      	sub	sp, #12
     a78:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a7a:	4b17      	ldr	r3, [pc, #92]	; (ad8 <gfx_mono_ssd1306_init+0x64>)
     a7c:	0018      	movs	r0, r3
     a7e:	4b17      	ldr	r3, [pc, #92]	; (adc <gfx_mono_ssd1306_init+0x68>)
     a80:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
     a82:	4b17      	ldr	r3, [pc, #92]	; (ae0 <gfx_mono_ssd1306_init+0x6c>)
     a84:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
     a86:	2000      	movs	r0, #0
     a88:	4b16      	ldr	r3, [pc, #88]	; (ae4 <gfx_mono_ssd1306_init+0x70>)
     a8a:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a8c:	1dfb      	adds	r3, r7, #7
     a8e:	2200      	movs	r2, #0
     a90:	701a      	strb	r2, [r3, #0]
     a92:	e019      	b.n	ac8 <gfx_mono_ssd1306_init+0x54>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a94:	1dbb      	adds	r3, r7, #6
     a96:	2200      	movs	r2, #0
     a98:	701a      	strb	r2, [r3, #0]
     a9a:	e00c      	b.n	ab6 <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0xFF, true);
     a9c:	1dbb      	adds	r3, r7, #6
     a9e:	7819      	ldrb	r1, [r3, #0]
     aa0:	1dfb      	adds	r3, r7, #7
     aa2:	7818      	ldrb	r0, [r3, #0]
     aa4:	2301      	movs	r3, #1
     aa6:	22ff      	movs	r2, #255	; 0xff
     aa8:	4c0f      	ldr	r4, [pc, #60]	; (ae8 <gfx_mono_ssd1306_init+0x74>)
     aaa:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     aac:	1dbb      	adds	r3, r7, #6
     aae:	781a      	ldrb	r2, [r3, #0]
     ab0:	1dbb      	adds	r3, r7, #6
     ab2:	3201      	adds	r2, #1
     ab4:	701a      	strb	r2, [r3, #0]
     ab6:	1dbb      	adds	r3, r7, #6
     ab8:	781b      	ldrb	r3, [r3, #0]
     aba:	2b43      	cmp	r3, #67	; 0x43
     abc:	d9ee      	bls.n	a9c <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     abe:	1dfb      	adds	r3, r7, #7
     ac0:	781a      	ldrb	r2, [r3, #0]
     ac2:	1dfb      	adds	r3, r7, #7
     ac4:	3201      	adds	r2, #1
     ac6:	701a      	strb	r2, [r3, #0]
     ac8:	1dfb      	adds	r3, r7, #7
     aca:	781b      	ldrb	r3, [r3, #0]
     acc:	2b05      	cmp	r3, #5
     ace:	d9e1      	bls.n	a94 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
     ad0:	46c0      	nop			; (mov r8, r8)
     ad2:	46bd      	mov	sp, r7
     ad4:	b003      	add	sp, #12
     ad6:	bd90      	pop	{r4, r7, pc}
     ad8:	20000320 	.word	0x20000320
     adc:	00000281 	.word	0x00000281
     ae0:	00000129 	.word	0x00000129
     ae4:	00000a41 	.word	0x00000a41
     ae8:	00000be1 	.word	0x00000be1

00000aec <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     aec:	b590      	push	{r4, r7, lr}
     aee:	b085      	sub	sp, #20
     af0:	af00      	add	r7, sp, #0
     af2:	0004      	movs	r4, r0
     af4:	0008      	movs	r0, r1
     af6:	0011      	movs	r1, r2
     af8:	1dfb      	adds	r3, r7, #7
     afa:	1c22      	adds	r2, r4, #0
     afc:	701a      	strb	r2, [r3, #0]
     afe:	1dbb      	adds	r3, r7, #6
     b00:	1c02      	adds	r2, r0, #0
     b02:	701a      	strb	r2, [r3, #0]
     b04:	1d7b      	adds	r3, r7, #5
     b06:	1c0a      	adds	r2, r1, #0
     b08:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     b0a:	1dfb      	adds	r3, r7, #7
     b0c:	781b      	ldrb	r3, [r3, #0]
     b0e:	2b43      	cmp	r3, #67	; 0x43
     b10:	d85d      	bhi.n	bce <gfx_mono_ssd1306_draw_pixel+0xe2>
     b12:	1dbb      	adds	r3, r7, #6
     b14:	781b      	ldrb	r3, [r3, #0]
     b16:	2b2f      	cmp	r3, #47	; 0x2f
     b18:	d859      	bhi.n	bce <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     b1a:	230e      	movs	r3, #14
     b1c:	18fb      	adds	r3, r7, r3
     b1e:	1dba      	adds	r2, r7, #6
     b20:	7812      	ldrb	r2, [r2, #0]
     b22:	08d2      	lsrs	r2, r2, #3
     b24:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
     b26:	1dbb      	adds	r3, r7, #6
     b28:	781a      	ldrb	r2, [r3, #0]
     b2a:	230e      	movs	r3, #14
     b2c:	18fb      	adds	r3, r7, r3
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	00db      	lsls	r3, r3, #3
     b32:	1ad3      	subs	r3, r2, r3
     b34:	2201      	movs	r2, #1
     b36:	409a      	lsls	r2, r3
     b38:	230d      	movs	r3, #13
     b3a:	18fb      	adds	r3, r7, r3
     b3c:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
     b3e:	230f      	movs	r3, #15
     b40:	18fc      	adds	r4, r7, r3
     b42:	1dfb      	adds	r3, r7, #7
     b44:	781a      	ldrb	r2, [r3, #0]
     b46:	230e      	movs	r3, #14
     b48:	18fb      	adds	r3, r7, r3
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	0011      	movs	r1, r2
     b4e:	0018      	movs	r0, r3
     b50:	4b21      	ldr	r3, [pc, #132]	; (bd8 <gfx_mono_ssd1306_draw_pixel+0xec>)
     b52:	4798      	blx	r3
     b54:	0003      	movs	r3, r0
     b56:	7023      	strb	r3, [r4, #0]

	switch (color) {
     b58:	1d7b      	adds	r3, r7, #5
     b5a:	781b      	ldrb	r3, [r3, #0]
     b5c:	2b01      	cmp	r3, #1
     b5e:	d004      	beq.n	b6a <gfx_mono_ssd1306_draw_pixel+0x7e>
     b60:	2b02      	cmp	r3, #2
     b62:	d01d      	beq.n	ba0 <gfx_mono_ssd1306_draw_pixel+0xb4>
     b64:	2b00      	cmp	r3, #0
     b66:	d00b      	beq.n	b80 <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
     b68:	e025      	b.n	bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
     b6a:	230f      	movs	r3, #15
     b6c:	18fb      	adds	r3, r7, r3
     b6e:	220f      	movs	r2, #15
     b70:	18b9      	adds	r1, r7, r2
     b72:	220d      	movs	r2, #13
     b74:	18ba      	adds	r2, r7, r2
     b76:	7809      	ldrb	r1, [r1, #0]
     b78:	7812      	ldrb	r2, [r2, #0]
     b7a:	430a      	orrs	r2, r1
     b7c:	701a      	strb	r2, [r3, #0]
		break;
     b7e:	e01a      	b.n	bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
     b80:	230d      	movs	r3, #13
     b82:	18fb      	adds	r3, r7, r3
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	b25b      	sxtb	r3, r3
     b88:	43db      	mvns	r3, r3
     b8a:	b25b      	sxtb	r3, r3
     b8c:	220f      	movs	r2, #15
     b8e:	18ba      	adds	r2, r7, r2
     b90:	7812      	ldrb	r2, [r2, #0]
     b92:	b252      	sxtb	r2, r2
     b94:	4013      	ands	r3, r2
     b96:	b25a      	sxtb	r2, r3
     b98:	230f      	movs	r3, #15
     b9a:	18fb      	adds	r3, r7, r3
     b9c:	701a      	strb	r2, [r3, #0]
		break;
     b9e:	e00a      	b.n	bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
     ba0:	230f      	movs	r3, #15
     ba2:	18fb      	adds	r3, r7, r3
     ba4:	220f      	movs	r2, #15
     ba6:	18b9      	adds	r1, r7, r2
     ba8:	220d      	movs	r2, #13
     baa:	18ba      	adds	r2, r7, r2
     bac:	7809      	ldrb	r1, [r1, #0]
     bae:	7812      	ldrb	r2, [r2, #0]
     bb0:	404a      	eors	r2, r1
     bb2:	701a      	strb	r2, [r3, #0]
		break;
     bb4:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
     bb6:	230f      	movs	r3, #15
     bb8:	18fb      	adds	r3, r7, r3
     bba:	781a      	ldrb	r2, [r3, #0]
     bbc:	1dfb      	adds	r3, r7, #7
     bbe:	7819      	ldrb	r1, [r3, #0]
     bc0:	230e      	movs	r3, #14
     bc2:	18fb      	adds	r3, r7, r3
     bc4:	7818      	ldrb	r0, [r3, #0]
     bc6:	2300      	movs	r3, #0
     bc8:	4c04      	ldr	r4, [pc, #16]	; (bdc <gfx_mono_ssd1306_draw_pixel+0xf0>)
     bca:	47a0      	blx	r4
     bcc:	e000      	b.n	bd0 <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
     bce:	46c0      	nop			; (mov r8, r8)
}
     bd0:	46bd      	mov	sp, r7
     bd2:	b005      	add	sp, #20
     bd4:	bd90      	pop	{r4, r7, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00000c81 	.word	0x00000c81
     bdc:	00000be1 	.word	0x00000be1

00000be0 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
     be0:	b5b0      	push	{r4, r5, r7, lr}
     be2:	b082      	sub	sp, #8
     be4:	af00      	add	r7, sp, #0
     be6:	0005      	movs	r5, r0
     be8:	000c      	movs	r4, r1
     bea:	0010      	movs	r0, r2
     bec:	0019      	movs	r1, r3
     bee:	1dfb      	adds	r3, r7, #7
     bf0:	1c2a      	adds	r2, r5, #0
     bf2:	701a      	strb	r2, [r3, #0]
     bf4:	1dbb      	adds	r3, r7, #6
     bf6:	1c22      	adds	r2, r4, #0
     bf8:	701a      	strb	r2, [r3, #0]
     bfa:	1d7b      	adds	r3, r7, #5
     bfc:	1c02      	adds	r2, r0, #0
     bfe:	701a      	strb	r2, [r3, #0]
     c00:	1d3b      	adds	r3, r7, #4
     c02:	1c0a      	adds	r2, r1, #0
     c04:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     c06:	1d3b      	adds	r3, r7, #4
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	2201      	movs	r2, #1
     c0c:	4053      	eors	r3, r2
     c0e:	b2db      	uxtb	r3, r3
     c10:	2b00      	cmp	r3, #0
     c12:	d00d      	beq.n	c30 <gfx_mono_ssd1306_put_byte+0x50>
     c14:	1dbb      	adds	r3, r7, #6
     c16:	781a      	ldrb	r2, [r3, #0]
     c18:	1dfb      	adds	r3, r7, #7
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	0011      	movs	r1, r2
     c1e:	0018      	movs	r0, r3
     c20:	4b12      	ldr	r3, [pc, #72]	; (c6c <gfx_mono_ssd1306_put_byte+0x8c>)
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0
     c26:	001a      	movs	r2, r3
     c28:	1d7b      	adds	r3, r7, #5
     c2a:	781b      	ldrb	r3, [r3, #0]
     c2c:	4293      	cmp	r3, r2
     c2e:	d018      	beq.n	c62 <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     c30:	1d7b      	adds	r3, r7, #5
     c32:	781a      	ldrb	r2, [r3, #0]
     c34:	1dbb      	adds	r3, r7, #6
     c36:	7819      	ldrb	r1, [r3, #0]
     c38:	1dfb      	adds	r3, r7, #7
     c3a:	781b      	ldrb	r3, [r3, #0]
     c3c:	0018      	movs	r0, r3
     c3e:	4b0c      	ldr	r3, [pc, #48]	; (c70 <gfx_mono_ssd1306_put_byte+0x90>)
     c40:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
     c42:	1dfb      	adds	r3, r7, #7
     c44:	781b      	ldrb	r3, [r3, #0]
     c46:	0018      	movs	r0, r3
     c48:	4b0a      	ldr	r3, [pc, #40]	; (c74 <gfx_mono_ssd1306_put_byte+0x94>)
     c4a:	4798      	blx	r3
	ssd1306_set_column_address(column);
     c4c:	1dbb      	adds	r3, r7, #6
     c4e:	781b      	ldrb	r3, [r3, #0]
     c50:	0018      	movs	r0, r3
     c52:	4b09      	ldr	r3, [pc, #36]	; (c78 <gfx_mono_ssd1306_put_byte+0x98>)
     c54:	4798      	blx	r3

	ssd1306_write_data(data);
     c56:	1d7b      	adds	r3, r7, #5
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	0018      	movs	r0, r3
     c5c:	4b07      	ldr	r3, [pc, #28]	; (c7c <gfx_mono_ssd1306_put_byte+0x9c>)
     c5e:	4798      	blx	r3
     c60:	e000      	b.n	c64 <gfx_mono_ssd1306_put_byte+0x84>
		return;
     c62:	46c0      	nop			; (mov r8, r8)
}
     c64:	46bd      	mov	sp, r7
     c66:	b002      	add	sp, #8
     c68:	bdb0      	pop	{r4, r5, r7, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	000002e9 	.word	0x000002e9
     c70:	0000029d 	.word	0x0000029d
     c74:	000009c1 	.word	0x000009c1
     c78:	000009f9 	.word	0x000009f9
     c7c:	00000229 	.word	0x00000229

00000c80 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     c80:	b580      	push	{r7, lr}
     c82:	b082      	sub	sp, #8
     c84:	af00      	add	r7, sp, #0
     c86:	0002      	movs	r2, r0
     c88:	1dfb      	adds	r3, r7, #7
     c8a:	701a      	strb	r2, [r3, #0]
     c8c:	1dbb      	adds	r3, r7, #6
     c8e:	1c0a      	adds	r2, r1, #0
     c90:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     c92:	1dbb      	adds	r3, r7, #6
     c94:	781a      	ldrb	r2, [r3, #0]
     c96:	1dfb      	adds	r3, r7, #7
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	0011      	movs	r1, r2
     c9c:	0018      	movs	r0, r3
     c9e:	4b03      	ldr	r3, [pc, #12]	; (cac <gfx_mono_ssd1306_get_byte+0x2c>)
     ca0:	4798      	blx	r3
     ca2:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
     ca4:	0018      	movs	r0, r3
     ca6:	46bd      	mov	sp, r7
     ca8:	b002      	add	sp, #8
     caa:	bd80      	pop	{r7, pc}
     cac:	000002e9 	.word	0x000002e9

00000cb0 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     cb0:	b5b0      	push	{r4, r5, r7, lr}
     cb2:	b084      	sub	sp, #16
     cb4:	af00      	add	r7, sp, #0
     cb6:	0005      	movs	r5, r0
     cb8:	000c      	movs	r4, r1
     cba:	0010      	movs	r0, r2
     cbc:	0019      	movs	r1, r3
     cbe:	1dfb      	adds	r3, r7, #7
     cc0:	1c2a      	adds	r2, r5, #0
     cc2:	701a      	strb	r2, [r3, #0]
     cc4:	1dbb      	adds	r3, r7, #6
     cc6:	1c22      	adds	r2, r4, #0
     cc8:	701a      	strb	r2, [r3, #0]
     cca:	1d7b      	adds	r3, r7, #5
     ccc:	1c02      	adds	r2, r0, #0
     cce:	701a      	strb	r2, [r3, #0]
     cd0:	1d3b      	adds	r3, r7, #4
     cd2:	1c0a      	adds	r2, r1, #0
     cd4:	701a      	strb	r2, [r3, #0]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
     cd6:	230f      	movs	r3, #15
     cd8:	18fc      	adds	r4, r7, r3
     cda:	1dbb      	adds	r3, r7, #6
     cdc:	781a      	ldrb	r2, [r3, #0]
     cde:	1dfb      	adds	r3, r7, #7
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	0011      	movs	r1, r2
     ce4:	0018      	movs	r0, r3
     ce6:	4b1f      	ldr	r3, [pc, #124]	; (d64 <gfx_mono_ssd1306_mask_byte+0xb4>)
     ce8:	4798      	blx	r3
     cea:	0003      	movs	r3, r0
     cec:	7023      	strb	r3, [r4, #0]

	switch (color) {
     cee:	1d3b      	adds	r3, r7, #4
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	2b01      	cmp	r3, #1
     cf4:	d004      	beq.n	d00 <gfx_mono_ssd1306_mask_byte+0x50>
     cf6:	2b02      	cmp	r3, #2
     cf8:	d01b      	beq.n	d32 <gfx_mono_ssd1306_mask_byte+0x82>
     cfa:	2b00      	cmp	r3, #0
     cfc:	d00a      	beq.n	d14 <gfx_mono_ssd1306_mask_byte+0x64>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
     cfe:	e022      	b.n	d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp |= pixel_mask;
     d00:	230f      	movs	r3, #15
     d02:	18fb      	adds	r3, r7, r3
     d04:	220f      	movs	r2, #15
     d06:	18b9      	adds	r1, r7, r2
     d08:	1d7a      	adds	r2, r7, #5
     d0a:	7809      	ldrb	r1, [r1, #0]
     d0c:	7812      	ldrb	r2, [r2, #0]
     d0e:	430a      	orrs	r2, r1
     d10:	701a      	strb	r2, [r3, #0]
		break;
     d12:	e018      	b.n	d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp &= ~pixel_mask;
     d14:	1d7b      	adds	r3, r7, #5
     d16:	781b      	ldrb	r3, [r3, #0]
     d18:	b25b      	sxtb	r3, r3
     d1a:	43db      	mvns	r3, r3
     d1c:	b25b      	sxtb	r3, r3
     d1e:	220f      	movs	r2, #15
     d20:	18ba      	adds	r2, r7, r2
     d22:	7812      	ldrb	r2, [r2, #0]
     d24:	b252      	sxtb	r2, r2
     d26:	4013      	ands	r3, r2
     d28:	b25a      	sxtb	r2, r3
     d2a:	230f      	movs	r3, #15
     d2c:	18fb      	adds	r3, r7, r3
     d2e:	701a      	strb	r2, [r3, #0]
		break;
     d30:	e009      	b.n	d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp ^= pixel_mask;
     d32:	230f      	movs	r3, #15
     d34:	18fb      	adds	r3, r7, r3
     d36:	220f      	movs	r2, #15
     d38:	18b9      	adds	r1, r7, r2
     d3a:	1d7a      	adds	r2, r7, #5
     d3c:	7809      	ldrb	r1, [r1, #0]
     d3e:	7812      	ldrb	r2, [r2, #0]
     d40:	404a      	eors	r2, r1
     d42:	701a      	strb	r2, [r3, #0]
		break;
     d44:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, column, temp);
     d46:	230f      	movs	r3, #15
     d48:	18fb      	adds	r3, r7, r3
     d4a:	781a      	ldrb	r2, [r3, #0]
     d4c:	1dbb      	adds	r3, r7, #6
     d4e:	7819      	ldrb	r1, [r3, #0]
     d50:	1dfb      	adds	r3, r7, #7
     d52:	7818      	ldrb	r0, [r3, #0]
     d54:	2300      	movs	r3, #0
     d56:	4c04      	ldr	r4, [pc, #16]	; (d68 <gfx_mono_ssd1306_mask_byte+0xb8>)
     d58:	47a0      	blx	r4
}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	46bd      	mov	sp, r7
     d5e:	b004      	add	sp, #16
     d60:	bdb0      	pop	{r4, r5, r7, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	00000c81 	.word	0x00000c81
     d68:	00000be1 	.word	0x00000be1

00000d6c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b084      	sub	sp, #16
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d7a:	68fb      	ldr	r3, [r7, #12]
     d7c:	7e5b      	ldrb	r3, [r3, #25]
     d7e:	b2db      	uxtb	r3, r3
     d80:	b25b      	sxtb	r3, r3
     d82:	2b00      	cmp	r3, #0
     d84:	da01      	bge.n	d8a <adc_is_syncing+0x1e>
		return true;
     d86:	2301      	movs	r3, #1
     d88:	e000      	b.n	d8c <adc_is_syncing+0x20>
	}

	return false;
     d8a:	2300      	movs	r3, #0
}
     d8c:	0018      	movs	r0, r3
     d8e:	46bd      	mov	sp, r7
     d90:	b004      	add	sp, #16
     d92:	bd80      	pop	{r7, pc}

00000d94 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     d94:	b580      	push	{r7, lr}
     d96:	b084      	sub	sp, #16
     d98:	af00      	add	r7, sp, #0
     d9a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	681b      	ldr	r3, [r3, #0]
     da0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	0018      	movs	r0, r3
     da8:	4b0b      	ldr	r3, [pc, #44]	; (dd8 <adc_start_conversion+0x44>)
     daa:	4798      	blx	r3
     dac:	1e03      	subs	r3, r0, #0
     dae:	d1f9      	bne.n	da4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     db0:	68fb      	ldr	r3, [r7, #12]
     db2:	7b1b      	ldrb	r3, [r3, #12]
     db4:	b2db      	uxtb	r3, r3
     db6:	2202      	movs	r2, #2
     db8:	4313      	orrs	r3, r2
     dba:	b2da      	uxtb	r2, r3
     dbc:	68fb      	ldr	r3, [r7, #12]
     dbe:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     dc0:	46c0      	nop			; (mov r8, r8)
     dc2:	687b      	ldr	r3, [r7, #4]
     dc4:	0018      	movs	r0, r3
     dc6:	4b04      	ldr	r3, [pc, #16]	; (dd8 <adc_start_conversion+0x44>)
     dc8:	4798      	blx	r3
     dca:	1e03      	subs	r3, r0, #0
     dcc:	d1f9      	bne.n	dc2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	46bd      	mov	sp, r7
     dd2:	b004      	add	sp, #16
     dd4:	bd80      	pop	{r7, pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	00000d6d 	.word	0x00000d6d

00000ddc <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     ddc:	b580      	push	{r7, lr}
     dde:	b084      	sub	sp, #16
     de0:	af00      	add	r7, sp, #0
     de2:	6078      	str	r0, [r7, #4]
     de4:	000a      	movs	r2, r1
     de6:	1cfb      	adds	r3, r7, #3
     de8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     dea:	687b      	ldr	r3, [r7, #4]
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	1cfa      	adds	r2, r7, #3
     df4:	7812      	ldrb	r2, [r2, #0]
     df6:	759a      	strb	r2, [r3, #22]
}
     df8:	46c0      	nop			; (mov r8, r8)
     dfa:	46bd      	mov	sp, r7
     dfc:	b004      	add	sp, #16
     dfe:	bd80      	pop	{r7, pc}

00000e00 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     e00:	b580      	push	{r7, lr}
     e02:	b084      	sub	sp, #16
     e04:	af00      	add	r7, sp, #0
     e06:	0002      	movs	r2, r0
     e08:	1dfb      	adds	r3, r7, #7
     e0a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     e0c:	1dfb      	adds	r3, r7, #7
     e0e:	781a      	ldrb	r2, [r3, #0]
     e10:	4b47      	ldr	r3, [pc, #284]	; (f30 <_adc_interrupt_handler+0x130>)
     e12:	0092      	lsls	r2, r2, #2
     e14:	58d3      	ldr	r3, [r2, r3]
     e16:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     e18:	68fb      	ldr	r3, [r7, #12]
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	7e1b      	ldrb	r3, [r3, #24]
     e1e:	b2da      	uxtb	r2, r3
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	7ddb      	ldrb	r3, [r3, #23]
     e26:	b2db      	uxtb	r3, r3
     e28:	4013      	ands	r3, r2
     e2a:	b2db      	uxtb	r3, r3
     e2c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     e2e:	68bb      	ldr	r3, [r7, #8]
     e30:	2201      	movs	r2, #1
     e32:	4013      	ands	r3, r2
     e34:	d045      	beq.n	ec2 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     e36:	68fb      	ldr	r3, [r7, #12]
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	2201      	movs	r2, #1
     e3c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	68fb      	ldr	r3, [r7, #12]
     e42:	0018      	movs	r0, r3
     e44:	4b3b      	ldr	r3, [pc, #236]	; (f34 <_adc_interrupt_handler+0x134>)
     e46:	4798      	blx	r3
     e48:	1e03      	subs	r3, r0, #0
     e4a:	d1f9      	bne.n	e40 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	695b      	ldr	r3, [r3, #20]
     e50:	1c99      	adds	r1, r3, #2
     e52:	68fa      	ldr	r2, [r7, #12]
     e54:	6151      	str	r1, [r2, #20]
     e56:	68fa      	ldr	r2, [r7, #12]
     e58:	6812      	ldr	r2, [r2, #0]
     e5a:	8b52      	ldrh	r2, [r2, #26]
     e5c:	b292      	uxth	r2, r2
     e5e:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     e60:	68fb      	ldr	r3, [r7, #12]
     e62:	8b1b      	ldrh	r3, [r3, #24]
     e64:	b29b      	uxth	r3, r3
     e66:	3b01      	subs	r3, #1
     e68:	b29b      	uxth	r3, r3
     e6a:	68fa      	ldr	r2, [r7, #12]
     e6c:	1c19      	adds	r1, r3, #0
     e6e:	8311      	strh	r1, [r2, #24]
     e70:	2b00      	cmp	r3, #0
     e72:	d008      	beq.n	e86 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
     e74:	68fb      	ldr	r3, [r7, #12]
     e76:	7f5b      	ldrb	r3, [r3, #29]
     e78:	2b00      	cmp	r3, #0
     e7a:	d022      	beq.n	ec2 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     e7c:	68fb      	ldr	r3, [r7, #12]
     e7e:	0018      	movs	r0, r3
     e80:	4b2d      	ldr	r3, [pc, #180]	; (f38 <_adc_interrupt_handler+0x138>)
     e82:	4798      	blx	r3
     e84:	e01d      	b.n	ec2 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     e86:	68fb      	ldr	r3, [r7, #12]
     e88:	2101      	movs	r1, #1
     e8a:	0018      	movs	r0, r3
     e8c:	4b2b      	ldr	r3, [pc, #172]	; (f3c <_adc_interrupt_handler+0x13c>)
     e8e:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	7f1b      	ldrb	r3, [r3, #28]
     e94:	b2db      	uxtb	r3, r3
     e96:	2b05      	cmp	r3, #5
     e98:	d113      	bne.n	ec2 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
     e9a:	68fb      	ldr	r3, [r7, #12]
     e9c:	2200      	movs	r2, #0
     e9e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     ea0:	68fb      	ldr	r3, [r7, #12]
     ea2:	7edb      	ldrb	r3, [r3, #27]
     ea4:	001a      	movs	r2, r3
     ea6:	2301      	movs	r3, #1
     ea8:	4013      	ands	r3, r2
     eaa:	d00a      	beq.n	ec2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	7e9b      	ldrb	r3, [r3, #26]
     eb0:	001a      	movs	r2, r3
     eb2:	2301      	movs	r3, #1
     eb4:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     eb6:	d004      	beq.n	ec2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     eb8:	68fb      	ldr	r3, [r7, #12]
     eba:	689b      	ldr	r3, [r3, #8]
     ebc:	68fa      	ldr	r2, [r7, #12]
     ebe:	0010      	movs	r0, r2
     ec0:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     ec2:	68bb      	ldr	r3, [r7, #8]
     ec4:	2204      	movs	r2, #4
     ec6:	4013      	ands	r3, r2
     ec8:	d014      	beq.n	ef4 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     eca:	68fb      	ldr	r3, [r7, #12]
     ecc:	681b      	ldr	r3, [r3, #0]
     ece:	2204      	movs	r2, #4
     ed0:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	7edb      	ldrb	r3, [r3, #27]
     ed6:	001a      	movs	r2, r3
     ed8:	2302      	movs	r3, #2
     eda:	4013      	ands	r3, r2
     edc:	d00a      	beq.n	ef4 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     ede:	68fb      	ldr	r3, [r7, #12]
     ee0:	7e9b      	ldrb	r3, [r3, #26]
     ee2:	001a      	movs	r2, r3
     ee4:	2302      	movs	r3, #2
     ee6:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     ee8:	d004      	beq.n	ef4 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     eea:	68fb      	ldr	r3, [r7, #12]
     eec:	68db      	ldr	r3, [r3, #12]
     eee:	68fa      	ldr	r2, [r7, #12]
     ef0:	0010      	movs	r0, r2
     ef2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     ef4:	68bb      	ldr	r3, [r7, #8]
     ef6:	2202      	movs	r2, #2
     ef8:	4013      	ands	r3, r2
     efa:	d014      	beq.n	f26 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     efc:	68fb      	ldr	r3, [r7, #12]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	2202      	movs	r2, #2
     f02:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     f04:	68fb      	ldr	r3, [r7, #12]
     f06:	7edb      	ldrb	r3, [r3, #27]
     f08:	001a      	movs	r2, r3
     f0a:	2304      	movs	r3, #4
     f0c:	4013      	ands	r3, r2
     f0e:	d00a      	beq.n	f26 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	7e9b      	ldrb	r3, [r3, #26]
     f14:	001a      	movs	r2, r3
     f16:	2304      	movs	r3, #4
     f18:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     f1a:	d004      	beq.n	f26 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	691b      	ldr	r3, [r3, #16]
     f20:	68fa      	ldr	r2, [r7, #12]
     f22:	0010      	movs	r0, r2
     f24:	4798      	blx	r3
		}
	}
}
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	46bd      	mov	sp, r7
     f2a:	b004      	add	sp, #16
     f2c:	bd80      	pop	{r7, pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	200043b8 	.word	0x200043b8
     f34:	00000d6d 	.word	0x00000d6d
     f38:	00000d95 	.word	0x00000d95
     f3c:	00000ddd 	.word	0x00000ddd

00000f40 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     f40:	b580      	push	{r7, lr}
     f42:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     f44:	2000      	movs	r0, #0
     f46:	4b02      	ldr	r3, [pc, #8]	; (f50 <ADC_Handler+0x10>)
     f48:	4798      	blx	r3
}
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	46bd      	mov	sp, r7
     f4e:	bd80      	pop	{r7, pc}
     f50:	00000e01 	.word	0x00000e01

00000f54 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     f54:	b580      	push	{r7, lr}
     f56:	b082      	sub	sp, #8
     f58:	af00      	add	r7, sp, #0
     f5a:	0002      	movs	r2, r0
     f5c:	1dfb      	adds	r3, r7, #7
     f5e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f60:	4a07      	ldr	r2, [pc, #28]	; (f80 <system_interrupt_disable+0x2c>)
     f62:	1dfb      	adds	r3, r7, #7
     f64:	781b      	ldrb	r3, [r3, #0]
     f66:	0019      	movs	r1, r3
     f68:	231f      	movs	r3, #31
     f6a:	400b      	ands	r3, r1
     f6c:	2101      	movs	r1, #1
     f6e:	4099      	lsls	r1, r3
     f70:	000b      	movs	r3, r1
     f72:	0019      	movs	r1, r3
     f74:	2380      	movs	r3, #128	; 0x80
     f76:	50d1      	str	r1, [r2, r3]
}
     f78:	46c0      	nop			; (mov r8, r8)
     f7a:	46bd      	mov	sp, r7
     f7c:	b002      	add	sp, #8
     f7e:	bd80      	pop	{r7, pc}
     f80:	e000e100 	.word	0xe000e100

00000f84 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
     f84:	b580      	push	{r7, lr}
     f86:	b084      	sub	sp, #16
     f88:	af00      	add	r7, sp, #0
     f8a:	0002      	movs	r2, r0
     f8c:	1dfb      	adds	r3, r7, #7
     f8e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
     f90:	1dfb      	adds	r3, r7, #7
     f92:	781a      	ldrb	r2, [r3, #0]
     f94:	4b37      	ldr	r3, [pc, #220]	; (1074 <_dac_interrupt_handler+0xf0>)
     f96:	0092      	lsls	r2, r2, #2
     f98:	58d3      	ldr	r3, [r2, r3]
     f9a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
     f9c:	68fb      	ldr	r3, [r7, #12]
     f9e:	681b      	ldr	r3, [r3, #0]
     fa0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     fa2:	68bb      	ldr	r3, [r7, #8]
     fa4:	799b      	ldrb	r3, [r3, #6]
     fa6:	b2db      	uxtb	r3, r3
     fa8:	001a      	movs	r2, r3
     faa:	2301      	movs	r3, #1
     fac:	4013      	ands	r3, r2
     fae:	d00e      	beq.n	fce <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     fb0:	68bb      	ldr	r3, [r7, #8]
     fb2:	2201      	movs	r2, #1
     fb4:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
     fb6:	68fb      	ldr	r3, [r7, #12]
     fb8:	3314      	adds	r3, #20
     fba:	2b00      	cmp	r3, #0
     fbc:	d007      	beq.n	fce <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
     fbe:	68fb      	ldr	r3, [r7, #12]
     fc0:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
     fc2:	2b00      	cmp	r3, #0
     fc4:	d003      	beq.n	fce <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     fc6:	68fb      	ldr	r3, [r7, #12]
     fc8:	699b      	ldr	r3, [r3, #24]
     fca:	2000      	movs	r0, #0
     fcc:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     fce:	68bb      	ldr	r3, [r7, #8]
     fd0:	799b      	ldrb	r3, [r3, #6]
     fd2:	b2db      	uxtb	r3, r3
     fd4:	001a      	movs	r2, r3
     fd6:	2302      	movs	r3, #2
     fd8:	4013      	ands	r3, r2
     fda:	d047      	beq.n	106c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     fdc:	68bb      	ldr	r3, [r7, #8]
     fde:	2202      	movs	r2, #2
     fe0:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	899b      	ldrh	r3, [r3, #12]
     fe6:	b29b      	uxth	r3, r3
     fe8:	2b00      	cmp	r3, #0
     fea:	d033      	beq.n	1054 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
     fec:	68fb      	ldr	r3, [r7, #12]
     fee:	689a      	ldr	r2, [r3, #8]
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	89db      	ldrh	r3, [r3, #14]
     ff4:	b29b      	uxth	r3, r3
     ff6:	1c59      	adds	r1, r3, #1
     ff8:	b288      	uxth	r0, r1
     ffa:	68f9      	ldr	r1, [r7, #12]
     ffc:	81c8      	strh	r0, [r1, #14]
     ffe:	005b      	lsls	r3, r3, #1
    1000:	18d3      	adds	r3, r2, r3
    1002:	881b      	ldrh	r3, [r3, #0]
    1004:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    1006:	68bb      	ldr	r3, [r7, #8]
    1008:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	899b      	ldrh	r3, [r3, #12]
    100e:	b29b      	uxth	r3, r3
    1010:	3b01      	subs	r3, #1
    1012:	b29a      	uxth	r2, r3
    1014:	68fb      	ldr	r3, [r7, #12]
    1016:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    1018:	68fb      	ldr	r3, [r7, #12]
    101a:	899b      	ldrh	r3, [r3, #12]
    101c:	b29b      	uxth	r3, r3
    101e:	2b00      	cmp	r3, #0
    1020:	d118      	bne.n	1054 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    1022:	68fb      	ldr	r3, [r7, #12]
    1024:	2220      	movs	r2, #32
    1026:	2100      	movs	r1, #0
    1028:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    102a:	68bb      	ldr	r3, [r7, #8]
    102c:	2202      	movs	r2, #2
    102e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    1030:	68bb      	ldr	r3, [r7, #8]
    1032:	2202      	movs	r2, #2
    1034:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    1036:	2019      	movs	r0, #25
    1038:	4b0f      	ldr	r3, [pc, #60]	; (1078 <_dac_interrupt_handler+0xf4>)
    103a:	4798      	blx	r3

				if ((module->callback) &&
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	3314      	adds	r3, #20
    1040:	2b00      	cmp	r3, #0
    1042:	d007      	beq.n	1054 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    1044:	68fb      	ldr	r3, [r7, #12]
    1046:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    1048:	2b00      	cmp	r3, #0
    104a:	d003      	beq.n	1054 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	69db      	ldr	r3, [r3, #28]
    1050:	2000      	movs	r0, #0
    1052:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    1054:	68fb      	ldr	r3, [r7, #12]
    1056:	3314      	adds	r3, #20
    1058:	2b00      	cmp	r3, #0
    105a:	d007      	beq.n	106c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    105c:	68fb      	ldr	r3, [r7, #12]
    105e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    1060:	2b00      	cmp	r3, #0
    1062:	d003      	beq.n	106c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    1064:	68fb      	ldr	r3, [r7, #12]
    1066:	695b      	ldr	r3, [r3, #20]
    1068:	2000      	movs	r0, #0
    106a:	4798      	blx	r3
		}
	}
}
    106c:	46c0      	nop			; (mov r8, r8)
    106e:	46bd      	mov	sp, r7
    1070:	b004      	add	sp, #16
    1072:	bd80      	pop	{r7, pc}
    1074:	200043bc 	.word	0x200043bc
    1078:	00000f55 	.word	0x00000f55

0000107c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    107c:	b580      	push	{r7, lr}
    107e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    1080:	2000      	movs	r0, #0
    1082:	4b02      	ldr	r3, [pc, #8]	; (108c <DAC_Handler+0x10>)
    1084:	4798      	blx	r3
}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	46bd      	mov	sp, r7
    108a:	bd80      	pop	{r7, pc}
    108c:	00000f85 	.word	0x00000f85

00001090 <system_interrupt_enter_critical_section>:
{
    1090:	b580      	push	{r7, lr}
    1092:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1094:	4b02      	ldr	r3, [pc, #8]	; (10a0 <system_interrupt_enter_critical_section+0x10>)
    1096:	4798      	blx	r3
}
    1098:	46c0      	nop			; (mov r8, r8)
    109a:	46bd      	mov	sp, r7
    109c:	bd80      	pop	{r7, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	000154ad 	.word	0x000154ad

000010a4 <system_interrupt_leave_critical_section>:
{
    10a4:	b580      	push	{r7, lr}
    10a6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    10a8:	4b02      	ldr	r3, [pc, #8]	; (10b4 <system_interrupt_leave_critical_section+0x10>)
    10aa:	4798      	blx	r3
}
    10ac:	46c0      	nop			; (mov r8, r8)
    10ae:	46bd      	mov	sp, r7
    10b0:	bd80      	pop	{r7, pc}
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	00015501 	.word	0x00015501

000010b8 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b086      	sub	sp, #24
    10bc:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    10be:	4b49      	ldr	r3, [pc, #292]	; (11e4 <DMAC_Handler+0x12c>)
    10c0:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    10c2:	4b49      	ldr	r3, [pc, #292]	; (11e8 <DMAC_Handler+0x130>)
    10c4:	8c1b      	ldrh	r3, [r3, #32]
    10c6:	b29b      	uxth	r3, r3
    10c8:	b2da      	uxtb	r2, r3
    10ca:	2317      	movs	r3, #23
    10cc:	18fb      	adds	r3, r7, r3
    10ce:	210f      	movs	r1, #15
    10d0:	400a      	ands	r2, r1
    10d2:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    10d4:	2317      	movs	r3, #23
    10d6:	18fb      	adds	r3, r7, r3
    10d8:	781a      	ldrb	r2, [r3, #0]
    10da:	4b44      	ldr	r3, [pc, #272]	; (11ec <DMAC_Handler+0x134>)
    10dc:	0092      	lsls	r2, r2, #2
    10de:	58d3      	ldr	r3, [r2, r3]
    10e0:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    10e2:	4a41      	ldr	r2, [pc, #260]	; (11e8 <DMAC_Handler+0x130>)
    10e4:	693b      	ldr	r3, [r7, #16]
    10e6:	781b      	ldrb	r3, [r3, #0]
    10e8:	210f      	movs	r1, #15
    10ea:	400b      	ands	r3, r1
    10ec:	b2d9      	uxtb	r1, r3
    10ee:	233f      	movs	r3, #63	; 0x3f
    10f0:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    10f2:	493d      	ldr	r1, [pc, #244]	; (11e8 <DMAC_Handler+0x130>)
    10f4:	230f      	movs	r3, #15
    10f6:	18fb      	adds	r3, r7, r3
    10f8:	224e      	movs	r2, #78	; 0x4e
    10fa:	5c8a      	ldrb	r2, [r1, r2]
    10fc:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    10fe:	693b      	ldr	r3, [r7, #16]
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	4a3b      	ldr	r2, [pc, #236]	; (11f0 <DMAC_Handler+0x138>)
    1104:	011b      	lsls	r3, r3, #4
    1106:	18d3      	adds	r3, r2, r3
    1108:	3302      	adds	r3, #2
    110a:	881b      	ldrh	r3, [r3, #0]
    110c:	b29b      	uxth	r3, r3
    110e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    1110:	693b      	ldr	r3, [r7, #16]
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	4a37      	ldr	r2, [pc, #220]	; (11f4 <DMAC_Handler+0x13c>)
    1116:	011b      	lsls	r3, r3, #4
    1118:	18d3      	adds	r3, r2, r3
    111a:	3302      	adds	r3, #2
    111c:	881b      	ldrh	r3, [r3, #0]
    111e:	b29b      	uxth	r3, r3
    1120:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    1122:	68ba      	ldr	r2, [r7, #8]
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	1ad2      	subs	r2, r2, r3
    1128:	693b      	ldr	r3, [r7, #16]
    112a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    112c:	230f      	movs	r3, #15
    112e:	18fb      	adds	r3, r7, r3
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	2201      	movs	r2, #1
    1134:	4013      	ands	r3, r2
    1136:	d016      	beq.n	1166 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    1138:	4a2b      	ldr	r2, [pc, #172]	; (11e8 <DMAC_Handler+0x130>)
    113a:	234e      	movs	r3, #78	; 0x4e
    113c:	2101      	movs	r1, #1
    113e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    1140:	693b      	ldr	r3, [r7, #16]
    1142:	2210      	movs	r2, #16
    1144:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    1146:	693b      	ldr	r3, [r7, #16]
    1148:	7c1b      	ldrb	r3, [r3, #16]
    114a:	001a      	movs	r2, r3
    114c:	2301      	movs	r3, #1
    114e:	4013      	ands	r3, r2
    1150:	d042      	beq.n	11d8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    1152:	693b      	ldr	r3, [r7, #16]
    1154:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    1156:	2b00      	cmp	r3, #0
    1158:	d03e      	beq.n	11d8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    115a:	693b      	ldr	r3, [r7, #16]
    115c:	685b      	ldr	r3, [r3, #4]
    115e:	693a      	ldr	r2, [r7, #16]
    1160:	0010      	movs	r0, r2
    1162:	4798      	blx	r3
    1164:	e038      	b.n	11d8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    1166:	230f      	movs	r3, #15
    1168:	18fb      	adds	r3, r7, r3
    116a:	781b      	ldrb	r3, [r3, #0]
    116c:	2202      	movs	r2, #2
    116e:	4013      	ands	r3, r2
    1170:	d016      	beq.n	11a0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    1172:	4a1d      	ldr	r2, [pc, #116]	; (11e8 <DMAC_Handler+0x130>)
    1174:	234e      	movs	r3, #78	; 0x4e
    1176:	2102      	movs	r1, #2
    1178:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    117a:	693b      	ldr	r3, [r7, #16]
    117c:	2200      	movs	r2, #0
    117e:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    1180:	693b      	ldr	r3, [r7, #16]
    1182:	7c1b      	ldrb	r3, [r3, #16]
    1184:	001a      	movs	r2, r3
    1186:	2302      	movs	r3, #2
    1188:	4013      	ands	r3, r2
    118a:	d025      	beq.n	11d8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    118c:	693b      	ldr	r3, [r7, #16]
    118e:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    1190:	2b00      	cmp	r3, #0
    1192:	d021      	beq.n	11d8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    1194:	693b      	ldr	r3, [r7, #16]
    1196:	689b      	ldr	r3, [r3, #8]
    1198:	693a      	ldr	r2, [r7, #16]
    119a:	0010      	movs	r0, r2
    119c:	4798      	blx	r3
    119e:	e01b      	b.n	11d8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    11a0:	230f      	movs	r3, #15
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	781b      	ldrb	r3, [r3, #0]
    11a6:	2204      	movs	r2, #4
    11a8:	4013      	ands	r3, r2
    11aa:	d015      	beq.n	11d8 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    11ac:	4a0e      	ldr	r2, [pc, #56]	; (11e8 <DMAC_Handler+0x130>)
    11ae:	234e      	movs	r3, #78	; 0x4e
    11b0:	2104      	movs	r1, #4
    11b2:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    11b4:	693b      	ldr	r3, [r7, #16]
    11b6:	2206      	movs	r2, #6
    11b8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    11ba:	693b      	ldr	r3, [r7, #16]
    11bc:	7c1b      	ldrb	r3, [r3, #16]
    11be:	001a      	movs	r2, r3
    11c0:	2304      	movs	r3, #4
    11c2:	4013      	ands	r3, r2
    11c4:	d008      	beq.n	11d8 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    11c6:	693b      	ldr	r3, [r7, #16]
    11c8:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    11ca:	2b00      	cmp	r3, #0
    11cc:	d004      	beq.n	11d8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    11ce:	693b      	ldr	r3, [r7, #16]
    11d0:	68db      	ldr	r3, [r3, #12]
    11d2:	693a      	ldr	r2, [r7, #16]
    11d4:	0010      	movs	r0, r2
    11d6:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    11d8:	4b07      	ldr	r3, [pc, #28]	; (11f8 <DMAC_Handler+0x140>)
    11da:	4798      	blx	r3
}
    11dc:	46c0      	nop			; (mov r8, r8)
    11de:	46bd      	mov	sp, r7
    11e0:	b006      	add	sp, #24
    11e2:	bd80      	pop	{r7, pc}
    11e4:	00001091 	.word	0x00001091
    11e8:	41004800 	.word	0x41004800
    11ec:	20000510 	.word	0x20000510
    11f0:	200043c0 	.word	0x200043c0
    11f4:	200004c0 	.word	0x200004c0
    11f8:	000010a5 	.word	0x000010a5

000011fc <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
    11fc:	b580      	push	{r7, lr}
    11fe:	b082      	sub	sp, #8
    1200:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
    1202:	4b15      	ldr	r3, [pc, #84]	; (1258 <EVSYS_Handler+0x5c>)
    1204:	691b      	ldr	r3, [r3, #16]
    1206:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    1208:	4b14      	ldr	r3, [pc, #80]	; (125c <EVSYS_Handler+0x60>)
    120a:	699b      	ldr	r3, [r3, #24]
    120c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
    120e:	4b12      	ldr	r3, [pc, #72]	; (1258 <EVSYS_Handler+0x5c>)
    1210:	689a      	ldr	r2, [r3, #8]
    1212:	683b      	ldr	r3, [r7, #0]
    1214:	431a      	orrs	r2, r3
    1216:	4b10      	ldr	r3, [pc, #64]	; (1258 <EVSYS_Handler+0x5c>)
    1218:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    121a:	4b10      	ldr	r3, [pc, #64]	; (125c <EVSYS_Handler+0x60>)
    121c:	4a10      	ldr	r2, [pc, #64]	; (1260 <EVSYS_Handler+0x64>)
    121e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    1220:	e008      	b.n	1234 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
    1222:	687b      	ldr	r3, [r7, #4]
    1224:	685a      	ldr	r2, [r3, #4]
    1226:	687b      	ldr	r3, [r7, #4]
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	0018      	movs	r0, r3
    122c:	4790      	blx	r2
		current_hook = current_hook->next;
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	689b      	ldr	r3, [r3, #8]
    1232:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	2b00      	cmp	r3, #0
    1238:	d1f3      	bne.n	1222 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    123a:	4b07      	ldr	r3, [pc, #28]	; (1258 <EVSYS_Handler+0x5c>)
    123c:	68db      	ldr	r3, [r3, #12]
    123e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
    1240:	4b05      	ldr	r3, [pc, #20]	; (1258 <EVSYS_Handler+0x5c>)
    1242:	689b      	ldr	r3, [r3, #8]
    1244:	683a      	ldr	r2, [r7, #0]
    1246:	43d2      	mvns	r2, r2
    1248:	401a      	ands	r2, r3
    124a:	4b03      	ldr	r3, [pc, #12]	; (1258 <EVSYS_Handler+0x5c>)
    124c:	609a      	str	r2, [r3, #8]
}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	46bd      	mov	sp, r7
    1252:	b002      	add	sp, #8
    1254:	bd80      	pop	{r7, pc}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	20000000 	.word	0x20000000
    125c:	42000400 	.word	0x42000400
    1260:	0f0fffff 	.word	0x0f0fffff

00001264 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1264:	b580      	push	{r7, lr}
    1266:	b082      	sub	sp, #8
    1268:	af00      	add	r7, sp, #0
    126a:	0002      	movs	r2, r0
    126c:	6039      	str	r1, [r7, #0]
    126e:	1dfb      	adds	r3, r7, #7
    1270:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1272:	1dfb      	adds	r3, r7, #7
    1274:	781b      	ldrb	r3, [r3, #0]
    1276:	2b01      	cmp	r3, #1
    1278:	d00a      	beq.n	1290 <system_apb_clock_set_mask+0x2c>
    127a:	2b02      	cmp	r3, #2
    127c:	d00f      	beq.n	129e <system_apb_clock_set_mask+0x3a>
    127e:	2b00      	cmp	r3, #0
    1280:	d114      	bne.n	12ac <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1282:	4b0e      	ldr	r3, [pc, #56]	; (12bc <system_apb_clock_set_mask+0x58>)
    1284:	4a0d      	ldr	r2, [pc, #52]	; (12bc <system_apb_clock_set_mask+0x58>)
    1286:	6991      	ldr	r1, [r2, #24]
    1288:	683a      	ldr	r2, [r7, #0]
    128a:	430a      	orrs	r2, r1
    128c:	619a      	str	r2, [r3, #24]
			break;
    128e:	e00f      	b.n	12b0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1290:	4b0a      	ldr	r3, [pc, #40]	; (12bc <system_apb_clock_set_mask+0x58>)
    1292:	4a0a      	ldr	r2, [pc, #40]	; (12bc <system_apb_clock_set_mask+0x58>)
    1294:	69d1      	ldr	r1, [r2, #28]
    1296:	683a      	ldr	r2, [r7, #0]
    1298:	430a      	orrs	r2, r1
    129a:	61da      	str	r2, [r3, #28]
			break;
    129c:	e008      	b.n	12b0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    129e:	4b07      	ldr	r3, [pc, #28]	; (12bc <system_apb_clock_set_mask+0x58>)
    12a0:	4a06      	ldr	r2, [pc, #24]	; (12bc <system_apb_clock_set_mask+0x58>)
    12a2:	6a11      	ldr	r1, [r2, #32]
    12a4:	683a      	ldr	r2, [r7, #0]
    12a6:	430a      	orrs	r2, r1
    12a8:	621a      	str	r2, [r3, #32]
			break;
    12aa:	e001      	b.n	12b0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    12ac:	2317      	movs	r3, #23
    12ae:	e000      	b.n	12b2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    12b0:	2300      	movs	r3, #0
}
    12b2:	0018      	movs	r0, r3
    12b4:	46bd      	mov	sp, r7
    12b6:	b002      	add	sp, #8
    12b8:	bd80      	pop	{r7, pc}
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	40000400 	.word	0x40000400

000012c0 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
    12c0:	b580      	push	{r7, lr}
    12c2:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
    12c4:	2102      	movs	r1, #2
    12c6:	2002      	movs	r0, #2
    12c8:	4b07      	ldr	r3, [pc, #28]	; (12e8 <_system_events_init+0x28>)
    12ca:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    12cc:	4b07      	ldr	r3, [pc, #28]	; (12ec <_system_events_init+0x2c>)
    12ce:	2201      	movs	r2, #1
    12d0:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	4b05      	ldr	r3, [pc, #20]	; (12ec <_system_events_init+0x2c>)
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	b2db      	uxtb	r3, r3
    12da:	001a      	movs	r2, r3
    12dc:	2301      	movs	r3, #1
    12de:	4013      	ands	r3, r2
    12e0:	d1f8      	bne.n	12d4 <_system_events_init+0x14>
	}
}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	46bd      	mov	sp, r7
    12e6:	bd80      	pop	{r7, pc}
    12e8:	00001265 	.word	0x00001265
    12ec:	42000400 	.word	0x42000400

000012f0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    12f0:	b580      	push	{r7, lr}
    12f2:	b084      	sub	sp, #16
    12f4:	af00      	add	r7, sp, #0
    12f6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    12f8:	687b      	ldr	r3, [r7, #4]
    12fa:	681b      	ldr	r3, [r3, #0]
    12fc:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    12fe:	68fb      	ldr	r3, [r7, #12]
    1300:	69db      	ldr	r3, [r3, #28]
    1302:	2207      	movs	r2, #7
    1304:	4013      	ands	r3, r2
    1306:	1e5a      	subs	r2, r3, #1
    1308:	4193      	sbcs	r3, r2
    130a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    130c:	0018      	movs	r0, r3
    130e:	46bd      	mov	sp, r7
    1310:	b004      	add	sp, #16
    1312:	bd80      	pop	{r7, pc}

00001314 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1314:	b580      	push	{r7, lr}
    1316:	b082      	sub	sp, #8
    1318:	af00      	add	r7, sp, #0
    131a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    131c:	46c0      	nop			; (mov r8, r8)
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	0018      	movs	r0, r3
    1322:	4b04      	ldr	r3, [pc, #16]	; (1334 <_i2c_master_wait_for_sync+0x20>)
    1324:	4798      	blx	r3
    1326:	1e03      	subs	r3, r0, #0
    1328:	d1f9      	bne.n	131e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	46bd      	mov	sp, r7
    132e:	b002      	add	sp, #8
    1330:	bd80      	pop	{r7, pc}
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	000012f1 	.word	0x000012f1

00001338 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1338:	b580      	push	{r7, lr}
    133a:	b084      	sub	sp, #16
    133c:	af00      	add	r7, sp, #0
    133e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1346:	68fb      	ldr	r3, [r7, #12]
    1348:	681b      	ldr	r3, [r3, #0]
    134a:	011b      	lsls	r3, r3, #4
    134c:	0fdb      	lsrs	r3, r3, #31
    134e:	b2db      	uxtb	r3, r3
    1350:	001a      	movs	r2, r3
    1352:	230b      	movs	r3, #11
    1354:	18fb      	adds	r3, r7, r3
    1356:	1e51      	subs	r1, r2, #1
    1358:	418a      	sbcs	r2, r1
    135a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    135c:	2308      	movs	r3, #8
    135e:	18fb      	adds	r3, r7, r3
    1360:	687a      	ldr	r2, [r7, #4]
    1362:	8b52      	ldrh	r2, [r2, #26]
    1364:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	8b9b      	ldrh	r3, [r3, #28]
    136a:	b29a      	uxth	r2, r3
    136c:	2308      	movs	r3, #8
    136e:	18fb      	adds	r3, r7, r3
    1370:	2108      	movs	r1, #8
    1372:	1879      	adds	r1, r7, r1
    1374:	8809      	ldrh	r1, [r1, #0]
    1376:	1a8a      	subs	r2, r1, r2
    1378:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	8b9b      	ldrh	r3, [r3, #28]
    137e:	b29b      	uxth	r3, r3
    1380:	3b01      	subs	r3, #1
    1382:	b29a      	uxth	r2, r3
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1388:	230b      	movs	r3, #11
    138a:	18fb      	adds	r3, r7, r3
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	2b00      	cmp	r3, #0
    1390:	d010      	beq.n	13b4 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    1392:	687b      	ldr	r3, [r7, #4]
    1394:	7adb      	ldrb	r3, [r3, #11]
    1396:	2b00      	cmp	r3, #0
    1398:	d01c      	beq.n	13d4 <_i2c_master_read+0x9c>
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	8b9b      	ldrh	r3, [r3, #28]
    139e:	b29b      	uxth	r3, r3
    13a0:	2b01      	cmp	r3, #1
    13a2:	d117      	bne.n	13d4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13a4:	68fb      	ldr	r3, [r7, #12]
    13a6:	685b      	ldr	r3, [r3, #4]
    13a8:	2280      	movs	r2, #128	; 0x80
    13aa:	02d2      	lsls	r2, r2, #11
    13ac:	431a      	orrs	r2, r3
    13ae:	68fb      	ldr	r3, [r7, #12]
    13b0:	605a      	str	r2, [r3, #4]
    13b2:	e00f      	b.n	13d4 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    13b4:	687b      	ldr	r3, [r7, #4]
    13b6:	7adb      	ldrb	r3, [r3, #11]
    13b8:	2b00      	cmp	r3, #0
    13ba:	d00b      	beq.n	13d4 <_i2c_master_read+0x9c>
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	8b9b      	ldrh	r3, [r3, #28]
    13c0:	b29b      	uxth	r3, r3
    13c2:	2b00      	cmp	r3, #0
    13c4:	d106      	bne.n	13d4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13c6:	68fb      	ldr	r3, [r7, #12]
    13c8:	685b      	ldr	r3, [r3, #4]
    13ca:	2280      	movs	r2, #128	; 0x80
    13cc:	02d2      	lsls	r2, r2, #11
    13ce:	431a      	orrs	r2, r3
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    13d4:	687b      	ldr	r3, [r7, #4]
    13d6:	8b9b      	ldrh	r3, [r3, #28]
    13d8:	b29b      	uxth	r3, r3
    13da:	2b00      	cmp	r3, #0
    13dc:	d10e      	bne.n	13fc <_i2c_master_read+0xc4>
		if (module->send_stop) {
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	7a9b      	ldrb	r3, [r3, #10]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d00a      	beq.n	13fc <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	0018      	movs	r0, r3
    13ea:	4b0e      	ldr	r3, [pc, #56]	; (1424 <_i2c_master_read+0xec>)
    13ec:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    13ee:	68fb      	ldr	r3, [r7, #12]
    13f0:	685b      	ldr	r3, [r3, #4]
    13f2:	22c0      	movs	r2, #192	; 0xc0
    13f4:	0292      	lsls	r2, r2, #10
    13f6:	431a      	orrs	r2, r3
    13f8:	68fb      	ldr	r3, [r7, #12]
    13fa:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	0018      	movs	r0, r3
    1400:	4b08      	ldr	r3, [pc, #32]	; (1424 <_i2c_master_read+0xec>)
    1402:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	6a1a      	ldr	r2, [r3, #32]
    1408:	2308      	movs	r3, #8
    140a:	18fb      	adds	r3, r7, r3
    140c:	881b      	ldrh	r3, [r3, #0]
    140e:	18d3      	adds	r3, r2, r3
    1410:	68fa      	ldr	r2, [r7, #12]
    1412:	2128      	movs	r1, #40	; 0x28
    1414:	5c52      	ldrb	r2, [r2, r1]
    1416:	b2d2      	uxtb	r2, r2
    1418:	701a      	strb	r2, [r3, #0]
}
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	46bd      	mov	sp, r7
    141e:	b004      	add	sp, #16
    1420:	bd80      	pop	{r7, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	00001315 	.word	0x00001315

00001428 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1428:	b580      	push	{r7, lr}
    142a:	b084      	sub	sp, #16
    142c:	af00      	add	r7, sp, #0
    142e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	681b      	ldr	r3, [r3, #0]
    1434:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1436:	68fb      	ldr	r3, [r7, #12]
    1438:	8b5b      	ldrh	r3, [r3, #26]
    143a:	b29b      	uxth	r3, r3
    143c:	001a      	movs	r2, r3
    143e:	2304      	movs	r3, #4
    1440:	4013      	ands	r3, r2
    1442:	d004      	beq.n	144e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	2225      	movs	r2, #37	; 0x25
    1448:	211e      	movs	r1, #30
    144a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    144c:	e024      	b.n	1498 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    144e:	230a      	movs	r3, #10
    1450:	18fb      	adds	r3, r7, r3
    1452:	687a      	ldr	r2, [r7, #4]
    1454:	8b52      	ldrh	r2, [r2, #26]
    1456:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	8b9b      	ldrh	r3, [r3, #28]
    145c:	b29a      	uxth	r2, r3
    145e:	230a      	movs	r3, #10
    1460:	18fb      	adds	r3, r7, r3
    1462:	210a      	movs	r1, #10
    1464:	1879      	adds	r1, r7, r1
    1466:	8809      	ldrh	r1, [r1, #0]
    1468:	1a8a      	subs	r2, r1, r2
    146a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	8b9b      	ldrh	r3, [r3, #28]
    1470:	b29b      	uxth	r3, r3
    1472:	3b01      	subs	r3, #1
    1474:	b29a      	uxth	r2, r3
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	0018      	movs	r0, r3
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <_i2c_master_write+0x78>)
    1480:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	6a1a      	ldr	r2, [r3, #32]
    1486:	230a      	movs	r3, #10
    1488:	18fb      	adds	r3, r7, r3
    148a:	881b      	ldrh	r3, [r3, #0]
    148c:	18d3      	adds	r3, r2, r3
    148e:	781b      	ldrb	r3, [r3, #0]
    1490:	b2d9      	uxtb	r1, r3
    1492:	68fb      	ldr	r3, [r7, #12]
    1494:	2228      	movs	r2, #40	; 0x28
    1496:	5499      	strb	r1, [r3, r2]
}
    1498:	46bd      	mov	sp, r7
    149a:	b004      	add	sp, #16
    149c:	bd80      	pop	{r7, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	00001315 	.word	0x00001315

000014a4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b084      	sub	sp, #16
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14ac:	687b      	ldr	r3, [r7, #4]
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    14b2:	68fb      	ldr	r3, [r7, #12]
    14b4:	7e1b      	ldrb	r3, [r3, #24]
    14b6:	b2db      	uxtb	r3, r3
    14b8:	001a      	movs	r2, r3
    14ba:	2301      	movs	r3, #1
    14bc:	4013      	ands	r3, r2
    14be:	d02b      	beq.n	1518 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    14c0:	68fb      	ldr	r3, [r7, #12]
    14c2:	2201      	movs	r2, #1
    14c4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    14c6:	68fb      	ldr	r3, [r7, #12]
    14c8:	8b5b      	ldrh	r3, [r3, #26]
    14ca:	b29b      	uxth	r3, r3
    14cc:	001a      	movs	r2, r3
    14ce:	2302      	movs	r3, #2
    14d0:	4013      	ands	r3, r2
    14d2:	d004      	beq.n	14de <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	2225      	movs	r2, #37	; 0x25
    14d8:	2141      	movs	r1, #65	; 0x41
    14da:	5499      	strb	r1, [r3, r2]
    14dc:	e01c      	b.n	1518 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    14de:	68fb      	ldr	r3, [r7, #12]
    14e0:	8b5b      	ldrh	r3, [r3, #26]
    14e2:	b29b      	uxth	r3, r3
    14e4:	001a      	movs	r2, r3
    14e6:	2304      	movs	r3, #4
    14e8:	4013      	ands	r3, r2
    14ea:	d015      	beq.n	1518 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	2225      	movs	r2, #37	; 0x25
    14f0:	2118      	movs	r1, #24
    14f2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    14f4:	687b      	ldr	r3, [r7, #4]
    14f6:	2200      	movs	r2, #0
    14f8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	7a9b      	ldrb	r3, [r3, #10]
    14fe:	2b00      	cmp	r3, #0
    1500:	d00a      	beq.n	1518 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	0018      	movs	r0, r3
    1506:	4b13      	ldr	r3, [pc, #76]	; (1554 <_i2c_master_async_address_response+0xb0>)
    1508:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    150a:	68fb      	ldr	r3, [r7, #12]
    150c:	685b      	ldr	r3, [r3, #4]
    150e:	22c0      	movs	r2, #192	; 0xc0
    1510:	0292      	lsls	r2, r2, #10
    1512:	431a      	orrs	r2, r3
    1514:	68fb      	ldr	r3, [r7, #12]
    1516:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1518:	687b      	ldr	r3, [r7, #4]
    151a:	8b9b      	ldrh	r3, [r3, #28]
    151c:	b29a      	uxth	r2, r3
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	2225      	movs	r2, #37	; 0x25
    1526:	5c9b      	ldrb	r3, [r3, r2]
    1528:	b2db      	uxtb	r3, r3
    152a:	2b05      	cmp	r3, #5
    152c:	d10e      	bne.n	154c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	2224      	movs	r2, #36	; 0x24
    1532:	5c9b      	ldrb	r3, [r3, r2]
    1534:	b2db      	uxtb	r3, r3
    1536:	2b00      	cmp	r3, #0
    1538:	d104      	bne.n	1544 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    153a:	687b      	ldr	r3, [r7, #4]
    153c:	0018      	movs	r0, r3
    153e:	4b06      	ldr	r3, [pc, #24]	; (1558 <_i2c_master_async_address_response+0xb4>)
    1540:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1542:	e003      	b.n	154c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1544:	687b      	ldr	r3, [r7, #4]
    1546:	0018      	movs	r0, r3
    1548:	4b04      	ldr	r3, [pc, #16]	; (155c <_i2c_master_async_address_response+0xb8>)
    154a:	4798      	blx	r3
}
    154c:	46c0      	nop			; (mov r8, r8)
    154e:	46bd      	mov	sp, r7
    1550:	b004      	add	sp, #16
    1552:	bd80      	pop	{r7, pc}
    1554:	00001315 	.word	0x00001315
    1558:	00001429 	.word	0x00001429
    155c:	00001339 	.word	0x00001339

00001560 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    1560:	b580      	push	{r7, lr}
    1562:	b084      	sub	sp, #16
    1564:	af00      	add	r7, sp, #0
    1566:	60f8      	str	r0, [r7, #12]
    1568:	60b9      	str	r1, [r7, #8]
    156a:	1dfb      	adds	r3, r7, #7
    156c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    156e:	1dfb      	adds	r3, r7, #7
    1570:	781b      	ldrb	r3, [r3, #0]
    1572:	68fa      	ldr	r2, [r7, #12]
    1574:	3302      	adds	r3, #2
    1576:	009b      	lsls	r3, r3, #2
    1578:	18d3      	adds	r3, r2, r3
    157a:	3304      	adds	r3, #4
    157c:	68ba      	ldr	r2, [r7, #8]
    157e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    1580:	68fb      	ldr	r3, [r7, #12]
    1582:	7e1b      	ldrb	r3, [r3, #24]
    1584:	b2db      	uxtb	r3, r3
    1586:	b25a      	sxtb	r2, r3
    1588:	1dfb      	adds	r3, r7, #7
    158a:	781b      	ldrb	r3, [r3, #0]
    158c:	2101      	movs	r1, #1
    158e:	4099      	lsls	r1, r3
    1590:	000b      	movs	r3, r1
    1592:	b25b      	sxtb	r3, r3
    1594:	4313      	orrs	r3, r2
    1596:	b25b      	sxtb	r3, r3
    1598:	b2da      	uxtb	r2, r3
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	761a      	strb	r2, [r3, #24]
}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	46bd      	mov	sp, r7
    15a2:	b004      	add	sp, #16
    15a4:	bd80      	pop	{r7, pc}
	...

000015a8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    15a8:	b590      	push	{r4, r7, lr}
    15aa:	b087      	sub	sp, #28
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
    15b0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15b2:	687b      	ldr	r3, [r7, #4]
    15b4:	681b      	ldr	r3, [r3, #0]
    15b6:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    15b8:	683b      	ldr	r3, [r7, #0]
    15ba:	685a      	ldr	r2, [r3, #4]
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    15c0:	683b      	ldr	r3, [r7, #0]
    15c2:	885a      	ldrh	r2, [r3, #2]
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	2224      	movs	r2, #36	; 0x24
    15cc:	2101      	movs	r1, #1
    15ce:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	2225      	movs	r2, #37	; 0x25
    15d4:	2105      	movs	r1, #5
    15d6:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    15d8:	693b      	ldr	r3, [r7, #16]
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	011b      	lsls	r3, r3, #4
    15de:	0fdb      	lsrs	r3, r3, #31
    15e0:	b2db      	uxtb	r3, r3
    15e2:	001a      	movs	r2, r3
    15e4:	230f      	movs	r3, #15
    15e6:	18fb      	adds	r3, r7, r3
    15e8:	1e51      	subs	r1, r2, #1
    15ea:	418a      	sbcs	r2, r1
    15ec:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    15ee:	683b      	ldr	r3, [r7, #0]
    15f0:	7a5b      	ldrb	r3, [r3, #9]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d006      	beq.n	1604 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    15f6:	683b      	ldr	r3, [r7, #0]
    15f8:	7a9a      	ldrb	r2, [r3, #10]
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	0011      	movs	r1, r2
    15fe:	0018      	movs	r0, r3
    1600:	4b3b      	ldr	r3, [pc, #236]	; (16f0 <_i2c_master_read_packet+0x148>)
    1602:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1604:	230f      	movs	r3, #15
    1606:	18fb      	adds	r3, r7, r3
    1608:	781b      	ldrb	r3, [r3, #0]
    160a:	2b00      	cmp	r3, #0
    160c:	d00b      	beq.n	1626 <_i2c_master_read_packet+0x7e>
    160e:	683b      	ldr	r3, [r7, #0]
    1610:	885b      	ldrh	r3, [r3, #2]
    1612:	2b01      	cmp	r3, #1
    1614:	d107      	bne.n	1626 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1616:	693b      	ldr	r3, [r7, #16]
    1618:	685b      	ldr	r3, [r3, #4]
    161a:	2280      	movs	r2, #128	; 0x80
    161c:	02d2      	lsls	r2, r2, #11
    161e:	431a      	orrs	r2, r3
    1620:	693b      	ldr	r3, [r7, #16]
    1622:	605a      	str	r2, [r3, #4]
    1624:	e005      	b.n	1632 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1626:	693b      	ldr	r3, [r7, #16]
    1628:	685b      	ldr	r3, [r3, #4]
    162a:	4a32      	ldr	r2, [pc, #200]	; (16f4 <_i2c_master_read_packet+0x14c>)
    162c:	401a      	ands	r2, r3
    162e:	693b      	ldr	r3, [r7, #16]
    1630:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    1632:	683b      	ldr	r3, [r7, #0]
    1634:	7a1b      	ldrb	r3, [r3, #8]
    1636:	2b00      	cmp	r3, #0
    1638:	d045      	beq.n	16c6 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    163a:	683b      	ldr	r3, [r7, #0]
    163c:	881b      	ldrh	r3, [r3, #0]
    163e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1640:	683b      	ldr	r3, [r7, #0]
    1642:	7a5b      	ldrb	r3, [r3, #9]
    1644:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1646:	4313      	orrs	r3, r2
    1648:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    164a:	2380      	movs	r3, #128	; 0x80
    164c:	021b      	lsls	r3, r3, #8
    164e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1650:	693b      	ldr	r3, [r7, #16]
    1652:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1654:	2317      	movs	r3, #23
    1656:	18fc      	adds	r4, r7, r3
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	0018      	movs	r0, r3
    165c:	4b26      	ldr	r3, [pc, #152]	; (16f8 <_i2c_master_read_packet+0x150>)
    165e:	4798      	blx	r3
    1660:	0003      	movs	r3, r0
    1662:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1664:	693b      	ldr	r3, [r7, #16]
    1666:	685b      	ldr	r3, [r3, #4]
    1668:	4a22      	ldr	r2, [pc, #136]	; (16f4 <_i2c_master_read_packet+0x14c>)
    166a:	401a      	ands	r2, r3
    166c:	693b      	ldr	r3, [r7, #16]
    166e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1670:	2317      	movs	r3, #23
    1672:	18fb      	adds	r3, r7, r3
    1674:	781b      	ldrb	r3, [r3, #0]
    1676:	2b00      	cmp	r3, #0
    1678:	d107      	bne.n	168a <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    167a:	2317      	movs	r3, #23
    167c:	18fc      	adds	r4, r7, r3
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	0018      	movs	r0, r3
    1682:	4b1e      	ldr	r3, [pc, #120]	; (16fc <_i2c_master_read_packet+0x154>)
    1684:	4798      	blx	r3
    1686:	0003      	movs	r3, r0
    1688:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    168a:	2317      	movs	r3, #23
    168c:	18fb      	adds	r3, r7, r3
    168e:	781b      	ldrb	r3, [r3, #0]
    1690:	2b00      	cmp	r3, #0
    1692:	d114      	bne.n	16be <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    1694:	693b      	ldr	r3, [r7, #16]
    1696:	2203      	movs	r2, #3
    1698:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    169a:	683b      	ldr	r3, [r7, #0]
    169c:	881b      	ldrh	r3, [r3, #0]
    169e:	0a1b      	lsrs	r3, r3, #8
    16a0:	b29b      	uxth	r3, r3
    16a2:	2278      	movs	r2, #120	; 0x78
    16a4:	4313      	orrs	r3, r2
    16a6:	b29b      	uxth	r3, r3
    16a8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16aa:	683b      	ldr	r3, [r7, #0]
    16ac:	7a5b      	ldrb	r3, [r3, #9]
    16ae:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    16b0:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16b2:	2201      	movs	r2, #1
    16b4:	4313      	orrs	r3, r2
    16b6:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    16b8:	693b      	ldr	r3, [r7, #16]
    16ba:	625a      	str	r2, [r3, #36]	; 0x24
    16bc:	e012      	b.n	16e4 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    16be:	2317      	movs	r3, #23
    16c0:	18fb      	adds	r3, r7, r3
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	e00f      	b.n	16e6 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    16c6:	693b      	ldr	r3, [r7, #16]
    16c8:	2203      	movs	r2, #3
    16ca:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    16cc:	683b      	ldr	r3, [r7, #0]
    16ce:	881b      	ldrh	r3, [r3, #0]
    16d0:	005b      	lsls	r3, r3, #1
    16d2:	2201      	movs	r2, #1
    16d4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    16d6:	683b      	ldr	r3, [r7, #0]
    16d8:	7a5b      	ldrb	r3, [r3, #9]
    16da:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    16dc:	4313      	orrs	r3, r2
    16de:	001a      	movs	r2, r3
    16e0:	693b      	ldr	r3, [r7, #16]
    16e2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    16e4:	2300      	movs	r3, #0
}
    16e6:	0018      	movs	r0, r3
    16e8:	46bd      	mov	sp, r7
    16ea:	b007      	add	sp, #28
    16ec:	bd90      	pop	{r4, r7, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	00006f95 	.word	0x00006f95
    16f4:	fffbffff 	.word	0xfffbffff
    16f8:	00006f37 	.word	0x00006f37
    16fc:	00006ed9 	.word	0x00006ed9

00001700 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1700:	b580      	push	{r7, lr}
    1702:	b082      	sub	sp, #8
    1704:	af00      	add	r7, sp, #0
    1706:	6078      	str	r0, [r7, #4]
    1708:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	8b9b      	ldrh	r3, [r3, #28]
    170e:	b29b      	uxth	r3, r3
    1710:	2b00      	cmp	r3, #0
    1712:	d001      	beq.n	1718 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    1714:	2305      	movs	r3, #5
    1716:	e00c      	b.n	1732 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    1718:	687b      	ldr	r3, [r7, #4]
    171a:	2201      	movs	r2, #1
    171c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	2201      	movs	r2, #1
    1722:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    1724:	683a      	ldr	r2, [r7, #0]
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	0011      	movs	r1, r2
    172a:	0018      	movs	r0, r3
    172c:	4b03      	ldr	r3, [pc, #12]	; (173c <i2c_master_read_packet_job+0x3c>)
    172e:	4798      	blx	r3
    1730:	0003      	movs	r3, r0
}
    1732:	0018      	movs	r0, r3
    1734:	46bd      	mov	sp, r7
    1736:	b002      	add	sp, #8
    1738:	bd80      	pop	{r7, pc}
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	000015a9 	.word	0x000015a9

00001740 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1740:	b580      	push	{r7, lr}
    1742:	b084      	sub	sp, #16
    1744:	af00      	add	r7, sp, #0
    1746:	6078      	str	r0, [r7, #4]
    1748:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1750:	683b      	ldr	r3, [r7, #0]
    1752:	7a5b      	ldrb	r3, [r3, #9]
    1754:	2b00      	cmp	r3, #0
    1756:	d006      	beq.n	1766 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1758:	683b      	ldr	r3, [r7, #0]
    175a:	7a9a      	ldrb	r2, [r3, #10]
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	0011      	movs	r1, r2
    1760:	0018      	movs	r0, r3
    1762:	4b1e      	ldr	r3, [pc, #120]	; (17dc <_i2c_master_write_packet+0x9c>)
    1764:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1766:	68fb      	ldr	r3, [r7, #12]
    1768:	685b      	ldr	r3, [r3, #4]
    176a:	4a1d      	ldr	r2, [pc, #116]	; (17e0 <_i2c_master_write_packet+0xa0>)
    176c:	401a      	ands	r2, r3
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    1772:	683b      	ldr	r3, [r7, #0]
    1774:	685a      	ldr	r2, [r3, #4]
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    177a:	683b      	ldr	r3, [r7, #0]
    177c:	885a      	ldrh	r2, [r3, #2]
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	2224      	movs	r2, #36	; 0x24
    1786:	2100      	movs	r1, #0
    1788:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	2225      	movs	r2, #37	; 0x25
    178e:	2105      	movs	r1, #5
    1790:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    1792:	68fb      	ldr	r3, [r7, #12]
    1794:	2203      	movs	r2, #3
    1796:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    1798:	683b      	ldr	r3, [r7, #0]
    179a:	7a1b      	ldrb	r3, [r3, #8]
    179c:	2b00      	cmp	r3, #0
    179e:	d00d      	beq.n	17bc <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17a0:	683b      	ldr	r3, [r7, #0]
    17a2:	881b      	ldrh	r3, [r3, #0]
    17a4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17a6:	683b      	ldr	r3, [r7, #0]
    17a8:	7a5b      	ldrb	r3, [r3, #9]
    17aa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17ac:	4313      	orrs	r3, r2
    17ae:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17b0:	2380      	movs	r3, #128	; 0x80
    17b2:	021b      	lsls	r3, r3, #8
    17b4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	625a      	str	r2, [r3, #36]	; 0x24
    17ba:	e009      	b.n	17d0 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17bc:	683b      	ldr	r3, [r7, #0]
    17be:	881b      	ldrh	r3, [r3, #0]
    17c0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    17c2:	683b      	ldr	r3, [r7, #0]
    17c4:	7a5b      	ldrb	r3, [r3, #9]
    17c6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17c8:	4313      	orrs	r3, r2
    17ca:	001a      	movs	r2, r3
    17cc:	68fb      	ldr	r3, [r7, #12]
    17ce:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    17d0:	2300      	movs	r3, #0
}
    17d2:	0018      	movs	r0, r3
    17d4:	46bd      	mov	sp, r7
    17d6:	b004      	add	sp, #16
    17d8:	bd80      	pop	{r7, pc}
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	00006f95 	.word	0x00006f95
    17e0:	fffbffff 	.word	0xfffbffff

000017e4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    17e4:	b580      	push	{r7, lr}
    17e6:	b082      	sub	sp, #8
    17e8:	af00      	add	r7, sp, #0
    17ea:	6078      	str	r0, [r7, #4]
    17ec:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    17ee:	687b      	ldr	r3, [r7, #4]
    17f0:	8b9b      	ldrh	r3, [r3, #28]
    17f2:	b29b      	uxth	r3, r3
    17f4:	2b00      	cmp	r3, #0
    17f6:	d001      	beq.n	17fc <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
    17f8:	2305      	movs	r3, #5
    17fa:	e00c      	b.n	1816 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	2201      	movs	r2, #1
    1800:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	2201      	movs	r2, #1
    1806:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
    1808:	683a      	ldr	r2, [r7, #0]
    180a:	687b      	ldr	r3, [r7, #4]
    180c:	0011      	movs	r1, r2
    180e:	0018      	movs	r0, r3
    1810:	4b03      	ldr	r3, [pc, #12]	; (1820 <i2c_master_write_packet_job+0x3c>)
    1812:	4798      	blx	r3
    1814:	0003      	movs	r3, r0
}
    1816:	0018      	movs	r0, r3
    1818:	46bd      	mov	sp, r7
    181a:	b002      	add	sp, #8
    181c:	bd80      	pop	{r7, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	00001741 	.word	0x00001741

00001824 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1824:	b580      	push	{r7, lr}
    1826:	b086      	sub	sp, #24
    1828:	af00      	add	r7, sp, #0
    182a:	0002      	movs	r2, r0
    182c:	1dfb      	adds	r3, r7, #7
    182e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1830:	1dfb      	adds	r3, r7, #7
    1832:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1834:	4b93      	ldr	r3, [pc, #588]	; (1a84 <_i2c_master_interrupt_handler+0x260>)
    1836:	0092      	lsls	r2, r2, #2
    1838:	58d3      	ldr	r3, [r2, r3]
    183a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    183c:	697b      	ldr	r3, [r7, #20]
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1842:	693b      	ldr	r3, [r7, #16]
    1844:	681b      	ldr	r3, [r3, #0]
    1846:	011b      	lsls	r3, r3, #4
    1848:	0fdb      	lsrs	r3, r3, #31
    184a:	b2db      	uxtb	r3, r3
    184c:	001a      	movs	r2, r3
    184e:	230f      	movs	r3, #15
    1850:	18fb      	adds	r3, r7, r3
    1852:	1e51      	subs	r1, r2, #1
    1854:	418a      	sbcs	r2, r1
    1856:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1858:	230e      	movs	r3, #14
    185a:	18fb      	adds	r3, r7, r3
    185c:	697a      	ldr	r2, [r7, #20]
    185e:	7e52      	ldrb	r2, [r2, #25]
    1860:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1862:	697b      	ldr	r3, [r7, #20]
    1864:	7e1b      	ldrb	r3, [r3, #24]
    1866:	b2da      	uxtb	r2, r3
    1868:	230e      	movs	r3, #14
    186a:	18fb      	adds	r3, r7, r3
    186c:	210e      	movs	r1, #14
    186e:	1879      	adds	r1, r7, r1
    1870:	7809      	ldrb	r1, [r1, #0]
    1872:	400a      	ands	r2, r1
    1874:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1876:	697b      	ldr	r3, [r7, #20]
    1878:	8b5b      	ldrh	r3, [r3, #26]
    187a:	b29b      	uxth	r3, r3
    187c:	2b00      	cmp	r3, #0
    187e:	d109      	bne.n	1894 <_i2c_master_interrupt_handler+0x70>
    1880:	697b      	ldr	r3, [r7, #20]
    1882:	8b9b      	ldrh	r3, [r3, #28]
    1884:	b29b      	uxth	r3, r3
    1886:	2b00      	cmp	r3, #0
    1888:	d004      	beq.n	1894 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    188a:	697b      	ldr	r3, [r7, #20]
    188c:	0018      	movs	r0, r3
    188e:	4b7e      	ldr	r3, [pc, #504]	; (1a88 <_i2c_master_interrupt_handler+0x264>)
    1890:	4798      	blx	r3
    1892:	e070      	b.n	1976 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1894:	697b      	ldr	r3, [r7, #20]
    1896:	8b5b      	ldrh	r3, [r3, #26]
    1898:	b29b      	uxth	r3, r3
    189a:	2b00      	cmp	r3, #0
    189c:	d039      	beq.n	1912 <_i2c_master_interrupt_handler+0xee>
    189e:	697b      	ldr	r3, [r7, #20]
    18a0:	8b9b      	ldrh	r3, [r3, #28]
    18a2:	b29b      	uxth	r3, r3
    18a4:	2b00      	cmp	r3, #0
    18a6:	d134      	bne.n	1912 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    18a8:	697b      	ldr	r3, [r7, #20]
    18aa:	2225      	movs	r2, #37	; 0x25
    18ac:	5c9b      	ldrb	r3, [r3, r2]
    18ae:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    18b0:	2b05      	cmp	r3, #5
    18b2:	d12e      	bne.n	1912 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    18b4:	697b      	ldr	r3, [r7, #20]
    18b6:	2224      	movs	r2, #36	; 0x24
    18b8:	5c9b      	ldrb	r3, [r3, r2]
    18ba:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    18bc:	2b00      	cmp	r3, #0
    18be:	d128      	bne.n	1912 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    18c0:	693b      	ldr	r3, [r7, #16]
    18c2:	2203      	movs	r2, #3
    18c4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    18c6:	697b      	ldr	r3, [r7, #20]
    18c8:	2200      	movs	r2, #0
    18ca:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    18cc:	697b      	ldr	r3, [r7, #20]
    18ce:	2225      	movs	r2, #37	; 0x25
    18d0:	2100      	movs	r1, #0
    18d2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    18d4:	697b      	ldr	r3, [r7, #20]
    18d6:	7a9b      	ldrb	r3, [r3, #10]
    18d8:	2b00      	cmp	r3, #0
    18da:	d00b      	beq.n	18f4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    18dc:	697b      	ldr	r3, [r7, #20]
    18de:	0018      	movs	r0, r3
    18e0:	4b6a      	ldr	r3, [pc, #424]	; (1a8c <_i2c_master_interrupt_handler+0x268>)
    18e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    18e4:	693b      	ldr	r3, [r7, #16]
    18e6:	685b      	ldr	r3, [r3, #4]
    18e8:	22c0      	movs	r2, #192	; 0xc0
    18ea:	0292      	lsls	r2, r2, #10
    18ec:	431a      	orrs	r2, r3
    18ee:	693b      	ldr	r3, [r7, #16]
    18f0:	605a      	str	r2, [r3, #4]
    18f2:	e002      	b.n	18fa <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    18f4:	693b      	ldr	r3, [r7, #16]
    18f6:	2201      	movs	r2, #1
    18f8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    18fa:	230e      	movs	r3, #14
    18fc:	18fb      	adds	r3, r7, r3
    18fe:	781b      	ldrb	r3, [r3, #0]
    1900:	2201      	movs	r2, #1
    1902:	4013      	ands	r3, r2
    1904:	d037      	beq.n	1976 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1906:	697b      	ldr	r3, [r7, #20]
    1908:	68db      	ldr	r3, [r3, #12]
    190a:	697a      	ldr	r2, [r7, #20]
    190c:	0010      	movs	r0, r2
    190e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1910:	e031      	b.n	1976 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1912:	697b      	ldr	r3, [r7, #20]
    1914:	8b5b      	ldrh	r3, [r3, #26]
    1916:	b29b      	uxth	r3, r3
    1918:	2b00      	cmp	r3, #0
    191a:	d02c      	beq.n	1976 <_i2c_master_interrupt_handler+0x152>
    191c:	697b      	ldr	r3, [r7, #20]
    191e:	8b9b      	ldrh	r3, [r3, #28]
    1920:	b29b      	uxth	r3, r3
    1922:	2b00      	cmp	r3, #0
    1924:	d027      	beq.n	1976 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1926:	693b      	ldr	r3, [r7, #16]
    1928:	8b5b      	ldrh	r3, [r3, #26]
    192a:	b29b      	uxth	r3, r3
    192c:	001a      	movs	r2, r3
    192e:	2320      	movs	r3, #32
    1930:	4013      	ands	r3, r2
    1932:	d111      	bne.n	1958 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1934:	230f      	movs	r3, #15
    1936:	18fb      	adds	r3, r7, r3
    1938:	781b      	ldrb	r3, [r3, #0]
    193a:	2201      	movs	r2, #1
    193c:	4053      	eors	r3, r2
    193e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1940:	2b00      	cmp	r3, #0
    1942:	d104      	bne.n	194e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1944:	697b      	ldr	r3, [r7, #20]
    1946:	8b9b      	ldrh	r3, [r3, #28]
    1948:	b29b      	uxth	r3, r3
    194a:	2b01      	cmp	r3, #1
    194c:	d004      	beq.n	1958 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    194e:	697b      	ldr	r3, [r7, #20]
    1950:	2225      	movs	r2, #37	; 0x25
    1952:	2141      	movs	r1, #65	; 0x41
    1954:	5499      	strb	r1, [r3, r2]
    1956:	e00e      	b.n	1976 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1958:	697b      	ldr	r3, [r7, #20]
    195a:	2224      	movs	r2, #36	; 0x24
    195c:	5c9b      	ldrb	r3, [r3, r2]
    195e:	b2db      	uxtb	r3, r3
    1960:	2b00      	cmp	r3, #0
    1962:	d104      	bne.n	196e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1964:	697b      	ldr	r3, [r7, #20]
    1966:	0018      	movs	r0, r3
    1968:	4b49      	ldr	r3, [pc, #292]	; (1a90 <_i2c_master_interrupt_handler+0x26c>)
    196a:	4798      	blx	r3
    196c:	e003      	b.n	1976 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    196e:	697b      	ldr	r3, [r7, #20]
    1970:	0018      	movs	r0, r3
    1972:	4b48      	ldr	r3, [pc, #288]	; (1a94 <_i2c_master_interrupt_handler+0x270>)
    1974:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1976:	697b      	ldr	r3, [r7, #20]
    1978:	8b5b      	ldrh	r3, [r3, #26]
    197a:	b29b      	uxth	r3, r3
    197c:	2b00      	cmp	r3, #0
    197e:	d047      	beq.n	1a10 <_i2c_master_interrupt_handler+0x1ec>
    1980:	697b      	ldr	r3, [r7, #20]
    1982:	8b9b      	ldrh	r3, [r3, #28]
    1984:	b29b      	uxth	r3, r3
    1986:	2b00      	cmp	r3, #0
    1988:	d142      	bne.n	1a10 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    198a:	697b      	ldr	r3, [r7, #20]
    198c:	2225      	movs	r2, #37	; 0x25
    198e:	5c9b      	ldrb	r3, [r3, r2]
    1990:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1992:	2b05      	cmp	r3, #5
    1994:	d13c      	bne.n	1a10 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1996:	697b      	ldr	r3, [r7, #20]
    1998:	2224      	movs	r2, #36	; 0x24
    199a:	5c9b      	ldrb	r3, [r3, r2]
    199c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    199e:	2b01      	cmp	r3, #1
    19a0:	d136      	bne.n	1a10 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    19a2:	693b      	ldr	r3, [r7, #16]
    19a4:	7e1b      	ldrb	r3, [r3, #24]
    19a6:	b2db      	uxtb	r3, r3
    19a8:	001a      	movs	r2, r3
    19aa:	2302      	movs	r3, #2
    19ac:	4013      	ands	r3, r2
    19ae:	d002      	beq.n	19b6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    19b0:	693b      	ldr	r3, [r7, #16]
    19b2:	2202      	movs	r2, #2
    19b4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    19b6:	693b      	ldr	r3, [r7, #16]
    19b8:	2203      	movs	r2, #3
    19ba:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    19bc:	697b      	ldr	r3, [r7, #20]
    19be:	2200      	movs	r2, #0
    19c0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    19c2:	697b      	ldr	r3, [r7, #20]
    19c4:	2225      	movs	r2, #37	; 0x25
    19c6:	2100      	movs	r1, #0
    19c8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    19ca:	230e      	movs	r3, #14
    19cc:	18fb      	adds	r3, r7, r3
    19ce:	781b      	ldrb	r3, [r3, #0]
    19d0:	2202      	movs	r2, #2
    19d2:	4013      	ands	r3, r2
    19d4:	d00b      	beq.n	19ee <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    19d6:	697b      	ldr	r3, [r7, #20]
    19d8:	2224      	movs	r2, #36	; 0x24
    19da:	5c9b      	ldrb	r3, [r3, r2]
    19dc:	b2db      	uxtb	r3, r3
    19de:	2b01      	cmp	r3, #1
    19e0:	d105      	bne.n	19ee <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    19e2:	697b      	ldr	r3, [r7, #20]
    19e4:	691b      	ldr	r3, [r3, #16]
    19e6:	697a      	ldr	r2, [r7, #20]
    19e8:	0010      	movs	r0, r2
    19ea:	4798      	blx	r3
    19ec:	e010      	b.n	1a10 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    19ee:	230e      	movs	r3, #14
    19f0:	18fb      	adds	r3, r7, r3
    19f2:	781b      	ldrb	r3, [r3, #0]
    19f4:	2201      	movs	r2, #1
    19f6:	4013      	ands	r3, r2
    19f8:	d00a      	beq.n	1a10 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	2224      	movs	r2, #36	; 0x24
    19fe:	5c9b      	ldrb	r3, [r3, r2]
    1a00:	b2db      	uxtb	r3, r3
    1a02:	2b00      	cmp	r3, #0
    1a04:	d104      	bne.n	1a10 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1a06:	697b      	ldr	r3, [r7, #20]
    1a08:	68db      	ldr	r3, [r3, #12]
    1a0a:	697a      	ldr	r2, [r7, #20]
    1a0c:	0010      	movs	r0, r2
    1a0e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	2225      	movs	r2, #37	; 0x25
    1a14:	5c9b      	ldrb	r3, [r3, r2]
    1a16:	b2db      	uxtb	r3, r3
    1a18:	2b05      	cmp	r3, #5
    1a1a:	d02e      	beq.n	1a7a <_i2c_master_interrupt_handler+0x256>
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	2225      	movs	r2, #37	; 0x25
    1a20:	5c9b      	ldrb	r3, [r3, r2]
    1a22:	b2db      	uxtb	r3, r3
    1a24:	2b00      	cmp	r3, #0
    1a26:	d028      	beq.n	1a7a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1a28:	693b      	ldr	r3, [r7, #16]
    1a2a:	2203      	movs	r2, #3
    1a2c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1a2e:	697b      	ldr	r3, [r7, #20]
    1a30:	2200      	movs	r2, #0
    1a32:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1a34:	697b      	ldr	r3, [r7, #20]
    1a36:	2200      	movs	r2, #0
    1a38:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1a3a:	697b      	ldr	r3, [r7, #20]
    1a3c:	2225      	movs	r2, #37	; 0x25
    1a3e:	5c9b      	ldrb	r3, [r3, r2]
    1a40:	b2db      	uxtb	r3, r3
    1a42:	2b41      	cmp	r3, #65	; 0x41
    1a44:	d00e      	beq.n	1a64 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    1a46:	697b      	ldr	r3, [r7, #20]
    1a48:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d00a      	beq.n	1a64 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    1a4e:	697b      	ldr	r3, [r7, #20]
    1a50:	0018      	movs	r0, r3
    1a52:	4b0e      	ldr	r3, [pc, #56]	; (1a8c <_i2c_master_interrupt_handler+0x268>)
    1a54:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1a56:	693b      	ldr	r3, [r7, #16]
    1a58:	685b      	ldr	r3, [r3, #4]
    1a5a:	22e0      	movs	r2, #224	; 0xe0
    1a5c:	02d2      	lsls	r2, r2, #11
    1a5e:	431a      	orrs	r2, r3
    1a60:	693b      	ldr	r3, [r7, #16]
    1a62:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1a64:	230e      	movs	r3, #14
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	781b      	ldrb	r3, [r3, #0]
    1a6a:	2204      	movs	r2, #4
    1a6c:	4013      	ands	r3, r2
    1a6e:	d004      	beq.n	1a7a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1a70:	697b      	ldr	r3, [r7, #20]
    1a72:	695b      	ldr	r3, [r3, #20]
    1a74:	697a      	ldr	r2, [r7, #20]
    1a76:	0010      	movs	r0, r2
    1a78:	4798      	blx	r3
		}
	}
}
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	46bd      	mov	sp, r7
    1a7e:	b006      	add	sp, #24
    1a80:	bd80      	pop	{r7, pc}
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	20005888 	.word	0x20005888
    1a88:	000014a5 	.word	0x000014a5
    1a8c:	00001315 	.word	0x00001315
    1a90:	00001429 	.word	0x00001429
    1a94:	00001339 	.word	0x00001339

00001a98 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1a98:	b580      	push	{r7, lr}
    1a9a:	b084      	sub	sp, #16
    1a9c:	af00      	add	r7, sp, #0
    1a9e:	0002      	movs	r2, r0
    1aa0:	1dfb      	adds	r3, r7, #7
    1aa2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1aa4:	230f      	movs	r3, #15
    1aa6:	18fb      	adds	r3, r7, r3
    1aa8:	1dfa      	adds	r2, r7, #7
    1aaa:	7812      	ldrb	r2, [r2, #0]
    1aac:	09d2      	lsrs	r2, r2, #7
    1aae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1ab0:	230e      	movs	r3, #14
    1ab2:	18fb      	adds	r3, r7, r3
    1ab4:	1dfa      	adds	r2, r7, #7
    1ab6:	7812      	ldrb	r2, [r2, #0]
    1ab8:	0952      	lsrs	r2, r2, #5
    1aba:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1abc:	4b0d      	ldr	r3, [pc, #52]	; (1af4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1abe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1ac0:	230f      	movs	r3, #15
    1ac2:	18fb      	adds	r3, r7, r3
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d10f      	bne.n	1aea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1aca:	230f      	movs	r3, #15
    1acc:	18fb      	adds	r3, r7, r3
    1ace:	781b      	ldrb	r3, [r3, #0]
    1ad0:	009b      	lsls	r3, r3, #2
    1ad2:	2210      	movs	r2, #16
    1ad4:	4694      	mov	ip, r2
    1ad6:	44bc      	add	ip, r7
    1ad8:	4463      	add	r3, ip
    1ada:	3b08      	subs	r3, #8
    1adc:	681a      	ldr	r2, [r3, #0]
    1ade:	230e      	movs	r3, #14
    1ae0:	18fb      	adds	r3, r7, r3
    1ae2:	781b      	ldrb	r3, [r3, #0]
    1ae4:	01db      	lsls	r3, r3, #7
    1ae6:	18d3      	adds	r3, r2, r3
    1ae8:	e000      	b.n	1aec <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1aea:	2300      	movs	r3, #0
	}
}
    1aec:	0018      	movs	r0, r3
    1aee:	46bd      	mov	sp, r7
    1af0:	b004      	add	sp, #16
    1af2:	bd80      	pop	{r7, pc}
    1af4:	41004400 	.word	0x41004400

00001af8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	b082      	sub	sp, #8
    1afc:	af00      	add	r7, sp, #0
    1afe:	0002      	movs	r2, r0
    1b00:	1dfb      	adds	r3, r7, #7
    1b02:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1b04:	1dfb      	adds	r3, r7, #7
    1b06:	781b      	ldrb	r3, [r3, #0]
    1b08:	0018      	movs	r0, r3
    1b0a:	4b03      	ldr	r3, [pc, #12]	; (1b18 <port_get_group_from_gpio_pin+0x20>)
    1b0c:	4798      	blx	r3
    1b0e:	0003      	movs	r3, r0
}
    1b10:	0018      	movs	r0, r3
    1b12:	46bd      	mov	sp, r7
    1b14:	b002      	add	sp, #8
    1b16:	bd80      	pop	{r7, pc}
    1b18:	00001a99 	.word	0x00001a99

00001b1c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1b1c:	b580      	push	{r7, lr}
    1b1e:	b082      	sub	sp, #8
    1b20:	af00      	add	r7, sp, #0
    1b22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1b24:	687b      	ldr	r3, [r7, #4]
    1b26:	2200      	movs	r2, #0
    1b28:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	2201      	movs	r2, #1
    1b2e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	2200      	movs	r2, #0
    1b34:	709a      	strb	r2, [r3, #2]
}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	46bd      	mov	sp, r7
    1b3a:	b002      	add	sp, #8
    1b3c:	bd80      	pop	{r7, pc}
	...

00001b40 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	b084      	sub	sp, #16
    1b44:	af00      	add	r7, sp, #0
    1b46:	0002      	movs	r2, r0
    1b48:	1dfb      	adds	r3, r7, #7
    1b4a:	701a      	strb	r2, [r3, #0]
    1b4c:	1dbb      	adds	r3, r7, #6
    1b4e:	1c0a      	adds	r2, r1, #0
    1b50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1b52:	1dfb      	adds	r3, r7, #7
    1b54:	781b      	ldrb	r3, [r3, #0]
    1b56:	0018      	movs	r0, r3
    1b58:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <port_pin_set_output_level+0x50>)
    1b5a:	4798      	blx	r3
    1b5c:	0003      	movs	r3, r0
    1b5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b60:	1dfb      	adds	r3, r7, #7
    1b62:	781b      	ldrb	r3, [r3, #0]
    1b64:	221f      	movs	r2, #31
    1b66:	4013      	ands	r3, r2
    1b68:	2201      	movs	r2, #1
    1b6a:	409a      	lsls	r2, r3
    1b6c:	0013      	movs	r3, r2
    1b6e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1b70:	1dbb      	adds	r3, r7, #6
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d003      	beq.n	1b80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1b78:	68fb      	ldr	r3, [r7, #12]
    1b7a:	68ba      	ldr	r2, [r7, #8]
    1b7c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1b7e:	e002      	b.n	1b86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1b80:	68fb      	ldr	r3, [r7, #12]
    1b82:	68ba      	ldr	r2, [r7, #8]
    1b84:	615a      	str	r2, [r3, #20]
}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	46bd      	mov	sp, r7
    1b8a:	b004      	add	sp, #16
    1b8c:	bd80      	pop	{r7, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	00001af9 	.word	0x00001af9

00001b94 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b086      	sub	sp, #24
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
    1b9c:	4ba0      	ldr	r3, [pc, #640]	; (1e20 <vCommandConsoleTask+0x28c>)
    1b9e:	0018      	movs	r0, r3
    1ba0:	4ba0      	ldr	r3, [pc, #640]	; (1e24 <vCommandConsoleTask+0x290>)
    1ba2:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
    1ba4:	4ba0      	ldr	r3, [pc, #640]	; (1e28 <vCommandConsoleTask+0x294>)
    1ba6:	0018      	movs	r0, r3
    1ba8:	4b9e      	ldr	r3, [pc, #632]	; (1e24 <vCommandConsoleTask+0x290>)
    1baa:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
    1bac:	4b9f      	ldr	r3, [pc, #636]	; (1e2c <vCommandConsoleTask+0x298>)
    1bae:	0018      	movs	r0, r3
    1bb0:	4b9c      	ldr	r3, [pc, #624]	; (1e24 <vCommandConsoleTask+0x290>)
    1bb2:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
    1bb4:	4b9e      	ldr	r3, [pc, #632]	; (1e30 <vCommandConsoleTask+0x29c>)
    1bb6:	0018      	movs	r0, r3
    1bb8:	4b9a      	ldr	r3, [pc, #616]	; (1e24 <vCommandConsoleTask+0x290>)
    1bba:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    1bbc:	4b9d      	ldr	r3, [pc, #628]	; (1e34 <vCommandConsoleTask+0x2a0>)
    1bbe:	0018      	movs	r0, r3
    1bc0:	4b98      	ldr	r3, [pc, #608]	; (1e24 <vCommandConsoleTask+0x290>)
    1bc2:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    1bc4:	4b9c      	ldr	r3, [pc, #624]	; (1e38 <vCommandConsoleTask+0x2a4>)
    1bc6:	0018      	movs	r0, r3
    1bc8:	4b96      	ldr	r3, [pc, #600]	; (1e24 <vCommandConsoleTask+0x290>)
    1bca:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    1bcc:	4b9b      	ldr	r3, [pc, #620]	; (1e3c <vCommandConsoleTask+0x2a8>)
    1bce:	0018      	movs	r0, r3
    1bd0:	4b94      	ldr	r3, [pc, #592]	; (1e24 <vCommandConsoleTask+0x290>)
    1bd2:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
    1bd4:	4b9a      	ldr	r3, [pc, #616]	; (1e40 <vCommandConsoleTask+0x2ac>)
    1bd6:	0018      	movs	r0, r3
    1bd8:	4b92      	ldr	r3, [pc, #584]	; (1e24 <vCommandConsoleTask+0x290>)
    1bda:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
    1bdc:	4b99      	ldr	r3, [pc, #612]	; (1e44 <vCommandConsoleTask+0x2b0>)
    1bde:	0018      	movs	r0, r3
    1be0:	4b90      	ldr	r3, [pc, #576]	; (1e24 <vCommandConsoleTask+0x290>)
    1be2:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xGetWeight);
    1be4:	4b98      	ldr	r3, [pc, #608]	; (1e48 <vCommandConsoleTask+0x2b4>)
    1be6:	0018      	movs	r0, r3
    1be8:	4b8e      	ldr	r3, [pc, #568]	; (1e24 <vCommandConsoleTask+0x290>)
    1bea:	4798      	blx	r3
    char cRxedChar[2];
    unsigned char cInputIndex = 0;
    1bec:	2317      	movs	r3, #23
    1bee:	18fb      	adds	r3, r7, r3
    1bf0:	2200      	movs	r2, #0
    1bf2:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
    1bf4:	4b95      	ldr	r3, [pc, #596]	; (1e4c <vCommandConsoleTask+0x2b8>)
    1bf6:	0018      	movs	r0, r3
    1bf8:	4b95      	ldr	r3, [pc, #596]	; (1e50 <vCommandConsoleTask+0x2bc>)
    1bfa:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
    1bfc:	2203      	movs	r2, #3
    1bfe:	2100      	movs	r1, #0
    1c00:	2001      	movs	r0, #1
    1c02:	4b94      	ldr	r3, [pc, #592]	; (1e54 <vCommandConsoleTask+0x2c0>)
    1c04:	4798      	blx	r3
    1c06:	0002      	movs	r2, r0
    1c08:	4b93      	ldr	r3, [pc, #588]	; (1e58 <vCommandConsoleTask+0x2c4>)
    1c0a:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
    1c0c:	4b92      	ldr	r3, [pc, #584]	; (1e58 <vCommandConsoleTask+0x2c4>)
    1c0e:	681b      	ldr	r3, [r3, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d107      	bne.n	1c24 <vCommandConsoleTask+0x90>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
    1c14:	4b91      	ldr	r3, [pc, #580]	; (1e5c <vCommandConsoleTask+0x2c8>)
    1c16:	0019      	movs	r1, r3
    1c18:	2003      	movs	r0, #3
    1c1a:	4b91      	ldr	r3, [pc, #580]	; (1e60 <vCommandConsoleTask+0x2cc>)
    1c1c:	4798      	blx	r3
        vTaskSuspend(NULL);
    1c1e:	2000      	movs	r0, #0
    1c20:	4b90      	ldr	r3, [pc, #576]	; (1e64 <vCommandConsoleTask+0x2d0>)
    1c22:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
    1c24:	230c      	movs	r3, #12
    1c26:	18fb      	adds	r3, r7, r3
    1c28:	0018      	movs	r0, r3
    1c2a:	4b8f      	ldr	r3, [pc, #572]	; (1e68 <vCommandConsoleTask+0x2d4>)
    1c2c:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
    1c2e:	230c      	movs	r3, #12
    1c30:	18fb      	adds	r3, r7, r3
    1c32:	781b      	ldrb	r3, [r3, #0]
    1c34:	2b0a      	cmp	r3, #10
    1c36:	d004      	beq.n	1c42 <vCommandConsoleTask+0xae>
    1c38:	230c      	movs	r3, #12
    1c3a:	18fb      	adds	r3, r7, r3
    1c3c:	781b      	ldrb	r3, [r3, #0]
    1c3e:	2b0d      	cmp	r3, #13
    1c40:	d137      	bne.n	1cb2 <vCommandConsoleTask+0x11e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
    1c42:	4b8a      	ldr	r3, [pc, #552]	; (1e6c <vCommandConsoleTask+0x2d8>)
    1c44:	0018      	movs	r0, r3
    1c46:	4b82      	ldr	r3, [pc, #520]	; (1e50 <vCommandConsoleTask+0x2bc>)
    1c48:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
    1c4a:	4b89      	ldr	r3, [pc, #548]	; (1e70 <vCommandConsoleTask+0x2dc>)
    1c4c:	2200      	movs	r2, #0
    1c4e:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
    1c50:	4b88      	ldr	r3, [pc, #544]	; (1e74 <vCommandConsoleTask+0x2e0>)
    1c52:	2200      	movs	r2, #0
    1c54:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
    1c56:	4988      	ldr	r1, [pc, #544]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1c58:	4b88      	ldr	r3, [pc, #544]	; (1e7c <vCommandConsoleTask+0x2e8>)
    1c5a:	2231      	movs	r2, #49	; 0x31
    1c5c:	0018      	movs	r0, r3
    1c5e:	4b88      	ldr	r3, [pc, #544]	; (1e80 <vCommandConsoleTask+0x2ec>)
    1c60:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
    1c62:	4b86      	ldr	r3, [pc, #536]	; (1e7c <vCommandConsoleTask+0x2e8>)
    1c64:	2231      	movs	r2, #49	; 0x31
    1c66:	2100      	movs	r1, #0
    1c68:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
    1c6a:	4986      	ldr	r1, [pc, #536]	; (1e84 <vCommandConsoleTask+0x2f0>)
    1c6c:	4b82      	ldr	r3, [pc, #520]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1c6e:	2264      	movs	r2, #100	; 0x64
    1c70:	0018      	movs	r0, r3
    1c72:	4b85      	ldr	r3, [pc, #532]	; (1e88 <vCommandConsoleTask+0x2f4>)
    1c74:	4798      	blx	r3
    1c76:	0003      	movs	r3, r0
    1c78:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    1c7a:	4b82      	ldr	r3, [pc, #520]	; (1e84 <vCommandConsoleTask+0x2f0>)
    1c7c:	2263      	movs	r2, #99	; 0x63
    1c7e:	2100      	movs	r1, #0
    1c80:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
    1c82:	4b80      	ldr	r3, [pc, #512]	; (1e84 <vCommandConsoleTask+0x2f0>)
    1c84:	0018      	movs	r0, r3
    1c86:	4b72      	ldr	r3, [pc, #456]	; (1e50 <vCommandConsoleTask+0x2bc>)
    1c88:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
    1c8a:	693b      	ldr	r3, [r7, #16]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d1ec      	bne.n	1c6a <vCommandConsoleTask+0xd6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
    1c90:	2317      	movs	r3, #23
    1c92:	18fb      	adds	r3, r7, r3
    1c94:	2200      	movs	r2, #0
    1c96:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
    1c98:	4b77      	ldr	r3, [pc, #476]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1c9a:	2232      	movs	r2, #50	; 0x32
    1c9c:	2100      	movs	r1, #0
    1c9e:	0018      	movs	r0, r3
    1ca0:	4b7a      	ldr	r3, [pc, #488]	; (1e8c <vCommandConsoleTask+0x2f8>)
    1ca2:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
    1ca4:	4b77      	ldr	r3, [pc, #476]	; (1e84 <vCommandConsoleTask+0x2f0>)
    1ca6:	2264      	movs	r2, #100	; 0x64
    1ca8:	2100      	movs	r1, #0
    1caa:	0018      	movs	r0, r3
    1cac:	4b77      	ldr	r3, [pc, #476]	; (1e8c <vCommandConsoleTask+0x2f8>)
    1cae:	4798      	blx	r3
    1cb0:	e0b5      	b.n	1e1e <vCommandConsoleTask+0x28a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
    1cb2:	4b6f      	ldr	r3, [pc, #444]	; (1e70 <vCommandConsoleTask+0x2dc>)
    1cb4:	781b      	ldrb	r3, [r3, #0]
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	d059      	beq.n	1d6e <vCommandConsoleTask+0x1da>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    1cba:	4b6e      	ldr	r3, [pc, #440]	; (1e74 <vCommandConsoleTask+0x2e0>)
    1cbc:	781b      	ldrb	r3, [r3, #0]
    1cbe:	2b03      	cmp	r3, #3
    1cc0:	d80c      	bhi.n	1cdc <vCommandConsoleTask+0x148>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    1cc2:	4b6c      	ldr	r3, [pc, #432]	; (1e74 <vCommandConsoleTask+0x2e0>)
    1cc4:	781b      	ldrb	r3, [r3, #0]
    1cc6:	1c5a      	adds	r2, r3, #1
    1cc8:	b2d1      	uxtb	r1, r2
    1cca:	4a6a      	ldr	r2, [pc, #424]	; (1e74 <vCommandConsoleTask+0x2e0>)
    1ccc:	7011      	strb	r1, [r2, #0]
    1cce:	001a      	movs	r2, r3
    1cd0:	230c      	movs	r3, #12
    1cd2:	18fb      	adds	r3, r7, r3
    1cd4:	7819      	ldrb	r1, [r3, #0]
    1cd6:	4b6e      	ldr	r3, [pc, #440]	; (1e90 <vCommandConsoleTask+0x2fc>)
    1cd8:	5499      	strb	r1, [r3, r2]
    1cda:	e005      	b.n	1ce8 <vCommandConsoleTask+0x154>
                } else {
                    isEscapeCode = false;
    1cdc:	4b64      	ldr	r3, [pc, #400]	; (1e70 <vCommandConsoleTask+0x2dc>)
    1cde:	2200      	movs	r2, #0
    1ce0:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    1ce2:	4b64      	ldr	r3, [pc, #400]	; (1e74 <vCommandConsoleTask+0x2e0>)
    1ce4:	2200      	movs	r2, #0
    1ce6:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    1ce8:	4b62      	ldr	r3, [pc, #392]	; (1e74 <vCommandConsoleTask+0x2e0>)
    1cea:	781b      	ldrb	r3, [r3, #0]
    1cec:	2b01      	cmp	r3, #1
    1cee:	d999      	bls.n	1c24 <vCommandConsoleTask+0x90>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
    1cf0:	4a68      	ldr	r2, [pc, #416]	; (1e94 <vCommandConsoleTask+0x300>)
    1cf2:	4b67      	ldr	r3, [pc, #412]	; (1e90 <vCommandConsoleTask+0x2fc>)
    1cf4:	0011      	movs	r1, r2
    1cf6:	0018      	movs	r0, r3
    1cf8:	4b67      	ldr	r3, [pc, #412]	; (1e98 <vCommandConsoleTask+0x304>)
    1cfa:	4798      	blx	r3
    1cfc:	1e03      	subs	r3, r0, #0
    1cfe:	d02f      	beq.n	1d60 <vCommandConsoleTask+0x1cc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
    1d00:	4966      	ldr	r1, [pc, #408]	; (1e9c <vCommandConsoleTask+0x308>)
    1d02:	4b5d      	ldr	r3, [pc, #372]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1d04:	221b      	movs	r2, #27
    1d06:	0018      	movs	r0, r3
    1d08:	4b65      	ldr	r3, [pc, #404]	; (1ea0 <vCommandConsoleTask+0x30c>)
    1d0a:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
    1d0c:	4b5a      	ldr	r3, [pc, #360]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1d0e:	0018      	movs	r0, r3
    1d10:	4b4f      	ldr	r3, [pc, #316]	; (1e50 <vCommandConsoleTask+0x2bc>)
    1d12:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
    1d14:	2317      	movs	r3, #23
    1d16:	18fb      	adds	r3, r7, r3
    1d18:	2200      	movs	r2, #0
    1d1a:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
    1d1c:	4b56      	ldr	r3, [pc, #344]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1d1e:	2232      	movs	r2, #50	; 0x32
    1d20:	2100      	movs	r1, #0
    1d22:	0018      	movs	r0, r3
    1d24:	4b59      	ldr	r3, [pc, #356]	; (1e8c <vCommandConsoleTask+0x2f8>)
    1d26:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
    1d28:	4954      	ldr	r1, [pc, #336]	; (1e7c <vCommandConsoleTask+0x2e8>)
    1d2a:	4b53      	ldr	r3, [pc, #332]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1d2c:	2231      	movs	r2, #49	; 0x31
    1d2e:	0018      	movs	r0, r3
    1d30:	4b53      	ldr	r3, [pc, #332]	; (1e80 <vCommandConsoleTask+0x2ec>)
    1d32:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    1d34:	4b50      	ldr	r3, [pc, #320]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1d36:	0018      	movs	r0, r3
    1d38:	4b5a      	ldr	r3, [pc, #360]	; (1ea4 <vCommandConsoleTask+0x310>)
    1d3a:	4798      	blx	r3
    1d3c:	0003      	movs	r3, r0
    1d3e:	2b30      	cmp	r3, #48	; 0x30
    1d40:	d806      	bhi.n	1d50 <vCommandConsoleTask+0x1bc>
    1d42:	4b4e      	ldr	r3, [pc, #312]	; (1e7c <vCommandConsoleTask+0x2e8>)
    1d44:	0018      	movs	r0, r3
    1d46:	4b57      	ldr	r3, [pc, #348]	; (1ea4 <vCommandConsoleTask+0x310>)
    1d48:	4798      	blx	r3
    1d4a:	0003      	movs	r3, r0
    1d4c:	b2da      	uxtb	r2, r3
    1d4e:	e000      	b.n	1d52 <vCommandConsoleTask+0x1be>
    1d50:	2231      	movs	r2, #49	; 0x31
    1d52:	2317      	movs	r3, #23
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
    1d58:	4b47      	ldr	r3, [pc, #284]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1d5a:	0018      	movs	r0, r3
    1d5c:	4b3c      	ldr	r3, [pc, #240]	; (1e50 <vCommandConsoleTask+0x2bc>)
    1d5e:	4798      	blx	r3
                    }

                    isEscapeCode = false;
    1d60:	4b43      	ldr	r3, [pc, #268]	; (1e70 <vCommandConsoleTask+0x2dc>)
    1d62:	2200      	movs	r2, #0
    1d64:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    1d66:	4b43      	ldr	r3, [pc, #268]	; (1e74 <vCommandConsoleTask+0x2e0>)
    1d68:	2200      	movs	r2, #0
    1d6a:	701a      	strb	r2, [r3, #0]
    1d6c:	e75a      	b.n	1c24 <vCommandConsoleTask+0x90>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
    1d6e:	230c      	movs	r3, #12
    1d70:	18fb      	adds	r3, r7, r3
    1d72:	781b      	ldrb	r3, [r3, #0]
    1d74:	2b0d      	cmp	r3, #13
    1d76:	d100      	bne.n	1d7a <vCommandConsoleTask+0x1e6>
    1d78:	e754      	b.n	1c24 <vCommandConsoleTask+0x90>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    1d7a:	230c      	movs	r3, #12
    1d7c:	18fb      	adds	r3, r7, r3
    1d7e:	781b      	ldrb	r3, [r3, #0]
    1d80:	2b08      	cmp	r3, #8
    1d82:	d004      	beq.n	1d8e <vCommandConsoleTask+0x1fa>
    1d84:	230c      	movs	r3, #12
    1d86:	18fb      	adds	r3, r7, r3
    1d88:	781b      	ldrb	r3, [r3, #0]
    1d8a:	2b7f      	cmp	r3, #127	; 0x7f
    1d8c:	d11c      	bne.n	1dc8 <vCommandConsoleTask+0x234>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
    1d8e:	2308      	movs	r3, #8
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	4a45      	ldr	r2, [pc, #276]	; (1ea8 <vCommandConsoleTask+0x314>)
    1d94:	6812      	ldr	r2, [r2, #0]
    1d96:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
    1d98:	2308      	movs	r3, #8
    1d9a:	18fb      	adds	r3, r7, r3
    1d9c:	0018      	movs	r0, r3
    1d9e:	4b2c      	ldr	r3, [pc, #176]	; (1e50 <vCommandConsoleTask+0x2bc>)
    1da0:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
    1da2:	2317      	movs	r3, #23
    1da4:	18fb      	adds	r3, r7, r3
    1da6:	781b      	ldrb	r3, [r3, #0]
    1da8:	2b00      	cmp	r3, #0
    1daa:	d037      	beq.n	1e1c <vCommandConsoleTask+0x288>
                    cInputIndex--;
    1dac:	2317      	movs	r3, #23
    1dae:	18fb      	adds	r3, r7, r3
    1db0:	781a      	ldrb	r2, [r3, #0]
    1db2:	2317      	movs	r3, #23
    1db4:	18fb      	adds	r3, r7, r3
    1db6:	3a01      	subs	r2, #1
    1db8:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
    1dba:	2317      	movs	r3, #23
    1dbc:	18fb      	adds	r3, r7, r3
    1dbe:	781b      	ldrb	r3, [r3, #0]
    1dc0:	4a2d      	ldr	r2, [pc, #180]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1dc2:	2100      	movs	r1, #0
    1dc4:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    1dc6:	e029      	b.n	1e1c <vCommandConsoleTask+0x288>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
    1dc8:	230c      	movs	r3, #12
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	781b      	ldrb	r3, [r3, #0]
    1dce:	2b1b      	cmp	r3, #27
    1dd0:	d106      	bne.n	1de0 <vCommandConsoleTask+0x24c>
                isEscapeCode = true;  // Next characters will be code arguments
    1dd2:	4b27      	ldr	r3, [pc, #156]	; (1e70 <vCommandConsoleTask+0x2dc>)
    1dd4:	2201      	movs	r2, #1
    1dd6:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
    1dd8:	4b26      	ldr	r3, [pc, #152]	; (1e74 <vCommandConsoleTask+0x2e0>)
    1dda:	2200      	movs	r2, #0
    1ddc:	701a      	strb	r2, [r3, #0]
    1dde:	e721      	b.n	1c24 <vCommandConsoleTask+0x90>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
    1de0:	2317      	movs	r3, #23
    1de2:	18fb      	adds	r3, r7, r3
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	2b31      	cmp	r3, #49	; 0x31
    1de8:	d80e      	bhi.n	1e08 <vCommandConsoleTask+0x274>
                    pcInputString[cInputIndex] = cRxedChar[0];
    1dea:	2317      	movs	r3, #23
    1dec:	18fb      	adds	r3, r7, r3
    1dee:	781b      	ldrb	r3, [r3, #0]
    1df0:	220c      	movs	r2, #12
    1df2:	18ba      	adds	r2, r7, r2
    1df4:	7811      	ldrb	r1, [r2, #0]
    1df6:	4a20      	ldr	r2, [pc, #128]	; (1e78 <vCommandConsoleTask+0x2e4>)
    1df8:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
    1dfa:	2317      	movs	r3, #23
    1dfc:	18fb      	adds	r3, r7, r3
    1dfe:	781a      	ldrb	r2, [r3, #0]
    1e00:	2317      	movs	r3, #23
    1e02:	18fb      	adds	r3, r7, r3
    1e04:	3201      	adds	r2, #1
    1e06:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
    1e08:	230c      	movs	r3, #12
    1e0a:	18fb      	adds	r3, r7, r3
    1e0c:	2200      	movs	r2, #0
    1e0e:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
    1e10:	230c      	movs	r3, #12
    1e12:	18fb      	adds	r3, r7, r3
    1e14:	0018      	movs	r0, r3
    1e16:	4b0e      	ldr	r3, [pc, #56]	; (1e50 <vCommandConsoleTask+0x2bc>)
    1e18:	4798      	blx	r3
    1e1a:	e703      	b.n	1c24 <vCommandConsoleTask+0x90>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    1e1c:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
    1e1e:	e701      	b.n	1c24 <vCommandConsoleTask+0x90>
    1e20:	00025f64 	.word	0x00025f64
    1e24:	000070dd 	.word	0x000070dd
    1e28:	00025f54 	.word	0x00025f54
    1e2c:	00025fe4 	.word	0x00025fe4
    1e30:	00025f74 	.word	0x00025f74
    1e34:	00025f84 	.word	0x00025f84
    1e38:	00025f94 	.word	0x00025f94
    1e3c:	00025fa4 	.word	0x00025fa4
    1e40:	00025fb4 	.word	0x00025fb4
    1e44:	00025fc4 	.word	0x00025fc4
    1e48:	00025fd4 	.word	0x00025fd4
    1e4c:	00025b94 	.word	0x00025b94
    1e50:	0000d009 	.word	0x0000d009
    1e54:	000096a9 	.word	0x000096a9
    1e58:	20004410 	.word	0x20004410
    1e5c:	00025de0 	.word	0x00025de0
    1e60:	0000d0f5 	.word	0x0000d0f5
    1e64:	0000b495 	.word	0x0000b495
    1e68:	00001ead 	.word	0x00001ead
    1e6c:	00025e00 	.word	0x00025e00
    1e70:	20000534 	.word	0x20000534
    1e74:	20000535 	.word	0x20000535
    1e78:	2000056c 	.word	0x2000056c
    1e7c:	20000538 	.word	0x20000538
    1e80:	00024b9f 	.word	0x00024b9f
    1e84:	200005a0 	.word	0x200005a0
    1e88:	0000714d 	.word	0x0000714d
    1e8c:	000247b7 	.word	0x000247b7
    1e90:	20000604 	.word	0x20000604
    1e94:	00025e04 	.word	0x00025e04
    1e98:	00024ab9 	.word	0x00024ab9
    1e9c:	00025e08 	.word	0x00025e08
    1ea0:	00024a75 	.word	0x00024a75
    1ea4:	00024b6f 	.word	0x00024b6f
    1ea8:	00025e10 	.word	0x00025e10

00001eac <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b084      	sub	sp, #16
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	0018      	movs	r0, r3
    1eb8:	4b0c      	ldr	r3, [pc, #48]	; (1eec <FreeRTOS_read+0x40>)
    1eba:	4798      	blx	r3
    1ebc:	0003      	movs	r3, r0
    1ebe:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
    1ec0:	e00d      	b.n	1ede <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
    1ec2:	4b0b      	ldr	r3, [pc, #44]	; (1ef0 <FreeRTOS_read+0x44>)
    1ec4:	681a      	ldr	r2, [r3, #0]
    1ec6:	2301      	movs	r3, #1
    1ec8:	425b      	negs	r3, r3
    1eca:	0019      	movs	r1, r3
    1ecc:	0010      	movs	r0, r2
    1ece:	4b09      	ldr	r3, [pc, #36]	; (1ef4 <FreeRTOS_read+0x48>)
    1ed0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	0018      	movs	r0, r3
    1ed6:	4b05      	ldr	r3, [pc, #20]	; (1eec <FreeRTOS_read+0x40>)
    1ed8:	4798      	blx	r3
    1eda:	0003      	movs	r3, r0
    1edc:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
    1ede:	68fb      	ldr	r3, [r7, #12]
    1ee0:	3301      	adds	r3, #1
    1ee2:	d0ee      	beq.n	1ec2 <FreeRTOS_read+0x16>
    }
}
    1ee4:	46c0      	nop			; (mov r8, r8)
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b004      	add	sp, #16
    1eea:	bd80      	pop	{r7, pc}
    1eec:	0000d0a5 	.word	0x0000d0a5
    1ef0:	20004410 	.word	0x20004410
    1ef4:	0000a661 	.word	0x0000a661

00001ef8 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
    1efc:	4b0a      	ldr	r3, [pc, #40]	; (1f28 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1efe:	2200      	movs	r2, #0
    1f00:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
    1f02:	4b0a      	ldr	r3, [pc, #40]	; (1f2c <CliCharReadySemaphoreGiveFromISR+0x34>)
    1f04:	681b      	ldr	r3, [r3, #0]
    1f06:	4a08      	ldr	r2, [pc, #32]	; (1f28 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1f08:	0011      	movs	r1, r2
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b08      	ldr	r3, [pc, #32]	; (1f30 <CliCharReadySemaphoreGiveFromISR+0x38>)
    1f0e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1f10:	4b05      	ldr	r3, [pc, #20]	; (1f28 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1f12:	681b      	ldr	r3, [r3, #0]
    1f14:	2b00      	cmp	r3, #0
    1f16:	d003      	beq.n	1f20 <CliCharReadySemaphoreGiveFromISR+0x28>
    1f18:	4b06      	ldr	r3, [pc, #24]	; (1f34 <CliCharReadySemaphoreGiveFromISR+0x3c>)
    1f1a:	2280      	movs	r2, #128	; 0x80
    1f1c:	0552      	lsls	r2, r2, #21
    1f1e:	601a      	str	r2, [r3, #0]
}
    1f20:	46c0      	nop			; (mov r8, r8)
    1f22:	46bd      	mov	sp, r7
    1f24:	bd80      	pop	{r7, pc}
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	20000608 	.word	0x20000608
    1f2c:	20004410 	.word	0x20004410
    1f30:	00009fd9 	.word	0x00009fd9
    1f34:	e000ed04 	.word	0xe000ed04

00001f38 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1f38:	b5b0      	push	{r4, r5, r7, lr}
    1f3a:	b088      	sub	sp, #32
    1f3c:	af02      	add	r7, sp, #8
    1f3e:	60f8      	str	r0, [r7, #12]
    1f40:	60b9      	str	r1, [r7, #8]
    1f42:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
    1f44:	4b2e      	ldr	r3, [pc, #184]	; (2000 <STACK_SIZE>)
    1f46:	4798      	blx	r3
    1f48:	0003      	movs	r3, r0
    1f4a:	617b      	str	r3, [r7, #20]

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
    1f4c:	2313      	movs	r3, #19
    1f4e:	18fa      	adds	r2, r7, r3
    1f50:	697b      	ldr	r3, [r7, #20]
    1f52:	0011      	movs	r1, r2
    1f54:	0018      	movs	r0, r3
    1f56:	4b2b      	ldr	r3, [pc, #172]	; (2004 <STACK_SIZE+0x4>)
    1f58:	4798      	blx	r3

    if (reg) {
    1f5a:	2313      	movs	r3, #19
    1f5c:	18fb      	adds	r3, r7, r3
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d041      	beq.n	1fe8 <CLI_GetImuData+0xb0>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
    1f64:	4b28      	ldr	r3, [pc, #160]	; (2008 <STACK_SIZE+0x8>)
    1f66:	2206      	movs	r2, #6
    1f68:	2100      	movs	r1, #0
    1f6a:	0018      	movs	r0, r3
    1f6c:	4b27      	ldr	r3, [pc, #156]	; (200c <STACK_SIZE+0xc>)
    1f6e:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
    1f70:	4a25      	ldr	r2, [pc, #148]	; (2008 <STACK_SIZE+0x8>)
    1f72:	697b      	ldr	r3, [r7, #20]
    1f74:	0011      	movs	r1, r2
    1f76:	0018      	movs	r0, r3
    1f78:	4b25      	ldr	r3, [pc, #148]	; (2010 <STACK_SIZE+0x10>)
    1f7a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
    1f7c:	4b22      	ldr	r3, [pc, #136]	; (2008 <STACK_SIZE+0x8>)
    1f7e:	2200      	movs	r2, #0
    1f80:	5e9b      	ldrsh	r3, [r3, r2]
    1f82:	0018      	movs	r0, r3
    1f84:	4b23      	ldr	r3, [pc, #140]	; (2014 <STACK_SIZE+0x14>)
    1f86:	4798      	blx	r3
    1f88:	1c02      	adds	r2, r0, #0
    1f8a:	4b23      	ldr	r3, [pc, #140]	; (2018 <STACK_SIZE+0x18>)
    1f8c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
    1f8e:	4b1e      	ldr	r3, [pc, #120]	; (2008 <STACK_SIZE+0x8>)
    1f90:	2202      	movs	r2, #2
    1f92:	5e9b      	ldrsh	r3, [r3, r2]
    1f94:	0018      	movs	r0, r3
    1f96:	4b1f      	ldr	r3, [pc, #124]	; (2014 <STACK_SIZE+0x14>)
    1f98:	4798      	blx	r3
    1f9a:	1c02      	adds	r2, r0, #0
    1f9c:	4b1e      	ldr	r3, [pc, #120]	; (2018 <STACK_SIZE+0x18>)
    1f9e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
    1fa0:	4b19      	ldr	r3, [pc, #100]	; (2008 <STACK_SIZE+0x8>)
    1fa2:	2204      	movs	r2, #4
    1fa4:	5e9b      	ldrsh	r3, [r3, r2]
    1fa6:	0018      	movs	r0, r3
    1fa8:	4b1a      	ldr	r3, [pc, #104]	; (2014 <STACK_SIZE+0x14>)
    1faa:	4798      	blx	r3
    1fac:	1c02      	adds	r2, r0, #0
    1fae:	4b1a      	ldr	r3, [pc, #104]	; (2018 <STACK_SIZE+0x18>)
    1fb0:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
    1fb2:	4b19      	ldr	r3, [pc, #100]	; (2018 <STACK_SIZE+0x18>)
    1fb4:	681a      	ldr	r2, [r3, #0]
    1fb6:	4b19      	ldr	r3, [pc, #100]	; (201c <STACK_SIZE+0x1c>)
    1fb8:	1c10      	adds	r0, r2, #0
    1fba:	4798      	blx	r3
    1fbc:	0005      	movs	r5, r0
    1fbe:	4b16      	ldr	r3, [pc, #88]	; (2018 <STACK_SIZE+0x18>)
    1fc0:	685a      	ldr	r2, [r3, #4]
    1fc2:	4b16      	ldr	r3, [pc, #88]	; (201c <STACK_SIZE+0x1c>)
    1fc4:	1c10      	adds	r0, r2, #0
    1fc6:	4798      	blx	r3
    1fc8:	0004      	movs	r4, r0
    1fca:	4b13      	ldr	r3, [pc, #76]	; (2018 <STACK_SIZE+0x18>)
    1fcc:	689a      	ldr	r2, [r3, #8]
    1fce:	4b13      	ldr	r3, [pc, #76]	; (201c <STACK_SIZE+0x1c>)
    1fd0:	1c10      	adds	r0, r2, #0
    1fd2:	4798      	blx	r3
    1fd4:	0003      	movs	r3, r0
    1fd6:	4a12      	ldr	r2, [pc, #72]	; (2020 <STACK_SIZE+0x20>)
    1fd8:	68b9      	ldr	r1, [r7, #8]
    1fda:	68f8      	ldr	r0, [r7, #12]
    1fdc:	9301      	str	r3, [sp, #4]
    1fde:	9400      	str	r4, [sp, #0]
    1fe0:	002b      	movs	r3, r5
    1fe2:	4c10      	ldr	r4, [pc, #64]	; (2024 <STACK_SIZE+0x24>)
    1fe4:	47a0      	blx	r4
    1fe6:	e005      	b.n	1ff4 <CLI_GetImuData+0xbc>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! \r\n");
    1fe8:	4a0f      	ldr	r2, [pc, #60]	; (2028 <STACK_SIZE+0x28>)
    1fea:	68b9      	ldr	r1, [r7, #8]
    1fec:	68fb      	ldr	r3, [r7, #12]
    1fee:	0018      	movs	r0, r3
    1ff0:	4b0c      	ldr	r3, [pc, #48]	; (2024 <STACK_SIZE+0x24>)
    1ff2:	4798      	blx	r3
    }
    return pdFALSE;
    1ff4:	2300      	movs	r3, #0
}
    1ff6:	0018      	movs	r0, r3
    1ff8:	46bd      	mov	sp, r7
    1ffa:	b006      	add	sp, #24
    1ffc:	bdb0      	pop	{r4, r5, r7, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	00003ff5 	.word	0x00003ff5
    2004:	00003aa1 	.word	0x00003aa1
    2008:	2000060c 	.word	0x2000060c
    200c:	000247b7 	.word	0x000247b7
    2010:	00003add 	.word	0x00003add
    2014:	00003331 	.word	0x00003331
    2018:	20000614 	.word	0x20000614
    201c:	00022b99 	.word	0x00022b99
    2020:	00025e14 	.word	0x00025e14
    2024:	00024a11 	.word	0x00024a11
    2028:	00025e38 	.word	0x00025e38

0000202c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    202c:	b590      	push	{r4, r7, lr}
    202e:	b087      	sub	sp, #28
    2030:	af00      	add	r7, sp, #0
    2032:	60f8      	str	r0, [r7, #12]
    2034:	60b9      	str	r1, [r7, #8]
    2036:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
    2038:	2317      	movs	r3, #23
    203a:	18fb      	adds	r3, r7, r3
    203c:	221b      	movs	r2, #27
    203e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    2040:	2317      	movs	r3, #23
    2042:	18fb      	adds	r3, r7, r3
    2044:	781b      	ldrb	r3, [r3, #0]
    2046:	4a08      	ldr	r2, [pc, #32]	; (2068 <xCliClearTerminalScreen+0x3c>)
    2048:	4808      	ldr	r0, [pc, #32]	; (206c <xCliClearTerminalScreen+0x40>)
    204a:	210f      	movs	r1, #15
    204c:	4c08      	ldr	r4, [pc, #32]	; (2070 <xCliClearTerminalScreen+0x44>)
    204e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    2050:	4a06      	ldr	r2, [pc, #24]	; (206c <xCliClearTerminalScreen+0x40>)
    2052:	68b9      	ldr	r1, [r7, #8]
    2054:	68fb      	ldr	r3, [r7, #12]
    2056:	0018      	movs	r0, r3
    2058:	4b05      	ldr	r3, [pc, #20]	; (2070 <xCliClearTerminalScreen+0x44>)
    205a:	4798      	blx	r3
    return pdFALSE;
    205c:	2300      	movs	r3, #0
}
    205e:	0018      	movs	r0, r3
    2060:	46bd      	mov	sp, r7
    2062:	b007      	add	sp, #28
    2064:	bd90      	pop	{r4, r7, pc}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	00025e4c 	.word	0x00025e4c
    206c:	20000524 	.word	0x20000524
    2070:	00024a11 	.word	0x00024a11

00002074 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2074:	b580      	push	{r7, lr}
    2076:	b084      	sub	sp, #16
    2078:	af00      	add	r7, sp, #0
    207a:	60f8      	str	r0, [r7, #12]
    207c:	60b9      	str	r1, [r7, #8]
    207e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
    2080:	2002      	movs	r0, #2
    2082:	4b03      	ldr	r3, [pc, #12]	; (2090 <CLI_OTAU+0x1c>)
    2084:	4798      	blx	r3
	//system_reset();
    return pdFALSE;
    2086:	2300      	movs	r3, #0
}
    2088:	0018      	movs	r0, r3
    208a:	46bd      	mov	sp, r7
    208c:	b004      	add	sp, #16
    208e:	bd80      	pop	{r7, pc}
    2090:	000066ed 	.word	0x000066ed

00002094 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2094:	b580      	push	{r7, lr}
    2096:	b084      	sub	sp, #16
    2098:	af00      	add	r7, sp, #0
    209a:	60f8      	str	r0, [r7, #12]
    209c:	60b9      	str	r1, [r7, #8]
    209e:	607a      	str	r2, [r7, #4]
    return pdFALSE;
    20a0:	2300      	movs	r3, #0
}
    20a2:	0018      	movs	r0, r3
    20a4:	46bd      	mov	sp, r7
    20a6:	b004      	add	sp, #16
    20a8:	bd80      	pop	{r7, pc}
	...

000020ac <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b084      	sub	sp, #16
    20b0:	af00      	add	r7, sp, #0
    20b2:	60f8      	str	r0, [r7, #12]
    20b4:	60b9      	str	r1, [r7, #8]
    20b6:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
    20b8:	4a05      	ldr	r2, [pc, #20]	; (20d0 <CLI_NeotrellisSetLed+0x24>)
    20ba:	68b9      	ldr	r1, [r7, #8]
    20bc:	68fb      	ldr	r3, [r7, #12]
    20be:	0018      	movs	r0, r3
    20c0:	4b04      	ldr	r3, [pc, #16]	; (20d4 <CLI_NeotrellisSetLed+0x28>)
    20c2:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
    20c4:	2300      	movs	r3, #0
}
    20c6:	0018      	movs	r0, r3
    20c8:	46bd      	mov	sp, r7
    20ca:	b004      	add	sp, #16
    20cc:	bd80      	pop	{r7, pc}
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	00025e54 	.word	0x00025e54
    20d4:	00024a11 	.word	0x00024a11

000020d8 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{	//calculating executed time
    20d8:	b590      	push	{r4, r7, lr}
    20da:	b09b      	sub	sp, #108	; 0x6c
    20dc:	af00      	add	r7, sp, #0
    20de:	60f8      	str	r0, [r7, #12]
    20e0:	60b9      	str	r1, [r7, #8]
    20e2:	607a      	str	r2, [r7, #4]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    20e4:	2354      	movs	r3, #84	; 0x54
    20e6:	18fb      	adds	r3, r7, r3
    20e8:	0018      	movs	r0, r3
    20ea:	4b44      	ldr	r3, [pc, #272]	; (21fc <CLI_NeotrellProcessButtonBuffer+0x124>)
    20ec:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    20ee:	2354      	movs	r3, #84	; 0x54
    20f0:	18fb      	adds	r3, r7, r3
    20f2:	2201      	movs	r2, #1
    20f4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA02, &config_port_pin);
    20f6:	2354      	movs	r3, #84	; 0x54
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	0019      	movs	r1, r3
    20fc:	2002      	movs	r0, #2
    20fe:	4b40      	ldr	r3, [pc, #256]	; (2200 <CLI_NeotrellProcessButtonBuffer+0x128>)
    2100:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA02, false);
    2102:	2100      	movs	r1, #0
    2104:	2002      	movs	r0, #2
    2106:	4b3f      	ldr	r3, [pc, #252]	; (2204 <CLI_NeotrellProcessButtonBuffer+0x12c>)
    2108:	4798      	blx	r3
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
    210a:	2367      	movs	r3, #103	; 0x67
    210c:	18fc      	adds	r4, r7, r3
    210e:	4b3e      	ldr	r3, [pc, #248]	; (2208 <CLI_NeotrellProcessButtonBuffer+0x130>)
    2110:	4798      	blx	r3
    2112:	0003      	movs	r3, r0
    2114:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
    2116:	2367      	movs	r3, #103	; 0x67
    2118:	18fb      	adds	r3, r7, r3
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	2b00      	cmp	r3, #0
    211e:	d061      	beq.n	21e4 <CLI_NeotrellProcessButtonBuffer+0x10c>
        int32_t res = SeesawReadKeypad(buffer, 1);
    2120:	2314      	movs	r3, #20
    2122:	18fb      	adds	r3, r7, r3
    2124:	2101      	movs	r1, #1
    2126:	0018      	movs	r0, r3
    2128:	4b38      	ldr	r3, [pc, #224]	; (220c <CLI_NeotrellProcessButtonBuffer+0x134>)
    212a:	4798      	blx	r3
    212c:	0003      	movs	r3, r0
    212e:	663b      	str	r3, [r7, #96]	; 0x60
        if (res == 0) {
    2130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2132:	2b00      	cmp	r3, #0
    2134:	d150      	bne.n	21d8 <CLI_NeotrellProcessButtonBuffer+0x100>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
    2136:	2314      	movs	r3, #20
    2138:	18fb      	adds	r3, r7, r3
    213a:	781a      	ldrb	r2, [r3, #0]
    213c:	235f      	movs	r3, #95	; 0x5f
    213e:	18fb      	adds	r3, r7, r3
    2140:	2103      	movs	r1, #3
    2142:	400a      	ands	r2, r1
    2144:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
    2146:	2314      	movs	r3, #20
    2148:	18fb      	adds	r3, r7, r3
    214a:	781a      	ldrb	r2, [r3, #0]
    214c:	235e      	movs	r3, #94	; 0x5e
    214e:	18fb      	adds	r3, r7, r3
    2150:	0892      	lsrs	r2, r2, #2
    2152:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
    2154:	235e      	movs	r3, #94	; 0x5e
    2156:	18fb      	adds	r3, r7, r3
    2158:	781b      	ldrb	r3, [r3, #0]
    215a:	08db      	lsrs	r3, r3, #3
    215c:	b2db      	uxtb	r3, r3
    215e:	009a      	lsls	r2, r3, #2
    2160:	235e      	movs	r3, #94	; 0x5e
    2162:	18fb      	adds	r3, r7, r3
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	2107      	movs	r1, #7
    2168:	400b      	ands	r3, r1
    216a:	18d3      	adds	r3, r2, r3
    216c:	65bb      	str	r3, [r7, #88]	; 0x58
            if (press == 0x2) {
    216e:	235f      	movs	r3, #95	; 0x5f
    2170:	18fb      	adds	r3, r7, r3
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	2b02      	cmp	r3, #2
    2176:	d115      	bne.n	21a4 <CLI_NeotrellProcessButtonBuffer+0xcc>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
    2178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    217a:	2b00      	cmp	r3, #0
    217c:	da00      	bge.n	2180 <CLI_NeotrellProcessButtonBuffer+0xa8>
    217e:	3307      	adds	r3, #7
    2180:	10db      	asrs	r3, r3, #3
    2182:	009a      	lsls	r2, r3, #2
    2184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2186:	4922      	ldr	r1, [pc, #136]	; (2210 <CLI_NeotrellProcessButtonBuffer+0x138>)
    2188:	400b      	ands	r3, r1
    218a:	d504      	bpl.n	2196 <CLI_NeotrellProcessButtonBuffer+0xbe>
    218c:	3b01      	subs	r3, #1
    218e:	2108      	movs	r1, #8
    2190:	4249      	negs	r1, r1
    2192:	430b      	orrs	r3, r1
    2194:	3301      	adds	r3, #1
    2196:	18d3      	adds	r3, r2, r3
    2198:	4a1e      	ldr	r2, [pc, #120]	; (2214 <CLI_NeotrellProcessButtonBuffer+0x13c>)
    219a:	68b9      	ldr	r1, [r7, #8]
    219c:	68f8      	ldr	r0, [r7, #12]
    219e:	4c1e      	ldr	r4, [pc, #120]	; (2218 <CLI_NeotrellProcessButtonBuffer+0x140>)
    21a0:	47a0      	blx	r4
    21a2:	e019      	b.n	21d8 <CLI_NeotrellProcessButtonBuffer+0x100>
            } else if (press == 0x3) {
    21a4:	235f      	movs	r3, #95	; 0x5f
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	781b      	ldrb	r3, [r3, #0]
    21aa:	2b03      	cmp	r3, #3
    21ac:	d114      	bne.n	21d8 <CLI_NeotrellProcessButtonBuffer+0x100>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
    21ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    21b0:	2b00      	cmp	r3, #0
    21b2:	da00      	bge.n	21b6 <CLI_NeotrellProcessButtonBuffer+0xde>
    21b4:	3307      	adds	r3, #7
    21b6:	10db      	asrs	r3, r3, #3
    21b8:	009a      	lsls	r2, r3, #2
    21ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    21bc:	4914      	ldr	r1, [pc, #80]	; (2210 <CLI_NeotrellProcessButtonBuffer+0x138>)
    21be:	400b      	ands	r3, r1
    21c0:	d504      	bpl.n	21cc <CLI_NeotrellProcessButtonBuffer+0xf4>
    21c2:	3b01      	subs	r3, #1
    21c4:	2108      	movs	r1, #8
    21c6:	4249      	negs	r1, r1
    21c8:	430b      	orrs	r3, r1
    21ca:	3301      	adds	r3, #1
    21cc:	18d3      	adds	r3, r2, r3
    21ce:	4a13      	ldr	r2, [pc, #76]	; (221c <CLI_NeotrellProcessButtonBuffer+0x144>)
    21d0:	68b9      	ldr	r1, [r7, #8]
    21d2:	68f8      	ldr	r0, [r7, #12]
    21d4:	4c10      	ldr	r4, [pc, #64]	; (2218 <CLI_NeotrellProcessButtonBuffer+0x140>)
    21d6:	47a0      	blx	r4
            }
        }
		port_pin_set_output_level(PIN_PA02,true);
    21d8:	2101      	movs	r1, #1
    21da:	2002      	movs	r0, #2
    21dc:	4b09      	ldr	r3, [pc, #36]	; (2204 <CLI_NeotrellProcessButtonBuffer+0x12c>)
    21de:	4798      	blx	r3
        return pdTRUE;
    21e0:	2301      	movs	r3, #1
    21e2:	e006      	b.n	21f2 <CLI_NeotrellProcessButtonBuffer+0x11a>
    } else {
        pcWriteBuffer = 0;
    21e4:	2300      	movs	r3, #0
    21e6:	60fb      	str	r3, [r7, #12]
		port_pin_set_output_level(PIN_PA02,true);
    21e8:	2101      	movs	r1, #1
    21ea:	2002      	movs	r0, #2
    21ec:	4b05      	ldr	r3, [pc, #20]	; (2204 <CLI_NeotrellProcessButtonBuffer+0x12c>)
    21ee:	4798      	blx	r3
        return pdFALSE;
    21f0:	2300      	movs	r3, #0
    }
}
    21f2:	0018      	movs	r0, r3
    21f4:	46bd      	mov	sp, r7
    21f6:	b01b      	add	sp, #108	; 0x6c
    21f8:	bd90      	pop	{r4, r7, pc}
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	00001b1d 	.word	0x00001b1d
    2200:	00015cb1 	.word	0x00015cb1
    2204:	00001b41 	.word	0x00001b41
    2208:	0000476d 	.word	0x0000476d
    220c:	000047d5 	.word	0x000047d5
    2210:	80000007 	.word	0x80000007
    2214:	00025e6c 	.word	0x00025e6c
    2218:	00024a11 	.word	0x00024a11
    221c:	00025e88 	.word	0x00025e88

00002220 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2220:	b590      	push	{r4, r7, lr}
    2222:	b087      	sub	sp, #28
    2224:	af00      	add	r7, sp, #0
    2226:	60f8      	str	r0, [r7, #12]
    2228:	60b9      	str	r1, [r7, #8]
    222a:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
    222c:	2312      	movs	r3, #18
    222e:	18fb      	adds	r3, r7, r3
    2230:	2200      	movs	r2, #0
    2232:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
    2234:	2312      	movs	r3, #18
    2236:	18fb      	adds	r3, r7, r3
    2238:	2164      	movs	r1, #100	; 0x64
    223a:	0018      	movs	r0, r3
    223c:	4b19      	ldr	r3, [pc, #100]	; (22a4 <CLI_DistanceSensorGetDistance+0x84>)
    223e:	4798      	blx	r3
    2240:	0003      	movs	r3, r0
    2242:	617b      	str	r3, [r7, #20]
    if (0 != error) {
    2244:	697b      	ldr	r3, [r7, #20]
    2246:	2b00      	cmp	r3, #0
    2248:	d006      	beq.n	2258 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
    224a:	697b      	ldr	r3, [r7, #20]
    224c:	4a16      	ldr	r2, [pc, #88]	; (22a8 <CLI_DistanceSensorGetDistance+0x88>)
    224e:	68b9      	ldr	r1, [r7, #8]
    2250:	68f8      	ldr	r0, [r7, #12]
    2252:	4c16      	ldr	r4, [pc, #88]	; (22ac <CLI_DistanceSensorGetDistance+0x8c>)
    2254:	47a0      	blx	r4
    2256:	e007      	b.n	2268 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
    2258:	2312      	movs	r3, #18
    225a:	18fb      	adds	r3, r7, r3
    225c:	881b      	ldrh	r3, [r3, #0]
    225e:	4a14      	ldr	r2, [pc, #80]	; (22b0 <CLI_DistanceSensorGetDistance+0x90>)
    2260:	68b9      	ldr	r1, [r7, #8]
    2262:	68f8      	ldr	r0, [r7, #12]
    2264:	4c11      	ldr	r4, [pc, #68]	; (22ac <CLI_DistanceSensorGetDistance+0x8c>)
    2266:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
    2268:	2312      	movs	r3, #18
    226a:	18fb      	adds	r3, r7, r3
    226c:	0018      	movs	r0, r3
    226e:	4b11      	ldr	r3, [pc, #68]	; (22b4 <CLI_DistanceSensorGetDistance+0x94>)
    2270:	4798      	blx	r3
    2272:	0003      	movs	r3, r0
    2274:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
    2276:	697b      	ldr	r3, [r7, #20]
    2278:	2b01      	cmp	r3, #1
    227a:	d10e      	bne.n	229a <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
    227c:	68fb      	ldr	r3, [r7, #12]
    227e:	0018      	movs	r0, r3
    2280:	4b0d      	ldr	r3, [pc, #52]	; (22b8 <CLI_DistanceSensorGetDistance+0x98>)
    2282:	4798      	blx	r3
    2284:	0003      	movs	r3, r0
    2286:	001a      	movs	r2, r3
    2288:	68fb      	ldr	r3, [r7, #12]
    228a:	189a      	adds	r2, r3, r2
    228c:	4b0b      	ldr	r3, [pc, #44]	; (22bc <CLI_DistanceSensorGetDistance+0x9c>)
    228e:	0010      	movs	r0, r2
    2290:	0019      	movs	r1, r3
    2292:	231a      	movs	r3, #26
    2294:	001a      	movs	r2, r3
    2296:	4b0a      	ldr	r3, [pc, #40]	; (22c0 <CLI_DistanceSensorGetDistance+0xa0>)
    2298:	4798      	blx	r3
    }
    return pdFALSE;
    229a:	2300      	movs	r3, #0
}
    229c:	0018      	movs	r0, r3
    229e:	46bd      	mov	sp, r7
    22a0:	b007      	add	sp, #28
    22a2:	bd90      	pop	{r4, r7, pc}
    22a4:	000028bd 	.word	0x000028bd
    22a8:	00025ea0 	.word	0x00025ea0
    22ac:	00024a11 	.word	0x00024a11
    22b0:	00025eb4 	.word	0x00025eb4
    22b4:	00006721 	.word	0x00006721
    22b8:	00024b6f 	.word	0x00024b6f
    22bc:	00025ec8 	.word	0x00025ec8
    22c0:	00024781 	.word	0x00024781

000022c4 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b08a      	sub	sp, #40	; 0x28
    22c8:	af00      	add	r7, sp, #0
    22ca:	60f8      	str	r0, [r7, #12]
    22cc:	60b9      	str	r1, [r7, #8]
    22ce:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
    22d0:	2310      	movs	r3, #16
    22d2:	18fb      	adds	r3, r7, r3
    22d4:	2200      	movs	r2, #0
    22d6:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
    22d8:	2310      	movs	r3, #16
    22da:	18fb      	adds	r3, r7, r3
    22dc:	2201      	movs	r2, #1
    22de:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
    22e0:	2310      	movs	r3, #16
    22e2:	18fb      	adds	r3, r7, r3
    22e4:	2202      	movs	r2, #2
    22e6:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
    22e8:	2310      	movs	r3, #16
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	2203      	movs	r2, #3
    22ee:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
    22f0:	2310      	movs	r3, #16
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	2204      	movs	r2, #4
    22f6:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
    22f8:	2310      	movs	r3, #16
    22fa:	18fb      	adds	r3, r7, r3
    22fc:	2205      	movs	r2, #5
    22fe:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
    2300:	2310      	movs	r3, #16
    2302:	18fb      	adds	r3, r7, r3
    2304:	2206      	movs	r2, #6
    2306:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
    2308:	2310      	movs	r3, #16
    230a:	18fb      	adds	r3, r7, r3
    230c:	2207      	movs	r2, #7
    230e:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
    2310:	2310      	movs	r3, #16
    2312:	18fb      	adds	r3, r7, r3
    2314:	2208      	movs	r2, #8
    2316:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
    2318:	2310      	movs	r3, #16
    231a:	18fb      	adds	r3, r7, r3
    231c:	2209      	movs	r2, #9
    231e:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
    2320:	2310      	movs	r3, #16
    2322:	18fb      	adds	r3, r7, r3
    2324:	22ff      	movs	r2, #255	; 0xff
    2326:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
    2328:	2310      	movs	r3, #16
    232a:	18fb      	adds	r3, r7, r3
    232c:	0018      	movs	r0, r3
    232e:	4b09      	ldr	r3, [pc, #36]	; (2354 <CLI_SendDummyGameData+0x90>)
    2330:	4798      	blx	r3
    2332:	0003      	movs	r3, r0
    2334:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
    2336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2338:	2b01      	cmp	r3, #1
    233a:	d105      	bne.n	2348 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
    233c:	4a06      	ldr	r2, [pc, #24]	; (2358 <CLI_SendDummyGameData+0x94>)
    233e:	68b9      	ldr	r1, [r7, #8]
    2340:	68fb      	ldr	r3, [r7, #12]
    2342:	0018      	movs	r0, r3
    2344:	4b05      	ldr	r3, [pc, #20]	; (235c <CLI_SendDummyGameData+0x98>)
    2346:	4798      	blx	r3
    }
    return pdFALSE;
    2348:	2300      	movs	r3, #0
}
    234a:	0018      	movs	r0, r3
    234c:	46bd      	mov	sp, r7
    234e:	b00a      	add	sp, #40	; 0x28
    2350:	bd80      	pop	{r7, pc}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	0000674d 	.word	0x0000674d
    2358:	00025ee4 	.word	0x00025ee4
    235c:	00024a11 	.word	0x00024a11

00002360 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2360:	b590      	push	{r4, r7, lr}
    2362:	b08f      	sub	sp, #60	; 0x3c
    2364:	af00      	add	r7, sp, #0
    2366:	60f8      	str	r0, [r7, #12]
    2368:	60b9      	str	r1, [r7, #8]
    236a:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
    236c:	2318      	movs	r3, #24
    236e:	18fb      	adds	r3, r7, r3
    2370:	2200      	movs	r2, #0
    2372:	701a      	strb	r2, [r3, #0]
    2374:	2318      	movs	r3, #24
    2376:	18fb      	adds	r3, r7, r3
    2378:	2200      	movs	r2, #0
    237a:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
    237c:	2318      	movs	r3, #24
    237e:	18fb      	adds	r3, r7, r3
    2380:	2200      	movs	r2, #0
    2382:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
    2384:	2318      	movs	r3, #24
    2386:	18fb      	adds	r3, r7, r3
    2388:	2200      	movs	r2, #0
    238a:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
    238c:	231c      	movs	r3, #28
    238e:	18fb      	adds	r3, r7, r3
    2390:	2200      	movs	r2, #0
    2392:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
    2394:	231c      	movs	r3, #28
    2396:	18fb      	adds	r3, r7, r3
    2398:	2214      	movs	r2, #20
    239a:	18ba      	adds	r2, r7, r2
    239c:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
    239e:	231c      	movs	r3, #28
    23a0:	18fb      	adds	r3, r7, r3
    23a2:	2201      	movs	r2, #1
    23a4:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
    23a6:	231c      	movs	r3, #28
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	2218      	movs	r2, #24
    23ac:	18ba      	adds	r2, r7, r2
    23ae:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
    23b0:	231c      	movs	r3, #28
    23b2:	18fb      	adds	r3, r7, r3
    23b4:	2201      	movs	r2, #1
    23b6:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
    23b8:	4b2c      	ldr	r3, [pc, #176]	; (246c <CLI_i2cScan+0x10c>)
    23ba:	0018      	movs	r0, r3
    23bc:	4b2c      	ldr	r3, [pc, #176]	; (2470 <CLI_i2cScan+0x110>)
    23be:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
    23c0:	2300      	movs	r3, #0
    23c2:	637b      	str	r3, [r7, #52]	; 0x34
    23c4:	e046      	b.n	2454 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
    23c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23c8:	4a2a      	ldr	r2, [pc, #168]	; (2474 <CLI_i2cScan+0x114>)
    23ca:	482b      	ldr	r0, [pc, #172]	; (2478 <CLI_i2cScan+0x118>)
    23cc:	210f      	movs	r1, #15
    23ce:	4c2b      	ldr	r4, [pc, #172]	; (247c <CLI_i2cScan+0x11c>)
    23d0:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
    23d2:	4b29      	ldr	r3, [pc, #164]	; (2478 <CLI_i2cScan+0x118>)
    23d4:	0018      	movs	r0, r3
    23d6:	4b26      	ldr	r3, [pc, #152]	; (2470 <CLI_i2cScan+0x110>)
    23d8:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
    23da:	2300      	movs	r3, #0
    23dc:	633b      	str	r3, [r7, #48]	; 0x30
    23de:	e02f      	b.n	2440 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
    23e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23e2:	b2da      	uxtb	r2, r3
    23e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23e6:	b2db      	uxtb	r3, r3
    23e8:	18d3      	adds	r3, r2, r3
    23ea:	b2db      	uxtb	r3, r3
    23ec:	18db      	adds	r3, r3, r3
    23ee:	b2da      	uxtb	r2, r3
    23f0:	231c      	movs	r3, #28
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
    23f6:	231c      	movs	r3, #28
    23f8:	18fb      	adds	r3, r7, r3
    23fa:	2164      	movs	r1, #100	; 0x64
    23fc:	0018      	movs	r0, r3
    23fe:	4b20      	ldr	r3, [pc, #128]	; (2480 <CLI_i2cScan+0x120>)
    2400:	4798      	blx	r3
    2402:	0003      	movs	r3, r0
    2404:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
    2406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2408:	2b00      	cmp	r3, #0
    240a:	d10c      	bne.n	2426 <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
    240c:	231c      	movs	r3, #28
    240e:	18fb      	adds	r3, r7, r3
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	4a18      	ldr	r2, [pc, #96]	; (2474 <CLI_i2cScan+0x114>)
    2414:	4818      	ldr	r0, [pc, #96]	; (2478 <CLI_i2cScan+0x118>)
    2416:	210f      	movs	r1, #15
    2418:	4c18      	ldr	r4, [pc, #96]	; (247c <CLI_i2cScan+0x11c>)
    241a:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
    241c:	4b16      	ldr	r3, [pc, #88]	; (2478 <CLI_i2cScan+0x118>)
    241e:	0018      	movs	r0, r3
    2420:	4b13      	ldr	r3, [pc, #76]	; (2470 <CLI_i2cScan+0x110>)
    2422:	4798      	blx	r3
    2424:	e009      	b.n	243a <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
    2426:	4b14      	ldr	r3, [pc, #80]	; (2478 <CLI_i2cScan+0x118>)
    2428:	4a16      	ldr	r2, [pc, #88]	; (2484 <CLI_i2cScan+0x124>)
    242a:	8811      	ldrh	r1, [r2, #0]
    242c:	8019      	strh	r1, [r3, #0]
    242e:	7892      	ldrb	r2, [r2, #2]
    2430:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
    2432:	4b11      	ldr	r3, [pc, #68]	; (2478 <CLI_i2cScan+0x118>)
    2434:	0018      	movs	r0, r3
    2436:	4b0e      	ldr	r3, [pc, #56]	; (2470 <CLI_i2cScan+0x110>)
    2438:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
    243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    243c:	3301      	adds	r3, #1
    243e:	633b      	str	r3, [r7, #48]	; 0x30
    2440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2442:	2b0f      	cmp	r3, #15
    2444:	ddcc      	ble.n	23e0 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
    2446:	4b10      	ldr	r3, [pc, #64]	; (2488 <CLI_i2cScan+0x128>)
    2448:	0018      	movs	r0, r3
    244a:	4b09      	ldr	r3, [pc, #36]	; (2470 <CLI_i2cScan+0x110>)
    244c:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
    244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2450:	3310      	adds	r3, #16
    2452:	637b      	str	r3, [r7, #52]	; 0x34
    2454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2456:	2b7f      	cmp	r3, #127	; 0x7f
    2458:	ddb5      	ble.n	23c6 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
    245a:	4b0b      	ldr	r3, [pc, #44]	; (2488 <CLI_i2cScan+0x128>)
    245c:	0018      	movs	r0, r3
    245e:	4b04      	ldr	r3, [pc, #16]	; (2470 <CLI_i2cScan+0x110>)
    2460:	4798      	blx	r3
			return pdFALSE;
    2462:	2300      	movs	r3, #0

}
    2464:	0018      	movs	r0, r3
    2466:	46bd      	mov	sp, r7
    2468:	b00f      	add	sp, #60	; 0x3c
    246a:	bd90      	pop	{r4, r7, pc}
    246c:	00025f00 	.word	0x00025f00
    2470:	0000d009 	.word	0x0000d009
    2474:	00025f34 	.word	0x00025f34
    2478:	20000524 	.word	0x20000524
    247c:	00024a11 	.word	0x00024a11
    2480:	000030b5 	.word	0x000030b5
    2484:	00025f3c 	.word	0x00025f3c
    2488:	00025e00 	.word	0x00025e00

0000248c <CLI_NAU78_GET_WEIGHT>:

BaseType_t CLI_NAU78_GET_WEIGHT( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString ){
    248c:	b590      	push	{r4, r7, lr}
    248e:	b087      	sub	sp, #28
    2490:	af00      	add	r7, sp, #0
    2492:	60f8      	str	r0, [r7, #12]
    2494:	60b9      	str	r1, [r7, #8]
    2496:	607a      	str	r2, [r7, #4]
	uint32_t w = 50;
    2498:	2332      	movs	r3, #50	; 0x32
    249a:	617b      	str	r3, [r7, #20]
	w = get_weight();
    249c:	4b0b      	ldr	r3, [pc, #44]	; (24cc <CLI_NAU78_GET_WEIGHT+0x40>)
    249e:	4798      	blx	r3
    24a0:	1c02      	adds	r2, r0, #0
    24a2:	4b0b      	ldr	r3, [pc, #44]	; (24d0 <CLI_NAU78_GET_WEIGHT+0x44>)
    24a4:	1c10      	adds	r0, r2, #0
    24a6:	4798      	blx	r3
    24a8:	0003      	movs	r3, r0
    24aa:	617b      	str	r3, [r7, #20]
	snprintf(pcWriteBuffer,xWriteBufferLen, "The weight is %d \r\n", w);
    24ac:	697b      	ldr	r3, [r7, #20]
    24ae:	4a09      	ldr	r2, [pc, #36]	; (24d4 <CLI_NAU78_GET_WEIGHT+0x48>)
    24b0:	68b9      	ldr	r1, [r7, #8]
    24b2:	68f8      	ldr	r0, [r7, #12]
    24b4:	4c08      	ldr	r4, [pc, #32]	; (24d8 <CLI_NAU78_GET_WEIGHT+0x4c>)
    24b6:	47a0      	blx	r4
	SerialConsoleWriteString(pcWriteBuffer);
    24b8:	68fb      	ldr	r3, [r7, #12]
    24ba:	0018      	movs	r0, r3
    24bc:	4b07      	ldr	r3, [pc, #28]	; (24dc <CLI_NAU78_GET_WEIGHT+0x50>)
    24be:	4798      	blx	r3
	return pdFALSE;
    24c0:	2300      	movs	r3, #0
    24c2:	0018      	movs	r0, r3
    24c4:	46bd      	mov	sp, r7
    24c6:	b007      	add	sp, #28
    24c8:	bd90      	pop	{r4, r7, pc}
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	000045e9 	.word	0x000045e9
    24d0:	0002203d 	.word	0x0002203d
    24d4:	00025f40 	.word	0x00025f40
    24d8:	00024a11 	.word	0x00024a11
    24dc:	0000d009 	.word	0x0000d009

000024e0 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
    24e0:	b580      	push	{r7, lr}
    24e2:	b088      	sub	sp, #32
    24e4:	af00      	add	r7, sp, #0
    24e6:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
    24e8:	4b33      	ldr	r3, [pc, #204]	; (25b8 <vControlHandlerTask+0xd8>)
    24ea:	0018      	movs	r0, r3
    24ec:	4b33      	ldr	r3, [pc, #204]	; (25bc <vControlHandlerTask+0xdc>)
    24ee:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
    24f0:	2200      	movs	r2, #0
    24f2:	2114      	movs	r1, #20
    24f4:	2002      	movs	r0, #2
    24f6:	4b32      	ldr	r3, [pc, #200]	; (25c0 <vControlHandlerTask+0xe0>)
    24f8:	4798      	blx	r3
    24fa:	0002      	movs	r2, r0
    24fc:	4b31      	ldr	r3, [pc, #196]	; (25c4 <vControlHandlerTask+0xe4>)
    24fe:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
    2500:	2200      	movs	r2, #0
    2502:	2103      	movs	r1, #3
    2504:	2002      	movs	r0, #2
    2506:	4b2e      	ldr	r3, [pc, #184]	; (25c0 <vControlHandlerTask+0xe0>)
    2508:	4798      	blx	r3
    250a:	0002      	movs	r2, r0
    250c:	4b2e      	ldr	r3, [pc, #184]	; (25c8 <vControlHandlerTask+0xe8>)
    250e:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
    2510:	4b2c      	ldr	r3, [pc, #176]	; (25c4 <vControlHandlerTask+0xe4>)
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	2b00      	cmp	r3, #0
    2516:	d003      	beq.n	2520 <vControlHandlerTask+0x40>
    2518:	4b2b      	ldr	r3, [pc, #172]	; (25c8 <vControlHandlerTask+0xe8>)
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	2b00      	cmp	r3, #0
    251e:	d103      	bne.n	2528 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
    2520:	4b2a      	ldr	r3, [pc, #168]	; (25cc <vControlHandlerTask+0xec>)
    2522:	0018      	movs	r0, r3
    2524:	4b25      	ldr	r3, [pc, #148]	; (25bc <vControlHandlerTask+0xdc>)
    2526:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
    2528:	4b29      	ldr	r3, [pc, #164]	; (25d0 <vControlHandlerTask+0xf0>)
    252a:	2200      	movs	r2, #0
    252c:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
    252e:	4b28      	ldr	r3, [pc, #160]	; (25d0 <vControlHandlerTask+0xf0>)
    2530:	781b      	ldrb	r3, [r3, #0]
    2532:	2b01      	cmp	r3, #1
    2534:	d01d      	beq.n	2572 <vControlHandlerTask+0x92>
    2536:	2b02      	cmp	r3, #2
    2538:	d035      	beq.n	25a6 <vControlHandlerTask+0xc6>
    253a:	2b00      	cmp	r3, #0
    253c:	d12f      	bne.n	259e <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
    253e:	4b21      	ldr	r3, [pc, #132]	; (25c4 <vControlHandlerTask+0xe4>)
    2540:	681b      	ldr	r3, [r3, #0]
    2542:	220c      	movs	r2, #12
    2544:	18b9      	adds	r1, r7, r2
    2546:	2200      	movs	r2, #0
    2548:	0018      	movs	r0, r3
    254a:	4b22      	ldr	r3, [pc, #136]	; (25d4 <vControlHandlerTask+0xf4>)
    254c:	4798      	blx	r3
    254e:	0003      	movs	r3, r0
    2550:	2b01      	cmp	r3, #1
    2552:	d12a      	bne.n	25aa <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
    2554:	4b20      	ldr	r3, [pc, #128]	; (25d8 <vControlHandlerTask+0xf8>)
    2556:	0019      	movs	r1, r3
    2558:	2001      	movs	r0, #1
    255a:	4b20      	ldr	r3, [pc, #128]	; (25dc <vControlHandlerTask+0xfc>)
    255c:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
    255e:	230c      	movs	r3, #12
    2560:	18fb      	adds	r3, r7, r3
    2562:	0018      	movs	r0, r3
    2564:	4b1e      	ldr	r3, [pc, #120]	; (25e0 <vControlHandlerTask+0x100>)
    2566:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
    2568:	4b19      	ldr	r3, [pc, #100]	; (25d0 <vControlHandlerTask+0xf0>)
    256a:	2201      	movs	r2, #1
    256c:	701a      	strb	r2, [r3, #0]
                }

                break;
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	e01b      	b.n	25aa <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
    2572:	4b1c      	ldr	r3, [pc, #112]	; (25e4 <vControlHandlerTask+0x104>)
    2574:	4798      	blx	r3
    2576:	1e03      	subs	r3, r0, #0
    2578:	d019      	beq.n	25ae <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
    257a:	4b1b      	ldr	r3, [pc, #108]	; (25e8 <vControlHandlerTask+0x108>)
    257c:	4798      	blx	r3
    257e:	0003      	movs	r3, r0
    2580:	0018      	movs	r0, r3
    2582:	4b1a      	ldr	r3, [pc, #104]	; (25ec <vControlHandlerTask+0x10c>)
    2584:	4798      	blx	r3
    2586:	0003      	movs	r3, r0
    2588:	2b01      	cmp	r3, #1
    258a:	d004      	beq.n	2596 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
    258c:	4b18      	ldr	r3, [pc, #96]	; (25f0 <vControlHandlerTask+0x110>)
    258e:	0019      	movs	r1, r3
    2590:	2001      	movs	r0, #1
    2592:	4b12      	ldr	r3, [pc, #72]	; (25dc <vControlHandlerTask+0xfc>)
    2594:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
    2596:	4b0e      	ldr	r3, [pc, #56]	; (25d0 <vControlHandlerTask+0xf0>)
    2598:	2200      	movs	r2, #0
    259a:	701a      	strb	r2, [r3, #0]
                }

                break;
    259c:	e007      	b.n	25ae <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
    259e:	4b0c      	ldr	r3, [pc, #48]	; (25d0 <vControlHandlerTask+0xf0>)
    25a0:	2200      	movs	r2, #0
    25a2:	701a      	strb	r2, [r3, #0]
                break;
    25a4:	e004      	b.n	25b0 <vControlHandlerTask+0xd0>
                break;
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	e002      	b.n	25b0 <vControlHandlerTask+0xd0>
                break;
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	e000      	b.n	25b0 <vControlHandlerTask+0xd0>
                break;
    25ae:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
    25b0:	2028      	movs	r0, #40	; 0x28
    25b2:	4b10      	ldr	r3, [pc, #64]	; (25f4 <vControlHandlerTask+0x114>)
    25b4:	4798      	blx	r3
        switch (controlState) {
    25b6:	e7ba      	b.n	252e <vControlHandlerTask+0x4e>
    25b8:	00025ff4 	.word	0x00025ff4
    25bc:	0000d009 	.word	0x0000d009
    25c0:	000096a9 	.word	0x000096a9
    25c4:	20000620 	.word	0x20000620
    25c8:	20000624 	.word	0x20000624
    25cc:	00026014 	.word	0x00026014
    25d0:	20004414 	.word	0x20004414
    25d4:	0000a209 	.word	0x0000a209
    25d8:	00026040 	.word	0x00026040
    25dc:	0000d0f5 	.word	0x0000d0f5
    25e0:	00004e0d 	.word	0x00004e0d
    25e4:	00004e49 	.word	0x00004e49
    25e8:	00004e5d 	.word	0x00004e5d
    25ec:	0000674d 	.word	0x0000674d
    25f0:	00026068 	.word	0x00026068
    25f4:	0000b3b5 	.word	0x0000b3b5

000025f8 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
    25f8:	b590      	push	{r4, r7, lr}
    25fa:	b085      	sub	sp, #20
    25fc:	af00      	add	r7, sp, #0
    25fe:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
    2600:	4b06      	ldr	r3, [pc, #24]	; (261c <ControlAddGameData+0x24>)
    2602:	6818      	ldr	r0, [r3, #0]
    2604:	6879      	ldr	r1, [r7, #4]
    2606:	2300      	movs	r3, #0
    2608:	220a      	movs	r2, #10
    260a:	4c05      	ldr	r4, [pc, #20]	; (2620 <ControlAddGameData+0x28>)
    260c:	47a0      	blx	r4
    260e:	0003      	movs	r3, r0
    2610:	60fb      	str	r3, [r7, #12]
    return error;
    2612:	68fb      	ldr	r3, [r7, #12]
}
    2614:	0018      	movs	r0, r3
    2616:	46bd      	mov	sp, r7
    2618:	b005      	add	sp, #20
    261a:	bd90      	pop	{r4, r7, pc}
    261c:	20000620 	.word	0x20000620
    2620:	00009951 	.word	0x00009951

00002624 <system_interrupt_enable>:
{
    2624:	b580      	push	{r7, lr}
    2626:	b082      	sub	sp, #8
    2628:	af00      	add	r7, sp, #0
    262a:	0002      	movs	r2, r0
    262c:	1dfb      	adds	r3, r7, #7
    262e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2630:	4b06      	ldr	r3, [pc, #24]	; (264c <system_interrupt_enable+0x28>)
    2632:	1dfa      	adds	r2, r7, #7
    2634:	7812      	ldrb	r2, [r2, #0]
    2636:	0011      	movs	r1, r2
    2638:	221f      	movs	r2, #31
    263a:	400a      	ands	r2, r1
    263c:	2101      	movs	r1, #1
    263e:	4091      	lsls	r1, r2
    2640:	000a      	movs	r2, r1
    2642:	601a      	str	r2, [r3, #0]
}
    2644:	46c0      	nop			; (mov r8, r8)
    2646:	46bd      	mov	sp, r7
    2648:	b002      	add	sp, #8
    264a:	bd80      	pop	{r7, pc}
    264c:	e000e100 	.word	0xe000e100

00002650 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    2650:	b580      	push	{r7, lr}
    2652:	b084      	sub	sp, #16
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	681b      	ldr	r3, [r3, #0]
    265c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    265e:	68fb      	ldr	r3, [r7, #12]
    2660:	69db      	ldr	r3, [r3, #28]
    2662:	1e5a      	subs	r2, r3, #1
    2664:	4193      	sbcs	r3, r2
    2666:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    2668:	0018      	movs	r0, r3
    266a:	46bd      	mov	sp, r7
    266c:	b004      	add	sp, #16
    266e:	bd80      	pop	{r7, pc}

00002670 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    2670:	b580      	push	{r7, lr}
    2672:	b082      	sub	sp, #8
    2674:	af00      	add	r7, sp, #0
    2676:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2678:	46c0      	nop			; (mov r8, r8)
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	0018      	movs	r0, r3
    267e:	4b04      	ldr	r3, [pc, #16]	; (2690 <_usart_wait_for_sync+0x20>)
    2680:	4798      	blx	r3
    2682:	1e03      	subs	r3, r0, #0
    2684:	d1f9      	bne.n	267a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	46bd      	mov	sp, r7
    268a:	b002      	add	sp, #8
    268c:	bd80      	pop	{r7, pc}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	00002651 	.word	0x00002651

00002694 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    2694:	b580      	push	{r7, lr}
    2696:	b082      	sub	sp, #8
    2698:	af00      	add	r7, sp, #0
    269a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	2280      	movs	r2, #128	; 0x80
    26a0:	05d2      	lsls	r2, r2, #23
    26a2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	2200      	movs	r2, #0
    26a8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	22ff      	movs	r2, #255	; 0xff
    26ae:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	2200      	movs	r2, #0
    26b4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	2200      	movs	r2, #0
    26ba:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    26bc:	687b      	ldr	r3, [r7, #4]
    26be:	2296      	movs	r2, #150	; 0x96
    26c0:	0192      	lsls	r2, r2, #6
    26c2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    26c4:	687b      	ldr	r3, [r7, #4]
    26c6:	2224      	movs	r2, #36	; 0x24
    26c8:	2101      	movs	r1, #1
    26ca:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	2225      	movs	r2, #37	; 0x25
    26d0:	2101      	movs	r1, #1
    26d2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	2226      	movs	r2, #38	; 0x26
    26d8:	2100      	movs	r1, #0
    26da:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	2227      	movs	r2, #39	; 0x27
    26e0:	2100      	movs	r1, #0
    26e2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	2200      	movs	r2, #0
    26e8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	2288      	movs	r2, #136	; 0x88
    26ee:	0352      	lsls	r2, r2, #13
    26f0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	222c      	movs	r2, #44	; 0x2c
    26f6:	2100      	movs	r1, #0
    26f8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	222d      	movs	r2, #45	; 0x2d
    26fe:	2100      	movs	r1, #0
    2700:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	2200      	movs	r2, #0
    2706:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	2200      	movs	r2, #0
    270c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	2200      	movs	r2, #0
    2712:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	2200      	movs	r2, #0
    2718:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	2200      	movs	r2, #0
    271e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	2200      	movs	r2, #0
    2724:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	2200      	movs	r2, #0
    272a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	2200      	movs	r2, #0
    2730:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	2200      	movs	r2, #0
    2736:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	2200      	movs	r2, #0
    273c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	2213      	movs	r2, #19
    2742:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	2200      	movs	r2, #0
    2748:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	46bd      	mov	sp, r7
    274e:	b002      	add	sp, #8
    2750:	bd80      	pop	{r7, pc}
	...

00002754 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    2754:	b580      	push	{r7, lr}
    2756:	b084      	sub	sp, #16
    2758:	af00      	add	r7, sp, #0
    275a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    275c:	687b      	ldr	r3, [r7, #4]
    275e:	681b      	ldr	r3, [r3, #0]
    2760:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	681b      	ldr	r3, [r3, #0]
    2766:	0018      	movs	r0, r3
    2768:	4b09      	ldr	r3, [pc, #36]	; (2790 <usart_enable+0x3c>)
    276a:	4798      	blx	r3
    276c:	0003      	movs	r3, r0
    276e:	0018      	movs	r0, r3
    2770:	4b08      	ldr	r3, [pc, #32]	; (2794 <usart_enable+0x40>)
    2772:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	0018      	movs	r0, r3
    2778:	4b07      	ldr	r3, [pc, #28]	; (2798 <usart_enable+0x44>)
    277a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    277c:	68fb      	ldr	r3, [r7, #12]
    277e:	681b      	ldr	r3, [r3, #0]
    2780:	2202      	movs	r2, #2
    2782:	431a      	orrs	r2, r3
    2784:	68fb      	ldr	r3, [r7, #12]
    2786:	601a      	str	r2, [r3, #0]
}
    2788:	46c0      	nop			; (mov r8, r8)
    278a:	46bd      	mov	sp, r7
    278c:	b004      	add	sp, #16
    278e:	bd80      	pop	{r7, pc}
    2790:	00016981 	.word	0x00016981
    2794:	00002625 	.word	0x00002625
    2798:	00002671 	.word	0x00002671

0000279c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    279c:	b580      	push	{r7, lr}
    279e:	b082      	sub	sp, #8
    27a0:	af00      	add	r7, sp, #0
    27a2:	6078      	str	r0, [r7, #4]
    27a4:	000a      	movs	r2, r1
    27a6:	1cfb      	adds	r3, r7, #3
    27a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	2231      	movs	r2, #49	; 0x31
    27ae:	5c9b      	ldrb	r3, [r3, r2]
    27b0:	b25a      	sxtb	r2, r3
    27b2:	1cfb      	adds	r3, r7, #3
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	2101      	movs	r1, #1
    27b8:	4099      	lsls	r1, r3
    27ba:	000b      	movs	r3, r1
    27bc:	b25b      	sxtb	r3, r3
    27be:	4313      	orrs	r3, r2
    27c0:	b25b      	sxtb	r3, r3
    27c2:	b2d9      	uxtb	r1, r3
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	2231      	movs	r2, #49	; 0x31
    27c8:	5499      	strb	r1, [r3, r2]

}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	46bd      	mov	sp, r7
    27ce:	b002      	add	sp, #8
    27d0:	bd80      	pop	{r7, pc}
	...

000027d4 <distUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b084      	sub	sp, #16
    27d8:	af00      	add	r7, sp, #0
    27da:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    27dc:	2300      	movs	r3, #0
    27de:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
    27e0:	4b09      	ldr	r3, [pc, #36]	; (2808 <distUsartWritecallback+0x34>)
    27e2:	681b      	ldr	r3, [r3, #0]
    27e4:	220c      	movs	r2, #12
    27e6:	18ba      	adds	r2, r7, r2
    27e8:	0011      	movs	r1, r2
    27ea:	0018      	movs	r0, r3
    27ec:	4b07      	ldr	r3, [pc, #28]	; (280c <distUsartWritecallback+0x38>)
    27ee:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    27f0:	68fb      	ldr	r3, [r7, #12]
    27f2:	2b00      	cmp	r3, #0
    27f4:	d003      	beq.n	27fe <distUsartWritecallback+0x2a>
    27f6:	4b06      	ldr	r3, [pc, #24]	; (2810 <distUsartWritecallback+0x3c>)
    27f8:	2280      	movs	r2, #128	; 0x80
    27fa:	0552      	lsls	r2, r2, #21
    27fc:	601a      	str	r2, [r3, #0]
}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	46bd      	mov	sp, r7
    2802:	b004      	add	sp, #16
    2804:	bd80      	pop	{r7, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	2000441c 	.word	0x2000441c
    280c:	00009fd9 	.word	0x00009fd9
    2810:	e000ed04 	.word	0xe000ed04

00002814 <distUsartReadcallback>:
// Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
    2814:	b580      	push	{r7, lr}
    2816:	b084      	sub	sp, #16
    2818:	af00      	add	r7, sp, #0
    281a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    281c:	2300      	movs	r3, #0
    281e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
    2820:	4b09      	ldr	r3, [pc, #36]	; (2848 <distUsartReadcallback+0x34>)
    2822:	681b      	ldr	r3, [r3, #0]
    2824:	220c      	movs	r2, #12
    2826:	18ba      	adds	r2, r7, r2
    2828:	0011      	movs	r1, r2
    282a:	0018      	movs	r0, r3
    282c:	4b07      	ldr	r3, [pc, #28]	; (284c <distUsartReadcallback+0x38>)
    282e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2830:	68fb      	ldr	r3, [r7, #12]
    2832:	2b00      	cmp	r3, #0
    2834:	d003      	beq.n	283e <distUsartReadcallback+0x2a>
    2836:	4b06      	ldr	r3, [pc, #24]	; (2850 <distUsartReadcallback+0x3c>)
    2838:	2280      	movs	r2, #128	; 0x80
    283a:	0552      	lsls	r2, r2, #21
    283c:	601a      	str	r2, [r3, #0]
}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	46bd      	mov	sp, r7
    2842:	b004      	add	sp, #16
    2844:	bd80      	pop	{r7, pc}
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	2000441c 	.word	0x2000441c
    284c:	00009fd9 	.word	0x00009fd9
    2850:	e000ed04 	.word	0xe000ed04

00002854 <InitializeDistanceSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeDistanceSensor(void)
{
    2854:	b580      	push	{r7, lr}
    2856:	af00      	add	r7, sp, #0
    // Configure USART and Callbacks
    configure_usart();
    2858:	4b10      	ldr	r3, [pc, #64]	; (289c <InitializeDistanceSensor+0x48>)
    285a:	4798      	blx	r3
    configure_usart_callbacks();
    285c:	4b10      	ldr	r3, [pc, #64]	; (28a0 <InitializeDistanceSensor+0x4c>)
    285e:	4798      	blx	r3

    sensorDistanceMutexHandle = xSemaphoreCreateMutex();
    2860:	2001      	movs	r0, #1
    2862:	4b10      	ldr	r3, [pc, #64]	; (28a4 <InitializeDistanceSensor+0x50>)
    2864:	4798      	blx	r3
    2866:	0002      	movs	r2, r0
    2868:	4b0f      	ldr	r3, [pc, #60]	; (28a8 <InitializeDistanceSensor+0x54>)
    286a:	601a      	str	r2, [r3, #0]
    sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
    286c:	2203      	movs	r2, #3
    286e:	2100      	movs	r1, #0
    2870:	2001      	movs	r0, #1
    2872:	4b0e      	ldr	r3, [pc, #56]	; (28ac <InitializeDistanceSensor+0x58>)
    2874:	4798      	blx	r3
    2876:	0002      	movs	r2, r0
    2878:	4b0d      	ldr	r3, [pc, #52]	; (28b0 <InitializeDistanceSensor+0x5c>)
    287a:	601a      	str	r2, [r3, #0]

    if (NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle) {
    287c:	4b0a      	ldr	r3, [pc, #40]	; (28a8 <InitializeDistanceSensor+0x54>)
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	2b00      	cmp	r3, #0
    2882:	d003      	beq.n	288c <InitializeDistanceSensor+0x38>
    2884:	4b0a      	ldr	r3, [pc, #40]	; (28b0 <InitializeDistanceSensor+0x5c>)
    2886:	681b      	ldr	r3, [r3, #0]
    2888:	2b00      	cmp	r3, #0
    288a:	d103      	bne.n	2894 <InitializeDistanceSensor+0x40>
        SerialConsoleWriteString((char *)"Could not initialize Distance Sensor!");
    288c:	4b09      	ldr	r3, [pc, #36]	; (28b4 <InitializeDistanceSensor+0x60>)
    288e:	0018      	movs	r0, r3
    2890:	4b09      	ldr	r3, [pc, #36]	; (28b8 <InitializeDistanceSensor+0x64>)
    2892:	4798      	blx	r3
    }
}
    2894:	46c0      	nop			; (mov r8, r8)
    2896:	46bd      	mov	sp, r7
    2898:	bd80      	pop	{r7, pc}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	0000298d 	.word	0x0000298d
    28a0:	00002a05 	.word	0x00002a05
    28a4:	00009911 	.word	0x00009911
    28a8:	20004420 	.word	0x20004420
    28ac:	000096a9 	.word	0x000096a9
    28b0:	2000441c 	.word	0x2000441c
    28b4:	00026098 	.word	0x00026098
    28b8:	0000d009 	.word	0x0000d009

000028bc <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
    28bc:	b580      	push	{r7, lr}
    28be:	b084      	sub	sp, #16
    28c0:	af00      	add	r7, sp, #0
    28c2:	6078      	str	r0, [r7, #4]
    28c4:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
    28c6:	2300      	movs	r3, #0
    28c8:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
    28ca:	2396      	movs	r3, #150	; 0x96
    28cc:	005b      	lsls	r3, r3, #1
    28ce:	0018      	movs	r0, r3
    28d0:	4b25      	ldr	r3, [pc, #148]	; (2968 <DistanceSensorGetDistance+0xac>)
    28d2:	4798      	blx	r3
    28d4:	0003      	movs	r3, r0
    28d6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
    28d8:	68fb      	ldr	r3, [r7, #12]
    28da:	2b00      	cmp	r3, #0
    28dc:	d139      	bne.n	2952 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
    28de:	4b23      	ldr	r3, [pc, #140]	; (296c <DistanceSensorGetDistance+0xb0>)
    28e0:	2255      	movs	r2, #85	; 0x55
    28e2:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
    28e4:	4921      	ldr	r1, [pc, #132]	; (296c <DistanceSensorGetDistance+0xb0>)
    28e6:	4b22      	ldr	r3, [pc, #136]	; (2970 <DistanceSensorGetDistance+0xb4>)
    28e8:	2201      	movs	r2, #1
    28ea:	0018      	movs	r0, r3
    28ec:	4b21      	ldr	r3, [pc, #132]	; (2974 <DistanceSensorGetDistance+0xb8>)
    28ee:	4798      	blx	r3
    28f0:	1e03      	subs	r3, r0, #0
    28f2:	d130      	bne.n	2956 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
    28f4:	4b20      	ldr	r3, [pc, #128]	; (2978 <DistanceSensorGetDistance+0xbc>)
    28f6:	681b      	ldr	r3, [r3, #0]
    28f8:	683a      	ldr	r2, [r7, #0]
    28fa:	0011      	movs	r1, r2
    28fc:	0018      	movs	r0, r3
    28fe:	4b1f      	ldr	r3, [pc, #124]	; (297c <DistanceSensorGetDistance+0xc0>)
    2900:	4798      	blx	r3
    2902:	0003      	movs	r3, r0
    2904:	2b01      	cmp	r3, #1
    2906:	d003      	beq.n	2910 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    2908:	2303      	movs	r3, #3
    290a:	425b      	negs	r3, r3
    290c:	60fb      	str	r3, [r7, #12]
        goto exitf;
    290e:	e023      	b.n	2958 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
    2910:	491b      	ldr	r1, [pc, #108]	; (2980 <DistanceSensorGetDistance+0xc4>)
    2912:	4b17      	ldr	r3, [pc, #92]	; (2970 <DistanceSensorGetDistance+0xb4>)
    2914:	2202      	movs	r2, #2
    2916:	0018      	movs	r0, r3
    2918:	4b1a      	ldr	r3, [pc, #104]	; (2984 <DistanceSensorGetDistance+0xc8>)
    291a:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
    291c:	4b16      	ldr	r3, [pc, #88]	; (2978 <DistanceSensorGetDistance+0xbc>)
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	683a      	ldr	r2, [r7, #0]
    2922:	0011      	movs	r1, r2
    2924:	0018      	movs	r0, r3
    2926:	4b15      	ldr	r3, [pc, #84]	; (297c <DistanceSensorGetDistance+0xc0>)
    2928:	4798      	blx	r3
    292a:	0003      	movs	r3, r0
    292c:	2b01      	cmp	r3, #1
    292e:	d10c      	bne.n	294a <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
    2930:	4b13      	ldr	r3, [pc, #76]	; (2980 <DistanceSensorGetDistance+0xc4>)
    2932:	781b      	ldrb	r3, [r3, #0]
    2934:	b29b      	uxth	r3, r3
    2936:	021b      	lsls	r3, r3, #8
    2938:	b29a      	uxth	r2, r3
    293a:	4b11      	ldr	r3, [pc, #68]	; (2980 <DistanceSensorGetDistance+0xc4>)
    293c:	785b      	ldrb	r3, [r3, #1]
    293e:	b29b      	uxth	r3, r3
    2940:	18d3      	adds	r3, r2, r3
    2942:	b29a      	uxth	r2, r3
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	801a      	strh	r2, [r3, #0]
    2948:	e006      	b.n	2958 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    294a:	2303      	movs	r3, #3
    294c:	425b      	negs	r3, r3
    294e:	60fb      	str	r3, [r7, #12]
        goto exitf;
    2950:	e002      	b.n	2958 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	e000      	b.n	2958 <DistanceSensorGetDistance+0x9c>
        goto exitf;
    2956:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
    2958:	4b0b      	ldr	r3, [pc, #44]	; (2988 <DistanceSensorGetDistance+0xcc>)
    295a:	4798      	blx	r3

    return error;
    295c:	68fb      	ldr	r3, [r7, #12]
}
    295e:	0018      	movs	r0, r3
    2960:	46bd      	mov	sp, r7
    2962:	b004      	add	sp, #16
    2964:	bd80      	pop	{r7, pc}
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	00002a89 	.word	0x00002a89
    296c:	2000441a 	.word	0x2000441a
    2970:	20004424 	.word	0x20004424
    2974:	000181e1 	.word	0x000181e1
    2978:	2000441c 	.word	0x2000441c
    297c:	0000a661 	.word	0x0000a661
    2980:	20004418 	.word	0x20004418
    2984:	00018229 	.word	0x00018229
    2988:	00002a51 	.word	0x00002a51

0000298c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
    298c:	b580      	push	{r7, lr}
    298e:	b090      	sub	sp, #64	; 0x40
    2990:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    2992:	003b      	movs	r3, r7
    2994:	0018      	movs	r0, r3
    2996:	4b14      	ldr	r3, [pc, #80]	; (29e8 <configure_usart+0x5c>)
    2998:	4798      	blx	r3

    config_usart.baudrate = 9600;
    299a:	003b      	movs	r3, r7
    299c:	2296      	movs	r2, #150	; 0x96
    299e:	0192      	lsls	r2, r2, #6
    29a0:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    29a2:	003b      	movs	r3, r7
    29a4:	2280      	movs	r2, #128	; 0x80
    29a6:	0352      	lsls	r2, r2, #13
    29a8:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
    29aa:	003b      	movs	r3, r7
    29ac:	4a0f      	ldr	r2, [pc, #60]	; (29ec <configure_usart+0x60>)
    29ae:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
    29b0:	003b      	movs	r3, r7
    29b2:	4a0f      	ldr	r2, [pc, #60]	; (29f0 <configure_usart+0x64>)
    29b4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    29b6:	003b      	movs	r3, r7
    29b8:	2201      	movs	r2, #1
    29ba:	4252      	negs	r2, r2
    29bc:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    29be:	003b      	movs	r3, r7
    29c0:	2201      	movs	r2, #1
    29c2:	4252      	negs	r2, r2
    29c4:	63da      	str	r2, [r3, #60]	; 0x3c

    while (usart_init(&usart_instance_dist, SERCOM5, &config_usart) != STATUS_OK) {
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	003a      	movs	r2, r7
    29ca:	490a      	ldr	r1, [pc, #40]	; (29f4 <configure_usart+0x68>)
    29cc:	4b0a      	ldr	r3, [pc, #40]	; (29f8 <configure_usart+0x6c>)
    29ce:	0018      	movs	r0, r3
    29d0:	4b0a      	ldr	r3, [pc, #40]	; (29fc <configure_usart+0x70>)
    29d2:	4798      	blx	r3
    29d4:	1e03      	subs	r3, r0, #0
    29d6:	d1f7      	bne.n	29c8 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance_dist);
    29d8:	4b07      	ldr	r3, [pc, #28]	; (29f8 <configure_usart+0x6c>)
    29da:	0018      	movs	r0, r3
    29dc:	4b08      	ldr	r3, [pc, #32]	; (2a00 <configure_usart+0x74>)
    29de:	4798      	blx	r3
}
    29e0:	46c0      	nop			; (mov r8, r8)
    29e2:	46bd      	mov	sp, r7
    29e4:	b010      	add	sp, #64	; 0x40
    29e6:	bd80      	pop	{r7, pc}
    29e8:	00002695 	.word	0x00002695
    29ec:	00220003 	.word	0x00220003
    29f0:	00230003 	.word	0x00230003
    29f4:	42001c00 	.word	0x42001c00
    29f8:	20004424 	.word	0x20004424
    29fc:	00017de5 	.word	0x00017de5
    2a00:	00002755 	.word	0x00002755

00002a04 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
    2a04:	b580      	push	{r7, lr}
    2a06:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance_dist, distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
    2a08:	490c      	ldr	r1, [pc, #48]	; (2a3c <configure_usart_callbacks+0x38>)
    2a0a:	4b0d      	ldr	r3, [pc, #52]	; (2a40 <configure_usart_callbacks+0x3c>)
    2a0c:	2200      	movs	r2, #0
    2a0e:	0018      	movs	r0, r3
    2a10:	4b0c      	ldr	r3, [pc, #48]	; (2a44 <configure_usart_callbacks+0x40>)
    2a12:	4798      	blx	r3
    usart_register_callback(&usart_instance_dist, distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
    2a14:	490c      	ldr	r1, [pc, #48]	; (2a48 <configure_usart_callbacks+0x44>)
    2a16:	4b0a      	ldr	r3, [pc, #40]	; (2a40 <configure_usart_callbacks+0x3c>)
    2a18:	2201      	movs	r2, #1
    2a1a:	0018      	movs	r0, r3
    2a1c:	4b09      	ldr	r3, [pc, #36]	; (2a44 <configure_usart_callbacks+0x40>)
    2a1e:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_TRANSMITTED);
    2a20:	4b07      	ldr	r3, [pc, #28]	; (2a40 <configure_usart_callbacks+0x3c>)
    2a22:	2100      	movs	r1, #0
    2a24:	0018      	movs	r0, r3
    2a26:	4b09      	ldr	r3, [pc, #36]	; (2a4c <configure_usart_callbacks+0x48>)
    2a28:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_RECEIVED);
    2a2a:	4b05      	ldr	r3, [pc, #20]	; (2a40 <configure_usart_callbacks+0x3c>)
    2a2c:	2101      	movs	r1, #1
    2a2e:	0018      	movs	r0, r3
    2a30:	4b06      	ldr	r3, [pc, #24]	; (2a4c <configure_usart_callbacks+0x48>)
    2a32:	4798      	blx	r3
}
    2a34:	46c0      	nop			; (mov r8, r8)
    2a36:	46bd      	mov	sp, r7
    2a38:	bd80      	pop	{r7, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	000027d5 	.word	0x000027d5
    2a40:	20004424 	.word	0x20004424
    2a44:	00018199 	.word	0x00018199
    2a48:	00002815 	.word	0x00002815
    2a4c:	0000279d 	.word	0x0000279d

00002a50 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
    2a50:	b590      	push	{r4, r7, lr}
    2a52:	b083      	sub	sp, #12
    2a54:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
    2a56:	2300      	movs	r3, #0
    2a58:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
    2a5a:	4b09      	ldr	r3, [pc, #36]	; (2a80 <DistanceSensorFreeMutex+0x30>)
    2a5c:	6818      	ldr	r0, [r3, #0]
    2a5e:	2300      	movs	r3, #0
    2a60:	2200      	movs	r2, #0
    2a62:	2100      	movs	r1, #0
    2a64:	4c07      	ldr	r4, [pc, #28]	; (2a84 <DistanceSensorFreeMutex+0x34>)
    2a66:	47a0      	blx	r4
    2a68:	0003      	movs	r3, r0
    2a6a:	2b01      	cmp	r3, #1
    2a6c:	d002      	beq.n	2a74 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
    2a6e:	2314      	movs	r3, #20
    2a70:	425b      	negs	r3, r3
    2a72:	607b      	str	r3, [r7, #4]
    }
    return error;
    2a74:	687b      	ldr	r3, [r7, #4]
}
    2a76:	0018      	movs	r0, r3
    2a78:	46bd      	mov	sp, r7
    2a7a:	b003      	add	sp, #12
    2a7c:	bd90      	pop	{r4, r7, pc}
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	20004420 	.word	0x20004420
    2a84:	00009951 	.word	0x00009951

00002a88 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
    2a88:	b580      	push	{r7, lr}
    2a8a:	b084      	sub	sp, #16
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    2a90:	2300      	movs	r3, #0
    2a92:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
    2a94:	4b08      	ldr	r3, [pc, #32]	; (2ab8 <DistanceSensorGetMutex+0x30>)
    2a96:	681b      	ldr	r3, [r3, #0]
    2a98:	687a      	ldr	r2, [r7, #4]
    2a9a:	0011      	movs	r1, r2
    2a9c:	0018      	movs	r0, r3
    2a9e:	4b07      	ldr	r3, [pc, #28]	; (2abc <DistanceSensorGetMutex+0x34>)
    2aa0:	4798      	blx	r3
    2aa2:	0003      	movs	r3, r0
    2aa4:	2b01      	cmp	r3, #1
    2aa6:	d002      	beq.n	2aae <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
    2aa8:	231d      	movs	r3, #29
    2aaa:	425b      	negs	r3, r3
    2aac:	60fb      	str	r3, [r7, #12]
    }
    return error;
    2aae:	68fb      	ldr	r3, [r7, #12]
    2ab0:	0018      	movs	r0, r3
    2ab2:	46bd      	mov	sp, r7
    2ab4:	b004      	add	sp, #16
    2ab6:	bd80      	pop	{r7, pc}
    2ab8:	20004420 	.word	0x20004420
    2abc:	0000a661 	.word	0x0000a661

00002ac0 <system_interrupt_enable>:
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b082      	sub	sp, #8
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	0002      	movs	r2, r0
    2ac8:	1dfb      	adds	r3, r7, #7
    2aca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2acc:	4b06      	ldr	r3, [pc, #24]	; (2ae8 <system_interrupt_enable+0x28>)
    2ace:	1dfa      	adds	r2, r7, #7
    2ad0:	7812      	ldrb	r2, [r2, #0]
    2ad2:	0011      	movs	r1, r2
    2ad4:	221f      	movs	r2, #31
    2ad6:	400a      	ands	r2, r1
    2ad8:	2101      	movs	r1, #1
    2ada:	4091      	lsls	r1, r2
    2adc:	000a      	movs	r2, r1
    2ade:	601a      	str	r2, [r3, #0]
}
    2ae0:	46c0      	nop			; (mov r8, r8)
    2ae2:	46bd      	mov	sp, r7
    2ae4:	b002      	add	sp, #8
    2ae6:	bd80      	pop	{r7, pc}
    2ae8:	e000e100 	.word	0xe000e100

00002aec <i2c_master_is_syncing>:
{
    2aec:	b580      	push	{r7, lr}
    2aee:	b084      	sub	sp, #16
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	681b      	ldr	r3, [r3, #0]
    2af8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	69db      	ldr	r3, [r3, #28]
    2afe:	2207      	movs	r2, #7
    2b00:	4013      	ands	r3, r2
    2b02:	1e5a      	subs	r2, r3, #1
    2b04:	4193      	sbcs	r3, r2
    2b06:	b2db      	uxtb	r3, r3
}
    2b08:	0018      	movs	r0, r3
    2b0a:	46bd      	mov	sp, r7
    2b0c:	b004      	add	sp, #16
    2b0e:	bd80      	pop	{r7, pc}

00002b10 <_i2c_master_wait_for_sync>:
{
    2b10:	b580      	push	{r7, lr}
    2b12:	b082      	sub	sp, #8
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    2b18:	46c0      	nop			; (mov r8, r8)
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	0018      	movs	r0, r3
    2b1e:	4b04      	ldr	r3, [pc, #16]	; (2b30 <_i2c_master_wait_for_sync+0x20>)
    2b20:	4798      	blx	r3
    2b22:	1e03      	subs	r3, r0, #0
    2b24:	d1f9      	bne.n	2b1a <_i2c_master_wait_for_sync+0xa>
}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	46bd      	mov	sp, r7
    2b2a:	b002      	add	sp, #8
    2b2c:	bd80      	pop	{r7, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	00002aed 	.word	0x00002aed

00002b34 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    2b34:	b580      	push	{r7, lr}
    2b36:	b082      	sub	sp, #8
    2b38:	af00      	add	r7, sp, #0
    2b3a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	2264      	movs	r2, #100	; 0x64
    2b40:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	4a1b      	ldr	r2, [pc, #108]	; (2bb4 <i2c_master_get_config_defaults+0x80>)
    2b46:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	2200      	movs	r2, #0
    2b4c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	2200      	movs	r2, #0
    2b52:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2b54:	687b      	ldr	r3, [r7, #4]
    2b56:	2200      	movs	r2, #0
    2b58:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	2280      	movs	r2, #128	; 0x80
    2b5e:	0392      	lsls	r2, r2, #14
    2b60:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	2201      	movs	r2, #1
    2b66:	4252      	negs	r2, r2
    2b68:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	2201      	movs	r2, #1
    2b6e:	4252      	negs	r2, r2
    2b70:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	2200      	movs	r2, #0
    2b76:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	2200      	movs	r2, #0
    2b7c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	2224      	movs	r2, #36	; 0x24
    2b82:	2100      	movs	r1, #0
    2b84:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	2200      	movs	r2, #0
    2b8a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	222c      	movs	r2, #44	; 0x2c
    2b90:	2100      	movs	r1, #0
    2b92:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	222d      	movs	r2, #45	; 0x2d
    2b98:	2100      	movs	r1, #0
    2b9a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	222e      	movs	r2, #46	; 0x2e
    2ba0:	2100      	movs	r1, #0
    2ba2:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	22d7      	movs	r2, #215	; 0xd7
    2ba8:	861a      	strh	r2, [r3, #48]	; 0x30
}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	46bd      	mov	sp, r7
    2bae:	b002      	add	sp, #8
    2bb0:	bd80      	pop	{r7, pc}
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	00000d48 	.word	0x00000d48

00002bb8 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    2bb8:	b580      	push	{r7, lr}
    2bba:	b084      	sub	sp, #16
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	681b      	ldr	r3, [r3, #0]
    2bc4:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    2bc6:	2300      	movs	r3, #0
    2bc8:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	0018      	movs	r0, r3
    2bce:	4b14      	ldr	r3, [pc, #80]	; (2c20 <i2c_master_enable+0x68>)
    2bd0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2bd2:	68bb      	ldr	r3, [r7, #8]
    2bd4:	681b      	ldr	r3, [r3, #0]
    2bd6:	2202      	movs	r2, #2
    2bd8:	431a      	orrs	r2, r3
    2bda:	68bb      	ldr	r3, [r7, #8]
    2bdc:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	681b      	ldr	r3, [r3, #0]
    2be2:	0018      	movs	r0, r3
    2be4:	4b0f      	ldr	r3, [pc, #60]	; (2c24 <i2c_master_enable+0x6c>)
    2be6:	4798      	blx	r3
    2be8:	0003      	movs	r3, r0
    2bea:	0018      	movs	r0, r3
    2bec:	4b0e      	ldr	r3, [pc, #56]	; (2c28 <i2c_master_enable+0x70>)
    2bee:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2bf0:	e00c      	b.n	2c0c <i2c_master_enable+0x54>
		timeout_counter++;
    2bf2:	68fb      	ldr	r3, [r7, #12]
    2bf4:	3301      	adds	r3, #1
    2bf6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2bf8:	687b      	ldr	r3, [r7, #4]
    2bfa:	88db      	ldrh	r3, [r3, #6]
    2bfc:	001a      	movs	r2, r3
    2bfe:	68fb      	ldr	r3, [r7, #12]
    2c00:	429a      	cmp	r2, r3
    2c02:	d803      	bhi.n	2c0c <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2c04:	68bb      	ldr	r3, [r7, #8]
    2c06:	2210      	movs	r2, #16
    2c08:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    2c0a:	e006      	b.n	2c1a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2c0c:	68bb      	ldr	r3, [r7, #8]
    2c0e:	8b5b      	ldrh	r3, [r3, #26]
    2c10:	b29b      	uxth	r3, r3
    2c12:	001a      	movs	r2, r3
    2c14:	2310      	movs	r3, #16
    2c16:	4013      	ands	r3, r2
    2c18:	d0eb      	beq.n	2bf2 <i2c_master_enable+0x3a>
		}
	}
}
    2c1a:	46bd      	mov	sp, r7
    2c1c:	b004      	add	sp, #16
    2c1e:	bd80      	pop	{r7, pc}
    2c20:	00002b11 	.word	0x00002b11
    2c24:	00016981 	.word	0x00016981
    2c28:	00002ac1 	.word	0x00002ac1

00002c2c <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    2c2c:	b580      	push	{r7, lr}
    2c2e:	b082      	sub	sp, #8
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
    2c34:	000a      	movs	r2, r1
    2c36:	1cfb      	adds	r3, r7, #3
    2c38:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	7e5b      	ldrb	r3, [r3, #25]
    2c3e:	b2db      	uxtb	r3, r3
    2c40:	b25a      	sxtb	r2, r3
    2c42:	1cfb      	adds	r3, r7, #3
    2c44:	781b      	ldrb	r3, [r3, #0]
    2c46:	2101      	movs	r1, #1
    2c48:	4099      	lsls	r1, r3
    2c4a:	000b      	movs	r3, r1
    2c4c:	b25b      	sxtb	r3, r3
    2c4e:	4313      	orrs	r3, r2
    2c50:	b25b      	sxtb	r3, r3
    2c52:	b2da      	uxtb	r2, r3
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	765a      	strb	r2, [r3, #25]
}
    2c58:	46c0      	nop			; (mov r8, r8)
    2c5a:	46bd      	mov	sp, r7
    2c5c:	b002      	add	sp, #8
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
    2c60:	b590      	push	{r4, r7, lr}
    2c62:	b091      	sub	sp, #68	; 0x44
    2c64:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    2c66:	2300      	movs	r3, #0
    2c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
    2c6a:	233a      	movs	r3, #58	; 0x3a
    2c6c:	18fb      	adds	r3, r7, r3
    2c6e:	2200      	movs	r2, #0
    2c70:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
    2c72:	1d3b      	adds	r3, r7, #4
    2c74:	0018      	movs	r0, r3
    2c76:	4b21      	ldr	r3, [pc, #132]	; (2cfc <I2cDriverConfigureSensorBus+0x9c>)
    2c78:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    2c7a:	1d3b      	adds	r3, r7, #4
    2c7c:	4a20      	ldr	r2, [pc, #128]	; (2d00 <I2cDriverConfigureSensorBus+0xa0>)
    2c7e:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    2c80:	1d3b      	adds	r3, r7, #4
    2c82:	4a20      	ldr	r2, [pc, #128]	; (2d04 <I2cDriverConfigureSensorBus+0xa4>)
    2c84:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
    2c86:	1d3b      	adds	r3, r7, #4
    2c88:	22fa      	movs	r2, #250	; 0xfa
    2c8a:	0092      	lsls	r2, r2, #2
    2c8c:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    2c8e:	233b      	movs	r3, #59	; 0x3b
    2c90:	18fb      	adds	r3, r7, r3
    2c92:	2203      	movs	r2, #3
    2c94:	701a      	strb	r2, [r3, #0]
    2c96:	e01e      	b.n	2cd6 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    2c98:	233a      	movs	r3, #58	; 0x3a
    2c9a:	18fc      	adds	r4, r7, r3
    2c9c:	1d3a      	adds	r2, r7, #4
    2c9e:	491a      	ldr	r1, [pc, #104]	; (2d08 <I2cDriverConfigureSensorBus+0xa8>)
    2ca0:	4b1a      	ldr	r3, [pc, #104]	; (2d0c <I2cDriverConfigureSensorBus+0xac>)
    2ca2:	0018      	movs	r0, r3
    2ca4:	4b1a      	ldr	r3, [pc, #104]	; (2d10 <I2cDriverConfigureSensorBus+0xb0>)
    2ca6:	4798      	blx	r3
    2ca8:	0003      	movs	r3, r0
    2caa:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
    2cac:	233a      	movs	r3, #58	; 0x3a
    2cae:	18fb      	adds	r3, r7, r3
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d104      	bne.n	2cc0 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
    2cb6:	233a      	movs	r3, #58	; 0x3a
    2cb8:	18fb      	adds	r3, r7, r3
    2cba:	781b      	ldrb	r3, [r3, #0]
    2cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
    2cbe:	e00f      	b.n	2ce0 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
    2cc0:	4b12      	ldr	r3, [pc, #72]	; (2d0c <I2cDriverConfigureSensorBus+0xac>)
    2cc2:	0018      	movs	r0, r3
    2cc4:	4b13      	ldr	r3, [pc, #76]	; (2d14 <I2cDriverConfigureSensorBus+0xb4>)
    2cc6:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    2cc8:	233b      	movs	r3, #59	; 0x3b
    2cca:	18fb      	adds	r3, r7, r3
    2ccc:	781a      	ldrb	r2, [r3, #0]
    2cce:	233b      	movs	r3, #59	; 0x3b
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	3a01      	subs	r2, #1
    2cd4:	701a      	strb	r2, [r3, #0]
    2cd6:	233b      	movs	r3, #59	; 0x3b
    2cd8:	18fb      	adds	r3, r7, r3
    2cda:	781b      	ldrb	r3, [r3, #0]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d1db      	bne.n	2c98 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
    2ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d104      	bne.n	2cf0 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
    2ce6:	4b09      	ldr	r3, [pc, #36]	; (2d0c <I2cDriverConfigureSensorBus+0xac>)
    2ce8:	0018      	movs	r0, r3
    2cea:	4b0b      	ldr	r3, [pc, #44]	; (2d18 <I2cDriverConfigureSensorBus+0xb8>)
    2cec:	4798      	blx	r3
    2cee:	e000      	b.n	2cf2 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
    2cf0:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
    2cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    2cf4:	0018      	movs	r0, r3
    2cf6:	46bd      	mov	sp, r7
    2cf8:	b011      	add	sp, #68	; 0x44
    2cfa:	bd90      	pop	{r4, r7, pc}
    2cfc:	00002b35 	.word	0x00002b35
    2d00:	00080002 	.word	0x00080002
    2d04:	00090002 	.word	0x00090002
    2d08:	42000800 	.word	0x42000800
    2d0c:	2000445c 	.word	0x2000445c
    2d10:	00006d3d 	.word	0x00006d3d
    2d14:	00006e71 	.word	0x00006e71
    2d18:	00002bb9 	.word	0x00002bb9

00002d1c <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
    2d1c:	b580      	push	{r7, lr}
    2d1e:	b084      	sub	sp, #16
    2d20:	af00      	add	r7, sp, #0
    2d22:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    2d24:	4b0e      	ldr	r3, [pc, #56]	; (2d60 <I2cSensorsTxComplete+0x44>)
    2d26:	2200      	movs	r2, #0
    2d28:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    2d2a:	4b0d      	ldr	r3, [pc, #52]	; (2d60 <I2cSensorsTxComplete+0x44>)
    2d2c:	2201      	movs	r2, #1
    2d2e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    2d30:	2300      	movs	r3, #0
    2d32:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    2d34:	4b0b      	ldr	r3, [pc, #44]	; (2d64 <I2cSensorsTxComplete+0x48>)
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	220c      	movs	r2, #12
    2d3a:	18ba      	adds	r2, r7, r2
    2d3c:	0011      	movs	r1, r2
    2d3e:	0018      	movs	r0, r3
    2d40:	4b09      	ldr	r3, [pc, #36]	; (2d68 <I2cSensorsTxComplete+0x4c>)
    2d42:	4798      	blx	r3
    sensorTransmitError = false;
    2d44:	4b09      	ldr	r3, [pc, #36]	; (2d6c <I2cSensorsTxComplete+0x50>)
    2d46:	2200      	movs	r2, #0
    2d48:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2d4a:	68fb      	ldr	r3, [r7, #12]
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d003      	beq.n	2d58 <I2cSensorsTxComplete+0x3c>
    2d50:	4b07      	ldr	r3, [pc, #28]	; (2d70 <I2cSensorsTxComplete+0x54>)
    2d52:	2280      	movs	r2, #128	; 0x80
    2d54:	0552      	lsls	r2, r2, #21
    2d56:	601a      	str	r2, [r3, #0]
}
    2d58:	46c0      	nop			; (mov r8, r8)
    2d5a:	46bd      	mov	sp, r7
    2d5c:	b004      	add	sp, #16
    2d5e:	bd80      	pop	{r7, pc}
    2d60:	2000062c 	.word	0x2000062c
    2d64:	20004484 	.word	0x20004484
    2d68:	00009fd9 	.word	0x00009fd9
    2d6c:	20000628 	.word	0x20000628
    2d70:	e000ed04 	.word	0xe000ed04

00002d74 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b084      	sub	sp, #16
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    2d7c:	4b0e      	ldr	r3, [pc, #56]	; (2db8 <I2cSensorsRxComplete+0x44>)
    2d7e:	2200      	movs	r2, #0
    2d80:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    2d82:	4b0d      	ldr	r3, [pc, #52]	; (2db8 <I2cSensorsRxComplete+0x44>)
    2d84:	2201      	movs	r2, #1
    2d86:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    2d88:	2300      	movs	r3, #0
    2d8a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    2d8c:	4b0b      	ldr	r3, [pc, #44]	; (2dbc <I2cSensorsRxComplete+0x48>)
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	220c      	movs	r2, #12
    2d92:	18ba      	adds	r2, r7, r2
    2d94:	0011      	movs	r1, r2
    2d96:	0018      	movs	r0, r3
    2d98:	4b09      	ldr	r3, [pc, #36]	; (2dc0 <I2cSensorsRxComplete+0x4c>)
    2d9a:	4798      	blx	r3
    sensorTransmitError = false;
    2d9c:	4b09      	ldr	r3, [pc, #36]	; (2dc4 <I2cSensorsRxComplete+0x50>)
    2d9e:	2200      	movs	r2, #0
    2da0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2da2:	68fb      	ldr	r3, [r7, #12]
    2da4:	2b00      	cmp	r3, #0
    2da6:	d003      	beq.n	2db0 <I2cSensorsRxComplete+0x3c>
    2da8:	4b07      	ldr	r3, [pc, #28]	; (2dc8 <I2cSensorsRxComplete+0x54>)
    2daa:	2280      	movs	r2, #128	; 0x80
    2dac:	0552      	lsls	r2, r2, #21
    2dae:	601a      	str	r2, [r3, #0]
}
    2db0:	46c0      	nop			; (mov r8, r8)
    2db2:	46bd      	mov	sp, r7
    2db4:	b004      	add	sp, #16
    2db6:	bd80      	pop	{r7, pc}
    2db8:	2000062c 	.word	0x2000062c
    2dbc:	20004484 	.word	0x20004484
    2dc0:	00009fd9 	.word	0x00009fd9
    2dc4:	20000628 	.word	0x20000628
    2dc8:	e000ed04 	.word	0xe000ed04

00002dcc <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
    2dcc:	b580      	push	{r7, lr}
    2dce:	b084      	sub	sp, #16
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    2dd4:	4b0e      	ldr	r3, [pc, #56]	; (2e10 <I2cSensorsError+0x44>)
    2dd6:	2200      	movs	r2, #0
    2dd8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
    2dda:	4b0d      	ldr	r3, [pc, #52]	; (2e10 <I2cSensorsError+0x44>)
    2ddc:	2201      	movs	r2, #1
    2dde:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    2de0:	2300      	movs	r3, #0
    2de2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    2de4:	4b0b      	ldr	r3, [pc, #44]	; (2e14 <I2cSensorsError+0x48>)
    2de6:	681b      	ldr	r3, [r3, #0]
    2de8:	220c      	movs	r2, #12
    2dea:	18ba      	adds	r2, r7, r2
    2dec:	0011      	movs	r1, r2
    2dee:	0018      	movs	r0, r3
    2df0:	4b09      	ldr	r3, [pc, #36]	; (2e18 <I2cSensorsError+0x4c>)
    2df2:	4798      	blx	r3
    sensorTransmitError = true;
    2df4:	4b09      	ldr	r3, [pc, #36]	; (2e1c <I2cSensorsError+0x50>)
    2df6:	2201      	movs	r2, #1
    2df8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2dfa:	68fb      	ldr	r3, [r7, #12]
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	d003      	beq.n	2e08 <I2cSensorsError+0x3c>
    2e00:	4b07      	ldr	r3, [pc, #28]	; (2e20 <I2cSensorsError+0x54>)
    2e02:	2280      	movs	r2, #128	; 0x80
    2e04:	0552      	lsls	r2, r2, #21
    2e06:	601a      	str	r2, [r3, #0]
}
    2e08:	46c0      	nop			; (mov r8, r8)
    2e0a:	46bd      	mov	sp, r7
    2e0c:	b004      	add	sp, #16
    2e0e:	bd80      	pop	{r7, pc}
    2e10:	2000062c 	.word	0x2000062c
    2e14:	20004484 	.word	0x20004484
    2e18:	00009fd9 	.word	0x00009fd9
    2e1c:	20000628 	.word	0x20000628
    2e20:	e000ed04 	.word	0xe000ed04

00002e24 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
    2e24:	b580      	push	{r7, lr}
    2e26:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    2e28:	4911      	ldr	r1, [pc, #68]	; (2e70 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
    2e2a:	4b12      	ldr	r3, [pc, #72]	; (2e74 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2e2c:	2200      	movs	r2, #0
    2e2e:	0018      	movs	r0, r3
    2e30:	4b11      	ldr	r3, [pc, #68]	; (2e78 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    2e32:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    2e34:	4b0f      	ldr	r3, [pc, #60]	; (2e74 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2e36:	2100      	movs	r1, #0
    2e38:	0018      	movs	r0, r3
    2e3a:	4b10      	ldr	r3, [pc, #64]	; (2e7c <I2cDriverRegisterSensorBusCallbacks+0x58>)
    2e3c:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    2e3e:	4910      	ldr	r1, [pc, #64]	; (2e80 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
    2e40:	4b0c      	ldr	r3, [pc, #48]	; (2e74 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2e42:	2201      	movs	r2, #1
    2e44:	0018      	movs	r0, r3
    2e46:	4b0c      	ldr	r3, [pc, #48]	; (2e78 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    2e48:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
    2e4a:	4b0a      	ldr	r3, [pc, #40]	; (2e74 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2e4c:	2101      	movs	r1, #1
    2e4e:	0018      	movs	r0, r3
    2e50:	4b0a      	ldr	r3, [pc, #40]	; (2e7c <I2cDriverRegisterSensorBusCallbacks+0x58>)
    2e52:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
    2e54:	490b      	ldr	r1, [pc, #44]	; (2e84 <I2cDriverRegisterSensorBusCallbacks+0x60>)
    2e56:	4b07      	ldr	r3, [pc, #28]	; (2e74 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2e58:	2202      	movs	r2, #2
    2e5a:	0018      	movs	r0, r3
    2e5c:	4b06      	ldr	r3, [pc, #24]	; (2e78 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    2e5e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
    2e60:	4b04      	ldr	r3, [pc, #16]	; (2e74 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2e62:	2102      	movs	r1, #2
    2e64:	0018      	movs	r0, r3
    2e66:	4b05      	ldr	r3, [pc, #20]	; (2e7c <I2cDriverRegisterSensorBusCallbacks+0x58>)
    2e68:	4798      	blx	r3
}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	46bd      	mov	sp, r7
    2e6e:	bd80      	pop	{r7, pc}
    2e70:	00002d1d 	.word	0x00002d1d
    2e74:	2000445c 	.word	0x2000445c
    2e78:	00001561 	.word	0x00001561
    2e7c:	00002c2d 	.word	0x00002c2d
    2e80:	00002d75 	.word	0x00002d75
    2e84:	00002dcd 	.word	0x00002dcd

00002e88 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b082      	sub	sp, #8
    2e8c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    2e8e:	2300      	movs	r3, #0
    2e90:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
    2e92:	4b14      	ldr	r3, [pc, #80]	; (2ee4 <I2cInitializeDriver+0x5c>)
    2e94:	4798      	blx	r3
    2e96:	0003      	movs	r3, r0
    2e98:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d11a      	bne.n	2ed6 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
    2ea0:	4b11      	ldr	r3, [pc, #68]	; (2ee8 <I2cInitializeDriver+0x60>)
    2ea2:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
    2ea4:	2001      	movs	r0, #1
    2ea6:	4b11      	ldr	r3, [pc, #68]	; (2eec <I2cInitializeDriver+0x64>)
    2ea8:	4798      	blx	r3
    2eaa:	0002      	movs	r2, r0
    2eac:	4b10      	ldr	r3, [pc, #64]	; (2ef0 <I2cInitializeDriver+0x68>)
    2eae:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    2eb0:	2203      	movs	r2, #3
    2eb2:	2100      	movs	r1, #0
    2eb4:	2001      	movs	r0, #1
    2eb6:	4b0f      	ldr	r3, [pc, #60]	; (2ef4 <I2cInitializeDriver+0x6c>)
    2eb8:	4798      	blx	r3
    2eba:	0002      	movs	r2, r0
    2ebc:	4b0e      	ldr	r3, [pc, #56]	; (2ef8 <I2cInitializeDriver+0x70>)
    2ebe:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
    2ec0:	4b0b      	ldr	r3, [pc, #44]	; (2ef0 <I2cInitializeDriver+0x68>)
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d003      	beq.n	2ed0 <I2cInitializeDriver+0x48>
    2ec8:	4b0b      	ldr	r3, [pc, #44]	; (2ef8 <I2cInitializeDriver+0x70>)
    2eca:	681b      	ldr	r3, [r3, #0]
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d103      	bne.n	2ed8 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
    2ed0:	2306      	movs	r3, #6
    2ed2:	607b      	str	r3, [r7, #4]
        goto exit;
    2ed4:	e000      	b.n	2ed8 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
    2ed6:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    2ed8:	687b      	ldr	r3, [r7, #4]
}
    2eda:	0018      	movs	r0, r3
    2edc:	46bd      	mov	sp, r7
    2ede:	b002      	add	sp, #8
    2ee0:	bd80      	pop	{r7, pc}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	00002c61 	.word	0x00002c61
    2ee8:	00002e25 	.word	0x00002e25
    2eec:	00009911 	.word	0x00009911
    2ef0:	20004458 	.word	0x20004458
    2ef4:	000096a9 	.word	0x000096a9
    2ef8:	20004484 	.word	0x20004484

00002efc <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
    2efc:	b590      	push	{r4, r7, lr}
    2efe:	b085      	sub	sp, #20
    2f00:	af00      	add	r7, sp, #0
    2f02:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    2f04:	2300      	movs	r3, #0
    2f06:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d003      	beq.n	2f16 <I2cWriteData+0x1a>
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	685b      	ldr	r3, [r3, #4]
    2f12:	2b00      	cmp	r3, #0
    2f14:	d103      	bne.n	2f1e <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
    2f16:	2308      	movs	r3, #8
    2f18:	425b      	negs	r3, r3
    2f1a:	60fb      	str	r3, [r7, #12]
        goto exit;
    2f1c:	e01f      	b.n	2f5e <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	781b      	ldrb	r3, [r3, #0]
    2f22:	b29a      	uxth	r2, r3
    2f24:	4b10      	ldr	r3, [pc, #64]	; (2f68 <I2cWriteData+0x6c>)
    2f26:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
    2f28:	687b      	ldr	r3, [r7, #4]
    2f2a:	685a      	ldr	r2, [r3, #4]
    2f2c:	4b0e      	ldr	r3, [pc, #56]	; (2f68 <I2cWriteData+0x6c>)
    2f2e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
    2f30:	687b      	ldr	r3, [r7, #4]
    2f32:	89da      	ldrh	r2, [r3, #14]
    2f34:	4b0c      	ldr	r3, [pc, #48]	; (2f68 <I2cWriteData+0x6c>)
    2f36:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    2f38:	230b      	movs	r3, #11
    2f3a:	18fc      	adds	r4, r7, r3
    2f3c:	4a0a      	ldr	r2, [pc, #40]	; (2f68 <I2cWriteData+0x6c>)
    2f3e:	4b0b      	ldr	r3, [pc, #44]	; (2f6c <I2cWriteData+0x70>)
    2f40:	0011      	movs	r1, r2
    2f42:	0018      	movs	r0, r3
    2f44:	4b0a      	ldr	r3, [pc, #40]	; (2f70 <I2cWriteData+0x74>)
    2f46:	4798      	blx	r3
    2f48:	0003      	movs	r3, r0
    2f4a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    2f4c:	230b      	movs	r3, #11
    2f4e:	18fb      	adds	r3, r7, r3
    2f50:	781b      	ldrb	r3, [r3, #0]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d003      	beq.n	2f5e <I2cWriteData+0x62>
        error = ERROR_IO;
    2f56:	2306      	movs	r3, #6
    2f58:	425b      	negs	r3, r3
    2f5a:	60fb      	str	r3, [r7, #12]
        goto exit;
    2f5c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    2f5e:	68fb      	ldr	r3, [r7, #12]
}
    2f60:	0018      	movs	r0, r3
    2f62:	46bd      	mov	sp, r7
    2f64:	b005      	add	sp, #20
    2f66:	bd90      	pop	{r4, r7, pc}
    2f68:	20004488 	.word	0x20004488
    2f6c:	2000445c 	.word	0x2000445c
    2f70:	000017e5 	.word	0x000017e5

00002f74 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
    2f74:	b590      	push	{r4, r7, lr}
    2f76:	b085      	sub	sp, #20
    2f78:	af00      	add	r7, sp, #0
    2f7a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    2f7c:	2300      	movs	r3, #0
    2f7e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d003      	beq.n	2f8e <I2cReadData+0x1a>
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	685b      	ldr	r3, [r3, #4]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d103      	bne.n	2f96 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
    2f8e:	2308      	movs	r3, #8
    2f90:	425b      	negs	r3, r3
    2f92:	60fb      	str	r3, [r7, #12]
        goto exit;
    2f94:	e01f      	b.n	2fd6 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
    2f96:	687b      	ldr	r3, [r7, #4]
    2f98:	781b      	ldrb	r3, [r3, #0]
    2f9a:	b29a      	uxth	r2, r3
    2f9c:	4b10      	ldr	r3, [pc, #64]	; (2fe0 <I2cReadData+0x6c>)
    2f9e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	689a      	ldr	r2, [r3, #8]
    2fa4:	4b0e      	ldr	r3, [pc, #56]	; (2fe0 <I2cReadData+0x6c>)
    2fa6:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	899a      	ldrh	r2, [r3, #12]
    2fac:	4b0c      	ldr	r3, [pc, #48]	; (2fe0 <I2cReadData+0x6c>)
    2fae:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    2fb0:	230b      	movs	r3, #11
    2fb2:	18fc      	adds	r4, r7, r3
    2fb4:	4a0a      	ldr	r2, [pc, #40]	; (2fe0 <I2cReadData+0x6c>)
    2fb6:	4b0b      	ldr	r3, [pc, #44]	; (2fe4 <I2cReadData+0x70>)
    2fb8:	0011      	movs	r1, r2
    2fba:	0018      	movs	r0, r3
    2fbc:	4b0a      	ldr	r3, [pc, #40]	; (2fe8 <I2cReadData+0x74>)
    2fbe:	4798      	blx	r3
    2fc0:	0003      	movs	r3, r0
    2fc2:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    2fc4:	230b      	movs	r3, #11
    2fc6:	18fb      	adds	r3, r7, r3
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d003      	beq.n	2fd6 <I2cReadData+0x62>
        error = ERROR_IO;
    2fce:	2306      	movs	r3, #6
    2fd0:	425b      	negs	r3, r3
    2fd2:	60fb      	str	r3, [r7, #12]
        goto exit;
    2fd4:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    2fd6:	68fb      	ldr	r3, [r7, #12]
}
    2fd8:	0018      	movs	r0, r3
    2fda:	46bd      	mov	sp, r7
    2fdc:	b005      	add	sp, #20
    2fde:	bd90      	pop	{r4, r7, pc}
    2fe0:	20004488 	.word	0x20004488
    2fe4:	2000445c 	.word	0x2000445c
    2fe8:	00001701 	.word	0x00001701

00002fec <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
    2fec:	b590      	push	{r4, r7, lr}
    2fee:	b083      	sub	sp, #12
    2ff0:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
    2ff2:	2300      	movs	r3, #0
    2ff4:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
    2ff6:	4b09      	ldr	r3, [pc, #36]	; (301c <I2cFreeMutex+0x30>)
    2ff8:	6818      	ldr	r0, [r3, #0]
    2ffa:	2300      	movs	r3, #0
    2ffc:	2200      	movs	r2, #0
    2ffe:	2100      	movs	r1, #0
    3000:	4c07      	ldr	r4, [pc, #28]	; (3020 <I2cFreeMutex+0x34>)
    3002:	47a0      	blx	r4
    3004:	0003      	movs	r3, r0
    3006:	2b01      	cmp	r3, #1
    3008:	d002      	beq.n	3010 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
    300a:	2314      	movs	r3, #20
    300c:	425b      	negs	r3, r3
    300e:	607b      	str	r3, [r7, #4]
    }
    return error;
    3010:	687b      	ldr	r3, [r7, #4]
}
    3012:	0018      	movs	r0, r3
    3014:	46bd      	mov	sp, r7
    3016:	b003      	add	sp, #12
    3018:	bd90      	pop	{r4, r7, pc}
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	20004458 	.word	0x20004458
    3020:	00009951 	.word	0x00009951

00003024 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
    3024:	b580      	push	{r7, lr}
    3026:	b084      	sub	sp, #16
    3028:	af00      	add	r7, sp, #0
    302a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    302c:	2300      	movs	r3, #0
    302e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
    3030:	4b08      	ldr	r3, [pc, #32]	; (3054 <I2cGetMutex+0x30>)
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	687a      	ldr	r2, [r7, #4]
    3036:	0011      	movs	r1, r2
    3038:	0018      	movs	r0, r3
    303a:	4b07      	ldr	r3, [pc, #28]	; (3058 <I2cGetMutex+0x34>)
    303c:	4798      	blx	r3
    303e:	0003      	movs	r3, r0
    3040:	2b01      	cmp	r3, #1
    3042:	d002      	beq.n	304a <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
    3044:	231d      	movs	r3, #29
    3046:	425b      	negs	r3, r3
    3048:	60fb      	str	r3, [r7, #12]
    }
    return error;
    304a:	68fb      	ldr	r3, [r7, #12]
}
    304c:	0018      	movs	r0, r3
    304e:	46bd      	mov	sp, r7
    3050:	b004      	add	sp, #16
    3052:	bd80      	pop	{r7, pc}
    3054:	20004458 	.word	0x20004458
    3058:	0000a661 	.word	0x0000a661

0000305c <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
    305c:	b580      	push	{r7, lr}
    305e:	b084      	sub	sp, #16
    3060:	af00      	add	r7, sp, #0
    3062:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    3064:	2300      	movs	r3, #0
    3066:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
    3068:	4b04      	ldr	r3, [pc, #16]	; (307c <I2cGetSemaphoreHandle+0x20>)
    306a:	681a      	ldr	r2, [r3, #0]
    306c:	687b      	ldr	r3, [r7, #4]
    306e:	601a      	str	r2, [r3, #0]
    return error;
    3070:	68fb      	ldr	r3, [r7, #12]
}
    3072:	0018      	movs	r0, r3
    3074:	46bd      	mov	sp, r7
    3076:	b004      	add	sp, #16
    3078:	bd80      	pop	{r7, pc}
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	20004484 	.word	0x20004484

00003080 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
    3080:	b580      	push	{r7, lr}
    3082:	af00      	add	r7, sp, #0
    return sensorTransmitError;
    3084:	4b02      	ldr	r3, [pc, #8]	; (3090 <I2cGetTaskErrorStatus+0x10>)
    3086:	781b      	ldrb	r3, [r3, #0]
}
    3088:	0018      	movs	r0, r3
    308a:	46bd      	mov	sp, r7
    308c:	bd80      	pop	{r7, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	20000628 	.word	0x20000628

00003094 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
    3094:	b580      	push	{r7, lr}
    3096:	b082      	sub	sp, #8
    3098:	af00      	add	r7, sp, #0
    309a:	0002      	movs	r2, r0
    309c:	1dfb      	adds	r3, r7, #7
    309e:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
    30a0:	4b03      	ldr	r3, [pc, #12]	; (30b0 <I2cSetTaskErrorStatus+0x1c>)
    30a2:	1dfa      	adds	r2, r7, #7
    30a4:	7812      	ldrb	r2, [r2, #0]
    30a6:	701a      	strb	r2, [r3, #0]
}
    30a8:	46c0      	nop			; (mov r8, r8)
    30aa:	46bd      	mov	sp, r7
    30ac:	b002      	add	sp, #8
    30ae:	bd80      	pop	{r7, pc}
    30b0:	20000628 	.word	0x20000628

000030b4 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b084      	sub	sp, #16
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
    30bc:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
    30be:	2300      	movs	r3, #0
    30c0:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
    30c2:	2300      	movs	r3, #0
    30c4:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    30c6:	2396      	movs	r3, #150	; 0x96
    30c8:	005b      	lsls	r3, r3, #1
    30ca:	0018      	movs	r0, r3
    30cc:	4b28      	ldr	r3, [pc, #160]	; (3170 <I2cWriteDataWait+0xbc>)
    30ce:	4798      	blx	r3
    30d0:	0003      	movs	r3, r0
    30d2:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    30d4:	68fb      	ldr	r3, [r7, #12]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d138      	bne.n	314c <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    30da:	2308      	movs	r3, #8
    30dc:	18fb      	adds	r3, r7, r3
    30de:	0018      	movs	r0, r3
    30e0:	4b24      	ldr	r3, [pc, #144]	; (3174 <I2cWriteDataWait+0xc0>)
    30e2:	4798      	blx	r3
    30e4:	0003      	movs	r3, r0
    30e6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    30e8:	68fb      	ldr	r3, [r7, #12]
    30ea:	2b00      	cmp	r3, #0
    30ec:	d130      	bne.n	3150 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	0018      	movs	r0, r3
    30f2:	4b21      	ldr	r3, [pc, #132]	; (3178 <I2cWriteDataWait+0xc4>)
    30f4:	4798      	blx	r3
    30f6:	0003      	movs	r3, r0
    30f8:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
    30fa:	68fb      	ldr	r3, [r7, #12]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d12a      	bne.n	3156 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    3100:	68bb      	ldr	r3, [r7, #8]
    3102:	683a      	ldr	r2, [r7, #0]
    3104:	0011      	movs	r1, r2
    3106:	0018      	movs	r0, r3
    3108:	4b1c      	ldr	r3, [pc, #112]	; (317c <I2cWriteDataWait+0xc8>)
    310a:	4798      	blx	r3
    310c:	0003      	movs	r3, r0
    310e:	2b01      	cmp	r3, #1
    3110:	d111      	bne.n	3136 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    3112:	4b1b      	ldr	r3, [pc, #108]	; (3180 <I2cWriteDataWait+0xcc>)
    3114:	4798      	blx	r3
    3116:	1e03      	subs	r3, r0, #0
    3118:	d011      	beq.n	313e <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
    311a:	2000      	movs	r0, #0
    311c:	4b19      	ldr	r3, [pc, #100]	; (3184 <I2cWriteDataWait+0xd0>)
    311e:	4798      	blx	r3
            if (error != ERROR_NONE) {
    3120:	68fb      	ldr	r3, [r7, #12]
    3122:	2b00      	cmp	r3, #0
    3124:	d003      	beq.n	312e <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
    3126:	2321      	movs	r3, #33	; 0x21
    3128:	425b      	negs	r3, r3
    312a:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
    312c:	e014      	b.n	3158 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
    312e:	2303      	movs	r3, #3
    3130:	425b      	negs	r3, r3
    3132:	60fb      	str	r3, [r7, #12]
            goto exitError0;
    3134:	e010      	b.n	3158 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    3136:	2303      	movs	r3, #3
    3138:	425b      	negs	r3, r3
    313a:	60fb      	str	r3, [r7, #12]
        goto exitError0;
    313c:	e00c      	b.n	3158 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
    313e:	4b12      	ldr	r3, [pc, #72]	; (3188 <I2cWriteDataWait+0xd4>)
    3140:	4798      	blx	r3
    3142:	0002      	movs	r2, r0
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	4313      	orrs	r3, r2
    3148:	60fb      	str	r3, [r7, #12]
    314a:	e002      	b.n	3152 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    314c:	46c0      	nop			; (mov r8, r8)
    314e:	e000      	b.n	3152 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    3150:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	e007      	b.n	3166 <I2cWriteDataWait+0xb2>
        goto exitError0;
    3156:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
    3158:	4b0b      	ldr	r3, [pc, #44]	; (3188 <I2cWriteDataWait+0xd4>)
    315a:	4798      	blx	r3
    315c:	0002      	movs	r2, r0
    315e:	68fb      	ldr	r3, [r7, #12]
    3160:	4313      	orrs	r3, r2
    3162:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
    3164:	68fb      	ldr	r3, [r7, #12]
}
    3166:	0018      	movs	r0, r3
    3168:	46bd      	mov	sp, r7
    316a:	b004      	add	sp, #16
    316c:	bd80      	pop	{r7, pc}
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	00003025 	.word	0x00003025
    3174:	0000305d 	.word	0x0000305d
    3178:	00002efd 	.word	0x00002efd
    317c:	0000a661 	.word	0x0000a661
    3180:	00003081 	.word	0x00003081
    3184:	00003095 	.word	0x00003095
    3188:	00002fed 	.word	0x00002fed

0000318c <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
    318c:	b580      	push	{r7, lr}
    318e:	b086      	sub	sp, #24
    3190:	af00      	add	r7, sp, #0
    3192:	60f8      	str	r0, [r7, #12]
    3194:	60b9      	str	r1, [r7, #8]
    3196:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
    3198:	2300      	movs	r3, #0
    319a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
    319c:	2300      	movs	r3, #0
    319e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    31a0:	2396      	movs	r3, #150	; 0x96
    31a2:	005b      	lsls	r3, r3, #1
    31a4:	0018      	movs	r0, r3
    31a6:	4b36      	ldr	r3, [pc, #216]	; (3280 <I2cReadDataWait+0xf4>)
    31a8:	4798      	blx	r3
    31aa:	0003      	movs	r3, r0
    31ac:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    31ae:	697b      	ldr	r3, [r7, #20]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d155      	bne.n	3260 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    31b4:	2310      	movs	r3, #16
    31b6:	18fb      	adds	r3, r7, r3
    31b8:	0018      	movs	r0, r3
    31ba:	4b32      	ldr	r3, [pc, #200]	; (3284 <I2cReadDataWait+0xf8>)
    31bc:	4798      	blx	r3
    31be:	0003      	movs	r3, r0
    31c0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    31c2:	697b      	ldr	r3, [r7, #20]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d14d      	bne.n	3264 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    31c8:	68fb      	ldr	r3, [r7, #12]
    31ca:	0018      	movs	r0, r3
    31cc:	4b2e      	ldr	r3, [pc, #184]	; (3288 <I2cReadDataWait+0xfc>)
    31ce:	4798      	blx	r3
    31d0:	0003      	movs	r3, r0
    31d2:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    31d4:	697b      	ldr	r3, [r7, #20]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d147      	bne.n	326a <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    31da:	693b      	ldr	r3, [r7, #16]
    31dc:	687a      	ldr	r2, [r7, #4]
    31de:	0011      	movs	r1, r2
    31e0:	0018      	movs	r0, r3
    31e2:	4b2a      	ldr	r3, [pc, #168]	; (328c <I2cReadDataWait+0x100>)
    31e4:	4798      	blx	r3
    31e6:	0003      	movs	r3, r0
    31e8:	2b01      	cmp	r3, #1
    31ea:	d118      	bne.n	321e <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    31ec:	4b28      	ldr	r3, [pc, #160]	; (3290 <I2cReadDataWait+0x104>)
    31ee:	4798      	blx	r3
    31f0:	1e03      	subs	r3, r0, #0
    31f2:	d006      	beq.n	3202 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
    31f4:	2000      	movs	r0, #0
    31f6:	4b27      	ldr	r3, [pc, #156]	; (3294 <I2cReadDataWait+0x108>)
    31f8:	4798      	blx	r3
            error = ERROR_ABORTED;
    31fa:	2303      	movs	r3, #3
    31fc:	425b      	negs	r3, r3
    31fe:	617b      	str	r3, [r7, #20]
            goto exitError0;
    3200:	e034      	b.n	326c <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
    3202:	68bb      	ldr	r3, [r7, #8]
    3204:	0018      	movs	r0, r3
    3206:	4b24      	ldr	r3, [pc, #144]	; (3298 <I2cReadDataWait+0x10c>)
    3208:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	0018      	movs	r0, r3
    320e:	4b23      	ldr	r3, [pc, #140]	; (329c <I2cReadDataWait+0x110>)
    3210:	4798      	blx	r3
    3212:	0003      	movs	r3, r0
    3214:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    3216:	697b      	ldr	r3, [r7, #20]
    3218:	2b00      	cmp	r3, #0
    321a:	d004      	beq.n	3226 <I2cReadDataWait+0x9a>
        goto exitError0;
    321c:	e026      	b.n	326c <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
    321e:	2303      	movs	r3, #3
    3220:	425b      	negs	r3, r3
    3222:	617b      	str	r3, [r7, #20]
        goto exitError0;
    3224:	e022      	b.n	326c <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    3226:	693b      	ldr	r3, [r7, #16]
    3228:	687a      	ldr	r2, [r7, #4]
    322a:	0011      	movs	r1, r2
    322c:	0018      	movs	r0, r3
    322e:	4b17      	ldr	r3, [pc, #92]	; (328c <I2cReadDataWait+0x100>)
    3230:	4798      	blx	r3
    3232:	0003      	movs	r3, r0
    3234:	2b01      	cmp	r3, #1
    3236:	d10a      	bne.n	324e <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    3238:	4b15      	ldr	r3, [pc, #84]	; (3290 <I2cReadDataWait+0x104>)
    323a:	4798      	blx	r3
    323c:	1e03      	subs	r3, r0, #0
    323e:	d00a      	beq.n	3256 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
    3240:	2000      	movs	r0, #0
    3242:	4b14      	ldr	r3, [pc, #80]	; (3294 <I2cReadDataWait+0x108>)
    3244:	4798      	blx	r3
            error = ERROR_ABORTED;
    3246:	2303      	movs	r3, #3
    3248:	425b      	negs	r3, r3
    324a:	617b      	str	r3, [r7, #20]
            goto exitError0;
    324c:	e00e      	b.n	326c <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    324e:	2303      	movs	r3, #3
    3250:	425b      	negs	r3, r3
    3252:	617b      	str	r3, [r7, #20]
        goto exitError0;
    3254:	e00a      	b.n	326c <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
    3256:	4b12      	ldr	r3, [pc, #72]	; (32a0 <I2cReadDataWait+0x114>)
    3258:	4798      	blx	r3
    325a:	0003      	movs	r3, r0
    325c:	617b      	str	r3, [r7, #20]
    325e:	e002      	b.n	3266 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
    3260:	46c0      	nop			; (mov r8, r8)
    3262:	e000      	b.n	3266 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
    3264:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    3266:	697b      	ldr	r3, [r7, #20]
    3268:	e005      	b.n	3276 <I2cReadDataWait+0xea>
        goto exitError0;
    326a:	46c0      	nop			; (mov r8, r8)

exitError0:
    error = I2cFreeMutex();
    326c:	4b0c      	ldr	r3, [pc, #48]	; (32a0 <I2cReadDataWait+0x114>)
    326e:	4798      	blx	r3
    3270:	0003      	movs	r3, r0
    3272:	617b      	str	r3, [r7, #20]
    // xSemaphoreGive(semHandle);
    return error;
    3274:	697b      	ldr	r3, [r7, #20]
}
    3276:	0018      	movs	r0, r3
    3278:	46bd      	mov	sp, r7
    327a:	b006      	add	sp, #24
    327c:	bd80      	pop	{r7, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	00003025 	.word	0x00003025
    3284:	0000305d 	.word	0x0000305d
    3288:	00002efd 	.word	0x00002efd
    328c:	0000a661 	.word	0x0000a661
    3290:	00003081 	.word	0x00003081
    3294:	00003095 	.word	0x00003095
    3298:	0000b3b5 	.word	0x0000b3b5
    329c:	00002f75 	.word	0x00002f75
    32a0:	00002fed 	.word	0x00002fed

000032a4 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
    32a4:	b5b0      	push	{r4, r5, r7, lr}
    32a6:	b086      	sub	sp, #24
    32a8:	af00      	add	r7, sp, #0
    32aa:	60f8      	str	r0, [r7, #12]
    32ac:	0008      	movs	r0, r1
    32ae:	607a      	str	r2, [r7, #4]
    32b0:	0019      	movs	r1, r3
    32b2:	230b      	movs	r3, #11
    32b4:	18fb      	adds	r3, r7, r3
    32b6:	1c02      	adds	r2, r0, #0
    32b8:	701a      	strb	r2, [r3, #0]
    32ba:	2308      	movs	r3, #8
    32bc:	18fb      	adds	r3, r7, r3
    32be:	1c0a      	adds	r2, r1, #0
    32c0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
    32c2:	68fb      	ldr	r3, [r7, #12]
    32c4:	685c      	ldr	r4, [r3, #4]
    32c6:	68fb      	ldr	r3, [r7, #12]
    32c8:	6898      	ldr	r0, [r3, #8]
    32ca:	2308      	movs	r3, #8
    32cc:	18fb      	adds	r3, r7, r3
    32ce:	881d      	ldrh	r5, [r3, #0]
    32d0:	687a      	ldr	r2, [r7, #4]
    32d2:	230b      	movs	r3, #11
    32d4:	18fb      	adds	r3, r7, r3
    32d6:	7819      	ldrb	r1, [r3, #0]
    32d8:	002b      	movs	r3, r5
    32da:	47a0      	blx	r4
    32dc:	0003      	movs	r3, r0
    32de:	617b      	str	r3, [r7, #20]

  return ret;
    32e0:	697b      	ldr	r3, [r7, #20]
}
    32e2:	0018      	movs	r0, r3
    32e4:	46bd      	mov	sp, r7
    32e6:	b006      	add	sp, #24
    32e8:	bdb0      	pop	{r4, r5, r7, pc}

000032ea <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
    32ea:	b5b0      	push	{r4, r5, r7, lr}
    32ec:	b086      	sub	sp, #24
    32ee:	af00      	add	r7, sp, #0
    32f0:	60f8      	str	r0, [r7, #12]
    32f2:	0008      	movs	r0, r1
    32f4:	607a      	str	r2, [r7, #4]
    32f6:	0019      	movs	r1, r3
    32f8:	230b      	movs	r3, #11
    32fa:	18fb      	adds	r3, r7, r3
    32fc:	1c02      	adds	r2, r0, #0
    32fe:	701a      	strb	r2, [r3, #0]
    3300:	2308      	movs	r3, #8
    3302:	18fb      	adds	r3, r7, r3
    3304:	1c0a      	adds	r2, r1, #0
    3306:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
    3308:	68fb      	ldr	r3, [r7, #12]
    330a:	681c      	ldr	r4, [r3, #0]
    330c:	68fb      	ldr	r3, [r7, #12]
    330e:	6898      	ldr	r0, [r3, #8]
    3310:	2308      	movs	r3, #8
    3312:	18fb      	adds	r3, r7, r3
    3314:	881d      	ldrh	r5, [r3, #0]
    3316:	687a      	ldr	r2, [r7, #4]
    3318:	230b      	movs	r3, #11
    331a:	18fb      	adds	r3, r7, r3
    331c:	7819      	ldrb	r1, [r3, #0]
    331e:	002b      	movs	r3, r5
    3320:	47a0      	blx	r4
    3322:	0003      	movs	r3, r0
    3324:	617b      	str	r3, [r7, #20]

  return ret;
    3326:	697b      	ldr	r3, [r7, #20]
}
    3328:	0018      	movs	r0, r3
    332a:	46bd      	mov	sp, r7
    332c:	b006      	add	sp, #24
    332e:	bdb0      	pop	{r4, r5, r7, pc}

00003330 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
    3330:	b580      	push	{r7, lr}
    3332:	b082      	sub	sp, #8
    3334:	af00      	add	r7, sp, #0
    3336:	0002      	movs	r2, r0
    3338:	1dbb      	adds	r3, r7, #6
    333a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
    333c:	1dbb      	adds	r3, r7, #6
    333e:	2200      	movs	r2, #0
    3340:	5e9a      	ldrsh	r2, [r3, r2]
    3342:	4b06      	ldr	r3, [pc, #24]	; (335c <lsm6dso_from_fs2_to_mg+0x2c>)
    3344:	0010      	movs	r0, r2
    3346:	4798      	blx	r3
    3348:	1c02      	adds	r2, r0, #0
    334a:	4b05      	ldr	r3, [pc, #20]	; (3360 <lsm6dso_from_fs2_to_mg+0x30>)
    334c:	4905      	ldr	r1, [pc, #20]	; (3364 <lsm6dso_from_fs2_to_mg+0x34>)
    334e:	1c10      	adds	r0, r2, #0
    3350:	4798      	blx	r3
    3352:	1c03      	adds	r3, r0, #0
}
    3354:	1c18      	adds	r0, r3, #0
    3356:	46bd      	mov	sp, r7
    3358:	b002      	add	sp, #8
    335a:	bd80      	pop	{r7, pc}
    335c:	00022bd9 	.word	0x00022bd9
    3360:	00022621 	.word	0x00022621
    3364:	3d79db23 	.word	0x3d79db23

00003368 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
    3368:	b590      	push	{r4, r7, lr}
    336a:	b085      	sub	sp, #20
    336c:	af00      	add	r7, sp, #0
    336e:	6078      	str	r0, [r7, #4]
    3370:	000a      	movs	r2, r1
    3372:	1cfb      	adds	r3, r7, #3
    3374:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    3376:	2308      	movs	r3, #8
    3378:	18fa      	adds	r2, r7, r3
    337a:	6878      	ldr	r0, [r7, #4]
    337c:	2301      	movs	r3, #1
    337e:	2110      	movs	r1, #16
    3380:	4c12      	ldr	r4, [pc, #72]	; (33cc <lsm6dso_xl_full_scale_set+0x64>)
    3382:	47a0      	blx	r4
    3384:	0003      	movs	r3, r0
    3386:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    3388:	68fb      	ldr	r3, [r7, #12]
    338a:	2b00      	cmp	r3, #0
    338c:	d119      	bne.n	33c2 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
    338e:	1cfb      	adds	r3, r7, #3
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	2203      	movs	r2, #3
    3394:	4013      	ands	r3, r2
    3396:	b2da      	uxtb	r2, r3
    3398:	2308      	movs	r3, #8
    339a:	18fb      	adds	r3, r7, r3
    339c:	2103      	movs	r1, #3
    339e:	400a      	ands	r2, r1
    33a0:	0090      	lsls	r0, r2, #2
    33a2:	781a      	ldrb	r2, [r3, #0]
    33a4:	210c      	movs	r1, #12
    33a6:	438a      	bics	r2, r1
    33a8:	1c11      	adds	r1, r2, #0
    33aa:	1c02      	adds	r2, r0, #0
    33ac:	430a      	orrs	r2, r1
    33ae:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    33b0:	2308      	movs	r3, #8
    33b2:	18fa      	adds	r2, r7, r3
    33b4:	6878      	ldr	r0, [r7, #4]
    33b6:	2301      	movs	r3, #1
    33b8:	2110      	movs	r1, #16
    33ba:	4c05      	ldr	r4, [pc, #20]	; (33d0 <lsm6dso_xl_full_scale_set+0x68>)
    33bc:	47a0      	blx	r4
    33be:	0003      	movs	r3, r0
    33c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    33c2:	68fb      	ldr	r3, [r7, #12]
}
    33c4:	0018      	movs	r0, r3
    33c6:	46bd      	mov	sp, r7
    33c8:	b005      	add	sp, #20
    33ca:	bd90      	pop	{r4, r7, pc}
    33cc:	000032a5 	.word	0x000032a5
    33d0:	000032eb 	.word	0x000032eb

000033d4 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
    33d4:	b590      	push	{r4, r7, lr}
    33d6:	b087      	sub	sp, #28
    33d8:	af00      	add	r7, sp, #0
    33da:	6078      	str	r0, [r7, #4]
    33dc:	000a      	movs	r2, r1
    33de:	1cfb      	adds	r3, r7, #3
    33e0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
    33e2:	2317      	movs	r3, #23
    33e4:	18fb      	adds	r3, r7, r3
    33e6:	1cfa      	adds	r2, r7, #3
    33e8:	7812      	ldrb	r2, [r2, #0]
    33ea:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    33ec:	230c      	movs	r3, #12
    33ee:	18fa      	adds	r2, r7, r3
    33f0:	687b      	ldr	r3, [r7, #4]
    33f2:	0011      	movs	r1, r2
    33f4:	0018      	movs	r0, r3
    33f6:	4ba4      	ldr	r3, [pc, #656]	; (3688 <lsm6dso_xl_data_rate_set+0x2b4>)
    33f8:	4798      	blx	r3
    33fa:	0003      	movs	r3, r0
    33fc:	613b      	str	r3, [r7, #16]

  if (ret == 0)
    33fe:	693b      	ldr	r3, [r7, #16]
    3400:	2b00      	cmp	r3, #0
    3402:	d000      	beq.n	3406 <lsm6dso_xl_data_rate_set+0x32>
    3404:	e113      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    3406:	230c      	movs	r3, #12
    3408:	18fb      	adds	r3, r7, r3
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	07db      	lsls	r3, r3, #31
    340e:	0fdb      	lsrs	r3, r3, #31
    3410:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    3412:	230c      	movs	r3, #12
    3414:	18fb      	adds	r3, r7, r3
    3416:	781b      	ldrb	r3, [r3, #0]
    3418:	079b      	lsls	r3, r3, #30
    341a:	0fdb      	lsrs	r3, r3, #31
    341c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    341e:	4313      	orrs	r3, r2
    3420:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    3422:	230c      	movs	r3, #12
    3424:	18fb      	adds	r3, r7, r3
    3426:	781b      	ldrb	r3, [r3, #0]
    3428:	075b      	lsls	r3, r3, #29
    342a:	0fdb      	lsrs	r3, r3, #31
    342c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    342e:	4313      	orrs	r3, r2
    3430:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    3432:	230c      	movs	r3, #12
    3434:	18fb      	adds	r3, r7, r3
    3436:	781b      	ldrb	r3, [r3, #0]
    3438:	071b      	lsls	r3, r3, #28
    343a:	0fdb      	lsrs	r3, r3, #31
    343c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    343e:	4313      	orrs	r3, r2
    3440:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    3442:	230c      	movs	r3, #12
    3444:	18fb      	adds	r3, r7, r3
    3446:	781b      	ldrb	r3, [r3, #0]
    3448:	06db      	lsls	r3, r3, #27
    344a:	0fdb      	lsrs	r3, r3, #31
    344c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    344e:	4313      	orrs	r3, r2
    3450:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    3452:	230c      	movs	r3, #12
    3454:	18fb      	adds	r3, r7, r3
    3456:	781b      	ldrb	r3, [r3, #0]
    3458:	069b      	lsls	r3, r3, #26
    345a:	0fdb      	lsrs	r3, r3, #31
    345c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    345e:	4313      	orrs	r3, r2
    3460:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    3462:	230c      	movs	r3, #12
    3464:	18fb      	adds	r3, r7, r3
    3466:	781b      	ldrb	r3, [r3, #0]
    3468:	065b      	lsls	r3, r3, #25
    346a:	0fdb      	lsrs	r3, r3, #31
    346c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    346e:	4313      	orrs	r3, r2
    3470:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    3472:	230c      	movs	r3, #12
    3474:	18fb      	adds	r3, r7, r3
    3476:	781b      	ldrb	r3, [r3, #0]
    3478:	061b      	lsls	r3, r3, #24
    347a:	0fdb      	lsrs	r3, r3, #31
    347c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    347e:	4313      	orrs	r3, r2
    3480:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    3482:	230c      	movs	r3, #12
    3484:	18fb      	adds	r3, r7, r3
    3486:	785b      	ldrb	r3, [r3, #1]
    3488:	07db      	lsls	r3, r3, #31
    348a:	0fdb      	lsrs	r3, r3, #31
    348c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    348e:	4313      	orrs	r3, r2
    3490:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    3492:	230c      	movs	r3, #12
    3494:	18fb      	adds	r3, r7, r3
    3496:	785b      	ldrb	r3, [r3, #1]
    3498:	079b      	lsls	r3, r3, #30
    349a:	0fdb      	lsrs	r3, r3, #31
    349c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    349e:	4313      	orrs	r3, r2
    34a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    34a2:	230c      	movs	r3, #12
    34a4:	18fb      	adds	r3, r7, r3
    34a6:	785b      	ldrb	r3, [r3, #1]
    34a8:	075b      	lsls	r3, r3, #29
    34aa:	0fdb      	lsrs	r3, r3, #31
    34ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    34ae:	4313      	orrs	r3, r2
    34b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    34b2:	230c      	movs	r3, #12
    34b4:	18fb      	adds	r3, r7, r3
    34b6:	785b      	ldrb	r3, [r3, #1]
    34b8:	071b      	lsls	r3, r3, #28
    34ba:	0fdb      	lsrs	r3, r3, #31
    34bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    34be:	4313      	orrs	r3, r2
    34c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    34c2:	230c      	movs	r3, #12
    34c4:	18fb      	adds	r3, r7, r3
    34c6:	785b      	ldrb	r3, [r3, #1]
    34c8:	06db      	lsls	r3, r3, #27
    34ca:	0fdb      	lsrs	r3, r3, #31
    34cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    34ce:	4313      	orrs	r3, r2
    34d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    34d2:	230c      	movs	r3, #12
    34d4:	18fb      	adds	r3, r7, r3
    34d6:	785b      	ldrb	r3, [r3, #1]
    34d8:	069b      	lsls	r3, r3, #26
    34da:	0fdb      	lsrs	r3, r3, #31
    34dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    34de:	4313      	orrs	r3, r2
    34e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    34e2:	230c      	movs	r3, #12
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	785b      	ldrb	r3, [r3, #1]
    34e8:	065b      	lsls	r3, r3, #25
    34ea:	0fdb      	lsrs	r3, r3, #31
    34ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    34ee:	4313      	orrs	r3, r2
    34f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    34f2:	230c      	movs	r3, #12
    34f4:	18fb      	adds	r3, r7, r3
    34f6:	785b      	ldrb	r3, [r3, #1]
    34f8:	061b      	lsls	r3, r3, #24
    34fa:	0fdb      	lsrs	r3, r3, #31
    34fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    34fe:	4313      	orrs	r3, r2
    3500:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    3502:	2b01      	cmp	r3, #1
    3504:	d000      	beq.n	3508 <lsm6dso_xl_data_rate_set+0x134>
    3506:	e092      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    3508:	230b      	movs	r3, #11
    350a:	18fa      	adds	r2, r7, r3
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	0011      	movs	r1, r2
    3510:	0018      	movs	r0, r3
    3512:	4b5e      	ldr	r3, [pc, #376]	; (368c <lsm6dso_xl_data_rate_set+0x2b8>)
    3514:	4798      	blx	r3
    3516:	0003      	movs	r3, r0
    3518:	613b      	str	r3, [r7, #16]

      if (ret == 0)
    351a:	693b      	ldr	r3, [r7, #16]
    351c:	2b00      	cmp	r3, #0
    351e:	d000      	beq.n	3522 <lsm6dso_xl_data_rate_set+0x14e>
    3520:	e085      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
    3522:	230b      	movs	r3, #11
    3524:	18fb      	adds	r3, r7, r3
    3526:	781b      	ldrb	r3, [r3, #0]
    3528:	2b01      	cmp	r3, #1
    352a:	d017      	beq.n	355c <lsm6dso_xl_data_rate_set+0x188>
    352c:	dc02      	bgt.n	3534 <lsm6dso_xl_data_rate_set+0x160>
    352e:	2b00      	cmp	r3, #0
    3530:	d005      	beq.n	353e <lsm6dso_xl_data_rate_set+0x16a>
    3532:	e076      	b.n	3622 <lsm6dso_xl_data_rate_set+0x24e>
    3534:	2b02      	cmp	r3, #2
    3536:	d029      	beq.n	358c <lsm6dso_xl_data_rate_set+0x1b8>
    3538:	2b03      	cmp	r3, #3
    353a:	d048      	beq.n	35ce <lsm6dso_xl_data_rate_set+0x1fa>
    353c:	e071      	b.n	3622 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
    353e:	1cfb      	adds	r3, r7, #3
    3540:	781b      	ldrb	r3, [r3, #0]
    3542:	2b00      	cmp	r3, #0
    3544:	d104      	bne.n	3550 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    3546:	2317      	movs	r3, #23
    3548:	18fb      	adds	r3, r7, r3
    354a:	2201      	movs	r2, #1
    354c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    354e:	e06e      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
    3550:	2317      	movs	r3, #23
    3552:	18fb      	adds	r3, r7, r3
    3554:	1cfa      	adds	r2, r7, #3
    3556:	7812      	ldrb	r2, [r2, #0]
    3558:	701a      	strb	r2, [r3, #0]
            break;
    355a:	e068      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    355c:	1cfb      	adds	r3, r7, #3
    355e:	781b      	ldrb	r3, [r3, #0]
    3560:	2b00      	cmp	r3, #0
    3562:	d104      	bne.n	356e <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
    3564:	2317      	movs	r3, #23
    3566:	18fb      	adds	r3, r7, r3
    3568:	2202      	movs	r2, #2
    356a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    356c:	e05f      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    356e:	1cfb      	adds	r3, r7, #3
    3570:	781b      	ldrb	r3, [r3, #0]
    3572:	2b01      	cmp	r3, #1
    3574:	d104      	bne.n	3580 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
    3576:	2317      	movs	r3, #23
    3578:	18fb      	adds	r3, r7, r3
    357a:	2202      	movs	r2, #2
    357c:	701a      	strb	r2, [r3, #0]
            break;
    357e:	e056      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
    3580:	2317      	movs	r3, #23
    3582:	18fb      	adds	r3, r7, r3
    3584:	1cfa      	adds	r2, r7, #3
    3586:	7812      	ldrb	r2, [r2, #0]
    3588:	701a      	strb	r2, [r3, #0]
            break;
    358a:	e050      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    358c:	1cfb      	adds	r3, r7, #3
    358e:	781b      	ldrb	r3, [r3, #0]
    3590:	2b00      	cmp	r3, #0
    3592:	d104      	bne.n	359e <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    3594:	2317      	movs	r3, #23
    3596:	18fb      	adds	r3, r7, r3
    3598:	2203      	movs	r2, #3
    359a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    359c:	e047      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    359e:	1cfb      	adds	r3, r7, #3
    35a0:	781b      	ldrb	r3, [r3, #0]
    35a2:	2b01      	cmp	r3, #1
    35a4:	d104      	bne.n	35b0 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    35a6:	2317      	movs	r3, #23
    35a8:	18fb      	adds	r3, r7, r3
    35aa:	2203      	movs	r2, #3
    35ac:	701a      	strb	r2, [r3, #0]
            break;
    35ae:	e03e      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
    35b0:	1cfb      	adds	r3, r7, #3
    35b2:	781b      	ldrb	r3, [r3, #0]
    35b4:	2b02      	cmp	r3, #2
    35b6:	d104      	bne.n	35c2 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    35b8:	2317      	movs	r3, #23
    35ba:	18fb      	adds	r3, r7, r3
    35bc:	2203      	movs	r2, #3
    35be:	701a      	strb	r2, [r3, #0]
            break;
    35c0:	e035      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
    35c2:	2317      	movs	r3, #23
    35c4:	18fb      	adds	r3, r7, r3
    35c6:	1cfa      	adds	r2, r7, #3
    35c8:	7812      	ldrb	r2, [r2, #0]
    35ca:	701a      	strb	r2, [r3, #0]
            break;
    35cc:	e02f      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    35ce:	1cfb      	adds	r3, r7, #3
    35d0:	781b      	ldrb	r3, [r3, #0]
    35d2:	2b00      	cmp	r3, #0
    35d4:	d104      	bne.n	35e0 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    35d6:	2317      	movs	r3, #23
    35d8:	18fb      	adds	r3, r7, r3
    35da:	2204      	movs	r2, #4
    35dc:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    35de:	e026      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    35e0:	1cfb      	adds	r3, r7, #3
    35e2:	781b      	ldrb	r3, [r3, #0]
    35e4:	2b01      	cmp	r3, #1
    35e6:	d104      	bne.n	35f2 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    35e8:	2317      	movs	r3, #23
    35ea:	18fb      	adds	r3, r7, r3
    35ec:	2204      	movs	r2, #4
    35ee:	701a      	strb	r2, [r3, #0]
            break;
    35f0:	e01d      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
    35f2:	1cfb      	adds	r3, r7, #3
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	2b02      	cmp	r3, #2
    35f8:	d104      	bne.n	3604 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    35fa:	2317      	movs	r3, #23
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	2204      	movs	r2, #4
    3600:	701a      	strb	r2, [r3, #0]
            break;
    3602:	e014      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
    3604:	1cfb      	adds	r3, r7, #3
    3606:	781b      	ldrb	r3, [r3, #0]
    3608:	2b03      	cmp	r3, #3
    360a:	d104      	bne.n	3616 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    360c:	2317      	movs	r3, #23
    360e:	18fb      	adds	r3, r7, r3
    3610:	2204      	movs	r2, #4
    3612:	701a      	strb	r2, [r3, #0]
            break;
    3614:	e00b      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
    3616:	2317      	movs	r3, #23
    3618:	18fb      	adds	r3, r7, r3
    361a:	1cfa      	adds	r2, r7, #3
    361c:	7812      	ldrb	r2, [r2, #0]
    361e:	701a      	strb	r2, [r3, #0]
            break;
    3620:	e005      	b.n	362e <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
    3622:	2317      	movs	r3, #23
    3624:	18fb      	adds	r3, r7, r3
    3626:	1cfa      	adds	r2, r7, #3
    3628:	7812      	ldrb	r2, [r2, #0]
    362a:	701a      	strb	r2, [r3, #0]
            break;
    362c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
    362e:	693b      	ldr	r3, [r7, #16]
    3630:	2b00      	cmp	r3, #0
    3632:	d108      	bne.n	3646 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    3634:	2308      	movs	r3, #8
    3636:	18fa      	adds	r2, r7, r3
    3638:	6878      	ldr	r0, [r7, #4]
    363a:	2301      	movs	r3, #1
    363c:	2110      	movs	r1, #16
    363e:	4c14      	ldr	r4, [pc, #80]	; (3690 <lsm6dso_xl_data_rate_set+0x2bc>)
    3640:	47a0      	blx	r4
    3642:	0003      	movs	r3, r0
    3644:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
    3646:	693b      	ldr	r3, [r7, #16]
    3648:	2b00      	cmp	r3, #0
    364a:	d118      	bne.n	367e <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
    364c:	2317      	movs	r3, #23
    364e:	18fb      	adds	r3, r7, r3
    3650:	781b      	ldrb	r3, [r3, #0]
    3652:	220f      	movs	r2, #15
    3654:	4013      	ands	r3, r2
    3656:	b2da      	uxtb	r2, r3
    3658:	2308      	movs	r3, #8
    365a:	18fb      	adds	r3, r7, r3
    365c:	0110      	lsls	r0, r2, #4
    365e:	781a      	ldrb	r2, [r3, #0]
    3660:	210f      	movs	r1, #15
    3662:	400a      	ands	r2, r1
    3664:	1c11      	adds	r1, r2, #0
    3666:	1c02      	adds	r2, r0, #0
    3668:	430a      	orrs	r2, r1
    366a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    366c:	2308      	movs	r3, #8
    366e:	18fa      	adds	r2, r7, r3
    3670:	6878      	ldr	r0, [r7, #4]
    3672:	2301      	movs	r3, #1
    3674:	2110      	movs	r1, #16
    3676:	4c07      	ldr	r4, [pc, #28]	; (3694 <lsm6dso_xl_data_rate_set+0x2c0>)
    3678:	47a0      	blx	r4
    367a:	0003      	movs	r3, r0
    367c:	613b      	str	r3, [r7, #16]
  }

  return ret;
    367e:	693b      	ldr	r3, [r7, #16]
}
    3680:	0018      	movs	r0, r3
    3682:	46bd      	mov	sp, r7
    3684:	b007      	add	sp, #28
    3686:	bd90      	pop	{r4, r7, pc}
    3688:	00003eb1 	.word	0x00003eb1
    368c:	00003f05 	.word	0x00003f05
    3690:	000032a5 	.word	0x000032a5
    3694:	000032eb 	.word	0x000032eb

00003698 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
    3698:	b590      	push	{r4, r7, lr}
    369a:	b085      	sub	sp, #20
    369c:	af00      	add	r7, sp, #0
    369e:	6078      	str	r0, [r7, #4]
    36a0:	000a      	movs	r2, r1
    36a2:	1cfb      	adds	r3, r7, #3
    36a4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    36a6:	2308      	movs	r3, #8
    36a8:	18fa      	adds	r2, r7, r3
    36aa:	6878      	ldr	r0, [r7, #4]
    36ac:	2301      	movs	r3, #1
    36ae:	2111      	movs	r1, #17
    36b0:	4c12      	ldr	r4, [pc, #72]	; (36fc <lsm6dso_gy_full_scale_set+0x64>)
    36b2:	47a0      	blx	r4
    36b4:	0003      	movs	r3, r0
    36b6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    36b8:	68fb      	ldr	r3, [r7, #12]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d119      	bne.n	36f2 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
    36be:	1cfb      	adds	r3, r7, #3
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	2207      	movs	r2, #7
    36c4:	4013      	ands	r3, r2
    36c6:	b2da      	uxtb	r2, r3
    36c8:	2308      	movs	r3, #8
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	2107      	movs	r1, #7
    36ce:	400a      	ands	r2, r1
    36d0:	1890      	adds	r0, r2, r2
    36d2:	781a      	ldrb	r2, [r3, #0]
    36d4:	210e      	movs	r1, #14
    36d6:	438a      	bics	r2, r1
    36d8:	1c11      	adds	r1, r2, #0
    36da:	1c02      	adds	r2, r0, #0
    36dc:	430a      	orrs	r2, r1
    36de:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    36e0:	2308      	movs	r3, #8
    36e2:	18fa      	adds	r2, r7, r3
    36e4:	6878      	ldr	r0, [r7, #4]
    36e6:	2301      	movs	r3, #1
    36e8:	2111      	movs	r1, #17
    36ea:	4c05      	ldr	r4, [pc, #20]	; (3700 <lsm6dso_gy_full_scale_set+0x68>)
    36ec:	47a0      	blx	r4
    36ee:	0003      	movs	r3, r0
    36f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    36f2:	68fb      	ldr	r3, [r7, #12]
}
    36f4:	0018      	movs	r0, r3
    36f6:	46bd      	mov	sp, r7
    36f8:	b005      	add	sp, #20
    36fa:	bd90      	pop	{r4, r7, pc}
    36fc:	000032a5 	.word	0x000032a5
    3700:	000032eb 	.word	0x000032eb

00003704 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
    3704:	b590      	push	{r4, r7, lr}
    3706:	b087      	sub	sp, #28
    3708:	af00      	add	r7, sp, #0
    370a:	6078      	str	r0, [r7, #4]
    370c:	000a      	movs	r2, r1
    370e:	1cfb      	adds	r3, r7, #3
    3710:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
    3712:	2317      	movs	r3, #23
    3714:	18fb      	adds	r3, r7, r3
    3716:	1cfa      	adds	r2, r7, #3
    3718:	7812      	ldrb	r2, [r2, #0]
    371a:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    371c:	230c      	movs	r3, #12
    371e:	18fa      	adds	r2, r7, r3
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	0011      	movs	r1, r2
    3724:	0018      	movs	r0, r3
    3726:	4ba4      	ldr	r3, [pc, #656]	; (39b8 <lsm6dso_gy_data_rate_set+0x2b4>)
    3728:	4798      	blx	r3
    372a:	0003      	movs	r3, r0
    372c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
    372e:	693b      	ldr	r3, [r7, #16]
    3730:	2b00      	cmp	r3, #0
    3732:	d000      	beq.n	3736 <lsm6dso_gy_data_rate_set+0x32>
    3734:	e113      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    3736:	230c      	movs	r3, #12
    3738:	18fb      	adds	r3, r7, r3
    373a:	781b      	ldrb	r3, [r3, #0]
    373c:	07db      	lsls	r3, r3, #31
    373e:	0fdb      	lsrs	r3, r3, #31
    3740:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    3742:	230c      	movs	r3, #12
    3744:	18fb      	adds	r3, r7, r3
    3746:	781b      	ldrb	r3, [r3, #0]
    3748:	079b      	lsls	r3, r3, #30
    374a:	0fdb      	lsrs	r3, r3, #31
    374c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    374e:	4313      	orrs	r3, r2
    3750:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    3752:	230c      	movs	r3, #12
    3754:	18fb      	adds	r3, r7, r3
    3756:	781b      	ldrb	r3, [r3, #0]
    3758:	075b      	lsls	r3, r3, #29
    375a:	0fdb      	lsrs	r3, r3, #31
    375c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    375e:	4313      	orrs	r3, r2
    3760:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    3762:	230c      	movs	r3, #12
    3764:	18fb      	adds	r3, r7, r3
    3766:	781b      	ldrb	r3, [r3, #0]
    3768:	071b      	lsls	r3, r3, #28
    376a:	0fdb      	lsrs	r3, r3, #31
    376c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    376e:	4313      	orrs	r3, r2
    3770:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    3772:	230c      	movs	r3, #12
    3774:	18fb      	adds	r3, r7, r3
    3776:	781b      	ldrb	r3, [r3, #0]
    3778:	06db      	lsls	r3, r3, #27
    377a:	0fdb      	lsrs	r3, r3, #31
    377c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    377e:	4313      	orrs	r3, r2
    3780:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    3782:	230c      	movs	r3, #12
    3784:	18fb      	adds	r3, r7, r3
    3786:	781b      	ldrb	r3, [r3, #0]
    3788:	069b      	lsls	r3, r3, #26
    378a:	0fdb      	lsrs	r3, r3, #31
    378c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    378e:	4313      	orrs	r3, r2
    3790:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    3792:	230c      	movs	r3, #12
    3794:	18fb      	adds	r3, r7, r3
    3796:	781b      	ldrb	r3, [r3, #0]
    3798:	065b      	lsls	r3, r3, #25
    379a:	0fdb      	lsrs	r3, r3, #31
    379c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    379e:	4313      	orrs	r3, r2
    37a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    37a2:	230c      	movs	r3, #12
    37a4:	18fb      	adds	r3, r7, r3
    37a6:	781b      	ldrb	r3, [r3, #0]
    37a8:	061b      	lsls	r3, r3, #24
    37aa:	0fdb      	lsrs	r3, r3, #31
    37ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    37ae:	4313      	orrs	r3, r2
    37b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    37b2:	230c      	movs	r3, #12
    37b4:	18fb      	adds	r3, r7, r3
    37b6:	785b      	ldrb	r3, [r3, #1]
    37b8:	07db      	lsls	r3, r3, #31
    37ba:	0fdb      	lsrs	r3, r3, #31
    37bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    37be:	4313      	orrs	r3, r2
    37c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    37c2:	230c      	movs	r3, #12
    37c4:	18fb      	adds	r3, r7, r3
    37c6:	785b      	ldrb	r3, [r3, #1]
    37c8:	079b      	lsls	r3, r3, #30
    37ca:	0fdb      	lsrs	r3, r3, #31
    37cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    37ce:	4313      	orrs	r3, r2
    37d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    37d2:	230c      	movs	r3, #12
    37d4:	18fb      	adds	r3, r7, r3
    37d6:	785b      	ldrb	r3, [r3, #1]
    37d8:	075b      	lsls	r3, r3, #29
    37da:	0fdb      	lsrs	r3, r3, #31
    37dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    37de:	4313      	orrs	r3, r2
    37e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    37e2:	230c      	movs	r3, #12
    37e4:	18fb      	adds	r3, r7, r3
    37e6:	785b      	ldrb	r3, [r3, #1]
    37e8:	071b      	lsls	r3, r3, #28
    37ea:	0fdb      	lsrs	r3, r3, #31
    37ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    37ee:	4313      	orrs	r3, r2
    37f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    37f2:	230c      	movs	r3, #12
    37f4:	18fb      	adds	r3, r7, r3
    37f6:	785b      	ldrb	r3, [r3, #1]
    37f8:	06db      	lsls	r3, r3, #27
    37fa:	0fdb      	lsrs	r3, r3, #31
    37fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    37fe:	4313      	orrs	r3, r2
    3800:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    3802:	230c      	movs	r3, #12
    3804:	18fb      	adds	r3, r7, r3
    3806:	785b      	ldrb	r3, [r3, #1]
    3808:	069b      	lsls	r3, r3, #26
    380a:	0fdb      	lsrs	r3, r3, #31
    380c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    380e:	4313      	orrs	r3, r2
    3810:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    3812:	230c      	movs	r3, #12
    3814:	18fb      	adds	r3, r7, r3
    3816:	785b      	ldrb	r3, [r3, #1]
    3818:	065b      	lsls	r3, r3, #25
    381a:	0fdb      	lsrs	r3, r3, #31
    381c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    381e:	4313      	orrs	r3, r2
    3820:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    3822:	230c      	movs	r3, #12
    3824:	18fb      	adds	r3, r7, r3
    3826:	785b      	ldrb	r3, [r3, #1]
    3828:	061b      	lsls	r3, r3, #24
    382a:	0fdb      	lsrs	r3, r3, #31
    382c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    382e:	4313      	orrs	r3, r2
    3830:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    3832:	2b01      	cmp	r3, #1
    3834:	d000      	beq.n	3838 <lsm6dso_gy_data_rate_set+0x134>
    3836:	e092      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    3838:	230b      	movs	r3, #11
    383a:	18fa      	adds	r2, r7, r3
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	0011      	movs	r1, r2
    3840:	0018      	movs	r0, r3
    3842:	4b5e      	ldr	r3, [pc, #376]	; (39bc <lsm6dso_gy_data_rate_set+0x2b8>)
    3844:	4798      	blx	r3
    3846:	0003      	movs	r3, r0
    3848:	613b      	str	r3, [r7, #16]

      if (ret == 0)
    384a:	693b      	ldr	r3, [r7, #16]
    384c:	2b00      	cmp	r3, #0
    384e:	d000      	beq.n	3852 <lsm6dso_gy_data_rate_set+0x14e>
    3850:	e085      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
    3852:	230b      	movs	r3, #11
    3854:	18fb      	adds	r3, r7, r3
    3856:	781b      	ldrb	r3, [r3, #0]
    3858:	2b01      	cmp	r3, #1
    385a:	d017      	beq.n	388c <lsm6dso_gy_data_rate_set+0x188>
    385c:	dc02      	bgt.n	3864 <lsm6dso_gy_data_rate_set+0x160>
    385e:	2b00      	cmp	r3, #0
    3860:	d005      	beq.n	386e <lsm6dso_gy_data_rate_set+0x16a>
    3862:	e076      	b.n	3952 <lsm6dso_gy_data_rate_set+0x24e>
    3864:	2b02      	cmp	r3, #2
    3866:	d029      	beq.n	38bc <lsm6dso_gy_data_rate_set+0x1b8>
    3868:	2b03      	cmp	r3, #3
    386a:	d048      	beq.n	38fe <lsm6dso_gy_data_rate_set+0x1fa>
    386c:	e071      	b.n	3952 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
    386e:	1cfb      	adds	r3, r7, #3
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d104      	bne.n	3880 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    3876:	2317      	movs	r3, #23
    3878:	18fb      	adds	r3, r7, r3
    387a:	2201      	movs	r2, #1
    387c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    387e:	e06e      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    3880:	2317      	movs	r3, #23
    3882:	18fb      	adds	r3, r7, r3
    3884:	1cfa      	adds	r2, r7, #3
    3886:	7812      	ldrb	r2, [r2, #0]
    3888:	701a      	strb	r2, [r3, #0]
            break;
    388a:	e068      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    388c:	1cfb      	adds	r3, r7, #3
    388e:	781b      	ldrb	r3, [r3, #0]
    3890:	2b00      	cmp	r3, #0
    3892:	d104      	bne.n	389e <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
    3894:	2317      	movs	r3, #23
    3896:	18fb      	adds	r3, r7, r3
    3898:	2202      	movs	r2, #2
    389a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    389c:	e05f      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    389e:	1cfb      	adds	r3, r7, #3
    38a0:	781b      	ldrb	r3, [r3, #0]
    38a2:	2b01      	cmp	r3, #1
    38a4:	d104      	bne.n	38b0 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
    38a6:	2317      	movs	r3, #23
    38a8:	18fb      	adds	r3, r7, r3
    38aa:	2202      	movs	r2, #2
    38ac:	701a      	strb	r2, [r3, #0]
            break;
    38ae:	e056      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    38b0:	2317      	movs	r3, #23
    38b2:	18fb      	adds	r3, r7, r3
    38b4:	1cfa      	adds	r2, r7, #3
    38b6:	7812      	ldrb	r2, [r2, #0]
    38b8:	701a      	strb	r2, [r3, #0]
            break;
    38ba:	e050      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    38bc:	1cfb      	adds	r3, r7, #3
    38be:	781b      	ldrb	r3, [r3, #0]
    38c0:	2b00      	cmp	r3, #0
    38c2:	d104      	bne.n	38ce <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    38c4:	2317      	movs	r3, #23
    38c6:	18fb      	adds	r3, r7, r3
    38c8:	2203      	movs	r2, #3
    38ca:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    38cc:	e047      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    38ce:	1cfb      	adds	r3, r7, #3
    38d0:	781b      	ldrb	r3, [r3, #0]
    38d2:	2b01      	cmp	r3, #1
    38d4:	d104      	bne.n	38e0 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    38d6:	2317      	movs	r3, #23
    38d8:	18fb      	adds	r3, r7, r3
    38da:	2203      	movs	r2, #3
    38dc:	701a      	strb	r2, [r3, #0]
            break;
    38de:	e03e      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
    38e0:	1cfb      	adds	r3, r7, #3
    38e2:	781b      	ldrb	r3, [r3, #0]
    38e4:	2b02      	cmp	r3, #2
    38e6:	d104      	bne.n	38f2 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    38e8:	2317      	movs	r3, #23
    38ea:	18fb      	adds	r3, r7, r3
    38ec:	2203      	movs	r2, #3
    38ee:	701a      	strb	r2, [r3, #0]
            break;
    38f0:	e035      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    38f2:	2317      	movs	r3, #23
    38f4:	18fb      	adds	r3, r7, r3
    38f6:	1cfa      	adds	r2, r7, #3
    38f8:	7812      	ldrb	r2, [r2, #0]
    38fa:	701a      	strb	r2, [r3, #0]
            break;
    38fc:	e02f      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    38fe:	1cfb      	adds	r3, r7, #3
    3900:	781b      	ldrb	r3, [r3, #0]
    3902:	2b00      	cmp	r3, #0
    3904:	d104      	bne.n	3910 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    3906:	2317      	movs	r3, #23
    3908:	18fb      	adds	r3, r7, r3
    390a:	2204      	movs	r2, #4
    390c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    390e:	e026      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    3910:	1cfb      	adds	r3, r7, #3
    3912:	781b      	ldrb	r3, [r3, #0]
    3914:	2b01      	cmp	r3, #1
    3916:	d104      	bne.n	3922 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    3918:	2317      	movs	r3, #23
    391a:	18fb      	adds	r3, r7, r3
    391c:	2204      	movs	r2, #4
    391e:	701a      	strb	r2, [r3, #0]
            break;
    3920:	e01d      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
    3922:	1cfb      	adds	r3, r7, #3
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	2b02      	cmp	r3, #2
    3928:	d104      	bne.n	3934 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    392a:	2317      	movs	r3, #23
    392c:	18fb      	adds	r3, r7, r3
    392e:	2204      	movs	r2, #4
    3930:	701a      	strb	r2, [r3, #0]
            break;
    3932:	e014      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
    3934:	1cfb      	adds	r3, r7, #3
    3936:	781b      	ldrb	r3, [r3, #0]
    3938:	2b03      	cmp	r3, #3
    393a:	d104      	bne.n	3946 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    393c:	2317      	movs	r3, #23
    393e:	18fb      	adds	r3, r7, r3
    3940:	2204      	movs	r2, #4
    3942:	701a      	strb	r2, [r3, #0]
            break;
    3944:	e00b      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    3946:	2317      	movs	r3, #23
    3948:	18fb      	adds	r3, r7, r3
    394a:	1cfa      	adds	r2, r7, #3
    394c:	7812      	ldrb	r2, [r2, #0]
    394e:	701a      	strb	r2, [r3, #0]
            break;
    3950:	e005      	b.n	395e <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
    3952:	2317      	movs	r3, #23
    3954:	18fb      	adds	r3, r7, r3
    3956:	1cfa      	adds	r2, r7, #3
    3958:	7812      	ldrb	r2, [r2, #0]
    395a:	701a      	strb	r2, [r3, #0]
            break;
    395c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
    395e:	693b      	ldr	r3, [r7, #16]
    3960:	2b00      	cmp	r3, #0
    3962:	d108      	bne.n	3976 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    3964:	2308      	movs	r3, #8
    3966:	18fa      	adds	r2, r7, r3
    3968:	6878      	ldr	r0, [r7, #4]
    396a:	2301      	movs	r3, #1
    396c:	2111      	movs	r1, #17
    396e:	4c14      	ldr	r4, [pc, #80]	; (39c0 <lsm6dso_gy_data_rate_set+0x2bc>)
    3970:	47a0      	blx	r4
    3972:	0003      	movs	r3, r0
    3974:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
    3976:	693b      	ldr	r3, [r7, #16]
    3978:	2b00      	cmp	r3, #0
    397a:	d118      	bne.n	39ae <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
    397c:	2317      	movs	r3, #23
    397e:	18fb      	adds	r3, r7, r3
    3980:	781b      	ldrb	r3, [r3, #0]
    3982:	220f      	movs	r2, #15
    3984:	4013      	ands	r3, r2
    3986:	b2da      	uxtb	r2, r3
    3988:	2308      	movs	r3, #8
    398a:	18fb      	adds	r3, r7, r3
    398c:	0110      	lsls	r0, r2, #4
    398e:	781a      	ldrb	r2, [r3, #0]
    3990:	210f      	movs	r1, #15
    3992:	400a      	ands	r2, r1
    3994:	1c11      	adds	r1, r2, #0
    3996:	1c02      	adds	r2, r0, #0
    3998:	430a      	orrs	r2, r1
    399a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    399c:	2308      	movs	r3, #8
    399e:	18fa      	adds	r2, r7, r3
    39a0:	6878      	ldr	r0, [r7, #4]
    39a2:	2301      	movs	r3, #1
    39a4:	2111      	movs	r1, #17
    39a6:	4c07      	ldr	r4, [pc, #28]	; (39c4 <lsm6dso_gy_data_rate_set+0x2c0>)
    39a8:	47a0      	blx	r4
    39aa:	0003      	movs	r3, r0
    39ac:	613b      	str	r3, [r7, #16]
  }

  return ret;
    39ae:	693b      	ldr	r3, [r7, #16]
}
    39b0:	0018      	movs	r0, r3
    39b2:	46bd      	mov	sp, r7
    39b4:	b007      	add	sp, #28
    39b6:	bd90      	pop	{r4, r7, pc}
    39b8:	00003eb1 	.word	0x00003eb1
    39bc:	00003f05 	.word	0x00003f05
    39c0:	000032a5 	.word	0x000032a5
    39c4:	000032eb 	.word	0x000032eb

000039c8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
    39c8:	b590      	push	{r4, r7, lr}
    39ca:	b085      	sub	sp, #20
    39cc:	af00      	add	r7, sp, #0
    39ce:	6078      	str	r0, [r7, #4]
    39d0:	000a      	movs	r2, r1
    39d2:	1cfb      	adds	r3, r7, #3
    39d4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    39d6:	2308      	movs	r3, #8
    39d8:	18fa      	adds	r2, r7, r3
    39da:	6878      	ldr	r0, [r7, #4]
    39dc:	2301      	movs	r3, #1
    39de:	2112      	movs	r1, #18
    39e0:	4c12      	ldr	r4, [pc, #72]	; (3a2c <lsm6dso_block_data_update_set+0x64>)
    39e2:	47a0      	blx	r4
    39e4:	0003      	movs	r3, r0
    39e6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    39e8:	68fb      	ldr	r3, [r7, #12]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d119      	bne.n	3a22 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
    39ee:	1cfb      	adds	r3, r7, #3
    39f0:	781b      	ldrb	r3, [r3, #0]
    39f2:	2201      	movs	r2, #1
    39f4:	4013      	ands	r3, r2
    39f6:	b2da      	uxtb	r2, r3
    39f8:	2308      	movs	r3, #8
    39fa:	18fb      	adds	r3, r7, r3
    39fc:	2101      	movs	r1, #1
    39fe:	400a      	ands	r2, r1
    3a00:	0190      	lsls	r0, r2, #6
    3a02:	781a      	ldrb	r2, [r3, #0]
    3a04:	2140      	movs	r1, #64	; 0x40
    3a06:	438a      	bics	r2, r1
    3a08:	1c11      	adds	r1, r2, #0
    3a0a:	1c02      	adds	r2, r0, #0
    3a0c:	430a      	orrs	r2, r1
    3a0e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    3a10:	2308      	movs	r3, #8
    3a12:	18fa      	adds	r2, r7, r3
    3a14:	6878      	ldr	r0, [r7, #4]
    3a16:	2301      	movs	r3, #1
    3a18:	2112      	movs	r1, #18
    3a1a:	4c05      	ldr	r4, [pc, #20]	; (3a30 <lsm6dso_block_data_update_set+0x68>)
    3a1c:	47a0      	blx	r4
    3a1e:	0003      	movs	r3, r0
    3a20:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    3a22:	68fb      	ldr	r3, [r7, #12]
}
    3a24:	0018      	movs	r0, r3
    3a26:	46bd      	mov	sp, r7
    3a28:	b005      	add	sp, #20
    3a2a:	bd90      	pop	{r4, r7, pc}
    3a2c:	000032a5 	.word	0x000032a5
    3a30:	000032eb 	.word	0x000032eb

00003a34 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
    3a34:	b590      	push	{r4, r7, lr}
    3a36:	b085      	sub	sp, #20
    3a38:	af00      	add	r7, sp, #0
    3a3a:	6078      	str	r0, [r7, #4]
    3a3c:	000a      	movs	r2, r1
    3a3e:	1cfb      	adds	r3, r7, #3
    3a40:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    3a42:	2308      	movs	r3, #8
    3a44:	18fa      	adds	r2, r7, r3
    3a46:	6878      	ldr	r0, [r7, #4]
    3a48:	2301      	movs	r3, #1
    3a4a:	2115      	movs	r1, #21
    3a4c:	4c12      	ldr	r4, [pc, #72]	; (3a98 <lsm6dso_xl_offset_weight_set+0x64>)
    3a4e:	47a0      	blx	r4
    3a50:	0003      	movs	r3, r0
    3a52:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	2b00      	cmp	r3, #0
    3a58:	d119      	bne.n	3a8e <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
    3a5a:	1cfb      	adds	r3, r7, #3
    3a5c:	781b      	ldrb	r3, [r3, #0]
    3a5e:	2201      	movs	r2, #1
    3a60:	4013      	ands	r3, r2
    3a62:	b2da      	uxtb	r2, r3
    3a64:	2308      	movs	r3, #8
    3a66:	18fb      	adds	r3, r7, r3
    3a68:	2101      	movs	r1, #1
    3a6a:	400a      	ands	r2, r1
    3a6c:	00d0      	lsls	r0, r2, #3
    3a6e:	781a      	ldrb	r2, [r3, #0]
    3a70:	2108      	movs	r1, #8
    3a72:	438a      	bics	r2, r1
    3a74:	1c11      	adds	r1, r2, #0
    3a76:	1c02      	adds	r2, r0, #0
    3a78:	430a      	orrs	r2, r1
    3a7a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    3a7c:	2308      	movs	r3, #8
    3a7e:	18fa      	adds	r2, r7, r3
    3a80:	6878      	ldr	r0, [r7, #4]
    3a82:	2301      	movs	r3, #1
    3a84:	2115      	movs	r1, #21
    3a86:	4c05      	ldr	r4, [pc, #20]	; (3a9c <lsm6dso_xl_offset_weight_set+0x68>)
    3a88:	47a0      	blx	r4
    3a8a:	0003      	movs	r3, r0
    3a8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    3a8e:	68fb      	ldr	r3, [r7, #12]
}
    3a90:	0018      	movs	r0, r3
    3a92:	46bd      	mov	sp, r7
    3a94:	b005      	add	sp, #20
    3a96:	bd90      	pop	{r4, r7, pc}
    3a98:	000032a5 	.word	0x000032a5
    3a9c:	000032eb 	.word	0x000032eb

00003aa0 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
    3aa0:	b590      	push	{r4, r7, lr}
    3aa2:	b085      	sub	sp, #20
    3aa4:	af00      	add	r7, sp, #0
    3aa6:	6078      	str	r0, [r7, #4]
    3aa8:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
    3aaa:	2308      	movs	r3, #8
    3aac:	18fa      	adds	r2, r7, r3
    3aae:	6878      	ldr	r0, [r7, #4]
    3ab0:	2301      	movs	r3, #1
    3ab2:	211e      	movs	r1, #30
    3ab4:	4c08      	ldr	r4, [pc, #32]	; (3ad8 <lsm6dso_xl_flag_data_ready_get+0x38>)
    3ab6:	47a0      	blx	r4
    3ab8:	0003      	movs	r3, r0
    3aba:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
    3abc:	2308      	movs	r3, #8
    3abe:	18fb      	adds	r3, r7, r3
    3ac0:	781b      	ldrb	r3, [r3, #0]
    3ac2:	07db      	lsls	r3, r3, #31
    3ac4:	0fdb      	lsrs	r3, r3, #31
    3ac6:	b2db      	uxtb	r3, r3
    3ac8:	001a      	movs	r2, r3
    3aca:	683b      	ldr	r3, [r7, #0]
    3acc:	701a      	strb	r2, [r3, #0]

  return ret;
    3ace:	68fb      	ldr	r3, [r7, #12]
}
    3ad0:	0018      	movs	r0, r3
    3ad2:	46bd      	mov	sp, r7
    3ad4:	b005      	add	sp, #20
    3ad6:	bd90      	pop	{r4, r7, pc}
    3ad8:	000032a5 	.word	0x000032a5

00003adc <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
    3adc:	b590      	push	{r4, r7, lr}
    3ade:	b087      	sub	sp, #28
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	6078      	str	r0, [r7, #4]
    3ae4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    3ae6:	230c      	movs	r3, #12
    3ae8:	18fa      	adds	r2, r7, r3
    3aea:	6878      	ldr	r0, [r7, #4]
    3aec:	2306      	movs	r3, #6
    3aee:	2128      	movs	r1, #40	; 0x28
    3af0:	4c26      	ldr	r4, [pc, #152]	; (3b8c <lsm6dso_acceleration_raw_get+0xb0>)
    3af2:	47a0      	blx	r4
    3af4:	0003      	movs	r3, r0
    3af6:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
    3af8:	230c      	movs	r3, #12
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	785b      	ldrb	r3, [r3, #1]
    3afe:	b21a      	sxth	r2, r3
    3b00:	683b      	ldr	r3, [r7, #0]
    3b02:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    3b04:	683b      	ldr	r3, [r7, #0]
    3b06:	2200      	movs	r2, #0
    3b08:	5e9b      	ldrsh	r3, [r3, r2]
    3b0a:	b29b      	uxth	r3, r3
    3b0c:	021b      	lsls	r3, r3, #8
    3b0e:	b29a      	uxth	r2, r3
    3b10:	230c      	movs	r3, #12
    3b12:	18fb      	adds	r3, r7, r3
    3b14:	781b      	ldrb	r3, [r3, #0]
    3b16:	b29b      	uxth	r3, r3
    3b18:	18d3      	adds	r3, r2, r3
    3b1a:	b29b      	uxth	r3, r3
    3b1c:	b21a      	sxth	r2, r3
    3b1e:	683b      	ldr	r3, [r7, #0]
    3b20:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
    3b22:	683b      	ldr	r3, [r7, #0]
    3b24:	3302      	adds	r3, #2
    3b26:	220c      	movs	r2, #12
    3b28:	18ba      	adds	r2, r7, r2
    3b2a:	78d2      	ldrb	r2, [r2, #3]
    3b2c:	b212      	sxth	r2, r2
    3b2e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    3b30:	683b      	ldr	r3, [r7, #0]
    3b32:	3302      	adds	r3, #2
    3b34:	683a      	ldr	r2, [r7, #0]
    3b36:	3202      	adds	r2, #2
    3b38:	2100      	movs	r1, #0
    3b3a:	5e52      	ldrsh	r2, [r2, r1]
    3b3c:	b292      	uxth	r2, r2
    3b3e:	0212      	lsls	r2, r2, #8
    3b40:	b291      	uxth	r1, r2
    3b42:	220c      	movs	r2, #12
    3b44:	18ba      	adds	r2, r7, r2
    3b46:	7892      	ldrb	r2, [r2, #2]
    3b48:	b292      	uxth	r2, r2
    3b4a:	188a      	adds	r2, r1, r2
    3b4c:	b292      	uxth	r2, r2
    3b4e:	b212      	sxth	r2, r2
    3b50:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
    3b52:	683b      	ldr	r3, [r7, #0]
    3b54:	3304      	adds	r3, #4
    3b56:	220c      	movs	r2, #12
    3b58:	18ba      	adds	r2, r7, r2
    3b5a:	7952      	ldrb	r2, [r2, #5]
    3b5c:	b212      	sxth	r2, r2
    3b5e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    3b60:	683b      	ldr	r3, [r7, #0]
    3b62:	3304      	adds	r3, #4
    3b64:	683a      	ldr	r2, [r7, #0]
    3b66:	3204      	adds	r2, #4
    3b68:	2100      	movs	r1, #0
    3b6a:	5e52      	ldrsh	r2, [r2, r1]
    3b6c:	b292      	uxth	r2, r2
    3b6e:	0212      	lsls	r2, r2, #8
    3b70:	b291      	uxth	r1, r2
    3b72:	220c      	movs	r2, #12
    3b74:	18ba      	adds	r2, r7, r2
    3b76:	7912      	ldrb	r2, [r2, #4]
    3b78:	b292      	uxth	r2, r2
    3b7a:	188a      	adds	r2, r1, r2
    3b7c:	b292      	uxth	r2, r2
    3b7e:	b212      	sxth	r2, r2
    3b80:	801a      	strh	r2, [r3, #0]

  return ret;
    3b82:	697b      	ldr	r3, [r7, #20]
}
    3b84:	0018      	movs	r0, r3
    3b86:	46bd      	mov	sp, r7
    3b88:	b007      	add	sp, #28
    3b8a:	bd90      	pop	{r4, r7, pc}
    3b8c:	000032a5 	.word	0x000032a5

00003b90 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
    3b90:	b590      	push	{r4, r7, lr}
    3b92:	b085      	sub	sp, #20
    3b94:	af00      	add	r7, sp, #0
    3b96:	6078      	str	r0, [r7, #4]
    3b98:	000a      	movs	r2, r1
    3b9a:	1cfb      	adds	r3, r7, #3
    3b9c:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    3b9e:	2308      	movs	r3, #8
    3ba0:	18fa      	adds	r2, r7, r3
    3ba2:	6878      	ldr	r0, [r7, #4]
    3ba4:	2301      	movs	r3, #1
    3ba6:	2101      	movs	r1, #1
    3ba8:	4c11      	ldr	r4, [pc, #68]	; (3bf0 <lsm6dso_mem_bank_set+0x60>)
    3baa:	47a0      	blx	r4
    3bac:	0003      	movs	r3, r0
    3bae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    3bb0:	68fb      	ldr	r3, [r7, #12]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d117      	bne.n	3be6 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
    3bb6:	1cfb      	adds	r3, r7, #3
    3bb8:	781b      	ldrb	r3, [r3, #0]
    3bba:	2203      	movs	r2, #3
    3bbc:	4013      	ands	r3, r2
    3bbe:	b2da      	uxtb	r2, r3
    3bc0:	2308      	movs	r3, #8
    3bc2:	18fb      	adds	r3, r7, r3
    3bc4:	0190      	lsls	r0, r2, #6
    3bc6:	781a      	ldrb	r2, [r3, #0]
    3bc8:	213f      	movs	r1, #63	; 0x3f
    3bca:	400a      	ands	r2, r1
    3bcc:	1c11      	adds	r1, r2, #0
    3bce:	1c02      	adds	r2, r0, #0
    3bd0:	430a      	orrs	r2, r1
    3bd2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    3bd4:	2308      	movs	r3, #8
    3bd6:	18fa      	adds	r2, r7, r3
    3bd8:	6878      	ldr	r0, [r7, #4]
    3bda:	2301      	movs	r3, #1
    3bdc:	2101      	movs	r1, #1
    3bde:	4c05      	ldr	r4, [pc, #20]	; (3bf4 <lsm6dso_mem_bank_set+0x64>)
    3be0:	47a0      	blx	r4
    3be2:	0003      	movs	r3, r0
    3be4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    3be6:	68fb      	ldr	r3, [r7, #12]
}
    3be8:	0018      	movs	r0, r3
    3bea:	46bd      	mov	sp, r7
    3bec:	b005      	add	sp, #20
    3bee:	bd90      	pop	{r4, r7, pc}
    3bf0:	000032a5 	.word	0x000032a5
    3bf4:	000032eb 	.word	0x000032eb

00003bf8 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
    3bf8:	b590      	push	{r4, r7, lr}
    3bfa:	b085      	sub	sp, #20
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
    3c02:	683a      	ldr	r2, [r7, #0]
    3c04:	6878      	ldr	r0, [r7, #4]
    3c06:	2301      	movs	r3, #1
    3c08:	210f      	movs	r1, #15
    3c0a:	4c04      	ldr	r4, [pc, #16]	; (3c1c <lsm6dso_device_id_get+0x24>)
    3c0c:	47a0      	blx	r4
    3c0e:	0003      	movs	r3, r0
    3c10:	60fb      	str	r3, [r7, #12]

  return ret;
    3c12:	68fb      	ldr	r3, [r7, #12]
}
    3c14:	0018      	movs	r0, r3
    3c16:	46bd      	mov	sp, r7
    3c18:	b005      	add	sp, #20
    3c1a:	bd90      	pop	{r4, r7, pc}
    3c1c:	000032a5 	.word	0x000032a5

00003c20 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
    3c20:	b590      	push	{r4, r7, lr}
    3c22:	b085      	sub	sp, #20
    3c24:	af00      	add	r7, sp, #0
    3c26:	6078      	str	r0, [r7, #4]
    3c28:	000a      	movs	r2, r1
    3c2a:	1cfb      	adds	r3, r7, #3
    3c2c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    3c2e:	2308      	movs	r3, #8
    3c30:	18fa      	adds	r2, r7, r3
    3c32:	6878      	ldr	r0, [r7, #4]
    3c34:	2301      	movs	r3, #1
    3c36:	2112      	movs	r1, #18
    3c38:	4c12      	ldr	r4, [pc, #72]	; (3c84 <lsm6dso_reset_set+0x64>)
    3c3a:	47a0      	blx	r4
    3c3c:	0003      	movs	r3, r0
    3c3e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    3c40:	68fb      	ldr	r3, [r7, #12]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d119      	bne.n	3c7a <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
    3c46:	1cfb      	adds	r3, r7, #3
    3c48:	781b      	ldrb	r3, [r3, #0]
    3c4a:	2201      	movs	r2, #1
    3c4c:	4013      	ands	r3, r2
    3c4e:	b2da      	uxtb	r2, r3
    3c50:	2308      	movs	r3, #8
    3c52:	18fb      	adds	r3, r7, r3
    3c54:	2101      	movs	r1, #1
    3c56:	400a      	ands	r2, r1
    3c58:	0010      	movs	r0, r2
    3c5a:	781a      	ldrb	r2, [r3, #0]
    3c5c:	2101      	movs	r1, #1
    3c5e:	438a      	bics	r2, r1
    3c60:	1c11      	adds	r1, r2, #0
    3c62:	1c02      	adds	r2, r0, #0
    3c64:	430a      	orrs	r2, r1
    3c66:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    3c68:	2308      	movs	r3, #8
    3c6a:	18fa      	adds	r2, r7, r3
    3c6c:	6878      	ldr	r0, [r7, #4]
    3c6e:	2301      	movs	r3, #1
    3c70:	2112      	movs	r1, #18
    3c72:	4c05      	ldr	r4, [pc, #20]	; (3c88 <lsm6dso_reset_set+0x68>)
    3c74:	47a0      	blx	r4
    3c76:	0003      	movs	r3, r0
    3c78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    3c7a:	68fb      	ldr	r3, [r7, #12]
}
    3c7c:	0018      	movs	r0, r3
    3c7e:	46bd      	mov	sp, r7
    3c80:	b005      	add	sp, #20
    3c82:	bd90      	pop	{r4, r7, pc}
    3c84:	000032a5 	.word	0x000032a5
    3c88:	000032eb 	.word	0x000032eb

00003c8c <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
    3c8c:	b590      	push	{r4, r7, lr}
    3c8e:	b085      	sub	sp, #20
    3c90:	af00      	add	r7, sp, #0
    3c92:	6078      	str	r0, [r7, #4]
    3c94:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    3c96:	2308      	movs	r3, #8
    3c98:	18fa      	adds	r2, r7, r3
    3c9a:	6878      	ldr	r0, [r7, #4]
    3c9c:	2301      	movs	r3, #1
    3c9e:	2112      	movs	r1, #18
    3ca0:	4c08      	ldr	r4, [pc, #32]	; (3cc4 <lsm6dso_reset_get+0x38>)
    3ca2:	47a0      	blx	r4
    3ca4:	0003      	movs	r3, r0
    3ca6:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
    3ca8:	2308      	movs	r3, #8
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	07db      	lsls	r3, r3, #31
    3cb0:	0fdb      	lsrs	r3, r3, #31
    3cb2:	b2db      	uxtb	r3, r3
    3cb4:	001a      	movs	r2, r3
    3cb6:	683b      	ldr	r3, [r7, #0]
    3cb8:	701a      	strb	r2, [r3, #0]

  return ret;
    3cba:	68fb      	ldr	r3, [r7, #12]
}
    3cbc:	0018      	movs	r0, r3
    3cbe:	46bd      	mov	sp, r7
    3cc0:	b005      	add	sp, #20
    3cc2:	bd90      	pop	{r4, r7, pc}
    3cc4:	000032a5 	.word	0x000032a5

00003cc8 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
    3cc8:	b590      	push	{r4, r7, lr}
    3cca:	b085      	sub	sp, #20
    3ccc:	af00      	add	r7, sp, #0
    3cce:	6078      	str	r0, [r7, #4]
    3cd0:	000a      	movs	r2, r1
    3cd2:	1cfb      	adds	r3, r7, #3
    3cd4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    3cd6:	2308      	movs	r3, #8
    3cd8:	18fa      	adds	r2, r7, r3
    3cda:	6878      	ldr	r0, [r7, #4]
    3cdc:	2301      	movs	r3, #1
    3cde:	2110      	movs	r1, #16
    3ce0:	4c12      	ldr	r4, [pc, #72]	; (3d2c <lsm6dso_xl_filter_lp2_set+0x64>)
    3ce2:	47a0      	blx	r4
    3ce4:	0003      	movs	r3, r0
    3ce6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    3ce8:	68fb      	ldr	r3, [r7, #12]
    3cea:	2b00      	cmp	r3, #0
    3cec:	d119      	bne.n	3d22 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
    3cee:	1cfb      	adds	r3, r7, #3
    3cf0:	781b      	ldrb	r3, [r3, #0]
    3cf2:	2201      	movs	r2, #1
    3cf4:	4013      	ands	r3, r2
    3cf6:	b2da      	uxtb	r2, r3
    3cf8:	2308      	movs	r3, #8
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	2101      	movs	r1, #1
    3cfe:	400a      	ands	r2, r1
    3d00:	1890      	adds	r0, r2, r2
    3d02:	781a      	ldrb	r2, [r3, #0]
    3d04:	2102      	movs	r1, #2
    3d06:	438a      	bics	r2, r1
    3d08:	1c11      	adds	r1, r2, #0
    3d0a:	1c02      	adds	r2, r0, #0
    3d0c:	430a      	orrs	r2, r1
    3d0e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    3d10:	2308      	movs	r3, #8
    3d12:	18fa      	adds	r2, r7, r3
    3d14:	6878      	ldr	r0, [r7, #4]
    3d16:	2301      	movs	r3, #1
    3d18:	2110      	movs	r1, #16
    3d1a:	4c05      	ldr	r4, [pc, #20]	; (3d30 <lsm6dso_xl_filter_lp2_set+0x68>)
    3d1c:	47a0      	blx	r4
    3d1e:	0003      	movs	r3, r0
    3d20:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    3d22:	68fb      	ldr	r3, [r7, #12]
}
    3d24:	0018      	movs	r0, r3
    3d26:	46bd      	mov	sp, r7
    3d28:	b005      	add	sp, #20
    3d2a:	bd90      	pop	{r4, r7, pc}
    3d2c:	000032a5 	.word	0x000032a5
    3d30:	000032eb 	.word	0x000032eb

00003d34 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
    3d34:	b590      	push	{r4, r7, lr}
    3d36:	b085      	sub	sp, #20
    3d38:	af00      	add	r7, sp, #0
    3d3a:	6078      	str	r0, [r7, #4]
    3d3c:	000a      	movs	r2, r1
    3d3e:	1cfb      	adds	r3, r7, #3
    3d40:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    3d42:	2308      	movs	r3, #8
    3d44:	18fa      	adds	r2, r7, r3
    3d46:	6878      	ldr	r0, [r7, #4]
    3d48:	2301      	movs	r3, #1
    3d4a:	2117      	movs	r1, #23
    3d4c:	4c25      	ldr	r4, [pc, #148]	; (3de4 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
    3d4e:	47a0      	blx	r4
    3d50:	0003      	movs	r3, r0
    3d52:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    3d54:	68fb      	ldr	r3, [r7, #12]
    3d56:	2b00      	cmp	r3, #0
    3d58:	d13f      	bne.n	3dda <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
    3d5a:	1cfb      	adds	r3, r7, #3
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	091b      	lsrs	r3, r3, #4
    3d60:	b2db      	uxtb	r3, r3
    3d62:	1c1a      	adds	r2, r3, #0
    3d64:	2301      	movs	r3, #1
    3d66:	4013      	ands	r3, r2
    3d68:	b2da      	uxtb	r2, r3
    3d6a:	2308      	movs	r3, #8
    3d6c:	18fb      	adds	r3, r7, r3
    3d6e:	2101      	movs	r1, #1
    3d70:	400a      	ands	r2, r1
    3d72:	0090      	lsls	r0, r2, #2
    3d74:	781a      	ldrb	r2, [r3, #0]
    3d76:	2104      	movs	r1, #4
    3d78:	438a      	bics	r2, r1
    3d7a:	1c11      	adds	r1, r2, #0
    3d7c:	1c02      	adds	r2, r0, #0
    3d7e:	430a      	orrs	r2, r1
    3d80:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    3d82:	1cfb      	adds	r3, r7, #3
    3d84:	781b      	ldrb	r3, [r3, #0]
    3d86:	095b      	lsrs	r3, r3, #5
    3d88:	b2db      	uxtb	r3, r3
    3d8a:	1c1a      	adds	r2, r3, #0
    3d8c:	2301      	movs	r3, #1
    3d8e:	4013      	ands	r3, r2
    3d90:	b2da      	uxtb	r2, r3
    3d92:	2308      	movs	r3, #8
    3d94:	18fb      	adds	r3, r7, r3
    3d96:	2101      	movs	r1, #1
    3d98:	400a      	ands	r2, r1
    3d9a:	0110      	lsls	r0, r2, #4
    3d9c:	781a      	ldrb	r2, [r3, #0]
    3d9e:	2110      	movs	r1, #16
    3da0:	438a      	bics	r2, r1
    3da2:	1c11      	adds	r1, r2, #0
    3da4:	1c02      	adds	r2, r0, #0
    3da6:	430a      	orrs	r2, r1
    3da8:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
    3daa:	1cfb      	adds	r3, r7, #3
    3dac:	781b      	ldrb	r3, [r3, #0]
    3dae:	2207      	movs	r2, #7
    3db0:	4013      	ands	r3, r2
    3db2:	b2da      	uxtb	r2, r3
    3db4:	2308      	movs	r3, #8
    3db6:	18fb      	adds	r3, r7, r3
    3db8:	0150      	lsls	r0, r2, #5
    3dba:	781a      	ldrb	r2, [r3, #0]
    3dbc:	211f      	movs	r1, #31
    3dbe:	400a      	ands	r2, r1
    3dc0:	1c11      	adds	r1, r2, #0
    3dc2:	1c02      	adds	r2, r0, #0
    3dc4:	430a      	orrs	r2, r1
    3dc6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    3dc8:	2308      	movs	r3, #8
    3dca:	18fa      	adds	r2, r7, r3
    3dcc:	6878      	ldr	r0, [r7, #4]
    3dce:	2301      	movs	r3, #1
    3dd0:	2117      	movs	r1, #23
    3dd2:	4c05      	ldr	r4, [pc, #20]	; (3de8 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
    3dd4:	47a0      	blx	r4
    3dd6:	0003      	movs	r3, r0
    3dd8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    3dda:	68fb      	ldr	r3, [r7, #12]
}
    3ddc:	0018      	movs	r0, r3
    3dde:	46bd      	mov	sp, r7
    3de0:	b005      	add	sp, #20
    3de2:	bd90      	pop	{r4, r7, pc}
    3de4:	000032a5 	.word	0x000032a5
    3de8:	000032eb 	.word	0x000032eb

00003dec <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
    3dec:	b590      	push	{r4, r7, lr}
    3dee:	b087      	sub	sp, #28
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
    3df4:	000a      	movs	r2, r1
    3df6:	1cfb      	adds	r3, r7, #3
    3df8:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    3dfa:	230c      	movs	r3, #12
    3dfc:	18fa      	adds	r2, r7, r3
    3dfe:	6878      	ldr	r0, [r7, #4]
    3e00:	2301      	movs	r3, #1
    3e02:	2118      	movs	r1, #24
    3e04:	4c28      	ldr	r4, [pc, #160]	; (3ea8 <lsm6dso_i3c_disable_set+0xbc>)
    3e06:	47a0      	blx	r4
    3e08:	0003      	movs	r3, r0
    3e0a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
    3e0c:	697b      	ldr	r3, [r7, #20]
    3e0e:	2b00      	cmp	r3, #0
    3e10:	d11c      	bne.n	3e4c <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    3e12:	1cfb      	adds	r3, r7, #3
    3e14:	781b      	ldrb	r3, [r3, #0]
    3e16:	09db      	lsrs	r3, r3, #7
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	1c1a      	adds	r2, r3, #0
    3e1c:	2301      	movs	r3, #1
    3e1e:	4013      	ands	r3, r2
    3e20:	b2da      	uxtb	r2, r3
    3e22:	230c      	movs	r3, #12
    3e24:	18fb      	adds	r3, r7, r3
    3e26:	2101      	movs	r1, #1
    3e28:	400a      	ands	r2, r1
    3e2a:	1890      	adds	r0, r2, r2
    3e2c:	781a      	ldrb	r2, [r3, #0]
    3e2e:	2102      	movs	r1, #2
    3e30:	438a      	bics	r2, r1
    3e32:	1c11      	adds	r1, r2, #0
    3e34:	1c02      	adds	r2, r0, #0
    3e36:	430a      	orrs	r2, r1
    3e38:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    3e3a:	230c      	movs	r3, #12
    3e3c:	18fa      	adds	r2, r7, r3
    3e3e:	6878      	ldr	r0, [r7, #4]
    3e40:	2301      	movs	r3, #1
    3e42:	2118      	movs	r1, #24
    3e44:	4c19      	ldr	r4, [pc, #100]	; (3eac <lsm6dso_i3c_disable_set+0xc0>)
    3e46:	47a0      	blx	r4
    3e48:	0003      	movs	r3, r0
    3e4a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
    3e4c:	697b      	ldr	r3, [r7, #20]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d108      	bne.n	3e64 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    3e52:	2310      	movs	r3, #16
    3e54:	18fa      	adds	r2, r7, r3
    3e56:	6878      	ldr	r0, [r7, #4]
    3e58:	2301      	movs	r3, #1
    3e5a:	2162      	movs	r1, #98	; 0x62
    3e5c:	4c12      	ldr	r4, [pc, #72]	; (3ea8 <lsm6dso_i3c_disable_set+0xbc>)
    3e5e:	47a0      	blx	r4
    3e60:	0003      	movs	r3, r0
    3e62:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
    3e64:	697b      	ldr	r3, [r7, #20]
    3e66:	2b00      	cmp	r3, #0
    3e68:	d119      	bne.n	3e9e <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    3e6a:	1cfb      	adds	r3, r7, #3
    3e6c:	781b      	ldrb	r3, [r3, #0]
    3e6e:	2203      	movs	r2, #3
    3e70:	4013      	ands	r3, r2
    3e72:	b2da      	uxtb	r2, r3
    3e74:	2310      	movs	r3, #16
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	2103      	movs	r1, #3
    3e7a:	400a      	ands	r2, r1
    3e7c:	00d0      	lsls	r0, r2, #3
    3e7e:	781a      	ldrb	r2, [r3, #0]
    3e80:	2118      	movs	r1, #24
    3e82:	438a      	bics	r2, r1
    3e84:	1c11      	adds	r1, r2, #0
    3e86:	1c02      	adds	r2, r0, #0
    3e88:	430a      	orrs	r2, r1
    3e8a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    3e8c:	2310      	movs	r3, #16
    3e8e:	18fa      	adds	r2, r7, r3
    3e90:	6878      	ldr	r0, [r7, #4]
    3e92:	2301      	movs	r3, #1
    3e94:	2162      	movs	r1, #98	; 0x62
    3e96:	4c05      	ldr	r4, [pc, #20]	; (3eac <lsm6dso_i3c_disable_set+0xc0>)
    3e98:	47a0      	blx	r4
    3e9a:	0003      	movs	r3, r0
    3e9c:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
    3e9e:	697b      	ldr	r3, [r7, #20]
}
    3ea0:	0018      	movs	r0, r3
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b007      	add	sp, #28
    3ea6:	bd90      	pop	{r4, r7, pc}
    3ea8:	000032a5 	.word	0x000032a5
    3eac:	000032eb 	.word	0x000032eb

00003eb0 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
    3eb0:	b590      	push	{r4, r7, lr}
    3eb2:	b085      	sub	sp, #20
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	6078      	str	r0, [r7, #4]
    3eb8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	2102      	movs	r1, #2
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b0e      	ldr	r3, [pc, #56]	; (3efc <lsm6dso_fsm_enable_get+0x4c>)
    3ec2:	4798      	blx	r3
    3ec4:	0003      	movs	r3, r0
    3ec6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    3ec8:	68fb      	ldr	r3, [r7, #12]
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d107      	bne.n	3ede <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    3ece:	683a      	ldr	r2, [r7, #0]
    3ed0:	6878      	ldr	r0, [r7, #4]
    3ed2:	2302      	movs	r3, #2
    3ed4:	2146      	movs	r1, #70	; 0x46
    3ed6:	4c0a      	ldr	r4, [pc, #40]	; (3f00 <lsm6dso_fsm_enable_get+0x50>)
    3ed8:	47a0      	blx	r4
    3eda:	0003      	movs	r3, r0
    3edc:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
    3ede:	68fb      	ldr	r3, [r7, #12]
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d106      	bne.n	3ef2 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	2100      	movs	r1, #0
    3ee8:	0018      	movs	r0, r3
    3eea:	4b04      	ldr	r3, [pc, #16]	; (3efc <lsm6dso_fsm_enable_get+0x4c>)
    3eec:	4798      	blx	r3
    3eee:	0003      	movs	r3, r0
    3ef0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    3ef2:	68fb      	ldr	r3, [r7, #12]
}
    3ef4:	0018      	movs	r0, r3
    3ef6:	46bd      	mov	sp, r7
    3ef8:	b005      	add	sp, #20
    3efa:	bd90      	pop	{r4, r7, pc}
    3efc:	00003b91 	.word	0x00003b91
    3f00:	000032a5 	.word	0x000032a5

00003f04 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
    3f04:	b590      	push	{r4, r7, lr}
    3f06:	b085      	sub	sp, #20
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
    3f0c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	2102      	movs	r1, #2
    3f12:	0018      	movs	r0, r3
    3f14:	4b21      	ldr	r3, [pc, #132]	; (3f9c <lsm6dso_fsm_data_rate_get+0x98>)
    3f16:	4798      	blx	r3
    3f18:	0003      	movs	r3, r0
    3f1a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    3f1c:	68fb      	ldr	r3, [r7, #12]
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d108      	bne.n	3f34 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    3f22:	2308      	movs	r3, #8
    3f24:	18fa      	adds	r2, r7, r3
    3f26:	6878      	ldr	r0, [r7, #4]
    3f28:	2301      	movs	r3, #1
    3f2a:	215f      	movs	r1, #95	; 0x5f
    3f2c:	4c1c      	ldr	r4, [pc, #112]	; (3fa0 <lsm6dso_fsm_data_rate_get+0x9c>)
    3f2e:	47a0      	blx	r4
    3f30:	0003      	movs	r3, r0
    3f32:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
    3f34:	68fb      	ldr	r3, [r7, #12]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d12b      	bne.n	3f92 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
    3f3a:	2308      	movs	r3, #8
    3f3c:	18fb      	adds	r3, r7, r3
    3f3e:	781b      	ldrb	r3, [r3, #0]
    3f40:	06db      	lsls	r3, r3, #27
    3f42:	0f9b      	lsrs	r3, r3, #30
    3f44:	b2db      	uxtb	r3, r3
    3f46:	2b01      	cmp	r3, #1
    3f48:	d00c      	beq.n	3f64 <lsm6dso_fsm_data_rate_get+0x60>
    3f4a:	dc02      	bgt.n	3f52 <lsm6dso_fsm_data_rate_get+0x4e>
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d005      	beq.n	3f5c <lsm6dso_fsm_data_rate_get+0x58>
    3f50:	e014      	b.n	3f7c <lsm6dso_fsm_data_rate_get+0x78>
    3f52:	2b02      	cmp	r3, #2
    3f54:	d00a      	beq.n	3f6c <lsm6dso_fsm_data_rate_get+0x68>
    3f56:	2b03      	cmp	r3, #3
    3f58:	d00c      	beq.n	3f74 <lsm6dso_fsm_data_rate_get+0x70>
    3f5a:	e00f      	b.n	3f7c <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
    3f5c:	683b      	ldr	r3, [r7, #0]
    3f5e:	2200      	movs	r2, #0
    3f60:	701a      	strb	r2, [r3, #0]
        break;
    3f62:	e00f      	b.n	3f84 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
    3f64:	683b      	ldr	r3, [r7, #0]
    3f66:	2201      	movs	r2, #1
    3f68:	701a      	strb	r2, [r3, #0]
        break;
    3f6a:	e00b      	b.n	3f84 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
    3f6c:	683b      	ldr	r3, [r7, #0]
    3f6e:	2202      	movs	r2, #2
    3f70:	701a      	strb	r2, [r3, #0]
        break;
    3f72:	e007      	b.n	3f84 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
    3f74:	683b      	ldr	r3, [r7, #0]
    3f76:	2203      	movs	r2, #3
    3f78:	701a      	strb	r2, [r3, #0]
        break;
    3f7a:	e003      	b.n	3f84 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
    3f7c:	683b      	ldr	r3, [r7, #0]
    3f7e:	2200      	movs	r2, #0
    3f80:	701a      	strb	r2, [r3, #0]
        break;
    3f82:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	2100      	movs	r1, #0
    3f88:	0018      	movs	r0, r3
    3f8a:	4b04      	ldr	r3, [pc, #16]	; (3f9c <lsm6dso_fsm_data_rate_get+0x98>)
    3f8c:	4798      	blx	r3
    3f8e:	0003      	movs	r3, r0
    3f90:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    3f92:	68fb      	ldr	r3, [r7, #12]
}
    3f94:	0018      	movs	r0, r3
    3f96:	46bd      	mov	sp, r7
    3f98:	b005      	add	sp, #20
    3f9a:	bd90      	pop	{r4, r7, pc}
    3f9c:	00003b91 	.word	0x00003b91
    3fa0:	000032a5 	.word	0x000032a5

00003fa4 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
    3fa4:	b580      	push	{r7, lr}
    3fa6:	b084      	sub	sp, #16
    3fa8:	af00      	add	r7, sp, #0
    3faa:	60f8      	str	r0, [r7, #12]
    3fac:	0008      	movs	r0, r1
    3fae:	607a      	str	r2, [r7, #4]
    3fb0:	0019      	movs	r1, r3
    3fb2:	230b      	movs	r3, #11
    3fb4:	18fb      	adds	r3, r7, r3
    3fb6:	1c02      	adds	r2, r0, #0
    3fb8:	701a      	strb	r2, [r3, #0]
    3fba:	2308      	movs	r3, #8
    3fbc:	18fb      	adds	r3, r7, r3
    3fbe:	1c0a      	adds	r2, r1, #0
    3fc0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
    3fc2:	2300      	movs	r3, #0

}
    3fc4:	0018      	movs	r0, r3
    3fc6:	46bd      	mov	sp, r7
    3fc8:	b004      	add	sp, #16
    3fca:	bd80      	pop	{r7, pc}

00003fcc <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    3fcc:	b580      	push	{r7, lr}
    3fce:	b084      	sub	sp, #16
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	60f8      	str	r0, [r7, #12]
    3fd4:	0008      	movs	r0, r1
    3fd6:	607a      	str	r2, [r7, #4]
    3fd8:	0019      	movs	r1, r3
    3fda:	230b      	movs	r3, #11
    3fdc:	18fb      	adds	r3, r7, r3
    3fde:	1c02      	adds	r2, r0, #0
    3fe0:	701a      	strb	r2, [r3, #0]
    3fe2:	2308      	movs	r3, #8
    3fe4:	18fb      	adds	r3, r7, r3
    3fe6:	1c0a      	adds	r2, r1, #0
    3fe8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
    3fea:	2300      	movs	r3, #0


}
    3fec:	0018      	movs	r0, r3
    3fee:	46bd      	mov	sp, r7
    3ff0:	b004      	add	sp, #16
    3ff2:	bd80      	pop	{r7, pc}

00003ff4 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
    3ff4:	b580      	push	{r7, lr}
    3ff6:	af00      	add	r7, sp, #0
return &dev_ctx;
    3ff8:	4b01      	ldr	r3, [pc, #4]	; (4000 <GetImuStruct+0xc>)
}
    3ffa:	0018      	movs	r0, r3
    3ffc:	46bd      	mov	sp, r7
    3ffe:	bd80      	pop	{r7, pc}
    4000:	20000014 	.word	0x20000014

00004004 <InitImu>:



int32_t InitImu(void)
{
    4004:	b580      	push	{r7, lr}
    4006:	b082      	sub	sp, #8
    4008:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
    400a:	2300      	movs	r3, #0
    400c:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
    400e:	4b23      	ldr	r3, [pc, #140]	; (409c <InitImu+0x98>)
    4010:	2101      	movs	r1, #1
    4012:	0018      	movs	r0, r3
    4014:	4b22      	ldr	r3, [pc, #136]	; (40a0 <InitImu+0x9c>)
    4016:	4798      	blx	r3
    4018:	0003      	movs	r3, r0
    401a:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
    401c:	1cfa      	adds	r2, r7, #3
    401e:	4b1f      	ldr	r3, [pc, #124]	; (409c <InitImu+0x98>)
    4020:	0011      	movs	r1, r2
    4022:	0018      	movs	r0, r3
    4024:	4b1f      	ldr	r3, [pc, #124]	; (40a4 <InitImu+0xa0>)
    4026:	4798      	blx	r3
    4028:	0002      	movs	r2, r0
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	4313      	orrs	r3, r2
    402e:	607b      	str	r3, [r7, #4]
  } while (rst);
    4030:	1cfb      	adds	r3, r7, #3
    4032:	781b      	ldrb	r3, [r3, #0]
    4034:	2b00      	cmp	r3, #0
    4036:	d1f1      	bne.n	401c <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    4038:	4b18      	ldr	r3, [pc, #96]	; (409c <InitImu+0x98>)
    403a:	2180      	movs	r1, #128	; 0x80
    403c:	0018      	movs	r0, r3
    403e:	4b1a      	ldr	r3, [pc, #104]	; (40a8 <InitImu+0xa4>)
    4040:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    4042:	4b16      	ldr	r3, [pc, #88]	; (409c <InitImu+0x98>)
    4044:	2101      	movs	r1, #1
    4046:	0018      	movs	r0, r3
    4048:	4b18      	ldr	r3, [pc, #96]	; (40ac <InitImu+0xa8>)
    404a:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    404c:	4b13      	ldr	r3, [pc, #76]	; (409c <InitImu+0x98>)
    404e:	2100      	movs	r1, #0
    4050:	0018      	movs	r0, r3
    4052:	4b17      	ldr	r3, [pc, #92]	; (40b0 <InitImu+0xac>)
    4054:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
    4056:	4b11      	ldr	r3, [pc, #68]	; (409c <InitImu+0x98>)
    4058:	2101      	movs	r1, #1
    405a:	0018      	movs	r0, r3
    405c:	4b15      	ldr	r3, [pc, #84]	; (40b4 <InitImu+0xb0>)
    405e:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
    4060:	4b0e      	ldr	r3, [pc, #56]	; (409c <InitImu+0x98>)
    4062:	2101      	movs	r1, #1
    4064:	0018      	movs	r0, r3
    4066:	4b14      	ldr	r3, [pc, #80]	; (40b8 <InitImu+0xb4>)
    4068:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    406a:	4b0c      	ldr	r3, [pc, #48]	; (409c <InitImu+0x98>)
    406c:	2100      	movs	r1, #0
    406e:	0018      	movs	r0, r3
    4070:	4b12      	ldr	r3, [pc, #72]	; (40bc <InitImu+0xb8>)
    4072:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    4074:	4b09      	ldr	r3, [pc, #36]	; (409c <InitImu+0x98>)
    4076:	2106      	movs	r1, #6
    4078:	0018      	movs	r0, r3
    407a:	4b11      	ldr	r3, [pc, #68]	; (40c0 <InitImu+0xbc>)
    407c:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    407e:	4b07      	ldr	r3, [pc, #28]	; (409c <InitImu+0x98>)
    4080:	2104      	movs	r1, #4
    4082:	0018      	movs	r0, r3
    4084:	4b0f      	ldr	r3, [pc, #60]	; (40c4 <InitImu+0xc0>)
    4086:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    4088:	4b04      	ldr	r3, [pc, #16]	; (409c <InitImu+0x98>)
    408a:	2101      	movs	r1, #1
    408c:	0018      	movs	r0, r3
    408e:	4b0e      	ldr	r3, [pc, #56]	; (40c8 <InitImu+0xc4>)
    4090:	4798      	blx	r3

  return error;
    4092:	687b      	ldr	r3, [r7, #4]
}
    4094:	0018      	movs	r0, r3
    4096:	46bd      	mov	sp, r7
    4098:	b002      	add	sp, #8
    409a:	bd80      	pop	{r7, pc}
    409c:	20000014 	.word	0x20000014
    40a0:	00003c21 	.word	0x00003c21
    40a4:	00003c8d 	.word	0x00003c8d
    40a8:	00003ded 	.word	0x00003ded
    40ac:	000039c9 	.word	0x000039c9
    40b0:	00003a35 	.word	0x00003a35
    40b4:	000033d5 	.word	0x000033d5
    40b8:	00003705 	.word	0x00003705
    40bc:	00003369 	.word	0x00003369
    40c0:	00003699 	.word	0x00003699
    40c4:	00003d35 	.word	0x00003d35
    40c8:	00003cc9 	.word	0x00003cc9

000040cc <reg_write>:
uint8_t msgOut[64];
I2C_Data SEN_Data; 

//write the data to the reg
static int32_t reg_write(uint8_t reg, uint8_t *bufp,uint16_t len)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b084      	sub	sp, #16
    40d0:	af00      	add	r7, sp, #0
    40d2:	6039      	str	r1, [r7, #0]
    40d4:	0011      	movs	r1, r2
    40d6:	1dfb      	adds	r3, r7, #7
    40d8:	1c02      	adds	r2, r0, #0
    40da:	701a      	strb	r2, [r3, #0]
    40dc:	1d3b      	adds	r3, r7, #4
    40de:	1c0a      	adds	r2, r1, #0
    40e0:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
    40e2:	2300      	movs	r3, #0
    40e4:	60bb      	str	r3, [r7, #8]
	msgOut[0] = reg;
    40e6:	4b17      	ldr	r3, [pc, #92]	; (4144 <reg_write+0x78>)
    40e8:	1dfa      	adds	r2, r7, #7
    40ea:	7812      	ldrb	r2, [r2, #0]
    40ec:	701a      	strb	r2, [r3, #0]
	
	for(int i = 0; i < len; i++){
    40ee:	2300      	movs	r3, #0
    40f0:	60fb      	str	r3, [r7, #12]
    40f2:	e00a      	b.n	410a <reg_write+0x3e>
		msgOut[i+1] = bufp[i];
    40f4:	68fb      	ldr	r3, [r7, #12]
    40f6:	3301      	adds	r3, #1
    40f8:	68fa      	ldr	r2, [r7, #12]
    40fa:	6839      	ldr	r1, [r7, #0]
    40fc:	188a      	adds	r2, r1, r2
    40fe:	7811      	ldrb	r1, [r2, #0]
    4100:	4a10      	ldr	r2, [pc, #64]	; (4144 <reg_write+0x78>)
    4102:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < len; i++){
    4104:	68fb      	ldr	r3, [r7, #12]
    4106:	3301      	adds	r3, #1
    4108:	60fb      	str	r3, [r7, #12]
    410a:	1d3b      	adds	r3, r7, #4
    410c:	881a      	ldrh	r2, [r3, #0]
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	429a      	cmp	r2, r3
    4112:	dcef      	bgt.n	40f4 <reg_write+0x28>
	}
	
	SEN_Data.address = ADC_SLAVE_ADDR;
    4114:	4b0c      	ldr	r3, [pc, #48]	; (4148 <reg_write+0x7c>)
    4116:	222a      	movs	r2, #42	; 0x2a
    4118:	701a      	strb	r2, [r3, #0]
	SEN_Data.msgOut = &msgOut;
    411a:	4b0b      	ldr	r3, [pc, #44]	; (4148 <reg_write+0x7c>)
    411c:	4a09      	ldr	r2, [pc, #36]	; (4144 <reg_write+0x78>)
    411e:	605a      	str	r2, [r3, #4]
	SEN_Data.lenOut = len + 1;
    4120:	1d3b      	adds	r3, r7, #4
    4122:	881b      	ldrh	r3, [r3, #0]
    4124:	3301      	adds	r3, #1
    4126:	b29a      	uxth	r2, r3
    4128:	4b07      	ldr	r3, [pc, #28]	; (4148 <reg_write+0x7c>)
    412a:	81da      	strh	r2, [r3, #14]
	
	error = I2cWriteDataWait(&SEN_Data,100);
    412c:	4b06      	ldr	r3, [pc, #24]	; (4148 <reg_write+0x7c>)
    412e:	2164      	movs	r1, #100	; 0x64
    4130:	0018      	movs	r0, r3
    4132:	4b06      	ldr	r3, [pc, #24]	; (414c <reg_write+0x80>)
    4134:	4798      	blx	r3
    4136:	0003      	movs	r3, r0
    4138:	60bb      	str	r3, [r7, #8]
	return error;
    413a:	68bb      	ldr	r3, [r7, #8]
}
    413c:	0018      	movs	r0, r3
    413e:	46bd      	mov	sp, r7
    4140:	b004      	add	sp, #16
    4142:	bd80      	pop	{r7, pc}
    4144:	200044a4 	.word	0x200044a4
    4148:	20004494 	.word	0x20004494
    414c:	000030b5 	.word	0x000030b5

00004150 <reg_read>:

//read the data inside regs
static  int32_t reg_read(uint8_t reg, uint8_t *bufp, uint16_t len)
{
    4150:	b580      	push	{r7, lr}
    4152:	b084      	sub	sp, #16
    4154:	af00      	add	r7, sp, #0
    4156:	6039      	str	r1, [r7, #0]
    4158:	0011      	movs	r1, r2
    415a:	1dfb      	adds	r3, r7, #7
    415c:	1c02      	adds	r2, r0, #0
    415e:	701a      	strb	r2, [r3, #0]
    4160:	1d3b      	adds	r3, r7, #4
    4162:	1c0a      	adds	r2, r1, #0
    4164:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
    4166:	2300      	movs	r3, #0
    4168:	60fb      	str	r3, [r7, #12]
	
	SEN_Data.address = ADC_SLAVE_ADDR;
    416a:	4b10      	ldr	r3, [pc, #64]	; (41ac <reg_read+0x5c>)
    416c:	222a      	movs	r2, #42	; 0x2a
    416e:	701a      	strb	r2, [r3, #0]
	SEN_Data.msgIn = bufp;
    4170:	4b0e      	ldr	r3, [pc, #56]	; (41ac <reg_read+0x5c>)
    4172:	683a      	ldr	r2, [r7, #0]
    4174:	609a      	str	r2, [r3, #8]
	SEN_Data.lenIn = len;
    4176:	4b0d      	ldr	r3, [pc, #52]	; (41ac <reg_read+0x5c>)
    4178:	1d3a      	adds	r2, r7, #4
    417a:	8812      	ldrh	r2, [r2, #0]
    417c:	819a      	strh	r2, [r3, #12]

	msgOut[0] = reg;
    417e:	4b0c      	ldr	r3, [pc, #48]	; (41b0 <reg_read+0x60>)
    4180:	1dfa      	adds	r2, r7, #7
    4182:	7812      	ldrb	r2, [r2, #0]
    4184:	701a      	strb	r2, [r3, #0]
	SEN_Data.lenOut = 1;
    4186:	4b09      	ldr	r3, [pc, #36]	; (41ac <reg_read+0x5c>)
    4188:	2201      	movs	r2, #1
    418a:	81da      	strh	r2, [r3, #14]
	SEN_Data.msgOut = &msgOut;
    418c:	4b07      	ldr	r3, [pc, #28]	; (41ac <reg_read+0x5c>)
    418e:	4a08      	ldr	r2, [pc, #32]	; (41b0 <reg_read+0x60>)
    4190:	605a      	str	r2, [r3, #4]

	error = I2cReadDataWait(&SEN_Data,5 ,100);
    4192:	4b06      	ldr	r3, [pc, #24]	; (41ac <reg_read+0x5c>)
    4194:	2264      	movs	r2, #100	; 0x64
    4196:	2105      	movs	r1, #5
    4198:	0018      	movs	r0, r3
    419a:	4b06      	ldr	r3, [pc, #24]	; (41b4 <reg_read+0x64>)
    419c:	4798      	blx	r3
    419e:	0003      	movs	r3, r0
    41a0:	60fb      	str	r3, [r7, #12]
	return error;
    41a2:	68fb      	ldr	r3, [r7, #12]
}
    41a4:	0018      	movs	r0, r3
    41a6:	46bd      	mov	sp, r7
    41a8:	b004      	add	sp, #16
    41aa:	bd80      	pop	{r7, pc}
    41ac:	20004494 	.word	0x20004494
    41b0:	200044a4 	.word	0x200044a4
    41b4:	0000318d 	.word	0x0000318d

000041b8 <read_a_reg>:

//read data from a single reg
uint8_t read_a_reg(uint8_t u8RegAddr)
{
    41b8:	b580      	push	{r7, lr}
    41ba:	b084      	sub	sp, #16
    41bc:	af00      	add	r7, sp, #0
    41be:	0002      	movs	r2, r0
    41c0:	1dfb      	adds	r3, r7, #7
    41c2:	701a      	strb	r2, [r3, #0]
	static uint8_t read_bytes;
	int32_t err= reg_read(u8RegAddr, &read_bytes,1);
    41c4:	4907      	ldr	r1, [pc, #28]	; (41e4 <read_a_reg+0x2c>)
    41c6:	1dfb      	adds	r3, r7, #7
    41c8:	781b      	ldrb	r3, [r3, #0]
    41ca:	2201      	movs	r2, #1
    41cc:	0018      	movs	r0, r3
    41ce:	4b06      	ldr	r3, [pc, #24]	; (41e8 <read_a_reg+0x30>)
    41d0:	4798      	blx	r3
    41d2:	0003      	movs	r3, r0
    41d4:	60fb      	str	r3, [r7, #12]
	return read_bytes;
    41d6:	4b03      	ldr	r3, [pc, #12]	; (41e4 <read_a_reg+0x2c>)
    41d8:	781b      	ldrb	r3, [r3, #0]
}
    41da:	0018      	movs	r0, r3
    41dc:	46bd      	mov	sp, r7
    41de:	b004      	add	sp, #16
    41e0:	bd80      	pop	{r7, pc}
    41e2:	46c0      	nop			; (mov r8, r8)
    41e4:	20000640 	.word	0x20000640
    41e8:	00004151 	.word	0x00004151

000041ec <write_a_reg>:

//write data to a specific reg
uint8_t write_a_reg(uint8_t u8RegAddr, uint8_t data)
{
    41ec:	b580      	push	{r7, lr}
    41ee:	b084      	sub	sp, #16
    41f0:	af00      	add	r7, sp, #0
    41f2:	0002      	movs	r2, r0
    41f4:	1dfb      	adds	r3, r7, #7
    41f6:	701a      	strb	r2, [r3, #0]
    41f8:	1dbb      	adds	r3, r7, #6
    41fa:	1c0a      	adds	r2, r1, #0
    41fc:	701a      	strb	r2, [r3, #0]
	int32_t error=reg_write(u8RegAddr,&data,1);
    41fe:	1db9      	adds	r1, r7, #6
    4200:	1dfb      	adds	r3, r7, #7
    4202:	781b      	ldrb	r3, [r3, #0]
    4204:	2201      	movs	r2, #1
    4206:	0018      	movs	r0, r3
    4208:	4b04      	ldr	r3, [pc, #16]	; (421c <write_a_reg+0x30>)
    420a:	4798      	blx	r3
    420c:	0003      	movs	r3, r0
    420e:	60fb      	str	r3, [r7, #12]
	return error;
    4210:	68fb      	ldr	r3, [r7, #12]
    4212:	b2db      	uxtb	r3, r3
}
    4214:	0018      	movs	r0, r3
    4216:	46bd      	mov	sp, r7
    4218:	b004      	add	sp, #16
    421a:	bd80      	pop	{r7, pc}
    421c:	000040cd 	.word	0x000040cd

00004220 <NAU78_calibration>:

//calibration adc
static void NAU78_calibration(void)
{
    4220:	b590      	push	{r4, r7, lr}
    4222:	b083      	sub	sp, #12
    4224:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
    4226:	1dfb      	adds	r3, r7, #7
    4228:	2200      	movs	r2, #0
    422a:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = read_a_reg(CTRL2_ADDR);
    422c:	1dfc      	adds	r4, r7, #7
    422e:	2002      	movs	r0, #2
    4230:	4b21      	ldr	r3, [pc, #132]	; (42b8 <NAU78_calibration+0x98>)
    4232:	4798      	blx	r3
    4234:	0003      	movs	r3, r0
    4236:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
    4238:	1dfb      	adds	r3, r7, #7
    423a:	1dfa      	adds	r2, r7, #7
    423c:	7812      	ldrb	r2, [r2, #0]
    423e:	2107      	movs	r1, #7
    4240:	438a      	bics	r2, r1
    4242:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
    4244:	1dfb      	adds	r3, r7, #7
    4246:	1dfa      	adds	r2, r7, #7
    4248:	7812      	ldrb	r2, [r2, #0]
    424a:	701a      	strb	r2, [r3, #0]
		write_a_reg(CTRL2_ADDR, reg);
    424c:	1dfb      	adds	r3, r7, #7
    424e:	781b      	ldrb	r3, [r3, #0]
    4250:	0019      	movs	r1, r3
    4252:	2002      	movs	r0, #2
    4254:	4b19      	ldr	r3, [pc, #100]	; (42bc <NAU78_calibration+0x9c>)
    4256:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
    4258:	1dfb      	adds	r3, r7, #7
    425a:	1dfa      	adds	r2, r7, #7
    425c:	7812      	ldrb	r2, [r2, #0]
    425e:	2104      	movs	r1, #4
    4260:	430a      	orrs	r2, r1
    4262:	701a      	strb	r2, [r3, #0]
		write_a_reg(CTRL2_ADDR, reg);
    4264:	1dfb      	adds	r3, r7, #7
    4266:	781b      	ldrb	r3, [r3, #0]
    4268:	0019      	movs	r1, r3
    426a:	2002      	movs	r0, #2
    426c:	4b13      	ldr	r3, [pc, #76]	; (42bc <NAU78_calibration+0x9c>)
    426e:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
    4270:	2032      	movs	r0, #50	; 0x32
    4272:	4b13      	ldr	r3, [pc, #76]	; (42c0 <NAU78_calibration+0xa0>)
    4274:	4798      	blx	r3
			/* Read calibration result */
			reg = read_a_reg(CTRL2_ADDR);
    4276:	1dfc      	adds	r4, r7, #7
    4278:	2002      	movs	r0, #2
    427a:	4b0f      	ldr	r3, [pc, #60]	; (42b8 <NAU78_calibration+0x98>)
    427c:	4798      	blx	r3
    427e:	0003      	movs	r3, r0
    4280:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
    4282:	1dfb      	adds	r3, r7, #7
    4284:	781b      	ldrb	r3, [r3, #0]
    4286:	2204      	movs	r2, #4
    4288:	4013      	ands	r3, r2
    428a:	d000      	beq.n	428e <NAU78_calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
    428c:	e7f0      	b.n	4270 <NAU78_calibration+0x50>
			break;
    428e:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
    4290:	1dfb      	adds	r3, r7, #7
    4292:	1dfa      	adds	r2, r7, #7
    4294:	7812      	ldrb	r2, [r2, #0]
    4296:	2108      	movs	r1, #8
    4298:	400a      	ands	r2, r1
    429a:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
    429c:	1dfb      	adds	r3, r7, #7
    429e:	781b      	ldrb	r3, [r3, #0]
    42a0:	2208      	movs	r2, #8
    42a2:	4013      	ands	r3, r2
    42a4:	d000      	beq.n	42a8 <NAU78_calibration+0x88>
		reg = read_a_reg(CTRL2_ADDR);
    42a6:	e7c1      	b.n	422c <NAU78_calibration+0xc>
		break;
    42a8:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
    42aa:	2001      	movs	r0, #1
    42ac:	4b04      	ldr	r3, [pc, #16]	; (42c0 <NAU78_calibration+0xa0>)
    42ae:	4798      	blx	r3

}
    42b0:	46c0      	nop			; (mov r8, r8)
    42b2:	46bd      	mov	sp, r7
    42b4:	b003      	add	sp, #12
    42b6:	bd90      	pop	{r4, r7, pc}
    42b8:	000041b9 	.word	0x000041b9
    42bc:	000041ed 	.word	0x000041ed
    42c0:	0000f3c1 	.word	0x0000f3c1

000042c4 <NAU78_init>:

//initialize ADC
void NAU78_init(void)
{
    42c4:	b580      	push	{r7, lr}
    42c6:	b082      	sub	sp, #8
    42c8:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
    42ca:	1dfb      	adds	r3, r7, #7
    42cc:	2200      	movs	r2, #0
    42ce:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
    42d0:	1dfb      	adds	r3, r7, #7
    42d2:	2201      	movs	r2, #1
    42d4:	701a      	strb	r2, [r3, #0]
	write_a_reg(PU_CTRL_ADDR, reg);
    42d6:	1dfb      	adds	r3, r7, #7
    42d8:	781b      	ldrb	r3, [r3, #0]
    42da:	0019      	movs	r1, r3
    42dc:	2000      	movs	r0, #0
    42de:	4b1d      	ldr	r3, [pc, #116]	; (4354 <NAU78_init+0x90>)
    42e0:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
    42e2:	2001      	movs	r0, #1
    42e4:	4b1c      	ldr	r3, [pc, #112]	; (4358 <NAU78_init+0x94>)
    42e6:	4798      	blx	r3

	reg =  0x02 ;                  /* Enter Noraml mode */
    42e8:	1dfb      	adds	r3, r7, #7
    42ea:	2202      	movs	r2, #2
    42ec:	701a      	strb	r2, [r3, #0]
	write_a_reg(PU_CTRL_ADDR, reg);
    42ee:	1dfb      	adds	r3, r7, #7
    42f0:	781b      	ldrb	r3, [r3, #0]
    42f2:	0019      	movs	r1, r3
    42f4:	2000      	movs	r0, #0
    42f6:	4b17      	ldr	r3, [pc, #92]	; (4354 <NAU78_init+0x90>)
    42f8:	4798      	blx	r3
	delay_ms(50);         /* Wait 50 ms */
    42fa:	2032      	movs	r0, #50	; 0x32
    42fc:	4b16      	ldr	r3, [pc, #88]	; (4358 <NAU78_init+0x94>)
    42fe:	4798      	blx	r3

	reg=0x27;
    4300:	1dfb      	adds	r3, r7, #7
    4302:	2227      	movs	r2, #39	; 0x27
    4304:	701a      	strb	r2, [r3, #0]
	write_a_reg(CTRL1_ADDR, reg);
    4306:	1dfb      	adds	r3, r7, #7
    4308:	781b      	ldrb	r3, [r3, #0]
    430a:	0019      	movs	r1, r3
    430c:	2001      	movs	r0, #1
    430e:	4b11      	ldr	r3, [pc, #68]	; (4354 <NAU78_init+0x90>)
    4310:	4798      	blx	r3
	delay_ms(1);
    4312:	2001      	movs	r0, #1
    4314:	4b10      	ldr	r3, [pc, #64]	; (4358 <NAU78_init+0x94>)
    4316:	4798      	blx	r3
	
	reg=0x86;
    4318:	1dfb      	adds	r3, r7, #7
    431a:	2286      	movs	r2, #134	; 0x86
    431c:	701a      	strb	r2, [r3, #0]
	write_a_reg(PU_CTRL_ADDR, reg);
    431e:	1dfb      	adds	r3, r7, #7
    4320:	781b      	ldrb	r3, [r3, #0]
    4322:	0019      	movs	r1, r3
    4324:	2000      	movs	r0, #0
    4326:	4b0b      	ldr	r3, [pc, #44]	; (4354 <NAU78_init+0x90>)
    4328:	4798      	blx	r3
	delay_ms(1);
    432a:	2001      	movs	r0, #1
    432c:	4b0a      	ldr	r3, [pc, #40]	; (4358 <NAU78_init+0x94>)
    432e:	4798      	blx	r3
	
	reg=0x30;
    4330:	1dfb      	adds	r3, r7, #7
    4332:	2230      	movs	r2, #48	; 0x30
    4334:	701a      	strb	r2, [r3, #0]
	write_a_reg(OTP_B1_ADDR , reg);
    4336:	1dfb      	adds	r3, r7, #7
    4338:	781b      	ldrb	r3, [r3, #0]
    433a:	0019      	movs	r1, r3
    433c:	2015      	movs	r0, #21
    433e:	4b05      	ldr	r3, [pc, #20]	; (4354 <NAU78_init+0x90>)
    4340:	4798      	blx	r3
	delay_ms(1);
    4342:	2001      	movs	r0, #1
    4344:	4b04      	ldr	r3, [pc, #16]	; (4358 <NAU78_init+0x94>)
    4346:	4798      	blx	r3
   

	/* Calibration */
	NAU78_calibration();
    4348:	4b04      	ldr	r3, [pc, #16]	; (435c <NAU78_init+0x98>)
    434a:	4798      	blx	r3
}
    434c:	46c0      	nop			; (mov r8, r8)
    434e:	46bd      	mov	sp, r7
    4350:	b002      	add	sp, #8
    4352:	bd80      	pop	{r7, pc}
    4354:	000041ed 	.word	0x000041ed
    4358:	0000f3c1 	.word	0x0000f3c1
    435c:	00004221 	.word	0x00004221

00004360 <cycle_ready>:

//set cycle start = 1 to enable the connection
static void cycle_ready(void)
{
    4360:	b590      	push	{r4, r7, lr}
    4362:	b083      	sub	sp, #12
    4364:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
    4366:	1dfb      	adds	r3, r7, #7
    4368:	2200      	movs	r2, #0
    436a:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = read_a_reg(PU_CTRL_ADDR);
    436c:	1dfc      	adds	r4, r7, #7
    436e:	2000      	movs	r0, #0
    4370:	4b09      	ldr	r3, [pc, #36]	; (4398 <cycle_ready+0x38>)
    4372:	4798      	blx	r3
    4374:	0003      	movs	r3, r0
    4376:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
    4378:	1dfb      	adds	r3, r7, #7
    437a:	1dfa      	adds	r2, r7, #7
    437c:	7812      	ldrb	r2, [r2, #0]
    437e:	2110      	movs	r1, #16
    4380:	430a      	orrs	r2, r1
    4382:	701a      	strb	r2, [r3, #0]
	write_a_reg(PU_CTRL_ADDR, reg);
    4384:	1dfb      	adds	r3, r7, #7
    4386:	781b      	ldrb	r3, [r3, #0]
    4388:	0019      	movs	r1, r3
    438a:	2000      	movs	r0, #0
    438c:	4b03      	ldr	r3, [pc, #12]	; (439c <cycle_ready+0x3c>)
    438e:	4798      	blx	r3
}
    4390:	46c0      	nop			; (mov r8, r8)
    4392:	46bd      	mov	sp, r7
    4394:	b003      	add	sp, #12
    4396:	bd90      	pop	{r4, r7, pc}
    4398:	000041b9 	.word	0x000041b9
    439c:	000041ed 	.word	0x000041ed

000043a0 <get_raw_data>:

//read the raw data of weight
int32_t get_raw_data(void)
{
    43a0:	b580      	push	{r7, lr}
    43a2:	b084      	sub	sp, #16
    43a4:	af00      	add	r7, sp, #0
	int32_t temp1, temp2, temp3, raw_weight;
	temp1 = read_a_reg(CTRL2_ADDR);
    43a6:	2002      	movs	r0, #2
    43a8:	4b14      	ldr	r3, [pc, #80]	; (43fc <get_raw_data+0x5c>)
    43aa:	4798      	blx	r3
    43ac:	0003      	movs	r3, r0
    43ae:	60fb      	str	r3, [r7, #12]
	temp1 |= 0 << 7;
	write_a_reg(CTRL2_ADDR, temp1);
    43b0:	68fb      	ldr	r3, [r7, #12]
    43b2:	b2db      	uxtb	r3, r3
    43b4:	0019      	movs	r1, r3
    43b6:	2002      	movs	r0, #2
    43b8:	4b11      	ldr	r3, [pc, #68]	; (4400 <get_raw_data+0x60>)
    43ba:	4798      	blx	r3
	vTaskDelay(10);
    43bc:	200a      	movs	r0, #10
    43be:	4b11      	ldr	r3, [pc, #68]	; (4404 <get_raw_data+0x64>)
    43c0:	4798      	blx	r3

	temp1 = read_a_reg(ADCO_B2_ADDR );
    43c2:	2012      	movs	r0, #18
    43c4:	4b0d      	ldr	r3, [pc, #52]	; (43fc <get_raw_data+0x5c>)
    43c6:	4798      	blx	r3
    43c8:	0003      	movs	r3, r0
    43ca:	60fb      	str	r3, [r7, #12]
	temp2 = read_a_reg(ADCO_B1_ADDR );
    43cc:	2013      	movs	r0, #19
    43ce:	4b0b      	ldr	r3, [pc, #44]	; (43fc <get_raw_data+0x5c>)
    43d0:	4798      	blx	r3
    43d2:	0003      	movs	r3, r0
    43d4:	60bb      	str	r3, [r7, #8]
	temp3 = read_a_reg(ADCO_B0_ADDR );
    43d6:	2014      	movs	r0, #20
    43d8:	4b08      	ldr	r3, [pc, #32]	; (43fc <get_raw_data+0x5c>)
    43da:	4798      	blx	r3
    43dc:	0003      	movs	r3, r0
    43de:	607b      	str	r3, [r7, #4]

	raw_weight = temp1 << 16 | temp2 << 8 | temp3 << 0;
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	041a      	lsls	r2, r3, #16
    43e4:	68bb      	ldr	r3, [r7, #8]
    43e6:	021b      	lsls	r3, r3, #8
    43e8:	431a      	orrs	r2, r3
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	4313      	orrs	r3, r2
    43ee:	603b      	str	r3, [r7, #0]
	return  raw_weight;
    43f0:	683b      	ldr	r3, [r7, #0]
}
    43f2:	0018      	movs	r0, r3
    43f4:	46bd      	mov	sp, r7
    43f6:	b004      	add	sp, #16
    43f8:	bd80      	pop	{r7, pc}
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	000041b9 	.word	0x000041b9
    4400:	000041ed 	.word	0x000041ed
    4404:	0000b3b5 	.word	0x0000b3b5

00004408 <raw_data_to_weight>:

//calculate the raw data to real weight
float raw_data_to_weight(int raw_data){
    4408:	b5b0      	push	{r4, r5, r7, lr}
    440a:	b08a      	sub	sp, #40	; 0x28
    440c:	af00      	add	r7, sp, #0
    440e:	6078      	str	r0, [r7, #4]
	float adc_out = 00.00;
    4410:	2300      	movs	r3, #0
    4412:	617b      	str	r3, [r7, #20]
	float gain = 00.00;
    4414:	2300      	movs	r3, #0
    4416:	627b      	str	r3, [r7, #36]	; 0x24
	float offset = 00.00;
    4418:	2300      	movs	r3, #0
    441a:	623b      	str	r3, [r7, #32]
	uint8_t gain_reg[4];
	uint8_t offset_reg[3];

	gain_reg[0]=read_a_reg(GCAL1_B3_ADDR);
    441c:	2006      	movs	r0, #6
    441e:	4b69      	ldr	r3, [pc, #420]	; (45c4 <raw_data_to_weight+0x1bc>)
    4420:	4798      	blx	r3
    4422:	0003      	movs	r3, r0
    4424:	001a      	movs	r2, r3
    4426:	2310      	movs	r3, #16
    4428:	18fb      	adds	r3, r7, r3
    442a:	701a      	strb	r2, [r3, #0]
	gain_reg[1]=read_a_reg(GCAL1_B2_ADDR);
    442c:	2007      	movs	r0, #7
    442e:	4b65      	ldr	r3, [pc, #404]	; (45c4 <raw_data_to_weight+0x1bc>)
    4430:	4798      	blx	r3
    4432:	0003      	movs	r3, r0
    4434:	001a      	movs	r2, r3
    4436:	2310      	movs	r3, #16
    4438:	18fb      	adds	r3, r7, r3
    443a:	705a      	strb	r2, [r3, #1]
	gain_reg[2]=read_a_reg(GCAL1_B1_ADDR);
    443c:	2008      	movs	r0, #8
    443e:	4b61      	ldr	r3, [pc, #388]	; (45c4 <raw_data_to_weight+0x1bc>)
    4440:	4798      	blx	r3
    4442:	0003      	movs	r3, r0
    4444:	001a      	movs	r2, r3
    4446:	2310      	movs	r3, #16
    4448:	18fb      	adds	r3, r7, r3
    444a:	709a      	strb	r2, [r3, #2]
	gain_reg[3]=read_a_reg(GCAL1_B0_ADDR);
    444c:	2009      	movs	r0, #9
    444e:	4b5d      	ldr	r3, [pc, #372]	; (45c4 <raw_data_to_weight+0x1bc>)
    4450:	4798      	blx	r3
    4452:	0003      	movs	r3, r0
    4454:	001a      	movs	r2, r3
    4456:	2310      	movs	r3, #16
    4458:	18fb      	adds	r3, r7, r3
    445a:	70da      	strb	r2, [r3, #3]
	offset_reg[0]=read_a_reg(OCAL1_B2_ADDR);
    445c:	2003      	movs	r0, #3
    445e:	4b59      	ldr	r3, [pc, #356]	; (45c4 <raw_data_to_weight+0x1bc>)
    4460:	4798      	blx	r3
    4462:	0003      	movs	r3, r0
    4464:	001a      	movs	r2, r3
    4466:	230c      	movs	r3, #12
    4468:	18fb      	adds	r3, r7, r3
    446a:	701a      	strb	r2, [r3, #0]
	offset_reg[1]=read_a_reg(OCAL1_B1_ADDR);
    446c:	2004      	movs	r0, #4
    446e:	4b55      	ldr	r3, [pc, #340]	; (45c4 <raw_data_to_weight+0x1bc>)
    4470:	4798      	blx	r3
    4472:	0003      	movs	r3, r0
    4474:	001a      	movs	r2, r3
    4476:	230c      	movs	r3, #12
    4478:	18fb      	adds	r3, r7, r3
    447a:	705a      	strb	r2, [r3, #1]
	offset_reg[2]=read_a_reg(OCAL1_B0_ADDR);
    447c:	2005      	movs	r0, #5
    447e:	4b51      	ldr	r3, [pc, #324]	; (45c4 <raw_data_to_weight+0x1bc>)
    4480:	4798      	blx	r3
    4482:	0003      	movs	r3, r0
    4484:	001a      	movs	r2, r3
    4486:	230c      	movs	r3, #12
    4488:	18fb      	adds	r3, r7, r3
    448a:	709a      	strb	r2, [r3, #2]
	
	for(int i=31;i>=0;i--){
    448c:	231f      	movs	r3, #31
    448e:	61fb      	str	r3, [r7, #28]
    4490:	e02c      	b.n	44ec <raw_data_to_weight+0xe4>
		gain+=(float)(((gain_reg[3-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
    4492:	69fb      	ldr	r3, [r7, #28]
    4494:	2b00      	cmp	r3, #0
    4496:	da00      	bge.n	449a <raw_data_to_weight+0x92>
    4498:	3307      	adds	r3, #7
    449a:	10db      	asrs	r3, r3, #3
    449c:	425b      	negs	r3, r3
    449e:	3303      	adds	r3, #3
    44a0:	2210      	movs	r2, #16
    44a2:	18ba      	adds	r2, r7, r2
    44a4:	5cd3      	ldrb	r3, [r2, r3]
    44a6:	0019      	movs	r1, r3
    44a8:	69fb      	ldr	r3, [r7, #28]
    44aa:	4a47      	ldr	r2, [pc, #284]	; (45c8 <raw_data_to_weight+0x1c0>)
    44ac:	4013      	ands	r3, r2
    44ae:	d504      	bpl.n	44ba <raw_data_to_weight+0xb2>
    44b0:	3b01      	subs	r3, #1
    44b2:	2208      	movs	r2, #8
    44b4:	4252      	negs	r2, r2
    44b6:	4313      	orrs	r3, r2
    44b8:	3301      	adds	r3, #1
    44ba:	4119      	asrs	r1, r3
    44bc:	000b      	movs	r3, r1
    44be:	2201      	movs	r2, #1
    44c0:	4013      	ands	r3, r2
    44c2:	69fa      	ldr	r2, [r7, #28]
    44c4:	3a17      	subs	r2, #23
    44c6:	4941      	ldr	r1, [pc, #260]	; (45cc <raw_data_to_weight+0x1c4>)
    44c8:	434a      	muls	r2, r1
    44ca:	2102      	movs	r1, #2
    44cc:	4091      	lsls	r1, r2
    44ce:	000a      	movs	r2, r1
    44d0:	435a      	muls	r2, r3
    44d2:	4b3f      	ldr	r3, [pc, #252]	; (45d0 <raw_data_to_weight+0x1c8>)
    44d4:	0010      	movs	r0, r2
    44d6:	4798      	blx	r3
    44d8:	1c02      	adds	r2, r0, #0
    44da:	4b3e      	ldr	r3, [pc, #248]	; (45d4 <raw_data_to_weight+0x1cc>)
    44dc:	1c11      	adds	r1, r2, #0
    44de:	6a78      	ldr	r0, [r7, #36]	; 0x24
    44e0:	4798      	blx	r3
    44e2:	1c03      	adds	r3, r0, #0
    44e4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=31;i>=0;i--){
    44e6:	69fb      	ldr	r3, [r7, #28]
    44e8:	3b01      	subs	r3, #1
    44ea:	61fb      	str	r3, [r7, #28]
    44ec:	69fb      	ldr	r3, [r7, #28]
    44ee:	2b00      	cmp	r3, #0
    44f0:	dacf      	bge.n	4492 <raw_data_to_weight+0x8a>
	}
	for(int i=22;i>=0;i--){
    44f2:	2316      	movs	r3, #22
    44f4:	61bb      	str	r3, [r7, #24]
    44f6:	e02c      	b.n	4552 <raw_data_to_weight+0x14a>
		offset+=(float)(((offset_reg[2-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
    44f8:	69bb      	ldr	r3, [r7, #24]
    44fa:	2b00      	cmp	r3, #0
    44fc:	da00      	bge.n	4500 <raw_data_to_weight+0xf8>
    44fe:	3307      	adds	r3, #7
    4500:	10db      	asrs	r3, r3, #3
    4502:	425b      	negs	r3, r3
    4504:	3302      	adds	r3, #2
    4506:	220c      	movs	r2, #12
    4508:	18ba      	adds	r2, r7, r2
    450a:	5cd3      	ldrb	r3, [r2, r3]
    450c:	0019      	movs	r1, r3
    450e:	69bb      	ldr	r3, [r7, #24]
    4510:	4a2d      	ldr	r2, [pc, #180]	; (45c8 <raw_data_to_weight+0x1c0>)
    4512:	4013      	ands	r3, r2
    4514:	d504      	bpl.n	4520 <raw_data_to_weight+0x118>
    4516:	3b01      	subs	r3, #1
    4518:	2208      	movs	r2, #8
    451a:	4252      	negs	r2, r2
    451c:	4313      	orrs	r3, r2
    451e:	3301      	adds	r3, #1
    4520:	4119      	asrs	r1, r3
    4522:	000b      	movs	r3, r1
    4524:	2201      	movs	r2, #1
    4526:	4013      	ands	r3, r2
    4528:	69ba      	ldr	r2, [r7, #24]
    452a:	3a17      	subs	r2, #23
    452c:	4927      	ldr	r1, [pc, #156]	; (45cc <raw_data_to_weight+0x1c4>)
    452e:	434a      	muls	r2, r1
    4530:	2102      	movs	r1, #2
    4532:	4091      	lsls	r1, r2
    4534:	000a      	movs	r2, r1
    4536:	435a      	muls	r2, r3
    4538:	4b25      	ldr	r3, [pc, #148]	; (45d0 <raw_data_to_weight+0x1c8>)
    453a:	0010      	movs	r0, r2
    453c:	4798      	blx	r3
    453e:	1c02      	adds	r2, r0, #0
    4540:	4b24      	ldr	r3, [pc, #144]	; (45d4 <raw_data_to_weight+0x1cc>)
    4542:	1c11      	adds	r1, r2, #0
    4544:	6a38      	ldr	r0, [r7, #32]
    4546:	4798      	blx	r3
    4548:	1c03      	adds	r3, r0, #0
    454a:	623b      	str	r3, [r7, #32]
	for(int i=22;i>=0;i--){
    454c:	69bb      	ldr	r3, [r7, #24]
    454e:	3b01      	subs	r3, #1
    4550:	61bb      	str	r3, [r7, #24]
    4552:	69bb      	ldr	r3, [r7, #24]
    4554:	2b00      	cmp	r3, #0
    4556:	dacf      	bge.n	44f8 <raw_data_to_weight+0xf0>
	}
	offset*=(float)(1-(offset_reg[0]>>7)&0x01);
    4558:	230c      	movs	r3, #12
    455a:	18fb      	adds	r3, r7, r3
    455c:	781b      	ldrb	r3, [r3, #0]
    455e:	09db      	lsrs	r3, r3, #7
    4560:	b2db      	uxtb	r3, r3
    4562:	001a      	movs	r2, r3
    4564:	2301      	movs	r3, #1
    4566:	1a9b      	subs	r3, r3, r2
    4568:	2201      	movs	r2, #1
    456a:	401a      	ands	r2, r3
    456c:	4b18      	ldr	r3, [pc, #96]	; (45d0 <raw_data_to_weight+0x1c8>)
    456e:	0010      	movs	r0, r2
    4570:	4798      	blx	r3
    4572:	1c02      	adds	r2, r0, #0
    4574:	4b18      	ldr	r3, [pc, #96]	; (45d8 <raw_data_to_weight+0x1d0>)
    4576:	1c11      	adds	r1, r2, #0
    4578:	6a38      	ldr	r0, [r7, #32]
    457a:	4798      	blx	r3
    457c:	1c03      	adds	r3, r0, #0
    457e:	623b      	str	r3, [r7, #32]

	adc_out = (float)gain/10000*((float)raw_data-(float)offset/10000);
    4580:	4b16      	ldr	r3, [pc, #88]	; (45dc <raw_data_to_weight+0x1d4>)
    4582:	4917      	ldr	r1, [pc, #92]	; (45e0 <raw_data_to_weight+0x1d8>)
    4584:	6a78      	ldr	r0, [r7, #36]	; 0x24
    4586:	4798      	blx	r3
    4588:	1c03      	adds	r3, r0, #0
    458a:	1c1c      	adds	r4, r3, #0
    458c:	4b10      	ldr	r3, [pc, #64]	; (45d0 <raw_data_to_weight+0x1c8>)
    458e:	6878      	ldr	r0, [r7, #4]
    4590:	4798      	blx	r3
    4592:	1c05      	adds	r5, r0, #0
    4594:	4b11      	ldr	r3, [pc, #68]	; (45dc <raw_data_to_weight+0x1d4>)
    4596:	4912      	ldr	r1, [pc, #72]	; (45e0 <raw_data_to_weight+0x1d8>)
    4598:	6a38      	ldr	r0, [r7, #32]
    459a:	4798      	blx	r3
    459c:	1c03      	adds	r3, r0, #0
    459e:	1c1a      	adds	r2, r3, #0
    45a0:	4b10      	ldr	r3, [pc, #64]	; (45e4 <raw_data_to_weight+0x1dc>)
    45a2:	1c11      	adds	r1, r2, #0
    45a4:	1c28      	adds	r0, r5, #0
    45a6:	4798      	blx	r3
    45a8:	1c03      	adds	r3, r0, #0
    45aa:	1c1a      	adds	r2, r3, #0
    45ac:	4b0a      	ldr	r3, [pc, #40]	; (45d8 <raw_data_to_weight+0x1d0>)
    45ae:	1c11      	adds	r1, r2, #0
    45b0:	1c20      	adds	r0, r4, #0
    45b2:	4798      	blx	r3
    45b4:	1c03      	adds	r3, r0, #0
    45b6:	617b      	str	r3, [r7, #20]
	return adc_out;
    45b8:	697b      	ldr	r3, [r7, #20]
}
    45ba:	1c18      	adds	r0, r3, #0
    45bc:	46bd      	mov	sp, r7
    45be:	b00a      	add	sp, #40	; 0x28
    45c0:	bdb0      	pop	{r4, r5, r7, pc}
    45c2:	46c0      	nop			; (mov r8, r8)
    45c4:	000041b9 	.word	0x000041b9
    45c8:	80000007 	.word	0x80000007
    45cc:	00002710 	.word	0x00002710
    45d0:	00022bd9 	.word	0x00022bd9
    45d4:	0002206d 	.word	0x0002206d
    45d8:	00022621 	.word	0x00022621
    45dc:	00022391 	.word	0x00022391
    45e0:	461c4000 	.word	0x461c4000
    45e4:	00022861 	.word	0x00022861

000045e8 <get_weight>:
float get_weight(void)
{	
    45e8:	b580      	push	{r7, lr}
    45ea:	b082      	sub	sp, #8
    45ec:	af00      	add	r7, sp, #0
	I2cInitializeDriver();
    45ee:	4b0f      	ldr	r3, [pc, #60]	; (462c <get_weight+0x44>)
    45f0:	4798      	blx	r3
	NAU78_init();
    45f2:	4b0f      	ldr	r3, [pc, #60]	; (4630 <get_weight+0x48>)
    45f4:	4798      	blx	r3
	cycle_ready();
    45f6:	4b0f      	ldr	r3, [pc, #60]	; (4634 <get_weight+0x4c>)
    45f8:	4798      	blx	r3
	
	//read CR->until data ready
	while ((read_a_reg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
    45fa:	46c0      	nop			; (mov r8, r8)
    45fc:	2000      	movs	r0, #0
    45fe:	4b0e      	ldr	r3, [pc, #56]	; (4638 <get_weight+0x50>)
    4600:	4798      	blx	r3
    4602:	0003      	movs	r3, r0
    4604:	001a      	movs	r2, r3
    4606:	2320      	movs	r3, #32
    4608:	4013      	ands	r3, r2
    460a:	2b20      	cmp	r3, #32
    460c:	d1f6      	bne.n	45fc <get_weight+0x14>
	uint32_t raw_data = get_raw_data();
    460e:	4b0b      	ldr	r3, [pc, #44]	; (463c <get_weight+0x54>)
    4610:	4798      	blx	r3
    4612:	0003      	movs	r3, r0
    4614:	607b      	str	r3, [r7, #4]
	float w = raw_data_to_weight(raw_data);
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	0018      	movs	r0, r3
    461a:	4b09      	ldr	r3, [pc, #36]	; (4640 <get_weight+0x58>)
    461c:	4798      	blx	r3
    461e:	1c03      	adds	r3, r0, #0
    4620:	603b      	str	r3, [r7, #0]
	return w;
    4622:	683b      	ldr	r3, [r7, #0]
}
    4624:	1c18      	adds	r0, r3, #0
    4626:	46bd      	mov	sp, r7
    4628:	b002      	add	sp, #8
    462a:	bd80      	pop	{r7, pc}
    462c:	00002e89 	.word	0x00002e89
    4630:	000042c5 	.word	0x000042c5
    4634:	00004361 	.word	0x00004361
    4638:	000041b9 	.word	0x000041b9
    463c:	000043a1 	.word	0x000043a1
    4640:	00004409 	.word	0x00004409

00004644 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
    4644:	b580      	push	{r7, lr}
    4646:	b082      	sub	sp, #8
    4648:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
    464a:	4b38      	ldr	r3, [pc, #224]	; (472c <InitializeSeesaw+0xe8>)
    464c:	222e      	movs	r2, #46	; 0x2e
    464e:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
    4650:	4b36      	ldr	r3, [pc, #216]	; (472c <InitializeSeesaw+0xe8>)
    4652:	4a37      	ldr	r2, [pc, #220]	; (4730 <InitializeSeesaw+0xec>)
    4654:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
    4656:	4b35      	ldr	r3, [pc, #212]	; (472c <InitializeSeesaw+0xe8>)
    4658:	2202      	movs	r2, #2
    465a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
    465c:	4b33      	ldr	r3, [pc, #204]	; (472c <InitializeSeesaw+0xe8>)
    465e:	003a      	movs	r2, r7
    4660:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
    4662:	4b32      	ldr	r3, [pc, #200]	; (472c <InitializeSeesaw+0xe8>)
    4664:	2201      	movs	r2, #1
    4666:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
    4668:	4b30      	ldr	r3, [pc, #192]	; (472c <InitializeSeesaw+0xe8>)
    466a:	2264      	movs	r2, #100	; 0x64
    466c:	2100      	movs	r1, #0
    466e:	0018      	movs	r0, r3
    4670:	4b30      	ldr	r3, [pc, #192]	; (4734 <InitializeSeesaw+0xf0>)
    4672:	4798      	blx	r3
    4674:	0003      	movs	r3, r0
    4676:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	2b00      	cmp	r3, #0
    467c:	d004      	beq.n	4688 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
    467e:	4b2e      	ldr	r3, [pc, #184]	; (4738 <InitializeSeesaw+0xf4>)
    4680:	0018      	movs	r0, r3
    4682:	4b2e      	ldr	r3, [pc, #184]	; (473c <InitializeSeesaw+0xf8>)
    4684:	4798      	blx	r3
    4686:	e00c      	b.n	46a2 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
    4688:	003b      	movs	r3, r7
    468a:	781b      	ldrb	r3, [r3, #0]
    468c:	2b55      	cmp	r3, #85	; 0x55
    468e:	d004      	beq.n	469a <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
    4690:	4b2b      	ldr	r3, [pc, #172]	; (4740 <InitializeSeesaw+0xfc>)
    4692:	0018      	movs	r0, r3
    4694:	4b29      	ldr	r3, [pc, #164]	; (473c <InitializeSeesaw+0xf8>)
    4696:	4798      	blx	r3
    4698:	e003      	b.n	46a2 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
    469a:	4b2a      	ldr	r3, [pc, #168]	; (4744 <InitializeSeesaw+0x100>)
    469c:	0018      	movs	r0, r3
    469e:	4b27      	ldr	r3, [pc, #156]	; (473c <InitializeSeesaw+0xf8>)
    46a0:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
    46a2:	4b22      	ldr	r3, [pc, #136]	; (472c <InitializeSeesaw+0xe8>)
    46a4:	4a28      	ldr	r2, [pc, #160]	; (4748 <InitializeSeesaw+0x104>)
    46a6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
    46a8:	4b20      	ldr	r3, [pc, #128]	; (472c <InitializeSeesaw+0xe8>)
    46aa:	2203      	movs	r2, #3
    46ac:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
    46ae:	4b1f      	ldr	r3, [pc, #124]	; (472c <InitializeSeesaw+0xe8>)
    46b0:	2164      	movs	r1, #100	; 0x64
    46b2:	0018      	movs	r0, r3
    46b4:	4b25      	ldr	r3, [pc, #148]	; (474c <InitializeSeesaw+0x108>)
    46b6:	4798      	blx	r3
    46b8:	0003      	movs	r3, r0
    46ba:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	2b00      	cmp	r3, #0
    46c0:	d003      	beq.n	46ca <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
    46c2:	4b23      	ldr	r3, [pc, #140]	; (4750 <InitializeSeesaw+0x10c>)
    46c4:	0018      	movs	r0, r3
    46c6:	4b1d      	ldr	r3, [pc, #116]	; (473c <InitializeSeesaw+0xf8>)
    46c8:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
    46ca:	4b18      	ldr	r3, [pc, #96]	; (472c <InitializeSeesaw+0xe8>)
    46cc:	4a21      	ldr	r2, [pc, #132]	; (4754 <InitializeSeesaw+0x110>)
    46ce:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
    46d0:	4b16      	ldr	r3, [pc, #88]	; (472c <InitializeSeesaw+0xe8>)
    46d2:	2203      	movs	r2, #3
    46d4:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
    46d6:	4b15      	ldr	r3, [pc, #84]	; (472c <InitializeSeesaw+0xe8>)
    46d8:	2164      	movs	r1, #100	; 0x64
    46da:	0018      	movs	r0, r3
    46dc:	4b1b      	ldr	r3, [pc, #108]	; (474c <InitializeSeesaw+0x108>)
    46de:	4798      	blx	r3
    46e0:	0003      	movs	r3, r0
    46e2:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d003      	beq.n	46f2 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
    46ea:	4b1b      	ldr	r3, [pc, #108]	; (4758 <InitializeSeesaw+0x114>)
    46ec:	0018      	movs	r0, r3
    46ee:	4b13      	ldr	r3, [pc, #76]	; (473c <InitializeSeesaw+0xf8>)
    46f0:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
    46f2:	4b0e      	ldr	r3, [pc, #56]	; (472c <InitializeSeesaw+0xe8>)
    46f4:	4a19      	ldr	r2, [pc, #100]	; (475c <InitializeSeesaw+0x118>)
    46f6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
    46f8:	4b0c      	ldr	r3, [pc, #48]	; (472c <InitializeSeesaw+0xe8>)
    46fa:	2204      	movs	r2, #4
    46fc:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
    46fe:	4b0b      	ldr	r3, [pc, #44]	; (472c <InitializeSeesaw+0xe8>)
    4700:	2164      	movs	r1, #100	; 0x64
    4702:	0018      	movs	r0, r3
    4704:	4b11      	ldr	r3, [pc, #68]	; (474c <InitializeSeesaw+0x108>)
    4706:	4798      	blx	r3
    4708:	0003      	movs	r3, r0
    470a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	2b00      	cmp	r3, #0
    4710:	d003      	beq.n	471a <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
    4712:	4b13      	ldr	r3, [pc, #76]	; (4760 <InitializeSeesaw+0x11c>)
    4714:	0018      	movs	r0, r3
    4716:	4b09      	ldr	r3, [pc, #36]	; (473c <InitializeSeesaw+0xf8>)
    4718:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
    471a:	4b12      	ldr	r3, [pc, #72]	; (4764 <InitializeSeesaw+0x120>)
    471c:	4798      	blx	r3

    SeesawInitializeKeypad();
    471e:	4b12      	ldr	r3, [pc, #72]	; (4768 <InitializeSeesaw+0x124>)
    4720:	4798      	blx	r3
    return error;
    4722:	687b      	ldr	r3, [r7, #4]
}
    4724:	0018      	movs	r0, r3
    4726:	46bd      	mov	sp, r7
    4728:	b002      	add	sp, #8
    472a:	bd80      	pop	{r7, pc}
    472c:	200044e4 	.word	0x200044e4
    4730:	000260c0 	.word	0x000260c0
    4734:	0000318d 	.word	0x0000318d
    4738:	000260d8 	.word	0x000260d8
    473c:	0000d009 	.word	0x0000d009
    4740:	000260f8 	.word	0x000260f8
    4744:	00026104 	.word	0x00026104
    4748:	000260c4 	.word	0x000260c4
    474c:	000030b5 	.word	0x000030b5
    4750:	00026118 	.word	0x00026118
    4754:	000260c8 	.word	0x000260c8
    4758:	00026138 	.word	0x00026138
    475c:	000260cc 	.word	0x000260cc
    4760:	00026164 	.word	0x00026164
    4764:	00004b19 	.word	0x00004b19
    4768:	00004a29 	.word	0x00004a29

0000476c <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
    476c:	b580      	push	{r7, lr}
    476e:	b082      	sub	sp, #8
    4770:	af00      	add	r7, sp, #0
    uint8_t count = 0;
    4772:	1cfb      	adds	r3, r7, #3
    4774:	2200      	movs	r2, #0
    4776:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
    4778:	4b11      	ldr	r3, [pc, #68]	; (47c0 <SeesawGetKeypadCount+0x54>)
    477a:	222e      	movs	r2, #46	; 0x2e
    477c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
    477e:	4b10      	ldr	r3, [pc, #64]	; (47c0 <SeesawGetKeypadCount+0x54>)
    4780:	4a10      	ldr	r2, [pc, #64]	; (47c4 <SeesawGetKeypadCount+0x58>)
    4782:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
    4784:	4b0e      	ldr	r3, [pc, #56]	; (47c0 <SeesawGetKeypadCount+0x54>)
    4786:	2202      	movs	r2, #2
    4788:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
    478a:	4b0d      	ldr	r3, [pc, #52]	; (47c0 <SeesawGetKeypadCount+0x54>)
    478c:	1cfa      	adds	r2, r7, #3
    478e:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
    4790:	4b0b      	ldr	r3, [pc, #44]	; (47c0 <SeesawGetKeypadCount+0x54>)
    4792:	2201      	movs	r2, #1
    4794:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
    4796:	4b0a      	ldr	r3, [pc, #40]	; (47c0 <SeesawGetKeypadCount+0x54>)
    4798:	2264      	movs	r2, #100	; 0x64
    479a:	2100      	movs	r1, #0
    479c:	0018      	movs	r0, r3
    479e:	4b0a      	ldr	r3, [pc, #40]	; (47c8 <SeesawGetKeypadCount+0x5c>)
    47a0:	4798      	blx	r3
    47a2:	0003      	movs	r3, r0
    47a4:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
    47a6:	687b      	ldr	r3, [r7, #4]
    47a8:	2b00      	cmp	r3, #0
    47aa:	d003      	beq.n	47b4 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
    47ac:	4b07      	ldr	r3, [pc, #28]	; (47cc <SeesawGetKeypadCount+0x60>)
    47ae:	0018      	movs	r0, r3
    47b0:	4b07      	ldr	r3, [pc, #28]	; (47d0 <SeesawGetKeypadCount+0x64>)
    47b2:	4798      	blx	r3
    }
    return count;
    47b4:	1cfb      	adds	r3, r7, #3
    47b6:	781b      	ldrb	r3, [r3, #0]
}
    47b8:	0018      	movs	r0, r3
    47ba:	46bd      	mov	sp, r7
    47bc:	b002      	add	sp, #8
    47be:	bd80      	pop	{r7, pc}
    47c0:	200044e4 	.word	0x200044e4
    47c4:	000260d4 	.word	0x000260d4
    47c8:	0000318d 	.word	0x0000318d
    47cc:	00026198 	.word	0x00026198
    47d0:	0000d009 	.word	0x0000d009

000047d4 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b084      	sub	sp, #16
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
    47dc:	000a      	movs	r2, r1
    47de:	1cfb      	adds	r3, r7, #3
    47e0:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
    47e2:	1cfb      	adds	r3, r7, #3
    47e4:	781b      	ldrb	r3, [r3, #0]
    47e6:	2b00      	cmp	r3, #0
    47e8:	d101      	bne.n	47ee <SeesawReadKeypad+0x1a>
    47ea:	2300      	movs	r3, #0
    47ec:	e026      	b.n	483c <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
    47ee:	2308      	movs	r3, #8
    47f0:	18fb      	adds	r3, r7, r3
    47f2:	4a14      	ldr	r2, [pc, #80]	; (4844 <SeesawReadKeypad+0x70>)
    47f4:	8812      	ldrh	r2, [r2, #0]
    47f6:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
    47f8:	4b13      	ldr	r3, [pc, #76]	; (4848 <SeesawReadKeypad+0x74>)
    47fa:	222e      	movs	r2, #46	; 0x2e
    47fc:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
    47fe:	4b12      	ldr	r3, [pc, #72]	; (4848 <SeesawReadKeypad+0x74>)
    4800:	2208      	movs	r2, #8
    4802:	18ba      	adds	r2, r7, r2
    4804:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
    4806:	4b10      	ldr	r3, [pc, #64]	; (4848 <SeesawReadKeypad+0x74>)
    4808:	2202      	movs	r2, #2
    480a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
    480c:	4b0e      	ldr	r3, [pc, #56]	; (4848 <SeesawReadKeypad+0x74>)
    480e:	687a      	ldr	r2, [r7, #4]
    4810:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
    4812:	1cfb      	adds	r3, r7, #3
    4814:	781b      	ldrb	r3, [r3, #0]
    4816:	b29a      	uxth	r2, r3
    4818:	4b0b      	ldr	r3, [pc, #44]	; (4848 <SeesawReadKeypad+0x74>)
    481a:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
    481c:	4b0a      	ldr	r3, [pc, #40]	; (4848 <SeesawReadKeypad+0x74>)
    481e:	2264      	movs	r2, #100	; 0x64
    4820:	2100      	movs	r1, #0
    4822:	0018      	movs	r0, r3
    4824:	4b09      	ldr	r3, [pc, #36]	; (484c <SeesawReadKeypad+0x78>)
    4826:	4798      	blx	r3
    4828:	0003      	movs	r3, r0
    482a:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
    482c:	68fb      	ldr	r3, [r7, #12]
    482e:	2b00      	cmp	r3, #0
    4830:	d003      	beq.n	483a <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
    4832:	4b07      	ldr	r3, [pc, #28]	; (4850 <SeesawReadKeypad+0x7c>)
    4834:	0018      	movs	r0, r3
    4836:	4b07      	ldr	r3, [pc, #28]	; (4854 <SeesawReadKeypad+0x80>)
    4838:	4798      	blx	r3
    }
    return error;
    483a:	68fb      	ldr	r3, [r7, #12]
}
    483c:	0018      	movs	r0, r3
    483e:	46bd      	mov	sp, r7
    4840:	b004      	add	sp, #16
    4842:	bd80      	pop	{r7, pc}
    4844:	000261bc 	.word	0x000261bc
    4848:	200044e4 	.word	0x200044e4
    484c:	0000318d 	.word	0x0000318d
    4850:	00026198 	.word	0x00026198
    4854:	0000d009 	.word	0x0000d009

00004858 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
    4858:	b590      	push	{r4, r7, lr}
    485a:	b087      	sub	sp, #28
    485c:	af00      	add	r7, sp, #0
    485e:	0004      	movs	r4, r0
    4860:	0008      	movs	r0, r1
    4862:	0011      	movs	r1, r2
    4864:	1dfb      	adds	r3, r7, #7
    4866:	1c22      	adds	r2, r4, #0
    4868:	701a      	strb	r2, [r3, #0]
    486a:	1dbb      	adds	r3, r7, #6
    486c:	1c02      	adds	r2, r0, #0
    486e:	701a      	strb	r2, [r3, #0]
    4870:	1d7b      	adds	r3, r7, #5
    4872:	1c0a      	adds	r2, r1, #0
    4874:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
    4876:	2310      	movs	r3, #16
    4878:	18fb      	adds	r3, r7, r3
    487a:	1d7a      	adds	r2, r7, #5
    487c:	7812      	ldrb	r2, [r2, #0]
    487e:	2101      	movs	r1, #1
    4880:	0010      	movs	r0, r2
    4882:	4008      	ands	r0, r1
    4884:	781a      	ldrb	r2, [r3, #0]
    4886:	2101      	movs	r1, #1
    4888:	438a      	bics	r2, r1
    488a:	1c11      	adds	r1, r2, #0
    488c:	1c02      	adds	r2, r0, #0
    488e:	430a      	orrs	r2, r1
    4890:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
    4892:	1dbb      	adds	r3, r7, #6
    4894:	781b      	ldrb	r3, [r3, #0]
    4896:	2201      	movs	r2, #1
    4898:	409a      	lsls	r2, r3
    489a:	0013      	movs	r3, r2
    489c:	b2db      	uxtb	r3, r3
    489e:	1c1a      	adds	r2, r3, #0
    48a0:	230f      	movs	r3, #15
    48a2:	4013      	ands	r3, r2
    48a4:	b2da      	uxtb	r2, r3
    48a6:	2310      	movs	r3, #16
    48a8:	18fb      	adds	r3, r7, r3
    48aa:	210f      	movs	r1, #15
    48ac:	400a      	ands	r2, r1
    48ae:	1890      	adds	r0, r2, r2
    48b0:	781a      	ldrb	r2, [r3, #0]
    48b2:	211e      	movs	r1, #30
    48b4:	438a      	bics	r2, r1
    48b6:	1c11      	adds	r1, r2, #0
    48b8:	1c02      	adds	r2, r0, #0
    48ba:	430a      	orrs	r2, r1
    48bc:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
    48be:	230c      	movs	r3, #12
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	2210      	movs	r2, #16
    48c4:	701a      	strb	r2, [r3, #0]
    48c6:	230c      	movs	r3, #12
    48c8:	18fb      	adds	r3, r7, r3
    48ca:	2201      	movs	r2, #1
    48cc:	705a      	strb	r2, [r3, #1]
    48ce:	230c      	movs	r3, #12
    48d0:	18fb      	adds	r3, r7, r3
    48d2:	1dfa      	adds	r2, r7, #7
    48d4:	7812      	ldrb	r2, [r2, #0]
    48d6:	709a      	strb	r2, [r3, #2]
    48d8:	2310      	movs	r3, #16
    48da:	18fb      	adds	r3, r7, r3
    48dc:	781a      	ldrb	r2, [r3, #0]
    48de:	230c      	movs	r3, #12
    48e0:	18fb      	adds	r3, r7, r3
    48e2:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
    48e4:	4b0c      	ldr	r3, [pc, #48]	; (4918 <SeesawActivateKey+0xc0>)
    48e6:	222e      	movs	r2, #46	; 0x2e
    48e8:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
    48ea:	4b0b      	ldr	r3, [pc, #44]	; (4918 <SeesawActivateKey+0xc0>)
    48ec:	220c      	movs	r2, #12
    48ee:	18ba      	adds	r2, r7, r2
    48f0:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
    48f2:	4b09      	ldr	r3, [pc, #36]	; (4918 <SeesawActivateKey+0xc0>)
    48f4:	2204      	movs	r2, #4
    48f6:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
    48f8:	4b07      	ldr	r3, [pc, #28]	; (4918 <SeesawActivateKey+0xc0>)
    48fa:	2200      	movs	r2, #0
    48fc:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
    48fe:	4b06      	ldr	r3, [pc, #24]	; (4918 <SeesawActivateKey+0xc0>)
    4900:	2164      	movs	r1, #100	; 0x64
    4902:	0018      	movs	r0, r3
    4904:	4b05      	ldr	r3, [pc, #20]	; (491c <SeesawActivateKey+0xc4>)
    4906:	4798      	blx	r3
    4908:	0003      	movs	r3, r0
    490a:	617b      	str	r3, [r7, #20]
    return error;
    490c:	697b      	ldr	r3, [r7, #20]
}
    490e:	0018      	movs	r0, r3
    4910:	46bd      	mov	sp, r7
    4912:	b007      	add	sp, #28
    4914:	bd90      	pop	{r4, r7, pc}
    4916:	46c0      	nop			; (mov r8, r8)
    4918:	200044e4 	.word	0x200044e4
    491c:	000030b5 	.word	0x000030b5

00004920 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
    4920:	b5b0      	push	{r4, r5, r7, lr}
    4922:	b086      	sub	sp, #24
    4924:	af00      	add	r7, sp, #0
    4926:	0005      	movs	r5, r0
    4928:	000c      	movs	r4, r1
    492a:	0010      	movs	r0, r2
    492c:	0019      	movs	r1, r3
    492e:	1dfb      	adds	r3, r7, #7
    4930:	1c2a      	adds	r2, r5, #0
    4932:	701a      	strb	r2, [r3, #0]
    4934:	1dbb      	adds	r3, r7, #6
    4936:	1c22      	adds	r2, r4, #0
    4938:	701a      	strb	r2, [r3, #0]
    493a:	1d7b      	adds	r3, r7, #5
    493c:	1c02      	adds	r2, r0, #0
    493e:	701a      	strb	r2, [r3, #0]
    4940:	1d3b      	adds	r3, r7, #4
    4942:	1c0a      	adds	r2, r1, #0
    4944:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
    4946:	2308      	movs	r3, #8
    4948:	18fb      	adds	r3, r7, r3
    494a:	220e      	movs	r2, #14
    494c:	701a      	strb	r2, [r3, #0]
    494e:	2308      	movs	r3, #8
    4950:	18fb      	adds	r3, r7, r3
    4952:	2204      	movs	r2, #4
    4954:	705a      	strb	r2, [r3, #1]
    4956:	2308      	movs	r3, #8
    4958:	18fb      	adds	r3, r7, r3
    495a:	2200      	movs	r2, #0
    495c:	709a      	strb	r2, [r3, #2]
    495e:	2308      	movs	r3, #8
    4960:	18fb      	adds	r3, r7, r3
    4962:	2200      	movs	r2, #0
    4964:	70da      	strb	r2, [r3, #3]
    4966:	2308      	movs	r3, #8
    4968:	18fb      	adds	r3, r7, r3
    496a:	1d7a      	adds	r2, r7, #5
    496c:	7812      	ldrb	r2, [r2, #0]
    496e:	711a      	strb	r2, [r3, #4]
    4970:	2308      	movs	r3, #8
    4972:	18fb      	adds	r3, r7, r3
    4974:	1dba      	adds	r2, r7, #6
    4976:	7812      	ldrb	r2, [r2, #0]
    4978:	715a      	strb	r2, [r3, #5]
    497a:	2308      	movs	r3, #8
    497c:	18fb      	adds	r3, r7, r3
    497e:	1d3a      	adds	r2, r7, #4
    4980:	7812      	ldrb	r2, [r2, #0]
    4982:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
    4984:	1dfb      	adds	r3, r7, #7
    4986:	781b      	ldrb	r3, [r3, #0]
    4988:	b29b      	uxth	r3, r3
    498a:	2216      	movs	r2, #22
    498c:	18ba      	adds	r2, r7, r2
    498e:	1c19      	adds	r1, r3, #0
    4990:	1c0b      	adds	r3, r1, #0
    4992:	18db      	adds	r3, r3, r3
    4994:	185b      	adds	r3, r3, r1
    4996:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
    4998:	2316      	movs	r3, #22
    499a:	18fb      	adds	r3, r7, r3
    499c:	881b      	ldrh	r3, [r3, #0]
    499e:	0a1b      	lsrs	r3, r3, #8
    49a0:	b29b      	uxth	r3, r3
    49a2:	b2da      	uxtb	r2, r3
    49a4:	2308      	movs	r3, #8
    49a6:	18fb      	adds	r3, r7, r3
    49a8:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
    49aa:	2316      	movs	r3, #22
    49ac:	18fb      	adds	r3, r7, r3
    49ae:	881b      	ldrh	r3, [r3, #0]
    49b0:	b2da      	uxtb	r2, r3
    49b2:	2308      	movs	r3, #8
    49b4:	18fb      	adds	r3, r7, r3
    49b6:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
    49b8:	4b09      	ldr	r3, [pc, #36]	; (49e0 <SeesawSetLed+0xc0>)
    49ba:	2208      	movs	r2, #8
    49bc:	18ba      	adds	r2, r7, r2
    49be:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
    49c0:	4b07      	ldr	r3, [pc, #28]	; (49e0 <SeesawSetLed+0xc0>)
    49c2:	2207      	movs	r2, #7
    49c4:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
    49c6:	4b06      	ldr	r3, [pc, #24]	; (49e0 <SeesawSetLed+0xc0>)
    49c8:	2164      	movs	r1, #100	; 0x64
    49ca:	0018      	movs	r0, r3
    49cc:	4b05      	ldr	r3, [pc, #20]	; (49e4 <SeesawSetLed+0xc4>)
    49ce:	4798      	blx	r3
    49d0:	0003      	movs	r3, r0
    49d2:	613b      	str	r3, [r7, #16]
    return error;
    49d4:	693b      	ldr	r3, [r7, #16]
}
    49d6:	0018      	movs	r0, r3
    49d8:	46bd      	mov	sp, r7
    49da:	b006      	add	sp, #24
    49dc:	bdb0      	pop	{r4, r5, r7, pc}
    49de:	46c0      	nop			; (mov r8, r8)
    49e0:	200044e4 	.word	0x200044e4
    49e4:	000030b5 	.word	0x000030b5

000049e8 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
    49e8:	b580      	push	{r7, lr}
    49ea:	b082      	sub	sp, #8
    49ec:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
    49ee:	003b      	movs	r3, r7
    49f0:	4a0a      	ldr	r2, [pc, #40]	; (4a1c <SeesawOrderLedUpdate+0x34>)
    49f2:	8812      	ldrh	r2, [r2, #0]
    49f4:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
    49f6:	4b0a      	ldr	r3, [pc, #40]	; (4a20 <SeesawOrderLedUpdate+0x38>)
    49f8:	003a      	movs	r2, r7
    49fa:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
    49fc:	4b08      	ldr	r3, [pc, #32]	; (4a20 <SeesawOrderLedUpdate+0x38>)
    49fe:	2202      	movs	r2, #2
    4a00:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
    4a02:	4b07      	ldr	r3, [pc, #28]	; (4a20 <SeesawOrderLedUpdate+0x38>)
    4a04:	2164      	movs	r1, #100	; 0x64
    4a06:	0018      	movs	r0, r3
    4a08:	4b06      	ldr	r3, [pc, #24]	; (4a24 <SeesawOrderLedUpdate+0x3c>)
    4a0a:	4798      	blx	r3
    4a0c:	0003      	movs	r3, r0
    4a0e:	607b      	str	r3, [r7, #4]
    return error;
    4a10:	687b      	ldr	r3, [r7, #4]
}
    4a12:	0018      	movs	r0, r3
    4a14:	46bd      	mov	sp, r7
    4a16:	b002      	add	sp, #8
    4a18:	bd80      	pop	{r7, pc}
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	000261c0 	.word	0x000261c0
    4a20:	200044e4 	.word	0x200044e4
    4a24:	000030b5 	.word	0x000030b5

00004a28 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	b082      	sub	sp, #8
    4a2c:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
    4a2e:	4b33      	ldr	r3, [pc, #204]	; (4afc <SeesawInitializeKeypad+0xd4>)
    4a30:	222e      	movs	r2, #46	; 0x2e
    4a32:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
    4a34:	4b31      	ldr	r3, [pc, #196]	; (4afc <SeesawInitializeKeypad+0xd4>)
    4a36:	4a32      	ldr	r2, [pc, #200]	; (4b00 <SeesawInitializeKeypad+0xd8>)
    4a38:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
    4a3a:	4b30      	ldr	r3, [pc, #192]	; (4afc <SeesawInitializeKeypad+0xd4>)
    4a3c:	2203      	movs	r2, #3
    4a3e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
    4a40:	4b2e      	ldr	r3, [pc, #184]	; (4afc <SeesawInitializeKeypad+0xd4>)
    4a42:	2200      	movs	r2, #0
    4a44:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
    4a46:	4b2d      	ldr	r3, [pc, #180]	; (4afc <SeesawInitializeKeypad+0xd4>)
    4a48:	2164      	movs	r1, #100	; 0x64
    4a4a:	0018      	movs	r0, r3
    4a4c:	4b2d      	ldr	r3, [pc, #180]	; (4b04 <SeesawInitializeKeypad+0xdc>)
    4a4e:	4798      	blx	r3
    4a50:	0003      	movs	r3, r0
    4a52:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
    4a54:	683b      	ldr	r3, [r7, #0]
    4a56:	2b00      	cmp	r3, #0
    4a58:	d003      	beq.n	4a62 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    4a5a:	4b2b      	ldr	r3, [pc, #172]	; (4b08 <SeesawInitializeKeypad+0xe0>)
    4a5c:	0018      	movs	r0, r3
    4a5e:	4b2b      	ldr	r3, [pc, #172]	; (4b0c <SeesawInitializeKeypad+0xe4>)
    4a60:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
    4a62:	2300      	movs	r3, #0
    4a64:	607b      	str	r3, [r7, #4]
    4a66:	e041      	b.n	4aec <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    4a68:	687b      	ldr	r3, [r7, #4]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	da00      	bge.n	4a70 <SeesawInitializeKeypad+0x48>
    4a6e:	3303      	adds	r3, #3
    4a70:	109b      	asrs	r3, r3, #2
    4a72:	b2db      	uxtb	r3, r3
    4a74:	00db      	lsls	r3, r3, #3
    4a76:	b2da      	uxtb	r2, r3
    4a78:	687b      	ldr	r3, [r7, #4]
    4a7a:	4925      	ldr	r1, [pc, #148]	; (4b10 <SeesawInitializeKeypad+0xe8>)
    4a7c:	400b      	ands	r3, r1
    4a7e:	d504      	bpl.n	4a8a <SeesawInitializeKeypad+0x62>
    4a80:	3b01      	subs	r3, #1
    4a82:	2104      	movs	r1, #4
    4a84:	4249      	negs	r1, r1
    4a86:	430b      	orrs	r3, r1
    4a88:	3301      	adds	r3, #1
    4a8a:	b2db      	uxtb	r3, r3
    4a8c:	18d3      	adds	r3, r2, r3
    4a8e:	b2db      	uxtb	r3, r3
    4a90:	2201      	movs	r2, #1
    4a92:	2103      	movs	r1, #3
    4a94:	0018      	movs	r0, r3
    4a96:	4b1f      	ldr	r3, [pc, #124]	; (4b14 <SeesawInitializeKeypad+0xec>)
    4a98:	4798      	blx	r3
    4a9a:	0003      	movs	r3, r0
    4a9c:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	da00      	bge.n	4aa6 <SeesawInitializeKeypad+0x7e>
    4aa4:	3303      	adds	r3, #3
    4aa6:	109b      	asrs	r3, r3, #2
    4aa8:	b2db      	uxtb	r3, r3
    4aaa:	00db      	lsls	r3, r3, #3
    4aac:	b2da      	uxtb	r2, r3
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	4917      	ldr	r1, [pc, #92]	; (4b10 <SeesawInitializeKeypad+0xe8>)
    4ab2:	400b      	ands	r3, r1
    4ab4:	d504      	bpl.n	4ac0 <SeesawInitializeKeypad+0x98>
    4ab6:	3b01      	subs	r3, #1
    4ab8:	2104      	movs	r1, #4
    4aba:	4249      	negs	r1, r1
    4abc:	430b      	orrs	r3, r1
    4abe:	3301      	adds	r3, #1
    4ac0:	b2db      	uxtb	r3, r3
    4ac2:	18d3      	adds	r3, r2, r3
    4ac4:	b2db      	uxtb	r3, r3
    4ac6:	2201      	movs	r2, #1
    4ac8:	2102      	movs	r1, #2
    4aca:	0018      	movs	r0, r3
    4acc:	4b11      	ldr	r3, [pc, #68]	; (4b14 <SeesawInitializeKeypad+0xec>)
    4ace:	4798      	blx	r3
    4ad0:	0002      	movs	r2, r0
    4ad2:	683b      	ldr	r3, [r7, #0]
    4ad4:	4313      	orrs	r3, r2
    4ad6:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
    4ad8:	683b      	ldr	r3, [r7, #0]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d003      	beq.n	4ae6 <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    4ade:	4b0a      	ldr	r3, [pc, #40]	; (4b08 <SeesawInitializeKeypad+0xe0>)
    4ae0:	0018      	movs	r0, r3
    4ae2:	4b0a      	ldr	r3, [pc, #40]	; (4b0c <SeesawInitializeKeypad+0xe4>)
    4ae4:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	3301      	adds	r3, #1
    4aea:	607b      	str	r3, [r7, #4]
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	2b0f      	cmp	r3, #15
    4af0:	ddba      	ble.n	4a68 <SeesawInitializeKeypad+0x40>
        }
    }
}
    4af2:	46c0      	nop			; (mov r8, r8)
    4af4:	46bd      	mov	sp, r7
    4af6:	b002      	add	sp, #8
    4af8:	bd80      	pop	{r7, pc}
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	200044e4 	.word	0x200044e4
    4b00:	000260d0 	.word	0x000260d0
    4b04:	000030b5 	.word	0x000030b5
    4b08:	000261c4 	.word	0x000261c4
    4b0c:	0000d009 	.word	0x0000d009
    4b10:	80000003 	.word	0x80000003
    4b14:	00004859 	.word	0x00004859

00004b18 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
    4b18:	b5b0      	push	{r4, r5, r7, lr}
    4b1a:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
    4b1c:	23ff      	movs	r3, #255	; 0xff
    4b1e:	22ff      	movs	r2, #255	; 0xff
    4b20:	21ff      	movs	r1, #255	; 0xff
    4b22:	200f      	movs	r0, #15
    4b24:	4c09      	ldr	r4, [pc, #36]	; (4b4c <SeesawTurnOnLedTest+0x34>)
    4b26:	47a0      	blx	r4
    SeesawOrderLedUpdate();
    4b28:	4b09      	ldr	r3, [pc, #36]	; (4b50 <SeesawTurnOnLedTest+0x38>)
    4b2a:	4798      	blx	r3
    vTaskDelay(400);
    4b2c:	23c8      	movs	r3, #200	; 0xc8
    4b2e:	005b      	lsls	r3, r3, #1
    4b30:	0018      	movs	r0, r3
    4b32:	4b08      	ldr	r3, [pc, #32]	; (4b54 <SeesawTurnOnLedTest+0x3c>)
    4b34:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
    4b36:	2300      	movs	r3, #0
    4b38:	2200      	movs	r2, #0
    4b3a:	2100      	movs	r1, #0
    4b3c:	200f      	movs	r0, #15
    4b3e:	4c03      	ldr	r4, [pc, #12]	; (4b4c <SeesawTurnOnLedTest+0x34>)
    4b40:	47a0      	blx	r4
    SeesawOrderLedUpdate();
    4b42:	4b03      	ldr	r3, [pc, #12]	; (4b50 <SeesawTurnOnLedTest+0x38>)
    4b44:	4798      	blx	r3
    4b46:	46c0      	nop			; (mov r8, r8)
    4b48:	46bd      	mov	sp, r7
    4b4a:	bdb0      	pop	{r4, r5, r7, pc}
    4b4c:	00004921 	.word	0x00004921
    4b50:	000049e9 	.word	0x000049e9
    4b54:	0000b3b5 	.word	0x0000b3b5

00004b58 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
    4b58:	b590      	push	{r4, r7, lr}
    4b5a:	b089      	sub	sp, #36	; 0x24
    4b5c:	af02      	add	r7, sp, #8
    4b5e:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
    4b60:	4b96      	ldr	r3, [pc, #600]	; (4dbc <vUiHandlerTask+0x264>)
    4b62:	0018      	movs	r0, r3
    4b64:	4b96      	ldr	r3, [pc, #600]	; (4dc0 <vUiHandlerTask+0x268>)
    4b66:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
    4b68:	4b96      	ldr	r3, [pc, #600]	; (4dc4 <vUiHandlerTask+0x26c>)
    4b6a:	2201      	movs	r2, #1
    4b6c:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Remove if not using
    gfx_mono_init();
    4b6e:	4b96      	ldr	r3, [pc, #600]	; (4dc8 <vUiHandlerTask+0x270>)
    4b70:	4798      	blx	r3
    gfx_mono_draw_line(1, 1, 62, 46, GFX_PIXEL_SET);
    4b72:	2301      	movs	r3, #1
    4b74:	9300      	str	r3, [sp, #0]
    4b76:	232e      	movs	r3, #46	; 0x2e
    4b78:	223e      	movs	r2, #62	; 0x3e
    4b7a:	2101      	movs	r1, #1
    4b7c:	2001      	movs	r0, #1
    4b7e:	4c93      	ldr	r4, [pc, #588]	; (4dcc <vUiHandlerTask+0x274>)
    4b80:	47a0      	blx	r4
    // Draw a filled circle with all quadrant drawn
    gfx_mono_draw_filled_circle(36, 20, 20, GFX_PIXEL_SET, GFX_WHOLE);
    4b82:	23ff      	movs	r3, #255	; 0xff
    4b84:	9300      	str	r3, [sp, #0]
    4b86:	2301      	movs	r3, #1
    4b88:	2214      	movs	r2, #20
    4b8a:	2114      	movs	r1, #20
    4b8c:	2024      	movs	r0, #36	; 0x24
    4b8e:	4c90      	ldr	r4, [pc, #576]	; (4dd0 <vUiHandlerTask+0x278>)
    4b90:	47a0      	blx	r4

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
    4b92:	4b8c      	ldr	r3, [pc, #560]	; (4dc4 <vUiHandlerTask+0x26c>)
    4b94:	781b      	ldrb	r3, [r3, #0]
    4b96:	2b01      	cmp	r3, #1
    4b98:	d100      	bne.n	4b9c <vUiHandlerTask+0x44>
    4b9a:	e107      	b.n	4dac <vUiHandlerTask+0x254>
    4b9c:	2b02      	cmp	r3, #2
    4b9e:	d002      	beq.n	4ba6 <vUiHandlerTask+0x4e>
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	d06e      	beq.n	4c82 <vUiHandlerTask+0x12a>
    4ba4:	e0fe      	b.n	4da4 <vUiHandlerTask+0x24c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
    4ba6:	4b8b      	ldr	r3, [pc, #556]	; (4dd4 <vUiHandlerTask+0x27c>)
    4ba8:	2200      	movs	r2, #0
    4baa:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
    4bac:	4b8a      	ldr	r3, [pc, #552]	; (4dd8 <vUiHandlerTask+0x280>)
    4bae:	2201      	movs	r2, #1
    4bb0:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
    4bb2:	4b8a      	ldr	r3, [pc, #552]	; (4ddc <vUiHandlerTask+0x284>)
    4bb4:	2214      	movs	r2, #20
    4bb6:	21ff      	movs	r1, #255	; 0xff
    4bb8:	0018      	movs	r0, r3
    4bba:	4b89      	ldr	r3, [pc, #548]	; (4de0 <vUiHandlerTask+0x288>)
    4bbc:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
    4bbe:	4b89      	ldr	r3, [pc, #548]	; (4de4 <vUiHandlerTask+0x28c>)
    4bc0:	2200      	movs	r2, #0
    4bc2:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
    4bc4:	2317      	movs	r3, #23
    4bc6:	18fc      	adds	r4, r7, r3
    4bc8:	4b87      	ldr	r3, [pc, #540]	; (4de8 <vUiHandlerTask+0x290>)
    4bca:	4798      	blx	r3
    4bcc:	0003      	movs	r3, r0
    4bce:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
    4bd0:	2317      	movs	r3, #23
    4bd2:	18fb      	adds	r3, r7, r3
    4bd4:	781b      	ldrb	r3, [r3, #0]
    4bd6:	2b0f      	cmp	r3, #15
    4bd8:	d903      	bls.n	4be2 <vUiHandlerTask+0x8a>
    4bda:	2317      	movs	r3, #23
    4bdc:	18fb      	adds	r3, r7, r3
    4bde:	2210      	movs	r2, #16
    4be0:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
    4be2:	2317      	movs	r3, #23
    4be4:	18fb      	adds	r3, r7, r3
    4be6:	781b      	ldrb	r3, [r3, #0]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d007      	beq.n	4bfc <vUiHandlerTask+0xa4>
                    SeesawReadKeypad(buttons,
    4bec:	2317      	movs	r3, #23
    4bee:	18fb      	adds	r3, r7, r3
    4bf0:	781a      	ldrb	r2, [r3, #0]
    4bf2:	4b7e      	ldr	r3, [pc, #504]	; (4dec <vUiHandlerTask+0x294>)
    4bf4:	0011      	movs	r1, r2
    4bf6:	0018      	movs	r0, r3
    4bf8:	4b7d      	ldr	r3, [pc, #500]	; (4df0 <vUiHandlerTask+0x298>)
    4bfa:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
    4bfc:	4b7b      	ldr	r3, [pc, #492]	; (4dec <vUiHandlerTask+0x294>)
    4bfe:	2210      	movs	r2, #16
    4c00:	2100      	movs	r1, #0
    4c02:	0018      	movs	r0, r3
    4c04:	4b76      	ldr	r3, [pc, #472]	; (4de0 <vUiHandlerTask+0x288>)
    4c06:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
    4c08:	4b7a      	ldr	r3, [pc, #488]	; (4df4 <vUiHandlerTask+0x29c>)
    4c0a:	781b      	ldrb	r3, [r3, #0]
    4c0c:	b2d9      	uxtb	r1, r3
    4c0e:	4b7a      	ldr	r3, [pc, #488]	; (4df8 <vUiHandlerTask+0x2a0>)
    4c10:	781b      	ldrb	r3, [r3, #0]
    4c12:	b2da      	uxtb	r2, r3
    4c14:	4b79      	ldr	r3, [pc, #484]	; (4dfc <vUiHandlerTask+0x2a4>)
    4c16:	781b      	ldrb	r3, [r3, #0]
    4c18:	b2db      	uxtb	r3, r3
    4c1a:	2000      	movs	r0, #0
    4c1c:	4c78      	ldr	r4, [pc, #480]	; (4e00 <vUiHandlerTask+0x2a8>)
    4c1e:	47a0      	blx	r4
                SeesawOrderLedUpdate();
    4c20:	4b78      	ldr	r3, [pc, #480]	; (4e04 <vUiHandlerTask+0x2ac>)
    4c22:	4798      	blx	r3
                vTaskDelay(1000);
    4c24:	23fa      	movs	r3, #250	; 0xfa
    4c26:	009b      	lsls	r3, r3, #2
    4c28:	0018      	movs	r0, r3
    4c2a:	4b77      	ldr	r3, [pc, #476]	; (4e08 <vUiHandlerTask+0x2b0>)
    4c2c:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 1 off
    4c2e:	2300      	movs	r3, #0
    4c30:	2200      	movs	r2, #0
    4c32:	2100      	movs	r1, #0
    4c34:	2000      	movs	r0, #0
    4c36:	4c72      	ldr	r4, [pc, #456]	; (4e00 <vUiHandlerTask+0x2a8>)
    4c38:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
    4c3a:	4b6e      	ldr	r3, [pc, #440]	; (4df4 <vUiHandlerTask+0x29c>)
    4c3c:	781b      	ldrb	r3, [r3, #0]
    4c3e:	b2d9      	uxtb	r1, r3
    4c40:	4b6d      	ldr	r3, [pc, #436]	; (4df8 <vUiHandlerTask+0x2a0>)
    4c42:	781b      	ldrb	r3, [r3, #0]
    4c44:	b2da      	uxtb	r2, r3
    4c46:	4b6d      	ldr	r3, [pc, #436]	; (4dfc <vUiHandlerTask+0x2a4>)
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	b2db      	uxtb	r3, r3
    4c4c:	200f      	movs	r0, #15
    4c4e:	4c6c      	ldr	r4, [pc, #432]	; (4e00 <vUiHandlerTask+0x2a8>)
    4c50:	47a0      	blx	r4
                SeesawOrderLedUpdate();
    4c52:	4b6c      	ldr	r3, [pc, #432]	; (4e04 <vUiHandlerTask+0x2ac>)
    4c54:	4798      	blx	r3
                vTaskDelay(1000);
    4c56:	23fa      	movs	r3, #250	; 0xfa
    4c58:	009b      	lsls	r3, r3, #2
    4c5a:	0018      	movs	r0, r3
    4c5c:	4b6a      	ldr	r3, [pc, #424]	; (4e08 <vUiHandlerTask+0x2b0>)
    4c5e:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
    4c60:	2300      	movs	r3, #0
    4c62:	2200      	movs	r2, #0
    4c64:	2100      	movs	r1, #0
    4c66:	200f      	movs	r0, #15
    4c68:	4c65      	ldr	r4, [pc, #404]	; (4e00 <vUiHandlerTask+0x2a8>)
    4c6a:	47a0      	blx	r4
                SeesawOrderLedUpdate();
    4c6c:	4b65      	ldr	r3, [pc, #404]	; (4e04 <vUiHandlerTask+0x2ac>)
    4c6e:	4798      	blx	r3
                vTaskDelay(1000);
    4c70:	23fa      	movs	r3, #250	; 0xfa
    4c72:	009b      	lsls	r3, r3, #2
    4c74:	0018      	movs	r0, r3
    4c76:	4b64      	ldr	r3, [pc, #400]	; (4e08 <vUiHandlerTask+0x2b0>)
    4c78:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
    4c7a:	4b52      	ldr	r3, [pc, #328]	; (4dc4 <vUiHandlerTask+0x26c>)
    4c7c:	2200      	movs	r2, #0
    4c7e:	701a      	strb	r2, [r3, #0]

                break;
    4c80:	e097      	b.n	4db2 <vUiHandlerTask+0x25a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
    4c82:	2316      	movs	r3, #22
    4c84:	18fc      	adds	r4, r7, r3
    4c86:	4b58      	ldr	r3, [pc, #352]	; (4de8 <vUiHandlerTask+0x290>)
    4c88:	4798      	blx	r3
    4c8a:	0003      	movs	r3, r0
    4c8c:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
    4c8e:	4b57      	ldr	r3, [pc, #348]	; (4dec <vUiHandlerTask+0x294>)
    4c90:	2210      	movs	r2, #16
    4c92:	2100      	movs	r1, #0
    4c94:	0018      	movs	r0, r3
    4c96:	4b52      	ldr	r3, [pc, #328]	; (4de0 <vUiHandlerTask+0x288>)
    4c98:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
    4c9a:	2316      	movs	r3, #22
    4c9c:	18fb      	adds	r3, r7, r3
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	2b0f      	cmp	r3, #15
    4ca2:	d903      	bls.n	4cac <vUiHandlerTask+0x154>
                    numPresses = BUTTON_PRESSES_MAX;
    4ca4:	2316      	movs	r3, #22
    4ca6:	18fb      	adds	r3, r7, r3
    4ca8:	2210      	movs	r2, #16
    4caa:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
    4cac:	2316      	movs	r3, #22
    4cae:	18fb      	adds	r3, r7, r3
    4cb0:	781b      	ldrb	r3, [r3, #0]
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d065      	beq.n	4d82 <vUiHandlerTask+0x22a>
    4cb6:	2316      	movs	r3, #22
    4cb8:	18fb      	adds	r3, r7, r3
    4cba:	781a      	ldrb	r2, [r3, #0]
    4cbc:	4b4b      	ldr	r3, [pc, #300]	; (4dec <vUiHandlerTask+0x294>)
    4cbe:	0011      	movs	r1, r2
    4cc0:	0018      	movs	r0, r3
    4cc2:	4b4b      	ldr	r3, [pc, #300]	; (4df0 <vUiHandlerTask+0x298>)
    4cc4:	4798      	blx	r3
    4cc6:	1e03      	subs	r3, r0, #0
    4cc8:	d15b      	bne.n	4d82 <vUiHandlerTask+0x22a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
    4cca:	2300      	movs	r3, #0
    4ccc:	613b      	str	r3, [r7, #16]
    4cce:	e050      	b.n	4d72 <vUiHandlerTask+0x21a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
    4cd0:	4a46      	ldr	r2, [pc, #280]	; (4dec <vUiHandlerTask+0x294>)
    4cd2:	693b      	ldr	r3, [r7, #16]
    4cd4:	18d3      	adds	r3, r2, r3
    4cd6:	781b      	ldrb	r3, [r3, #0]
    4cd8:	089b      	lsrs	r3, r3, #2
    4cda:	b2db      	uxtb	r3, r3
    4cdc:	2b00      	cmp	r3, #0
    4cde:	da00      	bge.n	4ce2 <vUiHandlerTask+0x18a>
    4ce0:	3307      	adds	r3, #7
    4ce2:	10db      	asrs	r3, r3, #3
    4ce4:	b2db      	uxtb	r3, r3
    4ce6:	009b      	lsls	r3, r3, #2
    4ce8:	b2d9      	uxtb	r1, r3
    4cea:	4a40      	ldr	r2, [pc, #256]	; (4dec <vUiHandlerTask+0x294>)
    4cec:	693b      	ldr	r3, [r7, #16]
    4cee:	18d3      	adds	r3, r2, r3
    4cf0:	781b      	ldrb	r3, [r3, #0]
    4cf2:	089b      	lsrs	r3, r3, #2
    4cf4:	b2db      	uxtb	r3, r3
    4cf6:	2207      	movs	r2, #7
    4cf8:	4013      	ands	r3, r2
    4cfa:	b2da      	uxtb	r2, r3
    4cfc:	230f      	movs	r3, #15
    4cfe:	18fb      	adds	r3, r7, r3
    4d00:	188a      	adds	r2, r1, r2
    4d02:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
    4d04:	4a39      	ldr	r2, [pc, #228]	; (4dec <vUiHandlerTask+0x294>)
    4d06:	693b      	ldr	r3, [r7, #16]
    4d08:	18d3      	adds	r3, r2, r3
    4d0a:	781a      	ldrb	r2, [r3, #0]
    4d0c:	230e      	movs	r3, #14
    4d0e:	18fb      	adds	r3, r7, r3
    4d10:	2103      	movs	r1, #3
    4d12:	400a      	ands	r2, r1
    4d14:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
    4d16:	230e      	movs	r3, #14
    4d18:	18fb      	adds	r3, r7, r3
    4d1a:	781b      	ldrb	r3, [r3, #0]
    4d1c:	2b03      	cmp	r3, #3
    4d1e:	d10f      	bne.n	4d40 <vUiHandlerTask+0x1e8>
                            SeesawSetLed(keynum, red, green, blue);
    4d20:	4b34      	ldr	r3, [pc, #208]	; (4df4 <vUiHandlerTask+0x29c>)
    4d22:	781b      	ldrb	r3, [r3, #0]
    4d24:	b2d9      	uxtb	r1, r3
    4d26:	4b34      	ldr	r3, [pc, #208]	; (4df8 <vUiHandlerTask+0x2a0>)
    4d28:	781b      	ldrb	r3, [r3, #0]
    4d2a:	b2da      	uxtb	r2, r3
    4d2c:	4b33      	ldr	r3, [pc, #204]	; (4dfc <vUiHandlerTask+0x2a4>)
    4d2e:	781b      	ldrb	r3, [r3, #0]
    4d30:	b2dc      	uxtb	r4, r3
    4d32:	230f      	movs	r3, #15
    4d34:	18fb      	adds	r3, r7, r3
    4d36:	7818      	ldrb	r0, [r3, #0]
    4d38:	0023      	movs	r3, r4
    4d3a:	4c31      	ldr	r4, [pc, #196]	; (4e00 <vUiHandlerTask+0x2a8>)
    4d3c:	47a0      	blx	r4
    4d3e:	e015      	b.n	4d6c <vUiHandlerTask+0x214>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
    4d40:	230f      	movs	r3, #15
    4d42:	18fb      	adds	r3, r7, r3
    4d44:	7818      	ldrb	r0, [r3, #0]
    4d46:	2300      	movs	r3, #0
    4d48:	2200      	movs	r2, #0
    4d4a:	2100      	movs	r1, #0
    4d4c:	4c2c      	ldr	r4, [pc, #176]	; (4e00 <vUiHandlerTask+0x2a8>)
    4d4e:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
    4d50:	4b20      	ldr	r3, [pc, #128]	; (4dd4 <vUiHandlerTask+0x27c>)
    4d52:	781b      	ldrb	r3, [r3, #0]
    4d54:	0019      	movs	r1, r3
    4d56:	4b21      	ldr	r3, [pc, #132]	; (4ddc <vUiHandlerTask+0x284>)
    4d58:	220f      	movs	r2, #15
    4d5a:	18ba      	adds	r2, r7, r2
    4d5c:	7812      	ldrb	r2, [r2, #0]
    4d5e:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
    4d60:	4b1c      	ldr	r3, [pc, #112]	; (4dd4 <vUiHandlerTask+0x27c>)
    4d62:	781b      	ldrb	r3, [r3, #0]
    4d64:	3301      	adds	r3, #1
    4d66:	b2da      	uxtb	r2, r3
    4d68:	4b1a      	ldr	r3, [pc, #104]	; (4dd4 <vUiHandlerTask+0x27c>)
    4d6a:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
    4d6c:	693b      	ldr	r3, [r7, #16]
    4d6e:	3301      	adds	r3, #1
    4d70:	613b      	str	r3, [r7, #16]
    4d72:	2316      	movs	r3, #22
    4d74:	18fb      	adds	r3, r7, r3
    4d76:	781a      	ldrb	r2, [r3, #0]
    4d78:	693b      	ldr	r3, [r7, #16]
    4d7a:	429a      	cmp	r2, r3
    4d7c:	dca8      	bgt.n	4cd0 <vUiHandlerTask+0x178>
                        }
                    }
                    SeesawOrderLedUpdate();
    4d7e:	4b21      	ldr	r3, [pc, #132]	; (4e04 <vUiHandlerTask+0x2ac>)
    4d80:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
    4d82:	4b14      	ldr	r3, [pc, #80]	; (4dd4 <vUiHandlerTask+0x27c>)
    4d84:	781a      	ldrb	r2, [r3, #0]
    4d86:	4b14      	ldr	r3, [pc, #80]	; (4dd8 <vUiHandlerTask+0x280>)
    4d88:	781b      	ldrb	r3, [r3, #0]
    4d8a:	429a      	cmp	r2, r3
    4d8c:	d203      	bcs.n	4d96 <vUiHandlerTask+0x23e>
    4d8e:	4b11      	ldr	r3, [pc, #68]	; (4dd4 <vUiHandlerTask+0x27c>)
    4d90:	781b      	ldrb	r3, [r3, #0]
    4d92:	2b13      	cmp	r3, #19
    4d94:	d90c      	bls.n	4db0 <vUiHandlerTask+0x258>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
    4d96:	4b13      	ldr	r3, [pc, #76]	; (4de4 <vUiHandlerTask+0x28c>)
    4d98:	2201      	movs	r2, #1
    4d9a:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
    4d9c:	4b09      	ldr	r3, [pc, #36]	; (4dc4 <vUiHandlerTask+0x26c>)
    4d9e:	2201      	movs	r2, #1
    4da0:	701a      	strb	r2, [r3, #0]
                }

                break;
    4da2:	e005      	b.n	4db0 <vUiHandlerTask+0x258>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
    4da4:	4b07      	ldr	r3, [pc, #28]	; (4dc4 <vUiHandlerTask+0x26c>)
    4da6:	2200      	movs	r2, #0
    4da8:	701a      	strb	r2, [r3, #0]
                break;
    4daa:	e002      	b.n	4db2 <vUiHandlerTask+0x25a>
                break;
    4dac:	46c0      	nop			; (mov r8, r8)
    4dae:	e000      	b.n	4db2 <vUiHandlerTask+0x25a>
                break;
    4db0:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
    4db2:	2032      	movs	r0, #50	; 0x32
    4db4:	4b14      	ldr	r3, [pc, #80]	; (4e08 <vUiHandlerTask+0x2b0>)
    4db6:	4798      	blx	r3
        switch (uiState) {
    4db8:	e6eb      	b.n	4b92 <vUiHandlerTask+0x3a>
    4dba:	46c0      	nop			; (mov r8, r8)
    4dbc:	000261e8 	.word	0x000261e8
    4dc0:	0000d009 	.word	0x0000d009
    4dc4:	2000452c 	.word	0x2000452c
    4dc8:	00000a75 	.word	0x00000a75
    4dcc:	000004b5 	.word	0x000004b5
    4dd0:	0000073d 	.word	0x0000073d
    4dd4:	20000642 	.word	0x20000642
    4dd8:	20000643 	.word	0x20000643
    4ddc:	200044f4 	.word	0x200044f4
    4de0:	000247b7 	.word	0x000247b7
    4de4:	20000644 	.word	0x20000644
    4de8:	0000476d 	.word	0x0000476d
    4dec:	2000451c 	.word	0x2000451c
    4df0:	000047d5 	.word	0x000047d5
    4df4:	20000641 	.word	0x20000641
    4df8:	20000020 	.word	0x20000020
    4dfc:	20000021 	.word	0x20000021
    4e00:	00004921 	.word	0x00004921
    4e04:	000049e9 	.word	0x000049e9
    4e08:	0000b3b5 	.word	0x0000b3b5

00004e0c <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
    4e0c:	b580      	push	{r7, lr}
    4e0e:	b082      	sub	sp, #8
    4e10:	af00      	add	r7, sp, #0
    4e12:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
    4e14:	4a08      	ldr	r2, [pc, #32]	; (4e38 <UiOrderShowMoves+0x2c>)
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	0010      	movs	r0, r2
    4e1a:	0019      	movs	r1, r3
    4e1c:	2314      	movs	r3, #20
    4e1e:	001a      	movs	r2, r3
    4e20:	4b06      	ldr	r3, [pc, #24]	; (4e3c <UiOrderShowMoves+0x30>)
    4e22:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
    4e24:	4b06      	ldr	r3, [pc, #24]	; (4e40 <UiOrderShowMoves+0x34>)
    4e26:	2202      	movs	r2, #2
    4e28:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
    4e2a:	4b06      	ldr	r3, [pc, #24]	; (4e44 <UiOrderShowMoves+0x38>)
    4e2c:	2200      	movs	r2, #0
    4e2e:	701a      	strb	r2, [r3, #0]
}
    4e30:	46c0      	nop			; (mov r8, r8)
    4e32:	46bd      	mov	sp, r7
    4e34:	b002      	add	sp, #8
    4e36:	bd80      	pop	{r7, pc}
    4e38:	20004508 	.word	0x20004508
    4e3c:	00024781 	.word	0x00024781
    4e40:	2000452c 	.word	0x2000452c
    4e44:	20000644 	.word	0x20000644

00004e48 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
    4e48:	b580      	push	{r7, lr}
    4e4a:	af00      	add	r7, sp, #0
    return playIsDone;
    4e4c:	4b02      	ldr	r3, [pc, #8]	; (4e58 <UiPlayIsDone+0x10>)
    4e4e:	781b      	ldrb	r3, [r3, #0]
}
    4e50:	0018      	movs	r0, r3
    4e52:	46bd      	mov	sp, r7
    4e54:	bd80      	pop	{r7, pc}
    4e56:	46c0      	nop			; (mov r8, r8)
    4e58:	20000644 	.word	0x20000644

00004e5c <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
    4e5c:	b580      	push	{r7, lr}
    4e5e:	af00      	add	r7, sp, #0
    return &gamePacketOut;
    4e60:	4b01      	ldr	r3, [pc, #4]	; (4e68 <UiGetGamePacketOut+0xc>)
}
    4e62:	0018      	movs	r0, r3
    4e64:	46bd      	mov	sp, r7
    4e66:	bd80      	pop	{r7, pc}
    4e68:	200044f4 	.word	0x200044f4

00004e6c <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
    4e6c:	b590      	push	{r4, r7, lr}
    4e6e:	b083      	sub	sp, #12
    4e70:	af00      	add	r7, sp, #0
    4e72:	0004      	movs	r4, r0
    4e74:	0008      	movs	r0, r1
    4e76:	0011      	movs	r1, r2
    4e78:	1dfb      	adds	r3, r7, #7
    4e7a:	1c22      	adds	r2, r4, #0
    4e7c:	701a      	strb	r2, [r3, #0]
    4e7e:	1dbb      	adds	r3, r7, #6
    4e80:	1c02      	adds	r2, r0, #0
    4e82:	701a      	strb	r2, [r3, #0]
    4e84:	1d7b      	adds	r3, r7, #5
    4e86:	1c0a      	adds	r2, r1, #0
    4e88:	701a      	strb	r2, [r3, #0]
    red = r;
    4e8a:	4b08      	ldr	r3, [pc, #32]	; (4eac <UIChangeColors+0x40>)
    4e8c:	1dfa      	adds	r2, r7, #7
    4e8e:	7812      	ldrb	r2, [r2, #0]
    4e90:	701a      	strb	r2, [r3, #0]
    green = g;
    4e92:	4b07      	ldr	r3, [pc, #28]	; (4eb0 <UIChangeColors+0x44>)
    4e94:	1dba      	adds	r2, r7, #6
    4e96:	7812      	ldrb	r2, [r2, #0]
    4e98:	701a      	strb	r2, [r3, #0]
    blue = b;
    4e9a:	4b06      	ldr	r3, [pc, #24]	; (4eb4 <UIChangeColors+0x48>)
    4e9c:	1d7a      	adds	r2, r7, #5
    4e9e:	7812      	ldrb	r2, [r2, #0]
    4ea0:	701a      	strb	r2, [r3, #0]
}
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	46bd      	mov	sp, r7
    4ea6:	b003      	add	sp, #12
    4ea8:	bd90      	pop	{r4, r7, pc}
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	20000641 	.word	0x20000641
    4eb0:	20000020 	.word	0x20000020
    4eb4:	20000021 	.word	0x20000021

00004eb8 <system_pinmux_get_group_from_gpio_pin>:
{
    4eb8:	b580      	push	{r7, lr}
    4eba:	b084      	sub	sp, #16
    4ebc:	af00      	add	r7, sp, #0
    4ebe:	0002      	movs	r2, r0
    4ec0:	1dfb      	adds	r3, r7, #7
    4ec2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4ec4:	230f      	movs	r3, #15
    4ec6:	18fb      	adds	r3, r7, r3
    4ec8:	1dfa      	adds	r2, r7, #7
    4eca:	7812      	ldrb	r2, [r2, #0]
    4ecc:	09d2      	lsrs	r2, r2, #7
    4ece:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4ed0:	230e      	movs	r3, #14
    4ed2:	18fb      	adds	r3, r7, r3
    4ed4:	1dfa      	adds	r2, r7, #7
    4ed6:	7812      	ldrb	r2, [r2, #0]
    4ed8:	0952      	lsrs	r2, r2, #5
    4eda:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4edc:	4b0d      	ldr	r3, [pc, #52]	; (4f14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4ede:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4ee0:	230f      	movs	r3, #15
    4ee2:	18fb      	adds	r3, r7, r3
    4ee4:	781b      	ldrb	r3, [r3, #0]
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d10f      	bne.n	4f0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4eea:	230f      	movs	r3, #15
    4eec:	18fb      	adds	r3, r7, r3
    4eee:	781b      	ldrb	r3, [r3, #0]
    4ef0:	009b      	lsls	r3, r3, #2
    4ef2:	2210      	movs	r2, #16
    4ef4:	4694      	mov	ip, r2
    4ef6:	44bc      	add	ip, r7
    4ef8:	4463      	add	r3, ip
    4efa:	3b08      	subs	r3, #8
    4efc:	681a      	ldr	r2, [r3, #0]
    4efe:	230e      	movs	r3, #14
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	781b      	ldrb	r3, [r3, #0]
    4f04:	01db      	lsls	r3, r3, #7
    4f06:	18d3      	adds	r3, r2, r3
    4f08:	e000      	b.n	4f0c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4f0a:	2300      	movs	r3, #0
}
    4f0c:	0018      	movs	r0, r3
    4f0e:	46bd      	mov	sp, r7
    4f10:	b004      	add	sp, #16
    4f12:	bd80      	pop	{r7, pc}
    4f14:	41004400 	.word	0x41004400

00004f18 <port_get_group_from_gpio_pin>:
{
    4f18:	b580      	push	{r7, lr}
    4f1a:	b082      	sub	sp, #8
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	0002      	movs	r2, r0
    4f20:	1dfb      	adds	r3, r7, #7
    4f22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4f24:	1dfb      	adds	r3, r7, #7
    4f26:	781b      	ldrb	r3, [r3, #0]
    4f28:	0018      	movs	r0, r3
    4f2a:	4b03      	ldr	r3, [pc, #12]	; (4f38 <port_get_group_from_gpio_pin+0x20>)
    4f2c:	4798      	blx	r3
    4f2e:	0003      	movs	r3, r0
}
    4f30:	0018      	movs	r0, r3
    4f32:	46bd      	mov	sp, r7
    4f34:	b002      	add	sp, #8
    4f36:	bd80      	pop	{r7, pc}
    4f38:	00004eb9 	.word	0x00004eb9

00004f3c <port_pin_set_output_level>:
{
    4f3c:	b580      	push	{r7, lr}
    4f3e:	b084      	sub	sp, #16
    4f40:	af00      	add	r7, sp, #0
    4f42:	0002      	movs	r2, r0
    4f44:	1dfb      	adds	r3, r7, #7
    4f46:	701a      	strb	r2, [r3, #0]
    4f48:	1dbb      	adds	r3, r7, #6
    4f4a:	1c0a      	adds	r2, r1, #0
    4f4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4f4e:	1dfb      	adds	r3, r7, #7
    4f50:	781b      	ldrb	r3, [r3, #0]
    4f52:	0018      	movs	r0, r3
    4f54:	4b0d      	ldr	r3, [pc, #52]	; (4f8c <port_pin_set_output_level+0x50>)
    4f56:	4798      	blx	r3
    4f58:	0003      	movs	r3, r0
    4f5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4f5c:	1dfb      	adds	r3, r7, #7
    4f5e:	781b      	ldrb	r3, [r3, #0]
    4f60:	221f      	movs	r2, #31
    4f62:	4013      	ands	r3, r2
    4f64:	2201      	movs	r2, #1
    4f66:	409a      	lsls	r2, r3
    4f68:	0013      	movs	r3, r2
    4f6a:	60bb      	str	r3, [r7, #8]
	if (level) {
    4f6c:	1dbb      	adds	r3, r7, #6
    4f6e:	781b      	ldrb	r3, [r3, #0]
    4f70:	2b00      	cmp	r3, #0
    4f72:	d003      	beq.n	4f7c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4f74:	68fb      	ldr	r3, [r7, #12]
    4f76:	68ba      	ldr	r2, [r7, #8]
    4f78:	619a      	str	r2, [r3, #24]
}
    4f7a:	e002      	b.n	4f82 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    4f7c:	68fb      	ldr	r3, [r7, #12]
    4f7e:	68ba      	ldr	r2, [r7, #8]
    4f80:	615a      	str	r2, [r3, #20]
}
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	46bd      	mov	sp, r7
    4f86:	b004      	add	sp, #16
    4f88:	bd80      	pop	{r7, pc}
    4f8a:	46c0      	nop			; (mov r8, r8)
    4f8c:	00004f19 	.word	0x00004f19

00004f90 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
    4f94:	4b02      	ldr	r3, [pc, #8]	; (4fa0 <init_state+0x10>)
    4f96:	2200      	movs	r2, #0
    4f98:	701a      	strb	r2, [r3, #0]
}
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	46bd      	mov	sp, r7
    4f9e:	bd80      	pop	{r7, pc}
    4fa0:	20000659 	.word	0x20000659

00004fa4 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
    4fa4:	b580      	push	{r7, lr}
    4fa6:	b082      	sub	sp, #8
    4fa8:	af00      	add	r7, sp, #0
    4faa:	0002      	movs	r2, r0
    4fac:	1dfb      	adds	r3, r7, #7
    4fae:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
    4fb0:	1dfb      	adds	r3, r7, #7
    4fb2:	781b      	ldrb	r3, [r3, #0]
    4fb4:	b25b      	sxtb	r3, r3
    4fb6:	43db      	mvns	r3, r3
    4fb8:	b25b      	sxtb	r3, r3
    4fba:	4a06      	ldr	r2, [pc, #24]	; (4fd4 <clear_state+0x30>)
    4fbc:	7812      	ldrb	r2, [r2, #0]
    4fbe:	b252      	sxtb	r2, r2
    4fc0:	4013      	ands	r3, r2
    4fc2:	b25b      	sxtb	r3, r3
    4fc4:	b2da      	uxtb	r2, r3
    4fc6:	4b03      	ldr	r3, [pc, #12]	; (4fd4 <clear_state+0x30>)
    4fc8:	701a      	strb	r2, [r3, #0]
}
    4fca:	46c0      	nop			; (mov r8, r8)
    4fcc:	46bd      	mov	sp, r7
    4fce:	b002      	add	sp, #8
    4fd0:	bd80      	pop	{r7, pc}
    4fd2:	46c0      	nop			; (mov r8, r8)
    4fd4:	20000659 	.word	0x20000659

00004fd8 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	b082      	sub	sp, #8
    4fdc:	af00      	add	r7, sp, #0
    4fde:	0002      	movs	r2, r0
    4fe0:	1dfb      	adds	r3, r7, #7
    4fe2:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
    4fe4:	4b05      	ldr	r3, [pc, #20]	; (4ffc <add_state+0x24>)
    4fe6:	781a      	ldrb	r2, [r3, #0]
    4fe8:	1dfb      	adds	r3, r7, #7
    4fea:	781b      	ldrb	r3, [r3, #0]
    4fec:	4313      	orrs	r3, r2
    4fee:	b2da      	uxtb	r2, r3
    4ff0:	4b02      	ldr	r3, [pc, #8]	; (4ffc <add_state+0x24>)
    4ff2:	701a      	strb	r2, [r3, #0]
}
    4ff4:	46c0      	nop			; (mov r8, r8)
    4ff6:	46bd      	mov	sp, r7
    4ff8:	b002      	add	sp, #8
    4ffa:	bd80      	pop	{r7, pc}
    4ffc:	20000659 	.word	0x20000659

00005000 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
    5000:	b580      	push	{r7, lr}
    5002:	b082      	sub	sp, #8
    5004:	af00      	add	r7, sp, #0
    5006:	0002      	movs	r2, r0
    5008:	1dfb      	adds	r3, r7, #7
    500a:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
    500c:	4b06      	ldr	r3, [pc, #24]	; (5028 <is_state_set+0x28>)
    500e:	781b      	ldrb	r3, [r3, #0]
    5010:	1dfa      	adds	r2, r7, #7
    5012:	7812      	ldrb	r2, [r2, #0]
    5014:	4013      	ands	r3, r2
    5016:	b2db      	uxtb	r3, r3
    5018:	1e5a      	subs	r2, r3, #1
    501a:	4193      	sbcs	r3, r2
    501c:	b2db      	uxtb	r3, r3
}
    501e:	0018      	movs	r0, r3
    5020:	46bd      	mov	sp, r7
    5022:	b002      	add	sp, #8
    5024:	bd80      	pop	{r7, pc}
    5026:	46c0      	nop			; (mov r8, r8)
    5028:	20000659 	.word	0x20000659

0000502c <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
    502c:	b590      	push	{r4, r7, lr}
    502e:	b085      	sub	sp, #20
    5030:	af00      	add	r7, sp, #0
    5032:	6078      	str	r0, [r7, #4]
    5034:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	2b00      	cmp	r3, #0
    503a:	d002      	beq.n	5042 <is_exist_file+0x16>
    503c:	683b      	ldr	r3, [r7, #0]
    503e:	2b00      	cmp	r3, #0
    5040:	d101      	bne.n	5046 <is_exist_file+0x1a>
        return false;
    5042:	2300      	movs	r3, #0
    5044:	e013      	b.n	506e <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    5046:	230f      	movs	r3, #15
    5048:	18fc      	adds	r4, r7, r3
    504a:	6839      	ldr	r1, [r7, #0]
    504c:	4b0a      	ldr	r3, [pc, #40]	; (5078 <is_exist_file+0x4c>)
    504e:	2200      	movs	r2, #0
    5050:	0018      	movs	r0, r3
    5052:	4b0a      	ldr	r3, [pc, #40]	; (507c <is_exist_file+0x50>)
    5054:	4798      	blx	r3
    5056:	0003      	movs	r3, r0
    5058:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
    505a:	4b07      	ldr	r3, [pc, #28]	; (5078 <is_exist_file+0x4c>)
    505c:	0018      	movs	r0, r3
    505e:	4b08      	ldr	r3, [pc, #32]	; (5080 <is_exist_file+0x54>)
    5060:	4798      	blx	r3
    return (ret == FR_OK);
    5062:	230f      	movs	r3, #15
    5064:	18fb      	adds	r3, r7, r3
    5066:	781b      	ldrb	r3, [r3, #0]
    5068:	425a      	negs	r2, r3
    506a:	4153      	adcs	r3, r2
    506c:	b2db      	uxtb	r3, r3
}
    506e:	0018      	movs	r0, r3
    5070:	46bd      	mov	sp, r7
    5072:	b005      	add	sp, #20
    5074:	bd90      	pop	{r4, r7, pc}
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	2000088c 	.word	0x2000088c
    507c:	0001cc05 	.word	0x0001cc05
    5080:	0001d605 	.word	0x0001d605

00005084 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
    5084:	b580      	push	{r7, lr}
    5086:	b09e      	sub	sp, #120	; 0x78
    5088:	af00      	add	r7, sp, #0
    508a:	60f8      	str	r0, [r7, #12]
    508c:	60b9      	str	r1, [r7, #8]
    508e:	1dfb      	adds	r3, r7, #7
    5090:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
    5092:	2376      	movs	r3, #118	; 0x76
    5094:	18fb      	adds	r3, r7, r3
    5096:	2201      	movs	r2, #1
    5098:	801a      	strh	r2, [r3, #0]
    509a:	2374      	movs	r3, #116	; 0x74
    509c:	18fb      	adds	r3, r7, r3
    509e:	2200      	movs	r2, #0
    50a0:	801a      	strh	r2, [r3, #0]
    50a2:	236e      	movs	r3, #110	; 0x6e
    50a4:	18fb      	adds	r3, r7, r3
    50a6:	2200      	movs	r2, #0
    50a8:	801a      	strh	r2, [r3, #0]
    50aa:	2372      	movs	r3, #114	; 0x72
    50ac:	18fb      	adds	r3, r7, r3
    50ae:	2200      	movs	r2, #0
    50b0:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    50b2:	2324      	movs	r3, #36	; 0x24
    50b4:	18fb      	adds	r3, r7, r3
    50b6:	0018      	movs	r0, r3
    50b8:	2341      	movs	r3, #65	; 0x41
    50ba:	001a      	movs	r2, r3
    50bc:	2100      	movs	r1, #0
    50be:	4b92      	ldr	r3, [pc, #584]	; (5308 <rename_to_unique+0x284>)
    50c0:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    50c2:	2318      	movs	r3, #24
    50c4:	18fb      	adds	r3, r7, r3
    50c6:	0018      	movs	r0, r3
    50c8:	2309      	movs	r3, #9
    50ca:	001a      	movs	r2, r3
    50cc:	2100      	movs	r1, #0
    50ce:	4b8e      	ldr	r3, [pc, #568]	; (5308 <rename_to_unique+0x284>)
    50d0:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
    50d2:	2314      	movs	r3, #20
    50d4:	18fb      	adds	r3, r7, r3
    50d6:	2200      	movs	r2, #0
    50d8:	601a      	str	r2, [r3, #0]
    char *p = NULL;
    50da:	2300      	movs	r3, #0
    50dc:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
    50de:	2371      	movs	r3, #113	; 0x71
    50e0:	18fb      	adds	r3, r7, r3
    50e2:	2200      	movs	r2, #0
    50e4:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
    50e6:	68bb      	ldr	r3, [r7, #8]
    50e8:	2b00      	cmp	r3, #0
    50ea:	d101      	bne.n	50f0 <rename_to_unique+0x6c>
        return false;
    50ec:	2300      	movs	r3, #0
    50ee:	e106      	b.n	52fe <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
    50f0:	68ba      	ldr	r2, [r7, #8]
    50f2:	68fb      	ldr	r3, [r7, #12]
    50f4:	0011      	movs	r1, r2
    50f6:	0018      	movs	r0, r3
    50f8:	4b84      	ldr	r3, [pc, #528]	; (530c <rename_to_unique+0x288>)
    50fa:	4798      	blx	r3
    50fc:	0003      	movs	r3, r0
    50fe:	001a      	movs	r2, r3
    5100:	2301      	movs	r3, #1
    5102:	4053      	eors	r3, r2
    5104:	b2db      	uxtb	r3, r3
    5106:	2b00      	cmp	r3, #0
    5108:	d001      	beq.n	510e <rename_to_unique+0x8a>
        return true;
    510a:	2301      	movs	r3, #1
    510c:	e0f7      	b.n	52fe <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    510e:	68bb      	ldr	r3, [r7, #8]
    5110:	0018      	movs	r0, r3
    5112:	4b7f      	ldr	r3, [pc, #508]	; (5310 <rename_to_unique+0x28c>)
    5114:	4798      	blx	r3
    5116:	0003      	movs	r3, r0
    5118:	2b40      	cmp	r3, #64	; 0x40
    511a:	d901      	bls.n	5120 <rename_to_unique+0x9c>
        return false;
    511c:	2300      	movs	r3, #0
    511e:	e0ee      	b.n	52fe <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
    5120:	68bb      	ldr	r3, [r7, #8]
    5122:	212e      	movs	r1, #46	; 0x2e
    5124:	0018      	movs	r0, r3
    5126:	4b7b      	ldr	r3, [pc, #492]	; (5314 <rename_to_unique+0x290>)
    5128:	4798      	blx	r3
    512a:	0003      	movs	r3, r0
    512c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
    512e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5130:	2b00      	cmp	r3, #0
    5132:	d052      	beq.n	51da <rename_to_unique+0x156>
        ext_len = strlen(p);
    5134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5136:	0018      	movs	r0, r3
    5138:	4b75      	ldr	r3, [pc, #468]	; (5310 <rename_to_unique+0x28c>)
    513a:	4798      	blx	r3
    513c:	0002      	movs	r2, r0
    513e:	236e      	movs	r3, #110	; 0x6e
    5140:	18fb      	adds	r3, r7, r3
    5142:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    5144:	236e      	movs	r3, #110	; 0x6e
    5146:	18fb      	adds	r3, r7, r3
    5148:	881b      	ldrh	r3, [r3, #0]
    514a:	2b07      	cmp	r3, #7
    514c:	d837      	bhi.n	51be <rename_to_unique+0x13a>
            valid_ext = true;
    514e:	2371      	movs	r3, #113	; 0x71
    5150:	18fb      	adds	r3, r7, r3
    5152:	2201      	movs	r2, #1
    5154:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
    5156:	6eba      	ldr	r2, [r7, #104]	; 0x68
    5158:	2318      	movs	r3, #24
    515a:	18fb      	adds	r3, r7, r3
    515c:	0011      	movs	r1, r2
    515e:	0018      	movs	r0, r3
    5160:	4b6d      	ldr	r3, [pc, #436]	; (5318 <rename_to_unique+0x294>)
    5162:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    5164:	68bb      	ldr	r3, [r7, #8]
    5166:	0018      	movs	r0, r3
    5168:	4b69      	ldr	r3, [pc, #420]	; (5310 <rename_to_unique+0x28c>)
    516a:	4798      	blx	r3
    516c:	0002      	movs	r2, r0
    516e:	236e      	movs	r3, #110	; 0x6e
    5170:	18fb      	adds	r3, r7, r3
    5172:	881b      	ldrh	r3, [r3, #0]
    5174:	1ad3      	subs	r3, r2, r3
    5176:	2b3c      	cmp	r3, #60	; 0x3c
    5178:	d911      	bls.n	519e <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    517a:	2374      	movs	r3, #116	; 0x74
    517c:	18fb      	adds	r3, r7, r3
    517e:	226e      	movs	r2, #110	; 0x6e
    5180:	18ba      	adds	r2, r7, r2
    5182:	8812      	ldrh	r2, [r2, #0]
    5184:	213c      	movs	r1, #60	; 0x3c
    5186:	1a8a      	subs	r2, r1, r2
    5188:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    518a:	2374      	movs	r3, #116	; 0x74
    518c:	18fb      	adds	r3, r7, r3
    518e:	881a      	ldrh	r2, [r3, #0]
    5190:	68b9      	ldr	r1, [r7, #8]
    5192:	2324      	movs	r3, #36	; 0x24
    5194:	18fb      	adds	r3, r7, r3
    5196:	0018      	movs	r0, r3
    5198:	4b60      	ldr	r3, [pc, #384]	; (531c <rename_to_unique+0x298>)
    519a:	4798      	blx	r3
    519c:	e02a      	b.n	51f4 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
    519e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    51a0:	68bb      	ldr	r3, [r7, #8]
    51a2:	1ad2      	subs	r2, r2, r3
    51a4:	2374      	movs	r3, #116	; 0x74
    51a6:	18fb      	adds	r3, r7, r3
    51a8:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    51aa:	2374      	movs	r3, #116	; 0x74
    51ac:	18fb      	adds	r3, r7, r3
    51ae:	881a      	ldrh	r2, [r3, #0]
    51b0:	68b9      	ldr	r1, [r7, #8]
    51b2:	2324      	movs	r3, #36	; 0x24
    51b4:	18fb      	adds	r3, r7, r3
    51b6:	0018      	movs	r0, r3
    51b8:	4b58      	ldr	r3, [pc, #352]	; (531c <rename_to_unique+0x298>)
    51ba:	4798      	blx	r3
    51bc:	e01a      	b.n	51f4 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    51be:	2374      	movs	r3, #116	; 0x74
    51c0:	18fb      	adds	r3, r7, r3
    51c2:	223c      	movs	r2, #60	; 0x3c
    51c4:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
    51c6:	2374      	movs	r3, #116	; 0x74
    51c8:	18fb      	adds	r3, r7, r3
    51ca:	881a      	ldrh	r2, [r3, #0]
    51cc:	68b9      	ldr	r1, [r7, #8]
    51ce:	2324      	movs	r3, #36	; 0x24
    51d0:	18fb      	adds	r3, r7, r3
    51d2:	0018      	movs	r0, r3
    51d4:	4b51      	ldr	r3, [pc, #324]	; (531c <rename_to_unique+0x298>)
    51d6:	4798      	blx	r3
    51d8:	e00c      	b.n	51f4 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    51da:	2374      	movs	r3, #116	; 0x74
    51dc:	18fb      	adds	r3, r7, r3
    51de:	223c      	movs	r2, #60	; 0x3c
    51e0:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
    51e2:	2374      	movs	r3, #116	; 0x74
    51e4:	18fb      	adds	r3, r7, r3
    51e6:	881a      	ldrh	r2, [r3, #0]
    51e8:	68b9      	ldr	r1, [r7, #8]
    51ea:	2324      	movs	r3, #36	; 0x24
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	0018      	movs	r0, r3
    51f0:	4b4a      	ldr	r3, [pc, #296]	; (531c <rename_to_unique+0x298>)
    51f2:	4798      	blx	r3
    }

    name[name_len++] = '-';
    51f4:	2374      	movs	r3, #116	; 0x74
    51f6:	18fb      	adds	r3, r7, r3
    51f8:	881b      	ldrh	r3, [r3, #0]
    51fa:	2274      	movs	r2, #116	; 0x74
    51fc:	18ba      	adds	r2, r7, r2
    51fe:	1c59      	adds	r1, r3, #1
    5200:	8011      	strh	r1, [r2, #0]
    5202:	001a      	movs	r2, r3
    5204:	2324      	movs	r3, #36	; 0x24
    5206:	18fb      	adds	r3, r7, r3
    5208:	212d      	movs	r1, #45	; 0x2d
    520a:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    520c:	2376      	movs	r3, #118	; 0x76
    520e:	18fb      	adds	r3, r7, r3
    5210:	2200      	movs	r2, #0
    5212:	801a      	strh	r2, [r3, #0]
    5214:	2372      	movs	r3, #114	; 0x72
    5216:	18fb      	adds	r3, r7, r3
    5218:	2201      	movs	r2, #1
    521a:	801a      	strh	r2, [r3, #0]
    521c:	e010      	b.n	5240 <rename_to_unique+0x1bc>
        count *= 10;
    521e:	2372      	movs	r3, #114	; 0x72
    5220:	18fa      	adds	r2, r7, r3
    5222:	2372      	movs	r3, #114	; 0x72
    5224:	18fb      	adds	r3, r7, r3
    5226:	881b      	ldrh	r3, [r3, #0]
    5228:	1c19      	adds	r1, r3, #0
    522a:	0089      	lsls	r1, r1, #2
    522c:	18cb      	adds	r3, r1, r3
    522e:	18db      	adds	r3, r3, r3
    5230:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    5232:	2376      	movs	r3, #118	; 0x76
    5234:	18fb      	adds	r3, r7, r3
    5236:	881a      	ldrh	r2, [r3, #0]
    5238:	2376      	movs	r3, #118	; 0x76
    523a:	18fb      	adds	r3, r7, r3
    523c:	3201      	adds	r2, #1
    523e:	801a      	strh	r2, [r3, #0]
    5240:	2376      	movs	r3, #118	; 0x76
    5242:	18fb      	adds	r3, r7, r3
    5244:	881b      	ldrh	r3, [r3, #0]
    5246:	2b02      	cmp	r3, #2
    5248:	d9e9      	bls.n	521e <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
    524a:	2376      	movs	r3, #118	; 0x76
    524c:	18fb      	adds	r3, r7, r3
    524e:	2201      	movs	r2, #1
    5250:	801a      	strh	r2, [r3, #0]
    5252:	e04b      	b.n	52ec <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    5254:	2376      	movs	r3, #118	; 0x76
    5256:	18fb      	adds	r3, r7, r3
    5258:	881a      	ldrh	r2, [r3, #0]
    525a:	4931      	ldr	r1, [pc, #196]	; (5320 <rename_to_unique+0x29c>)
    525c:	2314      	movs	r3, #20
    525e:	18fb      	adds	r3, r7, r3
    5260:	0018      	movs	r0, r3
    5262:	4b30      	ldr	r3, [pc, #192]	; (5324 <rename_to_unique+0x2a0>)
    5264:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
    5266:	2374      	movs	r3, #116	; 0x74
    5268:	18fb      	adds	r3, r7, r3
    526a:	881b      	ldrh	r3, [r3, #0]
    526c:	2224      	movs	r2, #36	; 0x24
    526e:	18ba      	adds	r2, r7, r2
    5270:	18d3      	adds	r3, r2, r3
    5272:	2214      	movs	r2, #20
    5274:	18b9      	adds	r1, r7, r2
    5276:	2203      	movs	r2, #3
    5278:	0018      	movs	r0, r3
    527a:	4b28      	ldr	r3, [pc, #160]	; (531c <rename_to_unique+0x298>)
    527c:	4798      	blx	r3
        if (valid_ext) {
    527e:	2371      	movs	r3, #113	; 0x71
    5280:	18fb      	adds	r3, r7, r3
    5282:	781b      	ldrb	r3, [r3, #0]
    5284:	2b00      	cmp	r3, #0
    5286:	d00c      	beq.n	52a2 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
    5288:	2374      	movs	r3, #116	; 0x74
    528a:	18fb      	adds	r3, r7, r3
    528c:	881b      	ldrh	r3, [r3, #0]
    528e:	3303      	adds	r3, #3
    5290:	2224      	movs	r2, #36	; 0x24
    5292:	18ba      	adds	r2, r7, r2
    5294:	18d3      	adds	r3, r2, r3
    5296:	2218      	movs	r2, #24
    5298:	18ba      	adds	r2, r7, r2
    529a:	0011      	movs	r1, r2
    529c:	0018      	movs	r0, r3
    529e:	4b1e      	ldr	r3, [pc, #120]	; (5318 <rename_to_unique+0x294>)
    52a0:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
    52a2:	2324      	movs	r3, #36	; 0x24
    52a4:	18fa      	adds	r2, r7, r3
    52a6:	68fb      	ldr	r3, [r7, #12]
    52a8:	0011      	movs	r1, r2
    52aa:	0018      	movs	r0, r3
    52ac:	4b17      	ldr	r3, [pc, #92]	; (530c <rename_to_unique+0x288>)
    52ae:	4798      	blx	r3
    52b0:	0003      	movs	r3, r0
    52b2:	001a      	movs	r2, r3
    52b4:	2301      	movs	r3, #1
    52b6:	4053      	eors	r3, r2
    52b8:	b2db      	uxtb	r3, r3
    52ba:	2b00      	cmp	r3, #0
    52bc:	d00f      	beq.n	52de <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
    52be:	1dfb      	adds	r3, r7, #7
    52c0:	781a      	ldrb	r2, [r3, #0]
    52c2:	68bb      	ldr	r3, [r7, #8]
    52c4:	2100      	movs	r1, #0
    52c6:	0018      	movs	r0, r3
    52c8:	4b0f      	ldr	r3, [pc, #60]	; (5308 <rename_to_unique+0x284>)
    52ca:	4798      	blx	r3
            strcpy(file_path_name, name);
    52cc:	2324      	movs	r3, #36	; 0x24
    52ce:	18fa      	adds	r2, r7, r3
    52d0:	68bb      	ldr	r3, [r7, #8]
    52d2:	0011      	movs	r1, r2
    52d4:	0018      	movs	r0, r3
    52d6:	4b10      	ldr	r3, [pc, #64]	; (5318 <rename_to_unique+0x294>)
    52d8:	4798      	blx	r3
            return true;
    52da:	2301      	movs	r3, #1
    52dc:	e00f      	b.n	52fe <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
    52de:	2376      	movs	r3, #118	; 0x76
    52e0:	18fb      	adds	r3, r7, r3
    52e2:	881a      	ldrh	r2, [r3, #0]
    52e4:	2376      	movs	r3, #118	; 0x76
    52e6:	18fb      	adds	r3, r7, r3
    52e8:	3201      	adds	r2, #1
    52ea:	801a      	strh	r2, [r3, #0]
    52ec:	2376      	movs	r3, #118	; 0x76
    52ee:	18fa      	adds	r2, r7, r3
    52f0:	2372      	movs	r3, #114	; 0x72
    52f2:	18fb      	adds	r3, r7, r3
    52f4:	8812      	ldrh	r2, [r2, #0]
    52f6:	881b      	ldrh	r3, [r3, #0]
    52f8:	429a      	cmp	r2, r3
    52fa:	d3ab      	bcc.n	5254 <rename_to_unique+0x1d0>
        }
    }
    return false;
    52fc:	2300      	movs	r3, #0
}
    52fe:	0018      	movs	r0, r3
    5300:	46bd      	mov	sp, r7
    5302:	b01e      	add	sp, #120	; 0x78
    5304:	bd80      	pop	{r7, pc}
    5306:	46c0      	nop			; (mov r8, r8)
    5308:	000247b7 	.word	0x000247b7
    530c:	0000502d 	.word	0x0000502d
    5310:	00024b6f 	.word	0x00024b6f
    5314:	00024bc9 	.word	0x00024bc9
    5318:	00024b23 	.word	0x00024b23
    531c:	00024b9f 	.word	0x00024b9f
    5320:	00026210 	.word	0x00026210
    5324:	00024a75 	.word	0x00024a75

00005328 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
    5328:	b590      	push	{r4, r7, lr}
    532a:	b085      	sub	sp, #20
    532c:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
    532e:	2001      	movs	r0, #1
    5330:	4b23      	ldr	r3, [pc, #140]	; (53c0 <start_download+0x98>)
    5332:	4798      	blx	r3
    5334:	0003      	movs	r3, r0
    5336:	001a      	movs	r2, r3
    5338:	2301      	movs	r3, #1
    533a:	4053      	eors	r3, r2
    533c:	b2db      	uxtb	r3, r3
    533e:	2b00      	cmp	r3, #0
    5340:	d005      	beq.n	534e <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
    5342:	4b20      	ldr	r3, [pc, #128]	; (53c4 <start_download+0x9c>)
    5344:	0019      	movs	r1, r3
    5346:	2001      	movs	r0, #1
    5348:	4b1f      	ldr	r3, [pc, #124]	; (53c8 <start_download+0xa0>)
    534a:	4798      	blx	r3
        return;
    534c:	e034      	b.n	53b8 <start_download+0x90>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
    534e:	2002      	movs	r0, #2
    5350:	4b1b      	ldr	r3, [pc, #108]	; (53c0 <start_download+0x98>)
    5352:	4798      	blx	r3
    5354:	0003      	movs	r3, r0
    5356:	001a      	movs	r2, r3
    5358:	2301      	movs	r3, #1
    535a:	4053      	eors	r3, r2
    535c:	b2db      	uxtb	r3, r3
    535e:	2b00      	cmp	r3, #0
    5360:	d005      	beq.n	536e <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
    5362:	4b1a      	ldr	r3, [pc, #104]	; (53cc <start_download+0xa4>)
    5364:	0019      	movs	r1, r3
    5366:	2001      	movs	r0, #1
    5368:	4b17      	ldr	r3, [pc, #92]	; (53c8 <start_download+0xa0>)
    536a:	4798      	blx	r3
        return;
    536c:	e024      	b.n	53b8 <start_download+0x90>
    }

    if (is_state_set(GET_REQUESTED)) {
    536e:	2004      	movs	r0, #4
    5370:	4b13      	ldr	r3, [pc, #76]	; (53c0 <start_download+0x98>)
    5372:	4798      	blx	r3
    5374:	1e03      	subs	r3, r0, #0
    5376:	d005      	beq.n	5384 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
    5378:	4b15      	ldr	r3, [pc, #84]	; (53d0 <start_download+0xa8>)
    537a:	0019      	movs	r1, r3
    537c:	2001      	movs	r0, #1
    537e:	4b12      	ldr	r3, [pc, #72]	; (53c8 <start_download+0xa0>)
    5380:	4798      	blx	r3
        return;
    5382:	e019      	b.n	53b8 <start_download+0x90>
    }

    if (is_state_set(DOWNLOADING)) {
    5384:	2008      	movs	r0, #8
    5386:	4b0e      	ldr	r3, [pc, #56]	; (53c0 <start_download+0x98>)
    5388:	4798      	blx	r3
    538a:	1e03      	subs	r3, r0, #0
    538c:	d005      	beq.n	539a <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
    538e:	4b11      	ldr	r3, [pc, #68]	; (53d4 <start_download+0xac>)
    5390:	0019      	movs	r1, r3
    5392:	2001      	movs	r0, #1
    5394:	4b0c      	ldr	r3, [pc, #48]	; (53c8 <start_download+0xa0>)
    5396:	4798      	blx	r3
        return;
    5398:	e00e      	b.n	53b8 <start_download+0x90>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
    539a:	4b0f      	ldr	r3, [pc, #60]	; (53d8 <start_download+0xb0>)
    539c:	0019      	movs	r1, r3
    539e:	2001      	movs	r0, #1
    53a0:	4b09      	ldr	r3, [pc, #36]	; (53c8 <start_download+0xa0>)
    53a2:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    53a4:	490d      	ldr	r1, [pc, #52]	; (53dc <start_download+0xb4>)
    53a6:	480e      	ldr	r0, [pc, #56]	; (53e0 <start_download+0xb8>)
    53a8:	2300      	movs	r3, #0
    53aa:	9300      	str	r3, [sp, #0]
    53ac:	2300      	movs	r3, #0
    53ae:	2201      	movs	r2, #1
    53b0:	4c0c      	ldr	r4, [pc, #48]	; (53e4 <start_download+0xbc>)
    53b2:	47a0      	blx	r4
    53b4:	0003      	movs	r3, r0
    53b6:	607b      	str	r3, [r7, #4]
}
    53b8:	46bd      	mov	sp, r7
    53ba:	b003      	add	sp, #12
    53bc:	bd90      	pop	{r4, r7, pc}
    53be:	46c0      	nop			; (mov r8, r8)
    53c0:	00005001 	.word	0x00005001
    53c4:	00026218 	.word	0x00026218
    53c8:	0000d0f5 	.word	0x0000d0f5
    53cc:	00026244 	.word	0x00026244
    53d0:	00026270 	.word	0x00026270
    53d4:	0002629c 	.word	0x0002629c
    53d8:	000262c8 	.word	0x000262c8
    53dc:	000262f4 	.word	0x000262f4
    53e0:	20004588 	.word	0x20004588
    53e4:	00020259 	.word	0x00020259

000053e8 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
    53e8:	b5b0      	push	{r4, r5, r7, lr}
    53ea:	b086      	sub	sp, #24
    53ec:	af00      	add	r7, sp, #0
    53ee:	6078      	str	r0, [r7, #4]
    53f0:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d002      	beq.n	53fe <store_file_packet+0x16>
    53f8:	683b      	ldr	r3, [r7, #0]
    53fa:	2b00      	cmp	r3, #0
    53fc:	d105      	bne.n	540a <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
    53fe:	4b58      	ldr	r3, [pc, #352]	; (5560 <store_file_packet+0x178>)
    5400:	0019      	movs	r1, r3
    5402:	2001      	movs	r0, #1
    5404:	4b57      	ldr	r3, [pc, #348]	; (5564 <store_file_packet+0x17c>)
    5406:	4798      	blx	r3
        return;
    5408:	e0a6      	b.n	5558 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
    540a:	2008      	movs	r0, #8
    540c:	4b56      	ldr	r3, [pc, #344]	; (5568 <store_file_packet+0x180>)
    540e:	4798      	blx	r3
    5410:	0003      	movs	r3, r0
    5412:	001a      	movs	r2, r3
    5414:	2301      	movs	r3, #1
    5416:	4053      	eors	r3, r2
    5418:	b2db      	uxtb	r3, r3
    541a:	2b00      	cmp	r3, #0
    541c:	d055      	beq.n	54ca <store_file_packet+0xe2>
        char *cp = NULL;
    541e:	2300      	movs	r3, #0
    5420:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5422:	4b52      	ldr	r3, [pc, #328]	; (556c <store_file_packet+0x184>)
    5424:	2230      	movs	r2, #48	; 0x30
    5426:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
    5428:	4b50      	ldr	r3, [pc, #320]	; (556c <store_file_packet+0x184>)
    542a:	223a      	movs	r2, #58	; 0x3a
    542c:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
    542e:	4b50      	ldr	r3, [pc, #320]	; (5570 <store_file_packet+0x188>)
    5430:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    5432:	e002      	b.n	543a <store_file_packet+0x52>
            cp--;
    5434:	697b      	ldr	r3, [r7, #20]
    5436:	3b01      	subs	r3, #1
    5438:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    543a:	697b      	ldr	r3, [r7, #20]
    543c:	781b      	ldrb	r3, [r3, #0]
    543e:	2b2f      	cmp	r3, #47	; 0x2f
    5440:	d1f8      	bne.n	5434 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
    5442:	697b      	ldr	r3, [r7, #20]
    5444:	0018      	movs	r0, r3
    5446:	4b4b      	ldr	r3, [pc, #300]	; (5574 <store_file_packet+0x18c>)
    5448:	4798      	blx	r3
    544a:	0003      	movs	r3, r0
    544c:	2b01      	cmp	r3, #1
    544e:	d924      	bls.n	549a <store_file_packet+0xb2>
            cp++;
    5450:	697b      	ldr	r3, [r7, #20]
    5452:	3301      	adds	r3, #1
    5454:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
    5456:	697a      	ldr	r2, [r7, #20]
    5458:	4b47      	ldr	r3, [pc, #284]	; (5578 <store_file_packet+0x190>)
    545a:	0011      	movs	r1, r2
    545c:	0018      	movs	r0, r3
    545e:	4b47      	ldr	r3, [pc, #284]	; (557c <store_file_packet+0x194>)
    5460:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    5462:	4942      	ldr	r1, [pc, #264]	; (556c <store_file_packet+0x184>)
    5464:	4b46      	ldr	r3, [pc, #280]	; (5580 <store_file_packet+0x198>)
    5466:	2240      	movs	r2, #64	; 0x40
    5468:	0018      	movs	r0, r3
    546a:	4b46      	ldr	r3, [pc, #280]	; (5584 <store_file_packet+0x19c>)
    546c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
    546e:	4a3f      	ldr	r2, [pc, #252]	; (556c <store_file_packet+0x184>)
    5470:	4b45      	ldr	r3, [pc, #276]	; (5588 <store_file_packet+0x1a0>)
    5472:	0019      	movs	r1, r3
    5474:	2001      	movs	r0, #1
    5476:	4b3b      	ldr	r3, [pc, #236]	; (5564 <store_file_packet+0x17c>)
    5478:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    547a:	2313      	movs	r3, #19
    547c:	18fc      	adds	r4, r7, r3
    547e:	493b      	ldr	r1, [pc, #236]	; (556c <store_file_packet+0x184>)
    5480:	4b3f      	ldr	r3, [pc, #252]	; (5580 <store_file_packet+0x198>)
    5482:	220a      	movs	r2, #10
    5484:	0018      	movs	r0, r3
    5486:	4b41      	ldr	r3, [pc, #260]	; (558c <store_file_packet+0x1a4>)
    5488:	4798      	blx	r3
    548a:	0003      	movs	r3, r0
    548c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    548e:	2313      	movs	r3, #19
    5490:	18fb      	adds	r3, r7, r3
    5492:	781b      	ldrb	r3, [r3, #0]
    5494:	2b00      	cmp	r3, #0
    5496:	d012      	beq.n	54be <store_file_packet+0xd6>
    5498:	e008      	b.n	54ac <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
    549a:	4b3d      	ldr	r3, [pc, #244]	; (5590 <store_file_packet+0x1a8>)
    549c:	0019      	movs	r1, r3
    549e:	2001      	movs	r0, #1
    54a0:	4b30      	ldr	r3, [pc, #192]	; (5564 <store_file_packet+0x17c>)
    54a2:	4798      	blx	r3
            add_state(CANCELED);
    54a4:	2020      	movs	r0, #32
    54a6:	4b3b      	ldr	r3, [pc, #236]	; (5594 <store_file_packet+0x1ac>)
    54a8:	4798      	blx	r3
            return;
    54aa:	e055      	b.n	5558 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
    54ac:	2313      	movs	r3, #19
    54ae:	18fb      	adds	r3, r7, r3
    54b0:	781a      	ldrb	r2, [r3, #0]
    54b2:	4b39      	ldr	r3, [pc, #228]	; (5598 <store_file_packet+0x1b0>)
    54b4:	0019      	movs	r1, r3
    54b6:	2001      	movs	r0, #1
    54b8:	4b2a      	ldr	r3, [pc, #168]	; (5564 <store_file_packet+0x17c>)
    54ba:	4798      	blx	r3
            return;
    54bc:	e04c      	b.n	5558 <store_file_packet+0x170>
        }

        received_file_size = 0;
    54be:	4b37      	ldr	r3, [pc, #220]	; (559c <store_file_packet+0x1b4>)
    54c0:	2200      	movs	r2, #0
    54c2:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
    54c4:	2008      	movs	r0, #8
    54c6:	4b33      	ldr	r3, [pc, #204]	; (5594 <store_file_packet+0x1ac>)
    54c8:	4798      	blx	r3
    }

    if (data != NULL) {
    54ca:	687b      	ldr	r3, [r7, #4]
    54cc:	2b00      	cmp	r3, #0
    54ce:	d043      	beq.n	5558 <store_file_packet+0x170>
        UINT wsize = 0;
    54d0:	2300      	movs	r3, #0
    54d2:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
    54d4:	2313      	movs	r3, #19
    54d6:	18fc      	adds	r4, r7, r3
    54d8:	230c      	movs	r3, #12
    54da:	18fb      	adds	r3, r7, r3
    54dc:	683a      	ldr	r2, [r7, #0]
    54de:	6879      	ldr	r1, [r7, #4]
    54e0:	4827      	ldr	r0, [pc, #156]	; (5580 <store_file_packet+0x198>)
    54e2:	4d2f      	ldr	r5, [pc, #188]	; (55a0 <store_file_packet+0x1b8>)
    54e4:	47a8      	blx	r5
    54e6:	0003      	movs	r3, r0
    54e8:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    54ea:	2313      	movs	r3, #19
    54ec:	18fb      	adds	r3, r7, r3
    54ee:	781b      	ldrb	r3, [r3, #0]
    54f0:	2b00      	cmp	r3, #0
    54f2:	d00c      	beq.n	550e <store_file_packet+0x126>
            f_close(&file_object);
    54f4:	4b22      	ldr	r3, [pc, #136]	; (5580 <store_file_packet+0x198>)
    54f6:	0018      	movs	r0, r3
    54f8:	4b2a      	ldr	r3, [pc, #168]	; (55a4 <store_file_packet+0x1bc>)
    54fa:	4798      	blx	r3
            add_state(CANCELED);
    54fc:	2020      	movs	r0, #32
    54fe:	4b25      	ldr	r3, [pc, #148]	; (5594 <store_file_packet+0x1ac>)
    5500:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
    5502:	4b29      	ldr	r3, [pc, #164]	; (55a8 <store_file_packet+0x1c0>)
    5504:	0019      	movs	r1, r3
    5506:	2001      	movs	r0, #1
    5508:	4b16      	ldr	r3, [pc, #88]	; (5564 <store_file_packet+0x17c>)
    550a:	4798      	blx	r3
            return;
    550c:	e024      	b.n	5558 <store_file_packet+0x170>
        }

        received_file_size += wsize;
    550e:	4b23      	ldr	r3, [pc, #140]	; (559c <store_file_packet+0x1b4>)
    5510:	681a      	ldr	r2, [r3, #0]
    5512:	68fb      	ldr	r3, [r7, #12]
    5514:	18d2      	adds	r2, r2, r3
    5516:	4b21      	ldr	r3, [pc, #132]	; (559c <store_file_packet+0x1b4>)
    5518:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    551a:	4b20      	ldr	r3, [pc, #128]	; (559c <store_file_packet+0x1b4>)
    551c:	681a      	ldr	r2, [r3, #0]
    551e:	4b23      	ldr	r3, [pc, #140]	; (55ac <store_file_packet+0x1c4>)
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	4923      	ldr	r1, [pc, #140]	; (55b0 <store_file_packet+0x1c8>)
    5524:	2001      	movs	r0, #1
    5526:	4c0f      	ldr	r4, [pc, #60]	; (5564 <store_file_packet+0x17c>)
    5528:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
    552a:	4b1c      	ldr	r3, [pc, #112]	; (559c <store_file_packet+0x1b4>)
    552c:	681a      	ldr	r2, [r3, #0]
    552e:	4b1f      	ldr	r3, [pc, #124]	; (55ac <store_file_packet+0x1c4>)
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	429a      	cmp	r2, r3
    5534:	d310      	bcc.n	5558 <store_file_packet+0x170>
            f_close(&file_object);
    5536:	4b12      	ldr	r3, [pc, #72]	; (5580 <store_file_packet+0x198>)
    5538:	0018      	movs	r0, r3
    553a:	4b1a      	ldr	r3, [pc, #104]	; (55a4 <store_file_packet+0x1bc>)
    553c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
    553e:	4b1d      	ldr	r3, [pc, #116]	; (55b4 <store_file_packet+0x1cc>)
    5540:	0019      	movs	r1, r3
    5542:	2001      	movs	r0, #1
    5544:	4b07      	ldr	r3, [pc, #28]	; (5564 <store_file_packet+0x17c>)
    5546:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
    5548:	2100      	movs	r1, #0
    554a:	2017      	movs	r0, #23
    554c:	4b1a      	ldr	r3, [pc, #104]	; (55b8 <store_file_packet+0x1d0>)
    554e:	4798      	blx	r3
            add_state(COMPLETED);
    5550:	2010      	movs	r0, #16
    5552:	4b10      	ldr	r3, [pc, #64]	; (5594 <store_file_packet+0x1ac>)
    5554:	4798      	blx	r3
            return;
    5556:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    5558:	46bd      	mov	sp, r7
    555a:	b006      	add	sp, #24
    555c:	bdb0      	pop	{r4, r5, r7, pc}
    555e:	46c0      	nop			; (mov r8, r8)
    5560:	00026314 	.word	0x00026314
    5564:	0000d0f5 	.word	0x0000d0f5
    5568:	00005001 	.word	0x00005001
    556c:	200000a8 	.word	0x200000a8
    5570:	00026313 	.word	0x00026313
    5574:	00024b6f 	.word	0x00024b6f
    5578:	200000aa 	.word	0x200000aa
    557c:	00024b23 	.word	0x00024b23
    5580:	2000088c 	.word	0x2000088c
    5584:	00005085 	.word	0x00005085
    5588:	00026378 	.word	0x00026378
    558c:	0001cc05 	.word	0x0001cc05
    5590:	00026338 	.word	0x00026338
    5594:	00004fd9 	.word	0x00004fd9
    5598:	000263a0 	.word	0x000263a0
    559c:	200008b4 	.word	0x200008b4
    55a0:	0001d135 	.word	0x0001d135
    55a4:	0001d605 	.word	0x0001d605
    55a8:	000263d4 	.word	0x000263d4
    55ac:	200008b0 	.word	0x200008b0
    55b0:	00026410 	.word	0x00026410
    55b4:	00026444 	.word	0x00026444
    55b8:	00004f3d 	.word	0x00004f3d

000055bc <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    55bc:	b590      	push	{r4, r7, lr}
    55be:	b085      	sub	sp, #20
    55c0:	af00      	add	r7, sp, #0
    55c2:	60f8      	str	r0, [r7, #12]
    55c4:	60b9      	str	r1, [r7, #8]
    55c6:	607a      	str	r2, [r7, #4]
    switch (type) {
    55c8:	68bb      	ldr	r3, [r7, #8]
    55ca:	2b04      	cmp	r3, #4
    55cc:	d900      	bls.n	55d0 <http_client_callback+0x14>
    55ce:	e077      	b.n	56c0 <http_client_callback+0x104>
    55d0:	68bb      	ldr	r3, [r7, #8]
    55d2:	009a      	lsls	r2, r3, #2
    55d4:	4b3c      	ldr	r3, [pc, #240]	; (56c8 <http_client_callback+0x10c>)
    55d6:	18d3      	adds	r3, r2, r3
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
    55dc:	4b3b      	ldr	r3, [pc, #236]	; (56cc <http_client_callback+0x110>)
    55de:	0019      	movs	r1, r3
    55e0:	2001      	movs	r0, #1
    55e2:	4b3b      	ldr	r3, [pc, #236]	; (56d0 <http_client_callback+0x114>)
    55e4:	4798      	blx	r3
            break;
    55e6:	e06b      	b.n	56c0 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
    55e8:	4b3a      	ldr	r3, [pc, #232]	; (56d4 <http_client_callback+0x118>)
    55ea:	0019      	movs	r1, r3
    55ec:	2001      	movs	r0, #1
    55ee:	4b38      	ldr	r3, [pc, #224]	; (56d0 <http_client_callback+0x114>)
    55f0:	4798      	blx	r3
            add_state(GET_REQUESTED);
    55f2:	2004      	movs	r0, #4
    55f4:	4b38      	ldr	r3, [pc, #224]	; (56d8 <http_client_callback+0x11c>)
    55f6:	4798      	blx	r3
            break;
    55f8:	e062      	b.n	56c0 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
    55fa:	687b      	ldr	r3, [r7, #4]
    55fc:	881b      	ldrh	r3, [r3, #0]
    55fe:	001a      	movs	r2, r3
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	685b      	ldr	r3, [r3, #4]
    5604:	4935      	ldr	r1, [pc, #212]	; (56dc <http_client_callback+0x120>)
    5606:	2001      	movs	r0, #1
    5608:	4c31      	ldr	r4, [pc, #196]	; (56d0 <http_client_callback+0x114>)
    560a:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	881b      	ldrh	r3, [r3, #0]
    5610:	2bc8      	cmp	r3, #200	; 0xc8
    5612:	d10d      	bne.n	5630 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
    5614:	687b      	ldr	r3, [r7, #4]
    5616:	685a      	ldr	r2, [r3, #4]
    5618:	4b31      	ldr	r3, [pc, #196]	; (56e0 <http_client_callback+0x124>)
    561a:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
    561c:	4b31      	ldr	r3, [pc, #196]	; (56e4 <http_client_callback+0x128>)
    561e:	2200      	movs	r2, #0
    5620:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	685a      	ldr	r2, [r3, #4]
    5626:	2380      	movs	r3, #128	; 0x80
    5628:	009b      	lsls	r3, r3, #2
    562a:	429a      	cmp	r2, r3
    562c:	d843      	bhi.n	56b6 <http_client_callback+0xfa>
    562e:	e003      	b.n	5638 <http_client_callback+0x7c>
                add_state(CANCELED);
    5630:	2020      	movs	r0, #32
    5632:	4b29      	ldr	r3, [pc, #164]	; (56d8 <http_client_callback+0x11c>)
    5634:	4798      	blx	r3
                return;
    5636:	e043      	b.n	56c0 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
    5638:	687b      	ldr	r3, [r7, #4]
    563a:	689a      	ldr	r2, [r3, #8]
    563c:	687b      	ldr	r3, [r7, #4]
    563e:	685b      	ldr	r3, [r3, #4]
    5640:	0019      	movs	r1, r3
    5642:	0010      	movs	r0, r2
    5644:	4b28      	ldr	r3, [pc, #160]	; (56e8 <http_client_callback+0x12c>)
    5646:	4798      	blx	r3
                add_state(COMPLETED);
    5648:	2010      	movs	r0, #16
    564a:	4b23      	ldr	r3, [pc, #140]	; (56d8 <http_client_callback+0x11c>)
    564c:	4798      	blx	r3
            }
            break;
    564e:	e032      	b.n	56b6 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    5650:	687b      	ldr	r3, [r7, #4]
    5652:	685a      	ldr	r2, [r3, #4]
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	681b      	ldr	r3, [r3, #0]
    5658:	0019      	movs	r1, r3
    565a:	0010      	movs	r0, r2
    565c:	4b22      	ldr	r3, [pc, #136]	; (56e8 <http_client_callback+0x12c>)
    565e:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	7a1b      	ldrb	r3, [r3, #8]
    5664:	2b00      	cmp	r3, #0
    5666:	d028      	beq.n	56ba <http_client_callback+0xfe>
                add_state(COMPLETED);
    5668:	2010      	movs	r0, #16
    566a:	4b1b      	ldr	r3, [pc, #108]	; (56d8 <http_client_callback+0x11c>)
    566c:	4798      	blx	r3
            }

            break;
    566e:	e024      	b.n	56ba <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    5670:	687b      	ldr	r3, [r7, #4]
    5672:	681a      	ldr	r2, [r3, #0]
    5674:	4b1d      	ldr	r3, [pc, #116]	; (56ec <http_client_callback+0x130>)
    5676:	0019      	movs	r1, r3
    5678:	2001      	movs	r0, #1
    567a:	4b15      	ldr	r3, [pc, #84]	; (56d0 <http_client_callback+0x114>)
    567c:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
    567e:	687b      	ldr	r3, [r7, #4]
    5680:	681b      	ldr	r3, [r3, #0]
    5682:	330b      	adds	r3, #11
    5684:	d11b      	bne.n	56be <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
    5686:	2008      	movs	r0, #8
    5688:	4b19      	ldr	r3, [pc, #100]	; (56f0 <http_client_callback+0x134>)
    568a:	4798      	blx	r3
    568c:	1e03      	subs	r3, r0, #0
    568e:	d006      	beq.n	569e <http_client_callback+0xe2>
                    f_close(&file_object);
    5690:	4b18      	ldr	r3, [pc, #96]	; (56f4 <http_client_callback+0x138>)
    5692:	0018      	movs	r0, r3
    5694:	4b18      	ldr	r3, [pc, #96]	; (56f8 <http_client_callback+0x13c>)
    5696:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    5698:	2008      	movs	r0, #8
    569a:	4b18      	ldr	r3, [pc, #96]	; (56fc <http_client_callback+0x140>)
    569c:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
    569e:	2004      	movs	r0, #4
    56a0:	4b13      	ldr	r3, [pc, #76]	; (56f0 <http_client_callback+0x134>)
    56a2:	4798      	blx	r3
    56a4:	1e03      	subs	r3, r0, #0
    56a6:	d002      	beq.n	56ae <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
    56a8:	2004      	movs	r0, #4
    56aa:	4b14      	ldr	r3, [pc, #80]	; (56fc <http_client_callback+0x140>)
    56ac:	4798      	blx	r3
                }

                start_download();
    56ae:	4b14      	ldr	r3, [pc, #80]	; (5700 <http_client_callback+0x144>)
    56b0:	4798      	blx	r3
            }

            break;
    56b2:	46c0      	nop			; (mov r8, r8)
    56b4:	e003      	b.n	56be <http_client_callback+0x102>
            break;
    56b6:	46c0      	nop			; (mov r8, r8)
    56b8:	e002      	b.n	56c0 <http_client_callback+0x104>
            break;
    56ba:	46c0      	nop			; (mov r8, r8)
    56bc:	e000      	b.n	56c0 <http_client_callback+0x104>
            break;
    56be:	46c0      	nop			; (mov r8, r8)
    }
}
    56c0:	46bd      	mov	sp, r7
    56c2:	b005      	add	sp, #20
    56c4:	bd90      	pop	{r4, r7, pc}
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	00026ba0 	.word	0x00026ba0
    56cc:	00026478 	.word	0x00026478
    56d0:	0000d0f5 	.word	0x0000d0f5
    56d4:	000264b0 	.word	0x000264b0
    56d8:	00004fd9 	.word	0x00004fd9
    56dc:	000264dc 	.word	0x000264dc
    56e0:	200008b0 	.word	0x200008b0
    56e4:	200008b4 	.word	0x200008b4
    56e8:	000053e9 	.word	0x000053e9
    56ec:	00026518 	.word	0x00026518
    56f0:	00005001 	.word	0x00005001
    56f4:	2000088c 	.word	0x2000088c
    56f8:	0001d605 	.word	0x0001d605
    56fc:	00004fa5 	.word	0x00004fa5
    5700:	00005329 	.word	0x00005329

00005704 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    5704:	b580      	push	{r7, lr}
    5706:	b082      	sub	sp, #8
    5708:	af00      	add	r7, sp, #0
    570a:	603a      	str	r2, [r7, #0]
    570c:	1dfb      	adds	r3, r7, #7
    570e:	1c02      	adds	r2, r0, #0
    5710:	701a      	strb	r2, [r3, #0]
    5712:	1dbb      	adds	r3, r7, #6
    5714:	1c0a      	adds	r2, r1, #0
    5716:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
    5718:	683a      	ldr	r2, [r7, #0]
    571a:	1dbb      	adds	r3, r7, #6
    571c:	7819      	ldrb	r1, [r3, #0]
    571e:	1dfb      	adds	r3, r7, #7
    5720:	781b      	ldrb	r3, [r3, #0]
    5722:	b25b      	sxtb	r3, r3
    5724:	0018      	movs	r0, r3
    5726:	4b03      	ldr	r3, [pc, #12]	; (5734 <socket_cb+0x30>)
    5728:	4798      	blx	r3
}
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	46bd      	mov	sp, r7
    572e:	b002      	add	sp, #8
    5730:	bd80      	pop	{r7, pc}
    5732:	46c0      	nop			; (mov r8, r8)
    5734:	0001ff69 	.word	0x0001ff69

00005738 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    5738:	b5b0      	push	{r4, r5, r7, lr}
    573a:	b086      	sub	sp, #24
    573c:	af04      	add	r7, sp, #16
    573e:	6078      	str	r0, [r7, #4]
    5740:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
    5742:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
    5744:	22ff      	movs	r2, #255	; 0xff
    5746:	4013      	ands	r3, r2
    5748:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
    574a:	683b      	ldr	r3, [r7, #0]
    574c:	0a1b      	lsrs	r3, r3, #8
    574e:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
    5750:	23ff      	movs	r3, #255	; 0xff
    5752:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
    5754:	683a      	ldr	r2, [r7, #0]
    5756:	0c12      	lsrs	r2, r2, #16
    5758:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
    575a:	22ff      	movs	r2, #255	; 0xff
    575c:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
    575e:	6839      	ldr	r1, [r7, #0]
    5760:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
    5762:	000d      	movs	r5, r1
    5764:	6878      	ldr	r0, [r7, #4]
    5766:	4909      	ldr	r1, [pc, #36]	; (578c <resolve_cb+0x54>)
    5768:	9502      	str	r5, [sp, #8]
    576a:	9201      	str	r2, [sp, #4]
    576c:	9300      	str	r3, [sp, #0]
    576e:	0023      	movs	r3, r4
    5770:	0002      	movs	r2, r0
    5772:	2001      	movs	r0, #1
    5774:	4c06      	ldr	r4, [pc, #24]	; (5790 <resolve_cb+0x58>)
    5776:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    5778:	683a      	ldr	r2, [r7, #0]
    577a:	687b      	ldr	r3, [r7, #4]
    577c:	0011      	movs	r1, r2
    577e:	0018      	movs	r0, r3
    5780:	4b04      	ldr	r3, [pc, #16]	; (5794 <resolve_cb+0x5c>)
    5782:	4798      	blx	r3
}
    5784:	46c0      	nop			; (mov r8, r8)
    5786:	46bd      	mov	sp, r7
    5788:	b002      	add	sp, #8
    578a:	bdb0      	pop	{r4, r5, r7, pc}
    578c:	00026548 	.word	0x00026548
    5790:	0000d0f5 	.word	0x0000d0f5
    5794:	000200cd 	.word	0x000200cd

00005798 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    5798:	b590      	push	{r4, r7, lr}
    579a:	b087      	sub	sp, #28
    579c:	af02      	add	r7, sp, #8
    579e:	0002      	movs	r2, r0
    57a0:	6039      	str	r1, [r7, #0]
    57a2:	1dfb      	adds	r3, r7, #7
    57a4:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
    57a6:	1dfb      	adds	r3, r7, #7
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	2b2c      	cmp	r3, #44	; 0x2c
    57ac:	d002      	beq.n	57b4 <wifi_cb+0x1c>
    57ae:	2b32      	cmp	r3, #50	; 0x32
    57b0:	d03d      	beq.n	582e <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
    57b2:	e06f      	b.n	5894 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    57b4:	683b      	ldr	r3, [r7, #0]
    57b6:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    57b8:	68fb      	ldr	r3, [r7, #12]
    57ba:	781b      	ldrb	r3, [r3, #0]
    57bc:	2b01      	cmp	r3, #1
    57be:	d107      	bne.n	57d0 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
    57c0:	4b36      	ldr	r3, [pc, #216]	; (589c <wifi_cb+0x104>)
    57c2:	0019      	movs	r1, r3
    57c4:	2001      	movs	r0, #1
    57c6:	4b36      	ldr	r3, [pc, #216]	; (58a0 <wifi_cb+0x108>)
    57c8:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
    57ca:	4b36      	ldr	r3, [pc, #216]	; (58a4 <wifi_cb+0x10c>)
    57cc:	4798      	blx	r3
            break;
    57ce:	e05e      	b.n	588e <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    57d0:	68fb      	ldr	r3, [r7, #12]
    57d2:	781b      	ldrb	r3, [r3, #0]
    57d4:	2b00      	cmp	r3, #0
    57d6:	d15a      	bne.n	588e <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    57d8:	4b33      	ldr	r3, [pc, #204]	; (58a8 <wifi_cb+0x110>)
    57da:	0019      	movs	r1, r3
    57dc:	2001      	movs	r0, #1
    57de:	4b30      	ldr	r3, [pc, #192]	; (58a0 <wifi_cb+0x108>)
    57e0:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
    57e2:	2002      	movs	r0, #2
    57e4:	4b31      	ldr	r3, [pc, #196]	; (58ac <wifi_cb+0x114>)
    57e6:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
    57e8:	2008      	movs	r0, #8
    57ea:	4b31      	ldr	r3, [pc, #196]	; (58b0 <wifi_cb+0x118>)
    57ec:	4798      	blx	r3
    57ee:	1e03      	subs	r3, r0, #0
    57f0:	d006      	beq.n	5800 <wifi_cb+0x68>
                    f_close(&file_object);
    57f2:	4b30      	ldr	r3, [pc, #192]	; (58b4 <wifi_cb+0x11c>)
    57f4:	0018      	movs	r0, r3
    57f6:	4b30      	ldr	r3, [pc, #192]	; (58b8 <wifi_cb+0x120>)
    57f8:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    57fa:	2008      	movs	r0, #8
    57fc:	4b2b      	ldr	r3, [pc, #172]	; (58ac <wifi_cb+0x114>)
    57fe:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
    5800:	2004      	movs	r0, #4
    5802:	4b2b      	ldr	r3, [pc, #172]	; (58b0 <wifi_cb+0x118>)
    5804:	4798      	blx	r3
    5806:	1e03      	subs	r3, r0, #0
    5808:	d002      	beq.n	5810 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
    580a:	2004      	movs	r0, #4
    580c:	4b27      	ldr	r3, [pc, #156]	; (58ac <wifi_cb+0x114>)
    580e:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
    5810:	4b2a      	ldr	r3, [pc, #168]	; (58bc <wifi_cb+0x124>)
    5812:	2101      	movs	r1, #1
    5814:	0018      	movs	r0, r3
    5816:	4b2a      	ldr	r3, [pc, #168]	; (58c0 <wifi_cb+0x128>)
    5818:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    581a:	4a2a      	ldr	r2, [pc, #168]	; (58c4 <wifi_cb+0x12c>)
    581c:	482a      	ldr	r0, [pc, #168]	; (58c8 <wifi_cb+0x130>)
    581e:	23ff      	movs	r3, #255	; 0xff
    5820:	9300      	str	r3, [sp, #0]
    5822:	0013      	movs	r3, r2
    5824:	2202      	movs	r2, #2
    5826:	2112      	movs	r1, #18
    5828:	4c28      	ldr	r4, [pc, #160]	; (58cc <wifi_cb+0x134>)
    582a:	47a0      	blx	r4
            break;
    582c:	e02f      	b.n	588e <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    582e:	683b      	ldr	r3, [r7, #0]
    5830:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    5832:	68bb      	ldr	r3, [r7, #8]
    5834:	781b      	ldrb	r3, [r3, #0]
    5836:	0018      	movs	r0, r3
    5838:	68bb      	ldr	r3, [r7, #8]
    583a:	3301      	adds	r3, #1
    583c:	781b      	ldrb	r3, [r3, #0]
    583e:	001c      	movs	r4, r3
    5840:	68bb      	ldr	r3, [r7, #8]
    5842:	3302      	adds	r3, #2
    5844:	781b      	ldrb	r3, [r3, #0]
    5846:	001a      	movs	r2, r3
    5848:	68bb      	ldr	r3, [r7, #8]
    584a:	3303      	adds	r3, #3
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	4920      	ldr	r1, [pc, #128]	; (58d0 <wifi_cb+0x138>)
    5850:	9301      	str	r3, [sp, #4]
    5852:	9200      	str	r2, [sp, #0]
    5854:	0023      	movs	r3, r4
    5856:	0002      	movs	r2, r0
    5858:	2001      	movs	r0, #1
    585a:	4c11      	ldr	r4, [pc, #68]	; (58a0 <wifi_cb+0x108>)
    585c:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
    585e:	2002      	movs	r0, #2
    5860:	4b1c      	ldr	r3, [pc, #112]	; (58d4 <wifi_cb+0x13c>)
    5862:	4798      	blx	r3
            if (do_download_flag == 1) {
    5864:	4b1c      	ldr	r3, [pc, #112]	; (58d8 <wifi_cb+0x140>)
    5866:	781b      	ldrb	r3, [r3, #0]
    5868:	2b01      	cmp	r3, #1
    586a:	d102      	bne.n	5872 <wifi_cb+0xda>
                start_download();
    586c:	4b1b      	ldr	r3, [pc, #108]	; (58dc <wifi_cb+0x144>)
    586e:	4798      	blx	r3
        } break;
    5870:	e00f      	b.n	5892 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    5872:	4a1b      	ldr	r2, [pc, #108]	; (58e0 <wifi_cb+0x148>)
    5874:	4b11      	ldr	r3, [pc, #68]	; (58bc <wifi_cb+0x124>)
    5876:	0011      	movs	r1, r2
    5878:	0018      	movs	r0, r3
    587a:	4b1a      	ldr	r3, [pc, #104]	; (58e4 <wifi_cb+0x14c>)
    587c:	4798      	blx	r3
    587e:	1e03      	subs	r3, r0, #0
    5880:	d007      	beq.n	5892 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    5882:	4b19      	ldr	r3, [pc, #100]	; (58e8 <wifi_cb+0x150>)
    5884:	0019      	movs	r1, r3
    5886:	2001      	movs	r0, #1
    5888:	4b05      	ldr	r3, [pc, #20]	; (58a0 <wifi_cb+0x108>)
    588a:	4798      	blx	r3
        } break;
    588c:	e001      	b.n	5892 <wifi_cb+0xfa>
            break;
    588e:	46c0      	nop			; (mov r8, r8)
    5890:	e000      	b.n	5894 <wifi_cb+0xfc>
        } break;
    5892:	46c0      	nop			; (mov r8, r8)
    }
}
    5894:	46c0      	nop			; (mov r8, r8)
    5896:	46bd      	mov	sp, r7
    5898:	b005      	add	sp, #20
    589a:	bd90      	pop	{r4, r7, pc}
    589c:	00026578 	.word	0x00026578
    58a0:	0000d0f5 	.word	0x0000d0f5
    58a4:	00011739 	.word	0x00011739
    58a8:	00026598 	.word	0x00026598
    58ac:	00004fa5 	.word	0x00004fa5
    58b0:	00005001 	.word	0x00005001
    58b4:	2000088c 	.word	0x2000088c
    58b8:	0001d605 	.word	0x0001d605
    58bc:	200008b8 	.word	0x200008b8
    58c0:	0001ec15 	.word	0x0001ec15
    58c4:	000265bc 	.word	0x000265bc
    58c8:	000265cc 	.word	0x000265cc
    58cc:	00011265 	.word	0x00011265
    58d0:	000265e0 	.word	0x000265e0
    58d4:	00004fd9 	.word	0x00004fd9
    58d8:	20000658 	.word	0x20000658
    58dc:	00005329 	.word	0x00005329
    58e0:	000261fc 	.word	0x000261fc
    58e4:	0001eae1 	.word	0x0001eae1
    58e8:	00026608 	.word	0x00026608

000058ec <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
    58ec:	b590      	push	{r4, r7, lr}
    58ee:	b083      	sub	sp, #12
    58f0:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
    58f2:	4b29      	ldr	r3, [pc, #164]	; (5998 <init_storage+0xac>)
    58f4:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
    58f6:	4b29      	ldr	r3, [pc, #164]	; (599c <init_storage+0xb0>)
    58f8:	0019      	movs	r1, r3
    58fa:	2001      	movs	r0, #1
    58fc:	4b28      	ldr	r3, [pc, #160]	; (59a0 <init_storage+0xb4>)
    58fe:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
    5900:	1dfc      	adds	r4, r7, #7
    5902:	2000      	movs	r0, #0
    5904:	4b27      	ldr	r3, [pc, #156]	; (59a4 <init_storage+0xb8>)
    5906:	4798      	blx	r3
    5908:	0003      	movs	r3, r0
    590a:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
    590c:	1dfb      	adds	r3, r7, #7
    590e:	781b      	ldrb	r3, [r3, #0]
    5910:	2b01      	cmp	r3, #1
    5912:	d110      	bne.n	5936 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
    5914:	4b24      	ldr	r3, [pc, #144]	; (59a8 <init_storage+0xbc>)
    5916:	0019      	movs	r1, r3
    5918:	2001      	movs	r0, #1
    591a:	4b21      	ldr	r3, [pc, #132]	; (59a0 <init_storage+0xb4>)
    591c:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
    591e:	4b23      	ldr	r3, [pc, #140]	; (59ac <init_storage+0xc0>)
    5920:	0019      	movs	r1, r3
    5922:	2001      	movs	r0, #1
    5924:	4b1e      	ldr	r3, [pc, #120]	; (59a0 <init_storage+0xb4>)
    5926:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    5928:	46c0      	nop			; (mov r8, r8)
    592a:	2000      	movs	r0, #0
    592c:	4b20      	ldr	r3, [pc, #128]	; (59b0 <init_storage+0xc4>)
    592e:	4798      	blx	r3
    5930:	0003      	movs	r3, r0
    5932:	2b02      	cmp	r3, #2
    5934:	d1f9      	bne.n	592a <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
    5936:	1dfb      	adds	r3, r7, #7
    5938:	781b      	ldrb	r3, [r3, #0]
    593a:	2b00      	cmp	r3, #0
    593c:	d1e0      	bne.n	5900 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
    593e:	4b1d      	ldr	r3, [pc, #116]	; (59b4 <init_storage+0xc8>)
    5940:	0019      	movs	r1, r3
    5942:	2001      	movs	r0, #1
    5944:	4b16      	ldr	r3, [pc, #88]	; (59a0 <init_storage+0xb4>)
    5946:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
    5948:	238c      	movs	r3, #140	; 0x8c
    594a:	009a      	lsls	r2, r3, #2
    594c:	4b1a      	ldr	r3, [pc, #104]	; (59b8 <init_storage+0xcc>)
    594e:	2100      	movs	r1, #0
    5950:	0018      	movs	r0, r3
    5952:	4b1a      	ldr	r3, [pc, #104]	; (59bc <init_storage+0xd0>)
    5954:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    5956:	1dbc      	adds	r4, r7, #6
    5958:	4b17      	ldr	r3, [pc, #92]	; (59b8 <init_storage+0xcc>)
    595a:	0019      	movs	r1, r3
    595c:	2000      	movs	r0, #0
    595e:	4b18      	ldr	r3, [pc, #96]	; (59c0 <init_storage+0xd4>)
    5960:	4798      	blx	r3
    5962:	0003      	movs	r3, r0
    5964:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
    5966:	1dbb      	adds	r3, r7, #6
    5968:	781b      	ldrb	r3, [r3, #0]
    596a:	2b0b      	cmp	r3, #11
    596c:	d107      	bne.n	597e <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
    596e:	1dbb      	adds	r3, r7, #6
    5970:	781a      	ldrb	r2, [r3, #0]
    5972:	4b14      	ldr	r3, [pc, #80]	; (59c4 <init_storage+0xd8>)
    5974:	0019      	movs	r1, r3
    5976:	2001      	movs	r0, #1
    5978:	4b09      	ldr	r3, [pc, #36]	; (59a0 <init_storage+0xb4>)
    597a:	4798      	blx	r3
            return;
    597c:	e008      	b.n	5990 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
    597e:	4b12      	ldr	r3, [pc, #72]	; (59c8 <init_storage+0xdc>)
    5980:	0019      	movs	r1, r3
    5982:	2001      	movs	r0, #1
    5984:	4b06      	ldr	r3, [pc, #24]	; (59a0 <init_storage+0xb4>)
    5986:	4798      	blx	r3
        add_state(STORAGE_READY);
    5988:	2001      	movs	r0, #1
    598a:	4b10      	ldr	r3, [pc, #64]	; (59cc <init_storage+0xe0>)
    598c:	4798      	blx	r3
        return;
    598e:	46c0      	nop			; (mov r8, r8)
    }
}
    5990:	46bd      	mov	sp, r7
    5992:	b003      	add	sp, #12
    5994:	bd90      	pop	{r4, r7, pc}
    5996:	46c0      	nop			; (mov r8, r8)
    5998:	0000df0d 	.word	0x0000df0d
    599c:	0002662c 	.word	0x0002662c
    59a0:	0000d0f5 	.word	0x0000d0f5
    59a4:	0000e3e9 	.word	0x0000e3e9
    59a8:	00026664 	.word	0x00026664
    59ac:	0002668c 	.word	0x0002668c
    59b0:	0000df5d 	.word	0x0000df5d
    59b4:	000266c0 	.word	0x000266c0
    59b8:	2000065c 	.word	0x2000065c
    59bc:	000247b7 	.word	0x000247b7
    59c0:	0001cbad 	.word	0x0001cbad
    59c4:	000266e4 	.word	0x000266e4
    59c8:	00026714 	.word	0x00026714
    59cc:	00004fd9 	.word	0x00004fd9

000059d0 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    59d0:	b580      	push	{r7, lr}
    59d2:	b082      	sub	sp, #8
    59d4:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
    59d6:	1d3b      	adds	r3, r7, #4
    59d8:	0018      	movs	r0, r3
    59da:	4b08      	ldr	r3, [pc, #32]	; (59fc <configure_timer+0x2c>)
    59dc:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
    59de:	1d3a      	adds	r2, r7, #4
    59e0:	4b07      	ldr	r3, [pc, #28]	; (5a00 <configure_timer+0x30>)
    59e2:	0011      	movs	r1, r2
    59e4:	0018      	movs	r0, r3
    59e6:	4b07      	ldr	r3, [pc, #28]	; (5a04 <configure_timer+0x34>)
    59e8:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
    59ea:	4b05      	ldr	r3, [pc, #20]	; (5a00 <configure_timer+0x30>)
    59ec:	0018      	movs	r0, r3
    59ee:	4b06      	ldr	r3, [pc, #24]	; (5a08 <configure_timer+0x38>)
    59f0:	4798      	blx	r3
}
    59f2:	46c0      	nop			; (mov r8, r8)
    59f4:	46bd      	mov	sp, r7
    59f6:	b002      	add	sp, #8
    59f8:	bd80      	pop	{r7, pc}
    59fa:	46c0      	nop			; (mov r8, r8)
    59fc:	000216fd 	.word	0x000216fd
    5a00:	20004530 	.word	0x20004530
    5a04:	00021721 	.word	0x00021721
    5a08:	0002180d 	.word	0x0002180d

00005a0c <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	b088      	sub	sp, #32
    5a10:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
    5a12:	003b      	movs	r3, r7
    5a14:	0018      	movs	r0, r3
    5a16:	4b12      	ldr	r3, [pc, #72]	; (5a60 <configure_http_client+0x54>)
    5a18:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    5a1a:	003b      	movs	r3, r7
    5a1c:	2280      	movs	r2, #128	; 0x80
    5a1e:	0092      	lsls	r2, r2, #2
    5a20:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
    5a22:	003b      	movs	r3, r7
    5a24:	4a0f      	ldr	r2, [pc, #60]	; (5a64 <configure_http_client+0x58>)
    5a26:	605a      	str	r2, [r3, #4]
	//httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
    5a28:	003a      	movs	r2, r7
    5a2a:	4b0f      	ldr	r3, [pc, #60]	; (5a68 <configure_http_client+0x5c>)
    5a2c:	0011      	movs	r1, r2
    5a2e:	0018      	movs	r0, r3
    5a30:	4b0e      	ldr	r3, [pc, #56]	; (5a6c <configure_http_client+0x60>)
    5a32:	4798      	blx	r3
    5a34:	0003      	movs	r3, r0
    5a36:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
    5a38:	69fb      	ldr	r3, [r7, #28]
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	da06      	bge.n	5a4c <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    5a3e:	69fa      	ldr	r2, [r7, #28]
    5a40:	4b0b      	ldr	r3, [pc, #44]	; (5a70 <configure_http_client+0x64>)
    5a42:	0019      	movs	r1, r3
    5a44:	2001      	movs	r0, #1
    5a46:	4b0b      	ldr	r3, [pc, #44]	; (5a74 <configure_http_client+0x68>)
    5a48:	4798      	blx	r3
        while (1) {
    5a4a:	e7fe      	b.n	5a4a <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
    5a4c:	4a0a      	ldr	r2, [pc, #40]	; (5a78 <configure_http_client+0x6c>)
    5a4e:	4b06      	ldr	r3, [pc, #24]	; (5a68 <configure_http_client+0x5c>)
    5a50:	0011      	movs	r1, r2
    5a52:	0018      	movs	r0, r3
    5a54:	4b09      	ldr	r3, [pc, #36]	; (5a7c <configure_http_client+0x70>)
    5a56:	4798      	blx	r3
}
    5a58:	46c0      	nop			; (mov r8, r8)
    5a5a:	46bd      	mov	sp, r7
    5a5c:	b008      	add	sp, #32
    5a5e:	bd80      	pop	{r7, pc}
    5a60:	0001fd91 	.word	0x0001fd91
    5a64:	20004530 	.word	0x20004530
    5a68:	20004588 	.word	0x20004588
    5a6c:	0001fddd 	.word	0x0001fddd
    5a70:	00026738 	.word	0x00026738
    5a74:	0000d0f5 	.word	0x0000d0f5
    5a78:	000055bd 	.word	0x000055bd
    5a7c:	0001fec9 	.word	0x0001fec9

00005a80 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    5a80:	b580      	push	{r7, lr}
    5a82:	b082      	sub	sp, #8
    5a84:	af00      	add	r7, sp, #0
    5a86:	603a      	str	r2, [r7, #0]
    5a88:	1dfb      	adds	r3, r7, #7
    5a8a:	1c02      	adds	r2, r0, #0
    5a8c:	701a      	strb	r2, [r3, #0]
    5a8e:	1dbb      	adds	r3, r7, #6
    5a90:	1c0a      	adds	r2, r1, #0
    5a92:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
    5a94:	683a      	ldr	r2, [r7, #0]
    5a96:	1dbb      	adds	r3, r7, #6
    5a98:	7819      	ldrb	r1, [r3, #0]
    5a9a:	1dfb      	adds	r3, r7, #7
    5a9c:	781b      	ldrb	r3, [r3, #0]
    5a9e:	b25b      	sxtb	r3, r3
    5aa0:	0018      	movs	r0, r3
    5aa2:	4b03      	ldr	r3, [pc, #12]	; (5ab0 <socket_event_handler+0x30>)
    5aa4:	4798      	blx	r3
}
    5aa6:	46c0      	nop			; (mov r8, r8)
    5aa8:	46bd      	mov	sp, r7
    5aaa:	b002      	add	sp, #8
    5aac:	bd80      	pop	{r7, pc}
    5aae:	46c0      	nop			; (mov r8, r8)
    5ab0:	0001ea89 	.word	0x0001ea89

00005ab4 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    5ab4:	b580      	push	{r7, lr}
    5ab6:	b082      	sub	sp, #8
    5ab8:	af00      	add	r7, sp, #0
    5aba:	6078      	str	r0, [r7, #4]
    5abc:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
    5abe:	683a      	ldr	r2, [r7, #0]
    5ac0:	687b      	ldr	r3, [r7, #4]
    5ac2:	0011      	movs	r1, r2
    5ac4:	0018      	movs	r0, r3
    5ac6:	4b03      	ldr	r3, [pc, #12]	; (5ad4 <socket_resolve_handler+0x20>)
    5ac8:	4798      	blx	r3
}
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	46bd      	mov	sp, r7
    5ace:	b002      	add	sp, #8
    5ad0:	bd80      	pop	{r7, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	0001eabd 	.word	0x0001eabd

00005ad8 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
    5ad8:	b590      	push	{r4, r7, lr}
    5ada:	b089      	sub	sp, #36	; 0x24
    5adc:	af02      	add	r7, sp, #8
    5ade:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
    5ae0:	2310      	movs	r3, #16
    5ae2:	18fb      	adds	r3, r7, r3
    5ae4:	2200      	movs	r2, #0
    5ae6:	701a      	strb	r2, [r3, #0]
    5ae8:	2310      	movs	r3, #16
    5aea:	18fb      	adds	r3, r7, r3
    5aec:	2200      	movs	r2, #0
    5aee:	705a      	strb	r2, [r3, #1]
    5af0:	2310      	movs	r3, #16
    5af2:	18fb      	adds	r3, r7, r3
    5af4:	2200      	movs	r2, #0
    5af6:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    5af8:	687b      	ldr	r3, [r7, #4]
    5afa:	685b      	ldr	r3, [r3, #4]
    5afc:	685a      	ldr	r2, [r3, #4]
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	685b      	ldr	r3, [r3, #4]
    5b02:	689b      	ldr	r3, [r3, #8]
    5b04:	492a      	ldr	r1, [pc, #168]	; (5bb0 <SubscribeHandlerLedTopic+0xd8>)
    5b06:	2001      	movs	r0, #1
    5b08:	4c2a      	ldr	r4, [pc, #168]	; (5bb4 <SubscribeHandlerLedTopic+0xdc>)
    5b0a:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	681b      	ldr	r3, [r3, #0]
    5b10:	689b      	ldr	r3, [r3, #8]
    5b12:	4929      	ldr	r1, [pc, #164]	; (5bb8 <SubscribeHandlerLedTopic+0xe0>)
    5b14:	2204      	movs	r2, #4
    5b16:	0018      	movs	r0, r3
    5b18:	4b28      	ldr	r3, [pc, #160]	; (5bbc <SubscribeHandlerLedTopic+0xe4>)
    5b1a:	4798      	blx	r3
    5b1c:	1e03      	subs	r3, r0, #0
    5b1e:	d143      	bne.n	5ba8 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	681b      	ldr	r3, [r3, #0]
    5b24:	689b      	ldr	r3, [r3, #8]
    5b26:	3304      	adds	r3, #4
    5b28:	60fb      	str	r3, [r7, #12]
        int nb = 0;
    5b2a:	2300      	movs	r3, #0
    5b2c:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
    5b2e:	e015      	b.n	5b5c <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
    5b30:	697c      	ldr	r4, [r7, #20]
    5b32:	1c63      	adds	r3, r4, #1
    5b34:	617b      	str	r3, [r7, #20]
    5b36:	68fb      	ldr	r3, [r7, #12]
    5b38:	220c      	movs	r2, #12
    5b3a:	18b9      	adds	r1, r7, r2
    5b3c:	220a      	movs	r2, #10
    5b3e:	0018      	movs	r0, r3
    5b40:	4b1f      	ldr	r3, [pc, #124]	; (5bc0 <SubscribeHandlerLedTopic+0xe8>)
    5b42:	4798      	blx	r3
    5b44:	0003      	movs	r3, r0
    5b46:	b2da      	uxtb	r2, r3
    5b48:	2310      	movs	r3, #16
    5b4a:	18fb      	adds	r3, r7, r3
    5b4c:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    5b4e:	68fb      	ldr	r3, [r7, #12]
    5b50:	781b      	ldrb	r3, [r3, #0]
    5b52:	2b2c      	cmp	r3, #44	; 0x2c
    5b54:	d10a      	bne.n	5b6c <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
    5b56:	68fb      	ldr	r3, [r7, #12]
    5b58:	3301      	adds	r3, #1
    5b5a:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
    5b5c:	697b      	ldr	r3, [r7, #20]
    5b5e:	2b02      	cmp	r3, #2
    5b60:	dc05      	bgt.n	5b6e <SubscribeHandlerLedTopic+0x96>
    5b62:	68fb      	ldr	r3, [r7, #12]
    5b64:	781b      	ldrb	r3, [r3, #0]
    5b66:	2b00      	cmp	r3, #0
    5b68:	d1e2      	bne.n	5b30 <SubscribeHandlerLedTopic+0x58>
    5b6a:	e000      	b.n	5b6e <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
    5b6c:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
    5b6e:	2310      	movs	r3, #16
    5b70:	18fb      	adds	r3, r7, r3
    5b72:	781b      	ldrb	r3, [r3, #0]
    5b74:	001a      	movs	r2, r3
    5b76:	2310      	movs	r3, #16
    5b78:	18fb      	adds	r3, r7, r3
    5b7a:	785b      	ldrb	r3, [r3, #1]
    5b7c:	0018      	movs	r0, r3
    5b7e:	2310      	movs	r3, #16
    5b80:	18fb      	adds	r3, r7, r3
    5b82:	789b      	ldrb	r3, [r3, #2]
    5b84:	490f      	ldr	r1, [pc, #60]	; (5bc4 <SubscribeHandlerLedTopic+0xec>)
    5b86:	9300      	str	r3, [sp, #0]
    5b88:	0003      	movs	r3, r0
    5b8a:	2001      	movs	r0, #1
    5b8c:	4c09      	ldr	r4, [pc, #36]	; (5bb4 <SubscribeHandlerLedTopic+0xdc>)
    5b8e:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
    5b90:	2310      	movs	r3, #16
    5b92:	18fb      	adds	r3, r7, r3
    5b94:	7818      	ldrb	r0, [r3, #0]
    5b96:	2310      	movs	r3, #16
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	7859      	ldrb	r1, [r3, #1]
    5b9c:	2310      	movs	r3, #16
    5b9e:	18fb      	adds	r3, r7, r3
    5ba0:	789b      	ldrb	r3, [r3, #2]
    5ba2:	001a      	movs	r2, r3
    5ba4:	4b08      	ldr	r3, [pc, #32]	; (5bc8 <SubscribeHandlerLedTopic+0xf0>)
    5ba6:	4798      	blx	r3
    }
}
    5ba8:	46c0      	nop			; (mov r8, r8)
    5baa:	46bd      	mov	sp, r7
    5bac:	b007      	add	sp, #28
    5bae:	bd90      	pop	{r4, r7, pc}
    5bb0:	00026780 	.word	0x00026780
    5bb4:	0000d0f5 	.word	0x0000d0f5
    5bb8:	00026788 	.word	0x00026788
    5bbc:	00024b7d 	.word	0x00024b7d
    5bc0:	00024d29 	.word	0x00024d29
    5bc4:	00026790 	.word	0x00026790
    5bc8:	00004e6d 	.word	0x00004e6d

00005bcc <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
    5bcc:	b590      	push	{r4, r7, lr}
    5bce:	b08b      	sub	sp, #44	; 0x2c
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
    5bd4:	230c      	movs	r3, #12
    5bd6:	18fb      	adds	r3, r7, r3
    5bd8:	2214      	movs	r2, #20
    5bda:	21ff      	movs	r1, #255	; 0xff
    5bdc:	0018      	movs	r0, r3
    5bde:	4b48      	ldr	r3, [pc, #288]	; (5d00 <SubscribeHandlerGameTopic+0x134>)
    5be0:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
    5be2:	687b      	ldr	r3, [r7, #4]
    5be4:	681b      	ldr	r3, [r3, #0]
    5be6:	689b      	ldr	r3, [r3, #8]
    5be8:	4946      	ldr	r1, [pc, #280]	; (5d04 <SubscribeHandlerGameTopic+0x138>)
    5bea:	2209      	movs	r2, #9
    5bec:	0018      	movs	r0, r3
    5bee:	4b46      	ldr	r3, [pc, #280]	; (5d08 <SubscribeHandlerGameTopic+0x13c>)
    5bf0:	4798      	blx	r3
    5bf2:	1e03      	subs	r3, r0, #0
    5bf4:	d166      	bne.n	5cc4 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
    5bf6:	4b45      	ldr	r3, [pc, #276]	; (5d0c <SubscribeHandlerGameTopic+0x140>)
    5bf8:	0019      	movs	r1, r3
    5bfa:	2001      	movs	r0, #1
    5bfc:	4b44      	ldr	r3, [pc, #272]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5bfe:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	685b      	ldr	r3, [r3, #4]
    5c04:	685a      	ldr	r2, [r3, #4]
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	685b      	ldr	r3, [r3, #4]
    5c0a:	689b      	ldr	r3, [r3, #8]
    5c0c:	4941      	ldr	r1, [pc, #260]	; (5d14 <SubscribeHandlerGameTopic+0x148>)
    5c0e:	2001      	movs	r0, #1
    5c10:	4c3f      	ldr	r4, [pc, #252]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5c12:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    5c14:	687b      	ldr	r3, [r7, #4]
    5c16:	681b      	ldr	r3, [r3, #0]
    5c18:	68da      	ldr	r2, [r3, #12]
    5c1a:	687b      	ldr	r3, [r7, #4]
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	689b      	ldr	r3, [r3, #8]
    5c20:	493d      	ldr	r1, [pc, #244]	; (5d18 <SubscribeHandlerGameTopic+0x14c>)
    5c22:	2001      	movs	r0, #1
    5c24:	4c3a      	ldr	r4, [pc, #232]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5c26:	47a0      	blx	r4

        int nb = 0;
    5c28:	2300      	movs	r3, #0
    5c2a:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
    5c2c:	687b      	ldr	r3, [r7, #4]
    5c2e:	681b      	ldr	r3, [r3, #0]
    5c30:	689b      	ldr	r3, [r3, #8]
    5c32:	3309      	adds	r3, #9
    5c34:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    5c36:	e015      	b.n	5c64 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
    5c38:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    5c3a:	1c63      	adds	r3, r4, #1
    5c3c:	627b      	str	r3, [r7, #36]	; 0x24
    5c3e:	68bb      	ldr	r3, [r7, #8]
    5c40:	2208      	movs	r2, #8
    5c42:	18b9      	adds	r1, r7, r2
    5c44:	220a      	movs	r2, #10
    5c46:	0018      	movs	r0, r3
    5c48:	4b34      	ldr	r3, [pc, #208]	; (5d1c <SubscribeHandlerGameTopic+0x150>)
    5c4a:	4798      	blx	r3
    5c4c:	0003      	movs	r3, r0
    5c4e:	b2da      	uxtb	r2, r3
    5c50:	230c      	movs	r3, #12
    5c52:	18fb      	adds	r3, r7, r3
    5c54:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    5c56:	68bb      	ldr	r3, [r7, #8]
    5c58:	781b      	ldrb	r3, [r3, #0]
    5c5a:	2b2c      	cmp	r3, #44	; 0x2c
    5c5c:	d10a      	bne.n	5c74 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
    5c5e:	68bb      	ldr	r3, [r7, #8]
    5c60:	3301      	adds	r3, #1
    5c62:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    5c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c66:	2b13      	cmp	r3, #19
    5c68:	dc05      	bgt.n	5c76 <SubscribeHandlerGameTopic+0xaa>
    5c6a:	68bb      	ldr	r3, [r7, #8]
    5c6c:	781b      	ldrb	r3, [r3, #0]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d1e2      	bne.n	5c38 <SubscribeHandlerGameTopic+0x6c>
    5c72:	e000      	b.n	5c76 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
    5c74:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
    5c76:	4b2a      	ldr	r3, [pc, #168]	; (5d20 <SubscribeHandlerGameTopic+0x154>)
    5c78:	0019      	movs	r1, r3
    5c7a:	2001      	movs	r0, #1
    5c7c:	4b24      	ldr	r3, [pc, #144]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5c7e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    5c80:	2300      	movs	r3, #0
    5c82:	623b      	str	r3, [r7, #32]
    5c84:	e00d      	b.n	5ca2 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
    5c86:	230c      	movs	r3, #12
    5c88:	18fa      	adds	r2, r7, r3
    5c8a:	6a3b      	ldr	r3, [r7, #32]
    5c8c:	18d3      	adds	r3, r2, r3
    5c8e:	781b      	ldrb	r3, [r3, #0]
    5c90:	001a      	movs	r2, r3
    5c92:	4b24      	ldr	r3, [pc, #144]	; (5d24 <SubscribeHandlerGameTopic+0x158>)
    5c94:	0019      	movs	r1, r3
    5c96:	2001      	movs	r0, #1
    5c98:	4b1d      	ldr	r3, [pc, #116]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5c9a:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    5c9c:	6a3b      	ldr	r3, [r7, #32]
    5c9e:	3301      	adds	r3, #1
    5ca0:	623b      	str	r3, [r7, #32]
    5ca2:	6a3b      	ldr	r3, [r7, #32]
    5ca4:	2b13      	cmp	r3, #19
    5ca6:	ddee      	ble.n	5c86 <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
    5ca8:	230c      	movs	r3, #12
    5caa:	18fb      	adds	r3, r7, r3
    5cac:	0018      	movs	r0, r3
    5cae:	4b1e      	ldr	r3, [pc, #120]	; (5d28 <SubscribeHandlerGameTopic+0x15c>)
    5cb0:	4798      	blx	r3
    5cb2:	0003      	movs	r3, r0
    5cb4:	2b01      	cmp	r3, #1
    5cb6:	d11e      	bne.n	5cf6 <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
    5cb8:	4b1c      	ldr	r3, [pc, #112]	; (5d2c <SubscribeHandlerGameTopic+0x160>)
    5cba:	0019      	movs	r1, r3
    5cbc:	2001      	movs	r0, #1
    5cbe:	4b14      	ldr	r3, [pc, #80]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5cc0:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
    5cc2:	e018      	b.n	5cf6 <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
    5cc4:	4b1a      	ldr	r3, [pc, #104]	; (5d30 <SubscribeHandlerGameTopic+0x164>)
    5cc6:	0019      	movs	r1, r3
    5cc8:	2001      	movs	r0, #1
    5cca:	4b11      	ldr	r3, [pc, #68]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5ccc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	685b      	ldr	r3, [r3, #4]
    5cd2:	685a      	ldr	r2, [r3, #4]
    5cd4:	687b      	ldr	r3, [r7, #4]
    5cd6:	685b      	ldr	r3, [r3, #4]
    5cd8:	689b      	ldr	r3, [r3, #8]
    5cda:	490e      	ldr	r1, [pc, #56]	; (5d14 <SubscribeHandlerGameTopic+0x148>)
    5cdc:	2001      	movs	r0, #1
    5cde:	4c0c      	ldr	r4, [pc, #48]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5ce0:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	681b      	ldr	r3, [r3, #0]
    5ce6:	68da      	ldr	r2, [r3, #12]
    5ce8:	687b      	ldr	r3, [r7, #4]
    5cea:	681b      	ldr	r3, [r3, #0]
    5cec:	689b      	ldr	r3, [r3, #8]
    5cee:	490a      	ldr	r1, [pc, #40]	; (5d18 <SubscribeHandlerGameTopic+0x14c>)
    5cf0:	2001      	movs	r0, #1
    5cf2:	4c07      	ldr	r4, [pc, #28]	; (5d10 <SubscribeHandlerGameTopic+0x144>)
    5cf4:	47a0      	blx	r4
}
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	46bd      	mov	sp, r7
    5cfa:	b00b      	add	sp, #44	; 0x2c
    5cfc:	bd90      	pop	{r4, r7, pc}
    5cfe:	46c0      	nop			; (mov r8, r8)
    5d00:	000247b7 	.word	0x000247b7
    5d04:	000267a4 	.word	0x000267a4
    5d08:	00024b7d 	.word	0x00024b7d
    5d0c:	000267b0 	.word	0x000267b0
    5d10:	0000d0f5 	.word	0x0000d0f5
    5d14:	00026780 	.word	0x00026780
    5d18:	000267cc 	.word	0x000267cc
    5d1c:	00024d29 	.word	0x00024d29
    5d20:	000267d4 	.word	0x000267d4
    5d24:	000267e8 	.word	0x000267e8
    5d28:	000025f9 	.word	0x000025f9
    5d2c:	000267ec 	.word	0x000267ec
    5d30:	00026808 	.word	0x00026808

00005d34 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
    5d34:	b590      	push	{r4, r7, lr}
    5d36:	b083      	sub	sp, #12
    5d38:	af00      	add	r7, sp, #0
    5d3a:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
    5d3c:	4b09      	ldr	r3, [pc, #36]	; (5d64 <SubscribeHandlerImuTopic+0x30>)
    5d3e:	0019      	movs	r1, r3
    5d40:	2001      	movs	r0, #1
    5d42:	4b09      	ldr	r3, [pc, #36]	; (5d68 <SubscribeHandlerImuTopic+0x34>)
    5d44:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    5d46:	687b      	ldr	r3, [r7, #4]
    5d48:	685b      	ldr	r3, [r3, #4]
    5d4a:	685a      	ldr	r2, [r3, #4]
    5d4c:	687b      	ldr	r3, [r7, #4]
    5d4e:	685b      	ldr	r3, [r3, #4]
    5d50:	689b      	ldr	r3, [r3, #8]
    5d52:	4906      	ldr	r1, [pc, #24]	; (5d6c <SubscribeHandlerImuTopic+0x38>)
    5d54:	2001      	movs	r0, #1
    5d56:	4c04      	ldr	r4, [pc, #16]	; (5d68 <SubscribeHandlerImuTopic+0x34>)
    5d58:	47a0      	blx	r4
}
    5d5a:	46c0      	nop			; (mov r8, r8)
    5d5c:	46bd      	mov	sp, r7
    5d5e:	b003      	add	sp, #12
    5d60:	bd90      	pop	{r4, r7, pc}
    5d62:	46c0      	nop			; (mov r8, r8)
    5d64:	00026838 	.word	0x00026838
    5d68:	0000d0f5 	.word	0x0000d0f5
    5d6c:	00026780 	.word	0x00026780

00005d70 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    5d70:	b590      	push	{r4, r7, lr}
    5d72:	b08b      	sub	sp, #44	; 0x2c
    5d74:	af06      	add	r7, sp, #24
    5d76:	60f8      	str	r0, [r7, #12]
    5d78:	60b9      	str	r1, [r7, #8]
    5d7a:	607a      	str	r2, [r7, #4]
    switch (type) {
    5d7c:	68bb      	ldr	r3, [r7, #8]
    5d7e:	2b01      	cmp	r3, #1
    5d80:	d03b      	beq.n	5dfa <mqtt_callback+0x8a>
    5d82:	2b05      	cmp	r3, #5
    5d84:	d05e      	beq.n	5e44 <mqtt_callback+0xd4>
    5d86:	2b00      	cmp	r3, #0
    5d88:	d000      	beq.n	5d8c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
    5d8a:	e061      	b.n	5e50 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
    5d8c:	687b      	ldr	r3, [r7, #4]
    5d8e:	681b      	ldr	r3, [r3, #0]
    5d90:	2b00      	cmp	r3, #0
    5d92:	db25      	blt.n	5de0 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
    5d94:	4b30      	ldr	r3, [pc, #192]	; (5e58 <mqtt_callback+0xe8>)
    5d96:	0019      	movs	r1, r3
    5d98:	2001      	movs	r0, #1
    5d9a:	4b30      	ldr	r3, [pc, #192]	; (5e5c <mqtt_callback+0xec>)
    5d9c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
    5d9e:	4930      	ldr	r1, [pc, #192]	; (5e60 <mqtt_callback+0xf0>)
    5da0:	4a30      	ldr	r2, [pc, #192]	; (5e64 <mqtt_callback+0xf4>)
    5da2:	68f8      	ldr	r0, [r7, #12]
    5da4:	2300      	movs	r3, #0
    5da6:	9305      	str	r3, [sp, #20]
    5da8:	2300      	movs	r3, #0
    5daa:	9304      	str	r3, [sp, #16]
    5dac:	2300      	movs	r3, #0
    5dae:	9303      	str	r3, [sp, #12]
    5db0:	2300      	movs	r3, #0
    5db2:	9302      	str	r3, [sp, #8]
    5db4:	2300      	movs	r3, #0
    5db6:	9301      	str	r3, [sp, #4]
    5db8:	4b2a      	ldr	r3, [pc, #168]	; (5e64 <mqtt_callback+0xf4>)
    5dba:	9300      	str	r3, [sp, #0]
    5dbc:	000b      	movs	r3, r1
    5dbe:	2101      	movs	r1, #1
    5dc0:	4c29      	ldr	r4, [pc, #164]	; (5e68 <mqtt_callback+0xf8>)
    5dc2:	47a0      	blx	r4
    5dc4:	1e03      	subs	r3, r0, #0
    5dc6:	d005      	beq.n	5dd4 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
    5dc8:	4b28      	ldr	r3, [pc, #160]	; (5e6c <mqtt_callback+0xfc>)
    5dca:	0019      	movs	r1, r3
    5dcc:	2001      	movs	r0, #1
    5dce:	4b23      	ldr	r3, [pc, #140]	; (5e5c <mqtt_callback+0xec>)
    5dd0:	4798      	blx	r3
        } break;
    5dd2:	e03d      	b.n	5e50 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
    5dd4:	4b26      	ldr	r3, [pc, #152]	; (5e70 <mqtt_callback+0x100>)
    5dd6:	0019      	movs	r1, r3
    5dd8:	2001      	movs	r0, #1
    5dda:	4b20      	ldr	r3, [pc, #128]	; (5e5c <mqtt_callback+0xec>)
    5ddc:	4798      	blx	r3
        } break;
    5dde:	e037      	b.n	5e50 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    5de0:	4a24      	ldr	r2, [pc, #144]	; (5e74 <mqtt_callback+0x104>)
    5de2:	4b25      	ldr	r3, [pc, #148]	; (5e78 <mqtt_callback+0x108>)
    5de4:	0019      	movs	r1, r3
    5de6:	2001      	movs	r0, #1
    5de8:	4b1c      	ldr	r3, [pc, #112]	; (5e5c <mqtt_callback+0xec>)
    5dea:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    5dec:	4a21      	ldr	r2, [pc, #132]	; (5e74 <mqtt_callback+0x104>)
    5dee:	68fb      	ldr	r3, [r7, #12]
    5df0:	0011      	movs	r1, r2
    5df2:	0018      	movs	r0, r3
    5df4:	4b21      	ldr	r3, [pc, #132]	; (5e7c <mqtt_callback+0x10c>)
    5df6:	4798      	blx	r3
        } break;
    5df8:	e02a      	b.n	5e50 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	781b      	ldrb	r3, [r3, #0]
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d117      	bne.n	5e32 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
    5e02:	4b1f      	ldr	r3, [pc, #124]	; (5e80 <mqtt_callback+0x110>)
    5e04:	491f      	ldr	r1, [pc, #124]	; (5e84 <mqtt_callback+0x114>)
    5e06:	68f8      	ldr	r0, [r7, #12]
    5e08:	2202      	movs	r2, #2
    5e0a:	4c1f      	ldr	r4, [pc, #124]	; (5e88 <mqtt_callback+0x118>)
    5e0c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
    5e0e:	4b1f      	ldr	r3, [pc, #124]	; (5e8c <mqtt_callback+0x11c>)
    5e10:	491f      	ldr	r1, [pc, #124]	; (5e90 <mqtt_callback+0x120>)
    5e12:	68f8      	ldr	r0, [r7, #12]
    5e14:	2202      	movs	r2, #2
    5e16:	4c1c      	ldr	r4, [pc, #112]	; (5e88 <mqtt_callback+0x118>)
    5e18:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
    5e1a:	4b1e      	ldr	r3, [pc, #120]	; (5e94 <mqtt_callback+0x124>)
    5e1c:	491e      	ldr	r1, [pc, #120]	; (5e98 <mqtt_callback+0x128>)
    5e1e:	68f8      	ldr	r0, [r7, #12]
    5e20:	2202      	movs	r2, #2
    5e22:	4c19      	ldr	r4, [pc, #100]	; (5e88 <mqtt_callback+0x118>)
    5e24:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
    5e26:	4b1d      	ldr	r3, [pc, #116]	; (5e9c <mqtt_callback+0x12c>)
    5e28:	0019      	movs	r1, r3
    5e2a:	2001      	movs	r0, #1
    5e2c:	4b0b      	ldr	r3, [pc, #44]	; (5e5c <mqtt_callback+0xec>)
    5e2e:	4798      	blx	r3
            break;
    5e30:	e00e      	b.n	5e50 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
    5e32:	687b      	ldr	r3, [r7, #4]
    5e34:	781b      	ldrb	r3, [r3, #0]
    5e36:	001a      	movs	r2, r3
    5e38:	4b19      	ldr	r3, [pc, #100]	; (5ea0 <mqtt_callback+0x130>)
    5e3a:	0019      	movs	r1, r3
    5e3c:	2001      	movs	r0, #1
    5e3e:	4b07      	ldr	r3, [pc, #28]	; (5e5c <mqtt_callback+0xec>)
    5e40:	4798      	blx	r3
            break;
    5e42:	e005      	b.n	5e50 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
    5e44:	4b17      	ldr	r3, [pc, #92]	; (5ea4 <mqtt_callback+0x134>)
    5e46:	0019      	movs	r1, r3
    5e48:	2001      	movs	r0, #1
    5e4a:	4b04      	ldr	r3, [pc, #16]	; (5e5c <mqtt_callback+0xec>)
    5e4c:	4798      	blx	r3
            break;
    5e4e:	46c0      	nop			; (mov r8, r8)
}
    5e50:	46c0      	nop			; (mov r8, r8)
    5e52:	46bd      	mov	sp, r7
    5e54:	b005      	add	sp, #20
    5e56:	bd90      	pop	{r4, r7, pc}
    5e58:	0002689c 	.word	0x0002689c
    5e5c:	0000d0f5 	.word	0x0000d0f5
    5e60:	000268b8 	.word	0x000268b8
    5e64:	000268c8 	.word	0x000268c8
    5e68:	0001eb29 	.word	0x0001eb29
    5e6c:	000268d4 	.word	0x000268d4
    5e70:	000268fc 	.word	0x000268fc
    5e74:	000261fc 	.word	0x000261fc
    5e78:	00026918 	.word	0x00026918
    5e7c:	0001eae1 	.word	0x0001eae1
    5e80:	00005bcd 	.word	0x00005bcd
    5e84:	00026950 	.word	0x00026950
    5e88:	0001ecc9 	.word	0x0001ecc9
    5e8c:	00005ad9 	.word	0x00005ad9
    5e90:	00026878 	.word	0x00026878
    5e94:	00005d35 	.word	0x00005d35
    5e98:	00026964 	.word	0x00026964
    5e9c:	00026978 	.word	0x00026978
    5ea0:	0002698c 	.word	0x0002698c
    5ea4:	000269c0 	.word	0x000269c0

00005ea8 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b088      	sub	sp, #32
    5eac:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
    5eae:	1d3b      	adds	r3, r7, #4
    5eb0:	0018      	movs	r0, r3
    5eb2:	4b1f      	ldr	r3, [pc, #124]	; (5f30 <configure_mqtt+0x88>)
    5eb4:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
    5eb6:	1d3b      	adds	r3, r7, #4
    5eb8:	4a1e      	ldr	r2, [pc, #120]	; (5f34 <configure_mqtt+0x8c>)
    5eba:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    5ebc:	1d3b      	adds	r3, r7, #4
    5ebe:	2280      	movs	r2, #128	; 0x80
    5ec0:	0092      	lsls	r2, r2, #2
    5ec2:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
    5ec4:	1d3b      	adds	r3, r7, #4
    5ec6:	4a1c      	ldr	r2, [pc, #112]	; (5f38 <configure_mqtt+0x90>)
    5ec8:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    5eca:	1d3b      	adds	r3, r7, #4
    5ecc:	2280      	movs	r2, #128	; 0x80
    5ece:	0092      	lsls	r2, r2, #2
    5ed0:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
    5ed2:	1d3b      	adds	r3, r7, #4
    5ed4:	4a19      	ldr	r2, [pc, #100]	; (5f3c <configure_mqtt+0x94>)
    5ed6:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
    5ed8:	1d3b      	adds	r3, r7, #4
    5eda:	4a19      	ldr	r2, [pc, #100]	; (5f40 <configure_mqtt+0x98>)
    5edc:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
    5ede:	1d3a      	adds	r2, r7, #4
    5ee0:	4b18      	ldr	r3, [pc, #96]	; (5f44 <configure_mqtt+0x9c>)
    5ee2:	0011      	movs	r1, r2
    5ee4:	0018      	movs	r0, r3
    5ee6:	4b18      	ldr	r3, [pc, #96]	; (5f48 <configure_mqtt+0xa0>)
    5ee8:	4798      	blx	r3
    5eea:	0003      	movs	r3, r0
    5eec:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    5eee:	69fb      	ldr	r3, [r7, #28]
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	da06      	bge.n	5f02 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
    5ef4:	69fa      	ldr	r2, [r7, #28]
    5ef6:	4b15      	ldr	r3, [pc, #84]	; (5f4c <configure_mqtt+0xa4>)
    5ef8:	0019      	movs	r1, r3
    5efa:	2001      	movs	r0, #1
    5efc:	4b14      	ldr	r3, [pc, #80]	; (5f50 <configure_mqtt+0xa8>)
    5efe:	4798      	blx	r3
        while (1) {
    5f00:	e7fe      	b.n	5f00 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    5f02:	4a14      	ldr	r2, [pc, #80]	; (5f54 <configure_mqtt+0xac>)
    5f04:	4b0f      	ldr	r3, [pc, #60]	; (5f44 <configure_mqtt+0x9c>)
    5f06:	0011      	movs	r1, r2
    5f08:	0018      	movs	r0, r3
    5f0a:	4b13      	ldr	r3, [pc, #76]	; (5f58 <configure_mqtt+0xb0>)
    5f0c:	4798      	blx	r3
    5f0e:	0003      	movs	r3, r0
    5f10:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    5f12:	69fb      	ldr	r3, [r7, #28]
    5f14:	2b00      	cmp	r3, #0
    5f16:	da06      	bge.n	5f26 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
    5f18:	69fa      	ldr	r2, [r7, #28]
    5f1a:	4b10      	ldr	r3, [pc, #64]	; (5f5c <configure_mqtt+0xb4>)
    5f1c:	0019      	movs	r1, r3
    5f1e:	2001      	movs	r0, #1
    5f20:	4b0b      	ldr	r3, [pc, #44]	; (5f50 <configure_mqtt+0xa8>)
    5f22:	4798      	blx	r3
        while (1) {
    5f24:	e7fe      	b.n	5f24 <configure_mqtt+0x7c>
        }
    }
}
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	46bd      	mov	sp, r7
    5f2a:	b008      	add	sp, #32
    5f2c:	bd80      	pop	{r7, pc}
    5f2e:	46c0      	nop			; (mov r8, r8)
    5f30:	0001ea21 	.word	0x0001ea21
    5f34:	200008f0 	.word	0x200008f0
    5f38:	20000af0 	.word	0x20000af0
    5f3c:	0000075b 	.word	0x0000075b
    5f40:	00001770 	.word	0x00001770
    5f44:	200008b8 	.word	0x200008b8
    5f48:	0001e971 	.word	0x0001e971
    5f4c:	000269d4 	.word	0x000269d4
    5f50:	0000d0f5 	.word	0x0000d0f5
    5f54:	00005d71 	.word	0x00005d71
    5f58:	0001ea61 	.word	0x0001ea61
    5f5c:	00026a08 	.word	0x00026a08

00005f60 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
    5f60:	b580      	push	{r7, lr}
    5f62:	b084      	sub	sp, #16
    5f64:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
    5f66:	1d3b      	adds	r3, r7, #4
    5f68:	0018      	movs	r0, r3
    5f6a:	4b0b      	ldr	r3, [pc, #44]	; (5f98 <configure_extint_channel+0x38>)
    5f6c:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    5f6e:	1d3b      	adds	r3, r7, #4
    5f70:	2237      	movs	r2, #55	; 0x37
    5f72:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    5f74:	1d3b      	adds	r3, r7, #4
    5f76:	2200      	movs	r2, #0
    5f78:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    5f7a:	1d3b      	adds	r3, r7, #4
    5f7c:	2201      	movs	r2, #1
    5f7e:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    5f80:	1d3b      	adds	r3, r7, #4
    5f82:	2202      	movs	r2, #2
    5f84:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    5f86:	1d3b      	adds	r3, r7, #4
    5f88:	0019      	movs	r1, r3
    5f8a:	2007      	movs	r0, #7
    5f8c:	4b03      	ldr	r3, [pc, #12]	; (5f9c <configure_extint_channel+0x3c>)
    5f8e:	4798      	blx	r3
}
    5f90:	46c0      	nop			; (mov r8, r8)
    5f92:	46bd      	mov	sp, r7
    5f94:	b004      	add	sp, #16
    5f96:	bd80      	pop	{r7, pc}
    5f98:	00015b59 	.word	0x00015b59
    5f9c:	00015b8d 	.word	0x00015b8d

00005fa0 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
    5fa0:	b580      	push	{r7, lr}
    5fa2:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5fa4:	4b06      	ldr	r3, [pc, #24]	; (5fc0 <configure_extint_callbacks+0x20>)
    5fa6:	2200      	movs	r2, #0
    5fa8:	2107      	movs	r1, #7
    5faa:	0018      	movs	r0, r3
    5fac:	4b05      	ldr	r3, [pc, #20]	; (5fc4 <configure_extint_callbacks+0x24>)
    5fae:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5fb0:	2100      	movs	r1, #0
    5fb2:	2007      	movs	r0, #7
    5fb4:	4b04      	ldr	r3, [pc, #16]	; (5fc8 <configure_extint_callbacks+0x28>)
    5fb6:	4798      	blx	r3
}
    5fb8:	46c0      	nop			; (mov r8, r8)
    5fba:	46bd      	mov	sp, r7
    5fbc:	bd80      	pop	{r7, pc}
    5fbe:	46c0      	nop			; (mov r8, r8)
    5fc0:	00005fcd 	.word	0x00005fcd
    5fc4:	00015759 	.word	0x00015759
    5fc8:	000157bd 	.word	0x000157bd

00005fcc <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
    5fcc:	b5b0      	push	{r4, r5, r7, lr}
    5fce:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
    5fd0:	4b0c      	ldr	r3, [pc, #48]	; (6004 <extint_detection_callback+0x38>)
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	1c5a      	adds	r2, r3, #1
    5fd6:	4b0b      	ldr	r3, [pc, #44]	; (6004 <extint_detection_callback+0x38>)
    5fd8:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
    5fda:	4b0a      	ldr	r3, [pc, #40]	; (6004 <extint_detection_callback+0x38>)
    5fdc:	681b      	ldr	r3, [r3, #0]
    5fde:	2b28      	cmp	r3, #40	; 0x28
    5fe0:	d902      	bls.n	5fe8 <extint_detection_callback+0x1c>
    5fe2:	4b08      	ldr	r3, [pc, #32]	; (6004 <extint_detection_callback+0x38>)
    5fe4:	2201      	movs	r2, #1
    5fe6:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
    5fe8:	4b06      	ldr	r3, [pc, #24]	; (6004 <extint_detection_callback+0x38>)
    5fea:	681b      	ldr	r3, [r3, #0]
    5fec:	4a06      	ldr	r2, [pc, #24]	; (6008 <extint_detection_callback+0x3c>)
    5fee:	4807      	ldr	r0, [pc, #28]	; (600c <extint_detection_callback+0x40>)
    5ff0:	213f      	movs	r1, #63	; 0x3f
    5ff2:	4c07      	ldr	r4, [pc, #28]	; (6010 <extint_detection_callback+0x44>)
    5ff4:	47a0      	blx	r4
    isPressed = true;
    5ff6:	4b07      	ldr	r3, [pc, #28]	; (6014 <extint_detection_callback+0x48>)
    5ff8:	2201      	movs	r2, #1
    5ffa:	701a      	strb	r2, [r3, #0]
    // Published in the Wifi thread main loop
}
    5ffc:	46c0      	nop			; (mov r8, r8)
    5ffe:	46bd      	mov	sp, r7
    6000:	bdb0      	pop	{r4, r5, r7, pc}
    6002:	46c0      	nop			; (mov r8, r8)
    6004:	200000a4 	.word	0x200000a4
    6008:	00026a3c 	.word	0x00026a3c
    600c:	20000064 	.word	0x20000064
    6010:	00024a11 	.word	0x00024a11
    6014:	20000cf0 	.word	0x20000cf0

00006018 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
    6018:	b580      	push	{r7, lr}
    601a:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
    601c:	4a15      	ldr	r2, [pc, #84]	; (6074 <HTTP_DownloadFileInit+0x5c>)
    601e:	4b16      	ldr	r3, [pc, #88]	; (6078 <HTTP_DownloadFileInit+0x60>)
    6020:	0011      	movs	r1, r2
    6022:	0018      	movs	r0, r3
    6024:	4b15      	ldr	r3, [pc, #84]	; (607c <HTTP_DownloadFileInit+0x64>)
    6026:	4798      	blx	r3
    6028:	1e03      	subs	r3, r0, #0
    602a:	d008      	beq.n	603e <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    602c:	4b14      	ldr	r3, [pc, #80]	; (6080 <HTTP_DownloadFileInit+0x68>)
    602e:	0019      	movs	r1, r3
    6030:	2001      	movs	r0, #1
    6032:	4b14      	ldr	r3, [pc, #80]	; (6084 <HTTP_DownloadFileInit+0x6c>)
    6034:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
    6036:	e002      	b.n	603e <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
    6038:	2000      	movs	r0, #0
    603a:	4b13      	ldr	r3, [pc, #76]	; (6088 <HTTP_DownloadFileInit+0x70>)
    603c:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
    603e:	4b0e      	ldr	r3, [pc, #56]	; (6078 <HTTP_DownloadFileInit+0x60>)
    6040:	2234      	movs	r2, #52	; 0x34
    6042:	5c9b      	ldrb	r3, [r3, r2]
    6044:	2b00      	cmp	r3, #0
    6046:	d1f7      	bne.n	6038 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
    6048:	4b10      	ldr	r3, [pc, #64]	; (608c <HTTP_DownloadFileInit+0x74>)
    604a:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
    604c:	4b10      	ldr	r3, [pc, #64]	; (6090 <HTTP_DownloadFileInit+0x78>)
    604e:	2201      	movs	r2, #1
    6050:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
    6052:	4a10      	ldr	r2, [pc, #64]	; (6094 <HTTP_DownloadFileInit+0x7c>)
    6054:	4b10      	ldr	r3, [pc, #64]	; (6098 <HTTP_DownloadFileInit+0x80>)
    6056:	0011      	movs	r1, r2
    6058:	0018      	movs	r0, r3
    605a:	4b10      	ldr	r3, [pc, #64]	; (609c <HTTP_DownloadFileInit+0x84>)
    605c:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
    605e:	4b10      	ldr	r3, [pc, #64]	; (60a0 <HTTP_DownloadFileInit+0x88>)
    6060:	4798      	blx	r3

    start_download();
    6062:	4b10      	ldr	r3, [pc, #64]	; (60a4 <HTTP_DownloadFileInit+0x8c>)
    6064:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
    6066:	4b10      	ldr	r3, [pc, #64]	; (60a8 <HTTP_DownloadFileInit+0x90>)
    6068:	2203      	movs	r2, #3
    606a:	701a      	strb	r2, [r3, #0]
}
    606c:	46c0      	nop			; (mov r8, r8)
    606e:	46bd      	mov	sp, r7
    6070:	bd80      	pop	{r7, pc}
    6072:	46c0      	nop			; (mov r8, r8)
    6074:	000261fc 	.word	0x000261fc
    6078:	200008b8 	.word	0x200008b8
    607c:	0001ec15 	.word	0x0001ec15
    6080:	00026608 	.word	0x00026608
    6084:	0000d0f5 	.word	0x0000d0f5
    6088:	00011249 	.word	0x00011249
    608c:	00014805 	.word	0x00014805
    6090:	20000658 	.word	0x20000658
    6094:	00005739 	.word	0x00005739
    6098:	00005705 	.word	0x00005705
    609c:	0001484d 	.word	0x0001484d
    60a0:	000147b5 	.word	0x000147b5
    60a4:	00005329 	.word	0x00005329
    60a8:	20000645 	.word	0x20000645

000060ac <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
    60ac:	b590      	push	{r4, r7, lr}
    60ae:	b085      	sub	sp, #20
    60b0:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    60b2:	e009      	b.n	60c8 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    60b4:	2000      	movs	r0, #0
    60b6:	4b2a      	ldr	r3, [pc, #168]	; (6160 <HTTP_DownloadFileTransaction+0xb4>)
    60b8:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    60ba:	4b2a      	ldr	r3, [pc, #168]	; (6164 <HTTP_DownloadFileTransaction+0xb8>)
    60bc:	0018      	movs	r0, r3
    60be:	4b2a      	ldr	r3, [pc, #168]	; (6168 <HTTP_DownloadFileTransaction+0xbc>)
    60c0:	4798      	blx	r3
        vTaskDelay(5);
    60c2:	2005      	movs	r0, #5
    60c4:	4b29      	ldr	r3, [pc, #164]	; (616c <HTTP_DownloadFileTransaction+0xc0>)
    60c6:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    60c8:	2010      	movs	r0, #16
    60ca:	4b29      	ldr	r3, [pc, #164]	; (6170 <HTTP_DownloadFileTransaction+0xc4>)
    60cc:	4798      	blx	r3
    60ce:	0003      	movs	r3, r0
    60d0:	001a      	movs	r2, r3
    60d2:	2301      	movs	r3, #1
    60d4:	4053      	eors	r3, r2
    60d6:	b2db      	uxtb	r3, r3
    60d8:	2b00      	cmp	r3, #0
    60da:	d009      	beq.n	60f0 <HTTP_DownloadFileTransaction+0x44>
    60dc:	2020      	movs	r0, #32
    60de:	4b24      	ldr	r3, [pc, #144]	; (6170 <HTTP_DownloadFileTransaction+0xc4>)
    60e0:	4798      	blx	r3
    60e2:	0003      	movs	r3, r0
    60e4:	001a      	movs	r2, r3
    60e6:	2301      	movs	r3, #1
    60e8:	4053      	eors	r3, r2
    60ea:	b2db      	uxtb	r3, r3
    60ec:	2b00      	cmp	r3, #0
    60ee:	d1e1      	bne.n	60b4 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
    60f0:	4b20      	ldr	r3, [pc, #128]	; (6174 <HTTP_DownloadFileTransaction+0xc8>)
    60f2:	4798      	blx	r3
    vTaskDelay(1000);
    60f4:	23fa      	movs	r3, #250	; 0xfa
    60f6:	009b      	lsls	r3, r3, #2
    60f8:	0018      	movs	r0, r3
    60fa:	4b1c      	ldr	r3, [pc, #112]	; (616c <HTTP_DownloadFileTransaction+0xc0>)
    60fc:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
    60fe:	4b1e      	ldr	r3, [pc, #120]	; (6178 <HTTP_DownloadFileTransaction+0xcc>)
    6100:	2200      	movs	r2, #0
    6102:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
    6104:	003b      	movs	r3, r7
    6106:	4a1d      	ldr	r2, [pc, #116]	; (617c <HTTP_DownloadFileTransaction+0xd0>)
    6108:	ca13      	ldmia	r2!, {r0, r1, r4}
    610a:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    610c:	003b      	movs	r3, r7
    610e:	2230      	movs	r2, #48	; 0x30
    6110:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    6112:	230f      	movs	r3, #15
    6114:	18fc      	adds	r4, r7, r3
    6116:	0039      	movs	r1, r7
    6118:	4b19      	ldr	r3, [pc, #100]	; (6180 <HTTP_DownloadFileTransaction+0xd4>)
    611a:	220a      	movs	r2, #10
    611c:	0018      	movs	r0, r3
    611e:	4b19      	ldr	r3, [pc, #100]	; (6184 <HTTP_DownloadFileTransaction+0xd8>)
    6120:	4798      	blx	r3
    6122:	0003      	movs	r3, r0
    6124:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
    6126:	230f      	movs	r3, #15
    6128:	18fb      	adds	r3, r7, r3
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	2b00      	cmp	r3, #0
    612e:	d008      	beq.n	6142 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    6130:	230f      	movs	r3, #15
    6132:	18fb      	adds	r3, r7, r3
    6134:	781a      	ldrb	r2, [r3, #0]
    6136:	4b14      	ldr	r3, [pc, #80]	; (6188 <HTTP_DownloadFileTransaction+0xdc>)
    6138:	0019      	movs	r1, r3
    613a:	2000      	movs	r0, #0
    613c:	4b13      	ldr	r3, [pc, #76]	; (618c <HTTP_DownloadFileTransaction+0xe0>)
    613e:	4798      	blx	r3
    6140:	e003      	b.n	614a <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
    6142:	4b13      	ldr	r3, [pc, #76]	; (6190 <HTTP_DownloadFileTransaction+0xe4>)
    6144:	0018      	movs	r0, r3
    6146:	4b13      	ldr	r3, [pc, #76]	; (6194 <HTTP_DownloadFileTransaction+0xe8>)
    6148:	4798      	blx	r3
    }

    f_close(&file_object);
    614a:	4b0d      	ldr	r3, [pc, #52]	; (6180 <HTTP_DownloadFileTransaction+0xd4>)
    614c:	0018      	movs	r0, r3
    614e:	4b12      	ldr	r3, [pc, #72]	; (6198 <HTTP_DownloadFileTransaction+0xec>)
    6150:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
    6152:	4b12      	ldr	r3, [pc, #72]	; (619c <HTTP_DownloadFileTransaction+0xf0>)
    6154:	2200      	movs	r2, #0
    6156:	701a      	strb	r2, [r3, #0]
}
    6158:	46c0      	nop			; (mov r8, r8)
    615a:	46bd      	mov	sp, r7
    615c:	b005      	add	sp, #20
    615e:	bd90      	pop	{r4, r7, pc}
    6160:	00011249 	.word	0x00011249
    6164:	20004530 	.word	0x20004530
    6168:	0002193d 	.word	0x0002193d
    616c:	0000b3b5 	.word	0x0000b3b5
    6170:	00005001 	.word	0x00005001
    6174:	00014805 	.word	0x00014805
    6178:	20000658 	.word	0x20000658
    617c:	00026a74 	.word	0x00026a74
    6180:	2000088c 	.word	0x2000088c
    6184:	0001cc05 	.word	0x0001cc05
    6188:	00026a50 	.word	0x00026a50
    618c:	0000d0f5 	.word	0x0000d0f5
    6190:	00026a60 	.word	0x00026a60
    6194:	0000d009 	.word	0x0000d009
    6198:	0001d605 	.word	0x0001d605
    619c:	20000645 	.word	0x20000645

000061a0 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
    61a0:	b580      	push	{r7, lr}
    61a2:	af00      	add	r7, sp, #0
    socketDeinit();
    61a4:	4b18      	ldr	r3, [pc, #96]	; (6208 <MQTT_InitRoutine+0x68>)
    61a6:	4798      	blx	r3
    configure_mqtt();
    61a8:	4b18      	ldr	r3, [pc, #96]	; (620c <MQTT_InitRoutine+0x6c>)
    61aa:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    61ac:	4a18      	ldr	r2, [pc, #96]	; (6210 <MQTT_InitRoutine+0x70>)
    61ae:	4b19      	ldr	r3, [pc, #100]	; (6214 <MQTT_InitRoutine+0x74>)
    61b0:	0011      	movs	r1, r2
    61b2:	0018      	movs	r0, r3
    61b4:	4b18      	ldr	r3, [pc, #96]	; (6218 <MQTT_InitRoutine+0x78>)
    61b6:	4798      	blx	r3
    socketInit();
    61b8:	4b18      	ldr	r3, [pc, #96]	; (621c <MQTT_InitRoutine+0x7c>)
    61ba:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
    61bc:	4b18      	ldr	r3, [pc, #96]	; (6220 <MQTT_InitRoutine+0x80>)
    61be:	2234      	movs	r2, #52	; 0x34
    61c0:	5c9b      	ldrb	r3, [r3, r2]
    61c2:	2201      	movs	r2, #1
    61c4:	4053      	eors	r3, r2
    61c6:	b2db      	uxtb	r3, r3
    61c8:	2b00      	cmp	r3, #0
    61ca:	d00c      	beq.n	61e6 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    61cc:	4a15      	ldr	r2, [pc, #84]	; (6224 <MQTT_InitRoutine+0x84>)
    61ce:	4b14      	ldr	r3, [pc, #80]	; (6220 <MQTT_InitRoutine+0x80>)
    61d0:	0011      	movs	r1, r2
    61d2:	0018      	movs	r0, r3
    61d4:	4b14      	ldr	r3, [pc, #80]	; (6228 <MQTT_InitRoutine+0x88>)
    61d6:	4798      	blx	r3
    61d8:	1e03      	subs	r3, r0, #0
    61da:	d004      	beq.n	61e6 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    61dc:	4b13      	ldr	r3, [pc, #76]	; (622c <MQTT_InitRoutine+0x8c>)
    61de:	0019      	movs	r1, r3
    61e0:	2001      	movs	r0, #1
    61e2:	4b13      	ldr	r3, [pc, #76]	; (6230 <MQTT_InitRoutine+0x90>)
    61e4:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
    61e6:	4b0e      	ldr	r3, [pc, #56]	; (6220 <MQTT_InitRoutine+0x80>)
    61e8:	2234      	movs	r2, #52	; 0x34
    61ea:	5c9b      	ldrb	r3, [r3, r2]
    61ec:	2b00      	cmp	r3, #0
    61ee:	d004      	beq.n	61fa <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
    61f0:	4b10      	ldr	r3, [pc, #64]	; (6234 <MQTT_InitRoutine+0x94>)
    61f2:	0019      	movs	r1, r3
    61f4:	2001      	movs	r0, #1
    61f6:	4b0e      	ldr	r3, [pc, #56]	; (6230 <MQTT_InitRoutine+0x90>)
    61f8:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
    61fa:	4b0f      	ldr	r3, [pc, #60]	; (6238 <MQTT_InitRoutine+0x98>)
    61fc:	2201      	movs	r2, #1
    61fe:	701a      	strb	r2, [r3, #0]
}
    6200:	46c0      	nop			; (mov r8, r8)
    6202:	46bd      	mov	sp, r7
    6204:	bd80      	pop	{r7, pc}
    6206:	46c0      	nop			; (mov r8, r8)
    6208:	00014805 	.word	0x00014805
    620c:	00005ea9 	.word	0x00005ea9
    6210:	00005ab5 	.word	0x00005ab5
    6214:	00005a81 	.word	0x00005a81
    6218:	0001484d 	.word	0x0001484d
    621c:	000147b5 	.word	0x000147b5
    6220:	200008b8 	.word	0x200008b8
    6224:	000261fc 	.word	0x000261fc
    6228:	0001eae1 	.word	0x0001eae1
    622c:	00026608 	.word	0x00026608
    6230:	0000d0f5 	.word	0x0000d0f5
    6234:	00026a80 	.word	0x00026a80
    6238:	20000645 	.word	0x20000645

0000623c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
    623c:	b580      	push	{r7, lr}
    623e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
    6240:	2000      	movs	r0, #0
    6242:	4b0b      	ldr	r3, [pc, #44]	; (6270 <MQTT_HandleTransactions+0x34>)
    6244:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
    6246:	4b0b      	ldr	r3, [pc, #44]	; (6274 <MQTT_HandleTransactions+0x38>)
    6248:	0018      	movs	r0, r3
    624a:	4b0b      	ldr	r3, [pc, #44]	; (6278 <MQTT_HandleTransactions+0x3c>)
    624c:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
    624e:	4b0b      	ldr	r3, [pc, #44]	; (627c <MQTT_HandleTransactions+0x40>)
    6250:	4798      	blx	r3
    MQTT_HandleImuMessages();
    6252:	4b0b      	ldr	r3, [pc, #44]	; (6280 <MQTT_HandleTransactions+0x44>)
    6254:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
    6256:	4b0b      	ldr	r3, [pc, #44]	; (6284 <MQTT_HandleTransactions+0x48>)
    6258:	2234      	movs	r2, #52	; 0x34
    625a:	5c9b      	ldrb	r3, [r3, r2]
    625c:	2b00      	cmp	r3, #0
    625e:	d004      	beq.n	626a <MQTT_HandleTransactions+0x2e>
    6260:	4b08      	ldr	r3, [pc, #32]	; (6284 <MQTT_HandleTransactions+0x48>)
    6262:	2164      	movs	r1, #100	; 0x64
    6264:	0018      	movs	r0, r3
    6266:	4b08      	ldr	r3, [pc, #32]	; (6288 <MQTT_HandleTransactions+0x4c>)
    6268:	4798      	blx	r3
}
    626a:	46c0      	nop			; (mov r8, r8)
    626c:	46bd      	mov	sp, r7
    626e:	bd80      	pop	{r7, pc}
    6270:	00011249 	.word	0x00011249
    6274:	20004530 	.word	0x20004530
    6278:	0002193d 	.word	0x0002193d
    627c:	00006319 	.word	0x00006319
    6280:	0000628d 	.word	0x0000628d
    6284:	200008b8 	.word	0x200008b8
    6288:	0001ed11 	.word	0x0001ed11

0000628c <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
    628c:	b590      	push	{r4, r7, lr}
    628e:	b085      	sub	sp, #20
    6290:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
    6292:	4b18      	ldr	r3, [pc, #96]	; (62f4 <MQTT_HandleImuMessages+0x68>)
    6294:	681b      	ldr	r3, [r3, #0]
    6296:	0039      	movs	r1, r7
    6298:	2200      	movs	r2, #0
    629a:	0018      	movs	r0, r3
    629c:	4b16      	ldr	r3, [pc, #88]	; (62f8 <MQTT_HandleImuMessages+0x6c>)
    629e:	4798      	blx	r3
    62a0:	0003      	movs	r3, r0
    62a2:	2b01      	cmp	r3, #1
    62a4:	d121      	bne.n	62ea <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
    62a6:	003b      	movs	r3, r7
    62a8:	2200      	movs	r2, #0
    62aa:	5e9b      	ldrsh	r3, [r3, r2]
    62ac:	001c      	movs	r4, r3
    62ae:	003b      	movs	r3, r7
    62b0:	2202      	movs	r2, #2
    62b2:	5e9b      	ldrsh	r3, [r3, r2]
    62b4:	0019      	movs	r1, r3
    62b6:	003b      	movs	r3, r7
    62b8:	2204      	movs	r2, #4
    62ba:	5e9b      	ldrsh	r3, [r3, r2]
    62bc:	4a0f      	ldr	r2, [pc, #60]	; (62fc <MQTT_HandleImuMessages+0x70>)
    62be:	4810      	ldr	r0, [pc, #64]	; (6300 <MQTT_HandleImuMessages+0x74>)
    62c0:	9301      	str	r3, [sp, #4]
    62c2:	9100      	str	r1, [sp, #0]
    62c4:	0023      	movs	r3, r4
    62c6:	213f      	movs	r1, #63	; 0x3f
    62c8:	4c0e      	ldr	r4, [pc, #56]	; (6304 <MQTT_HandleImuMessages+0x78>)
    62ca:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
    62cc:	4b0c      	ldr	r3, [pc, #48]	; (6300 <MQTT_HandleImuMessages+0x74>)
    62ce:	0018      	movs	r0, r3
    62d0:	4b0d      	ldr	r3, [pc, #52]	; (6308 <MQTT_HandleImuMessages+0x7c>)
    62d2:	4798      	blx	r3
    62d4:	0004      	movs	r4, r0
    62d6:	4a0a      	ldr	r2, [pc, #40]	; (6300 <MQTT_HandleImuMessages+0x74>)
    62d8:	490c      	ldr	r1, [pc, #48]	; (630c <MQTT_HandleImuMessages+0x80>)
    62da:	480d      	ldr	r0, [pc, #52]	; (6310 <MQTT_HandleImuMessages+0x84>)
    62dc:	2300      	movs	r3, #0
    62de:	9301      	str	r3, [sp, #4]
    62e0:	2301      	movs	r3, #1
    62e2:	9300      	str	r3, [sp, #0]
    62e4:	0023      	movs	r3, r4
    62e6:	4c0b      	ldr	r4, [pc, #44]	; (6314 <MQTT_HandleImuMessages+0x88>)
    62e8:	47a0      	blx	r4
    }
}
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	46bd      	mov	sp, r7
    62ee:	b003      	add	sp, #12
    62f0:	bd90      	pop	{r4, r7, pc}
    62f2:	46c0      	nop			; (mov r8, r8)
    62f4:	20000650 	.word	0x20000650
    62f8:	0000a209 	.word	0x0000a209
    62fc:	00026a9c 	.word	0x00026a9c
    6300:	20000024 	.word	0x20000024
    6304:	00024a11 	.word	0x00024a11
    6308:	00024b6f 	.word	0x00024b6f
    630c:	00026964 	.word	0x00026964
    6310:	200008b8 	.word	0x200008b8
    6314:	0001ec5d 	.word	0x0001ec5d

00006318 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
    6318:	b590      	push	{r4, r7, lr}
    631a:	b08b      	sub	sp, #44	; 0x2c
    631c:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
    631e:	4b39      	ldr	r3, [pc, #228]	; (6404 <MQTT_HandleGameMessages+0xec>)
    6320:	681b      	ldr	r3, [r3, #0]
    6322:	2208      	movs	r2, #8
    6324:	18b9      	adds	r1, r7, r2
    6326:	2200      	movs	r2, #0
    6328:	0018      	movs	r0, r3
    632a:	4b37      	ldr	r3, [pc, #220]	; (6408 <MQTT_HandleGameMessages+0xf0>)
    632c:	4798      	blx	r3
    632e:	0003      	movs	r3, r0
    6330:	2b01      	cmp	r3, #1
    6332:	d163      	bne.n	63fc <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
    6334:	4b35      	ldr	r3, [pc, #212]	; (640c <MQTT_HandleGameMessages+0xf4>)
    6336:	4a36      	ldr	r2, [pc, #216]	; (6410 <MQTT_HandleGameMessages+0xf8>)
    6338:	ca03      	ldmia	r2!, {r0, r1}
    633a:	c303      	stmia	r3!, {r0, r1}
    633c:	8812      	ldrh	r2, [r2, #0]
    633e:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    6340:	2300      	movs	r3, #0
    6342:	61fb      	str	r3, [r7, #28]
    6344:	e02d      	b.n	63a2 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
    6346:	2308      	movs	r3, #8
    6348:	18fa      	adds	r2, r7, r3
    634a:	69fb      	ldr	r3, [r7, #28]
    634c:	18d3      	adds	r3, r2, r3
    634e:	781b      	ldrb	r3, [r3, #0]
    6350:	2bff      	cmp	r3, #255	; 0xff
    6352:	d02a      	beq.n	63aa <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
    6354:	2308      	movs	r3, #8
    6356:	18fa      	adds	r2, r7, r3
    6358:	69fb      	ldr	r3, [r7, #28]
    635a:	18d3      	adds	r3, r2, r3
    635c:	781b      	ldrb	r3, [r3, #0]
    635e:	4a2d      	ldr	r2, [pc, #180]	; (6414 <MQTT_HandleGameMessages+0xfc>)
    6360:	0038      	movs	r0, r7
    6362:	2103      	movs	r1, #3
    6364:	4c2c      	ldr	r4, [pc, #176]	; (6418 <MQTT_HandleGameMessages+0x100>)
    6366:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
    6368:	003a      	movs	r2, r7
    636a:	4b28      	ldr	r3, [pc, #160]	; (640c <MQTT_HandleGameMessages+0xf4>)
    636c:	0011      	movs	r1, r2
    636e:	0018      	movs	r0, r3
    6370:	4b2a      	ldr	r3, [pc, #168]	; (641c <MQTT_HandleGameMessages+0x104>)
    6372:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
    6374:	69fb      	ldr	r3, [r7, #28]
    6376:	3301      	adds	r3, #1
    6378:	2208      	movs	r2, #8
    637a:	18ba      	adds	r2, r7, r2
    637c:	5cd3      	ldrb	r3, [r2, r3]
    637e:	2bff      	cmp	r3, #255	; 0xff
    6380:	d00c      	beq.n	639c <MQTT_HandleGameMessages+0x84>
    6382:	69fb      	ldr	r3, [r7, #28]
    6384:	3301      	adds	r3, #1
    6386:	2b13      	cmp	r3, #19
    6388:	dc08      	bgt.n	639c <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
    638a:	003b      	movs	r3, r7
    638c:	222c      	movs	r2, #44	; 0x2c
    638e:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
    6390:	003a      	movs	r2, r7
    6392:	4b1e      	ldr	r3, [pc, #120]	; (640c <MQTT_HandleGameMessages+0xf4>)
    6394:	0011      	movs	r1, r2
    6396:	0018      	movs	r0, r3
    6398:	4b20      	ldr	r3, [pc, #128]	; (641c <MQTT_HandleGameMessages+0x104>)
    639a:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    639c:	69fb      	ldr	r3, [r7, #28]
    639e:	3301      	adds	r3, #1
    63a0:	61fb      	str	r3, [r7, #28]
    63a2:	69fb      	ldr	r3, [r7, #28]
    63a4:	2b13      	cmp	r3, #19
    63a6:	ddce      	ble.n	6346 <MQTT_HandleGameMessages+0x2e>
    63a8:	e000      	b.n	63ac <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
    63aa:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
    63ac:	4b17      	ldr	r3, [pc, #92]	; (640c <MQTT_HandleGameMessages+0xf4>)
    63ae:	0018      	movs	r0, r3
    63b0:	4b1b      	ldr	r3, [pc, #108]	; (6420 <MQTT_HandleGameMessages+0x108>)
    63b2:	4798      	blx	r3
    63b4:	0003      	movs	r3, r0
    63b6:	001a      	movs	r2, r3
    63b8:	4b14      	ldr	r3, [pc, #80]	; (640c <MQTT_HandleGameMessages+0xf4>)
    63ba:	18d2      	adds	r2, r2, r3
    63bc:	4b19      	ldr	r3, [pc, #100]	; (6424 <MQTT_HandleGameMessages+0x10c>)
    63be:	0010      	movs	r0, r2
    63c0:	0019      	movs	r1, r3
    63c2:	2303      	movs	r3, #3
    63c4:	001a      	movs	r2, r3
    63c6:	4b18      	ldr	r3, [pc, #96]	; (6428 <MQTT_HandleGameMessages+0x110>)
    63c8:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
    63ca:	4b10      	ldr	r3, [pc, #64]	; (640c <MQTT_HandleGameMessages+0xf4>)
    63cc:	0019      	movs	r1, r3
    63ce:	2001      	movs	r0, #1
    63d0:	4b16      	ldr	r3, [pc, #88]	; (642c <MQTT_HandleGameMessages+0x114>)
    63d2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
    63d4:	4b16      	ldr	r3, [pc, #88]	; (6430 <MQTT_HandleGameMessages+0x118>)
    63d6:	0019      	movs	r1, r3
    63d8:	2001      	movs	r0, #1
    63da:	4b14      	ldr	r3, [pc, #80]	; (642c <MQTT_HandleGameMessages+0x114>)
    63dc:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
    63de:	4b0b      	ldr	r3, [pc, #44]	; (640c <MQTT_HandleGameMessages+0xf4>)
    63e0:	0018      	movs	r0, r3
    63e2:	4b0f      	ldr	r3, [pc, #60]	; (6420 <MQTT_HandleGameMessages+0x108>)
    63e4:	4798      	blx	r3
    63e6:	0004      	movs	r4, r0
    63e8:	4a08      	ldr	r2, [pc, #32]	; (640c <MQTT_HandleGameMessages+0xf4>)
    63ea:	4912      	ldr	r1, [pc, #72]	; (6434 <MQTT_HandleGameMessages+0x11c>)
    63ec:	4812      	ldr	r0, [pc, #72]	; (6438 <MQTT_HandleGameMessages+0x120>)
    63ee:	2300      	movs	r3, #0
    63f0:	9301      	str	r3, [sp, #4]
    63f2:	2301      	movs	r3, #1
    63f4:	9300      	str	r3, [sp, #0]
    63f6:	0023      	movs	r3, r4
    63f8:	4c10      	ldr	r4, [pc, #64]	; (643c <MQTT_HandleGameMessages+0x124>)
    63fa:	47a0      	blx	r4
    }
}
    63fc:	46c0      	nop			; (mov r8, r8)
    63fe:	46bd      	mov	sp, r7
    6400:	b009      	add	sp, #36	; 0x24
    6402:	bd90      	pop	{r4, r7, pc}
    6404:	2000064c 	.word	0x2000064c
    6408:	0000a209 	.word	0x0000a209
    640c:	20000024 	.word	0x20000024
    6410:	000267a4 	.word	0x000267a4
    6414:	00026ac0 	.word	0x00026ac0
    6418:	00024a11 	.word	0x00024a11
    641c:	00024af5 	.word	0x00024af5
    6420:	00024b6f 	.word	0x00024b6f
    6424:	00026ac4 	.word	0x00026ac4
    6428:	00024781 	.word	0x00024781
    642c:	0000d0f5 	.word	0x0000d0f5
    6430:	00026ac8 	.word	0x00026ac8
    6434:	00026acc 	.word	0x00026acc
    6438:	200008b8 	.word	0x200008b8
    643c:	0001ec5d 	.word	0x0001ec5d

00006440 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
    6440:	b590      	push	{r4, r7, lr}
    6442:	b08d      	sub	sp, #52	; 0x34
    6444:	af02      	add	r7, sp, #8
    6446:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
    6448:	2064      	movs	r0, #100	; 0x64
    644a:	4b79      	ldr	r3, [pc, #484]	; (6630 <vWifiTask+0x1f0>)
    644c:	4798      	blx	r3
    init_state();
    644e:	4b79      	ldr	r3, [pc, #484]	; (6634 <vWifiTask+0x1f4>)
    6450:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
    6452:	2200      	movs	r2, #0
    6454:	2104      	movs	r1, #4
    6456:	2005      	movs	r0, #5
    6458:	4b77      	ldr	r3, [pc, #476]	; (6638 <vWifiTask+0x1f8>)
    645a:	4798      	blx	r3
    645c:	0002      	movs	r2, r0
    645e:	4b77      	ldr	r3, [pc, #476]	; (663c <vWifiTask+0x1fc>)
    6460:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
    6462:	2200      	movs	r2, #0
    6464:	2106      	movs	r1, #6
    6466:	2005      	movs	r0, #5
    6468:	4b73      	ldr	r3, [pc, #460]	; (6638 <vWifiTask+0x1f8>)
    646a:	4798      	blx	r3
    646c:	0002      	movs	r2, r0
    646e:	4b74      	ldr	r3, [pc, #464]	; (6640 <vWifiTask+0x200>)
    6470:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
    6472:	2200      	movs	r2, #0
    6474:	2114      	movs	r1, #20
    6476:	2002      	movs	r0, #2
    6478:	4b6f      	ldr	r3, [pc, #444]	; (6638 <vWifiTask+0x1f8>)
    647a:	4798      	blx	r3
    647c:	0002      	movs	r2, r0
    647e:	4b71      	ldr	r3, [pc, #452]	; (6644 <vWifiTask+0x204>)
    6480:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
    6482:	2200      	movs	r2, #0
    6484:	2102      	movs	r1, #2
    6486:	2005      	movs	r0, #5
    6488:	4b6b      	ldr	r3, [pc, #428]	; (6638 <vWifiTask+0x1f8>)
    648a:	4798      	blx	r3
    648c:	0002      	movs	r2, r0
    648e:	4b6e      	ldr	r3, [pc, #440]	; (6648 <vWifiTask+0x208>)
    6490:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
    6492:	4b6a      	ldr	r3, [pc, #424]	; (663c <vWifiTask+0x1fc>)
    6494:	681b      	ldr	r3, [r3, #0]
    6496:	2b00      	cmp	r3, #0
    6498:	d00b      	beq.n	64b2 <vWifiTask+0x72>
    649a:	4b69      	ldr	r3, [pc, #420]	; (6640 <vWifiTask+0x200>)
    649c:	681b      	ldr	r3, [r3, #0]
    649e:	2b00      	cmp	r3, #0
    64a0:	d007      	beq.n	64b2 <vWifiTask+0x72>
    64a2:	4b68      	ldr	r3, [pc, #416]	; (6644 <vWifiTask+0x204>)
    64a4:	681b      	ldr	r3, [r3, #0]
    64a6:	2b00      	cmp	r3, #0
    64a8:	d003      	beq.n	64b2 <vWifiTask+0x72>
    64aa:	4b67      	ldr	r3, [pc, #412]	; (6648 <vWifiTask+0x208>)
    64ac:	681b      	ldr	r3, [r3, #0]
    64ae:	2b00      	cmp	r3, #0
    64b0:	d103      	bne.n	64ba <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    64b2:	4b66      	ldr	r3, [pc, #408]	; (664c <vWifiTask+0x20c>)
    64b4:	0018      	movs	r0, r3
    64b6:	4b66      	ldr	r3, [pc, #408]	; (6650 <vWifiTask+0x210>)
    64b8:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
    64ba:	4b66      	ldr	r3, [pc, #408]	; (6654 <vWifiTask+0x214>)
    64bc:	0018      	movs	r0, r3
    64be:	4b64      	ldr	r3, [pc, #400]	; (6650 <vWifiTask+0x210>)
    64c0:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
    64c2:	4b65      	ldr	r3, [pc, #404]	; (6658 <vWifiTask+0x218>)
    64c4:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
    64c6:	4b65      	ldr	r3, [pc, #404]	; (665c <vWifiTask+0x21c>)
    64c8:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
    64ca:	4b65      	ldr	r3, [pc, #404]	; (6660 <vWifiTask+0x220>)
    64cc:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
    64ce:	4b65      	ldr	r3, [pc, #404]	; (6664 <vWifiTask+0x224>)
    64d0:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
    64d2:	4b65      	ldr	r3, [pc, #404]	; (6668 <vWifiTask+0x228>)
    64d4:	4798      	blx	r3
    configure_extint_callbacks();
    64d6:	4b65      	ldr	r3, [pc, #404]	; (666c <vWifiTask+0x22c>)
    64d8:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    64da:	230c      	movs	r3, #12
    64dc:	18fb      	adds	r3, r7, r3
    64de:	2218      	movs	r2, #24
    64e0:	2100      	movs	r1, #0
    64e2:	0018      	movs	r0, r3
    64e4:	4b62      	ldr	r3, [pc, #392]	; (6670 <vWifiTask+0x230>)
    64e6:	4798      	blx	r3

    nm_bsp_init();
    64e8:	4b62      	ldr	r3, [pc, #392]	; (6674 <vWifiTask+0x234>)
    64ea:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
    64ec:	230c      	movs	r3, #12
    64ee:	18fb      	adds	r3, r7, r3
    64f0:	4a61      	ldr	r2, [pc, #388]	; (6678 <vWifiTask+0x238>)
    64f2:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
    64f4:	2327      	movs	r3, #39	; 0x27
    64f6:	18fc      	adds	r4, r7, r3
    64f8:	230c      	movs	r3, #12
    64fa:	18fb      	adds	r3, r7, r3
    64fc:	0018      	movs	r0, r3
    64fe:	4b5f      	ldr	r3, [pc, #380]	; (667c <vWifiTask+0x23c>)
    6500:	4798      	blx	r3
    6502:	0003      	movs	r3, r0
    6504:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
    6506:	2327      	movs	r3, #39	; 0x27
    6508:	18fb      	adds	r3, r7, r3
    650a:	781b      	ldrb	r3, [r3, #0]
    650c:	b25b      	sxtb	r3, r3
    650e:	2b00      	cmp	r3, #0
    6510:	d009      	beq.n	6526 <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
    6512:	2327      	movs	r3, #39	; 0x27
    6514:	18fb      	adds	r3, r7, r3
    6516:	2200      	movs	r2, #0
    6518:	569a      	ldrsb	r2, [r3, r2]
    651a:	4b59      	ldr	r3, [pc, #356]	; (6680 <vWifiTask+0x240>)
    651c:	0019      	movs	r1, r3
    651e:	2001      	movs	r0, #1
    6520:	4b58      	ldr	r3, [pc, #352]	; (6684 <vWifiTask+0x244>)
    6522:	4798      	blx	r3
        while (1) {
    6524:	e7fe      	b.n	6524 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    6526:	4a58      	ldr	r2, [pc, #352]	; (6688 <vWifiTask+0x248>)
    6528:	4b58      	ldr	r3, [pc, #352]	; (668c <vWifiTask+0x24c>)
    652a:	0019      	movs	r1, r3
    652c:	2001      	movs	r0, #1
    652e:	4b55      	ldr	r3, [pc, #340]	; (6684 <vWifiTask+0x244>)
    6530:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
    6532:	4b57      	ldr	r3, [pc, #348]	; (6690 <vWifiTask+0x250>)
    6534:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    6536:	4a57      	ldr	r2, [pc, #348]	; (6694 <vWifiTask+0x254>)
    6538:	4b57      	ldr	r3, [pc, #348]	; (6698 <vWifiTask+0x258>)
    653a:	0011      	movs	r1, r2
    653c:	0018      	movs	r0, r3
    653e:	4b57      	ldr	r3, [pc, #348]	; (669c <vWifiTask+0x25c>)
    6540:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    6542:	4a57      	ldr	r2, [pc, #348]	; (66a0 <vWifiTask+0x260>)
    6544:	4850      	ldr	r0, [pc, #320]	; (6688 <vWifiTask+0x248>)
    6546:	23ff      	movs	r3, #255	; 0xff
    6548:	9300      	str	r3, [sp, #0]
    654a:	0013      	movs	r3, r2
    654c:	2202      	movs	r2, #2
    654e:	2112      	movs	r1, #18
    6550:	4c54      	ldr	r4, [pc, #336]	; (66a4 <vWifiTask+0x264>)
    6552:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
    6554:	e006      	b.n	6564 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    6556:	2000      	movs	r0, #0
    6558:	4b53      	ldr	r3, [pc, #332]	; (66a8 <vWifiTask+0x268>)
    655a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    655c:	4b53      	ldr	r3, [pc, #332]	; (66ac <vWifiTask+0x26c>)
    655e:	0018      	movs	r0, r3
    6560:	4b53      	ldr	r3, [pc, #332]	; (66b0 <vWifiTask+0x270>)
    6562:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
    6564:	2002      	movs	r0, #2
    6566:	4b53      	ldr	r3, [pc, #332]	; (66b4 <vWifiTask+0x274>)
    6568:	4798      	blx	r3
    656a:	0003      	movs	r3, r0
    656c:	001a      	movs	r2, r3
    656e:	2301      	movs	r3, #1
    6570:	4053      	eors	r3, r2
    6572:	b2db      	uxtb	r3, r3
    6574:	2b00      	cmp	r3, #0
    6576:	d1ee      	bne.n	6556 <vWifiTask+0x116>
    }

    vTaskDelay(1000);
    6578:	23fa      	movs	r3, #250	; 0xfa
    657a:	009b      	lsls	r3, r3, #2
    657c:	0018      	movs	r0, r3
    657e:	4b2c      	ldr	r3, [pc, #176]	; (6630 <vWifiTask+0x1f0>)
    6580:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
    6582:	4b4d      	ldr	r3, [pc, #308]	; (66b8 <vWifiTask+0x278>)
    6584:	2201      	movs	r2, #1
    6586:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
    6588:	4b4b      	ldr	r3, [pc, #300]	; (66b8 <vWifiTask+0x278>)
    658a:	781b      	ldrb	r3, [r3, #0]
    658c:	b25b      	sxtb	r3, r3
    658e:	2b01      	cmp	r3, #1
    6590:	d00b      	beq.n	65aa <vWifiTask+0x16a>
    6592:	dc02      	bgt.n	659a <vWifiTask+0x15a>
    6594:	2b00      	cmp	r3, #0
    6596:	d005      	beq.n	65a4 <vWifiTask+0x164>
    6598:	e010      	b.n	65bc <vWifiTask+0x17c>
    659a:	2b02      	cmp	r3, #2
    659c:	d008      	beq.n	65b0 <vWifiTask+0x170>
    659e:	2b03      	cmp	r3, #3
    65a0:	d009      	beq.n	65b6 <vWifiTask+0x176>
    65a2:	e00b      	b.n	65bc <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
    65a4:	4b45      	ldr	r3, [pc, #276]	; (66bc <vWifiTask+0x27c>)
    65a6:	4798      	blx	r3

                break;
    65a8:	e00c      	b.n	65c4 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
    65aa:	4b45      	ldr	r3, [pc, #276]	; (66c0 <vWifiTask+0x280>)
    65ac:	4798      	blx	r3
                break;
    65ae:	e009      	b.n	65c4 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
    65b0:	4b44      	ldr	r3, [pc, #272]	; (66c4 <vWifiTask+0x284>)
    65b2:	4798      	blx	r3
                break;
    65b4:	e006      	b.n	65c4 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
    65b6:	4b44      	ldr	r3, [pc, #272]	; (66c8 <vWifiTask+0x288>)
    65b8:	4798      	blx	r3
                break;
    65ba:	e003      	b.n	65c4 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
    65bc:	4b3e      	ldr	r3, [pc, #248]	; (66b8 <vWifiTask+0x278>)
    65be:	2200      	movs	r2, #0
    65c0:	701a      	strb	r2, [r3, #0]
                break;
    65c2:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
    65c4:	230b      	movs	r3, #11
    65c6:	18fb      	adds	r3, r7, r3
    65c8:	2200      	movs	r2, #0
    65ca:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
    65cc:	4b1b      	ldr	r3, [pc, #108]	; (663c <vWifiTask+0x1fc>)
    65ce:	681b      	ldr	r3, [r3, #0]
    65d0:	220b      	movs	r2, #11
    65d2:	18b9      	adds	r1, r7, r2
    65d4:	2200      	movs	r2, #0
    65d6:	0018      	movs	r0, r3
    65d8:	4b3c      	ldr	r3, [pc, #240]	; (66cc <vWifiTask+0x28c>)
    65da:	4798      	blx	r3
    65dc:	0003      	movs	r3, r0
    65de:	2b01      	cmp	r3, #1
    65e0:	d105      	bne.n	65ee <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
    65e2:	230b      	movs	r3, #11
    65e4:	18fb      	adds	r3, r7, r3
    65e6:	781b      	ldrb	r3, [r3, #0]
    65e8:	b25a      	sxtb	r2, r3
    65ea:	4b33      	ldr	r3, [pc, #204]	; (66b8 <vWifiTask+0x278>)
    65ec:	701a      	strb	r2, [r3, #0]
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
    65ee:	4b38      	ldr	r3, [pc, #224]	; (66d0 <vWifiTask+0x290>)
    65f0:	781b      	ldrb	r3, [r3, #0]
    65f2:	b2db      	uxtb	r3, r3
    65f4:	2b00      	cmp	r3, #0
    65f6:	d017      	beq.n	6628 <vWifiTask+0x1e8>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
    65f8:	4b36      	ldr	r3, [pc, #216]	; (66d4 <vWifiTask+0x294>)
    65fa:	0018      	movs	r0, r3
    65fc:	4b36      	ldr	r3, [pc, #216]	; (66d8 <vWifiTask+0x298>)
    65fe:	4798      	blx	r3
    6600:	0004      	movs	r4, r0
    6602:	4a34      	ldr	r2, [pc, #208]	; (66d4 <vWifiTask+0x294>)
    6604:	4935      	ldr	r1, [pc, #212]	; (66dc <vWifiTask+0x29c>)
    6606:	4836      	ldr	r0, [pc, #216]	; (66e0 <vWifiTask+0x2a0>)
    6608:	2300      	movs	r3, #0
    660a:	9301      	str	r3, [sp, #4]
    660c:	2301      	movs	r3, #1
    660e:	9300      	str	r3, [sp, #0]
    6610:	0023      	movs	r3, r4
    6612:	4c34      	ldr	r4, [pc, #208]	; (66e4 <vWifiTask+0x2a4>)
    6614:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
    6616:	4a2f      	ldr	r2, [pc, #188]	; (66d4 <vWifiTask+0x294>)
    6618:	4b33      	ldr	r3, [pc, #204]	; (66e8 <vWifiTask+0x2a8>)
    661a:	0019      	movs	r1, r3
    661c:	2001      	movs	r0, #1
    661e:	4b19      	ldr	r3, [pc, #100]	; (6684 <vWifiTask+0x244>)
    6620:	4798      	blx	r3
            isPressed = false;
    6622:	4b2b      	ldr	r3, [pc, #172]	; (66d0 <vWifiTask+0x290>)
    6624:	2200      	movs	r2, #0
    6626:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
    6628:	2064      	movs	r0, #100	; 0x64
    662a:	4b01      	ldr	r3, [pc, #4]	; (6630 <vWifiTask+0x1f0>)
    662c:	4798      	blx	r3
    while (1) {
    662e:	e7ab      	b.n	6588 <vWifiTask+0x148>
    6630:	0000b3b5 	.word	0x0000b3b5
    6634:	00004f91 	.word	0x00004f91
    6638:	000096a9 	.word	0x000096a9
    663c:	20000648 	.word	0x20000648
    6640:	20000650 	.word	0x20000650
    6644:	2000064c 	.word	0x2000064c
    6648:	20000654 	.word	0x20000654
    664c:	00026ae0 	.word	0x00026ae0
    6650:	0000d009 	.word	0x0000d009
    6654:	00026b08 	.word	0x00026b08
    6658:	000059d1 	.word	0x000059d1
    665c:	00005a0d 	.word	0x00005a0d
    6660:	00005ea9 	.word	0x00005ea9
    6664:	000058ed 	.word	0x000058ed
    6668:	00005f61 	.word	0x00005f61
    666c:	00005fa1 	.word	0x00005fa1
    6670:	000247b7 	.word	0x000247b7
    6674:	0000f57d 	.word	0x0000f57d
    6678:	00005799 	.word	0x00005799
    667c:	00011055 	.word	0x00011055
    6680:	00026b24 	.word	0x00026b24
    6684:	0000d0f5 	.word	0x0000d0f5
    6688:	000265cc 	.word	0x000265cc
    668c:	00026b50 	.word	0x00026b50
    6690:	000147b5 	.word	0x000147b5
    6694:	00005ab5 	.word	0x00005ab5
    6698:	00005a81 	.word	0x00005a81
    669c:	0001484d 	.word	0x0001484d
    66a0:	000265bc 	.word	0x000265bc
    66a4:	00011265 	.word	0x00011265
    66a8:	00011249 	.word	0x00011249
    66ac:	20004530 	.word	0x20004530
    66b0:	0002193d 	.word	0x0002193d
    66b4:	00005001 	.word	0x00005001
    66b8:	20000645 	.word	0x20000645
    66bc:	000061a1 	.word	0x000061a1
    66c0:	0000623d 	.word	0x0000623d
    66c4:	00006019 	.word	0x00006019
    66c8:	000060ad 	.word	0x000060ad
    66cc:	0000a209 	.word	0x0000a209
    66d0:	20000cf0 	.word	0x20000cf0
    66d4:	20000064 	.word	0x20000064
    66d8:	00024b6f 	.word	0x00024b6f
    66dc:	00026b74 	.word	0x00026b74
    66e0:	200008b8 	.word	0x200008b8
    66e4:	0001ec5d 	.word	0x0001ec5d
    66e8:	00026b90 	.word	0x00026b90

000066ec <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
    66ec:	b590      	push	{r4, r7, lr}
    66ee:	b083      	sub	sp, #12
    66f0:	af00      	add	r7, sp, #0
    66f2:	0002      	movs	r2, r0
    66f4:	1dfb      	adds	r3, r7, #7
    66f6:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
    66f8:	1dfb      	adds	r3, r7, #7
    66fa:	781b      	ldrb	r3, [r3, #0]
    66fc:	2b03      	cmp	r3, #3
    66fe:	d806      	bhi.n	670e <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
    6700:	4b05      	ldr	r3, [pc, #20]	; (6718 <WifiHandlerSetState+0x2c>)
    6702:	6818      	ldr	r0, [r3, #0]
    6704:	1df9      	adds	r1, r7, #7
    6706:	2300      	movs	r3, #0
    6708:	220a      	movs	r2, #10
    670a:	4c04      	ldr	r4, [pc, #16]	; (671c <WifiHandlerSetState+0x30>)
    670c:	47a0      	blx	r4
    }
}
    670e:	46c0      	nop			; (mov r8, r8)
    6710:	46bd      	mov	sp, r7
    6712:	b003      	add	sp, #12
    6714:	bd90      	pop	{r4, r7, pc}
    6716:	46c0      	nop			; (mov r8, r8)
    6718:	20000648 	.word	0x20000648
    671c:	00009951 	.word	0x00009951

00006720 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
    6720:	b590      	push	{r4, r7, lr}
    6722:	b085      	sub	sp, #20
    6724:	af00      	add	r7, sp, #0
    6726:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
    6728:	4b06      	ldr	r3, [pc, #24]	; (6744 <WifiAddDistanceDataToQueue+0x24>)
    672a:	6818      	ldr	r0, [r3, #0]
    672c:	6879      	ldr	r1, [r7, #4]
    672e:	2300      	movs	r3, #0
    6730:	220a      	movs	r2, #10
    6732:	4c05      	ldr	r4, [pc, #20]	; (6748 <WifiAddDistanceDataToQueue+0x28>)
    6734:	47a0      	blx	r4
    6736:	0003      	movs	r3, r0
    6738:	60fb      	str	r3, [r7, #12]
    return error;
    673a:	68fb      	ldr	r3, [r7, #12]
}
    673c:	0018      	movs	r0, r3
    673e:	46bd      	mov	sp, r7
    6740:	b005      	add	sp, #20
    6742:	bd90      	pop	{r4, r7, pc}
    6744:	20000654 	.word	0x20000654
    6748:	00009951 	.word	0x00009951

0000674c <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
    674c:	b590      	push	{r4, r7, lr}
    674e:	b085      	sub	sp, #20
    6750:	af00      	add	r7, sp, #0
    6752:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
    6754:	4b06      	ldr	r3, [pc, #24]	; (6770 <WifiAddGameDataToQueue+0x24>)
    6756:	6818      	ldr	r0, [r3, #0]
    6758:	6879      	ldr	r1, [r7, #4]
    675a:	2300      	movs	r3, #0
    675c:	220a      	movs	r2, #10
    675e:	4c05      	ldr	r4, [pc, #20]	; (6774 <WifiAddGameDataToQueue+0x28>)
    6760:	47a0      	blx	r4
    6762:	0003      	movs	r3, r0
    6764:	60fb      	str	r3, [r7, #12]
    return error;
    6766:	68fb      	ldr	r3, [r7, #12]
}
    6768:	0018      	movs	r0, r3
    676a:	46bd      	mov	sp, r7
    676c:	b005      	add	sp, #20
    676e:	bd90      	pop	{r4, r7, pc}
    6770:	2000064c 	.word	0x2000064c
    6774:	00009951 	.word	0x00009951

00006778 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6778:	b580      	push	{r7, lr}
    677a:	b082      	sub	sp, #8
    677c:	af00      	add	r7, sp, #0
    677e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	2200      	movs	r2, #0
    6784:	701a      	strb	r2, [r3, #0]
}
    6786:	46c0      	nop			; (mov r8, r8)
    6788:	46bd      	mov	sp, r7
    678a:	b002      	add	sp, #8
    678c:	bd80      	pop	{r7, pc}
	...

00006790 <system_apb_clock_set_mask>:
{
    6790:	b580      	push	{r7, lr}
    6792:	b082      	sub	sp, #8
    6794:	af00      	add	r7, sp, #0
    6796:	0002      	movs	r2, r0
    6798:	6039      	str	r1, [r7, #0]
    679a:	1dfb      	adds	r3, r7, #7
    679c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    679e:	1dfb      	adds	r3, r7, #7
    67a0:	781b      	ldrb	r3, [r3, #0]
    67a2:	2b01      	cmp	r3, #1
    67a4:	d00a      	beq.n	67bc <system_apb_clock_set_mask+0x2c>
    67a6:	2b02      	cmp	r3, #2
    67a8:	d00f      	beq.n	67ca <system_apb_clock_set_mask+0x3a>
    67aa:	2b00      	cmp	r3, #0
    67ac:	d114      	bne.n	67d8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    67ae:	4b0e      	ldr	r3, [pc, #56]	; (67e8 <system_apb_clock_set_mask+0x58>)
    67b0:	4a0d      	ldr	r2, [pc, #52]	; (67e8 <system_apb_clock_set_mask+0x58>)
    67b2:	6991      	ldr	r1, [r2, #24]
    67b4:	683a      	ldr	r2, [r7, #0]
    67b6:	430a      	orrs	r2, r1
    67b8:	619a      	str	r2, [r3, #24]
			break;
    67ba:	e00f      	b.n	67dc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    67bc:	4b0a      	ldr	r3, [pc, #40]	; (67e8 <system_apb_clock_set_mask+0x58>)
    67be:	4a0a      	ldr	r2, [pc, #40]	; (67e8 <system_apb_clock_set_mask+0x58>)
    67c0:	69d1      	ldr	r1, [r2, #28]
    67c2:	683a      	ldr	r2, [r7, #0]
    67c4:	430a      	orrs	r2, r1
    67c6:	61da      	str	r2, [r3, #28]
			break;
    67c8:	e008      	b.n	67dc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    67ca:	4b07      	ldr	r3, [pc, #28]	; (67e8 <system_apb_clock_set_mask+0x58>)
    67cc:	4a06      	ldr	r2, [pc, #24]	; (67e8 <system_apb_clock_set_mask+0x58>)
    67ce:	6a11      	ldr	r1, [r2, #32]
    67d0:	683a      	ldr	r2, [r7, #0]
    67d2:	430a      	orrs	r2, r1
    67d4:	621a      	str	r2, [r3, #32]
			break;
    67d6:	e001      	b.n	67dc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    67d8:	2317      	movs	r3, #23
    67da:	e000      	b.n	67de <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    67dc:	2300      	movs	r3, #0
}
    67de:	0018      	movs	r0, r3
    67e0:	46bd      	mov	sp, r7
    67e2:	b002      	add	sp, #8
    67e4:	bd80      	pop	{r7, pc}
    67e6:	46c0      	nop			; (mov r8, r8)
    67e8:	40000400 	.word	0x40000400

000067ec <system_pinmux_get_config_defaults>:
{
    67ec:	b580      	push	{r7, lr}
    67ee:	b082      	sub	sp, #8
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    67f4:	687b      	ldr	r3, [r7, #4]
    67f6:	2280      	movs	r2, #128	; 0x80
    67f8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    67fa:	687b      	ldr	r3, [r7, #4]
    67fc:	2200      	movs	r2, #0
    67fe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6800:	687b      	ldr	r3, [r7, #4]
    6802:	2201      	movs	r2, #1
    6804:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6806:	687b      	ldr	r3, [r7, #4]
    6808:	2200      	movs	r2, #0
    680a:	70da      	strb	r2, [r3, #3]
}
    680c:	46c0      	nop			; (mov r8, r8)
    680e:	46bd      	mov	sp, r7
    6810:	b002      	add	sp, #8
    6812:	bd80      	pop	{r7, pc}

00006814 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    6814:	b580      	push	{r7, lr}
    6816:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6818:	4b05      	ldr	r3, [pc, #20]	; (6830 <system_is_debugger_present+0x1c>)
    681a:	789b      	ldrb	r3, [r3, #2]
    681c:	b2db      	uxtb	r3, r3
    681e:	001a      	movs	r2, r3
    6820:	2302      	movs	r3, #2
    6822:	4013      	ands	r3, r2
    6824:	1e5a      	subs	r2, r3, #1
    6826:	4193      	sbcs	r3, r2
    6828:	b2db      	uxtb	r3, r3
}
    682a:	0018      	movs	r0, r3
    682c:	46bd      	mov	sp, r7
    682e:	bd80      	pop	{r7, pc}
    6830:	41002000 	.word	0x41002000

00006834 <system_interrupt_enter_critical_section>:
{
    6834:	b580      	push	{r7, lr}
    6836:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6838:	4b02      	ldr	r3, [pc, #8]	; (6844 <system_interrupt_enter_critical_section+0x10>)
    683a:	4798      	blx	r3
}
    683c:	46c0      	nop			; (mov r8, r8)
    683e:	46bd      	mov	sp, r7
    6840:	bd80      	pop	{r7, pc}
    6842:	46c0      	nop			; (mov r8, r8)
    6844:	000154ad 	.word	0x000154ad

00006848 <system_interrupt_leave_critical_section>:
{
    6848:	b580      	push	{r7, lr}
    684a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    684c:	4b02      	ldr	r3, [pc, #8]	; (6858 <system_interrupt_leave_critical_section+0x10>)
    684e:	4798      	blx	r3
}
    6850:	46c0      	nop			; (mov r8, r8)
    6852:	46bd      	mov	sp, r7
    6854:	bd80      	pop	{r7, pc}
    6856:	46c0      	nop			; (mov r8, r8)
    6858:	00015501 	.word	0x00015501

0000685c <system_interrupt_disable>:
{
    685c:	b580      	push	{r7, lr}
    685e:	b082      	sub	sp, #8
    6860:	af00      	add	r7, sp, #0
    6862:	0002      	movs	r2, r0
    6864:	1dfb      	adds	r3, r7, #7
    6866:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6868:	4a07      	ldr	r2, [pc, #28]	; (6888 <system_interrupt_disable+0x2c>)
    686a:	1dfb      	adds	r3, r7, #7
    686c:	781b      	ldrb	r3, [r3, #0]
    686e:	0019      	movs	r1, r3
    6870:	231f      	movs	r3, #31
    6872:	400b      	ands	r3, r1
    6874:	2101      	movs	r1, #1
    6876:	4099      	lsls	r1, r3
    6878:	000b      	movs	r3, r1
    687a:	0019      	movs	r1, r3
    687c:	2380      	movs	r3, #128	; 0x80
    687e:	50d1      	str	r1, [r2, r3]
}
    6880:	46c0      	nop			; (mov r8, r8)
    6882:	46bd      	mov	sp, r7
    6884:	b002      	add	sp, #8
    6886:	bd80      	pop	{r7, pc}
    6888:	e000e100 	.word	0xe000e100

0000688c <i2c_master_is_syncing>:
{
    688c:	b580      	push	{r7, lr}
    688e:	b084      	sub	sp, #16
    6890:	af00      	add	r7, sp, #0
    6892:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	681b      	ldr	r3, [r3, #0]
    6898:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    689a:	68fb      	ldr	r3, [r7, #12]
    689c:	69db      	ldr	r3, [r3, #28]
    689e:	2207      	movs	r2, #7
    68a0:	4013      	ands	r3, r2
    68a2:	1e5a      	subs	r2, r3, #1
    68a4:	4193      	sbcs	r3, r2
    68a6:	b2db      	uxtb	r3, r3
}
    68a8:	0018      	movs	r0, r3
    68aa:	46bd      	mov	sp, r7
    68ac:	b004      	add	sp, #16
    68ae:	bd80      	pop	{r7, pc}

000068b0 <_i2c_master_wait_for_sync>:
{
    68b0:	b580      	push	{r7, lr}
    68b2:	b082      	sub	sp, #8
    68b4:	af00      	add	r7, sp, #0
    68b6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    68b8:	46c0      	nop			; (mov r8, r8)
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	0018      	movs	r0, r3
    68be:	4b04      	ldr	r3, [pc, #16]	; (68d0 <_i2c_master_wait_for_sync+0x20>)
    68c0:	4798      	blx	r3
    68c2:	1e03      	subs	r3, r0, #0
    68c4:	d1f9      	bne.n	68ba <_i2c_master_wait_for_sync+0xa>
}
    68c6:	46c0      	nop			; (mov r8, r8)
    68c8:	46bd      	mov	sp, r7
    68ca:	b002      	add	sp, #8
    68cc:	bd80      	pop	{r7, pc}
    68ce:	46c0      	nop			; (mov r8, r8)
    68d0:	0000688d 	.word	0x0000688d

000068d4 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    68d4:	b580      	push	{r7, lr}
    68d6:	b084      	sub	sp, #16
    68d8:	af00      	add	r7, sp, #0
    68da:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	681b      	ldr	r3, [r3, #0]
    68e0:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	681b      	ldr	r3, [r3, #0]
    68e6:	0018      	movs	r0, r3
    68e8:	4b0d      	ldr	r3, [pc, #52]	; (6920 <i2c_master_disable+0x4c>)
    68ea:	4798      	blx	r3
    68ec:	0003      	movs	r3, r0
    68ee:	0018      	movs	r0, r3
    68f0:	4b0c      	ldr	r3, [pc, #48]	; (6924 <i2c_master_disable+0x50>)
    68f2:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    68f4:	687b      	ldr	r3, [r7, #4]
    68f6:	0018      	movs	r0, r3
    68f8:	4b0b      	ldr	r3, [pc, #44]	; (6928 <i2c_master_disable+0x54>)
    68fa:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    68fc:	68fb      	ldr	r3, [r7, #12]
    68fe:	2283      	movs	r2, #131	; 0x83
    6900:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    6902:	68fb      	ldr	r3, [r7, #12]
    6904:	2283      	movs	r2, #131	; 0x83
    6906:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6908:	68fb      	ldr	r3, [r7, #12]
    690a:	681b      	ldr	r3, [r3, #0]
    690c:	2202      	movs	r2, #2
    690e:	4393      	bics	r3, r2
    6910:	001a      	movs	r2, r3
    6912:	68fb      	ldr	r3, [r7, #12]
    6914:	601a      	str	r2, [r3, #0]

}
    6916:	46c0      	nop			; (mov r8, r8)
    6918:	46bd      	mov	sp, r7
    691a:	b004      	add	sp, #16
    691c:	bd80      	pop	{r7, pc}
    691e:	46c0      	nop			; (mov r8, r8)
    6920:	00016981 	.word	0x00016981
    6924:	0000685d 	.word	0x0000685d
    6928:	000068b1 	.word	0x000068b1

0000692c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    692c:	b5f0      	push	{r4, r5, r6, r7, lr}
    692e:	b097      	sub	sp, #92	; 0x5c
    6930:	af00      	add	r7, sp, #0
    6932:	6178      	str	r0, [r7, #20]
    6934:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    6936:	2300      	movs	r3, #0
    6938:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    693a:	2300      	movs	r3, #0
    693c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    693e:	2300      	movs	r3, #0
    6940:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    6942:	233b      	movs	r3, #59	; 0x3b
    6944:	2210      	movs	r2, #16
    6946:	4694      	mov	ip, r2
    6948:	44bc      	add	ip, r7
    694a:	4463      	add	r3, ip
    694c:	2200      	movs	r2, #0
    694e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6950:	697b      	ldr	r3, [r7, #20]
    6952:	681b      	ldr	r3, [r3, #0]
    6954:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    6956:	697b      	ldr	r3, [r7, #20]
    6958:	681b      	ldr	r3, [r3, #0]
    695a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    695c:	2323      	movs	r3, #35	; 0x23
    695e:	2210      	movs	r2, #16
    6960:	18ba      	adds	r2, r7, r2
    6962:	18d4      	adds	r4, r2, r3
    6964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6966:	0018      	movs	r0, r3
    6968:	4bc0      	ldr	r3, [pc, #768]	; (6c6c <_i2c_master_set_config+0x340>)
    696a:	4798      	blx	r3
    696c:	0003      	movs	r3, r0
    696e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6970:	230c      	movs	r3, #12
    6972:	2210      	movs	r2, #16
    6974:	4694      	mov	ip, r2
    6976:	44bc      	add	ip, r7
    6978:	4463      	add	r3, ip
    697a:	0018      	movs	r0, r3
    697c:	4bbc      	ldr	r3, [pc, #752]	; (6c70 <_i2c_master_set_config+0x344>)
    697e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    6980:	693b      	ldr	r3, [r7, #16]
    6982:	69db      	ldr	r3, [r3, #28]
    6984:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    6986:	693b      	ldr	r3, [r7, #16]
    6988:	6a1b      	ldr	r3, [r3, #32]
    698a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    698c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    698e:	2b00      	cmp	r3, #0
    6990:	d106      	bne.n	69a0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    6992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6994:	2100      	movs	r1, #0
    6996:	0018      	movs	r0, r3
    6998:	4bb6      	ldr	r3, [pc, #728]	; (6c74 <_i2c_master_set_config+0x348>)
    699a:	4798      	blx	r3
    699c:	0003      	movs	r3, r0
    699e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    69a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    69a2:	b2da      	uxtb	r2, r3
    69a4:	230c      	movs	r3, #12
    69a6:	2110      	movs	r1, #16
    69a8:	468c      	mov	ip, r1
    69aa:	44bc      	add	ip, r7
    69ac:	4463      	add	r3, ip
    69ae:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    69b0:	230c      	movs	r3, #12
    69b2:	2210      	movs	r2, #16
    69b4:	4694      	mov	ip, r2
    69b6:	44bc      	add	ip, r7
    69b8:	4463      	add	r3, ip
    69ba:	2202      	movs	r2, #2
    69bc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    69be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    69c0:	0c1b      	lsrs	r3, r3, #16
    69c2:	b2db      	uxtb	r3, r3
    69c4:	220c      	movs	r2, #12
    69c6:	2110      	movs	r1, #16
    69c8:	468c      	mov	ip, r1
    69ca:	44bc      	add	ip, r7
    69cc:	4462      	add	r2, ip
    69ce:	0011      	movs	r1, r2
    69d0:	0018      	movs	r0, r3
    69d2:	4ba9      	ldr	r3, [pc, #676]	; (6c78 <_i2c_master_set_config+0x34c>)
    69d4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    69d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    69d8:	2b00      	cmp	r3, #0
    69da:	d106      	bne.n	69ea <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    69dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    69de:	2101      	movs	r1, #1
    69e0:	0018      	movs	r0, r3
    69e2:	4ba4      	ldr	r3, [pc, #656]	; (6c74 <_i2c_master_set_config+0x348>)
    69e4:	4798      	blx	r3
    69e6:	0003      	movs	r3, r0
    69e8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    69ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    69ec:	b2da      	uxtb	r2, r3
    69ee:	230c      	movs	r3, #12
    69f0:	2110      	movs	r1, #16
    69f2:	468c      	mov	ip, r1
    69f4:	44bc      	add	ip, r7
    69f6:	4463      	add	r3, ip
    69f8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    69fa:	230c      	movs	r3, #12
    69fc:	2210      	movs	r2, #16
    69fe:	4694      	mov	ip, r2
    6a00:	44bc      	add	ip, r7
    6a02:	4463      	add	r3, ip
    6a04:	2202      	movs	r2, #2
    6a06:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    6a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6a0a:	0c1b      	lsrs	r3, r3, #16
    6a0c:	b2db      	uxtb	r3, r3
    6a0e:	220c      	movs	r2, #12
    6a10:	2110      	movs	r1, #16
    6a12:	468c      	mov	ip, r1
    6a14:	44bc      	add	ip, r7
    6a16:	4462      	add	r2, ip
    6a18:	0011      	movs	r1, r2
    6a1a:	0018      	movs	r0, r3
    6a1c:	4b96      	ldr	r3, [pc, #600]	; (6c78 <_i2c_master_set_config+0x34c>)
    6a1e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    6a20:	693b      	ldr	r3, [r7, #16]
    6a22:	8a9a      	ldrh	r2, [r3, #20]
    6a24:	697b      	ldr	r3, [r7, #20]
    6a26:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    6a28:	693b      	ldr	r3, [r7, #16]
    6a2a:	8ada      	ldrh	r2, [r3, #22]
    6a2c:	697b      	ldr	r3, [r7, #20]
    6a2e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6a30:	693b      	ldr	r3, [r7, #16]
    6a32:	7e1b      	ldrb	r3, [r3, #24]
    6a34:	2b00      	cmp	r3, #0
    6a36:	d103      	bne.n	6a40 <_i2c_master_set_config+0x114>
    6a38:	4b90      	ldr	r3, [pc, #576]	; (6c7c <_i2c_master_set_config+0x350>)
    6a3a:	4798      	blx	r3
    6a3c:	1e03      	subs	r3, r0, #0
    6a3e:	d002      	beq.n	6a46 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    6a40:	2380      	movs	r3, #128	; 0x80
    6a42:	657b      	str	r3, [r7, #84]	; 0x54
    6a44:	e001      	b.n	6a4a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    6a46:	2300      	movs	r3, #0
    6a48:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    6a4a:	693b      	ldr	r3, [r7, #16]
    6a4c:	691b      	ldr	r3, [r3, #16]
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d004      	beq.n	6a5c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    6a52:	693b      	ldr	r3, [r7, #16]
    6a54:	691b      	ldr	r3, [r3, #16]
    6a56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6a58:	4313      	orrs	r3, r2
    6a5a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    6a5c:	693b      	ldr	r3, [r7, #16]
    6a5e:	689b      	ldr	r3, [r3, #8]
    6a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6a62:	4313      	orrs	r3, r2
    6a64:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    6a66:	693b      	ldr	r3, [r7, #16]
    6a68:	2224      	movs	r2, #36	; 0x24
    6a6a:	5c9b      	ldrb	r3, [r3, r2]
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d004      	beq.n	6a7a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    6a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6a72:	2280      	movs	r2, #128	; 0x80
    6a74:	05d2      	lsls	r2, r2, #23
    6a76:	4313      	orrs	r3, r2
    6a78:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    6a7a:	693b      	ldr	r3, [r7, #16]
    6a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a7e:	2b00      	cmp	r3, #0
    6a80:	d004      	beq.n	6a8c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    6a82:	693b      	ldr	r3, [r7, #16]
    6a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6a88:	4313      	orrs	r3, r2
    6a8a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    6a8c:	693b      	ldr	r3, [r7, #16]
    6a8e:	222c      	movs	r2, #44	; 0x2c
    6a90:	5c9b      	ldrb	r3, [r3, r2]
    6a92:	2b00      	cmp	r3, #0
    6a94:	d105      	bne.n	6aa2 <_i2c_master_set_config+0x176>
    6a96:	693b      	ldr	r3, [r7, #16]
    6a98:	689a      	ldr	r2, [r3, #8]
    6a9a:	2380      	movs	r3, #128	; 0x80
    6a9c:	049b      	lsls	r3, r3, #18
    6a9e:	429a      	cmp	r2, r3
    6aa0:	d104      	bne.n	6aac <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    6aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6aa4:	2280      	movs	r2, #128	; 0x80
    6aa6:	0512      	lsls	r2, r2, #20
    6aa8:	4313      	orrs	r3, r2
    6aaa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    6aac:	693b      	ldr	r3, [r7, #16]
    6aae:	222d      	movs	r2, #45	; 0x2d
    6ab0:	5c9b      	ldrb	r3, [r3, r2]
    6ab2:	2b00      	cmp	r3, #0
    6ab4:	d004      	beq.n	6ac0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    6ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6ab8:	2280      	movs	r2, #128	; 0x80
    6aba:	0412      	lsls	r2, r2, #16
    6abc:	4313      	orrs	r3, r2
    6abe:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    6ac0:	693b      	ldr	r3, [r7, #16]
    6ac2:	222e      	movs	r2, #46	; 0x2e
    6ac4:	5c9b      	ldrb	r3, [r3, r2]
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d004      	beq.n	6ad4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    6aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6acc:	2280      	movs	r2, #128	; 0x80
    6ace:	03d2      	lsls	r2, r2, #15
    6ad0:	4313      	orrs	r3, r2
    6ad2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    6ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6ad6:	681a      	ldr	r2, [r3, #0]
    6ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6ada:	431a      	orrs	r2, r3
    6adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6ade:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    6ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6ae2:	2280      	movs	r2, #128	; 0x80
    6ae4:	0052      	lsls	r2, r2, #1
    6ae6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    6ae8:	2323      	movs	r3, #35	; 0x23
    6aea:	2210      	movs	r2, #16
    6aec:	4694      	mov	ip, r2
    6aee:	44bc      	add	ip, r7
    6af0:	4463      	add	r3, ip
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	3314      	adds	r3, #20
    6af6:	b2db      	uxtb	r3, r3
    6af8:	0018      	movs	r0, r3
    6afa:	4b61      	ldr	r3, [pc, #388]	; (6c80 <_i2c_master_set_config+0x354>)
    6afc:	4798      	blx	r3
    6afe:	0003      	movs	r3, r0
    6b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    6b02:	693b      	ldr	r3, [r7, #16]
    6b04:	681b      	ldr	r3, [r3, #0]
    6b06:	22fa      	movs	r2, #250	; 0xfa
    6b08:	0092      	lsls	r2, r2, #2
    6b0a:	4353      	muls	r3, r2
    6b0c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6b0e:	693b      	ldr	r3, [r7, #16]
    6b10:	685b      	ldr	r3, [r3, #4]
    6b12:	22fa      	movs	r2, #250	; 0xfa
    6b14:	0092      	lsls	r2, r2, #2
    6b16:	4353      	muls	r3, r2
    6b18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    6b1a:	693b      	ldr	r3, [r7, #16]
    6b1c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    6b1e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    6b20:	4b58      	ldr	r3, [pc, #352]	; (6c84 <_i2c_master_set_config+0x358>)
    6b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6b24:	4798      	blx	r3
    6b26:	0005      	movs	r5, r0
    6b28:	000e      	movs	r6, r1
    6b2a:	4b56      	ldr	r3, [pc, #344]	; (6c84 <_i2c_master_set_config+0x358>)
    6b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6b2e:	4798      	blx	r3
    6b30:	60b8      	str	r0, [r7, #8]
    6b32:	60f9      	str	r1, [r7, #12]
    6b34:	4b53      	ldr	r3, [pc, #332]	; (6c84 <_i2c_master_set_config+0x358>)
    6b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6b38:	4798      	blx	r3
    6b3a:	4c53      	ldr	r4, [pc, #332]	; (6c88 <_i2c_master_set_config+0x35c>)
    6b3c:	4a53      	ldr	r2, [pc, #332]	; (6c8c <_i2c_master_set_config+0x360>)
    6b3e:	4b54      	ldr	r3, [pc, #336]	; (6c90 <_i2c_master_set_config+0x364>)
    6b40:	47a0      	blx	r4
    6b42:	0003      	movs	r3, r0
    6b44:	000c      	movs	r4, r1
    6b46:	603b      	str	r3, [r7, #0]
    6b48:	607c      	str	r4, [r7, #4]
    6b4a:	4b4e      	ldr	r3, [pc, #312]	; (6c84 <_i2c_master_set_config+0x358>)
    6b4c:	6a38      	ldr	r0, [r7, #32]
    6b4e:	4798      	blx	r3
    6b50:	0002      	movs	r2, r0
    6b52:	000b      	movs	r3, r1
    6b54:	4c4c      	ldr	r4, [pc, #304]	; (6c88 <_i2c_master_set_config+0x35c>)
    6b56:	6838      	ldr	r0, [r7, #0]
    6b58:	6879      	ldr	r1, [r7, #4]
    6b5a:	47a0      	blx	r4
    6b5c:	0003      	movs	r3, r0
    6b5e:	000c      	movs	r4, r1
    6b60:	0018      	movs	r0, r3
    6b62:	0021      	movs	r1, r4
    6b64:	4c4b      	ldr	r4, [pc, #300]	; (6c94 <_i2c_master_set_config+0x368>)
    6b66:	2200      	movs	r2, #0
    6b68:	4b4b      	ldr	r3, [pc, #300]	; (6c98 <_i2c_master_set_config+0x36c>)
    6b6a:	47a0      	blx	r4
    6b6c:	0003      	movs	r3, r0
    6b6e:	000c      	movs	r4, r1
    6b70:	001a      	movs	r2, r3
    6b72:	0023      	movs	r3, r4
    6b74:	4c44      	ldr	r4, [pc, #272]	; (6c88 <_i2c_master_set_config+0x35c>)
    6b76:	68b8      	ldr	r0, [r7, #8]
    6b78:	68f9      	ldr	r1, [r7, #12]
    6b7a:	47a0      	blx	r4
    6b7c:	0003      	movs	r3, r0
    6b7e:	000c      	movs	r4, r1
    6b80:	001a      	movs	r2, r3
    6b82:	0023      	movs	r3, r4
    6b84:	4c45      	ldr	r4, [pc, #276]	; (6c9c <_i2c_master_set_config+0x370>)
    6b86:	0028      	movs	r0, r5
    6b88:	0031      	movs	r1, r6
    6b8a:	47a0      	blx	r4
    6b8c:	0003      	movs	r3, r0
    6b8e:	000c      	movs	r4, r1
    6b90:	001d      	movs	r5, r3
    6b92:	0026      	movs	r6, r4
    6b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6b96:	005a      	lsls	r2, r3, #1
    6b98:	4b3a      	ldr	r3, [pc, #232]	; (6c84 <_i2c_master_set_config+0x358>)
    6b9a:	0010      	movs	r0, r2
    6b9c:	4798      	blx	r3
    6b9e:	0002      	movs	r2, r0
    6ba0:	000b      	movs	r3, r1
    6ba2:	4c3c      	ldr	r4, [pc, #240]	; (6c94 <_i2c_master_set_config+0x368>)
    6ba4:	0028      	movs	r0, r5
    6ba6:	0031      	movs	r1, r6
    6ba8:	47a0      	blx	r4
    6baa:	0003      	movs	r3, r0
    6bac:	000c      	movs	r4, r1
    6bae:	0018      	movs	r0, r3
    6bb0:	0021      	movs	r1, r4
    6bb2:	4c3a      	ldr	r4, [pc, #232]	; (6c9c <_i2c_master_set_config+0x370>)
    6bb4:	2200      	movs	r2, #0
    6bb6:	4b3a      	ldr	r3, [pc, #232]	; (6ca0 <_i2c_master_set_config+0x374>)
    6bb8:	47a0      	blx	r4
    6bba:	0003      	movs	r3, r0
    6bbc:	000c      	movs	r4, r1
    6bbe:	001d      	movs	r5, r3
    6bc0:	0026      	movs	r6, r4
    6bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6bc4:	005a      	lsls	r2, r3, #1
    6bc6:	4b2f      	ldr	r3, [pc, #188]	; (6c84 <_i2c_master_set_config+0x358>)
    6bc8:	0010      	movs	r0, r2
    6bca:	4798      	blx	r3
    6bcc:	0002      	movs	r2, r0
    6bce:	000b      	movs	r3, r1
    6bd0:	4c34      	ldr	r4, [pc, #208]	; (6ca4 <_i2c_master_set_config+0x378>)
    6bd2:	0028      	movs	r0, r5
    6bd4:	0031      	movs	r1, r6
    6bd6:	47a0      	blx	r4
    6bd8:	0003      	movs	r3, r0
    6bda:	000c      	movs	r4, r1
    6bdc:	0019      	movs	r1, r3
    6bde:	0022      	movs	r2, r4
    6be0:	4b31      	ldr	r3, [pc, #196]	; (6ca8 <_i2c_master_set_config+0x37c>)
    6be2:	0008      	movs	r0, r1
    6be4:	0011      	movs	r1, r2
    6be6:	4798      	blx	r3
    6be8:	0003      	movs	r3, r0
    6bea:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    6bec:	693b      	ldr	r3, [r7, #16]
    6bee:	689a      	ldr	r2, [r3, #8]
    6bf0:	2380      	movs	r3, #128	; 0x80
    6bf2:	049b      	lsls	r3, r3, #18
    6bf4:	429a      	cmp	r2, r3
    6bf6:	d16a      	bne.n	6cce <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    6bf8:	4b22      	ldr	r3, [pc, #136]	; (6c84 <_i2c_master_set_config+0x358>)
    6bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6bfc:	4798      	blx	r3
    6bfe:	4c25      	ldr	r4, [pc, #148]	; (6c94 <_i2c_master_set_config+0x368>)
    6c00:	0002      	movs	r2, r0
    6c02:	000b      	movs	r3, r1
    6c04:	47a0      	blx	r4
    6c06:	0003      	movs	r3, r0
    6c08:	000c      	movs	r4, r1
    6c0a:	001d      	movs	r5, r3
    6c0c:	0026      	movs	r6, r4
    6c0e:	4b1d      	ldr	r3, [pc, #116]	; (6c84 <_i2c_master_set_config+0x358>)
    6c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
    6c12:	4798      	blx	r3
    6c14:	4c1c      	ldr	r4, [pc, #112]	; (6c88 <_i2c_master_set_config+0x35c>)
    6c16:	2200      	movs	r2, #0
    6c18:	4b24      	ldr	r3, [pc, #144]	; (6cac <_i2c_master_set_config+0x380>)
    6c1a:	47a0      	blx	r4
    6c1c:	0003      	movs	r3, r0
    6c1e:	000c      	movs	r4, r1
    6c20:	001a      	movs	r2, r3
    6c22:	0023      	movs	r3, r4
    6c24:	4c1f      	ldr	r4, [pc, #124]	; (6ca4 <_i2c_master_set_config+0x378>)
    6c26:	0028      	movs	r0, r5
    6c28:	0031      	movs	r1, r6
    6c2a:	47a0      	blx	r4
    6c2c:	0003      	movs	r3, r0
    6c2e:	000c      	movs	r4, r1
    6c30:	0018      	movs	r0, r3
    6c32:	0021      	movs	r1, r4
    6c34:	4c19      	ldr	r4, [pc, #100]	; (6c9c <_i2c_master_set_config+0x370>)
    6c36:	2200      	movs	r2, #0
    6c38:	4b19      	ldr	r3, [pc, #100]	; (6ca0 <_i2c_master_set_config+0x374>)
    6c3a:	47a0      	blx	r4
    6c3c:	0003      	movs	r3, r0
    6c3e:	000c      	movs	r4, r1
    6c40:	0019      	movs	r1, r3
    6c42:	0022      	movs	r2, r4
    6c44:	4b18      	ldr	r3, [pc, #96]	; (6ca8 <_i2c_master_set_config+0x37c>)
    6c46:	0008      	movs	r0, r1
    6c48:	0011      	movs	r1, r2
    6c4a:	4798      	blx	r3
    6c4c:	0003      	movs	r3, r0
    6c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    6c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6c52:	2b00      	cmp	r3, #0
    6c54:	d02e      	beq.n	6cb4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    6c56:	4b16      	ldr	r3, [pc, #88]	; (6cb0 <_i2c_master_set_config+0x384>)
    6c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6c5c:	4798      	blx	r3
    6c5e:	0003      	movs	r3, r0
    6c60:	1e9a      	subs	r2, r3, #2
    6c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6c64:	1ad3      	subs	r3, r2, r3
    6c66:	653b      	str	r3, [r7, #80]	; 0x50
    6c68:	e031      	b.n	6cce <_i2c_master_set_config+0x3a2>
    6c6a:	46c0      	nop			; (mov r8, r8)
    6c6c:	000168b1 	.word	0x000168b1
    6c70:	000067ed 	.word	0x000067ed
    6c74:	000166f5 	.word	0x000166f5
    6c78:	000194a1 	.word	0x000194a1
    6c7c:	00006815 	.word	0x00006815
    6c80:	00019265 	.word	0x00019265
    6c84:	00024495 	.word	0x00024495
    6c88:	00023901 	.word	0x00023901
    6c8c:	e826d695 	.word	0xe826d695
    6c90:	3e112e0b 	.word	0x3e112e0b
    6c94:	00022c79 	.word	0x00022c79
    6c98:	40240000 	.word	0x40240000
    6c9c:	00023e01 	.word	0x00023e01
    6ca0:	3ff00000 	.word	0x3ff00000
    6ca4:	00023299 	.word	0x00023299
    6ca8:	0002442d 	.word	0x0002442d
    6cac:	40080000 	.word	0x40080000
    6cb0:	00021cfd 	.word	0x00021cfd
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    6cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cb6:	005a      	lsls	r2, r3, #1
    6cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6cba:	18d3      	adds	r3, r2, r3
    6cbc:	1e5a      	subs	r2, r3, #1
    6cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cc0:	0059      	lsls	r1, r3, #1
    6cc2:	4b1d      	ldr	r3, [pc, #116]	; (6d38 <_i2c_master_set_config+0x40c>)
    6cc4:	0010      	movs	r0, r2
    6cc6:	4798      	blx	r3
    6cc8:	0003      	movs	r3, r0
    6cca:	3b01      	subs	r3, #1
    6ccc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6cd0:	2bff      	cmp	r3, #255	; 0xff
    6cd2:	dc08      	bgt.n	6ce6 <_i2c_master_set_config+0x3ba>
    6cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6cd6:	2b00      	cmp	r3, #0
    6cd8:	db05      	blt.n	6ce6 <_i2c_master_set_config+0x3ba>
    6cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6cdc:	2bff      	cmp	r3, #255	; 0xff
    6cde:	dc02      	bgt.n	6ce6 <_i2c_master_set_config+0x3ba>
    6ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6ce2:	2b00      	cmp	r3, #0
    6ce4:	da06      	bge.n	6cf4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6ce6:	233b      	movs	r3, #59	; 0x3b
    6ce8:	2210      	movs	r2, #16
    6cea:	4694      	mov	ip, r2
    6cec:	44bc      	add	ip, r7
    6cee:	4463      	add	r3, ip
    6cf0:	2240      	movs	r2, #64	; 0x40
    6cf2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    6cf4:	233b      	movs	r3, #59	; 0x3b
    6cf6:	2210      	movs	r2, #16
    6cf8:	4694      	mov	ip, r2
    6cfa:	44bc      	add	ip, r7
    6cfc:	4463      	add	r3, ip
    6cfe:	781b      	ldrb	r3, [r3, #0]
    6d00:	2b40      	cmp	r3, #64	; 0x40
    6d02:	d00e      	beq.n	6d22 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6d06:	22ff      	movs	r2, #255	; 0xff
    6d08:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    6d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6d0c:	041b      	lsls	r3, r3, #16
    6d0e:	0019      	movs	r1, r3
    6d10:	23ff      	movs	r3, #255	; 0xff
    6d12:	041b      	lsls	r3, r3, #16
    6d14:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6d16:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    6d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6d1a:	0612      	lsls	r2, r2, #24
    6d1c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d20:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    6d22:	233b      	movs	r3, #59	; 0x3b
    6d24:	2210      	movs	r2, #16
    6d26:	4694      	mov	ip, r2
    6d28:	44bc      	add	ip, r7
    6d2a:	4463      	add	r3, ip
    6d2c:	781b      	ldrb	r3, [r3, #0]
}
    6d2e:	0018      	movs	r0, r3
    6d30:	46bd      	mov	sp, r7
    6d32:	b017      	add	sp, #92	; 0x5c
    6d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d36:	46c0      	nop			; (mov r8, r8)
    6d38:	00021cfd 	.word	0x00021cfd

00006d3c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    6d3c:	b590      	push	{r4, r7, lr}
    6d3e:	b08b      	sub	sp, #44	; 0x2c
    6d40:	af00      	add	r7, sp, #0
    6d42:	60f8      	str	r0, [r7, #12]
    6d44:	60b9      	str	r1, [r7, #8]
    6d46:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    6d48:	68fb      	ldr	r3, [r7, #12]
    6d4a:	68ba      	ldr	r2, [r7, #8]
    6d4c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6d4e:	68fb      	ldr	r3, [r7, #12]
    6d50:	681b      	ldr	r3, [r3, #0]
    6d52:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6d54:	68fb      	ldr	r3, [r7, #12]
    6d56:	681b      	ldr	r3, [r3, #0]
    6d58:	0018      	movs	r0, r3
    6d5a:	4b3b      	ldr	r3, [pc, #236]	; (6e48 <i2c_master_init+0x10c>)
    6d5c:	4798      	blx	r3
    6d5e:	0003      	movs	r3, r0
    6d60:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6d62:	6a3b      	ldr	r3, [r7, #32]
    6d64:	3302      	adds	r3, #2
    6d66:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6d68:	6a3b      	ldr	r3, [r7, #32]
    6d6a:	3314      	adds	r3, #20
    6d6c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6d6e:	2201      	movs	r2, #1
    6d70:	69fb      	ldr	r3, [r7, #28]
    6d72:	409a      	lsls	r2, r3
    6d74:	0013      	movs	r3, r2
    6d76:	0019      	movs	r1, r3
    6d78:	2002      	movs	r0, #2
    6d7a:	4b34      	ldr	r3, [pc, #208]	; (6e4c <i2c_master_init+0x110>)
    6d7c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6d7e:	2314      	movs	r3, #20
    6d80:	18fb      	adds	r3, r7, r3
    6d82:	0018      	movs	r0, r3
    6d84:	4b32      	ldr	r3, [pc, #200]	; (6e50 <i2c_master_init+0x114>)
    6d86:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	7b1a      	ldrb	r2, [r3, #12]
    6d8c:	2314      	movs	r3, #20
    6d8e:	18fb      	adds	r3, r7, r3
    6d90:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6d92:	69bb      	ldr	r3, [r7, #24]
    6d94:	b2db      	uxtb	r3, r3
    6d96:	2214      	movs	r2, #20
    6d98:	18ba      	adds	r2, r7, r2
    6d9a:	0011      	movs	r1, r2
    6d9c:	0018      	movs	r0, r3
    6d9e:	4b2d      	ldr	r3, [pc, #180]	; (6e54 <i2c_master_init+0x118>)
    6da0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6da2:	69bb      	ldr	r3, [r7, #24]
    6da4:	b2db      	uxtb	r3, r3
    6da6:	0018      	movs	r0, r3
    6da8:	4b2b      	ldr	r3, [pc, #172]	; (6e58 <i2c_master_init+0x11c>)
    6daa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	7b1b      	ldrb	r3, [r3, #12]
    6db0:	2100      	movs	r1, #0
    6db2:	0018      	movs	r0, r3
    6db4:	4b29      	ldr	r3, [pc, #164]	; (6e5c <i2c_master_init+0x120>)
    6db6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6dba:	681b      	ldr	r3, [r3, #0]
    6dbc:	2202      	movs	r2, #2
    6dbe:	4013      	ands	r3, r2
    6dc0:	d001      	beq.n	6dc6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    6dc2:	231c      	movs	r3, #28
    6dc4:	e03b      	b.n	6e3e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6dc8:	681b      	ldr	r3, [r3, #0]
    6dca:	2201      	movs	r2, #1
    6dcc:	4013      	ands	r3, r2
    6dce:	d001      	beq.n	6dd4 <i2c_master_init+0x98>
		return STATUS_BUSY;
    6dd0:	2305      	movs	r3, #5
    6dd2:	e034      	b.n	6e3e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6dd4:	68fb      	ldr	r3, [r7, #12]
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	2217      	movs	r2, #23
    6dda:	18bc      	adds	r4, r7, r2
    6ddc:	0018      	movs	r0, r3
    6dde:	4b1a      	ldr	r3, [pc, #104]	; (6e48 <i2c_master_init+0x10c>)
    6de0:	4798      	blx	r3
    6de2:	0003      	movs	r3, r0
    6de4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    6de6:	4a1e      	ldr	r2, [pc, #120]	; (6e60 <i2c_master_init+0x124>)
    6de8:	2317      	movs	r3, #23
    6dea:	18fb      	adds	r3, r7, r3
    6dec:	781b      	ldrb	r3, [r3, #0]
    6dee:	0011      	movs	r1, r2
    6df0:	0018      	movs	r0, r3
    6df2:	4b1c      	ldr	r3, [pc, #112]	; (6e64 <i2c_master_init+0x128>)
    6df4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6df6:	2317      	movs	r3, #23
    6df8:	18fb      	adds	r3, r7, r3
    6dfa:	781a      	ldrb	r2, [r3, #0]
    6dfc:	4b1a      	ldr	r3, [pc, #104]	; (6e68 <i2c_master_init+0x12c>)
    6dfe:	0092      	lsls	r2, r2, #2
    6e00:	68f9      	ldr	r1, [r7, #12]
    6e02:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    6e04:	68fb      	ldr	r3, [r7, #12]
    6e06:	2200      	movs	r2, #0
    6e08:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    6e0a:	68fb      	ldr	r3, [r7, #12]
    6e0c:	2200      	movs	r2, #0
    6e0e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    6e10:	68fb      	ldr	r3, [r7, #12]
    6e12:	2200      	movs	r2, #0
    6e14:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    6e16:	68fb      	ldr	r3, [r7, #12]
    6e18:	2200      	movs	r2, #0
    6e1a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    6e1c:	68fb      	ldr	r3, [r7, #12]
    6e1e:	2225      	movs	r2, #37	; 0x25
    6e20:	2100      	movs	r1, #0
    6e22:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    6e24:	68fb      	ldr	r3, [r7, #12]
    6e26:	2200      	movs	r2, #0
    6e28:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    6e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e2c:	2214      	movs	r2, #20
    6e2e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    6e30:	687a      	ldr	r2, [r7, #4]
    6e32:	68fb      	ldr	r3, [r7, #12]
    6e34:	0011      	movs	r1, r2
    6e36:	0018      	movs	r0, r3
    6e38:	4b0c      	ldr	r3, [pc, #48]	; (6e6c <i2c_master_init+0x130>)
    6e3a:	4798      	blx	r3
    6e3c:	0003      	movs	r3, r0
}
    6e3e:	0018      	movs	r0, r3
    6e40:	46bd      	mov	sp, r7
    6e42:	b00b      	add	sp, #44	; 0x2c
    6e44:	bd90      	pop	{r4, r7, pc}
    6e46:	46c0      	nop			; (mov r8, r8)
    6e48:	000168b1 	.word	0x000168b1
    6e4c:	00006791 	.word	0x00006791
    6e50:	00006779 	.word	0x00006779
    6e54:	00019141 	.word	0x00019141
    6e58:	00019185 	.word	0x00019185
    6e5c:	00016669 	.word	0x00016669
    6e60:	00001825 	.word	0x00001825
    6e64:	00016915 	.word	0x00016915
    6e68:	20005888 	.word	0x20005888
    6e6c:	0000692d 	.word	0x0000692d

00006e70 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    6e70:	b580      	push	{r7, lr}
    6e72:	b084      	sub	sp, #16
    6e74:	af00      	add	r7, sp, #0
    6e76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6e78:	687b      	ldr	r3, [r7, #4]
    6e7a:	681b      	ldr	r3, [r3, #0]
    6e7c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	0018      	movs	r0, r3
    6e82:	4b0f      	ldr	r3, [pc, #60]	; (6ec0 <i2c_master_reset+0x50>)
    6e84:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	0018      	movs	r0, r3
    6e8a:	4b0e      	ldr	r3, [pc, #56]	; (6ec4 <i2c_master_reset+0x54>)
    6e8c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    6e8e:	4b0e      	ldr	r3, [pc, #56]	; (6ec8 <i2c_master_reset+0x58>)
    6e90:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	681b      	ldr	r3, [r3, #0]
    6e96:	0018      	movs	r0, r3
    6e98:	4b0c      	ldr	r3, [pc, #48]	; (6ecc <i2c_master_reset+0x5c>)
    6e9a:	4798      	blx	r3
    6e9c:	0003      	movs	r3, r0
    6e9e:	0018      	movs	r0, r3
    6ea0:	4b0b      	ldr	r3, [pc, #44]	; (6ed0 <i2c_master_reset+0x60>)
    6ea2:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    6ea4:	4b0b      	ldr	r3, [pc, #44]	; (6ed4 <i2c_master_reset+0x64>)
    6ea6:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	0018      	movs	r0, r3
    6eac:	4b04      	ldr	r3, [pc, #16]	; (6ec0 <i2c_master_reset+0x50>)
    6eae:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    6eb0:	68fb      	ldr	r3, [r7, #12]
    6eb2:	2201      	movs	r2, #1
    6eb4:	601a      	str	r2, [r3, #0]
}
    6eb6:	46c0      	nop			; (mov r8, r8)
    6eb8:	46bd      	mov	sp, r7
    6eba:	b004      	add	sp, #16
    6ebc:	bd80      	pop	{r7, pc}
    6ebe:	46c0      	nop			; (mov r8, r8)
    6ec0:	000068b1 	.word	0x000068b1
    6ec4:	000068d5 	.word	0x000068d5
    6ec8:	00006835 	.word	0x00006835
    6ecc:	00016981 	.word	0x00016981
    6ed0:	000192bd 	.word	0x000192bd
    6ed4:	00006849 	.word	0x00006849

00006ed8 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    6ed8:	b580      	push	{r7, lr}
    6eda:	b084      	sub	sp, #16
    6edc:	af00      	add	r7, sp, #0
    6ede:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	681b      	ldr	r3, [r3, #0]
    6ee4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    6ee6:	68fb      	ldr	r3, [r7, #12]
    6ee8:	7e1b      	ldrb	r3, [r3, #24]
    6eea:	b2db      	uxtb	r3, r3
    6eec:	001a      	movs	r2, r3
    6eee:	2302      	movs	r3, #2
    6ef0:	4013      	ands	r3, r2
    6ef2:	d00b      	beq.n	6f0c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6ef4:	68fb      	ldr	r3, [r7, #12]
    6ef6:	2202      	movs	r2, #2
    6ef8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    6efa:	68fb      	ldr	r3, [r7, #12]
    6efc:	8b5b      	ldrh	r3, [r3, #26]
    6efe:	b29b      	uxth	r3, r3
    6f00:	001a      	movs	r2, r3
    6f02:	2302      	movs	r3, #2
    6f04:	4013      	ands	r3, r2
    6f06:	d011      	beq.n	6f2c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    6f08:	2341      	movs	r3, #65	; 0x41
    6f0a:	e010      	b.n	6f2e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    6f0c:	68fb      	ldr	r3, [r7, #12]
    6f0e:	8b5b      	ldrh	r3, [r3, #26]
    6f10:	b29b      	uxth	r3, r3
    6f12:	001a      	movs	r2, r3
    6f14:	2304      	movs	r3, #4
    6f16:	4013      	ands	r3, r2
    6f18:	d008      	beq.n	6f2c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6f1a:	68fb      	ldr	r3, [r7, #12]
    6f1c:	685b      	ldr	r3, [r3, #4]
    6f1e:	22c0      	movs	r2, #192	; 0xc0
    6f20:	0292      	lsls	r2, r2, #10
    6f22:	431a      	orrs	r2, r3
    6f24:	68fb      	ldr	r3, [r7, #12]
    6f26:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    6f28:	2318      	movs	r3, #24
    6f2a:	e000      	b.n	6f2e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    6f2c:	2300      	movs	r3, #0
}
    6f2e:	0018      	movs	r0, r3
    6f30:	46bd      	mov	sp, r7
    6f32:	b004      	add	sp, #16
    6f34:	bd80      	pop	{r7, pc}

00006f36 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    6f36:	b580      	push	{r7, lr}
    6f38:	b084      	sub	sp, #16
    6f3a:	af00      	add	r7, sp, #0
    6f3c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	681b      	ldr	r3, [r3, #0]
    6f42:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    6f44:	230e      	movs	r3, #14
    6f46:	18fb      	adds	r3, r7, r3
    6f48:	2200      	movs	r2, #0
    6f4a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6f4c:	e00f      	b.n	6f6e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    6f4e:	230e      	movs	r3, #14
    6f50:	18fb      	adds	r3, r7, r3
    6f52:	220e      	movs	r2, #14
    6f54:	18ba      	adds	r2, r7, r2
    6f56:	8812      	ldrh	r2, [r2, #0]
    6f58:	3201      	adds	r2, #1
    6f5a:	801a      	strh	r2, [r3, #0]
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	891b      	ldrh	r3, [r3, #8]
    6f60:	220e      	movs	r2, #14
    6f62:	18ba      	adds	r2, r7, r2
    6f64:	8812      	ldrh	r2, [r2, #0]
    6f66:	429a      	cmp	r2, r3
    6f68:	d301      	bcc.n	6f6e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    6f6a:	2312      	movs	r3, #18
    6f6c:	e00e      	b.n	6f8c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6f6e:	68bb      	ldr	r3, [r7, #8]
    6f70:	7e1b      	ldrb	r3, [r3, #24]
    6f72:	b2db      	uxtb	r3, r3
    6f74:	001a      	movs	r2, r3
    6f76:	2301      	movs	r3, #1
    6f78:	4013      	ands	r3, r2
    6f7a:	d106      	bne.n	6f8a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    6f7c:	68bb      	ldr	r3, [r7, #8]
    6f7e:	7e1b      	ldrb	r3, [r3, #24]
    6f80:	b2db      	uxtb	r3, r3
    6f82:	001a      	movs	r2, r3
    6f84:	2302      	movs	r3, #2
    6f86:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6f88:	d0e1      	beq.n	6f4e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    6f8a:	2300      	movs	r3, #0
}
    6f8c:	0018      	movs	r0, r3
    6f8e:	46bd      	mov	sp, r7
    6f90:	b004      	add	sp, #16
    6f92:	bd80      	pop	{r7, pc}

00006f94 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    6f94:	b590      	push	{r4, r7, lr}
    6f96:	b085      	sub	sp, #20
    6f98:	af00      	add	r7, sp, #0
    6f9a:	6078      	str	r0, [r7, #4]
    6f9c:	000a      	movs	r2, r1
    6f9e:	1cfb      	adds	r3, r7, #3
    6fa0:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6fa2:	687b      	ldr	r3, [r7, #4]
    6fa4:	681b      	ldr	r3, [r3, #0]
    6fa6:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6fa8:	68fb      	ldr	r3, [r7, #12]
    6faa:	685b      	ldr	r3, [r3, #4]
    6fac:	2280      	movs	r2, #128	; 0x80
    6fae:	02d2      	lsls	r2, r2, #11
    6fb0:	431a      	orrs	r2, r3
    6fb2:	68fb      	ldr	r3, [r7, #12]
    6fb4:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    6fb6:	1cfb      	adds	r3, r7, #3
    6fb8:	781a      	ldrb	r2, [r3, #0]
    6fba:	68fb      	ldr	r3, [r7, #12]
    6fbc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6fbe:	230b      	movs	r3, #11
    6fc0:	18fc      	adds	r4, r7, r3
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	0018      	movs	r0, r3
    6fc6:	4b07      	ldr	r3, [pc, #28]	; (6fe4 <_i2c_master_send_hs_master_code+0x50>)
    6fc8:	4798      	blx	r3
    6fca:	0003      	movs	r3, r0
    6fcc:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    6fce:	68fb      	ldr	r3, [r7, #12]
    6fd0:	2201      	movs	r2, #1
    6fd2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    6fd4:	230b      	movs	r3, #11
    6fd6:	18fb      	adds	r3, r7, r3
    6fd8:	781b      	ldrb	r3, [r3, #0]
}
    6fda:	0018      	movs	r0, r3
    6fdc:	46bd      	mov	sp, r7
    6fde:	b005      	add	sp, #20
    6fe0:	bd90      	pop	{r4, r7, pc}
    6fe2:	46c0      	nop			; (mov r8, r8)
    6fe4:	00006f37 	.word	0x00006f37

00006fe8 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    6fe8:	b580      	push	{r7, lr}
    6fea:	af00      	add	r7, sp, #0
    6fec:	2000      	movs	r0, #0
    6fee:	4b02      	ldr	r3, [pc, #8]	; (6ff8 <TC3_Handler+0x10>)
    6ff0:	4798      	blx	r3
    6ff2:	46c0      	nop			; (mov r8, r8)
    6ff4:	46bd      	mov	sp, r7
    6ff6:	bd80      	pop	{r7, pc}
    6ff8:	00007025 	.word	0x00007025

00006ffc <TC4_Handler>:
    6ffc:	b580      	push	{r7, lr}
    6ffe:	af00      	add	r7, sp, #0
    7000:	2001      	movs	r0, #1
    7002:	4b02      	ldr	r3, [pc, #8]	; (700c <TC4_Handler+0x10>)
    7004:	4798      	blx	r3
    7006:	46c0      	nop			; (mov r8, r8)
    7008:	46bd      	mov	sp, r7
    700a:	bd80      	pop	{r7, pc}
    700c:	00007025 	.word	0x00007025

00007010 <TC5_Handler>:
    7010:	b580      	push	{r7, lr}
    7012:	af00      	add	r7, sp, #0
    7014:	2002      	movs	r0, #2
    7016:	4b02      	ldr	r3, [pc, #8]	; (7020 <TC5_Handler+0x10>)
    7018:	4798      	blx	r3
    701a:	46c0      	nop			; (mov r8, r8)
    701c:	46bd      	mov	sp, r7
    701e:	bd80      	pop	{r7, pc}
    7020:	00007025 	.word	0x00007025

00007024 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    7024:	b580      	push	{r7, lr}
    7026:	b084      	sub	sp, #16
    7028:	af00      	add	r7, sp, #0
    702a:	0002      	movs	r2, r0
    702c:	1dfb      	adds	r3, r7, #7
    702e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    7030:	1dfb      	adds	r3, r7, #7
    7032:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    7034:	4b28      	ldr	r3, [pc, #160]	; (70d8 <_tc_interrupt_handler+0xb4>)
    7036:	0092      	lsls	r2, r2, #2
    7038:	58d3      	ldr	r3, [r2, r3]
    703a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    703c:	68fb      	ldr	r3, [r7, #12]
    703e:	681b      	ldr	r3, [r3, #0]
    7040:	7b9b      	ldrb	r3, [r3, #14]
    7042:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    7044:	68fa      	ldr	r2, [r7, #12]
    7046:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7048:	4013      	ands	r3, r2
    704a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    704c:	68fb      	ldr	r3, [r7, #12]
    704e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7050:	230b      	movs	r3, #11
    7052:	18fb      	adds	r3, r7, r3
    7054:	400a      	ands	r2, r1
    7056:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7058:	230b      	movs	r3, #11
    705a:	18fb      	adds	r3, r7, r3
    705c:	781b      	ldrb	r3, [r3, #0]
    705e:	2201      	movs	r2, #1
    7060:	4013      	ands	r3, r2
    7062:	d008      	beq.n	7076 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    7064:	68fb      	ldr	r3, [r7, #12]
    7066:	689b      	ldr	r3, [r3, #8]
    7068:	68fa      	ldr	r2, [r7, #12]
    706a:	0010      	movs	r0, r2
    706c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    706e:	68fb      	ldr	r3, [r7, #12]
    7070:	681b      	ldr	r3, [r3, #0]
    7072:	2201      	movs	r2, #1
    7074:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    7076:	230b      	movs	r3, #11
    7078:	18fb      	adds	r3, r7, r3
    707a:	781b      	ldrb	r3, [r3, #0]
    707c:	2202      	movs	r2, #2
    707e:	4013      	ands	r3, r2
    7080:	d008      	beq.n	7094 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    7082:	68fb      	ldr	r3, [r7, #12]
    7084:	68db      	ldr	r3, [r3, #12]
    7086:	68fa      	ldr	r2, [r7, #12]
    7088:	0010      	movs	r0, r2
    708a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    708c:	68fb      	ldr	r3, [r7, #12]
    708e:	681b      	ldr	r3, [r3, #0]
    7090:	2202      	movs	r2, #2
    7092:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    7094:	230b      	movs	r3, #11
    7096:	18fb      	adds	r3, r7, r3
    7098:	781b      	ldrb	r3, [r3, #0]
    709a:	2210      	movs	r2, #16
    709c:	4013      	ands	r3, r2
    709e:	d008      	beq.n	70b2 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    70a0:	68fb      	ldr	r3, [r7, #12]
    70a2:	691b      	ldr	r3, [r3, #16]
    70a4:	68fa      	ldr	r2, [r7, #12]
    70a6:	0010      	movs	r0, r2
    70a8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    70aa:	68fb      	ldr	r3, [r7, #12]
    70ac:	681b      	ldr	r3, [r3, #0]
    70ae:	2210      	movs	r2, #16
    70b0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    70b2:	230b      	movs	r3, #11
    70b4:	18fb      	adds	r3, r7, r3
    70b6:	781b      	ldrb	r3, [r3, #0]
    70b8:	2220      	movs	r2, #32
    70ba:	4013      	ands	r3, r2
    70bc:	d008      	beq.n	70d0 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    70be:	68fb      	ldr	r3, [r7, #12]
    70c0:	695b      	ldr	r3, [r3, #20]
    70c2:	68fa      	ldr	r2, [r7, #12]
    70c4:	0010      	movs	r0, r2
    70c6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    70c8:	68fb      	ldr	r3, [r7, #12]
    70ca:	681b      	ldr	r3, [r3, #0]
    70cc:	2220      	movs	r2, #32
    70ce:	739a      	strb	r2, [r3, #14]
	}
}
    70d0:	46c0      	nop			; (mov r8, r8)
    70d2:	46bd      	mov	sp, r7
    70d4:	b004      	add	sp, #16
    70d6:	bd80      	pop	{r7, pc}
    70d8:	20004670 	.word	0x20004670

000070dc <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
    70dc:	b580      	push	{r7, lr}
    70de:	b084      	sub	sp, #16
    70e0:	af00      	add	r7, sp, #0
    70e2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
    70e4:	2300      	movs	r3, #0
    70e6:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
    70e8:	687b      	ldr	r3, [r7, #4]
    70ea:	2b00      	cmp	r3, #0
    70ec:	d101      	bne.n	70f2 <FreeRTOS_CLIRegisterCommand+0x16>
    70ee:	b672      	cpsid	i
    70f0:	e7fe      	b.n	70f0 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    70f2:	2008      	movs	r0, #8
    70f4:	4b11      	ldr	r3, [pc, #68]	; (713c <FreeRTOS_CLIRegisterCommand+0x60>)
    70f6:	4798      	blx	r3
    70f8:	0003      	movs	r3, r0
    70fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
    70fc:	68bb      	ldr	r3, [r7, #8]
    70fe:	2b00      	cmp	r3, #0
    7100:	d101      	bne.n	7106 <FreeRTOS_CLIRegisterCommand+0x2a>
    7102:	b672      	cpsid	i
    7104:	e7fe      	b.n	7104 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
    7106:	68bb      	ldr	r3, [r7, #8]
    7108:	2b00      	cmp	r3, #0
    710a:	d012      	beq.n	7132 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
    710c:	4b0c      	ldr	r3, [pc, #48]	; (7140 <FreeRTOS_CLIRegisterCommand+0x64>)
    710e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    7110:	68bb      	ldr	r3, [r7, #8]
    7112:	687a      	ldr	r2, [r7, #4]
    7114:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
    7116:	68bb      	ldr	r3, [r7, #8]
    7118:	2200      	movs	r2, #0
    711a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
    711c:	4b09      	ldr	r3, [pc, #36]	; (7144 <FreeRTOS_CLIRegisterCommand+0x68>)
    711e:	681b      	ldr	r3, [r3, #0]
    7120:	68ba      	ldr	r2, [r7, #8]
    7122:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
    7124:	4b07      	ldr	r3, [pc, #28]	; (7144 <FreeRTOS_CLIRegisterCommand+0x68>)
    7126:	68ba      	ldr	r2, [r7, #8]
    7128:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
    712a:	4b07      	ldr	r3, [pc, #28]	; (7148 <FreeRTOS_CLIRegisterCommand+0x6c>)
    712c:	4798      	blx	r3

		xReturn = pdPASS;
    712e:	2301      	movs	r3, #1
    7130:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    7132:	68fb      	ldr	r3, [r7, #12]
}
    7134:	0018      	movs	r0, r3
    7136:	46bd      	mov	sp, r7
    7138:	b004      	add	sp, #16
    713a:	bd80      	pop	{r7, pc}
    713c:	000094f1 	.word	0x000094f1
    7140:	000093b9 	.word	0x000093b9
    7144:	200000f4 	.word	0x200000f4
    7148:	000093dd 	.word	0x000093dd

0000714c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
    714c:	b580      	push	{r7, lr}
    714e:	b088      	sub	sp, #32
    7150:	af00      	add	r7, sp, #0
    7152:	60f8      	str	r0, [r7, #12]
    7154:	60b9      	str	r1, [r7, #8]
    7156:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
    7158:	2301      	movs	r3, #1
    715a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
    715c:	4b3d      	ldr	r3, [pc, #244]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    715e:	681b      	ldr	r3, [r3, #0]
    7160:	2b00      	cmp	r3, #0
    7162:	d144      	bne.n	71ee <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    7164:	4b3b      	ldr	r3, [pc, #236]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    7166:	4a3c      	ldr	r2, [pc, #240]	; (7258 <FreeRTOS_CLIProcessCommand+0x10c>)
    7168:	601a      	str	r2, [r3, #0]
    716a:	e03a      	b.n	71e2 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    716c:	4b39      	ldr	r3, [pc, #228]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    716e:	681b      	ldr	r3, [r3, #0]
    7170:	681b      	ldr	r3, [r3, #0]
    7172:	681b      	ldr	r3, [r3, #0]
    7174:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    7176:	69bb      	ldr	r3, [r7, #24]
    7178:	0018      	movs	r0, r3
    717a:	4b38      	ldr	r3, [pc, #224]	; (725c <FreeRTOS_CLIProcessCommand+0x110>)
    717c:	4798      	blx	r3
    717e:	0003      	movs	r3, r0
    7180:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    7182:	68fa      	ldr	r2, [r7, #12]
    7184:	697b      	ldr	r3, [r7, #20]
    7186:	18d3      	adds	r3, r2, r3
    7188:	781b      	ldrb	r3, [r3, #0]
    718a:	2b20      	cmp	r3, #32
    718c:	d005      	beq.n	719a <FreeRTOS_CLIProcessCommand+0x4e>
    718e:	68fa      	ldr	r2, [r7, #12]
    7190:	697b      	ldr	r3, [r7, #20]
    7192:	18d3      	adds	r3, r2, r3
    7194:	781b      	ldrb	r3, [r3, #0]
    7196:	2b00      	cmp	r3, #0
    7198:	d11e      	bne.n	71d8 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    719a:	697a      	ldr	r2, [r7, #20]
    719c:	69b9      	ldr	r1, [r7, #24]
    719e:	68fb      	ldr	r3, [r7, #12]
    71a0:	0018      	movs	r0, r3
    71a2:	4b2f      	ldr	r3, [pc, #188]	; (7260 <FreeRTOS_CLIProcessCommand+0x114>)
    71a4:	4798      	blx	r3
    71a6:	1e03      	subs	r3, r0, #0
    71a8:	d116      	bne.n	71d8 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    71aa:	4b2a      	ldr	r3, [pc, #168]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    71ac:	681b      	ldr	r3, [r3, #0]
    71ae:	681b      	ldr	r3, [r3, #0]
    71b0:	7b1b      	ldrb	r3, [r3, #12]
    71b2:	b25b      	sxtb	r3, r3
    71b4:	2b00      	cmp	r3, #0
    71b6:	db19      	blt.n	71ec <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
    71b8:	68fb      	ldr	r3, [r7, #12]
    71ba:	0018      	movs	r0, r3
    71bc:	4b29      	ldr	r3, [pc, #164]	; (7264 <FreeRTOS_CLIProcessCommand+0x118>)
    71be:	4798      	blx	r3
    71c0:	0003      	movs	r3, r0
    71c2:	001a      	movs	r2, r3
    71c4:	4b23      	ldr	r3, [pc, #140]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	681b      	ldr	r3, [r3, #0]
    71ca:	7b1b      	ldrb	r3, [r3, #12]
    71cc:	b25b      	sxtb	r3, r3
    71ce:	429a      	cmp	r2, r3
    71d0:	d00c      	beq.n	71ec <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
    71d2:	2300      	movs	r3, #0
    71d4:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
    71d6:	e009      	b.n	71ec <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    71d8:	4b1e      	ldr	r3, [pc, #120]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    71da:	681b      	ldr	r3, [r3, #0]
    71dc:	685a      	ldr	r2, [r3, #4]
    71de:	4b1d      	ldr	r3, [pc, #116]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    71e0:	601a      	str	r2, [r3, #0]
    71e2:	4b1c      	ldr	r3, [pc, #112]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    71e4:	681b      	ldr	r3, [r3, #0]
    71e6:	2b00      	cmp	r3, #0
    71e8:	d1c0      	bne.n	716c <FreeRTOS_CLIProcessCommand+0x20>
    71ea:	e000      	b.n	71ee <FreeRTOS_CLIProcessCommand+0xa2>
					break;
    71ec:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    71ee:	4b19      	ldr	r3, [pc, #100]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    71f0:	681b      	ldr	r3, [r3, #0]
    71f2:	2b00      	cmp	r3, #0
    71f4:	d00c      	beq.n	7210 <FreeRTOS_CLIProcessCommand+0xc4>
    71f6:	69fb      	ldr	r3, [r7, #28]
    71f8:	2b00      	cmp	r3, #0
    71fa:	d109      	bne.n	7210 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    71fc:	687a      	ldr	r2, [r7, #4]
    71fe:	491a      	ldr	r1, [pc, #104]	; (7268 <FreeRTOS_CLIProcessCommand+0x11c>)
    7200:	68bb      	ldr	r3, [r7, #8]
    7202:	0018      	movs	r0, r3
    7204:	4b19      	ldr	r3, [pc, #100]	; (726c <FreeRTOS_CLIProcessCommand+0x120>)
    7206:	4798      	blx	r3
		pxCommand = NULL;
    7208:	4b12      	ldr	r3, [pc, #72]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    720a:	2200      	movs	r2, #0
    720c:	601a      	str	r2, [r3, #0]
    720e:	e01c      	b.n	724a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
    7210:	4b10      	ldr	r3, [pc, #64]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    7212:	681b      	ldr	r3, [r3, #0]
    7214:	2b00      	cmp	r3, #0
    7216:	d010      	beq.n	723a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    7218:	4b0e      	ldr	r3, [pc, #56]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    721a:	681b      	ldr	r3, [r3, #0]
    721c:	681b      	ldr	r3, [r3, #0]
    721e:	689b      	ldr	r3, [r3, #8]
    7220:	68fa      	ldr	r2, [r7, #12]
    7222:	6879      	ldr	r1, [r7, #4]
    7224:	68b8      	ldr	r0, [r7, #8]
    7226:	4798      	blx	r3
    7228:	0003      	movs	r3, r0
    722a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
    722c:	69fb      	ldr	r3, [r7, #28]
    722e:	2b00      	cmp	r3, #0
    7230:	d10b      	bne.n	724a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
    7232:	4b08      	ldr	r3, [pc, #32]	; (7254 <FreeRTOS_CLIProcessCommand+0x108>)
    7234:	2200      	movs	r2, #0
    7236:	601a      	str	r2, [r3, #0]
    7238:	e007      	b.n	724a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    723a:	687a      	ldr	r2, [r7, #4]
    723c:	490c      	ldr	r1, [pc, #48]	; (7270 <FreeRTOS_CLIProcessCommand+0x124>)
    723e:	68bb      	ldr	r3, [r7, #8]
    7240:	0018      	movs	r0, r3
    7242:	4b0a      	ldr	r3, [pc, #40]	; (726c <FreeRTOS_CLIProcessCommand+0x120>)
    7244:	4798      	blx	r3
		xReturn = pdFALSE;
    7246:	2300      	movs	r3, #0
    7248:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
    724a:	69fb      	ldr	r3, [r7, #28]
}
    724c:	0018      	movs	r0, r3
    724e:	46bd      	mov	sp, r7
    7250:	b008      	add	sp, #32
    7252:	bd80      	pop	{r7, pc}
    7254:	20000cf4 	.word	0x20000cf4
    7258:	200000ec 	.word	0x200000ec
    725c:	00024b6f 	.word	0x00024b6f
    7260:	00024b7d 	.word	0x00024b7d
    7264:	000072d5 	.word	0x000072d5
    7268:	00026bec 	.word	0x00026bec
    726c:	00024b9f 	.word	0x00024b9f
    7270:	00026c44 	.word	0x00026c44

00007274 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    7274:	b580      	push	{r7, lr}
    7276:	b086      	sub	sp, #24
    7278:	af00      	add	r7, sp, #0
    727a:	60f8      	str	r0, [r7, #12]
    727c:	60b9      	str	r1, [r7, #8]
    727e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    7280:	4b11      	ldr	r3, [pc, #68]	; (72c8 <prvHelpCommand+0x54>)
    7282:	681b      	ldr	r3, [r3, #0]
    7284:	2b00      	cmp	r3, #0
    7286:	d102      	bne.n	728e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
    7288:	4b0f      	ldr	r3, [pc, #60]	; (72c8 <prvHelpCommand+0x54>)
    728a:	4a10      	ldr	r2, [pc, #64]	; (72cc <prvHelpCommand+0x58>)
    728c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    728e:	4b0e      	ldr	r3, [pc, #56]	; (72c8 <prvHelpCommand+0x54>)
    7290:	681b      	ldr	r3, [r3, #0]
    7292:	681b      	ldr	r3, [r3, #0]
    7294:	6859      	ldr	r1, [r3, #4]
    7296:	68ba      	ldr	r2, [r7, #8]
    7298:	68fb      	ldr	r3, [r7, #12]
    729a:	0018      	movs	r0, r3
    729c:	4b0c      	ldr	r3, [pc, #48]	; (72d0 <prvHelpCommand+0x5c>)
    729e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    72a0:	4b09      	ldr	r3, [pc, #36]	; (72c8 <prvHelpCommand+0x54>)
    72a2:	681b      	ldr	r3, [r3, #0]
    72a4:	685a      	ldr	r2, [r3, #4]
    72a6:	4b08      	ldr	r3, [pc, #32]	; (72c8 <prvHelpCommand+0x54>)
    72a8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
    72aa:	4b07      	ldr	r3, [pc, #28]	; (72c8 <prvHelpCommand+0x54>)
    72ac:	681b      	ldr	r3, [r3, #0]
    72ae:	2b00      	cmp	r3, #0
    72b0:	d102      	bne.n	72b8 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
    72b2:	2300      	movs	r3, #0
    72b4:	617b      	str	r3, [r7, #20]
    72b6:	e001      	b.n	72bc <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
    72b8:	2301      	movs	r3, #1
    72ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    72bc:	697b      	ldr	r3, [r7, #20]
}
    72be:	0018      	movs	r0, r3
    72c0:	46bd      	mov	sp, r7
    72c2:	b006      	add	sp, #24
    72c4:	bd80      	pop	{r7, pc}
    72c6:	46c0      	nop			; (mov r8, r8)
    72c8:	20000cf8 	.word	0x20000cf8
    72cc:	200000ec 	.word	0x200000ec
    72d0:	00024b9f 	.word	0x00024b9f

000072d4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
    72d4:	b580      	push	{r7, lr}
    72d6:	b084      	sub	sp, #16
    72d8:	af00      	add	r7, sp, #0
    72da:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
    72dc:	230f      	movs	r3, #15
    72de:	18fb      	adds	r3, r7, r3
    72e0:	2200      	movs	r2, #0
    72e2:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
    72e4:	2300      	movs	r3, #0
    72e6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    72e8:	e018      	b.n	731c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
    72ea:	687b      	ldr	r3, [r7, #4]
    72ec:	781b      	ldrb	r3, [r3, #0]
    72ee:	2b20      	cmp	r3, #32
    72f0:	d10f      	bne.n	7312 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
    72f2:	68bb      	ldr	r3, [r7, #8]
    72f4:	2b01      	cmp	r3, #1
    72f6:	d00e      	beq.n	7316 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
    72f8:	230f      	movs	r3, #15
    72fa:	18fb      	adds	r3, r7, r3
    72fc:	781b      	ldrb	r3, [r3, #0]
    72fe:	b25b      	sxtb	r3, r3
    7300:	b2db      	uxtb	r3, r3
    7302:	3301      	adds	r3, #1
    7304:	b2da      	uxtb	r2, r3
    7306:	230f      	movs	r3, #15
    7308:	18fb      	adds	r3, r7, r3
    730a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
    730c:	2301      	movs	r3, #1
    730e:	60bb      	str	r3, [r7, #8]
    7310:	e001      	b.n	7316 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
    7312:	2300      	movs	r3, #0
    7314:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
    7316:	687b      	ldr	r3, [r7, #4]
    7318:	3301      	adds	r3, #1
    731a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
    731c:	687b      	ldr	r3, [r7, #4]
    731e:	781b      	ldrb	r3, [r3, #0]
    7320:	2b00      	cmp	r3, #0
    7322:	d1e2      	bne.n	72ea <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    7324:	68bb      	ldr	r3, [r7, #8]
    7326:	2b01      	cmp	r3, #1
    7328:	d109      	bne.n	733e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
    732a:	230f      	movs	r3, #15
    732c:	18fb      	adds	r3, r7, r3
    732e:	781b      	ldrb	r3, [r3, #0]
    7330:	b25b      	sxtb	r3, r3
    7332:	b2db      	uxtb	r3, r3
    7334:	3b01      	subs	r3, #1
    7336:	b2da      	uxtb	r2, r3
    7338:	230f      	movs	r3, #15
    733a:	18fb      	adds	r3, r7, r3
    733c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
    733e:	230f      	movs	r3, #15
    7340:	18fb      	adds	r3, r7, r3
    7342:	781b      	ldrb	r3, [r3, #0]
    7344:	b25b      	sxtb	r3, r3
}
    7346:	0018      	movs	r0, r3
    7348:	46bd      	mov	sp, r7
    734a:	b004      	add	sp, #16
    734c:	bd80      	pop	{r7, pc}
	...

00007350 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
    7350:	b580      	push	{r7, lr}
    7352:	b082      	sub	sp, #8
    7354:	af00      	add	r7, sp, #0
    7356:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
    7358:	687b      	ldr	r3, [r7, #4]
    735a:	0018      	movs	r0, r3
    735c:	4b03      	ldr	r3, [pc, #12]	; (736c <prvTraceGetQueueNumber+0x1c>)
    735e:	4798      	blx	r3
    7360:	0003      	movs	r3, r0
}
    7362:	0018      	movs	r0, r3
    7364:	46bd      	mov	sp, r7
    7366:	b002      	add	sp, #8
    7368:	bd80      	pop	{r7, pc}
    736a:	46c0      	nop			; (mov r8, r8)
    736c:	0000ab19 	.word	0x0000ab19

00007370 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    7370:	b580      	push	{r7, lr}
    7372:	b082      	sub	sp, #8
    7374:	af00      	add	r7, sp, #0
    7376:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    7378:	687b      	ldr	r3, [r7, #4]
    737a:	0018      	movs	r0, r3
    737c:	4b03      	ldr	r3, [pc, #12]	; (738c <prvTraceGetQueueType+0x1c>)
    737e:	4798      	blx	r3
    7380:	0003      	movs	r3, r0
}
    7382:	0018      	movs	r0, r3
    7384:	46bd      	mov	sp, r7
    7386:	b002      	add	sp, #8
    7388:	bd80      	pop	{r7, pc}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	0000ab45 	.word	0x0000ab45

00007390 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    7390:	b580      	push	{r7, lr}
    7392:	b082      	sub	sp, #8
    7394:	af00      	add	r7, sp, #0
    7396:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    7398:	687b      	ldr	r3, [r7, #4]
    739a:	0018      	movs	r0, r3
    739c:	4b03      	ldr	r3, [pc, #12]	; (73ac <prvTraceGetTaskNumberLow16+0x1c>)
    739e:	4798      	blx	r3
    73a0:	0003      	movs	r3, r0
    73a2:	b29b      	uxth	r3, r3
}
    73a4:	0018      	movs	r0, r3
    73a6:	46bd      	mov	sp, r7
    73a8:	b002      	add	sp, #8
    73aa:	bd80      	pop	{r7, pc}
    73ac:	0000be75 	.word	0x0000be75

000073b0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    73b0:	b580      	push	{r7, lr}
    73b2:	b082      	sub	sp, #8
    73b4:	af00      	add	r7, sp, #0
    73b6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	0018      	movs	r0, r3
    73bc:	4b04      	ldr	r3, [pc, #16]	; (73d0 <prvTraceGetTaskNumberHigh16+0x20>)
    73be:	4798      	blx	r3
    73c0:	0003      	movs	r3, r0
    73c2:	0c1b      	lsrs	r3, r3, #16
    73c4:	b29b      	uxth	r3, r3
}
    73c6:	0018      	movs	r0, r3
    73c8:	46bd      	mov	sp, r7
    73ca:	b002      	add	sp, #8
    73cc:	bd80      	pop	{r7, pc}
    73ce:	46c0      	nop			; (mov r8, r8)
    73d0:	0000be75 	.word	0x0000be75

000073d4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    73d4:	b580      	push	{r7, lr}
    73d6:	b082      	sub	sp, #8
    73d8:	af00      	add	r7, sp, #0
    73da:	6078      	str	r0, [r7, #4]
    73dc:	000a      	movs	r2, r1
    73de:	1cbb      	adds	r3, r7, #2
    73e0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    73e2:	687b      	ldr	r3, [r7, #4]
    73e4:	0018      	movs	r0, r3
    73e6:	4b08      	ldr	r3, [pc, #32]	; (7408 <prvTraceSetTaskNumberLow16+0x34>)
    73e8:	4798      	blx	r3
    73ea:	0003      	movs	r3, r0
    73ec:	0c1b      	lsrs	r3, r3, #16
    73ee:	041a      	lsls	r2, r3, #16
    73f0:	1cbb      	adds	r3, r7, #2
    73f2:	881b      	ldrh	r3, [r3, #0]
    73f4:	431a      	orrs	r2, r3
    73f6:	687b      	ldr	r3, [r7, #4]
    73f8:	0011      	movs	r1, r2
    73fa:	0018      	movs	r0, r3
    73fc:	4b03      	ldr	r3, [pc, #12]	; (740c <prvTraceSetTaskNumberLow16+0x38>)
    73fe:	4798      	blx	r3
}
    7400:	46c0      	nop			; (mov r8, r8)
    7402:	46bd      	mov	sp, r7
    7404:	b002      	add	sp, #8
    7406:	bd80      	pop	{r7, pc}
    7408:	0000be75 	.word	0x0000be75
    740c:	0000be9d 	.word	0x0000be9d

00007410 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    7410:	b580      	push	{r7, lr}
    7412:	b082      	sub	sp, #8
    7414:	af00      	add	r7, sp, #0
    7416:	6078      	str	r0, [r7, #4]
    7418:	000a      	movs	r2, r1
    741a:	1cbb      	adds	r3, r7, #2
    741c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    741e:	687b      	ldr	r3, [r7, #4]
    7420:	0018      	movs	r0, r3
    7422:	4b09      	ldr	r3, [pc, #36]	; (7448 <prvTraceSetTaskNumberHigh16+0x38>)
    7424:	4798      	blx	r3
    7426:	0003      	movs	r3, r0
    7428:	041b      	lsls	r3, r3, #16
    742a:	0c1a      	lsrs	r2, r3, #16
    742c:	1cbb      	adds	r3, r7, #2
    742e:	881b      	ldrh	r3, [r3, #0]
    7430:	041b      	lsls	r3, r3, #16
    7432:	431a      	orrs	r2, r3
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	0011      	movs	r1, r2
    7438:	0018      	movs	r0, r3
    743a:	4b04      	ldr	r3, [pc, #16]	; (744c <prvTraceSetTaskNumberHigh16+0x3c>)
    743c:	4798      	blx	r3
}
    743e:	46c0      	nop			; (mov r8, r8)
    7440:	46bd      	mov	sp, r7
    7442:	b002      	add	sp, #8
    7444:	bd80      	pop	{r7, pc}
    7446:	46c0      	nop			; (mov r8, r8)
    7448:	0000be75 	.word	0x0000be75
    744c:	0000be9d 	.word	0x0000be9d

00007450 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    7450:	b580      	push	{r7, lr}
    7452:	b082      	sub	sp, #8
    7454:	af00      	add	r7, sp, #0
    7456:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    7458:	687b      	ldr	r3, [r7, #4]
    745a:	0018      	movs	r0, r3
    745c:	4b03      	ldr	r3, [pc, #12]	; (746c <prvTraceGetQueueNumberLow16+0x1c>)
    745e:	4798      	blx	r3
    7460:	0003      	movs	r3, r0
    7462:	b29b      	uxth	r3, r3
}
    7464:	0018      	movs	r0, r3
    7466:	46bd      	mov	sp, r7
    7468:	b002      	add	sp, #8
    746a:	bd80      	pop	{r7, pc}
    746c:	00007351 	.word	0x00007351

00007470 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    7470:	b580      	push	{r7, lr}
    7472:	b082      	sub	sp, #8
    7474:	af00      	add	r7, sp, #0
    7476:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    7478:	687b      	ldr	r3, [r7, #4]
    747a:	0018      	movs	r0, r3
    747c:	4b04      	ldr	r3, [pc, #16]	; (7490 <prvTraceGetQueueNumberHigh16+0x20>)
    747e:	4798      	blx	r3
    7480:	0003      	movs	r3, r0
    7482:	0c1b      	lsrs	r3, r3, #16
    7484:	b29b      	uxth	r3, r3
}
    7486:	0018      	movs	r0, r3
    7488:	46bd      	mov	sp, r7
    748a:	b002      	add	sp, #8
    748c:	bd80      	pop	{r7, pc}
    748e:	46c0      	nop			; (mov r8, r8)
    7490:	00007351 	.word	0x00007351

00007494 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    7494:	b580      	push	{r7, lr}
    7496:	b082      	sub	sp, #8
    7498:	af00      	add	r7, sp, #0
    749a:	6078      	str	r0, [r7, #4]
    749c:	000a      	movs	r2, r1
    749e:	1cbb      	adds	r3, r7, #2
    74a0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    74a2:	687b      	ldr	r3, [r7, #4]
    74a4:	0018      	movs	r0, r3
    74a6:	4b08      	ldr	r3, [pc, #32]	; (74c8 <prvTraceSetQueueNumberLow16+0x34>)
    74a8:	4798      	blx	r3
    74aa:	0003      	movs	r3, r0
    74ac:	0c1b      	lsrs	r3, r3, #16
    74ae:	041a      	lsls	r2, r3, #16
    74b0:	1cbb      	adds	r3, r7, #2
    74b2:	881b      	ldrh	r3, [r3, #0]
    74b4:	431a      	orrs	r2, r3
    74b6:	687b      	ldr	r3, [r7, #4]
    74b8:	0011      	movs	r1, r2
    74ba:	0018      	movs	r0, r3
    74bc:	4b03      	ldr	r3, [pc, #12]	; (74cc <prvTraceSetQueueNumberLow16+0x38>)
    74be:	4798      	blx	r3
}
    74c0:	46c0      	nop			; (mov r8, r8)
    74c2:	46bd      	mov	sp, r7
    74c4:	b002      	add	sp, #8
    74c6:	bd80      	pop	{r7, pc}
    74c8:	00007351 	.word	0x00007351
    74cc:	0000ab2d 	.word	0x0000ab2d

000074d0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    74d0:	b580      	push	{r7, lr}
    74d2:	b082      	sub	sp, #8
    74d4:	af00      	add	r7, sp, #0
    74d6:	6078      	str	r0, [r7, #4]
    74d8:	000a      	movs	r2, r1
    74da:	1cbb      	adds	r3, r7, #2
    74dc:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    74de:	687b      	ldr	r3, [r7, #4]
    74e0:	0018      	movs	r0, r3
    74e2:	4b09      	ldr	r3, [pc, #36]	; (7508 <prvTraceSetQueueNumberHigh16+0x38>)
    74e4:	4798      	blx	r3
    74e6:	0003      	movs	r3, r0
    74e8:	041b      	lsls	r3, r3, #16
    74ea:	0c1a      	lsrs	r2, r3, #16
    74ec:	1cbb      	adds	r3, r7, #2
    74ee:	881b      	ldrh	r3, [r3, #0]
    74f0:	041b      	lsls	r3, r3, #16
    74f2:	431a      	orrs	r2, r3
    74f4:	687b      	ldr	r3, [r7, #4]
    74f6:	0011      	movs	r1, r2
    74f8:	0018      	movs	r0, r3
    74fa:	4b04      	ldr	r3, [pc, #16]	; (750c <prvTraceSetQueueNumberHigh16+0x3c>)
    74fc:	4798      	blx	r3
}
    74fe:	46c0      	nop			; (mov r8, r8)
    7500:	46bd      	mov	sp, r7
    7502:	b002      	add	sp, #8
    7504:	bd80      	pop	{r7, pc}
    7506:	46c0      	nop			; (mov r8, r8)
    7508:	00007351 	.word	0x00007351
    750c:	0000ab2d 	.word	0x0000ab2d

00007510 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
    7510:	b580      	push	{r7, lr}
    7512:	b084      	sub	sp, #16
    7514:	af00      	add	r7, sp, #0
    7516:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
    7518:	2300      	movs	r3, #0
    751a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    751c:	2300      	movs	r3, #0
    751e:	60bb      	str	r3, [r7, #8]
    7520:	e018      	b.n	7554 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
    7522:	4b14      	ldr	r3, [pc, #80]	; (7574 <prvAddTaskToStackMonitor+0x64>)
    7524:	68ba      	ldr	r2, [r7, #8]
    7526:	00d2      	lsls	r2, r2, #3
    7528:	58d3      	ldr	r3, [r2, r3]
    752a:	2b00      	cmp	r3, #0
    752c:	d10f      	bne.n	754e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
    752e:	4b11      	ldr	r3, [pc, #68]	; (7574 <prvAddTaskToStackMonitor+0x64>)
    7530:	68ba      	ldr	r2, [r7, #8]
    7532:	00d2      	lsls	r2, r2, #3
    7534:	6879      	ldr	r1, [r7, #4]
    7536:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
    7538:	4a0e      	ldr	r2, [pc, #56]	; (7574 <prvAddTaskToStackMonitor+0x64>)
    753a:	68bb      	ldr	r3, [r7, #8]
    753c:	00db      	lsls	r3, r3, #3
    753e:	18d3      	adds	r3, r2, r3
    7540:	3304      	adds	r3, #4
    7542:	2201      	movs	r2, #1
    7544:	4252      	negs	r2, r2
    7546:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
    7548:	2301      	movs	r3, #1
    754a:	60fb      	str	r3, [r7, #12]
			break;
    754c:	e005      	b.n	755a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    754e:	68bb      	ldr	r3, [r7, #8]
    7550:	3301      	adds	r3, #1
    7552:	60bb      	str	r3, [r7, #8]
    7554:	68bb      	ldr	r3, [r7, #8]
    7556:	2b09      	cmp	r3, #9
    7558:	dde3      	ble.n	7522 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
    755a:	68fb      	ldr	r3, [r7, #12]
    755c:	2b00      	cmp	r3, #0
    755e:	d104      	bne.n	756a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
    7560:	4b05      	ldr	r3, [pc, #20]	; (7578 <prvAddTaskToStackMonitor+0x68>)
    7562:	681b      	ldr	r3, [r3, #0]
    7564:	1c5a      	adds	r2, r3, #1
    7566:	4b04      	ldr	r3, [pc, #16]	; (7578 <prvAddTaskToStackMonitor+0x68>)
    7568:	601a      	str	r2, [r3, #0]
	}
}
    756a:	46c0      	nop			; (mov r8, r8)
    756c:	46bd      	mov	sp, r7
    756e:	b004      	add	sp, #16
    7570:	bd80      	pop	{r7, pc}
    7572:	46c0      	nop			; (mov r8, r8)
    7574:	20000d00 	.word	0x20000d00
    7578:	20000d50 	.word	0x20000d50

0000757c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
    757c:	b590      	push	{r4, r7, lr}
    757e:	b085      	sub	sp, #20
    7580:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
    7582:	2300      	movs	r3, #0
    7584:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
    7586:	4b2b      	ldr	r3, [pc, #172]	; (7634 <prvReportStackUsage+0xb8>)
    7588:	681b      	ldr	r3, [r3, #0]
    758a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
    758c:	4b29      	ldr	r3, [pc, #164]	; (7634 <prvReportStackUsage+0xb8>)
    758e:	681a      	ldr	r2, [r3, #0]
    7590:	4b29      	ldr	r3, [pc, #164]	; (7638 <prvReportStackUsage+0xbc>)
    7592:	00d2      	lsls	r2, r2, #3
    7594:	58d3      	ldr	r3, [r2, r3]
    7596:	2b00      	cmp	r3, #0
    7598:	d035      	beq.n	7606 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
    759a:	4b26      	ldr	r3, [pc, #152]	; (7634 <prvReportStackUsage+0xb8>)
    759c:	681a      	ldr	r2, [r3, #0]
    759e:	4b26      	ldr	r3, [pc, #152]	; (7638 <prvReportStackUsage+0xbc>)
    75a0:	00d2      	lsls	r2, r2, #3
    75a2:	58d3      	ldr	r3, [r2, r3]
    75a4:	0018      	movs	r0, r3
    75a6:	4b25      	ldr	r3, [pc, #148]	; (763c <prvReportStackUsage+0xc0>)
    75a8:	4798      	blx	r3
    75aa:	0003      	movs	r3, r0
    75ac:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
    75ae:	4b21      	ldr	r3, [pc, #132]	; (7634 <prvReportStackUsage+0xb8>)
    75b0:	681b      	ldr	r3, [r3, #0]
    75b2:	4a21      	ldr	r2, [pc, #132]	; (7638 <prvReportStackUsage+0xbc>)
    75b4:	00db      	lsls	r3, r3, #3
    75b6:	18d3      	adds	r3, r2, r3
    75b8:	3304      	adds	r3, #4
    75ba:	681a      	ldr	r2, [r3, #0]
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	429a      	cmp	r2, r3
    75c0:	d907      	bls.n	75d2 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
    75c2:	4b1c      	ldr	r3, [pc, #112]	; (7634 <prvReportStackUsage+0xb8>)
    75c4:	681b      	ldr	r3, [r3, #0]
    75c6:	4a1c      	ldr	r2, [pc, #112]	; (7638 <prvReportStackUsage+0xbc>)
    75c8:	00db      	lsls	r3, r3, #3
    75ca:	18d3      	adds	r3, r2, r3
    75cc:	3304      	adds	r3, #4
    75ce:	687a      	ldr	r2, [r7, #4]
    75d0:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
    75d2:	4b18      	ldr	r3, [pc, #96]	; (7634 <prvReportStackUsage+0xb8>)
    75d4:	681a      	ldr	r2, [r3, #0]
    75d6:	4b18      	ldr	r3, [pc, #96]	; (7638 <prvReportStackUsage+0xbc>)
    75d8:	00d2      	lsls	r2, r2, #3
    75da:	58d3      	ldr	r3, [r2, r3]
    75dc:	0018      	movs	r0, r3
    75de:	4b18      	ldr	r3, [pc, #96]	; (7640 <prvReportStackUsage+0xc4>)
    75e0:	4798      	blx	r3
    75e2:	0003      	movs	r3, r0
    75e4:	b2db      	uxtb	r3, r3
    75e6:	0019      	movs	r1, r3
    75e8:	4b12      	ldr	r3, [pc, #72]	; (7634 <prvReportStackUsage+0xb8>)
    75ea:	681b      	ldr	r3, [r3, #0]
    75ec:	4a12      	ldr	r2, [pc, #72]	; (7638 <prvReportStackUsage+0xbc>)
    75ee:	00db      	lsls	r3, r3, #3
    75f0:	18d3      	adds	r3, r2, r3
    75f2:	3304      	adds	r3, #4
    75f4:	681b      	ldr	r3, [r3, #0]
    75f6:	000a      	movs	r2, r1
    75f8:	2103      	movs	r1, #3
    75fa:	20ea      	movs	r0, #234	; 0xea
    75fc:	4c11      	ldr	r4, [pc, #68]	; (7644 <prvReportStackUsage+0xc8>)
    75fe:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
    7600:	68fb      	ldr	r3, [r7, #12]
    7602:	3301      	adds	r3, #1
    7604:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
    7606:	4b0b      	ldr	r3, [pc, #44]	; (7634 <prvReportStackUsage+0xb8>)
    7608:	681b      	ldr	r3, [r3, #0]
    760a:	1c5a      	adds	r2, r3, #1
    760c:	4b0e      	ldr	r3, [pc, #56]	; (7648 <prvReportStackUsage+0xcc>)
    760e:	210a      	movs	r1, #10
    7610:	0010      	movs	r0, r2
    7612:	4798      	blx	r3
    7614:	000b      	movs	r3, r1
    7616:	001a      	movs	r2, r3
    7618:	4b06      	ldr	r3, [pc, #24]	; (7634 <prvReportStackUsage+0xb8>)
    761a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
    761c:	68fb      	ldr	r3, [r7, #12]
    761e:	2b00      	cmp	r3, #0
    7620:	dc04      	bgt.n	762c <prvReportStackUsage+0xb0>
    7622:	4b04      	ldr	r3, [pc, #16]	; (7634 <prvReportStackUsage+0xb8>)
    7624:	681a      	ldr	r2, [r3, #0]
    7626:	68bb      	ldr	r3, [r7, #8]
    7628:	429a      	cmp	r2, r3
    762a:	d1af      	bne.n	758c <prvReportStackUsage+0x10>
}
    762c:	46c0      	nop			; (mov r8, r8)
    762e:	46bd      	mov	sp, r7
    7630:	b005      	add	sp, #20
    7632:	bd90      	pop	{r4, r7, pc}
    7634:	20000d54 	.word	0x20000d54
    7638:	20000d00 	.word	0x20000d00
    763c:	0000c015 	.word	0x0000c015
    7640:	00007391 	.word	0x00007391
    7644:	00007ed9 	.word	0x00007ed9
    7648:	00021fdd 	.word	0x00021fdd

0000764c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    764c:	b580      	push	{r7, lr}
    764e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
    7650:	4b02      	ldr	r3, [pc, #8]	; (765c <prvTraceGetCurrentTaskHandle+0x10>)
    7652:	4798      	blx	r3
    7654:	0003      	movs	r3, r0
}
    7656:	0018      	movs	r0, r3
    7658:	46bd      	mov	sp, r7
    765a:	bd80      	pop	{r7, pc}
    765c:	0000c0c1 	.word	0x0000c0c1

00007660 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    7660:	b590      	push	{r4, r7, lr}
    7662:	b085      	sub	sp, #20
    7664:	af02      	add	r7, sp, #8
    7666:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
    7668:	4b14      	ldr	r3, [pc, #80]	; (76bc <vTraceEnable+0x5c>)
    766a:	4798      	blx	r3

	if (startOption == TRC_START)
    766c:	687b      	ldr	r3, [r7, #4]
    766e:	2b01      	cmp	r3, #1
    7670:	d102      	bne.n	7678 <vTraceEnable+0x18>
	{
		vTraceStart();
    7672:	4b13      	ldr	r3, [pc, #76]	; (76c0 <vTraceEnable+0x60>)
    7674:	4798      	blx	r3
    7676:	e00e      	b.n	7696 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	2b02      	cmp	r3, #2
    767c:	d104      	bne.n	7688 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    767e:	4b11      	ldr	r3, [pc, #68]	; (76c4 <vTraceEnable+0x64>)
    7680:	0018      	movs	r0, r3
    7682:	4b11      	ldr	r3, [pc, #68]	; (76c8 <vTraceEnable+0x68>)
    7684:	4798      	blx	r3
    7686:	e006      	b.n	7696 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	2b00      	cmp	r3, #0
    768c:	d003      	beq.n	7696 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    768e:	4b0f      	ldr	r3, [pc, #60]	; (76cc <vTraceEnable+0x6c>)
    7690:	0018      	movs	r0, r3
    7692:	4b0d      	ldr	r3, [pc, #52]	; (76c8 <vTraceEnable+0x68>)
    7694:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
    7696:	4b0e      	ldr	r3, [pc, #56]	; (76d0 <vTraceEnable+0x70>)
    7698:	681b      	ldr	r3, [r3, #0]
    769a:	2b00      	cmp	r3, #0
    769c:	d109      	bne.n	76b2 <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
    769e:	490d      	ldr	r1, [pc, #52]	; (76d4 <vTraceEnable+0x74>)
    76a0:	480d      	ldr	r0, [pc, #52]	; (76d8 <vTraceEnable+0x78>)
    76a2:	4b0b      	ldr	r3, [pc, #44]	; (76d0 <vTraceEnable+0x70>)
    76a4:	9301      	str	r3, [sp, #4]
    76a6:	2304      	movs	r3, #4
    76a8:	9300      	str	r3, [sp, #0]
    76aa:	2300      	movs	r3, #0
    76ac:	22c8      	movs	r2, #200	; 0xc8
    76ae:	4c0b      	ldr	r4, [pc, #44]	; (76dc <vTraceEnable+0x7c>)
    76b0:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    76b2:	46c0      	nop			; (mov r8, r8)
    76b4:	46bd      	mov	sp, r7
    76b6:	b003      	add	sp, #12
    76b8:	bd90      	pop	{r4, r7, pc}
    76ba:	46c0      	nop			; (mov r8, r8)
    76bc:	000085a5 	.word	0x000085a5
    76c0:	00007afd 	.word	0x00007afd
    76c4:	00026ca4 	.word	0x00026ca4
    76c8:	00008c4d 	.word	0x00008c4d
    76cc:	00026ce4 	.word	0x00026ce4
    76d0:	20000cfc 	.word	0x20000cfc
    76d4:	00026d18 	.word	0x00026d18
    76d8:	000076e1 	.word	0x000076e1
    76dc:	0000b019 	.word	0x0000b019

000076e0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
    76e0:	b580      	push	{r7, lr}
    76e2:	b082      	sub	sp, #8
    76e4:	af00      	add	r7, sp, #0
    76e6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
    76e8:	4b04      	ldr	r3, [pc, #16]	; (76fc <TzCtrl+0x1c>)
    76ea:	4798      	blx	r3
    76ec:	1e03      	subs	r3, r0, #0
    76ee:	d001      	beq.n	76f4 <TzCtrl+0x14>
		{
			prvReportStackUsage();
    76f0:	4b03      	ldr	r3, [pc, #12]	; (7700 <TzCtrl+0x20>)
    76f2:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
    76f4:	2004      	movs	r0, #4
    76f6:	4b03      	ldr	r3, [pc, #12]	; (7704 <TzCtrl+0x24>)
    76f8:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
    76fa:	e7f5      	b.n	76e8 <TzCtrl+0x8>
    76fc:	00007b41 	.word	0x00007b41
    7700:	0000757d 	.word	0x0000757d
    7704:	0000b3b5 	.word	0x0000b3b5

00007708 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    7708:	b580      	push	{r7, lr}
    770a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    770c:	4b60      	ldr	r3, [pc, #384]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	2209      	movs	r2, #9
    7712:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    7714:	4b5e      	ldr	r3, [pc, #376]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7716:	681b      	ldr	r3, [r3, #0]
    7718:	2264      	movs	r2, #100	; 0x64
    771a:	210a      	movs	r1, #10
    771c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    771e:	4b5c      	ldr	r3, [pc, #368]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7720:	681b      	ldr	r3, [r3, #0]
    7722:	2265      	movs	r2, #101	; 0x65
    7724:	210a      	movs	r1, #10
    7726:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    7728:	4b59      	ldr	r3, [pc, #356]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    772a:	681b      	ldr	r3, [r3, #0]
    772c:	2266      	movs	r2, #102	; 0x66
    772e:	210a      	movs	r1, #10
    7730:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    7732:	4b57      	ldr	r3, [pc, #348]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7734:	681b      	ldr	r3, [r3, #0]
    7736:	2267      	movs	r2, #103	; 0x67
    7738:	210f      	movs	r1, #15
    773a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    773c:	4b54      	ldr	r3, [pc, #336]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    773e:	681b      	ldr	r3, [r3, #0]
    7740:	2268      	movs	r2, #104	; 0x68
    7742:	2105      	movs	r1, #5
    7744:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    7746:	4b52      	ldr	r3, [pc, #328]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7748:	681b      	ldr	r3, [r3, #0]
    774a:	2269      	movs	r2, #105	; 0x69
    774c:	2105      	movs	r1, #5
    774e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    7750:	4b4f      	ldr	r3, [pc, #316]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	226a      	movs	r2, #106	; 0x6a
    7756:	2105      	movs	r1, #5
    7758:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    775a:	4b4d      	ldr	r3, [pc, #308]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    775c:	681b      	ldr	r3, [r3, #0]
    775e:	226b      	movs	r2, #107	; 0x6b
    7760:	2105      	movs	r1, #5
    7762:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    7764:	4b4a      	ldr	r3, [pc, #296]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7766:	681b      	ldr	r3, [r3, #0]
    7768:	226c      	movs	r2, #108	; 0x6c
    776a:	2105      	movs	r1, #5
    776c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    776e:	4b48      	ldr	r3, [pc, #288]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7770:	681b      	ldr	r3, [r3, #0]
    7772:	2270      	movs	r2, #112	; 0x70
    7774:	210f      	movs	r1, #15
    7776:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    7778:	4b45      	ldr	r3, [pc, #276]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    777a:	681b      	ldr	r3, [r3, #0]
    777c:	2271      	movs	r2, #113	; 0x71
    777e:	210f      	movs	r1, #15
    7780:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    7782:	4b43      	ldr	r3, [pc, #268]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7784:	681b      	ldr	r3, [r3, #0]
    7786:	2272      	movs	r2, #114	; 0x72
    7788:	210f      	movs	r1, #15
    778a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    778c:	4b40      	ldr	r3, [pc, #256]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    778e:	681b      	ldr	r3, [r3, #0]
    7790:	2273      	movs	r2, #115	; 0x73
    7792:	210f      	movs	r1, #15
    7794:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    7796:	4b3e      	ldr	r3, [pc, #248]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7798:	681b      	ldr	r3, [r3, #0]
    779a:	2274      	movs	r2, #116	; 0x74
    779c:	210f      	movs	r1, #15
    779e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    77a0:	4b3b      	ldr	r3, [pc, #236]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77a2:	681b      	ldr	r3, [r3, #0]
    77a4:	2275      	movs	r2, #117	; 0x75
    77a6:	210f      	movs	r1, #15
    77a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    77aa:	4b39      	ldr	r3, [pc, #228]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77ac:	681b      	ldr	r3, [r3, #0]
    77ae:	2276      	movs	r2, #118	; 0x76
    77b0:	210f      	movs	r1, #15
    77b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    77b4:	4b36      	ldr	r3, [pc, #216]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77b6:	681b      	ldr	r3, [r3, #0]
    77b8:	2277      	movs	r2, #119	; 0x77
    77ba:	210f      	movs	r1, #15
    77bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    77be:	4b34      	ldr	r3, [pc, #208]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77c0:	681b      	ldr	r3, [r3, #0]
    77c2:	2278      	movs	r2, #120	; 0x78
    77c4:	210f      	movs	r1, #15
    77c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    77c8:	4b31      	ldr	r3, [pc, #196]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77ca:	681b      	ldr	r3, [r3, #0]
    77cc:	227c      	movs	r2, #124	; 0x7c
    77ce:	2110      	movs	r1, #16
    77d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    77d2:	4b2f      	ldr	r3, [pc, #188]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77d4:	681b      	ldr	r3, [r3, #0]
    77d6:	227d      	movs	r2, #125	; 0x7d
    77d8:	2110      	movs	r1, #16
    77da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    77dc:	4b2c      	ldr	r3, [pc, #176]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77de:	681b      	ldr	r3, [r3, #0]
    77e0:	227e      	movs	r2, #126	; 0x7e
    77e2:	2110      	movs	r1, #16
    77e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    77e6:	4b2a      	ldr	r3, [pc, #168]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77e8:	681b      	ldr	r3, [r3, #0]
    77ea:	227f      	movs	r2, #127	; 0x7f
    77ec:	2113      	movs	r1, #19
    77ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    77f0:	4b27      	ldr	r3, [pc, #156]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77f2:	681b      	ldr	r3, [r3, #0]
    77f4:	2280      	movs	r2, #128	; 0x80
    77f6:	2111      	movs	r1, #17
    77f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    77fa:	4b25      	ldr	r3, [pc, #148]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    77fc:	681b      	ldr	r3, [r3, #0]
    77fe:	2281      	movs	r2, #129	; 0x81
    7800:	2110      	movs	r1, #16
    7802:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    7804:	4b22      	ldr	r3, [pc, #136]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	2282      	movs	r2, #130	; 0x82
    780a:	2113      	movs	r1, #19
    780c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    780e:	4b20      	ldr	r3, [pc, #128]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7810:	681b      	ldr	r3, [r3, #0]
    7812:	2283      	movs	r2, #131	; 0x83
    7814:	2113      	movs	r1, #19
    7816:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    7818:	4b1d      	ldr	r3, [pc, #116]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    781a:	681b      	ldr	r3, [r3, #0]
    781c:	2284      	movs	r2, #132	; 0x84
    781e:	2113      	movs	r1, #19
    7820:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    7822:	4b1b      	ldr	r3, [pc, #108]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7824:	681b      	ldr	r3, [r3, #0]
    7826:	2288      	movs	r2, #136	; 0x88
    7828:	2100      	movs	r1, #0
    782a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    782c:	4b18      	ldr	r3, [pc, #96]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    782e:	681b      	ldr	r3, [r3, #0]
    7830:	228a      	movs	r2, #138	; 0x8a
    7832:	21a0      	movs	r1, #160	; 0xa0
    7834:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    7836:	4b16      	ldr	r3, [pc, #88]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7838:	681b      	ldr	r3, [r3, #0]
    783a:	228c      	movs	r2, #140	; 0x8c
    783c:	21a0      	movs	r1, #160	; 0xa0
    783e:	0049      	lsls	r1, r1, #1
    7840:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    7842:	4b13      	ldr	r3, [pc, #76]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7844:	681b      	ldr	r3, [r3, #0]
    7846:	228e      	movs	r2, #142	; 0x8e
    7848:	21f0      	movs	r1, #240	; 0xf0
    784a:	0049      	lsls	r1, r1, #1
    784c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    784e:	4b10      	ldr	r3, [pc, #64]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7850:	681b      	ldr	r3, [r3, #0]
    7852:	2290      	movs	r2, #144	; 0x90
    7854:	490f      	ldr	r1, [pc, #60]	; (7894 <vTraceInitObjectPropertyTable+0x18c>)
    7856:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    7858:	4b0d      	ldr	r3, [pc, #52]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    785a:	681b      	ldr	r3, [r3, #0]
    785c:	2292      	movs	r2, #146	; 0x92
    785e:	490e      	ldr	r1, [pc, #56]	; (7898 <vTraceInitObjectPropertyTable+0x190>)
    7860:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    7862:	4b0b      	ldr	r3, [pc, #44]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7864:	681b      	ldr	r3, [r3, #0]
    7866:	2294      	movs	r2, #148	; 0x94
    7868:	490c      	ldr	r1, [pc, #48]	; (789c <vTraceInitObjectPropertyTable+0x194>)
    786a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    786c:	4b08      	ldr	r3, [pc, #32]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    786e:	681b      	ldr	r3, [r3, #0]
    7870:	2296      	movs	r2, #150	; 0x96
    7872:	490b      	ldr	r1, [pc, #44]	; (78a0 <vTraceInitObjectPropertyTable+0x198>)
    7874:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    7876:	4b06      	ldr	r3, [pc, #24]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7878:	681b      	ldr	r3, [r3, #0]
    787a:	2298      	movs	r2, #152	; 0x98
    787c:	218c      	movs	r1, #140	; 0x8c
    787e:	00c9      	lsls	r1, r1, #3
    7880:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    7882:	4b03      	ldr	r3, [pc, #12]	; (7890 <vTraceInitObjectPropertyTable+0x188>)
    7884:	681b      	ldr	r3, [r3, #0]
    7886:	4a07      	ldr	r2, [pc, #28]	; (78a4 <vTraceInitObjectPropertyTable+0x19c>)
    7888:	661a      	str	r2, [r3, #96]	; 0x60
}
    788a:	46c0      	nop			; (mov r8, r8)
    788c:	46bd      	mov	sp, r7
    788e:	bd80      	pop	{r7, pc}
    7890:	20000e14 	.word	0x20000e14
    7894:	000002fd 	.word	0x000002fd
    7898:	00000352 	.word	0x00000352
    789c:	000003a2 	.word	0x000003a2
    78a0:	00000401 	.word	0x00000401
    78a4:	000004bf 	.word	0x000004bf

000078a8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    78a8:	b580      	push	{r7, lr}
    78aa:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    78ac:	4b2e      	ldr	r3, [pc, #184]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78ae:	2200      	movs	r2, #0
    78b0:	825a      	strh	r2, [r3, #18]
    78b2:	4b2d      	ldr	r3, [pc, #180]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78b4:	8a5a      	ldrh	r2, [r3, #18]
    78b6:	4b2c      	ldr	r3, [pc, #176]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78b8:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    78ba:	4b2b      	ldr	r3, [pc, #172]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78bc:	220a      	movs	r2, #10
    78be:	829a      	strh	r2, [r3, #20]
    78c0:	4b29      	ldr	r3, [pc, #164]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78c2:	8a9a      	ldrh	r2, [r3, #20]
    78c4:	4b28      	ldr	r3, [pc, #160]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78c6:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    78c8:	4b27      	ldr	r3, [pc, #156]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78ca:	2214      	movs	r2, #20
    78cc:	82da      	strh	r2, [r3, #22]
    78ce:	4b26      	ldr	r3, [pc, #152]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78d0:	8ada      	ldrh	r2, [r3, #22]
    78d2:	4b25      	ldr	r3, [pc, #148]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78d4:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    78d6:	4b24      	ldr	r3, [pc, #144]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78d8:	221e      	movs	r2, #30
    78da:	831a      	strh	r2, [r3, #24]
    78dc:	4b22      	ldr	r3, [pc, #136]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78de:	8b1a      	ldrh	r2, [r3, #24]
    78e0:	4b21      	ldr	r3, [pc, #132]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78e2:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    78e4:	4b20      	ldr	r3, [pc, #128]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78e6:	222d      	movs	r2, #45	; 0x2d
    78e8:	835a      	strh	r2, [r3, #26]
    78ea:	4b1f      	ldr	r3, [pc, #124]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78ec:	8b5a      	ldrh	r2, [r3, #26]
    78ee:	4b1e      	ldr	r3, [pc, #120]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78f0:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    78f2:	4b1d      	ldr	r3, [pc, #116]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78f4:	2232      	movs	r2, #50	; 0x32
    78f6:	839a      	strh	r2, [r3, #28]
    78f8:	4b1b      	ldr	r3, [pc, #108]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78fa:	8b9a      	ldrh	r2, [r3, #28]
    78fc:	4b1a      	ldr	r3, [pc, #104]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    78fe:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    7900:	4b19      	ldr	r3, [pc, #100]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7902:	2237      	movs	r2, #55	; 0x37
    7904:	83da      	strh	r2, [r3, #30]
    7906:	4b18      	ldr	r3, [pc, #96]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7908:	8bda      	ldrh	r2, [r3, #30]
    790a:	4b17      	ldr	r3, [pc, #92]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    790c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    790e:	4b16      	ldr	r3, [pc, #88]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7910:	223c      	movs	r2, #60	; 0x3c
    7912:	841a      	strh	r2, [r3, #32]
    7914:	4b14      	ldr	r3, [pc, #80]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7916:	8c1a      	ldrh	r2, [r3, #32]
    7918:	4b13      	ldr	r3, [pc, #76]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    791a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    791c:	4b12      	ldr	r3, [pc, #72]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    791e:	2241      	movs	r2, #65	; 0x41
    7920:	845a      	strh	r2, [r3, #34]	; 0x22
    7922:	4b11      	ldr	r3, [pc, #68]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7924:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    7926:	4b10      	ldr	r3, [pc, #64]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7928:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    792a:	4b0f      	ldr	r3, [pc, #60]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    792c:	2209      	movs	r2, #9
    792e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    7930:	4b0d      	ldr	r3, [pc, #52]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7932:	2213      	movs	r2, #19
    7934:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    7936:	4b0c      	ldr	r3, [pc, #48]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7938:	221d      	movs	r2, #29
    793a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    793c:	4b0a      	ldr	r3, [pc, #40]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    793e:	222c      	movs	r2, #44	; 0x2c
    7940:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    7942:	4b09      	ldr	r3, [pc, #36]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7944:	2231      	movs	r2, #49	; 0x31
    7946:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    7948:	4b07      	ldr	r3, [pc, #28]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    794a:	2236      	movs	r2, #54	; 0x36
    794c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    794e:	4b06      	ldr	r3, [pc, #24]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7950:	223b      	movs	r2, #59	; 0x3b
    7952:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    7954:	4b04      	ldr	r3, [pc, #16]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    7956:	2240      	movs	r2, #64	; 0x40
    7958:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    795a:	4b03      	ldr	r3, [pc, #12]	; (7968 <vTraceInitObjectHandleStack+0xc0>)
    795c:	2245      	movs	r2, #69	; 0x45
    795e:	869a      	strh	r2, [r3, #52]	; 0x34
}
    7960:	46c0      	nop			; (mov r8, r8)
    7962:	46bd      	mov	sp, r7
    7964:	bd80      	pop	{r7, pc}
    7966:	46c0      	nop			; (mov r8, r8)
    7968:	20000d84 	.word	0x20000d84

0000796c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    796c:	b580      	push	{r7, lr}
    796e:	b082      	sub	sp, #8
    7970:	af00      	add	r7, sp, #0
    7972:	0002      	movs	r2, r0
    7974:	1dfb      	adds	r3, r7, #7
    7976:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
    7978:	1dfb      	adds	r3, r7, #7
    797a:	781b      	ldrb	r3, [r3, #0]
    797c:	2b08      	cmp	r3, #8
    797e:	d816      	bhi.n	79ae <pszTraceGetErrorNotEnoughHandles+0x42>
    7980:	009a      	lsls	r2, r3, #2
    7982:	4b0d      	ldr	r3, [pc, #52]	; (79b8 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    7984:	18d3      	adds	r3, r2, r3
    7986:	681b      	ldr	r3, [r3, #0]
    7988:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    798a:	4b0c      	ldr	r3, [pc, #48]	; (79bc <pszTraceGetErrorNotEnoughHandles+0x50>)
    798c:	e010      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    798e:	4b0c      	ldr	r3, [pc, #48]	; (79c0 <pszTraceGetErrorNotEnoughHandles+0x54>)
    7990:	e00e      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    7992:	4b0c      	ldr	r3, [pc, #48]	; (79c4 <pszTraceGetErrorNotEnoughHandles+0x58>)
    7994:	e00c      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    7996:	4b0c      	ldr	r3, [pc, #48]	; (79c8 <pszTraceGetErrorNotEnoughHandles+0x5c>)
    7998:	e00a      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    799a:	4b0c      	ldr	r3, [pc, #48]	; (79cc <pszTraceGetErrorNotEnoughHandles+0x60>)
    799c:	e008      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    799e:	4b0c      	ldr	r3, [pc, #48]	; (79d0 <pszTraceGetErrorNotEnoughHandles+0x64>)
    79a0:	e006      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    79a2:	4b0c      	ldr	r3, [pc, #48]	; (79d4 <pszTraceGetErrorNotEnoughHandles+0x68>)
    79a4:	e004      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    79a6:	4b0c      	ldr	r3, [pc, #48]	; (79d8 <pszTraceGetErrorNotEnoughHandles+0x6c>)
    79a8:	e002      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    79aa:	4b0c      	ldr	r3, [pc, #48]	; (79dc <pszTraceGetErrorNotEnoughHandles+0x70>)
    79ac:	e000      	b.n	79b0 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    79ae:	4b0c      	ldr	r3, [pc, #48]	; (79e0 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
    79b0:	0018      	movs	r0, r3
    79b2:	46bd      	mov	sp, r7
    79b4:	b002      	add	sp, #8
    79b6:	bd80      	pop	{r7, pc}
    79b8:	00027020 	.word	0x00027020
    79bc:	00026d20 	.word	0x00026d20
    79c0:	00026d68 	.word	0x00026d68
    79c4:	00026db0 	.word	0x00026db0
    79c8:	00026e04 	.word	0x00026e04
    79cc:	00026e50 	.word	0x00026e50
    79d0:	00026e9c 	.word	0x00026e9c
    79d4:	00026ee8 	.word	0x00026ee8
    79d8:	00026f3c 	.word	0x00026f3c
    79dc:	00026f94 	.word	0x00026f94
    79e0:	00026ff0 	.word	0x00026ff0

000079e4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
    79e4:	b590      	push	{r4, r7, lr}
    79e6:	b087      	sub	sp, #28
    79e8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
    79ea:	2317      	movs	r3, #23
    79ec:	18fb      	adds	r3, r7, r3
    79ee:	2200      	movs	r2, #0
    79f0:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
    79f2:	4b36      	ldr	r3, [pc, #216]	; (7acc <uiTraceStart+0xe8>)
    79f4:	681b      	ldr	r3, [r3, #0]
    79f6:	2b00      	cmp	r3, #0
    79f8:	d10b      	bne.n	7a12 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    79fa:	4b34      	ldr	r3, [pc, #208]	; (7acc <uiTraceStart+0xe8>)
    79fc:	681b      	ldr	r3, [r3, #0]
    79fe:	2b00      	cmp	r3, #0
    7a00:	d105      	bne.n	7a0e <uiTraceStart+0x2a>
    7a02:	4b33      	ldr	r3, [pc, #204]	; (7ad0 <uiTraceStart+0xec>)
    7a04:	0018      	movs	r0, r3
    7a06:	4b33      	ldr	r3, [pc, #204]	; (7ad4 <uiTraceStart+0xf0>)
    7a08:	4798      	blx	r3
    7a0a:	2300      	movs	r3, #0
    7a0c:	e059      	b.n	7ac2 <uiTraceStart+0xde>
		return 0;
    7a0e:	2300      	movs	r3, #0
    7a10:	e057      	b.n	7ac2 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
    7a12:	4b2e      	ldr	r3, [pc, #184]	; (7acc <uiTraceStart+0xe8>)
    7a14:	681b      	ldr	r3, [r3, #0]
    7a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7a18:	2b01      	cmp	r3, #1
    7a1a:	d101      	bne.n	7a20 <uiTraceStart+0x3c>
		return 1; /* Already running */
    7a1c:	2301      	movs	r3, #1
    7a1e:	e050      	b.n	7ac2 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
    7a20:	4b2d      	ldr	r3, [pc, #180]	; (7ad8 <uiTraceStart+0xf4>)
    7a22:	681b      	ldr	r3, [r3, #0]
    7a24:	2b00      	cmp	r3, #0
    7a26:	d149      	bne.n	7abc <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7a28:	f3ef 8310 	mrs	r3, PRIMASK
    7a2c:	60bb      	str	r3, [r7, #8]
  return(result);
    7a2e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
    7a30:	613b      	str	r3, [r7, #16]
    7a32:	2301      	movs	r3, #1
    7a34:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7a36:	68fb      	ldr	r3, [r7, #12]
    7a38:	f383 8810 	msr	PRIMASK, r3
    7a3c:	4b27      	ldr	r3, [pc, #156]	; (7adc <uiTraceStart+0xf8>)
    7a3e:	681b      	ldr	r3, [r3, #0]
    7a40:	1c5a      	adds	r2, r3, #1
    7a42:	4b26      	ldr	r3, [pc, #152]	; (7adc <uiTraceStart+0xf8>)
    7a44:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    7a46:	4b21      	ldr	r3, [pc, #132]	; (7acc <uiTraceStart+0xe8>)
    7a48:	681b      	ldr	r3, [r3, #0]
    7a4a:	2201      	movs	r2, #1
    7a4c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    7a4e:	4b24      	ldr	r3, [pc, #144]	; (7ae0 <uiTraceStart+0xfc>)
    7a50:	4798      	blx	r3
    7a52:	0003      	movs	r3, r0
    7a54:	0018      	movs	r0, r3
    7a56:	4b23      	ldr	r3, [pc, #140]	; (7ae4 <uiTraceStart+0x100>)
    7a58:	4798      	blx	r3
    7a5a:	0003      	movs	r3, r0
    7a5c:	001a      	movs	r2, r3
    7a5e:	2317      	movs	r3, #23
    7a60:	18fb      	adds	r3, r7, r3
    7a62:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
    7a64:	2317      	movs	r3, #23
    7a66:	18fb      	adds	r3, r7, r3
    7a68:	781b      	ldrb	r3, [r3, #0]
    7a6a:	2b00      	cmp	r3, #0
    7a6c:	d116      	bne.n	7a9c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    7a6e:	2317      	movs	r3, #23
    7a70:	18fc      	adds	r4, r7, r3
    7a72:	2003      	movs	r0, #3
    7a74:	4b1c      	ldr	r3, [pc, #112]	; (7ae8 <uiTraceStart+0x104>)
    7a76:	4798      	blx	r3
    7a78:	0003      	movs	r3, r0
    7a7a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    7a7c:	4a1b      	ldr	r2, [pc, #108]	; (7aec <uiTraceStart+0x108>)
    7a7e:	2317      	movs	r3, #23
    7a80:	18fb      	adds	r3, r7, r3
    7a82:	781b      	ldrb	r3, [r3, #0]
    7a84:	0019      	movs	r1, r3
    7a86:	2003      	movs	r0, #3
    7a88:	4b19      	ldr	r3, [pc, #100]	; (7af0 <uiTraceStart+0x10c>)
    7a8a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    7a8c:	2317      	movs	r3, #23
    7a8e:	18fb      	adds	r3, r7, r3
    7a90:	781b      	ldrb	r3, [r3, #0]
    7a92:	2200      	movs	r2, #0
    7a94:	0019      	movs	r1, r3
    7a96:	2003      	movs	r0, #3
    7a98:	4b16      	ldr	r3, [pc, #88]	; (7af4 <uiTraceStart+0x110>)
    7a9a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    7a9c:	2317      	movs	r3, #23
    7a9e:	18fb      	adds	r3, r7, r3
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	0018      	movs	r0, r3
    7aa4:	4b14      	ldr	r3, [pc, #80]	; (7af8 <uiTraceStart+0x114>)
    7aa6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    7aa8:	4b0c      	ldr	r3, [pc, #48]	; (7adc <uiTraceStart+0xf8>)
    7aaa:	681b      	ldr	r3, [r3, #0]
    7aac:	1e5a      	subs	r2, r3, #1
    7aae:	4b0b      	ldr	r3, [pc, #44]	; (7adc <uiTraceStart+0xf8>)
    7ab0:	601a      	str	r2, [r3, #0]
    7ab2:	693b      	ldr	r3, [r7, #16]
    7ab4:	607b      	str	r3, [r7, #4]
    7ab6:	687b      	ldr	r3, [r7, #4]
    7ab8:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
    7abc:	4b03      	ldr	r3, [pc, #12]	; (7acc <uiTraceStart+0xe8>)
    7abe:	681b      	ldr	r3, [r3, #0]
    7ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    7ac2:	0018      	movs	r0, r3
    7ac4:	46bd      	mov	sp, r7
    7ac6:	b007      	add	sp, #28
    7ac8:	bd90      	pop	{r4, r7, pc}
    7aca:	46c0      	nop			; (mov r8, r8)
    7acc:	20000e14 	.word	0x20000e14
    7ad0:	00027044 	.word	0x00027044
    7ad4:	00008c4d 	.word	0x00008c4d
    7ad8:	20000d74 	.word	0x20000d74
    7adc:	20000d6c 	.word	0x20000d6c
    7ae0:	0000764d 	.word	0x0000764d
    7ae4:	00007391 	.word	0x00007391
    7ae8:	00008931 	.word	0x00008931
    7aec:	00027088 	.word	0x00027088
    7af0:	00008b61 	.word	0x00008b61
    7af4:	000082c5 	.word	0x000082c5
    7af8:	000081ad 	.word	0x000081ad

00007afc <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
    7afc:	b580      	push	{r7, lr}
    7afe:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
    7b00:	4b02      	ldr	r3, [pc, #8]	; (7b0c <vTraceStart+0x10>)
    7b02:	4798      	blx	r3
}
    7b04:	46c0      	nop			; (mov r8, r8)
    7b06:	46bd      	mov	sp, r7
    7b08:	bd80      	pop	{r7, pc}
    7b0a:	46c0      	nop			; (mov r8, r8)
    7b0c:	000079e5 	.word	0x000079e5

00007b10 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
    7b10:	b580      	push	{r7, lr}
    7b12:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    7b14:	4b08      	ldr	r3, [pc, #32]	; (7b38 <vTraceStop+0x28>)
    7b16:	681b      	ldr	r3, [r3, #0]
    7b18:	2b00      	cmp	r3, #0
    7b1a:	d003      	beq.n	7b24 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
    7b1c:	4b06      	ldr	r3, [pc, #24]	; (7b38 <vTraceStop+0x28>)
    7b1e:	681b      	ldr	r3, [r3, #0]
    7b20:	2200      	movs	r2, #0
    7b22:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    7b24:	4b05      	ldr	r3, [pc, #20]	; (7b3c <vTraceStop+0x2c>)
    7b26:	681b      	ldr	r3, [r3, #0]
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d002      	beq.n	7b32 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    7b2c:	4b03      	ldr	r3, [pc, #12]	; (7b3c <vTraceStop+0x2c>)
    7b2e:	681b      	ldr	r3, [r3, #0]
    7b30:	4798      	blx	r3
	}
}
    7b32:	46c0      	nop			; (mov r8, r8)
    7b34:	46bd      	mov	sp, r7
    7b36:	bd80      	pop	{r7, pc}
    7b38:	20000e14 	.word	0x20000e14
    7b3c:	20000d7c 	.word	0x20000d7c

00007b40 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
    7b40:	b580      	push	{r7, lr}
    7b42:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    7b44:	4b05      	ldr	r3, [pc, #20]	; (7b5c <xTraceIsRecordingEnabled+0x1c>)
    7b46:	681b      	ldr	r3, [r3, #0]
    7b48:	2b00      	cmp	r3, #0
    7b4a:	d003      	beq.n	7b54 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
    7b4c:	4b03      	ldr	r3, [pc, #12]	; (7b5c <xTraceIsRecordingEnabled+0x1c>)
    7b4e:	681b      	ldr	r3, [r3, #0]
    7b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b52:	e000      	b.n	7b56 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
    7b54:	2300      	movs	r3, #0
	}
}
    7b56:	0018      	movs	r0, r3
    7b58:	46bd      	mov	sp, r7
    7b5a:	bd80      	pop	{r7, pc}
    7b5c:	20000e14 	.word	0x20000e14

00007b60 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
    7b60:	b590      	push	{r4, r7, lr}
    7b62:	b089      	sub	sp, #36	; 0x24
    7b64:	af00      	add	r7, sp, #0
    7b66:	0002      	movs	r2, r0
    7b68:	1dfb      	adds	r3, r7, #7
    7b6a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    7b6c:	1dfb      	adds	r3, r7, #7
    7b6e:	781b      	ldrb	r3, [r3, #0]
    7b70:	2b00      	cmp	r3, #0
    7b72:	d057      	beq.n	7c24 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    7b74:	4b2e      	ldr	r3, [pc, #184]	; (7c30 <prvTraceStoreTaskReady+0xd0>)
    7b76:	681b      	ldr	r3, [r3, #0]
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d055      	beq.n	7c28 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    7b7c:	1dfb      	adds	r3, r7, #7
    7b7e:	781b      	ldrb	r3, [r3, #0]
    7b80:	2b0f      	cmp	r3, #15
    7b82:	d904      	bls.n	7b8e <prvTraceStoreTaskReady+0x2e>
    7b84:	4b2b      	ldr	r3, [pc, #172]	; (7c34 <prvTraceStoreTaskReady+0xd4>)
    7b86:	0018      	movs	r0, r3
    7b88:	4b2b      	ldr	r3, [pc, #172]	; (7c38 <prvTraceStoreTaskReady+0xd8>)
    7b8a:	4798      	blx	r3
    7b8c:	e04d      	b.n	7c2a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
    7b8e:	4b2b      	ldr	r3, [pc, #172]	; (7c3c <prvTraceStoreTaskReady+0xdc>)
    7b90:	681b      	ldr	r3, [r3, #0]
    7b92:	2b00      	cmp	r3, #0
    7b94:	d004      	beq.n	7ba0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    7b96:	4b2a      	ldr	r3, [pc, #168]	; (7c40 <prvTraceStoreTaskReady+0xe0>)
    7b98:	0018      	movs	r0, r3
    7b9a:	4b27      	ldr	r3, [pc, #156]	; (7c38 <prvTraceStoreTaskReady+0xd8>)
    7b9c:	4798      	blx	r3
		return;
    7b9e:	e044      	b.n	7c2a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7ba0:	f3ef 8310 	mrs	r3, PRIMASK
    7ba4:	60fb      	str	r3, [r7, #12]
  return(result);
    7ba6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
    7ba8:	61fb      	str	r3, [r7, #28]
    7baa:	2301      	movs	r3, #1
    7bac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7bae:	693b      	ldr	r3, [r7, #16]
    7bb0:	f383 8810 	msr	PRIMASK, r3
    7bb4:	4b21      	ldr	r3, [pc, #132]	; (7c3c <prvTraceStoreTaskReady+0xdc>)
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	1c5a      	adds	r2, r3, #1
    7bba:	4b20      	ldr	r3, [pc, #128]	; (7c3c <prvTraceStoreTaskReady+0xdc>)
    7bbc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    7bbe:	4b21      	ldr	r3, [pc, #132]	; (7c44 <prvTraceStoreTaskReady+0xe4>)
    7bc0:	681b      	ldr	r3, [r3, #0]
    7bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7bc4:	2b00      	cmp	r3, #0
    7bc6:	d022      	beq.n	7c0e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    7bc8:	231a      	movs	r3, #26
    7bca:	18fc      	adds	r4, r7, r3
    7bcc:	4b1e      	ldr	r3, [pc, #120]	; (7c48 <prvTraceStoreTaskReady+0xe8>)
    7bce:	0018      	movs	r0, r3
    7bd0:	4b1e      	ldr	r3, [pc, #120]	; (7c4c <prvTraceStoreTaskReady+0xec>)
    7bd2:	4798      	blx	r3
    7bd4:	0003      	movs	r3, r0
    7bd6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
    7bd8:	2319      	movs	r3, #25
    7bda:	18fb      	adds	r3, r7, r3
    7bdc:	1dfa      	adds	r2, r7, #7
    7bde:	7812      	ldrb	r2, [r2, #0]
    7be0:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    7be2:	4b1b      	ldr	r3, [pc, #108]	; (7c50 <prvTraceStoreTaskReady+0xf0>)
    7be4:	4798      	blx	r3
    7be6:	0003      	movs	r3, r0
    7be8:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
    7bea:	697b      	ldr	r3, [r7, #20]
    7bec:	2b00      	cmp	r3, #0
    7bee:	d00e      	beq.n	7c0e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
    7bf0:	697b      	ldr	r3, [r7, #20]
    7bf2:	2202      	movs	r2, #2
    7bf4:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
    7bf6:	697b      	ldr	r3, [r7, #20]
    7bf8:	221a      	movs	r2, #26
    7bfa:	18ba      	adds	r2, r7, r2
    7bfc:	8812      	ldrh	r2, [r2, #0]
    7bfe:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
    7c00:	697b      	ldr	r3, [r7, #20]
    7c02:	2219      	movs	r2, #25
    7c04:	18ba      	adds	r2, r7, r2
    7c06:	7812      	ldrb	r2, [r2, #0]
    7c08:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    7c0a:	4b12      	ldr	r3, [pc, #72]	; (7c54 <prvTraceStoreTaskReady+0xf4>)
    7c0c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    7c0e:	4b0b      	ldr	r3, [pc, #44]	; (7c3c <prvTraceStoreTaskReady+0xdc>)
    7c10:	681b      	ldr	r3, [r3, #0]
    7c12:	1e5a      	subs	r2, r3, #1
    7c14:	4b09      	ldr	r3, [pc, #36]	; (7c3c <prvTraceStoreTaskReady+0xdc>)
    7c16:	601a      	str	r2, [r3, #0]
    7c18:	69fb      	ldr	r3, [r7, #28]
    7c1a:	60bb      	str	r3, [r7, #8]
    7c1c:	68bb      	ldr	r3, [r7, #8]
    7c1e:	f383 8810 	msr	PRIMASK, r3
    7c22:	e002      	b.n	7c2a <prvTraceStoreTaskReady+0xca>
		return;
    7c24:	46c0      	nop			; (mov r8, r8)
    7c26:	e000      	b.n	7c2a <prvTraceStoreTaskReady+0xca>
		return;
    7c28:	46c0      	nop			; (mov r8, r8)
}
    7c2a:	46bd      	mov	sp, r7
    7c2c:	b009      	add	sp, #36	; 0x24
    7c2e:	bd90      	pop	{r4, r7, pc}
    7c30:	20000100 	.word	0x20000100
    7c34:	000273f0 	.word	0x000273f0
    7c38:	00008c4d 	.word	0x00008c4d
    7c3c:	20000d6c 	.word	0x20000d6c
    7c40:	00027430 	.word	0x00027430
    7c44:	20000e14 	.word	0x20000e14
    7c48:	0000ffff 	.word	0x0000ffff
    7c4c:	00008e61 	.word	0x00008e61
    7c50:	00008805 	.word	0x00008805
    7c54:	00008e09 	.word	0x00008e09

00007c58 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
    7c58:	b580      	push	{r7, lr}
    7c5a:	b08e      	sub	sp, #56	; 0x38
    7c5c:	af00      	add	r7, sp, #0
    7c5e:	60f8      	str	r0, [r7, #12]
    7c60:	60b9      	str	r1, [r7, #8]
    7c62:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
    7c64:	4b48      	ldr	r3, [pc, #288]	; (7d88 <vTraceStoreMemMangEvent+0x130>)
    7c66:	681b      	ldr	r3, [r3, #0]
    7c68:	2b00      	cmp	r3, #0
    7c6a:	d100      	bne.n	7c6e <vTraceStoreMemMangEvent+0x16>
    7c6c:	e088      	b.n	7d80 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	2b00      	cmp	r3, #0
    7c72:	da03      	bge.n	7c7c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
    7c74:	687b      	ldr	r3, [r7, #4]
    7c76:	425b      	negs	r3, r3
    7c78:	637b      	str	r3, [r7, #52]	; 0x34
    7c7a:	e001      	b.n	7c80 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
    7c7c:	687b      	ldr	r3, [r7, #4]
    7c7e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7c80:	f3ef 8310 	mrs	r3, PRIMASK
    7c84:	61bb      	str	r3, [r7, #24]
  return(result);
    7c86:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
    7c88:	633b      	str	r3, [r7, #48]	; 0x30
    7c8a:	2301      	movs	r3, #1
    7c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7c8e:	69fb      	ldr	r3, [r7, #28]
    7c90:	f383 8810 	msr	PRIMASK, r3
    7c94:	4b3d      	ldr	r3, [pc, #244]	; (7d8c <vTraceStoreMemMangEvent+0x134>)
    7c96:	681b      	ldr	r3, [r3, #0]
    7c98:	1c5a      	adds	r2, r3, #1
    7c9a:	4b3c      	ldr	r3, [pc, #240]	; (7d8c <vTraceStoreMemMangEvent+0x134>)
    7c9c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
    7c9e:	68bb      	ldr	r3, [r7, #8]
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d005      	beq.n	7cb0 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
    7ca4:	4b3a      	ldr	r3, [pc, #232]	; (7d90 <vTraceStoreMemMangEvent+0x138>)
    7ca6:	681a      	ldr	r2, [r3, #0]
    7ca8:	687b      	ldr	r3, [r7, #4]
    7caa:	18d2      	adds	r2, r2, r3
    7cac:	4b38      	ldr	r3, [pc, #224]	; (7d90 <vTraceStoreMemMangEvent+0x138>)
    7cae:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
    7cb0:	4b35      	ldr	r3, [pc, #212]	; (7d88 <vTraceStoreMemMangEvent+0x130>)
    7cb2:	681b      	ldr	r3, [r3, #0]
    7cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d057      	beq.n	7d6a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    7cba:	20ff      	movs	r0, #255	; 0xff
    7cbc:	4b35      	ldr	r3, [pc, #212]	; (7d94 <vTraceStoreMemMangEvent+0x13c>)
    7cbe:	4798      	blx	r3
    7cc0:	0003      	movs	r3, r0
    7cc2:	001a      	movs	r2, r3
    7cc4:	232f      	movs	r3, #47	; 0x2f
    7cc6:	18fb      	adds	r3, r7, r3
    7cc8:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    7cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7ccc:	4a32      	ldr	r2, [pc, #200]	; (7d98 <vTraceStoreMemMangEvent+0x140>)
    7cce:	0019      	movs	r1, r3
    7cd0:	0010      	movs	r0, r2
    7cd2:	4b32      	ldr	r3, [pc, #200]	; (7d9c <vTraceStoreMemMangEvent+0x144>)
    7cd4:	4798      	blx	r3
    7cd6:	0002      	movs	r2, r0
    7cd8:	232c      	movs	r3, #44	; 0x2c
    7cda:	18fb      	adds	r3, r7, r3
    7cdc:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    7cde:	4b30      	ldr	r3, [pc, #192]	; (7da0 <vTraceStoreMemMangEvent+0x148>)
    7ce0:	4798      	blx	r3
    7ce2:	0003      	movs	r3, r0
    7ce4:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
    7ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d03e      	beq.n	7d6a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
    7cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7cee:	222f      	movs	r2, #47	; 0x2f
    7cf0:	18ba      	adds	r2, r7, r2
    7cf2:	7812      	ldrb	r2, [r2, #0]
    7cf4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    7cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7cf8:	2200      	movs	r2, #0
    7cfa:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
    7cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7cfe:	222c      	movs	r2, #44	; 0x2c
    7d00:	18ba      	adds	r2, r7, r2
    7d02:	8812      	ldrh	r2, [r2, #0]
    7d04:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    7d06:	4b27      	ldr	r3, [pc, #156]	; (7da4 <vTraceStoreMemMangEvent+0x14c>)
    7d08:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    7d0a:	68bb      	ldr	r3, [r7, #8]
    7d0c:	4a22      	ldr	r2, [pc, #136]	; (7d98 <vTraceStoreMemMangEvent+0x140>)
    7d0e:	0019      	movs	r1, r3
    7d10:	0010      	movs	r0, r2
    7d12:	4b22      	ldr	r3, [pc, #136]	; (7d9c <vTraceStoreMemMangEvent+0x144>)
    7d14:	4798      	blx	r3
    7d16:	0002      	movs	r2, r0
    7d18:	2326      	movs	r3, #38	; 0x26
    7d1a:	18fb      	adds	r3, r7, r3
    7d1c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
    7d1e:	2325      	movs	r3, #37	; 0x25
    7d20:	18fb      	adds	r3, r7, r3
    7d22:	2200      	movs	r2, #0
    7d24:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    7d26:	4b1e      	ldr	r3, [pc, #120]	; (7da0 <vTraceStoreMemMangEvent+0x148>)
    7d28:	4798      	blx	r3
    7d2a:	0003      	movs	r3, r0
    7d2c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
    7d2e:	6a3b      	ldr	r3, [r7, #32]
    7d30:	2b00      	cmp	r3, #0
    7d32:	d01a      	beq.n	7d6a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
    7d34:	6a3b      	ldr	r3, [r7, #32]
    7d36:	2226      	movs	r2, #38	; 0x26
    7d38:	18ba      	adds	r2, r7, r2
    7d3a:	8812      	ldrh	r2, [r2, #0]
    7d3c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
    7d3e:	6a3b      	ldr	r3, [r7, #32]
    7d40:	2225      	movs	r2, #37	; 0x25
    7d42:	18ba      	adds	r2, r7, r2
    7d44:	7812      	ldrb	r2, [r2, #0]
    7d46:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    7d48:	68fb      	ldr	r3, [r7, #12]
    7d4a:	b2db      	uxtb	r3, r3
    7d4c:	3301      	adds	r3, #1
    7d4e:	b2da      	uxtb	r2, r3
    7d50:	6a3b      	ldr	r3, [r7, #32]
    7d52:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
    7d54:	68fb      	ldr	r3, [r7, #12]
    7d56:	b2da      	uxtb	r2, r3
    7d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d5a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
    7d5c:	4b11      	ldr	r3, [pc, #68]	; (7da4 <vTraceStoreMemMangEvent+0x14c>)
    7d5e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    7d60:	4b09      	ldr	r3, [pc, #36]	; (7d88 <vTraceStoreMemMangEvent+0x130>)
    7d62:	681b      	ldr	r3, [r3, #0]
    7d64:	4a0a      	ldr	r2, [pc, #40]	; (7d90 <vTraceStoreMemMangEvent+0x138>)
    7d66:	6812      	ldr	r2, [r2, #0]
    7d68:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
    7d6a:	4b08      	ldr	r3, [pc, #32]	; (7d8c <vTraceStoreMemMangEvent+0x134>)
    7d6c:	681b      	ldr	r3, [r3, #0]
    7d6e:	1e5a      	subs	r2, r3, #1
    7d70:	4b06      	ldr	r3, [pc, #24]	; (7d8c <vTraceStoreMemMangEvent+0x134>)
    7d72:	601a      	str	r2, [r3, #0]
    7d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d76:	617b      	str	r3, [r7, #20]
    7d78:	697b      	ldr	r3, [r7, #20]
    7d7a:	f383 8810 	msr	PRIMASK, r3
    7d7e:	e000      	b.n	7d82 <vTraceStoreMemMangEvent+0x12a>
		return;
    7d80:	46c0      	nop			; (mov r8, r8)
}
    7d82:	46bd      	mov	sp, r7
    7d84:	b00e      	add	sp, #56	; 0x38
    7d86:	bd80      	pop	{r7, pc}
    7d88:	20000e14 	.word	0x20000e14
    7d8c:	20000d6c 	.word	0x20000d6c
    7d90:	20000d80 	.word	0x20000d80
    7d94:	00008e61 	.word	0x00008e61
    7d98:	0000ffff 	.word	0x0000ffff
    7d9c:	00008025 	.word	0x00008025
    7da0:	00008805 	.word	0x00008805
    7da4:	00008e09 	.word	0x00008e09

00007da8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    7da8:	b590      	push	{r4, r7, lr}
    7daa:	b08b      	sub	sp, #44	; 0x2c
    7dac:	af00      	add	r7, sp, #0
    7dae:	60f8      	str	r0, [r7, #12]
    7db0:	607a      	str	r2, [r7, #4]
    7db2:	230b      	movs	r3, #11
    7db4:	18fb      	adds	r3, r7, r3
    7db6:	1c0a      	adds	r2, r1, #0
    7db8:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    7dba:	68fb      	ldr	r3, [r7, #12]
    7dbc:	2bfe      	cmp	r3, #254	; 0xfe
    7dbe:	d904      	bls.n	7dca <prvTraceStoreKernelCall+0x22>
    7dc0:	4b39      	ldr	r3, [pc, #228]	; (7ea8 <prvTraceStoreKernelCall+0x100>)
    7dc2:	0018      	movs	r0, r3
    7dc4:	4b39      	ldr	r3, [pc, #228]	; (7eac <prvTraceStoreKernelCall+0x104>)
    7dc6:	4798      	blx	r3
    7dc8:	e06b      	b.n	7ea2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    7dca:	230b      	movs	r3, #11
    7dcc:	18fb      	adds	r3, r7, r3
    7dce:	781b      	ldrb	r3, [r3, #0]
    7dd0:	2b08      	cmp	r3, #8
    7dd2:	d904      	bls.n	7dde <prvTraceStoreKernelCall+0x36>
    7dd4:	4b36      	ldr	r3, [pc, #216]	; (7eb0 <prvTraceStoreKernelCall+0x108>)
    7dd6:	0018      	movs	r0, r3
    7dd8:	4b34      	ldr	r3, [pc, #208]	; (7eac <prvTraceStoreKernelCall+0x104>)
    7dda:	4798      	blx	r3
    7ddc:	e061      	b.n	7ea2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    7dde:	4b35      	ldr	r3, [pc, #212]	; (7eb4 <prvTraceStoreKernelCall+0x10c>)
    7de0:	681a      	ldr	r2, [r3, #0]
    7de2:	230b      	movs	r3, #11
    7de4:	18fb      	adds	r3, r7, r3
    7de6:	781b      	ldrb	r3, [r3, #0]
    7de8:	2164      	movs	r1, #100	; 0x64
    7dea:	18d3      	adds	r3, r2, r3
    7dec:	185b      	adds	r3, r3, r1
    7dee:	781b      	ldrb	r3, [r3, #0]
    7df0:	001a      	movs	r2, r3
    7df2:	687b      	ldr	r3, [r7, #4]
    7df4:	429a      	cmp	r2, r3
    7df6:	d204      	bcs.n	7e02 <prvTraceStoreKernelCall+0x5a>
    7df8:	4b2f      	ldr	r3, [pc, #188]	; (7eb8 <prvTraceStoreKernelCall+0x110>)
    7dfa:	0018      	movs	r0, r3
    7dfc:	4b2b      	ldr	r3, [pc, #172]	; (7eac <prvTraceStoreKernelCall+0x104>)
    7dfe:	4798      	blx	r3
    7e00:	e04f      	b.n	7ea2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
    7e02:	4b2e      	ldr	r3, [pc, #184]	; (7ebc <prvTraceStoreKernelCall+0x114>)
    7e04:	681b      	ldr	r3, [r3, #0]
    7e06:	2b00      	cmp	r3, #0
    7e08:	d004      	beq.n	7e14 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    7e0a:	4b2d      	ldr	r3, [pc, #180]	; (7ec0 <prvTraceStoreKernelCall+0x118>)
    7e0c:	0018      	movs	r0, r3
    7e0e:	4b27      	ldr	r3, [pc, #156]	; (7eac <prvTraceStoreKernelCall+0x104>)
    7e10:	4798      	blx	r3
		return;
    7e12:	e046      	b.n	7ea2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
    7e14:	4b2b      	ldr	r3, [pc, #172]	; (7ec4 <prvTraceStoreKernelCall+0x11c>)
    7e16:	781b      	ldrb	r3, [r3, #0]
    7e18:	2b00      	cmp	r3, #0
    7e1a:	d041      	beq.n	7ea0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7e1c:	f3ef 8310 	mrs	r3, PRIMASK
    7e20:	617b      	str	r3, [r7, #20]
  return(result);
    7e22:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    7e24:	627b      	str	r3, [r7, #36]	; 0x24
    7e26:	2301      	movs	r3, #1
    7e28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7e2a:	69bb      	ldr	r3, [r7, #24]
    7e2c:	f383 8810 	msr	PRIMASK, r3
    7e30:	4b22      	ldr	r3, [pc, #136]	; (7ebc <prvTraceStoreKernelCall+0x114>)
    7e32:	681b      	ldr	r3, [r3, #0]
    7e34:	1c5a      	adds	r2, r3, #1
    7e36:	4b21      	ldr	r3, [pc, #132]	; (7ebc <prvTraceStoreKernelCall+0x114>)
    7e38:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    7e3a:	4b1e      	ldr	r3, [pc, #120]	; (7eb4 <prvTraceStoreKernelCall+0x10c>)
    7e3c:	681b      	ldr	r3, [r3, #0]
    7e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7e40:	2b00      	cmp	r3, #0
    7e42:	d022      	beq.n	7e8a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    7e44:	2322      	movs	r3, #34	; 0x22
    7e46:	18fc      	adds	r4, r7, r3
    7e48:	4b1f      	ldr	r3, [pc, #124]	; (7ec8 <prvTraceStoreKernelCall+0x120>)
    7e4a:	0018      	movs	r0, r3
    7e4c:	4b1f      	ldr	r3, [pc, #124]	; (7ecc <prvTraceStoreKernelCall+0x124>)
    7e4e:	4798      	blx	r3
    7e50:	0003      	movs	r3, r0
    7e52:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    7e54:	2321      	movs	r3, #33	; 0x21
    7e56:	18fb      	adds	r3, r7, r3
    7e58:	687a      	ldr	r2, [r7, #4]
    7e5a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    7e5c:	4b1c      	ldr	r3, [pc, #112]	; (7ed0 <prvTraceStoreKernelCall+0x128>)
    7e5e:	4798      	blx	r3
    7e60:	0003      	movs	r3, r0
    7e62:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    7e64:	69fb      	ldr	r3, [r7, #28]
    7e66:	2b00      	cmp	r3, #0
    7e68:	d00f      	beq.n	7e8a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
    7e6a:	69fb      	ldr	r3, [r7, #28]
    7e6c:	2222      	movs	r2, #34	; 0x22
    7e6e:	18ba      	adds	r2, r7, r2
    7e70:	8812      	ldrh	r2, [r2, #0]
    7e72:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
    7e74:	68fb      	ldr	r3, [r7, #12]
    7e76:	b2da      	uxtb	r2, r3
    7e78:	69fb      	ldr	r3, [r7, #28]
    7e7a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    7e7c:	69fb      	ldr	r3, [r7, #28]
    7e7e:	2221      	movs	r2, #33	; 0x21
    7e80:	18ba      	adds	r2, r7, r2
    7e82:	7812      	ldrb	r2, [r2, #0]
    7e84:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    7e86:	4b13      	ldr	r3, [pc, #76]	; (7ed4 <prvTraceStoreKernelCall+0x12c>)
    7e88:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    7e8a:	4b0c      	ldr	r3, [pc, #48]	; (7ebc <prvTraceStoreKernelCall+0x114>)
    7e8c:	681b      	ldr	r3, [r3, #0]
    7e8e:	1e5a      	subs	r2, r3, #1
    7e90:	4b0a      	ldr	r3, [pc, #40]	; (7ebc <prvTraceStoreKernelCall+0x114>)
    7e92:	601a      	str	r2, [r3, #0]
    7e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7e96:	613b      	str	r3, [r7, #16]
    7e98:	693b      	ldr	r3, [r7, #16]
    7e9a:	f383 8810 	msr	PRIMASK, r3
    7e9e:	e000      	b.n	7ea2 <prvTraceStoreKernelCall+0xfa>
		return;
    7ea0:	46c0      	nop			; (mov r8, r8)
}
    7ea2:	46bd      	mov	sp, r7
    7ea4:	b00b      	add	sp, #44	; 0x2c
    7ea6:	bd90      	pop	{r4, r7, pc}
    7ea8:	000274a0 	.word	0x000274a0
    7eac:	00008c4d 	.word	0x00008c4d
    7eb0:	000274d8 	.word	0x000274d8
    7eb4:	20000e14 	.word	0x20000e14
    7eb8:	00027520 	.word	0x00027520
    7ebc:	20000d6c 	.word	0x20000d6c
    7ec0:	00027568 	.word	0x00027568
    7ec4:	20000d78 	.word	0x20000d78
    7ec8:	0000ffff 	.word	0x0000ffff
    7ecc:	00008e61 	.word	0x00008e61
    7ed0:	00008805 	.word	0x00008805
    7ed4:	00008e09 	.word	0x00008e09

00007ed8 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    7ed8:	b580      	push	{r7, lr}
    7eda:	b08a      	sub	sp, #40	; 0x28
    7edc:	af00      	add	r7, sp, #0
    7ede:	60f8      	str	r0, [r7, #12]
    7ee0:	607a      	str	r2, [r7, #4]
    7ee2:	603b      	str	r3, [r7, #0]
    7ee4:	230b      	movs	r3, #11
    7ee6:	18fb      	adds	r3, r7, r3
    7ee8:	1c0a      	adds	r2, r1, #0
    7eea:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    7eec:	68fb      	ldr	r3, [r7, #12]
    7eee:	2bfe      	cmp	r3, #254	; 0xfe
    7ef0:	d904      	bls.n	7efc <prvTraceStoreKernelCallWithParam+0x24>
    7ef2:	4b40      	ldr	r3, [pc, #256]	; (7ff4 <prvTraceStoreKernelCallWithParam+0x11c>)
    7ef4:	0018      	movs	r0, r3
    7ef6:	4b40      	ldr	r3, [pc, #256]	; (7ff8 <prvTraceStoreKernelCallWithParam+0x120>)
    7ef8:	4798      	blx	r3
    7efa:	e077      	b.n	7fec <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    7efc:	230b      	movs	r3, #11
    7efe:	18fb      	adds	r3, r7, r3
    7f00:	781b      	ldrb	r3, [r3, #0]
    7f02:	2b08      	cmp	r3, #8
    7f04:	d904      	bls.n	7f10 <prvTraceStoreKernelCallWithParam+0x38>
    7f06:	4b3d      	ldr	r3, [pc, #244]	; (7ffc <prvTraceStoreKernelCallWithParam+0x124>)
    7f08:	0018      	movs	r0, r3
    7f0a:	4b3b      	ldr	r3, [pc, #236]	; (7ff8 <prvTraceStoreKernelCallWithParam+0x120>)
    7f0c:	4798      	blx	r3
    7f0e:	e06d      	b.n	7fec <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    7f10:	4b3b      	ldr	r3, [pc, #236]	; (8000 <prvTraceStoreKernelCallWithParam+0x128>)
    7f12:	681a      	ldr	r2, [r3, #0]
    7f14:	230b      	movs	r3, #11
    7f16:	18fb      	adds	r3, r7, r3
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	2164      	movs	r1, #100	; 0x64
    7f1c:	18d3      	adds	r3, r2, r3
    7f1e:	185b      	adds	r3, r3, r1
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	001a      	movs	r2, r3
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	429a      	cmp	r2, r3
    7f28:	d204      	bcs.n	7f34 <prvTraceStoreKernelCallWithParam+0x5c>
    7f2a:	4b36      	ldr	r3, [pc, #216]	; (8004 <prvTraceStoreKernelCallWithParam+0x12c>)
    7f2c:	0018      	movs	r0, r3
    7f2e:	4b32      	ldr	r3, [pc, #200]	; (7ff8 <prvTraceStoreKernelCallWithParam+0x120>)
    7f30:	4798      	blx	r3
    7f32:	e05b      	b.n	7fec <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
    7f34:	4b34      	ldr	r3, [pc, #208]	; (8008 <prvTraceStoreKernelCallWithParam+0x130>)
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	2b00      	cmp	r3, #0
    7f3a:	d004      	beq.n	7f46 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    7f3c:	4b33      	ldr	r3, [pc, #204]	; (800c <prvTraceStoreKernelCallWithParam+0x134>)
    7f3e:	0018      	movs	r0, r3
    7f40:	4b2d      	ldr	r3, [pc, #180]	; (7ff8 <prvTraceStoreKernelCallWithParam+0x120>)
    7f42:	4798      	blx	r3
		return;
    7f44:	e052      	b.n	7fec <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7f46:	f3ef 8310 	mrs	r3, PRIMASK
    7f4a:	617b      	str	r3, [r7, #20]
  return(result);
    7f4c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
    7f4e:	627b      	str	r3, [r7, #36]	; 0x24
    7f50:	2301      	movs	r3, #1
    7f52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7f54:	69bb      	ldr	r3, [r7, #24]
    7f56:	f383 8810 	msr	PRIMASK, r3
    7f5a:	4b2b      	ldr	r3, [pc, #172]	; (8008 <prvTraceStoreKernelCallWithParam+0x130>)
    7f5c:	681b      	ldr	r3, [r3, #0]
    7f5e:	1c5a      	adds	r2, r3, #1
    7f60:	4b29      	ldr	r3, [pc, #164]	; (8008 <prvTraceStoreKernelCallWithParam+0x130>)
    7f62:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    7f64:	4b26      	ldr	r3, [pc, #152]	; (8000 <prvTraceStoreKernelCallWithParam+0x128>)
    7f66:	681b      	ldr	r3, [r3, #0]
    7f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7f6a:	2b00      	cmp	r3, #0
    7f6c:	d034      	beq.n	7fd8 <prvTraceStoreKernelCallWithParam+0x100>
    7f6e:	4b28      	ldr	r3, [pc, #160]	; (8010 <prvTraceStoreKernelCallWithParam+0x138>)
    7f70:	781b      	ldrb	r3, [r3, #0]
    7f72:	2b00      	cmp	r3, #0
    7f74:	d030      	beq.n	7fd8 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    7f76:	20ff      	movs	r0, #255	; 0xff
    7f78:	4b26      	ldr	r3, [pc, #152]	; (8014 <prvTraceStoreKernelCallWithParam+0x13c>)
    7f7a:	4798      	blx	r3
    7f7c:	0003      	movs	r3, r0
    7f7e:	001a      	movs	r2, r3
    7f80:	2323      	movs	r3, #35	; 0x23
    7f82:	18fb      	adds	r3, r7, r3
    7f84:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    7f86:	683b      	ldr	r3, [r7, #0]
    7f88:	0019      	movs	r1, r3
    7f8a:	20ff      	movs	r0, #255	; 0xff
    7f8c:	4b22      	ldr	r3, [pc, #136]	; (8018 <prvTraceStoreKernelCallWithParam+0x140>)
    7f8e:	4798      	blx	r3
    7f90:	0002      	movs	r2, r0
    7f92:	2322      	movs	r3, #34	; 0x22
    7f94:	18fb      	adds	r3, r7, r3
    7f96:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    7f98:	2321      	movs	r3, #33	; 0x21
    7f9a:	18fb      	adds	r3, r7, r3
    7f9c:	687a      	ldr	r2, [r7, #4]
    7f9e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    7fa0:	4b1e      	ldr	r3, [pc, #120]	; (801c <prvTraceStoreKernelCallWithParam+0x144>)
    7fa2:	4798      	blx	r3
    7fa4:	0003      	movs	r3, r0
    7fa6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    7fa8:	69fb      	ldr	r3, [r7, #28]
    7faa:	2b00      	cmp	r3, #0
    7fac:	d014      	beq.n	7fd8 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
    7fae:	69fb      	ldr	r3, [r7, #28]
    7fb0:	2223      	movs	r2, #35	; 0x23
    7fb2:	18ba      	adds	r2, r7, r2
    7fb4:	7812      	ldrb	r2, [r2, #0]
    7fb6:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
    7fb8:	68fb      	ldr	r3, [r7, #12]
    7fba:	b2da      	uxtb	r2, r3
    7fbc:	69fb      	ldr	r3, [r7, #28]
    7fbe:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    7fc0:	69fb      	ldr	r3, [r7, #28]
    7fc2:	2221      	movs	r2, #33	; 0x21
    7fc4:	18ba      	adds	r2, r7, r2
    7fc6:	7812      	ldrb	r2, [r2, #0]
    7fc8:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
    7fca:	69fb      	ldr	r3, [r7, #28]
    7fcc:	2222      	movs	r2, #34	; 0x22
    7fce:	18ba      	adds	r2, r7, r2
    7fd0:	7812      	ldrb	r2, [r2, #0]
    7fd2:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
    7fd4:	4b12      	ldr	r3, [pc, #72]	; (8020 <prvTraceStoreKernelCallWithParam+0x148>)
    7fd6:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    7fd8:	4b0b      	ldr	r3, [pc, #44]	; (8008 <prvTraceStoreKernelCallWithParam+0x130>)
    7fda:	681b      	ldr	r3, [r3, #0]
    7fdc:	1e5a      	subs	r2, r3, #1
    7fde:	4b0a      	ldr	r3, [pc, #40]	; (8008 <prvTraceStoreKernelCallWithParam+0x130>)
    7fe0:	601a      	str	r2, [r3, #0]
    7fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fe4:	613b      	str	r3, [r7, #16]
    7fe6:	693b      	ldr	r3, [r7, #16]
    7fe8:	f383 8810 	msr	PRIMASK, r3
}
    7fec:	46bd      	mov	sp, r7
    7fee:	b00a      	add	sp, #40	; 0x28
    7ff0:	bd80      	pop	{r7, pc}
    7ff2:	46c0      	nop			; (mov r8, r8)
    7ff4:	000275a0 	.word	0x000275a0
    7ff8:	00008c4d 	.word	0x00008c4d
    7ffc:	000275e0 	.word	0x000275e0
    8000:	20000e14 	.word	0x20000e14
    8004:	00027630 	.word	0x00027630
    8008:	20000d6c 	.word	0x20000d6c
    800c:	00027680 	.word	0x00027680
    8010:	20000d78 	.word	0x20000d78
    8014:	00008e61 	.word	0x00008e61
    8018:	00008025 	.word	0x00008025
    801c:	00008805 	.word	0x00008805
    8020:	00008e09 	.word	0x00008e09

00008024 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
    8024:	b580      	push	{r7, lr}
    8026:	b084      	sub	sp, #16
    8028:	af00      	add	r7, sp, #0
    802a:	6078      	str	r0, [r7, #4]
    802c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    802e:	687b      	ldr	r3, [r7, #4]
    8030:	2bff      	cmp	r3, #255	; 0xff
    8032:	d009      	beq.n	8048 <prvTraceGetParam+0x24>
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	4a19      	ldr	r2, [pc, #100]	; (809c <prvTraceGetParam+0x78>)
    8038:	4293      	cmp	r3, r2
    803a:	d005      	beq.n	8048 <prvTraceGetParam+0x24>
    803c:	4b18      	ldr	r3, [pc, #96]	; (80a0 <prvTraceGetParam+0x7c>)
    803e:	0018      	movs	r0, r3
    8040:	4b18      	ldr	r3, [pc, #96]	; (80a4 <prvTraceGetParam+0x80>)
    8042:	4798      	blx	r3
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	e024      	b.n	8092 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    8048:	683a      	ldr	r2, [r7, #0]
    804a:	687b      	ldr	r3, [r7, #4]
    804c:	429a      	cmp	r2, r3
    804e:	d801      	bhi.n	8054 <prvTraceGetParam+0x30>
	{
		return param;
    8050:	683b      	ldr	r3, [r7, #0]
    8052:	e01e      	b.n	8092 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    8054:	4b14      	ldr	r3, [pc, #80]	; (80a8 <prvTraceGetParam+0x84>)
    8056:	4798      	blx	r3
    8058:	0003      	movs	r3, r0
    805a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
    805c:	68fb      	ldr	r3, [r7, #12]
    805e:	2b00      	cmp	r3, #0
    8060:	d014      	beq.n	808c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
    8062:	68fb      	ldr	r3, [r7, #12]
    8064:	2201      	movs	r2, #1
    8066:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	43db      	mvns	r3, r3
    806c:	683a      	ldr	r2, [r7, #0]
    806e:	4013      	ands	r3, r2
    8070:	0a1b      	lsrs	r3, r3, #8
    8072:	b2da      	uxtb	r2, r3
    8074:	68fb      	ldr	r3, [r7, #12]
    8076:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    8078:	687b      	ldr	r3, [r7, #4]
    807a:	43db      	mvns	r3, r3
    807c:	683a      	ldr	r2, [r7, #0]
    807e:	4013      	ands	r3, r2
    8080:	0c1b      	lsrs	r3, r3, #16
    8082:	b29a      	uxth	r2, r3
    8084:	68fb      	ldr	r3, [r7, #12]
    8086:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    8088:	4b08      	ldr	r3, [pc, #32]	; (80ac <prvTraceGetParam+0x88>)
    808a:	4798      	blx	r3
		}

		return param & param_max;
    808c:	683b      	ldr	r3, [r7, #0]
    808e:	687a      	ldr	r2, [r7, #4]
    8090:	4013      	ands	r3, r2
	}
}
    8092:	0018      	movs	r0, r3
    8094:	46bd      	mov	sp, r7
    8096:	b004      	add	sp, #16
    8098:	bd80      	pop	{r7, pc}
    809a:	46c0      	nop			; (mov r8, r8)
    809c:	0000ffff 	.word	0x0000ffff
    80a0:	000276b8 	.word	0x000276b8
    80a4:	00008c4d 	.word	0x00008c4d
    80a8:	00008805 	.word	0x00008805
    80ac:	00008e09 	.word	0x00008e09

000080b0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    80b0:	b580      	push	{r7, lr}
    80b2:	b08a      	sub	sp, #40	; 0x28
    80b4:	af00      	add	r7, sp, #0
    80b6:	6078      	str	r0, [r7, #4]
    80b8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
    80ba:	2326      	movs	r3, #38	; 0x26
    80bc:	18fb      	adds	r3, r7, r3
    80be:	2200      	movs	r2, #0
    80c0:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    80c2:	687b      	ldr	r3, [r7, #4]
    80c4:	2bfe      	cmp	r3, #254	; 0xfe
    80c6:	d904      	bls.n	80d2 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
    80c8:	4b2d      	ldr	r3, [pc, #180]	; (8180 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
    80ca:	0018      	movs	r0, r3
    80cc:	4b2d      	ldr	r3, [pc, #180]	; (8184 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    80ce:	4798      	blx	r3
    80d0:	e053      	b.n	817a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
    80d2:	4b2d      	ldr	r3, [pc, #180]	; (8188 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    80d4:	681b      	ldr	r3, [r3, #0]
    80d6:	2b00      	cmp	r3, #0
    80d8:	d004      	beq.n	80e4 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    80da:	4b2c      	ldr	r3, [pc, #176]	; (818c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
    80dc:	0018      	movs	r0, r3
    80de:	4b29      	ldr	r3, [pc, #164]	; (8184 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    80e0:	4798      	blx	r3
		return;
    80e2:	e04a      	b.n	817a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    80e4:	f3ef 8310 	mrs	r3, PRIMASK
    80e8:	613b      	str	r3, [r7, #16]
  return(result);
    80ea:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
    80ec:	623b      	str	r3, [r7, #32]
    80ee:	2301      	movs	r3, #1
    80f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    80f2:	697b      	ldr	r3, [r7, #20]
    80f4:	f383 8810 	msr	PRIMASK, r3
    80f8:	4b23      	ldr	r3, [pc, #140]	; (8188 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    80fa:	681b      	ldr	r3, [r3, #0]
    80fc:	1c5a      	adds	r2, r3, #1
    80fe:	4b22      	ldr	r3, [pc, #136]	; (8188 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    8100:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    8102:	4b23      	ldr	r3, [pc, #140]	; (8190 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
    8104:	681b      	ldr	r3, [r3, #0]
    8106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8108:	2b00      	cmp	r3, #0
    810a:	d02c      	beq.n	8166 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
    810c:	4b21      	ldr	r3, [pc, #132]	; (8194 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
    810e:	781b      	ldrb	r3, [r3, #0]
    8110:	2b00      	cmp	r3, #0
    8112:	d028      	beq.n	8166 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    8114:	20ff      	movs	r0, #255	; 0xff
    8116:	4b20      	ldr	r3, [pc, #128]	; (8198 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    8118:	4798      	blx	r3
    811a:	0003      	movs	r3, r0
    811c:	001a      	movs	r2, r3
    811e:	231f      	movs	r3, #31
    8120:	18fb      	adds	r3, r7, r3
    8122:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    8124:	683b      	ldr	r3, [r7, #0]
    8126:	4a1d      	ldr	r2, [pc, #116]	; (819c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
    8128:	0019      	movs	r1, r3
    812a:	0010      	movs	r0, r2
    812c:	4b1c      	ldr	r3, [pc, #112]	; (81a0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
    812e:	4798      	blx	r3
    8130:	0002      	movs	r2, r0
    8132:	2326      	movs	r3, #38	; 0x26
    8134:	18fb      	adds	r3, r7, r3
    8136:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    8138:	4b1a      	ldr	r3, [pc, #104]	; (81a4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
    813a:	4798      	blx	r3
    813c:	0003      	movs	r3, r0
    813e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
    8140:	69bb      	ldr	r3, [r7, #24]
    8142:	2b00      	cmp	r3, #0
    8144:	d00f      	beq.n	8166 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
    8146:	69bb      	ldr	r3, [r7, #24]
    8148:	221f      	movs	r2, #31
    814a:	18ba      	adds	r2, r7, r2
    814c:	7812      	ldrb	r2, [r2, #0]
    814e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	b2da      	uxtb	r2, r3
    8154:	69bb      	ldr	r3, [r7, #24]
    8156:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
    8158:	69bb      	ldr	r3, [r7, #24]
    815a:	2226      	movs	r2, #38	; 0x26
    815c:	18ba      	adds	r2, r7, r2
    815e:	8812      	ldrh	r2, [r2, #0]
    8160:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    8162:	4b11      	ldr	r3, [pc, #68]	; (81a8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
    8164:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    8166:	4b08      	ldr	r3, [pc, #32]	; (8188 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    8168:	681b      	ldr	r3, [r3, #0]
    816a:	1e5a      	subs	r2, r3, #1
    816c:	4b06      	ldr	r3, [pc, #24]	; (8188 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    816e:	601a      	str	r2, [r3, #0]
    8170:	6a3b      	ldr	r3, [r7, #32]
    8172:	60fb      	str	r3, [r7, #12]
    8174:	68fb      	ldr	r3, [r7, #12]
    8176:	f383 8810 	msr	PRIMASK, r3
}
    817a:	46bd      	mov	sp, r7
    817c:	b00a      	add	sp, #40	; 0x28
    817e:	bd80      	pop	{r7, pc}
    8180:	000276f4 	.word	0x000276f4
    8184:	00008c4d 	.word	0x00008c4d
    8188:	20000d6c 	.word	0x20000d6c
    818c:	0002774c 	.word	0x0002774c
    8190:	20000e14 	.word	0x20000e14
    8194:	20000d78 	.word	0x20000d78
    8198:	00008e61 	.word	0x00008e61
    819c:	0000ffff 	.word	0x0000ffff
    81a0:	00008025 	.word	0x00008025
    81a4:	00008805 	.word	0x00008805
    81a8:	00008e09 	.word	0x00008e09

000081ac <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
    81ac:	b590      	push	{r4, r7, lr}
    81ae:	b089      	sub	sp, #36	; 0x24
    81b0:	af00      	add	r7, sp, #0
    81b2:	0002      	movs	r2, r0
    81b4:	1dfb      	adds	r3, r7, #7
    81b6:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    81b8:	1dfb      	adds	r3, r7, #7
    81ba:	781b      	ldrb	r3, [r3, #0]
    81bc:	2b0f      	cmp	r3, #15
    81be:	d904      	bls.n	81ca <prvTraceStoreTaskswitch+0x1e>
    81c0:	4b34      	ldr	r3, [pc, #208]	; (8294 <prvTraceStoreTaskswitch+0xe8>)
    81c2:	0018      	movs	r0, r3
    81c4:	4b34      	ldr	r3, [pc, #208]	; (8298 <prvTraceStoreTaskswitch+0xec>)
    81c6:	4798      	blx	r3
    81c8:	e061      	b.n	828e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    81ca:	f3ef 8310 	mrs	r3, PRIMASK
    81ce:	60fb      	str	r3, [r7, #12]
  return(result);
    81d0:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    81d2:	61fb      	str	r3, [r7, #28]
    81d4:	2301      	movs	r3, #1
    81d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    81d8:	693b      	ldr	r3, [r7, #16]
    81da:	f383 8810 	msr	PRIMASK, r3
    81de:	4b2f      	ldr	r3, [pc, #188]	; (829c <prvTraceStoreTaskswitch+0xf0>)
    81e0:	681b      	ldr	r3, [r3, #0]
    81e2:	1c5a      	adds	r2, r3, #1
    81e4:	4b2d      	ldr	r3, [pc, #180]	; (829c <prvTraceStoreTaskswitch+0xf0>)
    81e6:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    81e8:	4b2d      	ldr	r3, [pc, #180]	; (82a0 <prvTraceStoreTaskswitch+0xf4>)
    81ea:	781b      	ldrb	r3, [r3, #0]
    81ec:	1dfa      	adds	r2, r7, #7
    81ee:	7812      	ldrb	r2, [r2, #0]
    81f0:	429a      	cmp	r2, r3
    81f2:	d042      	beq.n	827a <prvTraceStoreTaskswitch+0xce>
    81f4:	4b2b      	ldr	r3, [pc, #172]	; (82a4 <prvTraceStoreTaskswitch+0xf8>)
    81f6:	681b      	ldr	r3, [r3, #0]
    81f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    81fa:	2b00      	cmp	r3, #0
    81fc:	d03d      	beq.n	827a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
    81fe:	4b2a      	ldr	r3, [pc, #168]	; (82a8 <prvTraceStoreTaskswitch+0xfc>)
    8200:	2200      	movs	r2, #0
    8202:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    8204:	231a      	movs	r3, #26
    8206:	18fc      	adds	r4, r7, r3
    8208:	4b28      	ldr	r3, [pc, #160]	; (82ac <prvTraceStoreTaskswitch+0x100>)
    820a:	0018      	movs	r0, r3
    820c:	4b28      	ldr	r3, [pc, #160]	; (82b0 <prvTraceStoreTaskswitch+0x104>)
    820e:	4798      	blx	r3
    8210:	0003      	movs	r3, r0
    8212:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
    8214:	4b22      	ldr	r3, [pc, #136]	; (82a0 <prvTraceStoreTaskswitch+0xf4>)
    8216:	1dfa      	adds	r2, r7, #7
    8218:	7812      	ldrb	r2, [r2, #0]
    821a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
    821c:	2319      	movs	r3, #25
    821e:	18fb      	adds	r3, r7, r3
    8220:	4a1f      	ldr	r2, [pc, #124]	; (82a0 <prvTraceStoreTaskswitch+0xf4>)
    8222:	7812      	ldrb	r2, [r2, #0]
    8224:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    8226:	4b23      	ldr	r3, [pc, #140]	; (82b4 <prvTraceStoreTaskswitch+0x108>)
    8228:	4798      	blx	r3
    822a:	0003      	movs	r3, r0
    822c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
    822e:	697b      	ldr	r3, [r7, #20]
    8230:	2b00      	cmp	r3, #0
    8232:	d022      	beq.n	827a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    8234:	4b1a      	ldr	r3, [pc, #104]	; (82a0 <prvTraceStoreTaskswitch+0xf4>)
    8236:	781b      	ldrb	r3, [r3, #0]
    8238:	0019      	movs	r1, r3
    823a:	2003      	movs	r0, #3
    823c:	4b1e      	ldr	r3, [pc, #120]	; (82b8 <prvTraceStoreTaskswitch+0x10c>)
    823e:	4798      	blx	r3
    8240:	0003      	movs	r3, r0
    8242:	2b01      	cmp	r3, #1
    8244:	d103      	bne.n	824e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    8246:	697b      	ldr	r3, [r7, #20]
    8248:	2207      	movs	r2, #7
    824a:	701a      	strb	r2, [r3, #0]
    824c:	e002      	b.n	8254 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    824e:	697b      	ldr	r3, [r7, #20]
    8250:	2206      	movs	r2, #6
    8252:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
    8254:	697b      	ldr	r3, [r7, #20]
    8256:	221a      	movs	r2, #26
    8258:	18ba      	adds	r2, r7, r2
    825a:	8812      	ldrh	r2, [r2, #0]
    825c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
    825e:	697b      	ldr	r3, [r7, #20]
    8260:	2219      	movs	r2, #25
    8262:	18ba      	adds	r2, r7, r2
    8264:	7812      	ldrb	r2, [r2, #0]
    8266:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
    8268:	4b0d      	ldr	r3, [pc, #52]	; (82a0 <prvTraceStoreTaskswitch+0xf4>)
    826a:	781b      	ldrb	r3, [r3, #0]
    826c:	2201      	movs	r2, #1
    826e:	0019      	movs	r1, r3
    8270:	2003      	movs	r0, #3
    8272:	4b12      	ldr	r3, [pc, #72]	; (82bc <prvTraceStoreTaskswitch+0x110>)
    8274:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    8276:	4b12      	ldr	r3, [pc, #72]	; (82c0 <prvTraceStoreTaskswitch+0x114>)
    8278:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    827a:	4b08      	ldr	r3, [pc, #32]	; (829c <prvTraceStoreTaskswitch+0xf0>)
    827c:	681b      	ldr	r3, [r3, #0]
    827e:	1e5a      	subs	r2, r3, #1
    8280:	4b06      	ldr	r3, [pc, #24]	; (829c <prvTraceStoreTaskswitch+0xf0>)
    8282:	601a      	str	r2, [r3, #0]
    8284:	69fb      	ldr	r3, [r7, #28]
    8286:	60bb      	str	r3, [r7, #8]
    8288:	68bb      	ldr	r3, [r7, #8]
    828a:	f383 8810 	msr	PRIMASK, r3
}
    828e:	46bd      	mov	sp, r7
    8290:	b009      	add	sp, #36	; 0x24
    8292:	bd90      	pop	{r4, r7, pc}
    8294:	00027784 	.word	0x00027784
    8298:	00008c4d 	.word	0x00008c4d
    829c:	20000d6c 	.word	0x20000d6c
    82a0:	20000d78 	.word	0x20000d78
    82a4:	20000e14 	.word	0x20000e14
    82a8:	20000d58 	.word	0x20000d58
    82ac:	0000ffff 	.word	0x0000ffff
    82b0:	00008e61 	.word	0x00008e61
    82b4:	00008805 	.word	0x00008805
    82b8:	000084a9 	.word	0x000084a9
    82bc:	00008405 	.word	0x00008405
    82c0:	00008e09 	.word	0x00008e09

000082c4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
    82c4:	b590      	push	{r4, r7, lr}
    82c6:	b083      	sub	sp, #12
    82c8:	af00      	add	r7, sp, #0
    82ca:	0004      	movs	r4, r0
    82cc:	0008      	movs	r0, r1
    82ce:	0011      	movs	r1, r2
    82d0:	1dfb      	adds	r3, r7, #7
    82d2:	1c22      	adds	r2, r4, #0
    82d4:	701a      	strb	r2, [r3, #0]
    82d6:	1dbb      	adds	r3, r7, #6
    82d8:	1c02      	adds	r2, r0, #0
    82da:	701a      	strb	r2, [r3, #0]
    82dc:	1d7b      	adds	r3, r7, #5
    82de:	1c0a      	adds	r2, r1, #0
    82e0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    82e2:	1dfb      	adds	r3, r7, #7
    82e4:	781b      	ldrb	r3, [r3, #0]
    82e6:	2b08      	cmp	r3, #8
    82e8:	d904      	bls.n	82f4 <prvTraceSetPriorityProperty+0x30>
    82ea:	4b1a      	ldr	r3, [pc, #104]	; (8354 <prvTraceSetPriorityProperty+0x90>)
    82ec:	0018      	movs	r0, r3
    82ee:	4b1a      	ldr	r3, [pc, #104]	; (8358 <prvTraceSetPriorityProperty+0x94>)
    82f0:	4798      	blx	r3
    82f2:	e02c      	b.n	834e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    82f4:	4b19      	ldr	r3, [pc, #100]	; (835c <prvTraceSetPriorityProperty+0x98>)
    82f6:	681a      	ldr	r2, [r3, #0]
    82f8:	1dfb      	adds	r3, r7, #7
    82fa:	781b      	ldrb	r3, [r3, #0]
    82fc:	2164      	movs	r1, #100	; 0x64
    82fe:	18d3      	adds	r3, r2, r3
    8300:	185b      	adds	r3, r3, r1
    8302:	781b      	ldrb	r3, [r3, #0]
    8304:	1dba      	adds	r2, r7, #6
    8306:	7812      	ldrb	r2, [r2, #0]
    8308:	429a      	cmp	r2, r3
    830a:	d904      	bls.n	8316 <prvTraceSetPriorityProperty+0x52>
    830c:	4b14      	ldr	r3, [pc, #80]	; (8360 <prvTraceSetPriorityProperty+0x9c>)
    830e:	0018      	movs	r0, r3
    8310:	4b11      	ldr	r3, [pc, #68]	; (8358 <prvTraceSetPriorityProperty+0x94>)
    8312:	4798      	blx	r3
    8314:	e01b      	b.n	834e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    8316:	4b11      	ldr	r3, [pc, #68]	; (835c <prvTraceSetPriorityProperty+0x98>)
    8318:	681c      	ldr	r4, [r3, #0]
    831a:	1dfb      	adds	r3, r7, #7
    831c:	781a      	ldrb	r2, [r3, #0]
    831e:	1dbb      	adds	r3, r7, #6
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	0011      	movs	r1, r2
    8324:	0018      	movs	r0, r3
    8326:	4b0f      	ldr	r3, [pc, #60]	; (8364 <prvTraceSetPriorityProperty+0xa0>)
    8328:	4798      	blx	r3
    832a:	0003      	movs	r3, r0
    832c:	0018      	movs	r0, r3
    832e:	4b0b      	ldr	r3, [pc, #44]	; (835c <prvTraceSetPriorityProperty+0x98>)
    8330:	681a      	ldr	r2, [r3, #0]
    8332:	1dfb      	adds	r3, r7, #7
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	2170      	movs	r1, #112	; 0x70
    8338:	18d3      	adds	r3, r2, r3
    833a:	185b      	adds	r3, r3, r1
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	18c3      	adds	r3, r0, r3
    8340:	3301      	adds	r3, #1
    8342:	229c      	movs	r2, #156	; 0x9c
    8344:	18e3      	adds	r3, r4, r3
    8346:	189b      	adds	r3, r3, r2
    8348:	1d7a      	adds	r2, r7, #5
    834a:	7812      	ldrb	r2, [r2, #0]
    834c:	701a      	strb	r2, [r3, #0]
}
    834e:	46bd      	mov	sp, r7
    8350:	b003      	add	sp, #12
    8352:	bd90      	pop	{r4, r7, pc}
    8354:	00027918 	.word	0x00027918
    8358:	00008c4d 	.word	0x00008c4d
    835c:	20000e14 	.word	0x20000e14
    8360:	00027964 	.word	0x00027964
    8364:	00008859 	.word	0x00008859

00008368 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
    8368:	b590      	push	{r4, r7, lr}
    836a:	b083      	sub	sp, #12
    836c:	af00      	add	r7, sp, #0
    836e:	0002      	movs	r2, r0
    8370:	1dfb      	adds	r3, r7, #7
    8372:	701a      	strb	r2, [r3, #0]
    8374:	1dbb      	adds	r3, r7, #6
    8376:	1c0a      	adds	r2, r1, #0
    8378:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    837a:	1dfb      	adds	r3, r7, #7
    837c:	781b      	ldrb	r3, [r3, #0]
    837e:	2b08      	cmp	r3, #8
    8380:	d905      	bls.n	838e <prvTraceGetPriorityProperty+0x26>
    8382:	4b1b      	ldr	r3, [pc, #108]	; (83f0 <prvTraceGetPriorityProperty+0x88>)
    8384:	0018      	movs	r0, r3
    8386:	4b1b      	ldr	r3, [pc, #108]	; (83f4 <prvTraceGetPriorityProperty+0x8c>)
    8388:	4798      	blx	r3
    838a:	2300      	movs	r3, #0
    838c:	e02b      	b.n	83e6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    838e:	4b1a      	ldr	r3, [pc, #104]	; (83f8 <prvTraceGetPriorityProperty+0x90>)
    8390:	681a      	ldr	r2, [r3, #0]
    8392:	1dfb      	adds	r3, r7, #7
    8394:	781b      	ldrb	r3, [r3, #0]
    8396:	2164      	movs	r1, #100	; 0x64
    8398:	18d3      	adds	r3, r2, r3
    839a:	185b      	adds	r3, r3, r1
    839c:	781b      	ldrb	r3, [r3, #0]
    839e:	1dba      	adds	r2, r7, #6
    83a0:	7812      	ldrb	r2, [r2, #0]
    83a2:	429a      	cmp	r2, r3
    83a4:	d905      	bls.n	83b2 <prvTraceGetPriorityProperty+0x4a>
    83a6:	4b15      	ldr	r3, [pc, #84]	; (83fc <prvTraceGetPriorityProperty+0x94>)
    83a8:	0018      	movs	r0, r3
    83aa:	4b12      	ldr	r3, [pc, #72]	; (83f4 <prvTraceGetPriorityProperty+0x8c>)
    83ac:	4798      	blx	r3
    83ae:	2300      	movs	r3, #0
    83b0:	e019      	b.n	83e6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    83b2:	4b11      	ldr	r3, [pc, #68]	; (83f8 <prvTraceGetPriorityProperty+0x90>)
    83b4:	681c      	ldr	r4, [r3, #0]
    83b6:	1dfb      	adds	r3, r7, #7
    83b8:	781a      	ldrb	r2, [r3, #0]
    83ba:	1dbb      	adds	r3, r7, #6
    83bc:	781b      	ldrb	r3, [r3, #0]
    83be:	0011      	movs	r1, r2
    83c0:	0018      	movs	r0, r3
    83c2:	4b0f      	ldr	r3, [pc, #60]	; (8400 <prvTraceGetPriorityProperty+0x98>)
    83c4:	4798      	blx	r3
    83c6:	0003      	movs	r3, r0
    83c8:	0018      	movs	r0, r3
    83ca:	4b0b      	ldr	r3, [pc, #44]	; (83f8 <prvTraceGetPriorityProperty+0x90>)
    83cc:	681a      	ldr	r2, [r3, #0]
    83ce:	1dfb      	adds	r3, r7, #7
    83d0:	781b      	ldrb	r3, [r3, #0]
    83d2:	2170      	movs	r1, #112	; 0x70
    83d4:	18d3      	adds	r3, r2, r3
    83d6:	185b      	adds	r3, r3, r1
    83d8:	781b      	ldrb	r3, [r3, #0]
    83da:	18c3      	adds	r3, r0, r3
    83dc:	3301      	adds	r3, #1
    83de:	229c      	movs	r2, #156	; 0x9c
    83e0:	18e3      	adds	r3, r4, r3
    83e2:	189b      	adds	r3, r3, r2
    83e4:	781b      	ldrb	r3, [r3, #0]
}
    83e6:	0018      	movs	r0, r3
    83e8:	46bd      	mov	sp, r7
    83ea:	b003      	add	sp, #12
    83ec:	bd90      	pop	{r4, r7, pc}
    83ee:	46c0      	nop			; (mov r8, r8)
    83f0:	000279a4 	.word	0x000279a4
    83f4:	00008c4d 	.word	0x00008c4d
    83f8:	20000e14 	.word	0x20000e14
    83fc:	000279f0 	.word	0x000279f0
    8400:	00008859 	.word	0x00008859

00008404 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
    8404:	b590      	push	{r4, r7, lr}
    8406:	b083      	sub	sp, #12
    8408:	af00      	add	r7, sp, #0
    840a:	0004      	movs	r4, r0
    840c:	0008      	movs	r0, r1
    840e:	0011      	movs	r1, r2
    8410:	1dfb      	adds	r3, r7, #7
    8412:	1c22      	adds	r2, r4, #0
    8414:	701a      	strb	r2, [r3, #0]
    8416:	1dbb      	adds	r3, r7, #6
    8418:	1c02      	adds	r2, r0, #0
    841a:	701a      	strb	r2, [r3, #0]
    841c:	1d7b      	adds	r3, r7, #5
    841e:	1c0a      	adds	r2, r1, #0
    8420:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    8422:	1dfb      	adds	r3, r7, #7
    8424:	781b      	ldrb	r3, [r3, #0]
    8426:	2b08      	cmp	r3, #8
    8428:	d904      	bls.n	8434 <prvTraceSetObjectState+0x30>
    842a:	4b1a      	ldr	r3, [pc, #104]	; (8494 <prvTraceSetObjectState+0x90>)
    842c:	0018      	movs	r0, r3
    842e:	4b1a      	ldr	r3, [pc, #104]	; (8498 <prvTraceSetObjectState+0x94>)
    8430:	4798      	blx	r3
    8432:	e02b      	b.n	848c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    8434:	4b19      	ldr	r3, [pc, #100]	; (849c <prvTraceSetObjectState+0x98>)
    8436:	681a      	ldr	r2, [r3, #0]
    8438:	1dfb      	adds	r3, r7, #7
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	2164      	movs	r1, #100	; 0x64
    843e:	18d3      	adds	r3, r2, r3
    8440:	185b      	adds	r3, r3, r1
    8442:	781b      	ldrb	r3, [r3, #0]
    8444:	1dba      	adds	r2, r7, #6
    8446:	7812      	ldrb	r2, [r2, #0]
    8448:	429a      	cmp	r2, r3
    844a:	d904      	bls.n	8456 <prvTraceSetObjectState+0x52>
    844c:	4b14      	ldr	r3, [pc, #80]	; (84a0 <prvTraceSetObjectState+0x9c>)
    844e:	0018      	movs	r0, r3
    8450:	4b11      	ldr	r3, [pc, #68]	; (8498 <prvTraceSetObjectState+0x94>)
    8452:	4798      	blx	r3
    8454:	e01a      	b.n	848c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    8456:	4b11      	ldr	r3, [pc, #68]	; (849c <prvTraceSetObjectState+0x98>)
    8458:	681c      	ldr	r4, [r3, #0]
    845a:	1dfb      	adds	r3, r7, #7
    845c:	781a      	ldrb	r2, [r3, #0]
    845e:	1dbb      	adds	r3, r7, #6
    8460:	781b      	ldrb	r3, [r3, #0]
    8462:	0011      	movs	r1, r2
    8464:	0018      	movs	r0, r3
    8466:	4b0f      	ldr	r3, [pc, #60]	; (84a4 <prvTraceSetObjectState+0xa0>)
    8468:	4798      	blx	r3
    846a:	0003      	movs	r3, r0
    846c:	0018      	movs	r0, r3
    846e:	4b0b      	ldr	r3, [pc, #44]	; (849c <prvTraceSetObjectState+0x98>)
    8470:	681a      	ldr	r2, [r3, #0]
    8472:	1dfb      	adds	r3, r7, #7
    8474:	781b      	ldrb	r3, [r3, #0]
    8476:	2170      	movs	r1, #112	; 0x70
    8478:	18d3      	adds	r3, r2, r3
    847a:	185b      	adds	r3, r3, r1
    847c:	781b      	ldrb	r3, [r3, #0]
    847e:	18c3      	adds	r3, r0, r3
    8480:	229c      	movs	r2, #156	; 0x9c
    8482:	18e3      	adds	r3, r4, r3
    8484:	189b      	adds	r3, r3, r2
    8486:	1d7a      	adds	r2, r7, #5
    8488:	7812      	ldrb	r2, [r2, #0]
    848a:	701a      	strb	r2, [r3, #0]
}
    848c:	46bd      	mov	sp, r7
    848e:	b003      	add	sp, #12
    8490:	bd90      	pop	{r4, r7, pc}
    8492:	46c0      	nop			; (mov r8, r8)
    8494:	00027a30 	.word	0x00027a30
    8498:	00008c4d 	.word	0x00008c4d
    849c:	20000e14 	.word	0x20000e14
    84a0:	00027a74 	.word	0x00027a74
    84a4:	00008859 	.word	0x00008859

000084a8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
    84a8:	b590      	push	{r4, r7, lr}
    84aa:	b083      	sub	sp, #12
    84ac:	af00      	add	r7, sp, #0
    84ae:	0002      	movs	r2, r0
    84b0:	1dfb      	adds	r3, r7, #7
    84b2:	701a      	strb	r2, [r3, #0]
    84b4:	1dbb      	adds	r3, r7, #6
    84b6:	1c0a      	adds	r2, r1, #0
    84b8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    84ba:	1dfb      	adds	r3, r7, #7
    84bc:	781b      	ldrb	r3, [r3, #0]
    84be:	2b08      	cmp	r3, #8
    84c0:	d905      	bls.n	84ce <prvTraceGetObjectState+0x26>
    84c2:	4b1a      	ldr	r3, [pc, #104]	; (852c <prvTraceGetObjectState+0x84>)
    84c4:	0018      	movs	r0, r3
    84c6:	4b1a      	ldr	r3, [pc, #104]	; (8530 <prvTraceGetObjectState+0x88>)
    84c8:	4798      	blx	r3
    84ca:	2300      	movs	r3, #0
    84cc:	e02a      	b.n	8524 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    84ce:	4b19      	ldr	r3, [pc, #100]	; (8534 <prvTraceGetObjectState+0x8c>)
    84d0:	681a      	ldr	r2, [r3, #0]
    84d2:	1dfb      	adds	r3, r7, #7
    84d4:	781b      	ldrb	r3, [r3, #0]
    84d6:	2164      	movs	r1, #100	; 0x64
    84d8:	18d3      	adds	r3, r2, r3
    84da:	185b      	adds	r3, r3, r1
    84dc:	781b      	ldrb	r3, [r3, #0]
    84de:	1dba      	adds	r2, r7, #6
    84e0:	7812      	ldrb	r2, [r2, #0]
    84e2:	429a      	cmp	r2, r3
    84e4:	d905      	bls.n	84f2 <prvTraceGetObjectState+0x4a>
    84e6:	4b14      	ldr	r3, [pc, #80]	; (8538 <prvTraceGetObjectState+0x90>)
    84e8:	0018      	movs	r0, r3
    84ea:	4b11      	ldr	r3, [pc, #68]	; (8530 <prvTraceGetObjectState+0x88>)
    84ec:	4798      	blx	r3
    84ee:	2300      	movs	r3, #0
    84f0:	e018      	b.n	8524 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    84f2:	4b10      	ldr	r3, [pc, #64]	; (8534 <prvTraceGetObjectState+0x8c>)
    84f4:	681c      	ldr	r4, [r3, #0]
    84f6:	1dfb      	adds	r3, r7, #7
    84f8:	781a      	ldrb	r2, [r3, #0]
    84fa:	1dbb      	adds	r3, r7, #6
    84fc:	781b      	ldrb	r3, [r3, #0]
    84fe:	0011      	movs	r1, r2
    8500:	0018      	movs	r0, r3
    8502:	4b0e      	ldr	r3, [pc, #56]	; (853c <prvTraceGetObjectState+0x94>)
    8504:	4798      	blx	r3
    8506:	0003      	movs	r3, r0
    8508:	0018      	movs	r0, r3
    850a:	4b0a      	ldr	r3, [pc, #40]	; (8534 <prvTraceGetObjectState+0x8c>)
    850c:	681a      	ldr	r2, [r3, #0]
    850e:	1dfb      	adds	r3, r7, #7
    8510:	781b      	ldrb	r3, [r3, #0]
    8512:	2170      	movs	r1, #112	; 0x70
    8514:	18d3      	adds	r3, r2, r3
    8516:	185b      	adds	r3, r3, r1
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	18c3      	adds	r3, r0, r3
    851c:	229c      	movs	r2, #156	; 0x9c
    851e:	18e3      	adds	r3, r4, r3
    8520:	189b      	adds	r3, r3, r2
    8522:	781b      	ldrb	r3, [r3, #0]
}
    8524:	0018      	movs	r0, r3
    8526:	46bd      	mov	sp, r7
    8528:	b003      	add	sp, #12
    852a:	bd90      	pop	{r4, r7, pc}
    852c:	00027ab0 	.word	0x00027ab0
    8530:	00008c4d 	.word	0x00008c4d
    8534:	20000e14 	.word	0x20000e14
    8538:	00027af4 	.word	0x00027af4
    853c:	00008859 	.word	0x00008859

00008540 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
    8540:	b590      	push	{r4, r7, lr}
    8542:	b083      	sub	sp, #12
    8544:	af00      	add	r7, sp, #0
    8546:	0002      	movs	r2, r0
    8548:	1dfb      	adds	r3, r7, #7
    854a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    854c:	4b11      	ldr	r3, [pc, #68]	; (8594 <prvTraceSetTaskInstanceFinished+0x54>)
    854e:	681b      	ldr	r3, [r3, #0]
    8550:	2267      	movs	r2, #103	; 0x67
    8552:	5c9b      	ldrb	r3, [r3, r2]
    8554:	1dfa      	adds	r2, r7, #7
    8556:	7812      	ldrb	r2, [r2, #0]
    8558:	429a      	cmp	r2, r3
    855a:	d904      	bls.n	8566 <prvTraceSetTaskInstanceFinished+0x26>
    855c:	4b0e      	ldr	r3, [pc, #56]	; (8598 <prvTraceSetTaskInstanceFinished+0x58>)
    855e:	0018      	movs	r0, r3
    8560:	4b0e      	ldr	r3, [pc, #56]	; (859c <prvTraceSetTaskInstanceFinished+0x5c>)
    8562:	4798      	blx	r3
    8564:	e013      	b.n	858e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    8566:	4b0b      	ldr	r3, [pc, #44]	; (8594 <prvTraceSetTaskInstanceFinished+0x54>)
    8568:	681c      	ldr	r4, [r3, #0]
    856a:	1dfb      	adds	r3, r7, #7
    856c:	781b      	ldrb	r3, [r3, #0]
    856e:	2103      	movs	r1, #3
    8570:	0018      	movs	r0, r3
    8572:	4b0b      	ldr	r3, [pc, #44]	; (85a0 <prvTraceSetTaskInstanceFinished+0x60>)
    8574:	4798      	blx	r3
    8576:	0003      	movs	r3, r0
    8578:	0019      	movs	r1, r3
    857a:	4b06      	ldr	r3, [pc, #24]	; (8594 <prvTraceSetTaskInstanceFinished+0x54>)
    857c:	681b      	ldr	r3, [r3, #0]
    857e:	2273      	movs	r2, #115	; 0x73
    8580:	5c9b      	ldrb	r3, [r3, r2]
    8582:	18cb      	adds	r3, r1, r3
    8584:	229c      	movs	r2, #156	; 0x9c
    8586:	18e3      	adds	r3, r4, r3
    8588:	189b      	adds	r3, r3, r2
    858a:	2200      	movs	r2, #0
    858c:	701a      	strb	r2, [r3, #0]
#endif
}
    858e:	46bd      	mov	sp, r7
    8590:	b003      	add	sp, #12
    8592:	bd90      	pop	{r4, r7, pc}
    8594:	20000e14 	.word	0x20000e14
    8598:	00027b30 	.word	0x00027b30
    859c:	00008c4d 	.word	0x00008c4d
    85a0:	00008859 	.word	0x00008859

000085a4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
    85a4:	b580      	push	{r7, lr}
    85a6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
    85a8:	4b75      	ldr	r3, [pc, #468]	; (8780 <prvTraceInitTraceData+0x1dc>)
    85aa:	681b      	ldr	r3, [r3, #0]
    85ac:	2b00      	cmp	r3, #0
    85ae:	d103      	bne.n	85b8 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
    85b0:	4b73      	ldr	r3, [pc, #460]	; (8780 <prvTraceInitTraceData+0x1dc>)
    85b2:	4a74      	ldr	r2, [pc, #464]	; (8784 <prvTraceInitTraceData+0x1e0>)
    85b4:	601a      	str	r2, [r3, #0]
    85b6:	e006      	b.n	85c6 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
    85b8:	4b71      	ldr	r3, [pc, #452]	; (8780 <prvTraceInitTraceData+0x1dc>)
    85ba:	681b      	ldr	r3, [r3, #0]
    85bc:	781b      	ldrb	r3, [r3, #0]
    85be:	b2db      	uxtb	r3, r3
    85c0:	2b01      	cmp	r3, #1
    85c2:	d100      	bne.n	85c6 <prvTraceInitTraceData+0x22>
    85c4:	e0d8      	b.n	8778 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
    85c6:	4b70      	ldr	r3, [pc, #448]	; (8788 <prvTraceInitTraceData+0x1e4>)
    85c8:	681a      	ldr	r2, [r3, #0]
    85ca:	4b70      	ldr	r3, [pc, #448]	; (878c <prvTraceInitTraceData+0x1e8>)
    85cc:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    85ce:	4b6c      	ldr	r3, [pc, #432]	; (8780 <prvTraceInitTraceData+0x1dc>)
    85d0:	6818      	ldr	r0, [r3, #0]
    85d2:	23bd      	movs	r3, #189	; 0xbd
    85d4:	011b      	lsls	r3, r3, #4
    85d6:	001a      	movs	r2, r3
    85d8:	2100      	movs	r1, #0
    85da:	4b6d      	ldr	r3, [pc, #436]	; (8790 <prvTraceInitTraceData+0x1ec>)
    85dc:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    85de:	4b68      	ldr	r3, [pc, #416]	; (8780 <prvTraceInitTraceData+0x1dc>)
    85e0:	681b      	ldr	r3, [r3, #0]
    85e2:	4a6c      	ldr	r2, [pc, #432]	; (8794 <prvTraceInitTraceData+0x1f0>)
    85e4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    85e6:	4b66      	ldr	r3, [pc, #408]	; (8780 <prvTraceInitTraceData+0x1dc>)
    85e8:	681b      	ldr	r3, [r3, #0]
    85ea:	2205      	movs	r2, #5
    85ec:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    85ee:	4b64      	ldr	r3, [pc, #400]	; (8780 <prvTraceInitTraceData+0x1dc>)
    85f0:	681b      	ldr	r3, [r3, #0]
    85f2:	2200      	movs	r2, #0
    85f4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    85f6:	4b62      	ldr	r3, [pc, #392]	; (8780 <prvTraceInitTraceData+0x1dc>)
    85f8:	681b      	ldr	r3, [r3, #0]
    85fa:	22bd      	movs	r2, #189	; 0xbd
    85fc:	0112      	lsls	r2, r2, #4
    85fe:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    8600:	4b5f      	ldr	r3, [pc, #380]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8602:	681b      	ldr	r3, [r3, #0]
    8604:	2296      	movs	r2, #150	; 0x96
    8606:	0052      	lsls	r2, r2, #1
    8608:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    860a:	4b5d      	ldr	r3, [pc, #372]	; (8780 <prvTraceInitTraceData+0x1dc>)
    860c:	681b      	ldr	r3, [r3, #0]
    860e:	4a62      	ldr	r2, [pc, #392]	; (8798 <prvTraceInitTraceData+0x1f4>)
    8610:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    8612:	4b5b      	ldr	r3, [pc, #364]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8614:	681b      	ldr	r3, [r3, #0]
    8616:	2200      	movs	r2, #0
    8618:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    861a:	4b59      	ldr	r3, [pc, #356]	; (8780 <prvTraceInitTraceData+0x1dc>)
    861c:	681b      	ldr	r3, [r3, #0]
    861e:	2200      	movs	r2, #0
    8620:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    8622:	4b5e      	ldr	r3, [pc, #376]	; (879c <prvTraceInitTraceData+0x1f8>)
    8624:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    8626:	4b56      	ldr	r3, [pc, #344]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8628:	681b      	ldr	r3, [r3, #0]
    862a:	4a5d      	ldr	r2, [pc, #372]	; (87a0 <prvTraceInitTraceData+0x1fc>)
    862c:	495d      	ldr	r1, [pc, #372]	; (87a4 <prvTraceInitTraceData+0x200>)
    862e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    8630:	4b53      	ldr	r3, [pc, #332]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8632:	681a      	ldr	r2, [r3, #0]
    8634:	23ac      	movs	r3, #172	; 0xac
    8636:	00db      	lsls	r3, r3, #3
    8638:	21c8      	movs	r1, #200	; 0xc8
    863a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    863c:	4b50      	ldr	r3, [pc, #320]	; (8780 <prvTraceInitTraceData+0x1dc>)
    863e:	681b      	ldr	r3, [r3, #0]
    8640:	4a59      	ldr	r2, [pc, #356]	; (87a8 <prvTraceInitTraceData+0x204>)
    8642:	2101      	movs	r1, #1
    8644:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    8646:	4b4e      	ldr	r3, [pc, #312]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8648:	681a      	ldr	r2, [r3, #0]
    864a:	23d7      	movs	r3, #215	; 0xd7
    864c:	00db      	lsls	r3, r3, #3
    864e:	4957      	ldr	r1, [pc, #348]	; (87ac <prvTraceInitTraceData+0x208>)
    8650:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    8652:	4b4b      	ldr	r3, [pc, #300]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8654:	681b      	ldr	r3, [r3, #0]
    8656:	4a56      	ldr	r2, [pc, #344]	; (87b0 <prvTraceInitTraceData+0x20c>)
    8658:	4694      	mov	ip, r2
    865a:	4463      	add	r3, ip
    865c:	4955      	ldr	r1, [pc, #340]	; (87b4 <prvTraceInitTraceData+0x210>)
    865e:	2250      	movs	r2, #80	; 0x50
    8660:	0018      	movs	r0, r3
    8662:	4b55      	ldr	r3, [pc, #340]	; (87b8 <prvTraceInitTraceData+0x214>)
    8664:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    8666:	4b46      	ldr	r3, [pc, #280]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8668:	681b      	ldr	r3, [r3, #0]
    866a:	4a54      	ldr	r2, [pc, #336]	; (87bc <prvTraceInitTraceData+0x218>)
    866c:	4954      	ldr	r1, [pc, #336]	; (87c0 <prvTraceInitTraceData+0x21c>)
    866e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    8670:	4b43      	ldr	r3, [pc, #268]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8672:	681b      	ldr	r3, [r3, #0]
    8674:	4a53      	ldr	r2, [pc, #332]	; (87c4 <prvTraceInitTraceData+0x220>)
    8676:	210a      	movs	r1, #10
    8678:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    867a:	4b41      	ldr	r3, [pc, #260]	; (8780 <prvTraceInitTraceData+0x1dc>)
    867c:	681b      	ldr	r3, [r3, #0]
    867e:	4a52      	ldr	r2, [pc, #328]	; (87c8 <prvTraceInitTraceData+0x224>)
    8680:	210b      	movs	r1, #11
    8682:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    8684:	4b3e      	ldr	r3, [pc, #248]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8686:	681b      	ldr	r3, [r3, #0]
    8688:	4a50      	ldr	r2, [pc, #320]	; (87cc <prvTraceInitTraceData+0x228>)
    868a:	210c      	movs	r1, #12
    868c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    868e:	4b3c      	ldr	r3, [pc, #240]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8690:	681b      	ldr	r3, [r3, #0]
    8692:	4a4f      	ldr	r2, [pc, #316]	; (87d0 <prvTraceInitTraceData+0x22c>)
    8694:	210d      	movs	r1, #13
    8696:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    8698:	4b39      	ldr	r3, [pc, #228]	; (8780 <prvTraceInitTraceData+0x1dc>)
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	4a4d      	ldr	r2, [pc, #308]	; (87d4 <prvTraceInitTraceData+0x230>)
    869e:	2171      	movs	r1, #113	; 0x71
    86a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    86a2:	4b37      	ldr	r3, [pc, #220]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86a4:	681b      	ldr	r3, [r3, #0]
    86a6:	4a4c      	ldr	r2, [pc, #304]	; (87d8 <prvTraceInitTraceData+0x234>)
    86a8:	2172      	movs	r1, #114	; 0x72
    86aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    86ac:	4b34      	ldr	r3, [pc, #208]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86ae:	681b      	ldr	r3, [r3, #0]
    86b0:	4a4a      	ldr	r2, [pc, #296]	; (87dc <prvTraceInitTraceData+0x238>)
    86b2:	2173      	movs	r1, #115	; 0x73
    86b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    86b6:	4b32      	ldr	r3, [pc, #200]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86b8:	681b      	ldr	r3, [r3, #0]
    86ba:	4a49      	ldr	r2, [pc, #292]	; (87e0 <prvTraceInitTraceData+0x23c>)
    86bc:	2174      	movs	r1, #116	; 0x74
    86be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    86c0:	4b2f      	ldr	r3, [pc, #188]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86c2:	681b      	ldr	r3, [r3, #0]
    86c4:	4a47      	ldr	r2, [pc, #284]	; (87e4 <prvTraceInitTraceData+0x240>)
    86c6:	21f1      	movs	r1, #241	; 0xf1
    86c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    86ca:	4b2d      	ldr	r3, [pc, #180]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86cc:	681b      	ldr	r3, [r3, #0]
    86ce:	4a46      	ldr	r2, [pc, #280]	; (87e8 <prvTraceInitTraceData+0x244>)
    86d0:	21f2      	movs	r1, #242	; 0xf2
    86d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    86d4:	4b2a      	ldr	r3, [pc, #168]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86d6:	681b      	ldr	r3, [r3, #0]
    86d8:	4a44      	ldr	r2, [pc, #272]	; (87ec <prvTraceInitTraceData+0x248>)
    86da:	21f3      	movs	r1, #243	; 0xf3
    86dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    86de:	4b28      	ldr	r3, [pc, #160]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86e0:	681b      	ldr	r3, [r3, #0]
    86e2:	4a43      	ldr	r2, [pc, #268]	; (87f0 <prvTraceInitTraceData+0x24c>)
    86e4:	21f4      	movs	r1, #244	; 0xf4
    86e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    86e8:	4b42      	ldr	r3, [pc, #264]	; (87f4 <prvTraceInitTraceData+0x250>)
    86ea:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
    86ec:	4b24      	ldr	r3, [pc, #144]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86ee:	681b      	ldr	r3, [r3, #0]
    86f0:	22f4      	movs	r2, #244	; 0xf4
    86f2:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    86f4:	4b22      	ldr	r3, [pc, #136]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86f6:	681b      	ldr	r3, [r3, #0]
    86f8:	22f3      	movs	r2, #243	; 0xf3
    86fa:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    86fc:	4b20      	ldr	r3, [pc, #128]	; (8780 <prvTraceInitTraceData+0x1dc>)
    86fe:	681b      	ldr	r3, [r3, #0]
    8700:	22f2      	movs	r2, #242	; 0xf2
    8702:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    8704:	4b1e      	ldr	r3, [pc, #120]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8706:	681b      	ldr	r3, [r3, #0]
    8708:	22f1      	movs	r2, #241	; 0xf1
    870a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    870c:	4b1c      	ldr	r3, [pc, #112]	; (8780 <prvTraceInitTraceData+0x1dc>)
    870e:	681b      	ldr	r3, [r3, #0]
    8710:	2274      	movs	r2, #116	; 0x74
    8712:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    8714:	4b1a      	ldr	r3, [pc, #104]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8716:	681b      	ldr	r3, [r3, #0]
    8718:	2273      	movs	r2, #115	; 0x73
    871a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    871c:	4b18      	ldr	r3, [pc, #96]	; (8780 <prvTraceInitTraceData+0x1dc>)
    871e:	681b      	ldr	r3, [r3, #0]
    8720:	2272      	movs	r2, #114	; 0x72
    8722:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    8724:	4b16      	ldr	r3, [pc, #88]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8726:	681b      	ldr	r3, [r3, #0]
    8728:	2271      	movs	r2, #113	; 0x71
    872a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    872c:	4b14      	ldr	r3, [pc, #80]	; (8780 <prvTraceInitTraceData+0x1dc>)
    872e:	681b      	ldr	r3, [r3, #0]
    8730:	2204      	movs	r2, #4
    8732:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    8734:	4b12      	ldr	r3, [pc, #72]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	2203      	movs	r2, #3
    873a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    873c:	4b10      	ldr	r3, [pc, #64]	; (8780 <prvTraceInitTraceData+0x1dc>)
    873e:	681b      	ldr	r3, [r3, #0]
    8740:	2202      	movs	r2, #2
    8742:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    8744:	4b0e      	ldr	r3, [pc, #56]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8746:	681b      	ldr	r3, [r3, #0]
    8748:	2201      	movs	r2, #1
    874a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
    874c:	4b2a      	ldr	r3, [pc, #168]	; (87f8 <prvTraceInitTraceData+0x254>)
    874e:	681b      	ldr	r3, [r3, #0]
    8750:	2b00      	cmp	r3, #0
    8752:	d012      	beq.n	877a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    8754:	4b0a      	ldr	r3, [pc, #40]	; (8780 <prvTraceInitTraceData+0x1dc>)
    8756:	681b      	ldr	r3, [r3, #0]
    8758:	4a15      	ldr	r2, [pc, #84]	; (87b0 <prvTraceInitTraceData+0x20c>)
    875a:	1898      	adds	r0, r3, r2
    875c:	4b26      	ldr	r3, [pc, #152]	; (87f8 <prvTraceInitTraceData+0x254>)
    875e:	681b      	ldr	r3, [r3, #0]
    8760:	2250      	movs	r2, #80	; 0x50
    8762:	0019      	movs	r1, r3
    8764:	4b14      	ldr	r3, [pc, #80]	; (87b8 <prvTraceInitTraceData+0x214>)
    8766:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    8768:	4b05      	ldr	r3, [pc, #20]	; (8780 <prvTraceInitTraceData+0x1dc>)
    876a:	681b      	ldr	r3, [r3, #0]
    876c:	4a23      	ldr	r2, [pc, #140]	; (87fc <prvTraceInitTraceData+0x258>)
    876e:	2101      	movs	r1, #1
    8770:	5099      	str	r1, [r3, r2]
		vTraceStop();
    8772:	4b23      	ldr	r3, [pc, #140]	; (8800 <prvTraceInitTraceData+0x25c>)
    8774:	4798      	blx	r3
    8776:	e000      	b.n	877a <prvTraceInitTraceData+0x1d6>
			return;
    8778:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
    877a:	46bd      	mov	sp, r7
    877c:	bd80      	pop	{r7, pc}
    877e:	46c0      	nop			; (mov r8, r8)
    8780:	20000e14 	.word	0x20000e14
    8784:	2000467c 	.word	0x2000467c
    8788:	e000e018 	.word	0xe000e018
    878c:	2000524c 	.word	0x2000524c
    8790:	000247b7 	.word	0x000247b7
    8794:	00001aa1 	.word	0x00001aa1
    8798:	f0f0f0f0 	.word	0xf0f0f0f0
    879c:	00007709 	.word	0x00007709
    87a0:	0000055c 	.word	0x0000055c
    87a4:	f1f1f1f1 	.word	0xf1f1f1f1
    87a8:	00000564 	.word	0x00000564
    87ac:	f2f2f2f2 	.word	0xf2f2f2f2
    87b0:	000006bc 	.word	0x000006bc
    87b4:	00027b78 	.word	0x00027b78
    87b8:	00008b19 	.word	0x00008b19
    87bc:	0000070c 	.word	0x0000070c
    87c0:	f3f3f3f3 	.word	0xf3f3f3f3
    87c4:	00000bc4 	.word	0x00000bc4
    87c8:	00000bc5 	.word	0x00000bc5
    87cc:	00000bc6 	.word	0x00000bc6
    87d0:	00000bc7 	.word	0x00000bc7
    87d4:	00000bc8 	.word	0x00000bc8
    87d8:	00000bc9 	.word	0x00000bc9
    87dc:	00000bca 	.word	0x00000bca
    87e0:	00000bcb 	.word	0x00000bcb
    87e4:	00000bcc 	.word	0x00000bcc
    87e8:	00000bcd 	.word	0x00000bcd
    87ec:	00000bce 	.word	0x00000bce
    87f0:	00000bcf 	.word	0x00000bcf
    87f4:	000078a9 	.word	0x000078a9
    87f8:	20000d74 	.word	0x20000d74
    87fc:	000006b4 	.word	0x000006b4
    8800:	00007b11 	.word	0x00007b11

00008804 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
    8804:	b580      	push	{r7, lr}
    8806:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
    8808:	4b10      	ldr	r3, [pc, #64]	; (884c <prvTraceNextFreeEventBufferSlot+0x48>)
    880a:	681b      	ldr	r3, [r3, #0]
    880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    880e:	2b00      	cmp	r3, #0
    8810:	d101      	bne.n	8816 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
    8812:	2300      	movs	r3, #0
    8814:	e017      	b.n	8846 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    8816:	4b0d      	ldr	r3, [pc, #52]	; (884c <prvTraceNextFreeEventBufferSlot+0x48>)
    8818:	681b      	ldr	r3, [r3, #0]
    881a:	69da      	ldr	r2, [r3, #28]
    881c:	232c      	movs	r3, #44	; 0x2c
    881e:	33ff      	adds	r3, #255	; 0xff
    8820:	429a      	cmp	r2, r3
    8822:	d905      	bls.n	8830 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
    8824:	4b0a      	ldr	r3, [pc, #40]	; (8850 <prvTraceNextFreeEventBufferSlot+0x4c>)
    8826:	0018      	movs	r0, r3
    8828:	4b0a      	ldr	r3, [pc, #40]	; (8854 <prvTraceNextFreeEventBufferSlot+0x50>)
    882a:	4798      	blx	r3
		return NULL;
    882c:	2300      	movs	r3, #0
    882e:	e00a      	b.n	8846 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    8830:	4b06      	ldr	r3, [pc, #24]	; (884c <prvTraceNextFreeEventBufferSlot+0x48>)
    8832:	681a      	ldr	r2, [r3, #0]
    8834:	4b05      	ldr	r3, [pc, #20]	; (884c <prvTraceNextFreeEventBufferSlot+0x48>)
    8836:	681b      	ldr	r3, [r3, #0]
    8838:	69db      	ldr	r3, [r3, #28]
    883a:	009b      	lsls	r3, r3, #2
    883c:	21e2      	movs	r1, #226	; 0xe2
    883e:	00c9      	lsls	r1, r1, #3
    8840:	468c      	mov	ip, r1
    8842:	4463      	add	r3, ip
    8844:	18d3      	adds	r3, r2, r3
}
    8846:	0018      	movs	r0, r3
    8848:	46bd      	mov	sp, r7
    884a:	bd80      	pop	{r7, pc}
    884c:	20000e14 	.word	0x20000e14
    8850:	00027b8c 	.word	0x00027b8c
    8854:	00008c4d 	.word	0x00008c4d

00008858 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
    8858:	b580      	push	{r7, lr}
    885a:	b082      	sub	sp, #8
    885c:	af00      	add	r7, sp, #0
    885e:	0002      	movs	r2, r0
    8860:	1dfb      	adds	r3, r7, #7
    8862:	701a      	strb	r2, [r3, #0]
    8864:	1dbb      	adds	r3, r7, #6
    8866:	1c0a      	adds	r2, r1, #0
    8868:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    886a:	1dbb      	adds	r3, r7, #6
    886c:	781b      	ldrb	r3, [r3, #0]
    886e:	2b08      	cmp	r3, #8
    8870:	d905      	bls.n	887e <uiIndexOfObject+0x26>
    8872:	4b2a      	ldr	r3, [pc, #168]	; (891c <uiIndexOfObject+0xc4>)
    8874:	0018      	movs	r0, r3
    8876:	4b2a      	ldr	r3, [pc, #168]	; (8920 <uiIndexOfObject+0xc8>)
    8878:	4798      	blx	r3
    887a:	2300      	movs	r3, #0
    887c:	e049      	b.n	8912 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    887e:	1dfb      	adds	r3, r7, #7
    8880:	781b      	ldrb	r3, [r3, #0]
    8882:	2b00      	cmp	r3, #0
    8884:	d00b      	beq.n	889e <uiIndexOfObject+0x46>
    8886:	4b27      	ldr	r3, [pc, #156]	; (8924 <uiIndexOfObject+0xcc>)
    8888:	681a      	ldr	r2, [r3, #0]
    888a:	1dbb      	adds	r3, r7, #6
    888c:	781b      	ldrb	r3, [r3, #0]
    888e:	2164      	movs	r1, #100	; 0x64
    8890:	18d3      	adds	r3, r2, r3
    8892:	185b      	adds	r3, r3, r1
    8894:	781b      	ldrb	r3, [r3, #0]
    8896:	1dfa      	adds	r2, r7, #7
    8898:	7812      	ldrb	r2, [r2, #0]
    889a:	429a      	cmp	r2, r3
    889c:	d905      	bls.n	88aa <uiIndexOfObject+0x52>
    889e:	4b22      	ldr	r3, [pc, #136]	; (8928 <uiIndexOfObject+0xd0>)
    88a0:	0018      	movs	r0, r3
    88a2:	4b1f      	ldr	r3, [pc, #124]	; (8920 <uiIndexOfObject+0xc8>)
    88a4:	4798      	blx	r3
    88a6:	2300      	movs	r3, #0
    88a8:	e033      	b.n	8912 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    88aa:	1dbb      	adds	r3, r7, #6
    88ac:	781b      	ldrb	r3, [r3, #0]
    88ae:	2b08      	cmp	r3, #8
    88b0:	d82a      	bhi.n	8908 <uiIndexOfObject+0xb0>
    88b2:	1dfb      	adds	r3, r7, #7
    88b4:	781b      	ldrb	r3, [r3, #0]
    88b6:	2b00      	cmp	r3, #0
    88b8:	d026      	beq.n	8908 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
    88ba:	4b1a      	ldr	r3, [pc, #104]	; (8924 <uiIndexOfObject+0xcc>)
    88bc:	681a      	ldr	r2, [r3, #0]
    88be:	1dbb      	adds	r3, r7, #6
    88c0:	781b      	ldrb	r3, [r3, #0]
    88c2:	2164      	movs	r1, #100	; 0x64
    88c4:	18d3      	adds	r3, r2, r3
    88c6:	185b      	adds	r3, r3, r1
    88c8:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    88ca:	1dfa      	adds	r2, r7, #7
    88cc:	7812      	ldrb	r2, [r2, #0]
    88ce:	429a      	cmp	r2, r3
    88d0:	d81a      	bhi.n	8908 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    88d2:	4b14      	ldr	r3, [pc, #80]	; (8924 <uiIndexOfObject+0xcc>)
    88d4:	681a      	ldr	r2, [r3, #0]
    88d6:	1dbb      	adds	r3, r7, #6
    88d8:	781b      	ldrb	r3, [r3, #0]
    88da:	3340      	adds	r3, #64	; 0x40
    88dc:	005b      	lsls	r3, r3, #1
    88de:	18d3      	adds	r3, r2, r3
    88e0:	3308      	adds	r3, #8
    88e2:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    88e4:	4b0f      	ldr	r3, [pc, #60]	; (8924 <uiIndexOfObject+0xcc>)
    88e6:	6819      	ldr	r1, [r3, #0]
    88e8:	1dbb      	adds	r3, r7, #6
    88ea:	781b      	ldrb	r3, [r3, #0]
    88ec:	207c      	movs	r0, #124	; 0x7c
    88ee:	18cb      	adds	r3, r1, r3
    88f0:	181b      	adds	r3, r3, r0
    88f2:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    88f4:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    88f6:	1df9      	adds	r1, r7, #7
    88f8:	7809      	ldrb	r1, [r1, #0]
    88fa:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    88fc:	b289      	uxth	r1, r1
    88fe:	434b      	muls	r3, r1
    8900:	b29b      	uxth	r3, r3
    8902:	18d3      	adds	r3, r2, r3
    8904:	b29b      	uxth	r3, r3
    8906:	e004      	b.n	8912 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
    8908:	4b08      	ldr	r3, [pc, #32]	; (892c <uiIndexOfObject+0xd4>)
    890a:	0018      	movs	r0, r3
    890c:	4b04      	ldr	r3, [pc, #16]	; (8920 <uiIndexOfObject+0xc8>)
    890e:	4798      	blx	r3
	return 0;
    8910:	2300      	movs	r3, #0
}
    8912:	0018      	movs	r0, r3
    8914:	46bd      	mov	sp, r7
    8916:	b002      	add	sp, #8
    8918:	bd80      	pop	{r7, pc}
    891a:	46c0      	nop			; (mov r8, r8)
    891c:	00027bb4 	.word	0x00027bb4
    8920:	00008c4d 	.word	0x00008c4d
    8924:	20000e14 	.word	0x20000e14
    8928:	00027bf4 	.word	0x00027bf4
    892c:	00027c34 	.word	0x00027c34

00008930 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
    8930:	b580      	push	{r7, lr}
    8932:	b088      	sub	sp, #32
    8934:	af00      	add	r7, sp, #0
    8936:	0002      	movs	r2, r0
    8938:	1dfb      	adds	r3, r7, #7
    893a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    893c:	4b5a      	ldr	r3, [pc, #360]	; (8aa8 <prvTraceGetObjectHandle+0x178>)
    893e:	681b      	ldr	r3, [r3, #0]
    8940:	2b00      	cmp	r3, #0
    8942:	d105      	bne.n	8950 <prvTraceGetObjectHandle+0x20>
    8944:	4b59      	ldr	r3, [pc, #356]	; (8aac <prvTraceGetObjectHandle+0x17c>)
    8946:	0018      	movs	r0, r3
    8948:	4b59      	ldr	r3, [pc, #356]	; (8ab0 <prvTraceGetObjectHandle+0x180>)
    894a:	4798      	blx	r3
    894c:	2300      	movs	r3, #0
    894e:	e0a7      	b.n	8aa0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    8950:	1dfb      	adds	r3, r7, #7
    8952:	781b      	ldrb	r3, [r3, #0]
    8954:	2b08      	cmp	r3, #8
    8956:	d905      	bls.n	8964 <prvTraceGetObjectHandle+0x34>
    8958:	4b56      	ldr	r3, [pc, #344]	; (8ab4 <prvTraceGetObjectHandle+0x184>)
    895a:	0018      	movs	r0, r3
    895c:	4b54      	ldr	r3, [pc, #336]	; (8ab0 <prvTraceGetObjectHandle+0x180>)
    895e:	4798      	blx	r3
    8960:	2300      	movs	r3, #0
    8962:	e09d      	b.n	8aa0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8964:	f3ef 8310 	mrs	r3, PRIMASK
    8968:	60fb      	str	r3, [r7, #12]
  return(result);
    896a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
    896c:	61bb      	str	r3, [r7, #24]
    896e:	2301      	movs	r3, #1
    8970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    8972:	693b      	ldr	r3, [r7, #16]
    8974:	f383 8810 	msr	PRIMASK, r3
    8978:	4b4f      	ldr	r3, [pc, #316]	; (8ab8 <prvTraceGetObjectHandle+0x188>)
    897a:	681b      	ldr	r3, [r3, #0]
    897c:	1c5a      	adds	r2, r3, #1
    897e:	4b4e      	ldr	r3, [pc, #312]	; (8ab8 <prvTraceGetObjectHandle+0x188>)
    8980:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    8982:	1dfb      	adds	r3, r7, #7
    8984:	781a      	ldrb	r2, [r3, #0]
    8986:	4b4d      	ldr	r3, [pc, #308]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    8988:	0052      	lsls	r2, r2, #1
    898a:	5ad3      	ldrh	r3, [r2, r3]
    898c:	001a      	movs	r2, r3
    898e:	4b4c      	ldr	r3, [pc, #304]	; (8ac0 <prvTraceGetObjectHandle+0x190>)
    8990:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    8992:	4b4b      	ldr	r3, [pc, #300]	; (8ac0 <prvTraceGetObjectHandle+0x190>)
    8994:	681b      	ldr	r3, [r3, #0]
    8996:	4a49      	ldr	r2, [pc, #292]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    8998:	2148      	movs	r1, #72	; 0x48
    899a:	18d3      	adds	r3, r2, r3
    899c:	185b      	adds	r3, r3, r1
    899e:	781b      	ldrb	r3, [r3, #0]
    89a0:	2b00      	cmp	r3, #0
    89a2:	d117      	bne.n	89d4 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    89a4:	4b46      	ldr	r3, [pc, #280]	; (8ac0 <prvTraceGetObjectHandle+0x190>)
    89a6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    89a8:	4b45      	ldr	r3, [pc, #276]	; (8ac0 <prvTraceGetObjectHandle+0x190>)
    89aa:	681b      	ldr	r3, [r3, #0]
    89ac:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    89ae:	1dfb      	adds	r3, r7, #7
    89b0:	781b      	ldrb	r3, [r3, #0]
    89b2:	4842      	ldr	r0, [pc, #264]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    89b4:	3308      	adds	r3, #8
    89b6:	005b      	lsls	r3, r3, #1
    89b8:	18c3      	adds	r3, r0, r3
    89ba:	3302      	adds	r3, #2
    89bc:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    89be:	b2db      	uxtb	r3, r3
    89c0:	1acb      	subs	r3, r1, r3
    89c2:	b2db      	uxtb	r3, r3
    89c4:	3301      	adds	r3, #1
    89c6:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
    89c8:	4b3c      	ldr	r3, [pc, #240]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    89ca:	2148      	movs	r1, #72	; 0x48
    89cc:	189b      	adds	r3, r3, r2
    89ce:	185b      	adds	r3, r3, r1
    89d0:	1c02      	adds	r2, r0, #0
    89d2:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    89d4:	4b3a      	ldr	r3, [pc, #232]	; (8ac0 <prvTraceGetObjectHandle+0x190>)
    89d6:	681a      	ldr	r2, [r3, #0]
    89d8:	231f      	movs	r3, #31
    89da:	18fb      	adds	r3, r7, r3
    89dc:	4937      	ldr	r1, [pc, #220]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    89de:	2048      	movs	r0, #72	; 0x48
    89e0:	188a      	adds	r2, r1, r2
    89e2:	1812      	adds	r2, r2, r0
    89e4:	7812      	ldrb	r2, [r2, #0]
    89e6:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    89e8:	1dfb      	adds	r3, r7, #7
    89ea:	781a      	ldrb	r2, [r3, #0]
    89ec:	4b33      	ldr	r3, [pc, #204]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    89ee:	0052      	lsls	r2, r2, #1
    89f0:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    89f2:	1dfb      	adds	r3, r7, #7
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	4931      	ldr	r1, [pc, #196]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    89f8:	3310      	adds	r3, #16
    89fa:	005b      	lsls	r3, r3, #1
    89fc:	18cb      	adds	r3, r1, r3
    89fe:	3304      	adds	r3, #4
    8a00:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    8a02:	429a      	cmp	r2, r3
    8a04:	d90d      	bls.n	8a22 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    8a06:	1dfb      	adds	r3, r7, #7
    8a08:	781b      	ldrb	r3, [r3, #0]
    8a0a:	0018      	movs	r0, r3
    8a0c:	4b2d      	ldr	r3, [pc, #180]	; (8ac4 <prvTraceGetObjectHandle+0x194>)
    8a0e:	4798      	blx	r3
    8a10:	0003      	movs	r3, r0
    8a12:	0018      	movs	r0, r3
    8a14:	4b26      	ldr	r3, [pc, #152]	; (8ab0 <prvTraceGetObjectHandle+0x180>)
    8a16:	4798      	blx	r3
		handle = 0;
    8a18:	231f      	movs	r3, #31
    8a1a:	18fb      	adds	r3, r7, r3
    8a1c:	2200      	movs	r2, #0
    8a1e:	701a      	strb	r2, [r3, #0]
    8a20:	e031      	b.n	8a86 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    8a22:	1dfb      	adds	r3, r7, #7
    8a24:	781b      	ldrb	r3, [r3, #0]
    8a26:	4a25      	ldr	r2, [pc, #148]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    8a28:	0059      	lsls	r1, r3, #1
    8a2a:	5a8a      	ldrh	r2, [r1, r2]
    8a2c:	3201      	adds	r2, #1
    8a2e:	b291      	uxth	r1, r2
    8a30:	4a22      	ldr	r2, [pc, #136]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    8a32:	005b      	lsls	r3, r3, #1
    8a34:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    8a36:	1dfb      	adds	r3, r7, #7
    8a38:	781a      	ldrb	r2, [r3, #0]
    8a3a:	4b20      	ldr	r3, [pc, #128]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    8a3c:	0052      	lsls	r2, r2, #1
    8a3e:	5ad3      	ldrh	r3, [r2, r3]
    8a40:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
    8a42:	1dfb      	adds	r3, r7, #7
    8a44:	781b      	ldrb	r3, [r3, #0]
    8a46:	4a1d      	ldr	r2, [pc, #116]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    8a48:	3308      	adds	r3, #8
    8a4a:	005b      	lsls	r3, r3, #1
    8a4c:	18d3      	adds	r3, r2, r3
    8a4e:	3302      	adds	r3, #2
    8a50:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    8a52:	1acb      	subs	r3, r1, r3
    8a54:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    8a56:	1dfb      	adds	r3, r7, #7
    8a58:	781b      	ldrb	r3, [r3, #0]
    8a5a:	4a18      	ldr	r2, [pc, #96]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    8a5c:	3318      	adds	r3, #24
    8a5e:	005b      	lsls	r3, r3, #1
    8a60:	18d3      	adds	r3, r2, r3
    8a62:	3306      	adds	r3, #6
    8a64:	881b      	ldrh	r3, [r3, #0]
    8a66:	001a      	movs	r2, r3
		if (hndCount >
    8a68:	697b      	ldr	r3, [r7, #20]
    8a6a:	429a      	cmp	r2, r3
    8a6c:	da0b      	bge.n	8a86 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    8a6e:	1dfb      	adds	r3, r7, #7
    8a70:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
    8a72:	697a      	ldr	r2, [r7, #20]
    8a74:	b2d2      	uxtb	r2, r2
    8a76:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    8a78:	4a10      	ldr	r2, [pc, #64]	; (8abc <prvTraceGetObjectHandle+0x18c>)
    8a7a:	3318      	adds	r3, #24
    8a7c:	005b      	lsls	r3, r3, #1
    8a7e:	18d3      	adds	r3, r2, r3
    8a80:	3306      	adds	r3, #6
    8a82:	1c0a      	adds	r2, r1, #0
    8a84:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
    8a86:	4b0c      	ldr	r3, [pc, #48]	; (8ab8 <prvTraceGetObjectHandle+0x188>)
    8a88:	681b      	ldr	r3, [r3, #0]
    8a8a:	1e5a      	subs	r2, r3, #1
    8a8c:	4b0a      	ldr	r3, [pc, #40]	; (8ab8 <prvTraceGetObjectHandle+0x188>)
    8a8e:	601a      	str	r2, [r3, #0]
    8a90:	69bb      	ldr	r3, [r7, #24]
    8a92:	60bb      	str	r3, [r7, #8]
    8a94:	68bb      	ldr	r3, [r7, #8]
    8a96:	f383 8810 	msr	PRIMASK, r3

	return handle;
    8a9a:	231f      	movs	r3, #31
    8a9c:	18fb      	adds	r3, r7, r3
    8a9e:	781b      	ldrb	r3, [r3, #0]
}
    8aa0:	0018      	movs	r0, r3
    8aa2:	46bd      	mov	sp, r7
    8aa4:	b008      	add	sp, #32
    8aa6:	bd80      	pop	{r7, pc}
    8aa8:	20000e14 	.word	0x20000e14
    8aac:	00027094 	.word	0x00027094
    8ab0:	00008c4d 	.word	0x00008c4d
    8ab4:	00027c74 	.word	0x00027c74
    8ab8:	20000d6c 	.word	0x20000d6c
    8abc:	20000d84 	.word	0x20000d84
    8ac0:	20000e18 	.word	0x20000e18
    8ac4:	0000796d 	.word	0x0000796d

00008ac8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
    8ac8:	b590      	push	{r4, r7, lr}
    8aca:	b085      	sub	sp, #20
    8acc:	af00      	add	r7, sp, #0
    8ace:	0002      	movs	r2, r0
    8ad0:	1dfb      	adds	r3, r7, #7
    8ad2:	701a      	strb	r2, [r3, #0]
    8ad4:	1dbb      	adds	r3, r7, #6
    8ad6:	1c0a      	adds	r2, r1, #0
    8ad8:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    8ada:	230e      	movs	r3, #14
    8adc:	18fc      	adds	r4, r7, r3
    8ade:	1dfb      	adds	r3, r7, #7
    8ae0:	781a      	ldrb	r2, [r3, #0]
    8ae2:	1dbb      	adds	r3, r7, #6
    8ae4:	781b      	ldrb	r3, [r3, #0]
    8ae6:	0011      	movs	r1, r2
    8ae8:	0018      	movs	r0, r3
    8aea:	4b09      	ldr	r3, [pc, #36]	; (8b10 <prvMarkObjectAsUsed+0x48>)
    8aec:	4798      	blx	r3
    8aee:	0003      	movs	r3, r0
    8af0:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    8af2:	4b08      	ldr	r3, [pc, #32]	; (8b14 <prvMarkObjectAsUsed+0x4c>)
    8af4:	681a      	ldr	r2, [r3, #0]
    8af6:	230e      	movs	r3, #14
    8af8:	18fb      	adds	r3, r7, r3
    8afa:	881b      	ldrh	r3, [r3, #0]
    8afc:	219c      	movs	r1, #156	; 0x9c
    8afe:	18d3      	adds	r3, r2, r3
    8b00:	185b      	adds	r3, r3, r1
    8b02:	2201      	movs	r2, #1
    8b04:	701a      	strb	r2, [r3, #0]
}
    8b06:	46c0      	nop			; (mov r8, r8)
    8b08:	46bd      	mov	sp, r7
    8b0a:	b005      	add	sp, #20
    8b0c:	bd90      	pop	{r4, r7, pc}
    8b0e:	46c0      	nop			; (mov r8, r8)
    8b10:	00008859 	.word	0x00008859
    8b14:	20000e14 	.word	0x20000e14

00008b18 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    8b18:	b580      	push	{r7, lr}
    8b1a:	b086      	sub	sp, #24
    8b1c:	af00      	add	r7, sp, #0
    8b1e:	60f8      	str	r0, [r7, #12]
    8b20:	60b9      	str	r1, [r7, #8]
    8b22:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    8b24:	2300      	movs	r3, #0
    8b26:	617b      	str	r3, [r7, #20]
    8b28:	e010      	b.n	8b4c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
    8b2a:	68fa      	ldr	r2, [r7, #12]
    8b2c:	697b      	ldr	r3, [r7, #20]
    8b2e:	18d3      	adds	r3, r2, r3
    8b30:	68b9      	ldr	r1, [r7, #8]
    8b32:	697a      	ldr	r2, [r7, #20]
    8b34:	188a      	adds	r2, r1, r2
    8b36:	7812      	ldrb	r2, [r2, #0]
    8b38:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
    8b3a:	68ba      	ldr	r2, [r7, #8]
    8b3c:	697b      	ldr	r3, [r7, #20]
    8b3e:	18d3      	adds	r3, r2, r3
    8b40:	781b      	ldrb	r3, [r3, #0]
    8b42:	2b00      	cmp	r3, #0
    8b44:	d007      	beq.n	8b56 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
    8b46:	697b      	ldr	r3, [r7, #20]
    8b48:	3301      	adds	r3, #1
    8b4a:	617b      	str	r3, [r7, #20]
    8b4c:	697a      	ldr	r2, [r7, #20]
    8b4e:	687b      	ldr	r3, [r7, #4]
    8b50:	429a      	cmp	r2, r3
    8b52:	d3ea      	bcc.n	8b2a <prvStrncpy+0x12>
			break;
	}
}
    8b54:	e000      	b.n	8b58 <prvStrncpy+0x40>
			break;
    8b56:	46c0      	nop			; (mov r8, r8)
}
    8b58:	46c0      	nop			; (mov r8, r8)
    8b5a:	46bd      	mov	sp, r7
    8b5c:	b006      	add	sp, #24
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
    8b60:	b580      	push	{r7, lr}
    8b62:	b082      	sub	sp, #8
    8b64:	af00      	add	r7, sp, #0
    8b66:	603a      	str	r2, [r7, #0]
    8b68:	1dfb      	adds	r3, r7, #7
    8b6a:	1c02      	adds	r2, r0, #0
    8b6c:	701a      	strb	r2, [r3, #0]
    8b6e:	1dbb      	adds	r3, r7, #6
    8b70:	1c0a      	adds	r2, r1, #0
    8b72:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    8b74:	683b      	ldr	r3, [r7, #0]
    8b76:	2b00      	cmp	r3, #0
    8b78:	d104      	bne.n	8b84 <prvTraceSetObjectName+0x24>
    8b7a:	4b2a      	ldr	r3, [pc, #168]	; (8c24 <prvTraceSetObjectName+0xc4>)
    8b7c:	0018      	movs	r0, r3
    8b7e:	4b2a      	ldr	r3, [pc, #168]	; (8c28 <prvTraceSetObjectName+0xc8>)
    8b80:	4798      	blx	r3
    8b82:	e04b      	b.n	8c1c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
    8b84:	1dfb      	adds	r3, r7, #7
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	2b08      	cmp	r3, #8
    8b8a:	d904      	bls.n	8b96 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    8b8c:	4b27      	ldr	r3, [pc, #156]	; (8c2c <prvTraceSetObjectName+0xcc>)
    8b8e:	0018      	movs	r0, r3
    8b90:	4b25      	ldr	r3, [pc, #148]	; (8c28 <prvTraceSetObjectName+0xc8>)
    8b92:	4798      	blx	r3
		return;
    8b94:	e042      	b.n	8c1c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
    8b96:	1dbb      	adds	r3, r7, #6
    8b98:	781b      	ldrb	r3, [r3, #0]
    8b9a:	2b00      	cmp	r3, #0
    8b9c:	d104      	bne.n	8ba8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    8b9e:	4b24      	ldr	r3, [pc, #144]	; (8c30 <prvTraceSetObjectName+0xd0>)
    8ba0:	0018      	movs	r0, r3
    8ba2:	4b21      	ldr	r3, [pc, #132]	; (8c28 <prvTraceSetObjectName+0xc8>)
    8ba4:	4798      	blx	r3
		return;
    8ba6:	e039      	b.n	8c1c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    8ba8:	4b22      	ldr	r3, [pc, #136]	; (8c34 <prvTraceSetObjectName+0xd4>)
    8baa:	681a      	ldr	r2, [r3, #0]
    8bac:	1dfb      	adds	r3, r7, #7
    8bae:	781b      	ldrb	r3, [r3, #0]
    8bb0:	2164      	movs	r1, #100	; 0x64
    8bb2:	18d3      	adds	r3, r2, r3
    8bb4:	185b      	adds	r3, r3, r1
    8bb6:	781b      	ldrb	r3, [r3, #0]
    8bb8:	1dba      	adds	r2, r7, #6
    8bba:	7812      	ldrb	r2, [r2, #0]
    8bbc:	429a      	cmp	r2, r3
    8bbe:	d909      	bls.n	8bd4 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    8bc0:	1dfb      	adds	r3, r7, #7
    8bc2:	781b      	ldrb	r3, [r3, #0]
    8bc4:	0018      	movs	r0, r3
    8bc6:	4b1c      	ldr	r3, [pc, #112]	; (8c38 <prvTraceSetObjectName+0xd8>)
    8bc8:	4798      	blx	r3
    8bca:	0003      	movs	r3, r0
    8bcc:	0018      	movs	r0, r3
    8bce:	4b16      	ldr	r3, [pc, #88]	; (8c28 <prvTraceSetObjectName+0xc8>)
    8bd0:	4798      	blx	r3
    8bd2:	e023      	b.n	8c1c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    8bd4:	1dfb      	adds	r3, r7, #7
    8bd6:	781a      	ldrb	r2, [r3, #0]
    8bd8:	1dbb      	adds	r3, r7, #6
    8bda:	781b      	ldrb	r3, [r3, #0]
    8bdc:	0011      	movs	r1, r2
    8bde:	0018      	movs	r0, r3
    8be0:	4b16      	ldr	r3, [pc, #88]	; (8c3c <prvTraceSetObjectName+0xdc>)
    8be2:	4798      	blx	r3
    8be4:	0003      	movs	r3, r0
    8be6:	001a      	movs	r2, r3
    8be8:	4b15      	ldr	r3, [pc, #84]	; (8c40 <prvTraceSetObjectName+0xe0>)
    8bea:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
    8bec:	4b15      	ldr	r3, [pc, #84]	; (8c44 <prvTraceSetObjectName+0xe4>)
    8bee:	681b      	ldr	r3, [r3, #0]
    8bf0:	2b00      	cmp	r3, #0
    8bf2:	d113      	bne.n	8c1c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    8bf4:	4b0f      	ldr	r3, [pc, #60]	; (8c34 <prvTraceSetObjectName+0xd4>)
    8bf6:	681a      	ldr	r2, [r3, #0]
    8bf8:	4b11      	ldr	r3, [pc, #68]	; (8c40 <prvTraceSetObjectName+0xe0>)
    8bfa:	881b      	ldrh	r3, [r3, #0]
    8bfc:	3398      	adds	r3, #152	; 0x98
    8bfe:	18d3      	adds	r3, r2, r3
    8c00:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    8c02:	4b0c      	ldr	r3, [pc, #48]	; (8c34 <prvTraceSetObjectName+0xd4>)
    8c04:	681a      	ldr	r2, [r3, #0]
    8c06:	1dfb      	adds	r3, r7, #7
    8c08:	781b      	ldrb	r3, [r3, #0]
    8c0a:	2170      	movs	r1, #112	; 0x70
    8c0c:	18d3      	adds	r3, r2, r3
    8c0e:	185b      	adds	r3, r3, r1
    8c10:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    8c12:	001a      	movs	r2, r3
    8c14:	683b      	ldr	r3, [r7, #0]
    8c16:	0019      	movs	r1, r3
    8c18:	4b0b      	ldr	r3, [pc, #44]	; (8c48 <prvTraceSetObjectName+0xe8>)
    8c1a:	4798      	blx	r3
		}
	}
}
    8c1c:	46bd      	mov	sp, r7
    8c1e:	b002      	add	sp, #8
    8c20:	bd80      	pop	{r7, pc}
    8c22:	46c0      	nop			; (mov r8, r8)
    8c24:	00027d78 	.word	0x00027d78
    8c28:	00008c4d 	.word	0x00008c4d
    8c2c:	00027dac 	.word	0x00027dac
    8c30:	00027ddc 	.word	0x00027ddc
    8c34:	20000e14 	.word	0x20000e14
    8c38:	0000796d 	.word	0x0000796d
    8c3c:	00008859 	.word	0x00008859
    8c40:	20000e1c 	.word	0x20000e1c
    8c44:	20000d74 	.word	0x20000d74
    8c48:	00008b19 	.word	0x00008b19

00008c4c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    8c4c:	b580      	push	{r7, lr}
    8c4e:	b082      	sub	sp, #8
    8c50:	af00      	add	r7, sp, #0
    8c52:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    8c54:	4b11      	ldr	r3, [pc, #68]	; (8c9c <prvTraceError+0x50>)
    8c56:	681b      	ldr	r3, [r3, #0]
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d001      	beq.n	8c60 <prvTraceError+0x14>
	{
		vTraceStop();
    8c5c:	4b10      	ldr	r3, [pc, #64]	; (8ca0 <prvTraceError+0x54>)
    8c5e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    8c60:	4b10      	ldr	r3, [pc, #64]	; (8ca4 <prvTraceError+0x58>)
    8c62:	681b      	ldr	r3, [r3, #0]
    8c64:	2b00      	cmp	r3, #0
    8c66:	d115      	bne.n	8c94 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
    8c68:	4b0e      	ldr	r3, [pc, #56]	; (8ca4 <prvTraceError+0x58>)
    8c6a:	687a      	ldr	r2, [r7, #4]
    8c6c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
    8c6e:	4b0b      	ldr	r3, [pc, #44]	; (8c9c <prvTraceError+0x50>)
    8c70:	681b      	ldr	r3, [r3, #0]
    8c72:	2b00      	cmp	r3, #0
    8c74:	d00e      	beq.n	8c94 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    8c76:	4b09      	ldr	r3, [pc, #36]	; (8c9c <prvTraceError+0x50>)
    8c78:	681b      	ldr	r3, [r3, #0]
    8c7a:	4a0b      	ldr	r2, [pc, #44]	; (8ca8 <prvTraceError+0x5c>)
    8c7c:	1898      	adds	r0, r3, r2
    8c7e:	4b09      	ldr	r3, [pc, #36]	; (8ca4 <prvTraceError+0x58>)
    8c80:	681b      	ldr	r3, [r3, #0]
    8c82:	2250      	movs	r2, #80	; 0x50
    8c84:	0019      	movs	r1, r3
    8c86:	4b09      	ldr	r3, [pc, #36]	; (8cac <prvTraceError+0x60>)
    8c88:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    8c8a:	4b04      	ldr	r3, [pc, #16]	; (8c9c <prvTraceError+0x50>)
    8c8c:	681b      	ldr	r3, [r3, #0]
    8c8e:	4a08      	ldr	r2, [pc, #32]	; (8cb0 <prvTraceError+0x64>)
    8c90:	2101      	movs	r1, #1
    8c92:	5099      	str	r1, [r3, r2]
		}
	}
}
    8c94:	46c0      	nop			; (mov r8, r8)
    8c96:	46bd      	mov	sp, r7
    8c98:	b002      	add	sp, #8
    8c9a:	bd80      	pop	{r7, pc}
    8c9c:	20000e14 	.word	0x20000e14
    8ca0:	00007b11 	.word	0x00007b11
    8ca4:	20000d74 	.word	0x20000d74
    8ca8:	000006bc 	.word	0x000006bc
    8cac:	00008b19 	.word	0x00008b19
    8cb0:	000006b4 	.word	0x000006b4

00008cb4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    8cb4:	b580      	push	{r7, lr}
    8cb6:	b086      	sub	sp, #24
    8cb8:	af00      	add	r7, sp, #0
    8cba:	0002      	movs	r2, r0
    8cbc:	1dfb      	adds	r3, r7, #7
    8cbe:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
    8cc0:	2300      	movs	r3, #0
    8cc2:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
    8cc4:	2300      	movs	r3, #0
    8cc6:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    8cc8:	1dfb      	adds	r3, r7, #7
    8cca:	781b      	ldrb	r3, [r3, #0]
    8ccc:	2b00      	cmp	r3, #0
    8cce:	d000      	beq.n	8cd2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    8cd0:	e089      	b.n	8de6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
    8cd2:	4b49      	ldr	r3, [pc, #292]	; (8df8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    8cd4:	0018      	movs	r0, r3
    8cd6:	4b49      	ldr	r3, [pc, #292]	; (8dfc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
    8cd8:	4798      	blx	r3
    8cda:	e08a      	b.n	8df2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    8cdc:	4b48      	ldr	r3, [pc, #288]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8cde:	681b      	ldr	r3, [r3, #0]
    8ce0:	69da      	ldr	r2, [r3, #28]
    8ce2:	697b      	ldr	r3, [r7, #20]
    8ce4:	18d3      	adds	r3, r2, r3
    8ce6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    8ce8:	4b45      	ldr	r3, [pc, #276]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8cea:	6819      	ldr	r1, [r3, #0]
    8cec:	693b      	ldr	r3, [r7, #16]
    8cee:	009a      	lsls	r2, r3, #2
    8cf0:	23e2      	movs	r3, #226	; 0xe2
    8cf2:	00db      	lsls	r3, r3, #3
    8cf4:	188a      	adds	r2, r1, r2
    8cf6:	18d3      	adds	r3, r2, r3
    8cf8:	781b      	ldrb	r3, [r3, #0]
    8cfa:	2b98      	cmp	r3, #152	; 0x98
    8cfc:	d934      	bls.n	8d68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
    8cfe:	4b40      	ldr	r3, [pc, #256]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8d00:	6819      	ldr	r1, [r3, #0]
    8d02:	693b      	ldr	r3, [r7, #16]
    8d04:	009a      	lsls	r2, r3, #2
    8d06:	23e2      	movs	r3, #226	; 0xe2
    8d08:	00db      	lsls	r3, r3, #3
    8d0a:	188a      	adds	r2, r1, r2
    8d0c:	18d3      	adds	r3, r2, r3
    8d0e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    8d10:	2ba7      	cmp	r3, #167	; 0xa7
    8d12:	d829      	bhi.n	8d68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    8d14:	4b3a      	ldr	r3, [pc, #232]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8d16:	6819      	ldr	r1, [r3, #0]
    8d18:	693b      	ldr	r3, [r7, #16]
    8d1a:	009a      	lsls	r2, r3, #2
    8d1c:	23e2      	movs	r3, #226	; 0xe2
    8d1e:	00db      	lsls	r3, r3, #3
    8d20:	188a      	adds	r2, r1, r2
    8d22:	18d3      	adds	r3, r2, r3
    8d24:	781a      	ldrb	r2, [r3, #0]
    8d26:	230f      	movs	r3, #15
    8d28:	18fb      	adds	r3, r7, r3
    8d2a:	3268      	adds	r2, #104	; 0x68
    8d2c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    8d2e:	230f      	movs	r3, #15
    8d30:	18fb      	adds	r3, r7, r3
    8d32:	781a      	ldrb	r2, [r3, #0]
    8d34:	693b      	ldr	r3, [r7, #16]
    8d36:	18d2      	adds	r2, r2, r3
    8d38:	4b31      	ldr	r3, [pc, #196]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8d3a:	681b      	ldr	r3, [r3, #0]
    8d3c:	699b      	ldr	r3, [r3, #24]
    8d3e:	429a      	cmp	r2, r3
    8d40:	d24d      	bcs.n	8dde <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    8d42:	4b2f      	ldr	r3, [pc, #188]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8d44:	681a      	ldr	r2, [r3, #0]
    8d46:	693b      	ldr	r3, [r7, #16]
    8d48:	009b      	lsls	r3, r3, #2
    8d4a:	21e2      	movs	r1, #226	; 0xe2
    8d4c:	00c9      	lsls	r1, r1, #3
    8d4e:	468c      	mov	ip, r1
    8d50:	4463      	add	r3, ip
    8d52:	18d0      	adds	r0, r2, r3
    8d54:	230f      	movs	r3, #15
    8d56:	18fb      	adds	r3, r7, r3
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	3301      	adds	r3, #1
    8d5c:	009b      	lsls	r3, r3, #2
    8d5e:	001a      	movs	r2, r3
    8d60:	2100      	movs	r1, #0
    8d62:	4b28      	ldr	r3, [pc, #160]	; (8e04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    8d64:	4798      	blx	r3
		{
    8d66:	e03a      	b.n	8dde <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    8d68:	4b25      	ldr	r3, [pc, #148]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8d6a:	6819      	ldr	r1, [r3, #0]
    8d6c:	693b      	ldr	r3, [r7, #16]
    8d6e:	009a      	lsls	r2, r3, #2
    8d70:	23e2      	movs	r3, #226	; 0xe2
    8d72:	00db      	lsls	r3, r3, #3
    8d74:	188a      	adds	r2, r1, r2
    8d76:	18d3      	adds	r3, r2, r3
    8d78:	781b      	ldrb	r3, [r3, #0]
    8d7a:	2b01      	cmp	r3, #1
    8d7c:	d130      	bne.n	8de0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    8d7e:	693b      	ldr	r3, [r7, #16]
    8d80:	1c5a      	adds	r2, r3, #1
    8d82:	4b1f      	ldr	r3, [pc, #124]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8d84:	681b      	ldr	r3, [r3, #0]
    8d86:	699b      	ldr	r3, [r3, #24]
    8d88:	429a      	cmp	r2, r3
    8d8a:	d20e      	bcs.n	8daa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    8d8c:	4b1c      	ldr	r3, [pc, #112]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8d8e:	681a      	ldr	r2, [r3, #0]
    8d90:	693b      	ldr	r3, [r7, #16]
    8d92:	009b      	lsls	r3, r3, #2
    8d94:	21e2      	movs	r1, #226	; 0xe2
    8d96:	00c9      	lsls	r1, r1, #3
    8d98:	468c      	mov	ip, r1
    8d9a:	4463      	add	r3, ip
    8d9c:	18d3      	adds	r3, r2, r3
    8d9e:	2208      	movs	r2, #8
    8da0:	2100      	movs	r1, #0
    8da2:	0018      	movs	r0, r3
    8da4:	4b17      	ldr	r3, [pc, #92]	; (8e04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    8da6:	4798      	blx	r3
    8da8:	e01a      	b.n	8de0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    8daa:	4b15      	ldr	r3, [pc, #84]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8dac:	681b      	ldr	r3, [r3, #0]
    8dae:	22e2      	movs	r2, #226	; 0xe2
    8db0:	00d2      	lsls	r2, r2, #3
    8db2:	4694      	mov	ip, r2
    8db4:	4463      	add	r3, ip
    8db6:	2204      	movs	r2, #4
    8db8:	2100      	movs	r1, #0
    8dba:	0018      	movs	r0, r3
    8dbc:	4b11      	ldr	r3, [pc, #68]	; (8e04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    8dbe:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    8dc0:	4b0f      	ldr	r3, [pc, #60]	; (8e00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    8dc2:	681a      	ldr	r2, [r3, #0]
    8dc4:	693b      	ldr	r3, [r7, #16]
    8dc6:	009b      	lsls	r3, r3, #2
    8dc8:	21e2      	movs	r1, #226	; 0xe2
    8dca:	00c9      	lsls	r1, r1, #3
    8dcc:	468c      	mov	ip, r1
    8dce:	4463      	add	r3, ip
    8dd0:	18d3      	adds	r3, r2, r3
    8dd2:	2204      	movs	r2, #4
    8dd4:	2100      	movs	r1, #0
    8dd6:	0018      	movs	r0, r3
    8dd8:	4b0a      	ldr	r3, [pc, #40]	; (8e04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    8dda:	4798      	blx	r3
    8ddc:	e000      	b.n	8de0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
    8dde:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
    8de0:	697b      	ldr	r3, [r7, #20]
    8de2:	3301      	adds	r3, #1
    8de4:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
    8de6:	1dfb      	adds	r3, r7, #7
    8de8:	781a      	ldrb	r2, [r3, #0]
    8dea:	697b      	ldr	r3, [r7, #20]
    8dec:	429a      	cmp	r2, r3
    8dee:	d900      	bls.n	8df2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
    8df0:	e774      	b.n	8cdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
    8df2:	46bd      	mov	sp, r7
    8df4:	b006      	add	sp, #24
    8df6:	bd80      	pop	{r7, pc}
    8df8:	00027e3c 	.word	0x00027e3c
    8dfc:	00008c4d 	.word	0x00008c4d
    8e00:	20000e14 	.word	0x20000e14
    8e04:	000247b7 	.word	0x000247b7

00008e08 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    8e08:	b580      	push	{r7, lr}
    8e0a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
    8e0c:	4b12      	ldr	r3, [pc, #72]	; (8e58 <prvTraceUpdateCounters+0x50>)
    8e0e:	681b      	ldr	r3, [r3, #0]
    8e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8e12:	2b00      	cmp	r3, #0
    8e14:	d01c      	beq.n	8e50 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    8e16:	4b10      	ldr	r3, [pc, #64]	; (8e58 <prvTraceUpdateCounters+0x50>)
    8e18:	681b      	ldr	r3, [r3, #0]
    8e1a:	695a      	ldr	r2, [r3, #20]
    8e1c:	3201      	adds	r2, #1
    8e1e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    8e20:	4b0d      	ldr	r3, [pc, #52]	; (8e58 <prvTraceUpdateCounters+0x50>)
    8e22:	681b      	ldr	r3, [r3, #0]
    8e24:	69da      	ldr	r2, [r3, #28]
    8e26:	3201      	adds	r2, #1
    8e28:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    8e2a:	4b0b      	ldr	r3, [pc, #44]	; (8e58 <prvTraceUpdateCounters+0x50>)
    8e2c:	681b      	ldr	r3, [r3, #0]
    8e2e:	69da      	ldr	r2, [r3, #28]
    8e30:	232c      	movs	r3, #44	; 0x2c
    8e32:	33ff      	adds	r3, #255	; 0xff
    8e34:	429a      	cmp	r2, r3
    8e36:	d907      	bls.n	8e48 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    8e38:	4b07      	ldr	r3, [pc, #28]	; (8e58 <prvTraceUpdateCounters+0x50>)
    8e3a:	681b      	ldr	r3, [r3, #0]
    8e3c:	2201      	movs	r2, #1
    8e3e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    8e40:	4b05      	ldr	r3, [pc, #20]	; (8e58 <prvTraceUpdateCounters+0x50>)
    8e42:	681b      	ldr	r3, [r3, #0]
    8e44:	2200      	movs	r2, #0
    8e46:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    8e48:	2001      	movs	r0, #1
    8e4a:	4b04      	ldr	r3, [pc, #16]	; (8e5c <prvTraceUpdateCounters+0x54>)
    8e4c:	4798      	blx	r3
    8e4e:	e000      	b.n	8e52 <prvTraceUpdateCounters+0x4a>
		return;
    8e50:	46c0      	nop			; (mov r8, r8)
#endif
}
    8e52:	46bd      	mov	sp, r7
    8e54:	bd80      	pop	{r7, pc}
    8e56:	46c0      	nop			; (mov r8, r8)
    8e58:	20000e14 	.word	0x20000e14
    8e5c:	00008cb5 	.word	0x00008cb5

00008e60 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    8e60:	b5b0      	push	{r4, r5, r7, lr}
    8e62:	b086      	sub	sp, #24
    8e64:	af00      	add	r7, sp, #0
    8e66:	0002      	movs	r2, r0
    8e68:	1dbb      	adds	r3, r7, #6
    8e6a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
    8e6c:	2300      	movs	r3, #0
    8e6e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
    8e70:	2300      	movs	r3, #0
    8e72:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
    8e74:	2300      	movs	r3, #0
    8e76:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    8e78:	1dbb      	adds	r3, r7, #6
    8e7a:	881b      	ldrh	r3, [r3, #0]
    8e7c:	2bff      	cmp	r3, #255	; 0xff
    8e7e:	d00a      	beq.n	8e96 <prvTraceGetDTS+0x36>
    8e80:	1dbb      	adds	r3, r7, #6
    8e82:	881b      	ldrh	r3, [r3, #0]
    8e84:	4a60      	ldr	r2, [pc, #384]	; (9008 <prvTraceGetDTS+0x1a8>)
    8e86:	4293      	cmp	r3, r2
    8e88:	d005      	beq.n	8e96 <prvTraceGetDTS+0x36>
    8e8a:	4b60      	ldr	r3, [pc, #384]	; (900c <prvTraceGetDTS+0x1ac>)
    8e8c:	0018      	movs	r0, r3
    8e8e:	4b60      	ldr	r3, [pc, #384]	; (9010 <prvTraceGetDTS+0x1b0>)
    8e90:	4798      	blx	r3
    8e92:	2300      	movs	r3, #0
    8e94:	e0b3      	b.n	8ffe <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
    8e96:	4b5f      	ldr	r3, [pc, #380]	; (9014 <prvTraceGetDTS+0x1b4>)
    8e98:	681b      	ldr	r3, [r3, #0]
    8e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e9c:	2b00      	cmp	r3, #0
    8e9e:	d118      	bne.n	8ed2 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
    8ea0:	4b5d      	ldr	r3, [pc, #372]	; (9018 <prvTraceGetDTS+0x1b8>)
    8ea2:	681b      	ldr	r3, [r3, #0]
    8ea4:	2b00      	cmp	r3, #0
    8ea6:	d006      	beq.n	8eb6 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    8ea8:	4b5a      	ldr	r3, [pc, #360]	; (9014 <prvTraceGetDTS+0x1b4>)
    8eaa:	681b      	ldr	r3, [r3, #0]
    8eac:	4a5a      	ldr	r2, [pc, #360]	; (9018 <prvTraceGetDTS+0x1b8>)
    8eae:	6812      	ldr	r2, [r2, #0]
    8eb0:	0892      	lsrs	r2, r2, #2
    8eb2:	625a      	str	r2, [r3, #36]	; 0x24
    8eb4:	e00d      	b.n	8ed2 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    8eb6:	4b59      	ldr	r3, [pc, #356]	; (901c <prvTraceGetDTS+0x1bc>)
    8eb8:	681a      	ldr	r2, [r3, #0]
    8eba:	4b59      	ldr	r3, [pc, #356]	; (9020 <prvTraceGetDTS+0x1c0>)
    8ebc:	681b      	ldr	r3, [r3, #0]
    8ebe:	429a      	cmp	r2, r3
    8ec0:	d007      	beq.n	8ed2 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    8ec2:	4b54      	ldr	r3, [pc, #336]	; (9014 <prvTraceGetDTS+0x1b4>)
    8ec4:	681c      	ldr	r4, [r3, #0]
    8ec6:	2000      	movs	r0, #0
    8ec8:	4b56      	ldr	r3, [pc, #344]	; (9024 <prvTraceGetDTS+0x1c4>)
    8eca:	4798      	blx	r3
    8ecc:	0003      	movs	r3, r0
    8ece:	089b      	lsrs	r3, r3, #2
    8ed0:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
    8ed2:	230c      	movs	r3, #12
    8ed4:	18fb      	adds	r3, r7, r3
    8ed6:	0018      	movs	r0, r3
    8ed8:	4b53      	ldr	r3, [pc, #332]	; (9028 <prvTraceGetDTS+0x1c8>)
    8eda:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    8edc:	68fa      	ldr	r2, [r7, #12]
    8ede:	4b53      	ldr	r3, [pc, #332]	; (902c <prvTraceGetDTS+0x1cc>)
    8ee0:	681b      	ldr	r3, [r3, #0]
    8ee2:	1ad3      	subs	r3, r2, r3
    8ee4:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
    8ee6:	68fa      	ldr	r2, [r7, #12]
    8ee8:	4b50      	ldr	r3, [pc, #320]	; (902c <prvTraceGetDTS+0x1cc>)
    8eea:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
    8eec:	4b49      	ldr	r3, [pc, #292]	; (9014 <prvTraceGetDTS+0x1b4>)
    8eee:	681b      	ldr	r3, [r3, #0]
    8ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ef2:	2b00      	cmp	r3, #0
    8ef4:	d044      	beq.n	8f80 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    8ef6:	4b47      	ldr	r3, [pc, #284]	; (9014 <prvTraceGetDTS+0x1b4>)
    8ef8:	681b      	ldr	r3, [r3, #0]
    8efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8efc:	693b      	ldr	r3, [r7, #16]
    8efe:	429a      	cmp	r2, r3
    8f00:	d21e      	bcs.n	8f40 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    8f02:	4b44      	ldr	r3, [pc, #272]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f04:	681c      	ldr	r4, [r3, #0]
    8f06:	4b43      	ldr	r3, [pc, #268]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f08:	681b      	ldr	r3, [r3, #0]
    8f0a:	6add      	ldr	r5, [r3, #44]	; 0x2c
    8f0c:	4b41      	ldr	r3, [pc, #260]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f0e:	681b      	ldr	r3, [r3, #0]
    8f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8f12:	4b47      	ldr	r3, [pc, #284]	; (9030 <prvTraceGetDTS+0x1d0>)
    8f14:	0011      	movs	r1, r2
    8f16:	6938      	ldr	r0, [r7, #16]
    8f18:	4798      	blx	r3
    8f1a:	0003      	movs	r3, r0
    8f1c:	18eb      	adds	r3, r5, r3
    8f1e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    8f20:	4b3c      	ldr	r3, [pc, #240]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f22:	681c      	ldr	r4, [r3, #0]
    8f24:	4b3b      	ldr	r3, [pc, #236]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f26:	681b      	ldr	r3, [r3, #0]
    8f28:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    8f2a:	4b3a      	ldr	r3, [pc, #232]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f2c:	681b      	ldr	r3, [r3, #0]
    8f2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    8f30:	693a      	ldr	r2, [r7, #16]
    8f32:	4b40      	ldr	r3, [pc, #256]	; (9034 <prvTraceGetDTS+0x1d4>)
    8f34:	0010      	movs	r0, r2
    8f36:	4798      	blx	r3
    8f38:	000b      	movs	r3, r1
    8f3a:	18eb      	adds	r3, r5, r3
    8f3c:	62a3      	str	r3, [r4, #40]	; 0x28
    8f3e:	e007      	b.n	8f50 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    8f40:	4b34      	ldr	r3, [pc, #208]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f42:	681b      	ldr	r3, [r3, #0]
    8f44:	4a33      	ldr	r2, [pc, #204]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f46:	6812      	ldr	r2, [r2, #0]
    8f48:	6a91      	ldr	r1, [r2, #40]	; 0x28
    8f4a:	693a      	ldr	r2, [r7, #16]
    8f4c:	188a      	adds	r2, r1, r2
    8f4e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    8f50:	4b30      	ldr	r3, [pc, #192]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f52:	681b      	ldr	r3, [r3, #0]
    8f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8f56:	4b2f      	ldr	r3, [pc, #188]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f58:	681b      	ldr	r3, [r3, #0]
    8f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f5c:	429a      	cmp	r2, r3
    8f5e:	d313      	bcc.n	8f88 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    8f60:	4b2c      	ldr	r3, [pc, #176]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f62:	681b      	ldr	r3, [r3, #0]
    8f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f66:	3201      	adds	r2, #1
    8f68:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    8f6a:	4b2a      	ldr	r3, [pc, #168]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f6c:	681b      	ldr	r3, [r3, #0]
    8f6e:	4a29      	ldr	r2, [pc, #164]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f70:	6812      	ldr	r2, [r2, #0]
    8f72:	6a91      	ldr	r1, [r2, #40]	; 0x28
    8f74:	4a27      	ldr	r2, [pc, #156]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f76:	6812      	ldr	r2, [r2, #0]
    8f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8f7a:	1a8a      	subs	r2, r1, r2
    8f7c:	629a      	str	r2, [r3, #40]	; 0x28
    8f7e:	e003      	b.n	8f88 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    8f80:	4b24      	ldr	r3, [pc, #144]	; (9014 <prvTraceGetDTS+0x1b4>)
    8f82:	681b      	ldr	r3, [r3, #0]
    8f84:	68fa      	ldr	r2, [r7, #12]
    8f86:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    8f88:	1dbb      	adds	r3, r7, #6
    8f8a:	881a      	ldrh	r2, [r3, #0]
    8f8c:	693b      	ldr	r3, [r7, #16]
    8f8e:	429a      	cmp	r2, r3
    8f90:	d22f      	bcs.n	8ff2 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    8f92:	4b29      	ldr	r3, [pc, #164]	; (9038 <prvTraceGetDTS+0x1d8>)
    8f94:	4798      	blx	r3
    8f96:	0003      	movs	r3, r0
    8f98:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
    8f9a:	697b      	ldr	r3, [r7, #20]
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d028      	beq.n	8ff2 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
    8fa0:	1dbb      	adds	r3, r7, #6
    8fa2:	881b      	ldrh	r3, [r3, #0]
    8fa4:	4a18      	ldr	r2, [pc, #96]	; (9008 <prvTraceGetDTS+0x1a8>)
    8fa6:	4293      	cmp	r3, r2
    8fa8:	d10b      	bne.n	8fc2 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
    8faa:	697b      	ldr	r3, [r7, #20]
    8fac:	22a9      	movs	r2, #169	; 0xa9
    8fae:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    8fb0:	693b      	ldr	r3, [r7, #16]
    8fb2:	0c1b      	lsrs	r3, r3, #16
    8fb4:	b29a      	uxth	r2, r3
    8fb6:	697b      	ldr	r3, [r7, #20]
    8fb8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
    8fba:	697b      	ldr	r3, [r7, #20]
    8fbc:	2200      	movs	r2, #0
    8fbe:	705a      	strb	r2, [r3, #1]
    8fc0:	e015      	b.n	8fee <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
    8fc2:	1dbb      	adds	r3, r7, #6
    8fc4:	881b      	ldrh	r3, [r3, #0]
    8fc6:	2bff      	cmp	r3, #255	; 0xff
    8fc8:	d10d      	bne.n	8fe6 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
    8fca:	697b      	ldr	r3, [r7, #20]
    8fcc:	22a8      	movs	r2, #168	; 0xa8
    8fce:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    8fd0:	693b      	ldr	r3, [r7, #16]
    8fd2:	0a1b      	lsrs	r3, r3, #8
    8fd4:	b29a      	uxth	r2, r3
    8fd6:	697b      	ldr	r3, [r7, #20]
    8fd8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    8fda:	693b      	ldr	r3, [r7, #16]
    8fdc:	0e1b      	lsrs	r3, r3, #24
    8fde:	b2da      	uxtb	r2, r3
    8fe0:	697b      	ldr	r3, [r7, #20]
    8fe2:	705a      	strb	r2, [r3, #1]
    8fe4:	e003      	b.n	8fee <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    8fe6:	4b15      	ldr	r3, [pc, #84]	; (903c <prvTraceGetDTS+0x1dc>)
    8fe8:	0018      	movs	r0, r3
    8fea:	4b09      	ldr	r3, [pc, #36]	; (9010 <prvTraceGetDTS+0x1b0>)
    8fec:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    8fee:	4b14      	ldr	r3, [pc, #80]	; (9040 <prvTraceGetDTS+0x1e0>)
    8ff0:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    8ff2:	693b      	ldr	r3, [r7, #16]
    8ff4:	b29b      	uxth	r3, r3
    8ff6:	1dba      	adds	r2, r7, #6
    8ff8:	8812      	ldrh	r2, [r2, #0]
    8ffa:	4013      	ands	r3, r2
    8ffc:	b29b      	uxth	r3, r3
}
    8ffe:	0018      	movs	r0, r3
    9000:	46bd      	mov	sp, r7
    9002:	b006      	add	sp, #24
    9004:	bdb0      	pop	{r4, r5, r7, pc}
    9006:	46c0      	nop			; (mov r8, r8)
    9008:	0000ffff 	.word	0x0000ffff
    900c:	00027e94 	.word	0x00027e94
    9010:	00008c4d 	.word	0x00008c4d
    9014:	20000e14 	.word	0x20000e14
    9018:	20000d70 	.word	0x20000d70
    901c:	e000e018 	.word	0xe000e018
    9020:	2000524c 	.word	0x2000524c
    9024:	00019069 	.word	0x00019069
    9028:	00009045 	.word	0x00009045
    902c:	20000e20 	.word	0x20000e20
    9030:	00021cfd 	.word	0x00021cfd
    9034:	00021e09 	.word	0x00021e09
    9038:	00008805 	.word	0x00008805
    903c:	00027ed4 	.word	0x00027ed4
    9040:	00008e09 	.word	0x00008e09

00009044 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    9044:	b580      	push	{r7, lr}
    9046:	b084      	sub	sp, #16
    9048:	af00      	add	r7, sp, #0
    904a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
    904c:	2300      	movs	r3, #0
    904e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
    9050:	2300      	movs	r3, #0
    9052:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    9054:	4b2d      	ldr	r3, [pc, #180]	; (910c <prvTracePortGetTimeStamp+0xc8>)
    9056:	681b      	ldr	r3, [r3, #0]
    9058:	2b01      	cmp	r3, #1
    905a:	d107      	bne.n	906c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	2b00      	cmp	r3, #0
    9060:	d04f      	beq.n	9102 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
    9062:	4b2b      	ldr	r3, [pc, #172]	; (9110 <prvTracePortGetTimeStamp+0xcc>)
    9064:	681a      	ldr	r2, [r3, #0]
    9066:	687b      	ldr	r3, [r7, #4]
    9068:	601a      	str	r2, [r3, #0]
		return;
    906a:	e04a      	b.n	9102 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    906c:	4b29      	ldr	r3, [pc, #164]	; (9114 <prvTracePortGetTimeStamp+0xd0>)
    906e:	681a      	ldr	r2, [r3, #0]
    9070:	4b29      	ldr	r3, [pc, #164]	; (9118 <prvTracePortGetTimeStamp+0xd4>)
    9072:	681b      	ldr	r3, [r3, #0]
    9074:	1ad3      	subs	r3, r2, r3
    9076:	3301      	adds	r3, #1
    9078:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    907a:	4b28      	ldr	r3, [pc, #160]	; (911c <prvTracePortGetTimeStamp+0xd8>)
    907c:	681a      	ldr	r2, [r3, #0]
    907e:	4b28      	ldr	r3, [pc, #160]	; (9120 <prvTracePortGetTimeStamp+0xdc>)
    9080:	681b      	ldr	r3, [r3, #0]
    9082:	1ad3      	subs	r3, r2, r3
    9084:	3b01      	subs	r3, #1
    9086:	2b00      	cmp	r3, #0
    9088:	db03      	blt.n	9092 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
    908a:	4b24      	ldr	r3, [pc, #144]	; (911c <prvTracePortGetTimeStamp+0xd8>)
    908c:	681b      	ldr	r3, [r3, #0]
    908e:	60fb      	str	r3, [r7, #12]
    9090:	e002      	b.n	9098 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    9092:	4b23      	ldr	r3, [pc, #140]	; (9120 <prvTracePortGetTimeStamp+0xdc>)
    9094:	681b      	ldr	r3, [r3, #0]
    9096:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    9098:	4b20      	ldr	r3, [pc, #128]	; (911c <prvTracePortGetTimeStamp+0xd8>)
    909a:	681b      	ldr	r3, [r3, #0]
    909c:	68fa      	ldr	r2, [r7, #12]
    909e:	429a      	cmp	r2, r3
    90a0:	d107      	bne.n	90b2 <prvTracePortGetTimeStamp+0x6e>
    90a2:	4b20      	ldr	r3, [pc, #128]	; (9124 <prvTracePortGetTimeStamp+0xe0>)
    90a4:	681b      	ldr	r3, [r3, #0]
    90a6:	68ba      	ldr	r2, [r7, #8]
    90a8:	429a      	cmp	r2, r3
    90aa:	d202      	bcs.n	90b2 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    90ac:	68fb      	ldr	r3, [r7, #12]
    90ae:	3301      	adds	r3, #1
    90b0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    90b2:	687b      	ldr	r3, [r7, #4]
    90b4:	2b00      	cmp	r3, #0
    90b6:	d016      	beq.n	90e6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    90b8:	4b16      	ldr	r3, [pc, #88]	; (9114 <prvTracePortGetTimeStamp+0xd0>)
    90ba:	681b      	ldr	r3, [r3, #0]
    90bc:	3301      	adds	r3, #1
    90be:	089b      	lsrs	r3, r3, #2
    90c0:	68fa      	ldr	r2, [r7, #12]
    90c2:	435a      	muls	r2, r3
    90c4:	4b12      	ldr	r3, [pc, #72]	; (9110 <prvTracePortGetTimeStamp+0xcc>)
    90c6:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    90c8:	4b12      	ldr	r3, [pc, #72]	; (9114 <prvTracePortGetTimeStamp+0xd0>)
    90ca:	681b      	ldr	r3, [r3, #0]
    90cc:	3301      	adds	r3, #1
    90ce:	2203      	movs	r2, #3
    90d0:	4013      	ands	r3, r2
    90d2:	68fa      	ldr	r2, [r7, #12]
    90d4:	435a      	muls	r2, r3
    90d6:	68bb      	ldr	r3, [r7, #8]
    90d8:	18d3      	adds	r3, r2, r3
    90da:	089a      	lsrs	r2, r3, #2
    90dc:	4b0c      	ldr	r3, [pc, #48]	; (9110 <prvTracePortGetTimeStamp+0xcc>)
    90de:	681b      	ldr	r3, [r3, #0]
    90e0:	18d2      	adds	r2, r2, r3
    90e2:	4b0b      	ldr	r3, [pc, #44]	; (9110 <prvTracePortGetTimeStamp+0xcc>)
    90e4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    90e6:	4b0d      	ldr	r3, [pc, #52]	; (911c <prvTracePortGetTimeStamp+0xd8>)
    90e8:	68fa      	ldr	r2, [r7, #12]
    90ea:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
    90ec:	687b      	ldr	r3, [r7, #4]
    90ee:	2b00      	cmp	r3, #0
    90f0:	d003      	beq.n	90fa <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
    90f2:	4b07      	ldr	r3, [pc, #28]	; (9110 <prvTracePortGetTimeStamp+0xcc>)
    90f4:	681a      	ldr	r2, [r3, #0]
    90f6:	687b      	ldr	r3, [r7, #4]
    90f8:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    90fa:	4b0a      	ldr	r3, [pc, #40]	; (9124 <prvTracePortGetTimeStamp+0xe0>)
    90fc:	68ba      	ldr	r2, [r7, #8]
    90fe:	601a      	str	r2, [r3, #0]
    9100:	e000      	b.n	9104 <prvTracePortGetTimeStamp+0xc0>
		return;
    9102:	46c0      	nop			; (mov r8, r8)
}
    9104:	46bd      	mov	sp, r7
    9106:	b004      	add	sp, #16
    9108:	bd80      	pop	{r7, pc}
    910a:	46c0      	nop			; (mov r8, r8)
    910c:	20000d60 	.word	0x20000d60
    9110:	20000d64 	.word	0x20000d64
    9114:	e000e014 	.word	0xe000e014
    9118:	e000e018 	.word	0xe000e018
    911c:	20000e24 	.word	0x20000e24
    9120:	20000d5c 	.word	0x20000d5c
    9124:	20000e28 	.word	0x20000e28

00009128 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    9128:	b580      	push	{r7, lr}
    912a:	b082      	sub	sp, #8
    912c:	af00      	add	r7, sp, #0
    912e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9130:	687b      	ldr	r3, [r7, #4]
    9132:	3308      	adds	r3, #8
    9134:	001a      	movs	r2, r3
    9136:	687b      	ldr	r3, [r7, #4]
    9138:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	2201      	movs	r2, #1
    913e:	4252      	negs	r2, r2
    9140:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9142:	687b      	ldr	r3, [r7, #4]
    9144:	3308      	adds	r3, #8
    9146:	001a      	movs	r2, r3
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	3308      	adds	r3, #8
    9150:	001a      	movs	r2, r3
    9152:	687b      	ldr	r3, [r7, #4]
    9154:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    9156:	687b      	ldr	r3, [r7, #4]
    9158:	2200      	movs	r2, #0
    915a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    915c:	46c0      	nop			; (mov r8, r8)
    915e:	46bd      	mov	sp, r7
    9160:	b002      	add	sp, #8
    9162:	bd80      	pop	{r7, pc}

00009164 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    9164:	b580      	push	{r7, lr}
    9166:	b082      	sub	sp, #8
    9168:	af00      	add	r7, sp, #0
    916a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	2200      	movs	r2, #0
    9170:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    9172:	46c0      	nop			; (mov r8, r8)
    9174:	46bd      	mov	sp, r7
    9176:	b002      	add	sp, #8
    9178:	bd80      	pop	{r7, pc}

0000917a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    917a:	b580      	push	{r7, lr}
    917c:	b084      	sub	sp, #16
    917e:	af00      	add	r7, sp, #0
    9180:	6078      	str	r0, [r7, #4]
    9182:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    9184:	687b      	ldr	r3, [r7, #4]
    9186:	685b      	ldr	r3, [r3, #4]
    9188:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    918a:	683b      	ldr	r3, [r7, #0]
    918c:	68fa      	ldr	r2, [r7, #12]
    918e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    9190:	68fb      	ldr	r3, [r7, #12]
    9192:	689a      	ldr	r2, [r3, #8]
    9194:	683b      	ldr	r3, [r7, #0]
    9196:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    9198:	68fb      	ldr	r3, [r7, #12]
    919a:	689b      	ldr	r3, [r3, #8]
    919c:	683a      	ldr	r2, [r7, #0]
    919e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    91a0:	68fb      	ldr	r3, [r7, #12]
    91a2:	683a      	ldr	r2, [r7, #0]
    91a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    91a6:	683b      	ldr	r3, [r7, #0]
    91a8:	687a      	ldr	r2, [r7, #4]
    91aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	681b      	ldr	r3, [r3, #0]
    91b0:	1c5a      	adds	r2, r3, #1
    91b2:	687b      	ldr	r3, [r7, #4]
    91b4:	601a      	str	r2, [r3, #0]
}
    91b6:	46c0      	nop			; (mov r8, r8)
    91b8:	46bd      	mov	sp, r7
    91ba:	b004      	add	sp, #16
    91bc:	bd80      	pop	{r7, pc}

000091be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    91be:	b580      	push	{r7, lr}
    91c0:	b084      	sub	sp, #16
    91c2:	af00      	add	r7, sp, #0
    91c4:	6078      	str	r0, [r7, #4]
    91c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    91c8:	683b      	ldr	r3, [r7, #0]
    91ca:	681b      	ldr	r3, [r3, #0]
    91cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    91ce:	68bb      	ldr	r3, [r7, #8]
    91d0:	3301      	adds	r3, #1
    91d2:	d103      	bne.n	91dc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	691b      	ldr	r3, [r3, #16]
    91d8:	60fb      	str	r3, [r7, #12]
    91da:	e00c      	b.n	91f6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    91dc:	687b      	ldr	r3, [r7, #4]
    91de:	3308      	adds	r3, #8
    91e0:	60fb      	str	r3, [r7, #12]
    91e2:	e002      	b.n	91ea <vListInsert+0x2c>
    91e4:	68fb      	ldr	r3, [r7, #12]
    91e6:	685b      	ldr	r3, [r3, #4]
    91e8:	60fb      	str	r3, [r7, #12]
    91ea:	68fb      	ldr	r3, [r7, #12]
    91ec:	685b      	ldr	r3, [r3, #4]
    91ee:	681a      	ldr	r2, [r3, #0]
    91f0:	68bb      	ldr	r3, [r7, #8]
    91f2:	429a      	cmp	r2, r3
    91f4:	d9f6      	bls.n	91e4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    91f6:	68fb      	ldr	r3, [r7, #12]
    91f8:	685a      	ldr	r2, [r3, #4]
    91fa:	683b      	ldr	r3, [r7, #0]
    91fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    91fe:	683b      	ldr	r3, [r7, #0]
    9200:	685b      	ldr	r3, [r3, #4]
    9202:	683a      	ldr	r2, [r7, #0]
    9204:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    9206:	683b      	ldr	r3, [r7, #0]
    9208:	68fa      	ldr	r2, [r7, #12]
    920a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    920c:	68fb      	ldr	r3, [r7, #12]
    920e:	683a      	ldr	r2, [r7, #0]
    9210:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    9212:	683b      	ldr	r3, [r7, #0]
    9214:	687a      	ldr	r2, [r7, #4]
    9216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    9218:	687b      	ldr	r3, [r7, #4]
    921a:	681b      	ldr	r3, [r3, #0]
    921c:	1c5a      	adds	r2, r3, #1
    921e:	687b      	ldr	r3, [r7, #4]
    9220:	601a      	str	r2, [r3, #0]
}
    9222:	46c0      	nop			; (mov r8, r8)
    9224:	46bd      	mov	sp, r7
    9226:	b004      	add	sp, #16
    9228:	bd80      	pop	{r7, pc}

0000922a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    922a:	b580      	push	{r7, lr}
    922c:	b084      	sub	sp, #16
    922e:	af00      	add	r7, sp, #0
    9230:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    9232:	687b      	ldr	r3, [r7, #4]
    9234:	691b      	ldr	r3, [r3, #16]
    9236:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	685b      	ldr	r3, [r3, #4]
    923c:	687a      	ldr	r2, [r7, #4]
    923e:	6892      	ldr	r2, [r2, #8]
    9240:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    9242:	687b      	ldr	r3, [r7, #4]
    9244:	689b      	ldr	r3, [r3, #8]
    9246:	687a      	ldr	r2, [r7, #4]
    9248:	6852      	ldr	r2, [r2, #4]
    924a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    924c:	68fb      	ldr	r3, [r7, #12]
    924e:	685a      	ldr	r2, [r3, #4]
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	429a      	cmp	r2, r3
    9254:	d103      	bne.n	925e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    9256:	687b      	ldr	r3, [r7, #4]
    9258:	689a      	ldr	r2, [r3, #8]
    925a:	68fb      	ldr	r3, [r7, #12]
    925c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    925e:	687b      	ldr	r3, [r7, #4]
    9260:	2200      	movs	r2, #0
    9262:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    9264:	68fb      	ldr	r3, [r7, #12]
    9266:	681b      	ldr	r3, [r3, #0]
    9268:	1e5a      	subs	r2, r3, #1
    926a:	68fb      	ldr	r3, [r7, #12]
    926c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    926e:	68fb      	ldr	r3, [r7, #12]
    9270:	681b      	ldr	r3, [r3, #0]
}
    9272:	0018      	movs	r0, r3
    9274:	46bd      	mov	sp, r7
    9276:	b004      	add	sp, #16
    9278:	bd80      	pop	{r7, pc}
	...

0000927c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    927c:	b580      	push	{r7, lr}
    927e:	b084      	sub	sp, #16
    9280:	af00      	add	r7, sp, #0
    9282:	60f8      	str	r0, [r7, #12]
    9284:	60b9      	str	r1, [r7, #8]
    9286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    9288:	68fb      	ldr	r3, [r7, #12]
    928a:	3b04      	subs	r3, #4
    928c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    928e:	68fb      	ldr	r3, [r7, #12]
    9290:	2280      	movs	r2, #128	; 0x80
    9292:	0452      	lsls	r2, r2, #17
    9294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    9296:	68fb      	ldr	r3, [r7, #12]
    9298:	3b04      	subs	r3, #4
    929a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    929c:	68ba      	ldr	r2, [r7, #8]
    929e:	68fb      	ldr	r3, [r7, #12]
    92a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    92a2:	68fb      	ldr	r3, [r7, #12]
    92a4:	3b04      	subs	r3, #4
    92a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    92a8:	4a08      	ldr	r2, [pc, #32]	; (92cc <pxPortInitialiseStack+0x50>)
    92aa:	68fb      	ldr	r3, [r7, #12]
    92ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    92ae:	68fb      	ldr	r3, [r7, #12]
    92b0:	3b14      	subs	r3, #20
    92b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    92b4:	687a      	ldr	r2, [r7, #4]
    92b6:	68fb      	ldr	r3, [r7, #12]
    92b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    92ba:	68fb      	ldr	r3, [r7, #12]
    92bc:	3b20      	subs	r3, #32
    92be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    92c0:	68fb      	ldr	r3, [r7, #12]
}
    92c2:	0018      	movs	r0, r3
    92c4:	46bd      	mov	sp, r7
    92c6:	b004      	add	sp, #16
    92c8:	bd80      	pop	{r7, pc}
    92ca:	46c0      	nop			; (mov r8, r8)
    92cc:	000092d1 	.word	0x000092d1

000092d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    92d0:	b580      	push	{r7, lr}
    92d2:	b082      	sub	sp, #8
    92d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    92d6:	2300      	movs	r3, #0
    92d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    92da:	4b07      	ldr	r3, [pc, #28]	; (92f8 <prvTaskExitError+0x28>)
    92dc:	681b      	ldr	r3, [r3, #0]
    92de:	3301      	adds	r3, #1
    92e0:	d001      	beq.n	92e6 <prvTaskExitError+0x16>
    92e2:	b672      	cpsid	i
    92e4:	e7fe      	b.n	92e4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    92e6:	b672      	cpsid	i
	while( ulDummy == 0 )
    92e8:	46c0      	nop			; (mov r8, r8)
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	2b00      	cmp	r3, #0
    92ee:	d0fc      	beq.n	92ea <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    92f0:	46c0      	nop			; (mov r8, r8)
    92f2:	46bd      	mov	sp, r7
    92f4:	b002      	add	sp, #8
    92f6:	bd80      	pop	{r7, pc}
    92f8:	20000108 	.word	0x20000108

000092fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    92fc:	b580      	push	{r7, lr}
    92fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    9300:	46c0      	nop			; (mov r8, r8)
    9302:	46bd      	mov	sp, r7
    9304:	bd80      	pop	{r7, pc}
	...

00009310 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    9310:	4a0b      	ldr	r2, [pc, #44]	; (9340 <pxCurrentTCBConst2>)
    9312:	6813      	ldr	r3, [r2, #0]
    9314:	6818      	ldr	r0, [r3, #0]
    9316:	3020      	adds	r0, #32
    9318:	f380 8809 	msr	PSP, r0
    931c:	2002      	movs	r0, #2
    931e:	f380 8814 	msr	CONTROL, r0
    9322:	f3bf 8f6f 	isb	sy
    9326:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    9328:	46ae      	mov	lr, r5
    932a:	bc08      	pop	{r3}
    932c:	bc04      	pop	{r2}
    932e:	b662      	cpsie	i
    9330:	4718      	bx	r3
    9332:	46c0      	nop			; (mov r8, r8)
    9334:	46c0      	nop			; (mov r8, r8)
    9336:	46c0      	nop			; (mov r8, r8)
    9338:	46c0      	nop			; (mov r8, r8)
    933a:	46c0      	nop			; (mov r8, r8)
    933c:	46c0      	nop			; (mov r8, r8)
    933e:	46c0      	nop			; (mov r8, r8)

00009340 <pxCurrentTCBConst2>:
    9340:	20003d14 	.word	0x20003d14
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    9344:	46c0      	nop			; (mov r8, r8)
    9346:	46c0      	nop			; (mov r8, r8)

00009348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    9348:	b580      	push	{r7, lr}
    934a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    934c:	4b0e      	ldr	r3, [pc, #56]	; (9388 <xPortStartScheduler+0x40>)
    934e:	4a0e      	ldr	r2, [pc, #56]	; (9388 <xPortStartScheduler+0x40>)
    9350:	6812      	ldr	r2, [r2, #0]
    9352:	21ff      	movs	r1, #255	; 0xff
    9354:	0409      	lsls	r1, r1, #16
    9356:	430a      	orrs	r2, r1
    9358:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    935a:	4b0b      	ldr	r3, [pc, #44]	; (9388 <xPortStartScheduler+0x40>)
    935c:	4a0a      	ldr	r2, [pc, #40]	; (9388 <xPortStartScheduler+0x40>)
    935e:	6812      	ldr	r2, [r2, #0]
    9360:	21ff      	movs	r1, #255	; 0xff
    9362:	0609      	lsls	r1, r1, #24
    9364:	430a      	orrs	r2, r1
    9366:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    9368:	4b08      	ldr	r3, [pc, #32]	; (938c <xPortStartScheduler+0x44>)
    936a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    936c:	4b08      	ldr	r3, [pc, #32]	; (9390 <xPortStartScheduler+0x48>)
    936e:	2200      	movs	r2, #0
    9370:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    9372:	4b08      	ldr	r3, [pc, #32]	; (9394 <xPortStartScheduler+0x4c>)
    9374:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    9376:	4b08      	ldr	r3, [pc, #32]	; (9398 <xPortStartScheduler+0x50>)
    9378:	4798      	blx	r3
	prvTaskExitError();
    937a:	4b08      	ldr	r3, [pc, #32]	; (939c <xPortStartScheduler+0x54>)
    937c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    937e:	2300      	movs	r3, #0
}
    9380:	0018      	movs	r0, r3
    9382:	46bd      	mov	sp, r7
    9384:	bd80      	pop	{r7, pc}
    9386:	46c0      	nop			; (mov r8, r8)
    9388:	e000ed20 	.word	0xe000ed20
    938c:	000094a9 	.word	0x000094a9
    9390:	20000108 	.word	0x20000108
    9394:	00009311 	.word	0x00009311
    9398:	0000ba09 	.word	0x0000ba09
    939c:	000092d1 	.word	0x000092d1

000093a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    93a0:	b580      	push	{r7, lr}
    93a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    93a4:	4b03      	ldr	r3, [pc, #12]	; (93b4 <vPortYield+0x14>)
    93a6:	2280      	movs	r2, #128	; 0x80
    93a8:	0552      	lsls	r2, r2, #21
    93aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
    93ac:	46c0      	nop			; (mov r8, r8)
    93ae:	46bd      	mov	sp, r7
    93b0:	bd80      	pop	{r7, pc}
    93b2:	46c0      	nop			; (mov r8, r8)
    93b4:	e000ed04 	.word	0xe000ed04

000093b8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    93b8:	b580      	push	{r7, lr}
    93ba:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    93bc:	b672      	cpsid	i
    uxCriticalNesting++;
    93be:	4b06      	ldr	r3, [pc, #24]	; (93d8 <vPortEnterCritical+0x20>)
    93c0:	681b      	ldr	r3, [r3, #0]
    93c2:	1c5a      	adds	r2, r3, #1
    93c4:	4b04      	ldr	r3, [pc, #16]	; (93d8 <vPortEnterCritical+0x20>)
    93c6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    93c8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    93cc:	f3bf 8f6f 	isb	sy
}
    93d0:	46c0      	nop			; (mov r8, r8)
    93d2:	46bd      	mov	sp, r7
    93d4:	bd80      	pop	{r7, pc}
    93d6:	46c0      	nop			; (mov r8, r8)
    93d8:	20000108 	.word	0x20000108

000093dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    93dc:	b580      	push	{r7, lr}
    93de:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    93e0:	4b09      	ldr	r3, [pc, #36]	; (9408 <vPortExitCritical+0x2c>)
    93e2:	681b      	ldr	r3, [r3, #0]
    93e4:	2b00      	cmp	r3, #0
    93e6:	d101      	bne.n	93ec <vPortExitCritical+0x10>
    93e8:	b672      	cpsid	i
    93ea:	e7fe      	b.n	93ea <vPortExitCritical+0xe>
    uxCriticalNesting--;
    93ec:	4b06      	ldr	r3, [pc, #24]	; (9408 <vPortExitCritical+0x2c>)
    93ee:	681b      	ldr	r3, [r3, #0]
    93f0:	1e5a      	subs	r2, r3, #1
    93f2:	4b05      	ldr	r3, [pc, #20]	; (9408 <vPortExitCritical+0x2c>)
    93f4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    93f6:	4b04      	ldr	r3, [pc, #16]	; (9408 <vPortExitCritical+0x2c>)
    93f8:	681b      	ldr	r3, [r3, #0]
    93fa:	2b00      	cmp	r3, #0
    93fc:	d100      	bne.n	9400 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    93fe:	b662      	cpsie	i
    }
}
    9400:	46c0      	nop			; (mov r8, r8)
    9402:	46bd      	mov	sp, r7
    9404:	bd80      	pop	{r7, pc}
    9406:	46c0      	nop			; (mov r8, r8)
    9408:	20000108 	.word	0x20000108

0000940c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    940c:	f3ef 8010 	mrs	r0, PRIMASK
    9410:	b672      	cpsid	i
    9412:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    9414:	46c0      	nop			; (mov r8, r8)
    9416:	0018      	movs	r0, r3

00009418 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    9418:	f380 8810 	msr	PRIMASK, r0
    941c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    941e:	46c0      	nop			; (mov r8, r8)

00009420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    9420:	f3ef 8009 	mrs	r0, PSP
    9424:	4b0e      	ldr	r3, [pc, #56]	; (9460 <pxCurrentTCBConst>)
    9426:	681a      	ldr	r2, [r3, #0]
    9428:	3820      	subs	r0, #32
    942a:	6010      	str	r0, [r2, #0]
    942c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    942e:	4644      	mov	r4, r8
    9430:	464d      	mov	r5, r9
    9432:	4656      	mov	r6, sl
    9434:	465f      	mov	r7, fp
    9436:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    9438:	b508      	push	{r3, lr}
    943a:	b672      	cpsid	i
    943c:	f002 fae4 	bl	ba08 <vTaskSwitchContext>
    9440:	b662      	cpsie	i
    9442:	bc0c      	pop	{r2, r3}
    9444:	6811      	ldr	r1, [r2, #0]
    9446:	6808      	ldr	r0, [r1, #0]
    9448:	3010      	adds	r0, #16
    944a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    944c:	46a0      	mov	r8, r4
    944e:	46a9      	mov	r9, r5
    9450:	46b2      	mov	sl, r6
    9452:	46bb      	mov	fp, r7
    9454:	f380 8809 	msr	PSP, r0
    9458:	3820      	subs	r0, #32
    945a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    945c:	4718      	bx	r3
    945e:	46c0      	nop			; (mov r8, r8)

00009460 <pxCurrentTCBConst>:
    9460:	20003d14 	.word	0x20003d14
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    9464:	46c0      	nop			; (mov r8, r8)
    9466:	46c0      	nop			; (mov r8, r8)

00009468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    9468:	b580      	push	{r7, lr}
    946a:	b082      	sub	sp, #8
    946c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    946e:	4b0a      	ldr	r3, [pc, #40]	; (9498 <SysTick_Handler+0x30>)
    9470:	4798      	blx	r3
    9472:	0003      	movs	r3, r0
    9474:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    9476:	4b09      	ldr	r3, [pc, #36]	; (949c <SysTick_Handler+0x34>)
    9478:	4798      	blx	r3
    947a:	1e03      	subs	r3, r0, #0
    947c:	d003      	beq.n	9486 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    947e:	4b08      	ldr	r3, [pc, #32]	; (94a0 <SysTick_Handler+0x38>)
    9480:	2280      	movs	r2, #128	; 0x80
    9482:	0552      	lsls	r2, r2, #21
    9484:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    9486:	687b      	ldr	r3, [r7, #4]
    9488:	0018      	movs	r0, r3
    948a:	4b06      	ldr	r3, [pc, #24]	; (94a4 <SysTick_Handler+0x3c>)
    948c:	4798      	blx	r3
}
    948e:	46c0      	nop			; (mov r8, r8)
    9490:	46bd      	mov	sp, r7
    9492:	b002      	add	sp, #8
    9494:	bd80      	pop	{r7, pc}
    9496:	46c0      	nop			; (mov r8, r8)
    9498:	0000940d 	.word	0x0000940d
    949c:	0000b819 	.word	0x0000b819
    94a0:	e000ed04 	.word	0xe000ed04
    94a4:	00009419 	.word	0x00009419

000094a8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    94a8:	b5b0      	push	{r4, r5, r7, lr}
    94aa:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    94ac:	4b0b      	ldr	r3, [pc, #44]	; (94dc <prvSetupTimerInterrupt+0x34>)
    94ae:	2200      	movs	r2, #0
    94b0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    94b2:	4b0b      	ldr	r3, [pc, #44]	; (94e0 <prvSetupTimerInterrupt+0x38>)
    94b4:	2200      	movs	r2, #0
    94b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    94b8:	4c0a      	ldr	r4, [pc, #40]	; (94e4 <prvSetupTimerInterrupt+0x3c>)
    94ba:	2000      	movs	r0, #0
    94bc:	4b0a      	ldr	r3, [pc, #40]	; (94e8 <prvSetupTimerInterrupt+0x40>)
    94be:	4798      	blx	r3
    94c0:	4b0a      	ldr	r3, [pc, #40]	; (94ec <prvSetupTimerInterrupt+0x44>)
    94c2:	22fa      	movs	r2, #250	; 0xfa
    94c4:	0091      	lsls	r1, r2, #2
    94c6:	4798      	blx	r3
    94c8:	0003      	movs	r3, r0
    94ca:	3b01      	subs	r3, #1
    94cc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    94ce:	4b03      	ldr	r3, [pc, #12]	; (94dc <prvSetupTimerInterrupt+0x34>)
    94d0:	2207      	movs	r2, #7
    94d2:	601a      	str	r2, [r3, #0]
}
    94d4:	46c0      	nop			; (mov r8, r8)
    94d6:	46bd      	mov	sp, r7
    94d8:	bdb0      	pop	{r4, r5, r7, pc}
    94da:	46c0      	nop			; (mov r8, r8)
    94dc:	e000e010 	.word	0xe000e010
    94e0:	e000e018 	.word	0xe000e018
    94e4:	e000e014 	.word	0xe000e014
    94e8:	00019069 	.word	0x00019069
    94ec:	00021cfd 	.word	0x00021cfd

000094f0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    94f0:	b580      	push	{r7, lr}
    94f2:	b084      	sub	sp, #16
    94f4:	af00      	add	r7, sp, #0
    94f6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    94f8:	2300      	movs	r3, #0
    94fa:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    94fc:	687b      	ldr	r3, [r7, #4]
    94fe:	2207      	movs	r2, #7
    9500:	4013      	ands	r3, r2
    9502:	d004      	beq.n	950e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	2207      	movs	r2, #7
    9508:	4393      	bics	r3, r2
    950a:	3308      	adds	r3, #8
    950c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    950e:	4b21      	ldr	r3, [pc, #132]	; (9594 <pvPortMalloc+0xa4>)
    9510:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    9512:	4b21      	ldr	r3, [pc, #132]	; (9598 <pvPortMalloc+0xa8>)
    9514:	681b      	ldr	r3, [r3, #0]
    9516:	2b00      	cmp	r3, #0
    9518:	d105      	bne.n	9526 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    951a:	4b20      	ldr	r3, [pc, #128]	; (959c <pvPortMalloc+0xac>)
    951c:	2207      	movs	r2, #7
    951e:	4393      	bics	r3, r2
    9520:	001a      	movs	r2, r3
    9522:	4b1d      	ldr	r3, [pc, #116]	; (9598 <pvPortMalloc+0xa8>)
    9524:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    9526:	4b1e      	ldr	r3, [pc, #120]	; (95a0 <pvPortMalloc+0xb0>)
    9528:	681a      	ldr	r2, [r3, #0]
    952a:	687b      	ldr	r3, [r7, #4]
    952c:	18d3      	adds	r3, r2, r3
    952e:	4a1d      	ldr	r2, [pc, #116]	; (95a4 <pvPortMalloc+0xb4>)
    9530:	4293      	cmp	r3, r2
    9532:	d813      	bhi.n	955c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    9534:	4b1a      	ldr	r3, [pc, #104]	; (95a0 <pvPortMalloc+0xb0>)
    9536:	681a      	ldr	r2, [r3, #0]
    9538:	687b      	ldr	r3, [r7, #4]
    953a:	18d2      	adds	r2, r2, r3
    953c:	4b18      	ldr	r3, [pc, #96]	; (95a0 <pvPortMalloc+0xb0>)
    953e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    9540:	429a      	cmp	r2, r3
    9542:	d90b      	bls.n	955c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    9544:	4b14      	ldr	r3, [pc, #80]	; (9598 <pvPortMalloc+0xa8>)
    9546:	681a      	ldr	r2, [r3, #0]
    9548:	4b15      	ldr	r3, [pc, #84]	; (95a0 <pvPortMalloc+0xb0>)
    954a:	681b      	ldr	r3, [r3, #0]
    954c:	18d3      	adds	r3, r2, r3
    954e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    9550:	4b13      	ldr	r3, [pc, #76]	; (95a0 <pvPortMalloc+0xb0>)
    9552:	681a      	ldr	r2, [r3, #0]
    9554:	687b      	ldr	r3, [r7, #4]
    9556:	18d2      	adds	r2, r2, r3
    9558:	4b11      	ldr	r3, [pc, #68]	; (95a0 <pvPortMalloc+0xb0>)
    955a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    955c:	68fb      	ldr	r3, [r7, #12]
    955e:	2b00      	cmp	r3, #0
    9560:	d006      	beq.n	9570 <pvPortMalloc+0x80>
    9562:	68fb      	ldr	r3, [r7, #12]
    9564:	687a      	ldr	r2, [r7, #4]
    9566:	0019      	movs	r1, r3
    9568:	2094      	movs	r0, #148	; 0x94
    956a:	4b0f      	ldr	r3, [pc, #60]	; (95a8 <pvPortMalloc+0xb8>)
    956c:	4798      	blx	r3
    956e:	e005      	b.n	957c <pvPortMalloc+0x8c>
    9570:	68fb      	ldr	r3, [r7, #12]
    9572:	687a      	ldr	r2, [r7, #4]
    9574:	0019      	movs	r1, r3
    9576:	20e8      	movs	r0, #232	; 0xe8
    9578:	4b0b      	ldr	r3, [pc, #44]	; (95a8 <pvPortMalloc+0xb8>)
    957a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    957c:	4b0b      	ldr	r3, [pc, #44]	; (95ac <pvPortMalloc+0xbc>)
    957e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    9580:	68fb      	ldr	r3, [r7, #12]
    9582:	2b00      	cmp	r3, #0
    9584:	d101      	bne.n	958a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    9586:	4b0a      	ldr	r3, [pc, #40]	; (95b0 <pvPortMalloc+0xc0>)
    9588:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    958a:	68fb      	ldr	r3, [r7, #12]
}
    958c:	0018      	movs	r0, r3
    958e:	46bd      	mov	sp, r7
    9590:	b004      	add	sp, #16
    9592:	bd80      	pop	{r7, pc}
    9594:	0000b675 	.word	0x0000b675
    9598:	20003d10 	.word	0x20003d10
    959c:	20000e34 	.word	0x20000e34
    95a0:	20003d0c 	.word	0x20003d0c
    95a4:	00002ed7 	.word	0x00002ed7
    95a8:	00007c59 	.word	0x00007c59
    95ac:	0000b68d 	.word	0x0000b68d
    95b0:	00021ccd 	.word	0x00021ccd

000095b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    95b4:	b580      	push	{r7, lr}
    95b6:	b082      	sub	sp, #8
    95b8:	af00      	add	r7, sp, #0
    95ba:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	2b00      	cmp	r3, #0
    95c0:	d001      	beq.n	95c6 <vPortFree+0x12>
    95c2:	b672      	cpsid	i
    95c4:	e7fe      	b.n	95c4 <vPortFree+0x10>
}
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	46bd      	mov	sp, r7
    95ca:	b002      	add	sp, #8
    95cc:	bd80      	pop	{r7, pc}
	...

000095d0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    95d0:	b580      	push	{r7, lr}
    95d2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    95d4:	4b03      	ldr	r3, [pc, #12]	; (95e4 <xPortGetFreeHeapSize+0x14>)
    95d6:	681b      	ldr	r3, [r3, #0]
    95d8:	4a03      	ldr	r2, [pc, #12]	; (95e8 <xPortGetFreeHeapSize+0x18>)
    95da:	1ad3      	subs	r3, r2, r3
}
    95dc:	0018      	movs	r0, r3
    95de:	46bd      	mov	sp, r7
    95e0:	bd80      	pop	{r7, pc}
    95e2:	46c0      	nop			; (mov r8, r8)
    95e4:	20003d0c 	.word	0x20003d0c
    95e8:	00002ed8 	.word	0x00002ed8

000095ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    95ec:	b580      	push	{r7, lr}
    95ee:	b084      	sub	sp, #16
    95f0:	af00      	add	r7, sp, #0
    95f2:	6078      	str	r0, [r7, #4]
    95f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    95f6:	687b      	ldr	r3, [r7, #4]
    95f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    95fa:	68fb      	ldr	r3, [r7, #12]
    95fc:	2b00      	cmp	r3, #0
    95fe:	d101      	bne.n	9604 <xQueueGenericReset+0x18>
    9600:	b672      	cpsid	i
    9602:	e7fe      	b.n	9602 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    9604:	4b23      	ldr	r3, [pc, #140]	; (9694 <xQueueGenericReset+0xa8>)
    9606:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    9608:	68fb      	ldr	r3, [r7, #12]
    960a:	681a      	ldr	r2, [r3, #0]
    960c:	68fb      	ldr	r3, [r7, #12]
    960e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    9610:	68fb      	ldr	r3, [r7, #12]
    9612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9614:	434b      	muls	r3, r1
    9616:	18d2      	adds	r2, r2, r3
    9618:	68fb      	ldr	r3, [r7, #12]
    961a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    961c:	68fb      	ldr	r3, [r7, #12]
    961e:	2200      	movs	r2, #0
    9620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    9622:	68fb      	ldr	r3, [r7, #12]
    9624:	681a      	ldr	r2, [r3, #0]
    9626:	68fb      	ldr	r3, [r7, #12]
    9628:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    962a:	68fb      	ldr	r3, [r7, #12]
    962c:	681a      	ldr	r2, [r3, #0]
    962e:	68fb      	ldr	r3, [r7, #12]
    9630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9632:	1e59      	subs	r1, r3, #1
    9634:	68fb      	ldr	r3, [r7, #12]
    9636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9638:	434b      	muls	r3, r1
    963a:	18d2      	adds	r2, r2, r3
    963c:	68fb      	ldr	r3, [r7, #12]
    963e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    9640:	68fb      	ldr	r3, [r7, #12]
    9642:	2244      	movs	r2, #68	; 0x44
    9644:	21ff      	movs	r1, #255	; 0xff
    9646:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    9648:	68fb      	ldr	r3, [r7, #12]
    964a:	2245      	movs	r2, #69	; 0x45
    964c:	21ff      	movs	r1, #255	; 0xff
    964e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    9650:	683b      	ldr	r3, [r7, #0]
    9652:	2b00      	cmp	r3, #0
    9654:	d10d      	bne.n	9672 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9656:	68fb      	ldr	r3, [r7, #12]
    9658:	691b      	ldr	r3, [r3, #16]
    965a:	2b00      	cmp	r3, #0
    965c:	d013      	beq.n	9686 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    965e:	68fb      	ldr	r3, [r7, #12]
    9660:	3310      	adds	r3, #16
    9662:	0018      	movs	r0, r3
    9664:	4b0c      	ldr	r3, [pc, #48]	; (9698 <xQueueGenericReset+0xac>)
    9666:	4798      	blx	r3
    9668:	1e03      	subs	r3, r0, #0
    966a:	d00c      	beq.n	9686 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    966c:	4b0b      	ldr	r3, [pc, #44]	; (969c <xQueueGenericReset+0xb0>)
    966e:	4798      	blx	r3
    9670:	e009      	b.n	9686 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    9672:	68fb      	ldr	r3, [r7, #12]
    9674:	3310      	adds	r3, #16
    9676:	0018      	movs	r0, r3
    9678:	4b09      	ldr	r3, [pc, #36]	; (96a0 <xQueueGenericReset+0xb4>)
    967a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    967c:	68fb      	ldr	r3, [r7, #12]
    967e:	3324      	adds	r3, #36	; 0x24
    9680:	0018      	movs	r0, r3
    9682:	4b07      	ldr	r3, [pc, #28]	; (96a0 <xQueueGenericReset+0xb4>)
    9684:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    9686:	4b07      	ldr	r3, [pc, #28]	; (96a4 <xQueueGenericReset+0xb8>)
    9688:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    968a:	2301      	movs	r3, #1
}
    968c:	0018      	movs	r0, r3
    968e:	46bd      	mov	sp, r7
    9690:	b004      	add	sp, #16
    9692:	bd80      	pop	{r7, pc}
    9694:	000093b9 	.word	0x000093b9
    9698:	0000bc4d 	.word	0x0000bc4d
    969c:	000093a1 	.word	0x000093a1
    96a0:	00009129 	.word	0x00009129
    96a4:	000093dd 	.word	0x000093dd

000096a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    96a8:	b590      	push	{r4, r7, lr}
    96aa:	b08b      	sub	sp, #44	; 0x2c
    96ac:	af02      	add	r7, sp, #8
    96ae:	60f8      	str	r0, [r7, #12]
    96b0:	60b9      	str	r1, [r7, #8]
    96b2:	1dfb      	adds	r3, r7, #7
    96b4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    96b6:	68fb      	ldr	r3, [r7, #12]
    96b8:	2b00      	cmp	r3, #0
    96ba:	d101      	bne.n	96c0 <xQueueGenericCreate+0x18>
    96bc:	b672      	cpsid	i
    96be:	e7fe      	b.n	96be <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    96c0:	68bb      	ldr	r3, [r7, #8]
    96c2:	2b00      	cmp	r3, #0
    96c4:	d102      	bne.n	96cc <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    96c6:	2300      	movs	r3, #0
    96c8:	61fb      	str	r3, [r7, #28]
    96ca:	e003      	b.n	96d4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    96cc:	68fb      	ldr	r3, [r7, #12]
    96ce:	68ba      	ldr	r2, [r7, #8]
    96d0:	4353      	muls	r3, r2
    96d2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    96d4:	69fb      	ldr	r3, [r7, #28]
    96d6:	3354      	adds	r3, #84	; 0x54
    96d8:	0018      	movs	r0, r3
    96da:	4b19      	ldr	r3, [pc, #100]	; (9740 <xQueueGenericCreate+0x98>)
    96dc:	4798      	blx	r3
    96de:	0003      	movs	r3, r0
    96e0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    96e2:	69bb      	ldr	r3, [r7, #24]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d00d      	beq.n	9704 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    96e8:	69bb      	ldr	r3, [r7, #24]
    96ea:	3354      	adds	r3, #84	; 0x54
    96ec:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    96ee:	1dfb      	adds	r3, r7, #7
    96f0:	781c      	ldrb	r4, [r3, #0]
    96f2:	697a      	ldr	r2, [r7, #20]
    96f4:	68b9      	ldr	r1, [r7, #8]
    96f6:	68f8      	ldr	r0, [r7, #12]
    96f8:	69bb      	ldr	r3, [r7, #24]
    96fa:	9300      	str	r3, [sp, #0]
    96fc:	0023      	movs	r3, r4
    96fe:	4c11      	ldr	r4, [pc, #68]	; (9744 <xQueueGenericCreate+0x9c>)
    9700:	47a0      	blx	r4
    9702:	e017      	b.n	9734 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
    9704:	4b10      	ldr	r3, [pc, #64]	; (9748 <xQueueGenericCreate+0xa0>)
    9706:	4798      	blx	r3
    9708:	0003      	movs	r3, r0
    970a:	0018      	movs	r0, r3
    970c:	4b0f      	ldr	r3, [pc, #60]	; (974c <xQueueGenericCreate+0xa4>)
    970e:	4798      	blx	r3
    9710:	0003      	movs	r3, r0
    9712:	001a      	movs	r2, r3
    9714:	4b0e      	ldr	r3, [pc, #56]	; (9750 <xQueueGenericCreate+0xa8>)
    9716:	881b      	ldrh	r3, [r3, #0]
    9718:	4013      	ands	r3, r2
    971a:	b29b      	uxth	r3, r3
    971c:	2b00      	cmp	r3, #0
    971e:	d009      	beq.n	9734 <xQueueGenericCreate+0x8c>
    9720:	1dfb      	adds	r3, r7, #7
    9722:	781b      	ldrb	r3, [r3, #0]
    9724:	4a0b      	ldr	r2, [pc, #44]	; (9754 <xQueueGenericCreate+0xac>)
    9726:	5cd3      	ldrb	r3, [r2, r3]
    9728:	3340      	adds	r3, #64	; 0x40
    972a:	b2db      	uxtb	r3, r3
    972c:	2100      	movs	r1, #0
    972e:	0018      	movs	r0, r3
    9730:	4b09      	ldr	r3, [pc, #36]	; (9758 <xQueueGenericCreate+0xb0>)
    9732:	4798      	blx	r3
		}

		return pxNewQueue;
    9734:	69bb      	ldr	r3, [r7, #24]
	}
    9736:	0018      	movs	r0, r3
    9738:	46bd      	mov	sp, r7
    973a:	b009      	add	sp, #36	; 0x24
    973c:	bd90      	pop	{r4, r7, pc}
    973e:	46c0      	nop			; (mov r8, r8)
    9740:	000094f1 	.word	0x000094f1
    9744:	0000975d 	.word	0x0000975d
    9748:	0000764d 	.word	0x0000764d
    974c:	000073b1 	.word	0x000073b1
    9750:	20000104 	.word	0x20000104
    9754:	200000f8 	.word	0x200000f8
    9758:	000080b1 	.word	0x000080b1

0000975c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    975c:	b5b0      	push	{r4, r5, r7, lr}
    975e:	b084      	sub	sp, #16
    9760:	af00      	add	r7, sp, #0
    9762:	60f8      	str	r0, [r7, #12]
    9764:	60b9      	str	r1, [r7, #8]
    9766:	607a      	str	r2, [r7, #4]
    9768:	001a      	movs	r2, r3
    976a:	1cfb      	adds	r3, r7, #3
    976c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    976e:	68bb      	ldr	r3, [r7, #8]
    9770:	2b00      	cmp	r3, #0
    9772:	d103      	bne.n	977c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    9774:	6a3b      	ldr	r3, [r7, #32]
    9776:	6a3a      	ldr	r2, [r7, #32]
    9778:	601a      	str	r2, [r3, #0]
    977a:	e002      	b.n	9782 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    977c:	6a3b      	ldr	r3, [r7, #32]
    977e:	687a      	ldr	r2, [r7, #4]
    9780:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    9782:	6a3b      	ldr	r3, [r7, #32]
    9784:	68fa      	ldr	r2, [r7, #12]
    9786:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    9788:	6a3b      	ldr	r3, [r7, #32]
    978a:	68ba      	ldr	r2, [r7, #8]
    978c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    978e:	6a3b      	ldr	r3, [r7, #32]
    9790:	2101      	movs	r1, #1
    9792:	0018      	movs	r0, r3
    9794:	4b41      	ldr	r3, [pc, #260]	; (989c <prvInitialiseNewQueue+0x140>)
    9796:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    9798:	6a3b      	ldr	r3, [r7, #32]
    979a:	1cfa      	adds	r2, r7, #3
    979c:	2150      	movs	r1, #80	; 0x50
    979e:	7812      	ldrb	r2, [r2, #0]
    97a0:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    97a2:	6a3b      	ldr	r3, [r7, #32]
    97a4:	2200      	movs	r2, #0
    97a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    97a8:	6a3b      	ldr	r3, [r7, #32]
    97aa:	0018      	movs	r0, r3
    97ac:	4b3c      	ldr	r3, [pc, #240]	; (98a0 <prvInitialiseNewQueue+0x144>)
    97ae:	4798      	blx	r3
    97b0:	0003      	movs	r3, r0
    97b2:	001a      	movs	r2, r3
    97b4:	4b3b      	ldr	r3, [pc, #236]	; (98a4 <prvInitialiseNewQueue+0x148>)
    97b6:	5c9b      	ldrb	r3, [r3, r2]
    97b8:	0018      	movs	r0, r3
    97ba:	4b3b      	ldr	r3, [pc, #236]	; (98a8 <prvInitialiseNewQueue+0x14c>)
    97bc:	4798      	blx	r3
    97be:	0003      	movs	r3, r0
    97c0:	b29a      	uxth	r2, r3
    97c2:	6a3b      	ldr	r3, [r7, #32]
    97c4:	0011      	movs	r1, r2
    97c6:	0018      	movs	r0, r3
    97c8:	4b38      	ldr	r3, [pc, #224]	; (98ac <prvInitialiseNewQueue+0x150>)
    97ca:	4798      	blx	r3
    97cc:	4b38      	ldr	r3, [pc, #224]	; (98b0 <prvInitialiseNewQueue+0x154>)
    97ce:	881a      	ldrh	r2, [r3, #0]
    97d0:	6a3b      	ldr	r3, [r7, #32]
    97d2:	0011      	movs	r1, r2
    97d4:	0018      	movs	r0, r3
    97d6:	4b37      	ldr	r3, [pc, #220]	; (98b4 <prvInitialiseNewQueue+0x158>)
    97d8:	4798      	blx	r3
    97da:	6a3b      	ldr	r3, [r7, #32]
    97dc:	0018      	movs	r0, r3
    97de:	4b30      	ldr	r3, [pc, #192]	; (98a0 <prvInitialiseNewQueue+0x144>)
    97e0:	4798      	blx	r3
    97e2:	0003      	movs	r3, r0
    97e4:	001a      	movs	r2, r3
    97e6:	4b2f      	ldr	r3, [pc, #188]	; (98a4 <prvInitialiseNewQueue+0x148>)
    97e8:	5c9c      	ldrb	r4, [r3, r2]
    97ea:	6a3b      	ldr	r3, [r7, #32]
    97ec:	0018      	movs	r0, r3
    97ee:	4b32      	ldr	r3, [pc, #200]	; (98b8 <prvInitialiseNewQueue+0x15c>)
    97f0:	4798      	blx	r3
    97f2:	0003      	movs	r3, r0
    97f4:	b2db      	uxtb	r3, r3
    97f6:	0019      	movs	r1, r3
    97f8:	0020      	movs	r0, r4
    97fa:	4b30      	ldr	r3, [pc, #192]	; (98bc <prvInitialiseNewQueue+0x160>)
    97fc:	4798      	blx	r3
    97fe:	4b30      	ldr	r3, [pc, #192]	; (98c0 <prvInitialiseNewQueue+0x164>)
    9800:	4798      	blx	r3
    9802:	0003      	movs	r3, r0
    9804:	0018      	movs	r0, r3
    9806:	4b2f      	ldr	r3, [pc, #188]	; (98c4 <prvInitialiseNewQueue+0x168>)
    9808:	4798      	blx	r3
    980a:	0003      	movs	r3, r0
    980c:	001a      	movs	r2, r3
    980e:	4b2e      	ldr	r3, [pc, #184]	; (98c8 <prvInitialiseNewQueue+0x16c>)
    9810:	881b      	ldrh	r3, [r3, #0]
    9812:	4013      	ands	r3, r2
    9814:	b29b      	uxth	r3, r3
    9816:	2b00      	cmp	r3, #0
    9818:	d029      	beq.n	986e <prvInitialiseNewQueue+0x112>
    981a:	6a3b      	ldr	r3, [r7, #32]
    981c:	0018      	movs	r0, r3
    981e:	4b2b      	ldr	r3, [pc, #172]	; (98cc <prvInitialiseNewQueue+0x170>)
    9820:	4798      	blx	r3
    9822:	0003      	movs	r3, r0
    9824:	001a      	movs	r2, r3
    9826:	4b28      	ldr	r3, [pc, #160]	; (98c8 <prvInitialiseNewQueue+0x16c>)
    9828:	881b      	ldrh	r3, [r3, #0]
    982a:	4013      	ands	r3, r2
    982c:	b29b      	uxth	r3, r3
    982e:	2b00      	cmp	r3, #0
    9830:	d01d      	beq.n	986e <prvInitialiseNewQueue+0x112>
    9832:	6a3b      	ldr	r3, [r7, #32]
    9834:	0018      	movs	r0, r3
    9836:	4b1a      	ldr	r3, [pc, #104]	; (98a0 <prvInitialiseNewQueue+0x144>)
    9838:	4798      	blx	r3
    983a:	0003      	movs	r3, r0
    983c:	001a      	movs	r2, r3
    983e:	4b19      	ldr	r3, [pc, #100]	; (98a4 <prvInitialiseNewQueue+0x148>)
    9840:	5c9b      	ldrb	r3, [r3, r2]
    9842:	3318      	adds	r3, #24
    9844:	b2db      	uxtb	r3, r3
    9846:	001d      	movs	r5, r3
    9848:	6a3b      	ldr	r3, [r7, #32]
    984a:	0018      	movs	r0, r3
    984c:	4b14      	ldr	r3, [pc, #80]	; (98a0 <prvInitialiseNewQueue+0x144>)
    984e:	4798      	blx	r3
    9850:	0003      	movs	r3, r0
    9852:	001a      	movs	r2, r3
    9854:	4b13      	ldr	r3, [pc, #76]	; (98a4 <prvInitialiseNewQueue+0x148>)
    9856:	5c9c      	ldrb	r4, [r3, r2]
    9858:	6a3b      	ldr	r3, [r7, #32]
    985a:	0018      	movs	r0, r3
    985c:	4b16      	ldr	r3, [pc, #88]	; (98b8 <prvInitialiseNewQueue+0x15c>)
    985e:	4798      	blx	r3
    9860:	0003      	movs	r3, r0
    9862:	b2db      	uxtb	r3, r3
    9864:	001a      	movs	r2, r3
    9866:	0021      	movs	r1, r4
    9868:	0028      	movs	r0, r5
    986a:	4b19      	ldr	r3, [pc, #100]	; (98d0 <prvInitialiseNewQueue+0x174>)
    986c:	4798      	blx	r3
    986e:	6a3b      	ldr	r3, [r7, #32]
    9870:	0018      	movs	r0, r3
    9872:	4b0b      	ldr	r3, [pc, #44]	; (98a0 <prvInitialiseNewQueue+0x144>)
    9874:	4798      	blx	r3
    9876:	0003      	movs	r3, r0
    9878:	001a      	movs	r2, r3
    987a:	4b0a      	ldr	r3, [pc, #40]	; (98a4 <prvInitialiseNewQueue+0x148>)
    987c:	5c9c      	ldrb	r4, [r3, r2]
    987e:	6a3b      	ldr	r3, [r7, #32]
    9880:	0018      	movs	r0, r3
    9882:	4b0d      	ldr	r3, [pc, #52]	; (98b8 <prvInitialiseNewQueue+0x15c>)
    9884:	4798      	blx	r3
    9886:	0003      	movs	r3, r0
    9888:	b2db      	uxtb	r3, r3
    988a:	2200      	movs	r2, #0
    988c:	0019      	movs	r1, r3
    988e:	0020      	movs	r0, r4
    9890:	4b10      	ldr	r3, [pc, #64]	; (98d4 <prvInitialiseNewQueue+0x178>)
    9892:	4798      	blx	r3
}
    9894:	46c0      	nop			; (mov r8, r8)
    9896:	46bd      	mov	sp, r7
    9898:	b004      	add	sp, #16
    989a:	bdb0      	pop	{r4, r5, r7, pc}
    989c:	000095ed 	.word	0x000095ed
    98a0:	00007371 	.word	0x00007371
    98a4:	200000f8 	.word	0x200000f8
    98a8:	00008931 	.word	0x00008931
    98ac:	00007495 	.word	0x00007495
    98b0:	20000106 	.word	0x20000106
    98b4:	000074d1 	.word	0x000074d1
    98b8:	00007451 	.word	0x00007451
    98bc:	00008ac9 	.word	0x00008ac9
    98c0:	0000764d 	.word	0x0000764d
    98c4:	000073b1 	.word	0x000073b1
    98c8:	20000104 	.word	0x20000104
    98cc:	00007471 	.word	0x00007471
    98d0:	00007da9 	.word	0x00007da9
    98d4:	00008405 	.word	0x00008405

000098d8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    98d8:	b590      	push	{r4, r7, lr}
    98da:	b083      	sub	sp, #12
    98dc:	af00      	add	r7, sp, #0
    98de:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    98e0:	687b      	ldr	r3, [r7, #4]
    98e2:	2b00      	cmp	r3, #0
    98e4:	d00e      	beq.n	9904 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    98e6:	687b      	ldr	r3, [r7, #4]
    98e8:	2200      	movs	r2, #0
    98ea:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    98ec:	687b      	ldr	r3, [r7, #4]
    98ee:	2200      	movs	r2, #0
    98f0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    98f2:	687b      	ldr	r3, [r7, #4]
    98f4:	2200      	movs	r2, #0
    98f6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    98f8:	6878      	ldr	r0, [r7, #4]
    98fa:	2300      	movs	r3, #0
    98fc:	2200      	movs	r2, #0
    98fe:	2100      	movs	r1, #0
    9900:	4c02      	ldr	r4, [pc, #8]	; (990c <prvInitialiseMutex+0x34>)
    9902:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    9904:	46c0      	nop			; (mov r8, r8)
    9906:	46bd      	mov	sp, r7
    9908:	b003      	add	sp, #12
    990a:	bd90      	pop	{r4, r7, pc}
    990c:	00009951 	.word	0x00009951

00009910 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    9910:	b580      	push	{r7, lr}
    9912:	b086      	sub	sp, #24
    9914:	af00      	add	r7, sp, #0
    9916:	0002      	movs	r2, r0
    9918:	1dfb      	adds	r3, r7, #7
    991a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    991c:	2301      	movs	r3, #1
    991e:	617b      	str	r3, [r7, #20]
    9920:	2300      	movs	r3, #0
    9922:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    9924:	1dfb      	adds	r3, r7, #7
    9926:	781a      	ldrb	r2, [r3, #0]
    9928:	6939      	ldr	r1, [r7, #16]
    992a:	697b      	ldr	r3, [r7, #20]
    992c:	0018      	movs	r0, r3
    992e:	4b06      	ldr	r3, [pc, #24]	; (9948 <xQueueCreateMutex+0x38>)
    9930:	4798      	blx	r3
    9932:	0003      	movs	r3, r0
    9934:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    9936:	68fb      	ldr	r3, [r7, #12]
    9938:	0018      	movs	r0, r3
    993a:	4b04      	ldr	r3, [pc, #16]	; (994c <xQueueCreateMutex+0x3c>)
    993c:	4798      	blx	r3

		return pxNewQueue;
    993e:	68fb      	ldr	r3, [r7, #12]
	}
    9940:	0018      	movs	r0, r3
    9942:	46bd      	mov	sp, r7
    9944:	b006      	add	sp, #24
    9946:	bd80      	pop	{r7, pc}
    9948:	000096a9 	.word	0x000096a9
    994c:	000098d9 	.word	0x000098d9

00009950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    9950:	b5b0      	push	{r4, r5, r7, lr}
    9952:	b08a      	sub	sp, #40	; 0x28
    9954:	af00      	add	r7, sp, #0
    9956:	60f8      	str	r0, [r7, #12]
    9958:	60b9      	str	r1, [r7, #8]
    995a:	607a      	str	r2, [r7, #4]
    995c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    995e:	2300      	movs	r3, #0
    9960:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    9962:	68fb      	ldr	r3, [r7, #12]
    9964:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    9966:	6a3b      	ldr	r3, [r7, #32]
    9968:	2b00      	cmp	r3, #0
    996a:	d101      	bne.n	9970 <xQueueGenericSend+0x20>
    996c:	b672      	cpsid	i
    996e:	e7fe      	b.n	996e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    9970:	68bb      	ldr	r3, [r7, #8]
    9972:	2b00      	cmp	r3, #0
    9974:	d103      	bne.n	997e <xQueueGenericSend+0x2e>
    9976:	6a3b      	ldr	r3, [r7, #32]
    9978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    997a:	2b00      	cmp	r3, #0
    997c:	d101      	bne.n	9982 <xQueueGenericSend+0x32>
    997e:	2301      	movs	r3, #1
    9980:	e000      	b.n	9984 <xQueueGenericSend+0x34>
    9982:	2300      	movs	r3, #0
    9984:	2b00      	cmp	r3, #0
    9986:	d101      	bne.n	998c <xQueueGenericSend+0x3c>
    9988:	b672      	cpsid	i
    998a:	e7fe      	b.n	998a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    998c:	683b      	ldr	r3, [r7, #0]
    998e:	2b02      	cmp	r3, #2
    9990:	d103      	bne.n	999a <xQueueGenericSend+0x4a>
    9992:	6a3b      	ldr	r3, [r7, #32]
    9994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9996:	2b01      	cmp	r3, #1
    9998:	d101      	bne.n	999e <xQueueGenericSend+0x4e>
    999a:	2301      	movs	r3, #1
    999c:	e000      	b.n	99a0 <xQueueGenericSend+0x50>
    999e:	2300      	movs	r3, #0
    99a0:	2b00      	cmp	r3, #0
    99a2:	d101      	bne.n	99a8 <xQueueGenericSend+0x58>
    99a4:	b672      	cpsid	i
    99a6:	e7fe      	b.n	99a6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    99a8:	4bbc      	ldr	r3, [pc, #752]	; (9c9c <xQueueGenericSend+0x34c>)
    99aa:	4798      	blx	r3
    99ac:	1e03      	subs	r3, r0, #0
    99ae:	d102      	bne.n	99b6 <xQueueGenericSend+0x66>
    99b0:	687b      	ldr	r3, [r7, #4]
    99b2:	2b00      	cmp	r3, #0
    99b4:	d101      	bne.n	99ba <xQueueGenericSend+0x6a>
    99b6:	2301      	movs	r3, #1
    99b8:	e000      	b.n	99bc <xQueueGenericSend+0x6c>
    99ba:	2300      	movs	r3, #0
    99bc:	2b00      	cmp	r3, #0
    99be:	d101      	bne.n	99c4 <xQueueGenericSend+0x74>
    99c0:	b672      	cpsid	i
    99c2:	e7fe      	b.n	99c2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    99c4:	4bb6      	ldr	r3, [pc, #728]	; (9ca0 <xQueueGenericSend+0x350>)
    99c6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    99c8:	6a3b      	ldr	r3, [r7, #32]
    99ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    99cc:	6a3b      	ldr	r3, [r7, #32]
    99ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    99d0:	429a      	cmp	r2, r3
    99d2:	d303      	bcc.n	99dc <xQueueGenericSend+0x8c>
    99d4:	683b      	ldr	r3, [r7, #0]
    99d6:	2b02      	cmp	r3, #2
    99d8:	d000      	beq.n	99dc <xQueueGenericSend+0x8c>
    99da:	e08e      	b.n	9afa <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
    99dc:	4bb1      	ldr	r3, [pc, #708]	; (9ca4 <xQueueGenericSend+0x354>)
    99de:	4798      	blx	r3
    99e0:	0003      	movs	r3, r0
    99e2:	0018      	movs	r0, r3
    99e4:	4bb0      	ldr	r3, [pc, #704]	; (9ca8 <xQueueGenericSend+0x358>)
    99e6:	4798      	blx	r3
    99e8:	0003      	movs	r3, r0
    99ea:	001a      	movs	r2, r3
    99ec:	4baf      	ldr	r3, [pc, #700]	; (9cac <xQueueGenericSend+0x35c>)
    99ee:	881b      	ldrh	r3, [r3, #0]
    99f0:	4013      	ands	r3, r2
    99f2:	b29b      	uxth	r3, r3
    99f4:	2b00      	cmp	r3, #0
    99f6:	d02e      	beq.n	9a56 <xQueueGenericSend+0x106>
    99f8:	6a3b      	ldr	r3, [r7, #32]
    99fa:	0018      	movs	r0, r3
    99fc:	4bac      	ldr	r3, [pc, #688]	; (9cb0 <xQueueGenericSend+0x360>)
    99fe:	4798      	blx	r3
    9a00:	0003      	movs	r3, r0
    9a02:	001a      	movs	r2, r3
    9a04:	4ba9      	ldr	r3, [pc, #676]	; (9cac <xQueueGenericSend+0x35c>)
    9a06:	881b      	ldrh	r3, [r3, #0]
    9a08:	4013      	ands	r3, r2
    9a0a:	b29b      	uxth	r3, r3
    9a0c:	2b00      	cmp	r3, #0
    9a0e:	d022      	beq.n	9a56 <xQueueGenericSend+0x106>
    9a10:	683b      	ldr	r3, [r7, #0]
    9a12:	2b00      	cmp	r3, #0
    9a14:	d10b      	bne.n	9a2e <xQueueGenericSend+0xde>
    9a16:	6a3b      	ldr	r3, [r7, #32]
    9a18:	0018      	movs	r0, r3
    9a1a:	4ba6      	ldr	r3, [pc, #664]	; (9cb4 <xQueueGenericSend+0x364>)
    9a1c:	4798      	blx	r3
    9a1e:	0003      	movs	r3, r0
    9a20:	001a      	movs	r2, r3
    9a22:	4ba5      	ldr	r3, [pc, #660]	; (9cb8 <xQueueGenericSend+0x368>)
    9a24:	5c9b      	ldrb	r3, [r3, r2]
    9a26:	3320      	adds	r3, #32
    9a28:	b2db      	uxtb	r3, r3
    9a2a:	001d      	movs	r5, r3
    9a2c:	e000      	b.n	9a30 <xQueueGenericSend+0xe0>
    9a2e:	2525      	movs	r5, #37	; 0x25
    9a30:	6a3b      	ldr	r3, [r7, #32]
    9a32:	0018      	movs	r0, r3
    9a34:	4b9f      	ldr	r3, [pc, #636]	; (9cb4 <xQueueGenericSend+0x364>)
    9a36:	4798      	blx	r3
    9a38:	0003      	movs	r3, r0
    9a3a:	001a      	movs	r2, r3
    9a3c:	4b9e      	ldr	r3, [pc, #632]	; (9cb8 <xQueueGenericSend+0x368>)
    9a3e:	5c9c      	ldrb	r4, [r3, r2]
    9a40:	6a3b      	ldr	r3, [r7, #32]
    9a42:	0018      	movs	r0, r3
    9a44:	4b9d      	ldr	r3, [pc, #628]	; (9cbc <xQueueGenericSend+0x36c>)
    9a46:	4798      	blx	r3
    9a48:	0003      	movs	r3, r0
    9a4a:	b2db      	uxtb	r3, r3
    9a4c:	001a      	movs	r2, r3
    9a4e:	0021      	movs	r1, r4
    9a50:	0028      	movs	r0, r5
    9a52:	4b9b      	ldr	r3, [pc, #620]	; (9cc0 <xQueueGenericSend+0x370>)
    9a54:	4798      	blx	r3
    9a56:	6a3b      	ldr	r3, [r7, #32]
    9a58:	0018      	movs	r0, r3
    9a5a:	4b96      	ldr	r3, [pc, #600]	; (9cb4 <xQueueGenericSend+0x364>)
    9a5c:	4798      	blx	r3
    9a5e:	0003      	movs	r3, r0
    9a60:	001a      	movs	r2, r3
    9a62:	4b95      	ldr	r3, [pc, #596]	; (9cb8 <xQueueGenericSend+0x368>)
    9a64:	5c9c      	ldrb	r4, [r3, r2]
    9a66:	6a3b      	ldr	r3, [r7, #32]
    9a68:	0018      	movs	r0, r3
    9a6a:	4b94      	ldr	r3, [pc, #592]	; (9cbc <xQueueGenericSend+0x36c>)
    9a6c:	4798      	blx	r3
    9a6e:	0003      	movs	r3, r0
    9a70:	b2dd      	uxtb	r5, r3
    9a72:	6a3b      	ldr	r3, [r7, #32]
    9a74:	0018      	movs	r0, r3
    9a76:	4b8f      	ldr	r3, [pc, #572]	; (9cb4 <xQueueGenericSend+0x364>)
    9a78:	4798      	blx	r3
    9a7a:	0003      	movs	r3, r0
    9a7c:	001a      	movs	r2, r3
    9a7e:	4b8e      	ldr	r3, [pc, #568]	; (9cb8 <xQueueGenericSend+0x368>)
    9a80:	5c9b      	ldrb	r3, [r3, r2]
    9a82:	2b02      	cmp	r3, #2
    9a84:	d005      	beq.n	9a92 <xQueueGenericSend+0x142>
    9a86:	6a3b      	ldr	r3, [r7, #32]
    9a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9a8a:	b2db      	uxtb	r3, r3
    9a8c:	3301      	adds	r3, #1
    9a8e:	b2db      	uxtb	r3, r3
    9a90:	e000      	b.n	9a94 <xQueueGenericSend+0x144>
    9a92:	2300      	movs	r3, #0
    9a94:	001a      	movs	r2, r3
    9a96:	0029      	movs	r1, r5
    9a98:	0020      	movs	r0, r4
    9a9a:	4b8a      	ldr	r3, [pc, #552]	; (9cc4 <xQueueGenericSend+0x374>)
    9a9c:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    9a9e:	683a      	ldr	r2, [r7, #0]
    9aa0:	68b9      	ldr	r1, [r7, #8]
    9aa2:	6a3b      	ldr	r3, [r7, #32]
    9aa4:	0018      	movs	r0, r3
    9aa6:	4b88      	ldr	r3, [pc, #544]	; (9cc8 <xQueueGenericSend+0x378>)
    9aa8:	4798      	blx	r3
    9aaa:	0003      	movs	r3, r0
    9aac:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    9aae:	6a3b      	ldr	r3, [r7, #32]
    9ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d00a      	beq.n	9acc <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    9ab6:	683a      	ldr	r2, [r7, #0]
    9ab8:	6a3b      	ldr	r3, [r7, #32]
    9aba:	0011      	movs	r1, r2
    9abc:	0018      	movs	r0, r3
    9abe:	4b83      	ldr	r3, [pc, #524]	; (9ccc <xQueueGenericSend+0x37c>)
    9ac0:	4798      	blx	r3
    9ac2:	1e03      	subs	r3, r0, #0
    9ac4:	d015      	beq.n	9af2 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    9ac6:	4b82      	ldr	r3, [pc, #520]	; (9cd0 <xQueueGenericSend+0x380>)
    9ac8:	4798      	blx	r3
    9aca:	e012      	b.n	9af2 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9acc:	6a3b      	ldr	r3, [r7, #32]
    9ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d009      	beq.n	9ae8 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9ad4:	6a3b      	ldr	r3, [r7, #32]
    9ad6:	3324      	adds	r3, #36	; 0x24
    9ad8:	0018      	movs	r0, r3
    9ada:	4b7e      	ldr	r3, [pc, #504]	; (9cd4 <xQueueGenericSend+0x384>)
    9adc:	4798      	blx	r3
    9ade:	1e03      	subs	r3, r0, #0
    9ae0:	d007      	beq.n	9af2 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    9ae2:	4b7b      	ldr	r3, [pc, #492]	; (9cd0 <xQueueGenericSend+0x380>)
    9ae4:	4798      	blx	r3
    9ae6:	e004      	b.n	9af2 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    9ae8:	69fb      	ldr	r3, [r7, #28]
    9aea:	2b00      	cmp	r3, #0
    9aec:	d001      	beq.n	9af2 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    9aee:	4b78      	ldr	r3, [pc, #480]	; (9cd0 <xQueueGenericSend+0x380>)
    9af0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    9af2:	4b79      	ldr	r3, [pc, #484]	; (9cd8 <xQueueGenericSend+0x388>)
    9af4:	4798      	blx	r3
				return pdPASS;
    9af6:	2301      	movs	r3, #1
    9af8:	e142      	b.n	9d80 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    9afa:	687b      	ldr	r3, [r7, #4]
    9afc:	2b00      	cmp	r3, #0
    9afe:	d140      	bne.n	9b82 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    9b00:	4b75      	ldr	r3, [pc, #468]	; (9cd8 <xQueueGenericSend+0x388>)
    9b02:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    9b04:	4b67      	ldr	r3, [pc, #412]	; (9ca4 <xQueueGenericSend+0x354>)
    9b06:	4798      	blx	r3
    9b08:	0003      	movs	r3, r0
    9b0a:	0018      	movs	r0, r3
    9b0c:	4b66      	ldr	r3, [pc, #408]	; (9ca8 <xQueueGenericSend+0x358>)
    9b0e:	4798      	blx	r3
    9b10:	0003      	movs	r3, r0
    9b12:	001a      	movs	r2, r3
    9b14:	4b65      	ldr	r3, [pc, #404]	; (9cac <xQueueGenericSend+0x35c>)
    9b16:	881b      	ldrh	r3, [r3, #0]
    9b18:	4013      	ands	r3, r2
    9b1a:	b29b      	uxth	r3, r3
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d02e      	beq.n	9b7e <xQueueGenericSend+0x22e>
    9b20:	6a3b      	ldr	r3, [r7, #32]
    9b22:	0018      	movs	r0, r3
    9b24:	4b62      	ldr	r3, [pc, #392]	; (9cb0 <xQueueGenericSend+0x360>)
    9b26:	4798      	blx	r3
    9b28:	0003      	movs	r3, r0
    9b2a:	001a      	movs	r2, r3
    9b2c:	4b5f      	ldr	r3, [pc, #380]	; (9cac <xQueueGenericSend+0x35c>)
    9b2e:	881b      	ldrh	r3, [r3, #0]
    9b30:	4013      	ands	r3, r2
    9b32:	b29b      	uxth	r3, r3
    9b34:	2b00      	cmp	r3, #0
    9b36:	d022      	beq.n	9b7e <xQueueGenericSend+0x22e>
    9b38:	683b      	ldr	r3, [r7, #0]
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d10b      	bne.n	9b56 <xQueueGenericSend+0x206>
    9b3e:	6a3b      	ldr	r3, [r7, #32]
    9b40:	0018      	movs	r0, r3
    9b42:	4b5c      	ldr	r3, [pc, #368]	; (9cb4 <xQueueGenericSend+0x364>)
    9b44:	4798      	blx	r3
    9b46:	0003      	movs	r3, r0
    9b48:	001a      	movs	r2, r3
    9b4a:	4b5b      	ldr	r3, [pc, #364]	; (9cb8 <xQueueGenericSend+0x368>)
    9b4c:	5c9b      	ldrb	r3, [r3, r2]
    9b4e:	3348      	adds	r3, #72	; 0x48
    9b50:	b2db      	uxtb	r3, r3
    9b52:	001d      	movs	r5, r3
    9b54:	e000      	b.n	9b58 <xQueueGenericSend+0x208>
    9b56:	254d      	movs	r5, #77	; 0x4d
    9b58:	6a3b      	ldr	r3, [r7, #32]
    9b5a:	0018      	movs	r0, r3
    9b5c:	4b55      	ldr	r3, [pc, #340]	; (9cb4 <xQueueGenericSend+0x364>)
    9b5e:	4798      	blx	r3
    9b60:	0003      	movs	r3, r0
    9b62:	001a      	movs	r2, r3
    9b64:	4b54      	ldr	r3, [pc, #336]	; (9cb8 <xQueueGenericSend+0x368>)
    9b66:	5c9c      	ldrb	r4, [r3, r2]
    9b68:	6a3b      	ldr	r3, [r7, #32]
    9b6a:	0018      	movs	r0, r3
    9b6c:	4b53      	ldr	r3, [pc, #332]	; (9cbc <xQueueGenericSend+0x36c>)
    9b6e:	4798      	blx	r3
    9b70:	0003      	movs	r3, r0
    9b72:	b2db      	uxtb	r3, r3
    9b74:	001a      	movs	r2, r3
    9b76:	0021      	movs	r1, r4
    9b78:	0028      	movs	r0, r5
    9b7a:	4b51      	ldr	r3, [pc, #324]	; (9cc0 <xQueueGenericSend+0x370>)
    9b7c:	4798      	blx	r3
					return errQUEUE_FULL;
    9b7e:	2300      	movs	r3, #0
    9b80:	e0fe      	b.n	9d80 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
    9b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9b84:	2b00      	cmp	r3, #0
    9b86:	d106      	bne.n	9b96 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    9b88:	2314      	movs	r3, #20
    9b8a:	18fb      	adds	r3, r7, r3
    9b8c:	0018      	movs	r0, r3
    9b8e:	4b53      	ldr	r3, [pc, #332]	; (9cdc <xQueueGenericSend+0x38c>)
    9b90:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    9b92:	2301      	movs	r3, #1
    9b94:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    9b96:	4b50      	ldr	r3, [pc, #320]	; (9cd8 <xQueueGenericSend+0x388>)
    9b98:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    9b9a:	4b51      	ldr	r3, [pc, #324]	; (9ce0 <xQueueGenericSend+0x390>)
    9b9c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    9b9e:	4b40      	ldr	r3, [pc, #256]	; (9ca0 <xQueueGenericSend+0x350>)
    9ba0:	4798      	blx	r3
    9ba2:	6a3b      	ldr	r3, [r7, #32]
    9ba4:	2244      	movs	r2, #68	; 0x44
    9ba6:	5c9b      	ldrb	r3, [r3, r2]
    9ba8:	b25b      	sxtb	r3, r3
    9baa:	3301      	adds	r3, #1
    9bac:	d103      	bne.n	9bb6 <xQueueGenericSend+0x266>
    9bae:	6a3b      	ldr	r3, [r7, #32]
    9bb0:	2244      	movs	r2, #68	; 0x44
    9bb2:	2100      	movs	r1, #0
    9bb4:	5499      	strb	r1, [r3, r2]
    9bb6:	6a3b      	ldr	r3, [r7, #32]
    9bb8:	2245      	movs	r2, #69	; 0x45
    9bba:	5c9b      	ldrb	r3, [r3, r2]
    9bbc:	b25b      	sxtb	r3, r3
    9bbe:	3301      	adds	r3, #1
    9bc0:	d103      	bne.n	9bca <xQueueGenericSend+0x27a>
    9bc2:	6a3b      	ldr	r3, [r7, #32]
    9bc4:	2245      	movs	r2, #69	; 0x45
    9bc6:	2100      	movs	r1, #0
    9bc8:	5499      	strb	r1, [r3, r2]
    9bca:	4b43      	ldr	r3, [pc, #268]	; (9cd8 <xQueueGenericSend+0x388>)
    9bcc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    9bce:	1d3a      	adds	r2, r7, #4
    9bd0:	2314      	movs	r3, #20
    9bd2:	18fb      	adds	r3, r7, r3
    9bd4:	0011      	movs	r1, r2
    9bd6:	0018      	movs	r0, r3
    9bd8:	4b42      	ldr	r3, [pc, #264]	; (9ce4 <xQueueGenericSend+0x394>)
    9bda:	4798      	blx	r3
    9bdc:	1e03      	subs	r3, r0, #0
    9bde:	d000      	beq.n	9be2 <xQueueGenericSend+0x292>
    9be0:	e08a      	b.n	9cf8 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    9be2:	6a3b      	ldr	r3, [r7, #32]
    9be4:	0018      	movs	r0, r3
    9be6:	4b40      	ldr	r3, [pc, #256]	; (9ce8 <xQueueGenericSend+0x398>)
    9be8:	4798      	blx	r3
    9bea:	1e03      	subs	r3, r0, #0
    9bec:	d04f      	beq.n	9c8e <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    9bee:	4b2d      	ldr	r3, [pc, #180]	; (9ca4 <xQueueGenericSend+0x354>)
    9bf0:	4798      	blx	r3
    9bf2:	0003      	movs	r3, r0
    9bf4:	0018      	movs	r0, r3
    9bf6:	4b2c      	ldr	r3, [pc, #176]	; (9ca8 <xQueueGenericSend+0x358>)
    9bf8:	4798      	blx	r3
    9bfa:	0003      	movs	r3, r0
    9bfc:	001a      	movs	r2, r3
    9bfe:	4b2b      	ldr	r3, [pc, #172]	; (9cac <xQueueGenericSend+0x35c>)
    9c00:	881b      	ldrh	r3, [r3, #0]
    9c02:	4013      	ands	r3, r2
    9c04:	b29b      	uxth	r3, r3
    9c06:	2b00      	cmp	r3, #0
    9c08:	d02e      	beq.n	9c68 <xQueueGenericSend+0x318>
    9c0a:	6a3b      	ldr	r3, [r7, #32]
    9c0c:	0018      	movs	r0, r3
    9c0e:	4b28      	ldr	r3, [pc, #160]	; (9cb0 <xQueueGenericSend+0x360>)
    9c10:	4798      	blx	r3
    9c12:	0003      	movs	r3, r0
    9c14:	001a      	movs	r2, r3
    9c16:	4b25      	ldr	r3, [pc, #148]	; (9cac <xQueueGenericSend+0x35c>)
    9c18:	881b      	ldrh	r3, [r3, #0]
    9c1a:	4013      	ands	r3, r2
    9c1c:	b29b      	uxth	r3, r3
    9c1e:	2b00      	cmp	r3, #0
    9c20:	d022      	beq.n	9c68 <xQueueGenericSend+0x318>
    9c22:	683b      	ldr	r3, [r7, #0]
    9c24:	2b00      	cmp	r3, #0
    9c26:	d10b      	bne.n	9c40 <xQueueGenericSend+0x2f0>
    9c28:	6a3b      	ldr	r3, [r7, #32]
    9c2a:	0018      	movs	r0, r3
    9c2c:	4b21      	ldr	r3, [pc, #132]	; (9cb4 <xQueueGenericSend+0x364>)
    9c2e:	4798      	blx	r3
    9c30:	0003      	movs	r3, r0
    9c32:	001a      	movs	r2, r3
    9c34:	4b20      	ldr	r3, [pc, #128]	; (9cb8 <xQueueGenericSend+0x368>)
    9c36:	5c9b      	ldrb	r3, [r3, r2]
    9c38:	3370      	adds	r3, #112	; 0x70
    9c3a:	b2db      	uxtb	r3, r3
    9c3c:	001d      	movs	r5, r3
    9c3e:	e000      	b.n	9c42 <xQueueGenericSend+0x2f2>
    9c40:	2575      	movs	r5, #117	; 0x75
    9c42:	6a3b      	ldr	r3, [r7, #32]
    9c44:	0018      	movs	r0, r3
    9c46:	4b1b      	ldr	r3, [pc, #108]	; (9cb4 <xQueueGenericSend+0x364>)
    9c48:	4798      	blx	r3
    9c4a:	0003      	movs	r3, r0
    9c4c:	001a      	movs	r2, r3
    9c4e:	4b1a      	ldr	r3, [pc, #104]	; (9cb8 <xQueueGenericSend+0x368>)
    9c50:	5c9c      	ldrb	r4, [r3, r2]
    9c52:	6a3b      	ldr	r3, [r7, #32]
    9c54:	0018      	movs	r0, r3
    9c56:	4b19      	ldr	r3, [pc, #100]	; (9cbc <xQueueGenericSend+0x36c>)
    9c58:	4798      	blx	r3
    9c5a:	0003      	movs	r3, r0
    9c5c:	b2db      	uxtb	r3, r3
    9c5e:	001a      	movs	r2, r3
    9c60:	0021      	movs	r1, r4
    9c62:	0028      	movs	r0, r5
    9c64:	4b16      	ldr	r3, [pc, #88]	; (9cc0 <xQueueGenericSend+0x370>)
    9c66:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    9c68:	6a3b      	ldr	r3, [r7, #32]
    9c6a:	3310      	adds	r3, #16
    9c6c:	687a      	ldr	r2, [r7, #4]
    9c6e:	0011      	movs	r1, r2
    9c70:	0018      	movs	r0, r3
    9c72:	4b1e      	ldr	r3, [pc, #120]	; (9cec <xQueueGenericSend+0x39c>)
    9c74:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    9c76:	6a3b      	ldr	r3, [r7, #32]
    9c78:	0018      	movs	r0, r3
    9c7a:	4b1d      	ldr	r3, [pc, #116]	; (9cf0 <xQueueGenericSend+0x3a0>)
    9c7c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    9c7e:	4b1d      	ldr	r3, [pc, #116]	; (9cf4 <xQueueGenericSend+0x3a4>)
    9c80:	4798      	blx	r3
    9c82:	1e03      	subs	r3, r0, #0
    9c84:	d000      	beq.n	9c88 <xQueueGenericSend+0x338>
    9c86:	e69d      	b.n	99c4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    9c88:	4b11      	ldr	r3, [pc, #68]	; (9cd0 <xQueueGenericSend+0x380>)
    9c8a:	4798      	blx	r3
    9c8c:	e69a      	b.n	99c4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    9c8e:	6a3b      	ldr	r3, [r7, #32]
    9c90:	0018      	movs	r0, r3
    9c92:	4b17      	ldr	r3, [pc, #92]	; (9cf0 <xQueueGenericSend+0x3a0>)
    9c94:	4798      	blx	r3
				( void ) xTaskResumeAll();
    9c96:	4b17      	ldr	r3, [pc, #92]	; (9cf4 <xQueueGenericSend+0x3a4>)
    9c98:	4798      	blx	r3
    9c9a:	e693      	b.n	99c4 <xQueueGenericSend+0x74>
    9c9c:	0000c0dd 	.word	0x0000c0dd
    9ca0:	000093b9 	.word	0x000093b9
    9ca4:	0000764d 	.word	0x0000764d
    9ca8:	000073b1 	.word	0x000073b1
    9cac:	20000104 	.word	0x20000104
    9cb0:	00007471 	.word	0x00007471
    9cb4:	00007371 	.word	0x00007371
    9cb8:	200000f8 	.word	0x200000f8
    9cbc:	00007451 	.word	0x00007451
    9cc0:	00007da9 	.word	0x00007da9
    9cc4:	00008405 	.word	0x00008405
    9cc8:	0000ab89 	.word	0x0000ab89
    9ccc:	0000ae8d 	.word	0x0000ae8d
    9cd0:	000093a1 	.word	0x000093a1
    9cd4:	0000bc4d 	.word	0x0000bc4d
    9cd8:	000093dd 	.word	0x000093dd
    9cdc:	0000bd8d 	.word	0x0000bd8d
    9ce0:	0000b675 	.word	0x0000b675
    9ce4:	0000bdb5 	.word	0x0000bdb5
    9ce8:	0000addd 	.word	0x0000addd
    9cec:	0000bb29 	.word	0x0000bb29
    9cf0:	0000acb9 	.word	0x0000acb9
    9cf4:	0000b68d 	.word	0x0000b68d
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    9cf8:	6a3b      	ldr	r3, [r7, #32]
    9cfa:	0018      	movs	r0, r3
    9cfc:	4b22      	ldr	r3, [pc, #136]	; (9d88 <xQueueGenericSend+0x438>)
    9cfe:	4798      	blx	r3
			( void ) xTaskResumeAll();
    9d00:	4b22      	ldr	r3, [pc, #136]	; (9d8c <xQueueGenericSend+0x43c>)
    9d02:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
    9d04:	4b22      	ldr	r3, [pc, #136]	; (9d90 <xQueueGenericSend+0x440>)
    9d06:	4798      	blx	r3
    9d08:	0003      	movs	r3, r0
    9d0a:	0018      	movs	r0, r3
    9d0c:	4b21      	ldr	r3, [pc, #132]	; (9d94 <xQueueGenericSend+0x444>)
    9d0e:	4798      	blx	r3
    9d10:	0003      	movs	r3, r0
    9d12:	001a      	movs	r2, r3
    9d14:	4b20      	ldr	r3, [pc, #128]	; (9d98 <xQueueGenericSend+0x448>)
    9d16:	881b      	ldrh	r3, [r3, #0]
    9d18:	4013      	ands	r3, r2
    9d1a:	b29b      	uxth	r3, r3
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d02e      	beq.n	9d7e <xQueueGenericSend+0x42e>
    9d20:	6a3b      	ldr	r3, [r7, #32]
    9d22:	0018      	movs	r0, r3
    9d24:	4b1d      	ldr	r3, [pc, #116]	; (9d9c <xQueueGenericSend+0x44c>)
    9d26:	4798      	blx	r3
    9d28:	0003      	movs	r3, r0
    9d2a:	001a      	movs	r2, r3
    9d2c:	4b1a      	ldr	r3, [pc, #104]	; (9d98 <xQueueGenericSend+0x448>)
    9d2e:	881b      	ldrh	r3, [r3, #0]
    9d30:	4013      	ands	r3, r2
    9d32:	b29b      	uxth	r3, r3
    9d34:	2b00      	cmp	r3, #0
    9d36:	d022      	beq.n	9d7e <xQueueGenericSend+0x42e>
    9d38:	683b      	ldr	r3, [r7, #0]
    9d3a:	2b00      	cmp	r3, #0
    9d3c:	d10b      	bne.n	9d56 <xQueueGenericSend+0x406>
    9d3e:	6a3b      	ldr	r3, [r7, #32]
    9d40:	0018      	movs	r0, r3
    9d42:	4b17      	ldr	r3, [pc, #92]	; (9da0 <xQueueGenericSend+0x450>)
    9d44:	4798      	blx	r3
    9d46:	0003      	movs	r3, r0
    9d48:	001a      	movs	r2, r3
    9d4a:	4b16      	ldr	r3, [pc, #88]	; (9da4 <xQueueGenericSend+0x454>)
    9d4c:	5c9b      	ldrb	r3, [r3, r2]
    9d4e:	3348      	adds	r3, #72	; 0x48
    9d50:	b2db      	uxtb	r3, r3
    9d52:	001d      	movs	r5, r3
    9d54:	e000      	b.n	9d58 <xQueueGenericSend+0x408>
    9d56:	254d      	movs	r5, #77	; 0x4d
    9d58:	6a3b      	ldr	r3, [r7, #32]
    9d5a:	0018      	movs	r0, r3
    9d5c:	4b10      	ldr	r3, [pc, #64]	; (9da0 <xQueueGenericSend+0x450>)
    9d5e:	4798      	blx	r3
    9d60:	0003      	movs	r3, r0
    9d62:	001a      	movs	r2, r3
    9d64:	4b0f      	ldr	r3, [pc, #60]	; (9da4 <xQueueGenericSend+0x454>)
    9d66:	5c9c      	ldrb	r4, [r3, r2]
    9d68:	6a3b      	ldr	r3, [r7, #32]
    9d6a:	0018      	movs	r0, r3
    9d6c:	4b0e      	ldr	r3, [pc, #56]	; (9da8 <xQueueGenericSend+0x458>)
    9d6e:	4798      	blx	r3
    9d70:	0003      	movs	r3, r0
    9d72:	b2db      	uxtb	r3, r3
    9d74:	001a      	movs	r2, r3
    9d76:	0021      	movs	r1, r4
    9d78:	0028      	movs	r0, r5
    9d7a:	4b0c      	ldr	r3, [pc, #48]	; (9dac <xQueueGenericSend+0x45c>)
    9d7c:	4798      	blx	r3
			return errQUEUE_FULL;
    9d7e:	2300      	movs	r3, #0
		}
	}
}
    9d80:	0018      	movs	r0, r3
    9d82:	46bd      	mov	sp, r7
    9d84:	b00a      	add	sp, #40	; 0x28
    9d86:	bdb0      	pop	{r4, r5, r7, pc}
    9d88:	0000acb9 	.word	0x0000acb9
    9d8c:	0000b68d 	.word	0x0000b68d
    9d90:	0000764d 	.word	0x0000764d
    9d94:	000073b1 	.word	0x000073b1
    9d98:	20000104 	.word	0x20000104
    9d9c:	00007471 	.word	0x00007471
    9da0:	00007371 	.word	0x00007371
    9da4:	200000f8 	.word	0x200000f8
    9da8:	00007451 	.word	0x00007451
    9dac:	00007da9 	.word	0x00007da9

00009db0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    9db0:	b5b0      	push	{r4, r5, r7, lr}
    9db2:	b088      	sub	sp, #32
    9db4:	af00      	add	r7, sp, #0
    9db6:	60f8      	str	r0, [r7, #12]
    9db8:	60b9      	str	r1, [r7, #8]
    9dba:	607a      	str	r2, [r7, #4]
    9dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    9dbe:	68fb      	ldr	r3, [r7, #12]
    9dc0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    9dc2:	69bb      	ldr	r3, [r7, #24]
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d101      	bne.n	9dcc <xQueueGenericSendFromISR+0x1c>
    9dc8:	b672      	cpsid	i
    9dca:	e7fe      	b.n	9dca <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    9dcc:	68bb      	ldr	r3, [r7, #8]
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d103      	bne.n	9dda <xQueueGenericSendFromISR+0x2a>
    9dd2:	69bb      	ldr	r3, [r7, #24]
    9dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	d101      	bne.n	9dde <xQueueGenericSendFromISR+0x2e>
    9dda:	2301      	movs	r3, #1
    9ddc:	e000      	b.n	9de0 <xQueueGenericSendFromISR+0x30>
    9dde:	2300      	movs	r3, #0
    9de0:	2b00      	cmp	r3, #0
    9de2:	d101      	bne.n	9de8 <xQueueGenericSendFromISR+0x38>
    9de4:	b672      	cpsid	i
    9de6:	e7fe      	b.n	9de6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    9de8:	683b      	ldr	r3, [r7, #0]
    9dea:	2b02      	cmp	r3, #2
    9dec:	d103      	bne.n	9df6 <xQueueGenericSendFromISR+0x46>
    9dee:	69bb      	ldr	r3, [r7, #24]
    9df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9df2:	2b01      	cmp	r3, #1
    9df4:	d101      	bne.n	9dfa <xQueueGenericSendFromISR+0x4a>
    9df6:	2301      	movs	r3, #1
    9df8:	e000      	b.n	9dfc <xQueueGenericSendFromISR+0x4c>
    9dfa:	2300      	movs	r3, #0
    9dfc:	2b00      	cmp	r3, #0
    9dfe:	d101      	bne.n	9e04 <xQueueGenericSendFromISR+0x54>
    9e00:	b672      	cpsid	i
    9e02:	e7fe      	b.n	9e02 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    9e04:	4b68      	ldr	r3, [pc, #416]	; (9fa8 <xQueueGenericSendFromISR+0x1f8>)
    9e06:	4798      	blx	r3
    9e08:	0003      	movs	r3, r0
    9e0a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9e0c:	69bb      	ldr	r3, [r7, #24]
    9e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9e10:	69bb      	ldr	r3, [r7, #24]
    9e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9e14:	429a      	cmp	r2, r3
    9e16:	d303      	bcc.n	9e20 <xQueueGenericSendFromISR+0x70>
    9e18:	683b      	ldr	r3, [r7, #0]
    9e1a:	2b02      	cmp	r3, #2
    9e1c:	d000      	beq.n	9e20 <xQueueGenericSendFromISR+0x70>
    9e1e:	e088      	b.n	9f32 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    9e20:	2313      	movs	r3, #19
    9e22:	18fb      	adds	r3, r7, r3
    9e24:	69ba      	ldr	r2, [r7, #24]
    9e26:	2145      	movs	r1, #69	; 0x45
    9e28:	5c52      	ldrb	r2, [r2, r1]
    9e2a:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    9e2c:	69bb      	ldr	r3, [r7, #24]
    9e2e:	0018      	movs	r0, r3
    9e30:	4b5e      	ldr	r3, [pc, #376]	; (9fac <xQueueGenericSendFromISR+0x1fc>)
    9e32:	4798      	blx	r3
    9e34:	0003      	movs	r3, r0
    9e36:	001a      	movs	r2, r3
    9e38:	4b5d      	ldr	r3, [pc, #372]	; (9fb0 <xQueueGenericSendFromISR+0x200>)
    9e3a:	881b      	ldrh	r3, [r3, #0]
    9e3c:	4013      	ands	r3, r2
    9e3e:	b29b      	uxth	r3, r3
    9e40:	2b00      	cmp	r3, #0
    9e42:	d022      	beq.n	9e8a <xQueueGenericSendFromISR+0xda>
    9e44:	683b      	ldr	r3, [r7, #0]
    9e46:	2b00      	cmp	r3, #0
    9e48:	d10b      	bne.n	9e62 <xQueueGenericSendFromISR+0xb2>
    9e4a:	69bb      	ldr	r3, [r7, #24]
    9e4c:	0018      	movs	r0, r3
    9e4e:	4b59      	ldr	r3, [pc, #356]	; (9fb4 <xQueueGenericSendFromISR+0x204>)
    9e50:	4798      	blx	r3
    9e52:	0003      	movs	r3, r0
    9e54:	001a      	movs	r2, r3
    9e56:	4b58      	ldr	r3, [pc, #352]	; (9fb8 <xQueueGenericSendFromISR+0x208>)
    9e58:	5c9b      	ldrb	r3, [r3, r2]
    9e5a:	3330      	adds	r3, #48	; 0x30
    9e5c:	b2db      	uxtb	r3, r3
    9e5e:	001d      	movs	r5, r3
    9e60:	e000      	b.n	9e64 <xQueueGenericSendFromISR+0xb4>
    9e62:	2535      	movs	r5, #53	; 0x35
    9e64:	69bb      	ldr	r3, [r7, #24]
    9e66:	0018      	movs	r0, r3
    9e68:	4b52      	ldr	r3, [pc, #328]	; (9fb4 <xQueueGenericSendFromISR+0x204>)
    9e6a:	4798      	blx	r3
    9e6c:	0003      	movs	r3, r0
    9e6e:	001a      	movs	r2, r3
    9e70:	4b51      	ldr	r3, [pc, #324]	; (9fb8 <xQueueGenericSendFromISR+0x208>)
    9e72:	5c9c      	ldrb	r4, [r3, r2]
    9e74:	69bb      	ldr	r3, [r7, #24]
    9e76:	0018      	movs	r0, r3
    9e78:	4b50      	ldr	r3, [pc, #320]	; (9fbc <xQueueGenericSendFromISR+0x20c>)
    9e7a:	4798      	blx	r3
    9e7c:	0003      	movs	r3, r0
    9e7e:	b2db      	uxtb	r3, r3
    9e80:	001a      	movs	r2, r3
    9e82:	0021      	movs	r1, r4
    9e84:	0028      	movs	r0, r5
    9e86:	4b4e      	ldr	r3, [pc, #312]	; (9fc0 <xQueueGenericSendFromISR+0x210>)
    9e88:	4798      	blx	r3
    9e8a:	69bb      	ldr	r3, [r7, #24]
    9e8c:	0018      	movs	r0, r3
    9e8e:	4b49      	ldr	r3, [pc, #292]	; (9fb4 <xQueueGenericSendFromISR+0x204>)
    9e90:	4798      	blx	r3
    9e92:	0003      	movs	r3, r0
    9e94:	001a      	movs	r2, r3
    9e96:	4b48      	ldr	r3, [pc, #288]	; (9fb8 <xQueueGenericSendFromISR+0x208>)
    9e98:	5c9c      	ldrb	r4, [r3, r2]
    9e9a:	69bb      	ldr	r3, [r7, #24]
    9e9c:	0018      	movs	r0, r3
    9e9e:	4b47      	ldr	r3, [pc, #284]	; (9fbc <xQueueGenericSendFromISR+0x20c>)
    9ea0:	4798      	blx	r3
    9ea2:	0003      	movs	r3, r0
    9ea4:	b2d9      	uxtb	r1, r3
    9ea6:	69bb      	ldr	r3, [r7, #24]
    9ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9eaa:	b2db      	uxtb	r3, r3
    9eac:	3301      	adds	r3, #1
    9eae:	b2db      	uxtb	r3, r3
    9eb0:	001a      	movs	r2, r3
    9eb2:	0020      	movs	r0, r4
    9eb4:	4b43      	ldr	r3, [pc, #268]	; (9fc4 <xQueueGenericSendFromISR+0x214>)
    9eb6:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    9eb8:	683a      	ldr	r2, [r7, #0]
    9eba:	68b9      	ldr	r1, [r7, #8]
    9ebc:	69bb      	ldr	r3, [r7, #24]
    9ebe:	0018      	movs	r0, r3
    9ec0:	4b41      	ldr	r3, [pc, #260]	; (9fc8 <xQueueGenericSendFromISR+0x218>)
    9ec2:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    9ec4:	2313      	movs	r3, #19
    9ec6:	18fb      	adds	r3, r7, r3
    9ec8:	781b      	ldrb	r3, [r3, #0]
    9eca:	b25b      	sxtb	r3, r3
    9ecc:	3301      	adds	r3, #1
    9ece:	d124      	bne.n	9f1a <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    9ed0:	69bb      	ldr	r3, [r7, #24]
    9ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d00e      	beq.n	9ef6 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    9ed8:	683a      	ldr	r2, [r7, #0]
    9eda:	69bb      	ldr	r3, [r7, #24]
    9edc:	0011      	movs	r1, r2
    9ede:	0018      	movs	r0, r3
    9ee0:	4b3a      	ldr	r3, [pc, #232]	; (9fcc <xQueueGenericSendFromISR+0x21c>)
    9ee2:	4798      	blx	r3
    9ee4:	1e03      	subs	r3, r0, #0
    9ee6:	d021      	beq.n	9f2c <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    9ee8:	687b      	ldr	r3, [r7, #4]
    9eea:	2b00      	cmp	r3, #0
    9eec:	d01e      	beq.n	9f2c <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    9eee:	687b      	ldr	r3, [r7, #4]
    9ef0:	2201      	movs	r2, #1
    9ef2:	601a      	str	r2, [r3, #0]
    9ef4:	e01a      	b.n	9f2c <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9ef6:	69bb      	ldr	r3, [r7, #24]
    9ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9efa:	2b00      	cmp	r3, #0
    9efc:	d016      	beq.n	9f2c <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9efe:	69bb      	ldr	r3, [r7, #24]
    9f00:	3324      	adds	r3, #36	; 0x24
    9f02:	0018      	movs	r0, r3
    9f04:	4b32      	ldr	r3, [pc, #200]	; (9fd0 <xQueueGenericSendFromISR+0x220>)
    9f06:	4798      	blx	r3
    9f08:	1e03      	subs	r3, r0, #0
    9f0a:	d00f      	beq.n	9f2c <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    9f0c:	687b      	ldr	r3, [r7, #4]
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d00c      	beq.n	9f2c <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	2201      	movs	r2, #1
    9f16:	601a      	str	r2, [r3, #0]
    9f18:	e008      	b.n	9f2c <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    9f1a:	2313      	movs	r3, #19
    9f1c:	18fb      	adds	r3, r7, r3
    9f1e:	781b      	ldrb	r3, [r3, #0]
    9f20:	3301      	adds	r3, #1
    9f22:	b2db      	uxtb	r3, r3
    9f24:	b259      	sxtb	r1, r3
    9f26:	69bb      	ldr	r3, [r7, #24]
    9f28:	2245      	movs	r2, #69	; 0x45
    9f2a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    9f2c:	2301      	movs	r3, #1
    9f2e:	61fb      	str	r3, [r7, #28]
		{
    9f30:	e030      	b.n	9f94 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    9f32:	69bb      	ldr	r3, [r7, #24]
    9f34:	0018      	movs	r0, r3
    9f36:	4b1d      	ldr	r3, [pc, #116]	; (9fac <xQueueGenericSendFromISR+0x1fc>)
    9f38:	4798      	blx	r3
    9f3a:	0003      	movs	r3, r0
    9f3c:	001a      	movs	r2, r3
    9f3e:	4b1c      	ldr	r3, [pc, #112]	; (9fb0 <xQueueGenericSendFromISR+0x200>)
    9f40:	881b      	ldrh	r3, [r3, #0]
    9f42:	4013      	ands	r3, r2
    9f44:	b29b      	uxth	r3, r3
    9f46:	2b00      	cmp	r3, #0
    9f48:	d022      	beq.n	9f90 <xQueueGenericSendFromISR+0x1e0>
    9f4a:	683b      	ldr	r3, [r7, #0]
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d10b      	bne.n	9f68 <xQueueGenericSendFromISR+0x1b8>
    9f50:	69bb      	ldr	r3, [r7, #24]
    9f52:	0018      	movs	r0, r3
    9f54:	4b17      	ldr	r3, [pc, #92]	; (9fb4 <xQueueGenericSendFromISR+0x204>)
    9f56:	4798      	blx	r3
    9f58:	0003      	movs	r3, r0
    9f5a:	001a      	movs	r2, r3
    9f5c:	4b16      	ldr	r3, [pc, #88]	; (9fb8 <xQueueGenericSendFromISR+0x208>)
    9f5e:	5c9b      	ldrb	r3, [r3, r2]
    9f60:	3358      	adds	r3, #88	; 0x58
    9f62:	b2db      	uxtb	r3, r3
    9f64:	001d      	movs	r5, r3
    9f66:	e000      	b.n	9f6a <xQueueGenericSendFromISR+0x1ba>
    9f68:	255d      	movs	r5, #93	; 0x5d
    9f6a:	69bb      	ldr	r3, [r7, #24]
    9f6c:	0018      	movs	r0, r3
    9f6e:	4b11      	ldr	r3, [pc, #68]	; (9fb4 <xQueueGenericSendFromISR+0x204>)
    9f70:	4798      	blx	r3
    9f72:	0003      	movs	r3, r0
    9f74:	001a      	movs	r2, r3
    9f76:	4b10      	ldr	r3, [pc, #64]	; (9fb8 <xQueueGenericSendFromISR+0x208>)
    9f78:	5c9c      	ldrb	r4, [r3, r2]
    9f7a:	69bb      	ldr	r3, [r7, #24]
    9f7c:	0018      	movs	r0, r3
    9f7e:	4b0f      	ldr	r3, [pc, #60]	; (9fbc <xQueueGenericSendFromISR+0x20c>)
    9f80:	4798      	blx	r3
    9f82:	0003      	movs	r3, r0
    9f84:	b2db      	uxtb	r3, r3
    9f86:	001a      	movs	r2, r3
    9f88:	0021      	movs	r1, r4
    9f8a:	0028      	movs	r0, r5
    9f8c:	4b0c      	ldr	r3, [pc, #48]	; (9fc0 <xQueueGenericSendFromISR+0x210>)
    9f8e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    9f90:	2300      	movs	r3, #0
    9f92:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    9f94:	697b      	ldr	r3, [r7, #20]
    9f96:	0018      	movs	r0, r3
    9f98:	4b0e      	ldr	r3, [pc, #56]	; (9fd4 <xQueueGenericSendFromISR+0x224>)
    9f9a:	4798      	blx	r3

	return xReturn;
    9f9c:	69fb      	ldr	r3, [r7, #28]
}
    9f9e:	0018      	movs	r0, r3
    9fa0:	46bd      	mov	sp, r7
    9fa2:	b008      	add	sp, #32
    9fa4:	bdb0      	pop	{r4, r5, r7, pc}
    9fa6:	46c0      	nop			; (mov r8, r8)
    9fa8:	0000940d 	.word	0x0000940d
    9fac:	00007471 	.word	0x00007471
    9fb0:	20000104 	.word	0x20000104
    9fb4:	00007371 	.word	0x00007371
    9fb8:	200000f8 	.word	0x200000f8
    9fbc:	00007451 	.word	0x00007451
    9fc0:	00007da9 	.word	0x00007da9
    9fc4:	00008405 	.word	0x00008405
    9fc8:	0000ab89 	.word	0x0000ab89
    9fcc:	0000ae8d 	.word	0x0000ae8d
    9fd0:	0000bc4d 	.word	0x0000bc4d
    9fd4:	00009419 	.word	0x00009419

00009fd8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    9fd8:	b580      	push	{r7, lr}
    9fda:	b082      	sub	sp, #8
    9fdc:	af00      	add	r7, sp, #0
    9fde:	6078      	str	r0, [r7, #4]
    9fe0:	6039      	str	r1, [r7, #0]
    9fe2:	6839      	ldr	r1, [r7, #0]
    9fe4:	687b      	ldr	r3, [r7, #4]
    9fe6:	2200      	movs	r2, #0
    9fe8:	0018      	movs	r0, r3
    9fea:	4b03      	ldr	r3, [pc, #12]	; (9ff8 <xQueueGiveFromISR+0x20>)
    9fec:	4798      	blx	r3
    9fee:	0003      	movs	r3, r0
    9ff0:	0018      	movs	r0, r3
    9ff2:	46bd      	mov	sp, r7
    9ff4:	b002      	add	sp, #8
    9ff6:	bd80      	pop	{r7, pc}
    9ff8:	00009ffd 	.word	0x00009ffd

00009ffc <MyWrapper>:
{
    9ffc:	b5b0      	push	{r4, r5, r7, lr}
    9ffe:	b08a      	sub	sp, #40	; 0x28
    a000:	af00      	add	r7, sp, #0
    a002:	60f8      	str	r0, [r7, #12]
    a004:	60b9      	str	r1, [r7, #8]
    a006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    a008:	68fb      	ldr	r3, [r7, #12]
    a00a:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    a00c:	6a3b      	ldr	r3, [r7, #32]
    a00e:	2b00      	cmp	r3, #0
    a010:	d101      	bne.n	a016 <MyWrapper+0x1a>
    a012:	b672      	cpsid	i
    a014:	e7fe      	b.n	a014 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    a016:	6a3b      	ldr	r3, [r7, #32]
    a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a01a:	2b00      	cmp	r3, #0
    a01c:	d001      	beq.n	a022 <MyWrapper+0x26>
    a01e:	b672      	cpsid	i
    a020:	e7fe      	b.n	a020 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    a022:	6a3b      	ldr	r3, [r7, #32]
    a024:	681b      	ldr	r3, [r3, #0]
    a026:	2b00      	cmp	r3, #0
    a028:	d103      	bne.n	a032 <MyWrapper+0x36>
    a02a:	6a3b      	ldr	r3, [r7, #32]
    a02c:	685b      	ldr	r3, [r3, #4]
    a02e:	2b00      	cmp	r3, #0
    a030:	d101      	bne.n	a036 <MyWrapper+0x3a>
    a032:	2301      	movs	r3, #1
    a034:	e000      	b.n	a038 <MyWrapper+0x3c>
    a036:	2300      	movs	r3, #0
    a038:	2b00      	cmp	r3, #0
    a03a:	d101      	bne.n	a040 <MyWrapper+0x44>
    a03c:	b672      	cpsid	i
    a03e:	e7fe      	b.n	a03e <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    a040:	4b66      	ldr	r3, [pc, #408]	; (a1dc <MyWrapper+0x1e0>)
    a042:	4798      	blx	r3
    a044:	0003      	movs	r3, r0
    a046:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    a048:	6a3b      	ldr	r3, [r7, #32]
    a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a04c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    a04e:	6a3b      	ldr	r3, [r7, #32]
    a050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    a052:	69bb      	ldr	r3, [r7, #24]
    a054:	429a      	cmp	r2, r3
    a056:	d800      	bhi.n	a05a <MyWrapper+0x5e>
    a058:	e085      	b.n	a166 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    a05a:	2317      	movs	r3, #23
    a05c:	18fb      	adds	r3, r7, r3
    a05e:	6a3a      	ldr	r2, [r7, #32]
    a060:	2145      	movs	r1, #69	; 0x45
    a062:	5c52      	ldrb	r2, [r2, r1]
    a064:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    a066:	6a3b      	ldr	r3, [r7, #32]
    a068:	0018      	movs	r0, r3
    a06a:	4b5d      	ldr	r3, [pc, #372]	; (a1e0 <MyWrapper+0x1e4>)
    a06c:	4798      	blx	r3
    a06e:	0003      	movs	r3, r0
    a070:	001a      	movs	r2, r3
    a072:	4b5c      	ldr	r3, [pc, #368]	; (a1e4 <MyWrapper+0x1e8>)
    a074:	881b      	ldrh	r3, [r3, #0]
    a076:	4013      	ands	r3, r2
    a078:	b29b      	uxth	r3, r3
    a07a:	2b00      	cmp	r3, #0
    a07c:	d022      	beq.n	a0c4 <MyWrapper+0xc8>
    a07e:	687b      	ldr	r3, [r7, #4]
    a080:	2b00      	cmp	r3, #0
    a082:	d10b      	bne.n	a09c <MyWrapper+0xa0>
    a084:	6a3b      	ldr	r3, [r7, #32]
    a086:	0018      	movs	r0, r3
    a088:	4b57      	ldr	r3, [pc, #348]	; (a1e8 <MyWrapper+0x1ec>)
    a08a:	4798      	blx	r3
    a08c:	0003      	movs	r3, r0
    a08e:	001a      	movs	r2, r3
    a090:	4b56      	ldr	r3, [pc, #344]	; (a1ec <MyWrapper+0x1f0>)
    a092:	5c9b      	ldrb	r3, [r3, r2]
    a094:	3330      	adds	r3, #48	; 0x30
    a096:	b2db      	uxtb	r3, r3
    a098:	001d      	movs	r5, r3
    a09a:	e000      	b.n	a09e <MyWrapper+0xa2>
    a09c:	2535      	movs	r5, #53	; 0x35
    a09e:	6a3b      	ldr	r3, [r7, #32]
    a0a0:	0018      	movs	r0, r3
    a0a2:	4b51      	ldr	r3, [pc, #324]	; (a1e8 <MyWrapper+0x1ec>)
    a0a4:	4798      	blx	r3
    a0a6:	0003      	movs	r3, r0
    a0a8:	001a      	movs	r2, r3
    a0aa:	4b50      	ldr	r3, [pc, #320]	; (a1ec <MyWrapper+0x1f0>)
    a0ac:	5c9c      	ldrb	r4, [r3, r2]
    a0ae:	6a3b      	ldr	r3, [r7, #32]
    a0b0:	0018      	movs	r0, r3
    a0b2:	4b4f      	ldr	r3, [pc, #316]	; (a1f0 <MyWrapper+0x1f4>)
    a0b4:	4798      	blx	r3
    a0b6:	0003      	movs	r3, r0
    a0b8:	b2db      	uxtb	r3, r3
    a0ba:	001a      	movs	r2, r3
    a0bc:	0021      	movs	r1, r4
    a0be:	0028      	movs	r0, r5
    a0c0:	4b4c      	ldr	r3, [pc, #304]	; (a1f4 <MyWrapper+0x1f8>)
    a0c2:	4798      	blx	r3
    a0c4:	6a3b      	ldr	r3, [r7, #32]
    a0c6:	0018      	movs	r0, r3
    a0c8:	4b47      	ldr	r3, [pc, #284]	; (a1e8 <MyWrapper+0x1ec>)
    a0ca:	4798      	blx	r3
    a0cc:	0003      	movs	r3, r0
    a0ce:	001a      	movs	r2, r3
    a0d0:	4b46      	ldr	r3, [pc, #280]	; (a1ec <MyWrapper+0x1f0>)
    a0d2:	5c9c      	ldrb	r4, [r3, r2]
    a0d4:	6a3b      	ldr	r3, [r7, #32]
    a0d6:	0018      	movs	r0, r3
    a0d8:	4b45      	ldr	r3, [pc, #276]	; (a1f0 <MyWrapper+0x1f4>)
    a0da:	4798      	blx	r3
    a0dc:	0003      	movs	r3, r0
    a0de:	b2d9      	uxtb	r1, r3
    a0e0:	6a3b      	ldr	r3, [r7, #32]
    a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a0e4:	b2db      	uxtb	r3, r3
    a0e6:	3301      	adds	r3, #1
    a0e8:	b2db      	uxtb	r3, r3
    a0ea:	001a      	movs	r2, r3
    a0ec:	0020      	movs	r0, r4
    a0ee:	4b42      	ldr	r3, [pc, #264]	; (a1f8 <MyWrapper+0x1fc>)
    a0f0:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    a0f2:	69bb      	ldr	r3, [r7, #24]
    a0f4:	1c5a      	adds	r2, r3, #1
    a0f6:	6a3b      	ldr	r3, [r7, #32]
    a0f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    a0fa:	2317      	movs	r3, #23
    a0fc:	18fb      	adds	r3, r7, r3
    a0fe:	781b      	ldrb	r3, [r3, #0]
    a100:	b25b      	sxtb	r3, r3
    a102:	3301      	adds	r3, #1
    a104:	d123      	bne.n	a14e <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    a106:	6a3b      	ldr	r3, [r7, #32]
    a108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    a10a:	2b00      	cmp	r3, #0
    a10c:	d00d      	beq.n	a12a <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    a10e:	6a3b      	ldr	r3, [r7, #32]
    a110:	2100      	movs	r1, #0
    a112:	0018      	movs	r0, r3
    a114:	4b39      	ldr	r3, [pc, #228]	; (a1fc <MyWrapper+0x200>)
    a116:	4798      	blx	r3
    a118:	1e03      	subs	r3, r0, #0
    a11a:	d021      	beq.n	a160 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    a11c:	68bb      	ldr	r3, [r7, #8]
    a11e:	2b00      	cmp	r3, #0
    a120:	d01e      	beq.n	a160 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    a122:	68bb      	ldr	r3, [r7, #8]
    a124:	2201      	movs	r2, #1
    a126:	601a      	str	r2, [r3, #0]
    a128:	e01a      	b.n	a160 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    a12a:	6a3b      	ldr	r3, [r7, #32]
    a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a12e:	2b00      	cmp	r3, #0
    a130:	d016      	beq.n	a160 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    a132:	6a3b      	ldr	r3, [r7, #32]
    a134:	3324      	adds	r3, #36	; 0x24
    a136:	0018      	movs	r0, r3
    a138:	4b31      	ldr	r3, [pc, #196]	; (a200 <MyWrapper+0x204>)
    a13a:	4798      	blx	r3
    a13c:	1e03      	subs	r3, r0, #0
    a13e:	d00f      	beq.n	a160 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    a140:	68bb      	ldr	r3, [r7, #8]
    a142:	2b00      	cmp	r3, #0
    a144:	d00c      	beq.n	a160 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    a146:	68bb      	ldr	r3, [r7, #8]
    a148:	2201      	movs	r2, #1
    a14a:	601a      	str	r2, [r3, #0]
    a14c:	e008      	b.n	a160 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    a14e:	2317      	movs	r3, #23
    a150:	18fb      	adds	r3, r7, r3
    a152:	781b      	ldrb	r3, [r3, #0]
    a154:	3301      	adds	r3, #1
    a156:	b2db      	uxtb	r3, r3
    a158:	b259      	sxtb	r1, r3
    a15a:	6a3b      	ldr	r3, [r7, #32]
    a15c:	2245      	movs	r2, #69	; 0x45
    a15e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    a160:	2301      	movs	r3, #1
    a162:	627b      	str	r3, [r7, #36]	; 0x24
    a164:	e030      	b.n	a1c8 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    a166:	6a3b      	ldr	r3, [r7, #32]
    a168:	0018      	movs	r0, r3
    a16a:	4b1d      	ldr	r3, [pc, #116]	; (a1e0 <MyWrapper+0x1e4>)
    a16c:	4798      	blx	r3
    a16e:	0003      	movs	r3, r0
    a170:	001a      	movs	r2, r3
    a172:	4b1c      	ldr	r3, [pc, #112]	; (a1e4 <MyWrapper+0x1e8>)
    a174:	881b      	ldrh	r3, [r3, #0]
    a176:	4013      	ands	r3, r2
    a178:	b29b      	uxth	r3, r3
    a17a:	2b00      	cmp	r3, #0
    a17c:	d022      	beq.n	a1c4 <MyWrapper+0x1c8>
    a17e:	687b      	ldr	r3, [r7, #4]
    a180:	2b00      	cmp	r3, #0
    a182:	d10b      	bne.n	a19c <MyWrapper+0x1a0>
    a184:	6a3b      	ldr	r3, [r7, #32]
    a186:	0018      	movs	r0, r3
    a188:	4b17      	ldr	r3, [pc, #92]	; (a1e8 <MyWrapper+0x1ec>)
    a18a:	4798      	blx	r3
    a18c:	0003      	movs	r3, r0
    a18e:	001a      	movs	r2, r3
    a190:	4b16      	ldr	r3, [pc, #88]	; (a1ec <MyWrapper+0x1f0>)
    a192:	5c9b      	ldrb	r3, [r3, r2]
    a194:	3358      	adds	r3, #88	; 0x58
    a196:	b2db      	uxtb	r3, r3
    a198:	001d      	movs	r5, r3
    a19a:	e000      	b.n	a19e <MyWrapper+0x1a2>
    a19c:	255d      	movs	r5, #93	; 0x5d
    a19e:	6a3b      	ldr	r3, [r7, #32]
    a1a0:	0018      	movs	r0, r3
    a1a2:	4b11      	ldr	r3, [pc, #68]	; (a1e8 <MyWrapper+0x1ec>)
    a1a4:	4798      	blx	r3
    a1a6:	0003      	movs	r3, r0
    a1a8:	001a      	movs	r2, r3
    a1aa:	4b10      	ldr	r3, [pc, #64]	; (a1ec <MyWrapper+0x1f0>)
    a1ac:	5c9c      	ldrb	r4, [r3, r2]
    a1ae:	6a3b      	ldr	r3, [r7, #32]
    a1b0:	0018      	movs	r0, r3
    a1b2:	4b0f      	ldr	r3, [pc, #60]	; (a1f0 <MyWrapper+0x1f4>)
    a1b4:	4798      	blx	r3
    a1b6:	0003      	movs	r3, r0
    a1b8:	b2db      	uxtb	r3, r3
    a1ba:	001a      	movs	r2, r3
    a1bc:	0021      	movs	r1, r4
    a1be:	0028      	movs	r0, r5
    a1c0:	4b0c      	ldr	r3, [pc, #48]	; (a1f4 <MyWrapper+0x1f8>)
    a1c2:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    a1c4:	2300      	movs	r3, #0
    a1c6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    a1c8:	69fb      	ldr	r3, [r7, #28]
    a1ca:	0018      	movs	r0, r3
    a1cc:	4b0d      	ldr	r3, [pc, #52]	; (a204 <MyWrapper+0x208>)
    a1ce:	4798      	blx	r3

	return xReturn;
    a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a1d2:	0018      	movs	r0, r3
    a1d4:	46bd      	mov	sp, r7
    a1d6:	b00a      	add	sp, #40	; 0x28
    a1d8:	bdb0      	pop	{r4, r5, r7, pc}
    a1da:	46c0      	nop			; (mov r8, r8)
    a1dc:	0000940d 	.word	0x0000940d
    a1e0:	00007471 	.word	0x00007471
    a1e4:	20000104 	.word	0x20000104
    a1e8:	00007371 	.word	0x00007371
    a1ec:	200000f8 	.word	0x200000f8
    a1f0:	00007451 	.word	0x00007451
    a1f4:	00007da9 	.word	0x00007da9
    a1f8:	00008405 	.word	0x00008405
    a1fc:	0000ae8d 	.word	0x0000ae8d
    a200:	0000bc4d 	.word	0x0000bc4d
    a204:	00009419 	.word	0x00009419

0000a208 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    a208:	b5b0      	push	{r4, r5, r7, lr}
    a20a:	b08a      	sub	sp, #40	; 0x28
    a20c:	af00      	add	r7, sp, #0
    a20e:	60f8      	str	r0, [r7, #12]
    a210:	60b9      	str	r1, [r7, #8]
    a212:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    a214:	2300      	movs	r3, #0
    a216:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    a218:	68fb      	ldr	r3, [r7, #12]
    a21a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    a21c:	6a3b      	ldr	r3, [r7, #32]
    a21e:	2b00      	cmp	r3, #0
    a220:	d101      	bne.n	a226 <xQueueReceive+0x1e>
    a222:	b672      	cpsid	i
    a224:	e7fe      	b.n	a224 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    a226:	68bb      	ldr	r3, [r7, #8]
    a228:	2b00      	cmp	r3, #0
    a22a:	d103      	bne.n	a234 <xQueueReceive+0x2c>
    a22c:	6a3b      	ldr	r3, [r7, #32]
    a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a230:	2b00      	cmp	r3, #0
    a232:	d101      	bne.n	a238 <xQueueReceive+0x30>
    a234:	2301      	movs	r3, #1
    a236:	e000      	b.n	a23a <xQueueReceive+0x32>
    a238:	2300      	movs	r3, #0
    a23a:	2b00      	cmp	r3, #0
    a23c:	d101      	bne.n	a242 <xQueueReceive+0x3a>
    a23e:	b672      	cpsid	i
    a240:	e7fe      	b.n	a240 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    a242:	4bbf      	ldr	r3, [pc, #764]	; (a540 <xQueueReceive+0x338>)
    a244:	4798      	blx	r3
    a246:	1e03      	subs	r3, r0, #0
    a248:	d102      	bne.n	a250 <xQueueReceive+0x48>
    a24a:	687b      	ldr	r3, [r7, #4]
    a24c:	2b00      	cmp	r3, #0
    a24e:	d101      	bne.n	a254 <xQueueReceive+0x4c>
    a250:	2301      	movs	r3, #1
    a252:	e000      	b.n	a256 <xQueueReceive+0x4e>
    a254:	2300      	movs	r3, #0
    a256:	2b00      	cmp	r3, #0
    a258:	d101      	bne.n	a25e <xQueueReceive+0x56>
    a25a:	b672      	cpsid	i
    a25c:	e7fe      	b.n	a25c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    a25e:	4bb9      	ldr	r3, [pc, #740]	; (a544 <xQueueReceive+0x33c>)
    a260:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    a262:	6a3b      	ldr	r3, [r7, #32]
    a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a266:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    a268:	69fb      	ldr	r3, [r7, #28]
    a26a:	2b00      	cmp	r3, #0
    a26c:	d100      	bne.n	a270 <xQueueReceive+0x68>
    a26e:	e07d      	b.n	a36c <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    a270:	68ba      	ldr	r2, [r7, #8]
    a272:	6a3b      	ldr	r3, [r7, #32]
    a274:	0011      	movs	r1, r2
    a276:	0018      	movs	r0, r3
    a278:	4bb3      	ldr	r3, [pc, #716]	; (a548 <xQueueReceive+0x340>)
    a27a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    a27c:	4bb3      	ldr	r3, [pc, #716]	; (a54c <xQueueReceive+0x344>)
    a27e:	4798      	blx	r3
    a280:	0003      	movs	r3, r0
    a282:	0018      	movs	r0, r3
    a284:	4bb2      	ldr	r3, [pc, #712]	; (a550 <xQueueReceive+0x348>)
    a286:	4798      	blx	r3
    a288:	0003      	movs	r3, r0
    a28a:	001a      	movs	r2, r3
    a28c:	4bb1      	ldr	r3, [pc, #708]	; (a554 <xQueueReceive+0x34c>)
    a28e:	881b      	ldrh	r3, [r3, #0]
    a290:	4013      	ands	r3, r2
    a292:	b29b      	uxth	r3, r3
    a294:	2b00      	cmp	r3, #0
    a296:	d029      	beq.n	a2ec <xQueueReceive+0xe4>
    a298:	6a3b      	ldr	r3, [r7, #32]
    a29a:	0018      	movs	r0, r3
    a29c:	4bae      	ldr	r3, [pc, #696]	; (a558 <xQueueReceive+0x350>)
    a29e:	4798      	blx	r3
    a2a0:	0003      	movs	r3, r0
    a2a2:	001a      	movs	r2, r3
    a2a4:	4bab      	ldr	r3, [pc, #684]	; (a554 <xQueueReceive+0x34c>)
    a2a6:	881b      	ldrh	r3, [r3, #0]
    a2a8:	4013      	ands	r3, r2
    a2aa:	b29b      	uxth	r3, r3
    a2ac:	2b00      	cmp	r3, #0
    a2ae:	d01d      	beq.n	a2ec <xQueueReceive+0xe4>
    a2b0:	6a3b      	ldr	r3, [r7, #32]
    a2b2:	0018      	movs	r0, r3
    a2b4:	4ba9      	ldr	r3, [pc, #676]	; (a55c <xQueueReceive+0x354>)
    a2b6:	4798      	blx	r3
    a2b8:	0003      	movs	r3, r0
    a2ba:	001a      	movs	r2, r3
    a2bc:	4ba8      	ldr	r3, [pc, #672]	; (a560 <xQueueReceive+0x358>)
    a2be:	5c9b      	ldrb	r3, [r3, r2]
    a2c0:	3328      	adds	r3, #40	; 0x28
    a2c2:	b2db      	uxtb	r3, r3
    a2c4:	001d      	movs	r5, r3
    a2c6:	6a3b      	ldr	r3, [r7, #32]
    a2c8:	0018      	movs	r0, r3
    a2ca:	4ba4      	ldr	r3, [pc, #656]	; (a55c <xQueueReceive+0x354>)
    a2cc:	4798      	blx	r3
    a2ce:	0003      	movs	r3, r0
    a2d0:	001a      	movs	r2, r3
    a2d2:	4ba3      	ldr	r3, [pc, #652]	; (a560 <xQueueReceive+0x358>)
    a2d4:	5c9c      	ldrb	r4, [r3, r2]
    a2d6:	6a3b      	ldr	r3, [r7, #32]
    a2d8:	0018      	movs	r0, r3
    a2da:	4ba2      	ldr	r3, [pc, #648]	; (a564 <xQueueReceive+0x35c>)
    a2dc:	4798      	blx	r3
    a2de:	0003      	movs	r3, r0
    a2e0:	b2db      	uxtb	r3, r3
    a2e2:	001a      	movs	r2, r3
    a2e4:	0021      	movs	r1, r4
    a2e6:	0028      	movs	r0, r5
    a2e8:	4b9f      	ldr	r3, [pc, #636]	; (a568 <xQueueReceive+0x360>)
    a2ea:	4798      	blx	r3
    a2ec:	6a3b      	ldr	r3, [r7, #32]
    a2ee:	0018      	movs	r0, r3
    a2f0:	4b9a      	ldr	r3, [pc, #616]	; (a55c <xQueueReceive+0x354>)
    a2f2:	4798      	blx	r3
    a2f4:	0003      	movs	r3, r0
    a2f6:	001a      	movs	r2, r3
    a2f8:	4b99      	ldr	r3, [pc, #612]	; (a560 <xQueueReceive+0x358>)
    a2fa:	5c9c      	ldrb	r4, [r3, r2]
    a2fc:	6a3b      	ldr	r3, [r7, #32]
    a2fe:	0018      	movs	r0, r3
    a300:	4b98      	ldr	r3, [pc, #608]	; (a564 <xQueueReceive+0x35c>)
    a302:	4798      	blx	r3
    a304:	0003      	movs	r3, r0
    a306:	b2dd      	uxtb	r5, r3
    a308:	6a3b      	ldr	r3, [r7, #32]
    a30a:	0018      	movs	r0, r3
    a30c:	4b93      	ldr	r3, [pc, #588]	; (a55c <xQueueReceive+0x354>)
    a30e:	4798      	blx	r3
    a310:	0003      	movs	r3, r0
    a312:	001a      	movs	r2, r3
    a314:	4b92      	ldr	r3, [pc, #584]	; (a560 <xQueueReceive+0x358>)
    a316:	5c9b      	ldrb	r3, [r3, r2]
    a318:	2b02      	cmp	r3, #2
    a31a:	d108      	bne.n	a32e <xQueueReceive+0x126>
    a31c:	4b8b      	ldr	r3, [pc, #556]	; (a54c <xQueueReceive+0x344>)
    a31e:	4798      	blx	r3
    a320:	0003      	movs	r3, r0
    a322:	0018      	movs	r0, r3
    a324:	4b91      	ldr	r3, [pc, #580]	; (a56c <xQueueReceive+0x364>)
    a326:	4798      	blx	r3
    a328:	0003      	movs	r3, r0
    a32a:	b2db      	uxtb	r3, r3
    a32c:	e004      	b.n	a338 <xQueueReceive+0x130>
    a32e:	6a3b      	ldr	r3, [r7, #32]
    a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a332:	b2db      	uxtb	r3, r3
    a334:	3b01      	subs	r3, #1
    a336:	b2db      	uxtb	r3, r3
    a338:	001a      	movs	r2, r3
    a33a:	0029      	movs	r1, r5
    a33c:	0020      	movs	r0, r4
    a33e:	4b8c      	ldr	r3, [pc, #560]	; (a570 <xQueueReceive+0x368>)
    a340:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    a342:	69fb      	ldr	r3, [r7, #28]
    a344:	1e5a      	subs	r2, r3, #1
    a346:	6a3b      	ldr	r3, [r7, #32]
    a348:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    a34a:	6a3b      	ldr	r3, [r7, #32]
    a34c:	691b      	ldr	r3, [r3, #16]
    a34e:	2b00      	cmp	r3, #0
    a350:	d008      	beq.n	a364 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    a352:	6a3b      	ldr	r3, [r7, #32]
    a354:	3310      	adds	r3, #16
    a356:	0018      	movs	r0, r3
    a358:	4b86      	ldr	r3, [pc, #536]	; (a574 <xQueueReceive+0x36c>)
    a35a:	4798      	blx	r3
    a35c:	1e03      	subs	r3, r0, #0
    a35e:	d001      	beq.n	a364 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    a360:	4b85      	ldr	r3, [pc, #532]	; (a578 <xQueueReceive+0x370>)
    a362:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    a364:	4b85      	ldr	r3, [pc, #532]	; (a57c <xQueueReceive+0x374>)
    a366:	4798      	blx	r3
				return pdPASS;
    a368:	2301      	movs	r3, #1
    a36a:	e15f      	b.n	a62c <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    a36c:	687b      	ldr	r3, [r7, #4]
    a36e:	2b00      	cmp	r3, #0
    a370:	d13b      	bne.n	a3ea <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    a372:	4b82      	ldr	r3, [pc, #520]	; (a57c <xQueueReceive+0x374>)
    a374:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    a376:	4b75      	ldr	r3, [pc, #468]	; (a54c <xQueueReceive+0x344>)
    a378:	4798      	blx	r3
    a37a:	0003      	movs	r3, r0
    a37c:	0018      	movs	r0, r3
    a37e:	4b74      	ldr	r3, [pc, #464]	; (a550 <xQueueReceive+0x348>)
    a380:	4798      	blx	r3
    a382:	0003      	movs	r3, r0
    a384:	001a      	movs	r2, r3
    a386:	4b73      	ldr	r3, [pc, #460]	; (a554 <xQueueReceive+0x34c>)
    a388:	881b      	ldrh	r3, [r3, #0]
    a38a:	4013      	ands	r3, r2
    a38c:	b29b      	uxth	r3, r3
    a38e:	2b00      	cmp	r3, #0
    a390:	d029      	beq.n	a3e6 <xQueueReceive+0x1de>
    a392:	6a3b      	ldr	r3, [r7, #32]
    a394:	0018      	movs	r0, r3
    a396:	4b70      	ldr	r3, [pc, #448]	; (a558 <xQueueReceive+0x350>)
    a398:	4798      	blx	r3
    a39a:	0003      	movs	r3, r0
    a39c:	001a      	movs	r2, r3
    a39e:	4b6d      	ldr	r3, [pc, #436]	; (a554 <xQueueReceive+0x34c>)
    a3a0:	881b      	ldrh	r3, [r3, #0]
    a3a2:	4013      	ands	r3, r2
    a3a4:	b29b      	uxth	r3, r3
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d01d      	beq.n	a3e6 <xQueueReceive+0x1de>
    a3aa:	6a3b      	ldr	r3, [r7, #32]
    a3ac:	0018      	movs	r0, r3
    a3ae:	4b6b      	ldr	r3, [pc, #428]	; (a55c <xQueueReceive+0x354>)
    a3b0:	4798      	blx	r3
    a3b2:	0003      	movs	r3, r0
    a3b4:	001a      	movs	r2, r3
    a3b6:	4b6a      	ldr	r3, [pc, #424]	; (a560 <xQueueReceive+0x358>)
    a3b8:	5c9b      	ldrb	r3, [r3, r2]
    a3ba:	3350      	adds	r3, #80	; 0x50
    a3bc:	b2db      	uxtb	r3, r3
    a3be:	001d      	movs	r5, r3
    a3c0:	6a3b      	ldr	r3, [r7, #32]
    a3c2:	0018      	movs	r0, r3
    a3c4:	4b65      	ldr	r3, [pc, #404]	; (a55c <xQueueReceive+0x354>)
    a3c6:	4798      	blx	r3
    a3c8:	0003      	movs	r3, r0
    a3ca:	001a      	movs	r2, r3
    a3cc:	4b64      	ldr	r3, [pc, #400]	; (a560 <xQueueReceive+0x358>)
    a3ce:	5c9c      	ldrb	r4, [r3, r2]
    a3d0:	6a3b      	ldr	r3, [r7, #32]
    a3d2:	0018      	movs	r0, r3
    a3d4:	4b63      	ldr	r3, [pc, #396]	; (a564 <xQueueReceive+0x35c>)
    a3d6:	4798      	blx	r3
    a3d8:	0003      	movs	r3, r0
    a3da:	b2db      	uxtb	r3, r3
    a3dc:	001a      	movs	r2, r3
    a3de:	0021      	movs	r1, r4
    a3e0:	0028      	movs	r0, r5
    a3e2:	4b61      	ldr	r3, [pc, #388]	; (a568 <xQueueReceive+0x360>)
    a3e4:	4798      	blx	r3
					return errQUEUE_EMPTY;
    a3e6:	2300      	movs	r3, #0
    a3e8:	e120      	b.n	a62c <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
    a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	d106      	bne.n	a3fe <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    a3f0:	2314      	movs	r3, #20
    a3f2:	18fb      	adds	r3, r7, r3
    a3f4:	0018      	movs	r0, r3
    a3f6:	4b62      	ldr	r3, [pc, #392]	; (a580 <xQueueReceive+0x378>)
    a3f8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    a3fa:	2301      	movs	r3, #1
    a3fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    a3fe:	4b5f      	ldr	r3, [pc, #380]	; (a57c <xQueueReceive+0x374>)
    a400:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    a402:	4b60      	ldr	r3, [pc, #384]	; (a584 <xQueueReceive+0x37c>)
    a404:	4798      	blx	r3
		prvLockQueue( pxQueue );
    a406:	4b4f      	ldr	r3, [pc, #316]	; (a544 <xQueueReceive+0x33c>)
    a408:	4798      	blx	r3
    a40a:	6a3b      	ldr	r3, [r7, #32]
    a40c:	2244      	movs	r2, #68	; 0x44
    a40e:	5c9b      	ldrb	r3, [r3, r2]
    a410:	b25b      	sxtb	r3, r3
    a412:	3301      	adds	r3, #1
    a414:	d103      	bne.n	a41e <xQueueReceive+0x216>
    a416:	6a3b      	ldr	r3, [r7, #32]
    a418:	2244      	movs	r2, #68	; 0x44
    a41a:	2100      	movs	r1, #0
    a41c:	5499      	strb	r1, [r3, r2]
    a41e:	6a3b      	ldr	r3, [r7, #32]
    a420:	2245      	movs	r2, #69	; 0x45
    a422:	5c9b      	ldrb	r3, [r3, r2]
    a424:	b25b      	sxtb	r3, r3
    a426:	3301      	adds	r3, #1
    a428:	d103      	bne.n	a432 <xQueueReceive+0x22a>
    a42a:	6a3b      	ldr	r3, [r7, #32]
    a42c:	2245      	movs	r2, #69	; 0x45
    a42e:	2100      	movs	r1, #0
    a430:	5499      	strb	r1, [r3, r2]
    a432:	4b52      	ldr	r3, [pc, #328]	; (a57c <xQueueReceive+0x374>)
    a434:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    a436:	1d3a      	adds	r2, r7, #4
    a438:	2314      	movs	r3, #20
    a43a:	18fb      	adds	r3, r7, r3
    a43c:	0011      	movs	r1, r2
    a43e:	0018      	movs	r0, r3
    a440:	4b51      	ldr	r3, [pc, #324]	; (a588 <xQueueReceive+0x380>)
    a442:	4798      	blx	r3
    a444:	1e03      	subs	r3, r0, #0
    a446:	d000      	beq.n	a44a <xQueueReceive+0x242>
    a448:	e0aa      	b.n	a5a0 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    a44a:	6a3b      	ldr	r3, [r7, #32]
    a44c:	0018      	movs	r0, r3
    a44e:	4b4f      	ldr	r3, [pc, #316]	; (a58c <xQueueReceive+0x384>)
    a450:	4798      	blx	r3
    a452:	1e03      	subs	r3, r0, #0
    a454:	d06d      	beq.n	a532 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    a456:	4b3d      	ldr	r3, [pc, #244]	; (a54c <xQueueReceive+0x344>)
    a458:	4798      	blx	r3
    a45a:	0003      	movs	r3, r0
    a45c:	0018      	movs	r0, r3
    a45e:	4b3c      	ldr	r3, [pc, #240]	; (a550 <xQueueReceive+0x348>)
    a460:	4798      	blx	r3
    a462:	0003      	movs	r3, r0
    a464:	001a      	movs	r2, r3
    a466:	4b3b      	ldr	r3, [pc, #236]	; (a554 <xQueueReceive+0x34c>)
    a468:	881b      	ldrh	r3, [r3, #0]
    a46a:	4013      	ands	r3, r2
    a46c:	b29b      	uxth	r3, r3
    a46e:	2b00      	cmp	r3, #0
    a470:	d029      	beq.n	a4c6 <xQueueReceive+0x2be>
    a472:	6a3b      	ldr	r3, [r7, #32]
    a474:	0018      	movs	r0, r3
    a476:	4b38      	ldr	r3, [pc, #224]	; (a558 <xQueueReceive+0x350>)
    a478:	4798      	blx	r3
    a47a:	0003      	movs	r3, r0
    a47c:	001a      	movs	r2, r3
    a47e:	4b35      	ldr	r3, [pc, #212]	; (a554 <xQueueReceive+0x34c>)
    a480:	881b      	ldrh	r3, [r3, #0]
    a482:	4013      	ands	r3, r2
    a484:	b29b      	uxth	r3, r3
    a486:	2b00      	cmp	r3, #0
    a488:	d01d      	beq.n	a4c6 <xQueueReceive+0x2be>
    a48a:	6a3b      	ldr	r3, [r7, #32]
    a48c:	0018      	movs	r0, r3
    a48e:	4b33      	ldr	r3, [pc, #204]	; (a55c <xQueueReceive+0x354>)
    a490:	4798      	blx	r3
    a492:	0003      	movs	r3, r0
    a494:	001a      	movs	r2, r3
    a496:	4b32      	ldr	r3, [pc, #200]	; (a560 <xQueueReceive+0x358>)
    a498:	5c9b      	ldrb	r3, [r3, r2]
    a49a:	3368      	adds	r3, #104	; 0x68
    a49c:	b2db      	uxtb	r3, r3
    a49e:	001d      	movs	r5, r3
    a4a0:	6a3b      	ldr	r3, [r7, #32]
    a4a2:	0018      	movs	r0, r3
    a4a4:	4b2d      	ldr	r3, [pc, #180]	; (a55c <xQueueReceive+0x354>)
    a4a6:	4798      	blx	r3
    a4a8:	0003      	movs	r3, r0
    a4aa:	001a      	movs	r2, r3
    a4ac:	4b2c      	ldr	r3, [pc, #176]	; (a560 <xQueueReceive+0x358>)
    a4ae:	5c9c      	ldrb	r4, [r3, r2]
    a4b0:	6a3b      	ldr	r3, [r7, #32]
    a4b2:	0018      	movs	r0, r3
    a4b4:	4b2b      	ldr	r3, [pc, #172]	; (a564 <xQueueReceive+0x35c>)
    a4b6:	4798      	blx	r3
    a4b8:	0003      	movs	r3, r0
    a4ba:	b2db      	uxtb	r3, r3
    a4bc:	001a      	movs	r2, r3
    a4be:	0021      	movs	r1, r4
    a4c0:	0028      	movs	r0, r5
    a4c2:	4b29      	ldr	r3, [pc, #164]	; (a568 <xQueueReceive+0x360>)
    a4c4:	4798      	blx	r3
    a4c6:	6a3b      	ldr	r3, [r7, #32]
    a4c8:	0018      	movs	r0, r3
    a4ca:	4b24      	ldr	r3, [pc, #144]	; (a55c <xQueueReceive+0x354>)
    a4cc:	4798      	blx	r3
    a4ce:	0003      	movs	r3, r0
    a4d0:	001a      	movs	r2, r3
    a4d2:	4b23      	ldr	r3, [pc, #140]	; (a560 <xQueueReceive+0x358>)
    a4d4:	5c9b      	ldrb	r3, [r3, r2]
    a4d6:	2b02      	cmp	r3, #2
    a4d8:	d018      	beq.n	a50c <xQueueReceive+0x304>
    a4da:	4b1c      	ldr	r3, [pc, #112]	; (a54c <xQueueReceive+0x344>)
    a4dc:	4798      	blx	r3
    a4de:	0003      	movs	r3, r0
    a4e0:	0018      	movs	r0, r3
    a4e2:	4b1b      	ldr	r3, [pc, #108]	; (a550 <xQueueReceive+0x348>)
    a4e4:	4798      	blx	r3
    a4e6:	0003      	movs	r3, r0
    a4e8:	001a      	movs	r2, r3
    a4ea:	4b1a      	ldr	r3, [pc, #104]	; (a554 <xQueueReceive+0x34c>)
    a4ec:	881b      	ldrh	r3, [r3, #0]
    a4ee:	4013      	ands	r3, r2
    a4f0:	b29b      	uxth	r3, r3
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	d00a      	beq.n	a50c <xQueueReceive+0x304>
    a4f6:	4b15      	ldr	r3, [pc, #84]	; (a54c <xQueueReceive+0x344>)
    a4f8:	4798      	blx	r3
    a4fa:	0003      	movs	r3, r0
    a4fc:	0018      	movs	r0, r3
    a4fe:	4b1b      	ldr	r3, [pc, #108]	; (a56c <xQueueReceive+0x364>)
    a500:	4798      	blx	r3
    a502:	0003      	movs	r3, r0
    a504:	b2db      	uxtb	r3, r3
    a506:	0018      	movs	r0, r3
    a508:	4b21      	ldr	r3, [pc, #132]	; (a590 <xQueueReceive+0x388>)
    a50a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    a50c:	6a3b      	ldr	r3, [r7, #32]
    a50e:	3324      	adds	r3, #36	; 0x24
    a510:	687a      	ldr	r2, [r7, #4]
    a512:	0011      	movs	r1, r2
    a514:	0018      	movs	r0, r3
    a516:	4b1f      	ldr	r3, [pc, #124]	; (a594 <xQueueReceive+0x38c>)
    a518:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    a51a:	6a3b      	ldr	r3, [r7, #32]
    a51c:	0018      	movs	r0, r3
    a51e:	4b1e      	ldr	r3, [pc, #120]	; (a598 <xQueueReceive+0x390>)
    a520:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    a522:	4b1e      	ldr	r3, [pc, #120]	; (a59c <xQueueReceive+0x394>)
    a524:	4798      	blx	r3
    a526:	1e03      	subs	r3, r0, #0
    a528:	d000      	beq.n	a52c <xQueueReceive+0x324>
    a52a:	e698      	b.n	a25e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    a52c:	4b12      	ldr	r3, [pc, #72]	; (a578 <xQueueReceive+0x370>)
    a52e:	4798      	blx	r3
    a530:	e695      	b.n	a25e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    a532:	6a3b      	ldr	r3, [r7, #32]
    a534:	0018      	movs	r0, r3
    a536:	4b18      	ldr	r3, [pc, #96]	; (a598 <xQueueReceive+0x390>)
    a538:	4798      	blx	r3
				( void ) xTaskResumeAll();
    a53a:	4b18      	ldr	r3, [pc, #96]	; (a59c <xQueueReceive+0x394>)
    a53c:	4798      	blx	r3
    a53e:	e68e      	b.n	a25e <xQueueReceive+0x56>
    a540:	0000c0dd 	.word	0x0000c0dd
    a544:	000093b9 	.word	0x000093b9
    a548:	0000ac69 	.word	0x0000ac69
    a54c:	0000764d 	.word	0x0000764d
    a550:	000073b1 	.word	0x000073b1
    a554:	20000104 	.word	0x20000104
    a558:	00007471 	.word	0x00007471
    a55c:	00007371 	.word	0x00007371
    a560:	200000f8 	.word	0x200000f8
    a564:	00007451 	.word	0x00007451
    a568:	00007da9 	.word	0x00007da9
    a56c:	00007391 	.word	0x00007391
    a570:	00008405 	.word	0x00008405
    a574:	0000bc4d 	.word	0x0000bc4d
    a578:	000093a1 	.word	0x000093a1
    a57c:	000093dd 	.word	0x000093dd
    a580:	0000bd8d 	.word	0x0000bd8d
    a584:	0000b675 	.word	0x0000b675
    a588:	0000bdb5 	.word	0x0000bdb5
    a58c:	0000ada9 	.word	0x0000ada9
    a590:	00008541 	.word	0x00008541
    a594:	0000bb29 	.word	0x0000bb29
    a598:	0000acb9 	.word	0x0000acb9
    a59c:	0000b68d 	.word	0x0000b68d
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    a5a0:	6a3b      	ldr	r3, [r7, #32]
    a5a2:	0018      	movs	r0, r3
    a5a4:	4b23      	ldr	r3, [pc, #140]	; (a634 <xQueueReceive+0x42c>)
    a5a6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    a5a8:	4b23      	ldr	r3, [pc, #140]	; (a638 <xQueueReceive+0x430>)
    a5aa:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    a5ac:	6a3b      	ldr	r3, [r7, #32]
    a5ae:	0018      	movs	r0, r3
    a5b0:	4b22      	ldr	r3, [pc, #136]	; (a63c <xQueueReceive+0x434>)
    a5b2:	4798      	blx	r3
    a5b4:	1e03      	subs	r3, r0, #0
    a5b6:	d100      	bne.n	a5ba <xQueueReceive+0x3b2>
    a5b8:	e651      	b.n	a25e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    a5ba:	4b21      	ldr	r3, [pc, #132]	; (a640 <xQueueReceive+0x438>)
    a5bc:	4798      	blx	r3
    a5be:	0003      	movs	r3, r0
    a5c0:	0018      	movs	r0, r3
    a5c2:	4b20      	ldr	r3, [pc, #128]	; (a644 <xQueueReceive+0x43c>)
    a5c4:	4798      	blx	r3
    a5c6:	0003      	movs	r3, r0
    a5c8:	001a      	movs	r2, r3
    a5ca:	4b1f      	ldr	r3, [pc, #124]	; (a648 <xQueueReceive+0x440>)
    a5cc:	881b      	ldrh	r3, [r3, #0]
    a5ce:	4013      	ands	r3, r2
    a5d0:	b29b      	uxth	r3, r3
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d029      	beq.n	a62a <xQueueReceive+0x422>
    a5d6:	6a3b      	ldr	r3, [r7, #32]
    a5d8:	0018      	movs	r0, r3
    a5da:	4b1c      	ldr	r3, [pc, #112]	; (a64c <xQueueReceive+0x444>)
    a5dc:	4798      	blx	r3
    a5de:	0003      	movs	r3, r0
    a5e0:	001a      	movs	r2, r3
    a5e2:	4b19      	ldr	r3, [pc, #100]	; (a648 <xQueueReceive+0x440>)
    a5e4:	881b      	ldrh	r3, [r3, #0]
    a5e6:	4013      	ands	r3, r2
    a5e8:	b29b      	uxth	r3, r3
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	d01d      	beq.n	a62a <xQueueReceive+0x422>
    a5ee:	6a3b      	ldr	r3, [r7, #32]
    a5f0:	0018      	movs	r0, r3
    a5f2:	4b17      	ldr	r3, [pc, #92]	; (a650 <xQueueReceive+0x448>)
    a5f4:	4798      	blx	r3
    a5f6:	0003      	movs	r3, r0
    a5f8:	001a      	movs	r2, r3
    a5fa:	4b16      	ldr	r3, [pc, #88]	; (a654 <xQueueReceive+0x44c>)
    a5fc:	5c9b      	ldrb	r3, [r3, r2]
    a5fe:	3350      	adds	r3, #80	; 0x50
    a600:	b2db      	uxtb	r3, r3
    a602:	001d      	movs	r5, r3
    a604:	6a3b      	ldr	r3, [r7, #32]
    a606:	0018      	movs	r0, r3
    a608:	4b11      	ldr	r3, [pc, #68]	; (a650 <xQueueReceive+0x448>)
    a60a:	4798      	blx	r3
    a60c:	0003      	movs	r3, r0
    a60e:	001a      	movs	r2, r3
    a610:	4b10      	ldr	r3, [pc, #64]	; (a654 <xQueueReceive+0x44c>)
    a612:	5c9c      	ldrb	r4, [r3, r2]
    a614:	6a3b      	ldr	r3, [r7, #32]
    a616:	0018      	movs	r0, r3
    a618:	4b0f      	ldr	r3, [pc, #60]	; (a658 <xQueueReceive+0x450>)
    a61a:	4798      	blx	r3
    a61c:	0003      	movs	r3, r0
    a61e:	b2db      	uxtb	r3, r3
    a620:	001a      	movs	r2, r3
    a622:	0021      	movs	r1, r4
    a624:	0028      	movs	r0, r5
    a626:	4b0d      	ldr	r3, [pc, #52]	; (a65c <xQueueReceive+0x454>)
    a628:	4798      	blx	r3
				return errQUEUE_EMPTY;
    a62a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    a62c:	0018      	movs	r0, r3
    a62e:	46bd      	mov	sp, r7
    a630:	b00a      	add	sp, #40	; 0x28
    a632:	bdb0      	pop	{r4, r5, r7, pc}
    a634:	0000acb9 	.word	0x0000acb9
    a638:	0000b68d 	.word	0x0000b68d
    a63c:	0000ada9 	.word	0x0000ada9
    a640:	0000764d 	.word	0x0000764d
    a644:	000073b1 	.word	0x000073b1
    a648:	20000104 	.word	0x20000104
    a64c:	00007471 	.word	0x00007471
    a650:	00007371 	.word	0x00007371
    a654:	200000f8 	.word	0x200000f8
    a658:	00007451 	.word	0x00007451
    a65c:	00007da9 	.word	0x00007da9

0000a660 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    a660:	b5b0      	push	{r4, r5, r7, lr}
    a662:	b08a      	sub	sp, #40	; 0x28
    a664:	af00      	add	r7, sp, #0
    a666:	6078      	str	r0, [r7, #4]
    a668:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    a66a:	2300      	movs	r3, #0
    a66c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    a66e:	687b      	ldr	r3, [r7, #4]
    a670:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    a672:	2300      	movs	r3, #0
    a674:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    a676:	69fb      	ldr	r3, [r7, #28]
    a678:	2b00      	cmp	r3, #0
    a67a:	d101      	bne.n	a680 <xQueueSemaphoreTake+0x20>
    a67c:	b672      	cpsid	i
    a67e:	e7fe      	b.n	a67e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    a680:	69fb      	ldr	r3, [r7, #28]
    a682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a684:	2b00      	cmp	r3, #0
    a686:	d001      	beq.n	a68c <xQueueSemaphoreTake+0x2c>
    a688:	b672      	cpsid	i
    a68a:	e7fe      	b.n	a68a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    a68c:	4bcb      	ldr	r3, [pc, #812]	; (a9bc <xQueueSemaphoreTake+0x35c>)
    a68e:	4798      	blx	r3
    a690:	1e03      	subs	r3, r0, #0
    a692:	d102      	bne.n	a69a <xQueueSemaphoreTake+0x3a>
    a694:	683b      	ldr	r3, [r7, #0]
    a696:	2b00      	cmp	r3, #0
    a698:	d101      	bne.n	a69e <xQueueSemaphoreTake+0x3e>
    a69a:	2301      	movs	r3, #1
    a69c:	e000      	b.n	a6a0 <xQueueSemaphoreTake+0x40>
    a69e:	2300      	movs	r3, #0
    a6a0:	2b00      	cmp	r3, #0
    a6a2:	d101      	bne.n	a6a8 <xQueueSemaphoreTake+0x48>
    a6a4:	b672      	cpsid	i
    a6a6:	e7fe      	b.n	a6a6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    a6a8:	4bc5      	ldr	r3, [pc, #788]	; (a9c0 <xQueueSemaphoreTake+0x360>)
    a6aa:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    a6ac:	69fb      	ldr	r3, [r7, #28]
    a6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a6b0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    a6b2:	69bb      	ldr	r3, [r7, #24]
    a6b4:	2b00      	cmp	r3, #0
    a6b6:	d100      	bne.n	a6ba <xQueueSemaphoreTake+0x5a>
    a6b8:	e080      	b.n	a7bc <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
    a6ba:	4bc2      	ldr	r3, [pc, #776]	; (a9c4 <xQueueSemaphoreTake+0x364>)
    a6bc:	4798      	blx	r3
    a6be:	0003      	movs	r3, r0
    a6c0:	0018      	movs	r0, r3
    a6c2:	4bc1      	ldr	r3, [pc, #772]	; (a9c8 <xQueueSemaphoreTake+0x368>)
    a6c4:	4798      	blx	r3
    a6c6:	0003      	movs	r3, r0
    a6c8:	001a      	movs	r2, r3
    a6ca:	4bc0      	ldr	r3, [pc, #768]	; (a9cc <xQueueSemaphoreTake+0x36c>)
    a6cc:	881b      	ldrh	r3, [r3, #0]
    a6ce:	4013      	ands	r3, r2
    a6d0:	b29b      	uxth	r3, r3
    a6d2:	2b00      	cmp	r3, #0
    a6d4:	d029      	beq.n	a72a <xQueueSemaphoreTake+0xca>
    a6d6:	69fb      	ldr	r3, [r7, #28]
    a6d8:	0018      	movs	r0, r3
    a6da:	4bbd      	ldr	r3, [pc, #756]	; (a9d0 <xQueueSemaphoreTake+0x370>)
    a6dc:	4798      	blx	r3
    a6de:	0003      	movs	r3, r0
    a6e0:	001a      	movs	r2, r3
    a6e2:	4bba      	ldr	r3, [pc, #744]	; (a9cc <xQueueSemaphoreTake+0x36c>)
    a6e4:	881b      	ldrh	r3, [r3, #0]
    a6e6:	4013      	ands	r3, r2
    a6e8:	b29b      	uxth	r3, r3
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	d01d      	beq.n	a72a <xQueueSemaphoreTake+0xca>
    a6ee:	69fb      	ldr	r3, [r7, #28]
    a6f0:	0018      	movs	r0, r3
    a6f2:	4bb8      	ldr	r3, [pc, #736]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a6f4:	4798      	blx	r3
    a6f6:	0003      	movs	r3, r0
    a6f8:	001a      	movs	r2, r3
    a6fa:	4bb7      	ldr	r3, [pc, #732]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a6fc:	5c9b      	ldrb	r3, [r3, r2]
    a6fe:	3328      	adds	r3, #40	; 0x28
    a700:	b2db      	uxtb	r3, r3
    a702:	001d      	movs	r5, r3
    a704:	69fb      	ldr	r3, [r7, #28]
    a706:	0018      	movs	r0, r3
    a708:	4bb2      	ldr	r3, [pc, #712]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a70a:	4798      	blx	r3
    a70c:	0003      	movs	r3, r0
    a70e:	001a      	movs	r2, r3
    a710:	4bb1      	ldr	r3, [pc, #708]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a712:	5c9c      	ldrb	r4, [r3, r2]
    a714:	69fb      	ldr	r3, [r7, #28]
    a716:	0018      	movs	r0, r3
    a718:	4bb0      	ldr	r3, [pc, #704]	; (a9dc <xQueueSemaphoreTake+0x37c>)
    a71a:	4798      	blx	r3
    a71c:	0003      	movs	r3, r0
    a71e:	b2db      	uxtb	r3, r3
    a720:	001a      	movs	r2, r3
    a722:	0021      	movs	r1, r4
    a724:	0028      	movs	r0, r5
    a726:	4bae      	ldr	r3, [pc, #696]	; (a9e0 <xQueueSemaphoreTake+0x380>)
    a728:	4798      	blx	r3
    a72a:	69fb      	ldr	r3, [r7, #28]
    a72c:	0018      	movs	r0, r3
    a72e:	4ba9      	ldr	r3, [pc, #676]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a730:	4798      	blx	r3
    a732:	0003      	movs	r3, r0
    a734:	001a      	movs	r2, r3
    a736:	4ba8      	ldr	r3, [pc, #672]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a738:	5c9c      	ldrb	r4, [r3, r2]
    a73a:	69fb      	ldr	r3, [r7, #28]
    a73c:	0018      	movs	r0, r3
    a73e:	4ba7      	ldr	r3, [pc, #668]	; (a9dc <xQueueSemaphoreTake+0x37c>)
    a740:	4798      	blx	r3
    a742:	0003      	movs	r3, r0
    a744:	b2dd      	uxtb	r5, r3
    a746:	69fb      	ldr	r3, [r7, #28]
    a748:	0018      	movs	r0, r3
    a74a:	4ba2      	ldr	r3, [pc, #648]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a74c:	4798      	blx	r3
    a74e:	0003      	movs	r3, r0
    a750:	001a      	movs	r2, r3
    a752:	4ba1      	ldr	r3, [pc, #644]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a754:	5c9b      	ldrb	r3, [r3, r2]
    a756:	2b02      	cmp	r3, #2
    a758:	d108      	bne.n	a76c <xQueueSemaphoreTake+0x10c>
    a75a:	4b9a      	ldr	r3, [pc, #616]	; (a9c4 <xQueueSemaphoreTake+0x364>)
    a75c:	4798      	blx	r3
    a75e:	0003      	movs	r3, r0
    a760:	0018      	movs	r0, r3
    a762:	4ba0      	ldr	r3, [pc, #640]	; (a9e4 <xQueueSemaphoreTake+0x384>)
    a764:	4798      	blx	r3
    a766:	0003      	movs	r3, r0
    a768:	b2db      	uxtb	r3, r3
    a76a:	e004      	b.n	a776 <xQueueSemaphoreTake+0x116>
    a76c:	69fb      	ldr	r3, [r7, #28]
    a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a770:	b2db      	uxtb	r3, r3
    a772:	3b01      	subs	r3, #1
    a774:	b2db      	uxtb	r3, r3
    a776:	001a      	movs	r2, r3
    a778:	0029      	movs	r1, r5
    a77a:	0020      	movs	r0, r4
    a77c:	4b9a      	ldr	r3, [pc, #616]	; (a9e8 <xQueueSemaphoreTake+0x388>)
    a77e:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    a780:	69bb      	ldr	r3, [r7, #24]
    a782:	1e5a      	subs	r2, r3, #1
    a784:	69fb      	ldr	r3, [r7, #28]
    a786:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    a788:	69fb      	ldr	r3, [r7, #28]
    a78a:	681b      	ldr	r3, [r3, #0]
    a78c:	2b00      	cmp	r3, #0
    a78e:	d104      	bne.n	a79a <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    a790:	4b96      	ldr	r3, [pc, #600]	; (a9ec <xQueueSemaphoreTake+0x38c>)
    a792:	4798      	blx	r3
    a794:	0002      	movs	r2, r0
    a796:	69fb      	ldr	r3, [r7, #28]
    a798:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    a79a:	69fb      	ldr	r3, [r7, #28]
    a79c:	691b      	ldr	r3, [r3, #16]
    a79e:	2b00      	cmp	r3, #0
    a7a0:	d008      	beq.n	a7b4 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    a7a2:	69fb      	ldr	r3, [r7, #28]
    a7a4:	3310      	adds	r3, #16
    a7a6:	0018      	movs	r0, r3
    a7a8:	4b91      	ldr	r3, [pc, #580]	; (a9f0 <xQueueSemaphoreTake+0x390>)
    a7aa:	4798      	blx	r3
    a7ac:	1e03      	subs	r3, r0, #0
    a7ae:	d001      	beq.n	a7b4 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
    a7b0:	4b90      	ldr	r3, [pc, #576]	; (a9f4 <xQueueSemaphoreTake+0x394>)
    a7b2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    a7b4:	4b90      	ldr	r3, [pc, #576]	; (a9f8 <xQueueSemaphoreTake+0x398>)
    a7b6:	4798      	blx	r3
				return pdPASS;
    a7b8:	2301      	movs	r3, #1
    a7ba:	e18b      	b.n	aad4 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    a7bc:	683b      	ldr	r3, [r7, #0]
    a7be:	2b00      	cmp	r3, #0
    a7c0:	d140      	bne.n	a844 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    a7c2:	6a3b      	ldr	r3, [r7, #32]
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	d001      	beq.n	a7cc <xQueueSemaphoreTake+0x16c>
    a7c8:	b672      	cpsid	i
    a7ca:	e7fe      	b.n	a7ca <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    a7cc:	4b8a      	ldr	r3, [pc, #552]	; (a9f8 <xQueueSemaphoreTake+0x398>)
    a7ce:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    a7d0:	4b7c      	ldr	r3, [pc, #496]	; (a9c4 <xQueueSemaphoreTake+0x364>)
    a7d2:	4798      	blx	r3
    a7d4:	0003      	movs	r3, r0
    a7d6:	0018      	movs	r0, r3
    a7d8:	4b7b      	ldr	r3, [pc, #492]	; (a9c8 <xQueueSemaphoreTake+0x368>)
    a7da:	4798      	blx	r3
    a7dc:	0003      	movs	r3, r0
    a7de:	001a      	movs	r2, r3
    a7e0:	4b7a      	ldr	r3, [pc, #488]	; (a9cc <xQueueSemaphoreTake+0x36c>)
    a7e2:	881b      	ldrh	r3, [r3, #0]
    a7e4:	4013      	ands	r3, r2
    a7e6:	b29b      	uxth	r3, r3
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	d029      	beq.n	a840 <xQueueSemaphoreTake+0x1e0>
    a7ec:	69fb      	ldr	r3, [r7, #28]
    a7ee:	0018      	movs	r0, r3
    a7f0:	4b77      	ldr	r3, [pc, #476]	; (a9d0 <xQueueSemaphoreTake+0x370>)
    a7f2:	4798      	blx	r3
    a7f4:	0003      	movs	r3, r0
    a7f6:	001a      	movs	r2, r3
    a7f8:	4b74      	ldr	r3, [pc, #464]	; (a9cc <xQueueSemaphoreTake+0x36c>)
    a7fa:	881b      	ldrh	r3, [r3, #0]
    a7fc:	4013      	ands	r3, r2
    a7fe:	b29b      	uxth	r3, r3
    a800:	2b00      	cmp	r3, #0
    a802:	d01d      	beq.n	a840 <xQueueSemaphoreTake+0x1e0>
    a804:	69fb      	ldr	r3, [r7, #28]
    a806:	0018      	movs	r0, r3
    a808:	4b72      	ldr	r3, [pc, #456]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a80a:	4798      	blx	r3
    a80c:	0003      	movs	r3, r0
    a80e:	001a      	movs	r2, r3
    a810:	4b71      	ldr	r3, [pc, #452]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a812:	5c9b      	ldrb	r3, [r3, r2]
    a814:	3350      	adds	r3, #80	; 0x50
    a816:	b2db      	uxtb	r3, r3
    a818:	001d      	movs	r5, r3
    a81a:	69fb      	ldr	r3, [r7, #28]
    a81c:	0018      	movs	r0, r3
    a81e:	4b6d      	ldr	r3, [pc, #436]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a820:	4798      	blx	r3
    a822:	0003      	movs	r3, r0
    a824:	001a      	movs	r2, r3
    a826:	4b6c      	ldr	r3, [pc, #432]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a828:	5c9c      	ldrb	r4, [r3, r2]
    a82a:	69fb      	ldr	r3, [r7, #28]
    a82c:	0018      	movs	r0, r3
    a82e:	4b6b      	ldr	r3, [pc, #428]	; (a9dc <xQueueSemaphoreTake+0x37c>)
    a830:	4798      	blx	r3
    a832:	0003      	movs	r3, r0
    a834:	b2db      	uxtb	r3, r3
    a836:	001a      	movs	r2, r3
    a838:	0021      	movs	r1, r4
    a83a:	0028      	movs	r0, r5
    a83c:	4b68      	ldr	r3, [pc, #416]	; (a9e0 <xQueueSemaphoreTake+0x380>)
    a83e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    a840:	2300      	movs	r3, #0
    a842:	e147      	b.n	aad4 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
    a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a846:	2b00      	cmp	r3, #0
    a848:	d106      	bne.n	a858 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    a84a:	230c      	movs	r3, #12
    a84c:	18fb      	adds	r3, r7, r3
    a84e:	0018      	movs	r0, r3
    a850:	4b6a      	ldr	r3, [pc, #424]	; (a9fc <xQueueSemaphoreTake+0x39c>)
    a852:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    a854:	2301      	movs	r3, #1
    a856:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    a858:	4b67      	ldr	r3, [pc, #412]	; (a9f8 <xQueueSemaphoreTake+0x398>)
    a85a:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    a85c:	4b68      	ldr	r3, [pc, #416]	; (aa00 <xQueueSemaphoreTake+0x3a0>)
    a85e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    a860:	4b57      	ldr	r3, [pc, #348]	; (a9c0 <xQueueSemaphoreTake+0x360>)
    a862:	4798      	blx	r3
    a864:	69fb      	ldr	r3, [r7, #28]
    a866:	2244      	movs	r2, #68	; 0x44
    a868:	5c9b      	ldrb	r3, [r3, r2]
    a86a:	b25b      	sxtb	r3, r3
    a86c:	3301      	adds	r3, #1
    a86e:	d103      	bne.n	a878 <xQueueSemaphoreTake+0x218>
    a870:	69fb      	ldr	r3, [r7, #28]
    a872:	2244      	movs	r2, #68	; 0x44
    a874:	2100      	movs	r1, #0
    a876:	5499      	strb	r1, [r3, r2]
    a878:	69fb      	ldr	r3, [r7, #28]
    a87a:	2245      	movs	r2, #69	; 0x45
    a87c:	5c9b      	ldrb	r3, [r3, r2]
    a87e:	b25b      	sxtb	r3, r3
    a880:	3301      	adds	r3, #1
    a882:	d103      	bne.n	a88c <xQueueSemaphoreTake+0x22c>
    a884:	69fb      	ldr	r3, [r7, #28]
    a886:	2245      	movs	r2, #69	; 0x45
    a888:	2100      	movs	r1, #0
    a88a:	5499      	strb	r1, [r3, r2]
    a88c:	4b5a      	ldr	r3, [pc, #360]	; (a9f8 <xQueueSemaphoreTake+0x398>)
    a88e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    a890:	003a      	movs	r2, r7
    a892:	230c      	movs	r3, #12
    a894:	18fb      	adds	r3, r7, r3
    a896:	0011      	movs	r1, r2
    a898:	0018      	movs	r0, r3
    a89a:	4b5a      	ldr	r3, [pc, #360]	; (aa04 <xQueueSemaphoreTake+0x3a4>)
    a89c:	4798      	blx	r3
    a89e:	1e03      	subs	r3, r0, #0
    a8a0:	d000      	beq.n	a8a4 <xQueueSemaphoreTake+0x244>
    a8a2:	e0bd      	b.n	aa20 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    a8a4:	69fb      	ldr	r3, [r7, #28]
    a8a6:	0018      	movs	r0, r3
    a8a8:	4b57      	ldr	r3, [pc, #348]	; (aa08 <xQueueSemaphoreTake+0x3a8>)
    a8aa:	4798      	blx	r3
    a8ac:	1e03      	subs	r3, r0, #0
    a8ae:	d100      	bne.n	a8b2 <xQueueSemaphoreTake+0x252>
    a8b0:	e07c      	b.n	a9ac <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    a8b2:	4b44      	ldr	r3, [pc, #272]	; (a9c4 <xQueueSemaphoreTake+0x364>)
    a8b4:	4798      	blx	r3
    a8b6:	0003      	movs	r3, r0
    a8b8:	0018      	movs	r0, r3
    a8ba:	4b43      	ldr	r3, [pc, #268]	; (a9c8 <xQueueSemaphoreTake+0x368>)
    a8bc:	4798      	blx	r3
    a8be:	0003      	movs	r3, r0
    a8c0:	001a      	movs	r2, r3
    a8c2:	4b42      	ldr	r3, [pc, #264]	; (a9cc <xQueueSemaphoreTake+0x36c>)
    a8c4:	881b      	ldrh	r3, [r3, #0]
    a8c6:	4013      	ands	r3, r2
    a8c8:	b29b      	uxth	r3, r3
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d029      	beq.n	a922 <xQueueSemaphoreTake+0x2c2>
    a8ce:	69fb      	ldr	r3, [r7, #28]
    a8d0:	0018      	movs	r0, r3
    a8d2:	4b3f      	ldr	r3, [pc, #252]	; (a9d0 <xQueueSemaphoreTake+0x370>)
    a8d4:	4798      	blx	r3
    a8d6:	0003      	movs	r3, r0
    a8d8:	001a      	movs	r2, r3
    a8da:	4b3c      	ldr	r3, [pc, #240]	; (a9cc <xQueueSemaphoreTake+0x36c>)
    a8dc:	881b      	ldrh	r3, [r3, #0]
    a8de:	4013      	ands	r3, r2
    a8e0:	b29b      	uxth	r3, r3
    a8e2:	2b00      	cmp	r3, #0
    a8e4:	d01d      	beq.n	a922 <xQueueSemaphoreTake+0x2c2>
    a8e6:	69fb      	ldr	r3, [r7, #28]
    a8e8:	0018      	movs	r0, r3
    a8ea:	4b3a      	ldr	r3, [pc, #232]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a8ec:	4798      	blx	r3
    a8ee:	0003      	movs	r3, r0
    a8f0:	001a      	movs	r2, r3
    a8f2:	4b39      	ldr	r3, [pc, #228]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a8f4:	5c9b      	ldrb	r3, [r3, r2]
    a8f6:	3368      	adds	r3, #104	; 0x68
    a8f8:	b2db      	uxtb	r3, r3
    a8fa:	001d      	movs	r5, r3
    a8fc:	69fb      	ldr	r3, [r7, #28]
    a8fe:	0018      	movs	r0, r3
    a900:	4b34      	ldr	r3, [pc, #208]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a902:	4798      	blx	r3
    a904:	0003      	movs	r3, r0
    a906:	001a      	movs	r2, r3
    a908:	4b33      	ldr	r3, [pc, #204]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a90a:	5c9c      	ldrb	r4, [r3, r2]
    a90c:	69fb      	ldr	r3, [r7, #28]
    a90e:	0018      	movs	r0, r3
    a910:	4b32      	ldr	r3, [pc, #200]	; (a9dc <xQueueSemaphoreTake+0x37c>)
    a912:	4798      	blx	r3
    a914:	0003      	movs	r3, r0
    a916:	b2db      	uxtb	r3, r3
    a918:	001a      	movs	r2, r3
    a91a:	0021      	movs	r1, r4
    a91c:	0028      	movs	r0, r5
    a91e:	4b30      	ldr	r3, [pc, #192]	; (a9e0 <xQueueSemaphoreTake+0x380>)
    a920:	4798      	blx	r3
    a922:	69fb      	ldr	r3, [r7, #28]
    a924:	0018      	movs	r0, r3
    a926:	4b2b      	ldr	r3, [pc, #172]	; (a9d4 <xQueueSemaphoreTake+0x374>)
    a928:	4798      	blx	r3
    a92a:	0003      	movs	r3, r0
    a92c:	001a      	movs	r2, r3
    a92e:	4b2a      	ldr	r3, [pc, #168]	; (a9d8 <xQueueSemaphoreTake+0x378>)
    a930:	5c9b      	ldrb	r3, [r3, r2]
    a932:	2b02      	cmp	r3, #2
    a934:	d018      	beq.n	a968 <xQueueSemaphoreTake+0x308>
    a936:	4b23      	ldr	r3, [pc, #140]	; (a9c4 <xQueueSemaphoreTake+0x364>)
    a938:	4798      	blx	r3
    a93a:	0003      	movs	r3, r0
    a93c:	0018      	movs	r0, r3
    a93e:	4b22      	ldr	r3, [pc, #136]	; (a9c8 <xQueueSemaphoreTake+0x368>)
    a940:	4798      	blx	r3
    a942:	0003      	movs	r3, r0
    a944:	001a      	movs	r2, r3
    a946:	4b21      	ldr	r3, [pc, #132]	; (a9cc <xQueueSemaphoreTake+0x36c>)
    a948:	881b      	ldrh	r3, [r3, #0]
    a94a:	4013      	ands	r3, r2
    a94c:	b29b      	uxth	r3, r3
    a94e:	2b00      	cmp	r3, #0
    a950:	d00a      	beq.n	a968 <xQueueSemaphoreTake+0x308>
    a952:	4b1c      	ldr	r3, [pc, #112]	; (a9c4 <xQueueSemaphoreTake+0x364>)
    a954:	4798      	blx	r3
    a956:	0003      	movs	r3, r0
    a958:	0018      	movs	r0, r3
    a95a:	4b22      	ldr	r3, [pc, #136]	; (a9e4 <xQueueSemaphoreTake+0x384>)
    a95c:	4798      	blx	r3
    a95e:	0003      	movs	r3, r0
    a960:	b2db      	uxtb	r3, r3
    a962:	0018      	movs	r0, r3
    a964:	4b29      	ldr	r3, [pc, #164]	; (aa0c <xQueueSemaphoreTake+0x3ac>)
    a966:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    a968:	69fb      	ldr	r3, [r7, #28]
    a96a:	681b      	ldr	r3, [r3, #0]
    a96c:	2b00      	cmp	r3, #0
    a96e:	d10a      	bne.n	a986 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
    a970:	4b13      	ldr	r3, [pc, #76]	; (a9c0 <xQueueSemaphoreTake+0x360>)
    a972:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    a974:	69fb      	ldr	r3, [r7, #28]
    a976:	685b      	ldr	r3, [r3, #4]
    a978:	0018      	movs	r0, r3
    a97a:	4b25      	ldr	r3, [pc, #148]	; (aa10 <xQueueSemaphoreTake+0x3b0>)
    a97c:	4798      	blx	r3
    a97e:	0003      	movs	r3, r0
    a980:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    a982:	4b1d      	ldr	r3, [pc, #116]	; (a9f8 <xQueueSemaphoreTake+0x398>)
    a984:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    a986:	69fb      	ldr	r3, [r7, #28]
    a988:	3324      	adds	r3, #36	; 0x24
    a98a:	683a      	ldr	r2, [r7, #0]
    a98c:	0011      	movs	r1, r2
    a98e:	0018      	movs	r0, r3
    a990:	4b20      	ldr	r3, [pc, #128]	; (aa14 <xQueueSemaphoreTake+0x3b4>)
    a992:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    a994:	69fb      	ldr	r3, [r7, #28]
    a996:	0018      	movs	r0, r3
    a998:	4b1f      	ldr	r3, [pc, #124]	; (aa18 <xQueueSemaphoreTake+0x3b8>)
    a99a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    a99c:	4b1f      	ldr	r3, [pc, #124]	; (aa1c <xQueueSemaphoreTake+0x3bc>)
    a99e:	4798      	blx	r3
    a9a0:	1e03      	subs	r3, r0, #0
    a9a2:	d000      	beq.n	a9a6 <xQueueSemaphoreTake+0x346>
    a9a4:	e680      	b.n	a6a8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    a9a6:	4b13      	ldr	r3, [pc, #76]	; (a9f4 <xQueueSemaphoreTake+0x394>)
    a9a8:	4798      	blx	r3
    a9aa:	e67d      	b.n	a6a8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    a9ac:	69fb      	ldr	r3, [r7, #28]
    a9ae:	0018      	movs	r0, r3
    a9b0:	4b19      	ldr	r3, [pc, #100]	; (aa18 <xQueueSemaphoreTake+0x3b8>)
    a9b2:	4798      	blx	r3
				( void ) xTaskResumeAll();
    a9b4:	4b19      	ldr	r3, [pc, #100]	; (aa1c <xQueueSemaphoreTake+0x3bc>)
    a9b6:	4798      	blx	r3
    a9b8:	e676      	b.n	a6a8 <xQueueSemaphoreTake+0x48>
    a9ba:	46c0      	nop			; (mov r8, r8)
    a9bc:	0000c0dd 	.word	0x0000c0dd
    a9c0:	000093b9 	.word	0x000093b9
    a9c4:	0000764d 	.word	0x0000764d
    a9c8:	000073b1 	.word	0x000073b1
    a9cc:	20000104 	.word	0x20000104
    a9d0:	00007471 	.word	0x00007471
    a9d4:	00007371 	.word	0x00007371
    a9d8:	200000f8 	.word	0x200000f8
    a9dc:	00007451 	.word	0x00007451
    a9e0:	00007da9 	.word	0x00007da9
    a9e4:	00007391 	.word	0x00007391
    a9e8:	00008405 	.word	0x00008405
    a9ec:	0000c5a9 	.word	0x0000c5a9
    a9f0:	0000bc4d 	.word	0x0000bc4d
    a9f4:	000093a1 	.word	0x000093a1
    a9f8:	000093dd 	.word	0x000093dd
    a9fc:	0000bd8d 	.word	0x0000bd8d
    aa00:	0000b675 	.word	0x0000b675
    aa04:	0000bdb5 	.word	0x0000bdb5
    aa08:	0000ada9 	.word	0x0000ada9
    aa0c:	00008541 	.word	0x00008541
    aa10:	0000c115 	.word	0x0000c115
    aa14:	0000bb29 	.word	0x0000bb29
    aa18:	0000acb9 	.word	0x0000acb9
    aa1c:	0000b68d 	.word	0x0000b68d
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    aa20:	69fb      	ldr	r3, [r7, #28]
    aa22:	0018      	movs	r0, r3
    aa24:	4b2d      	ldr	r3, [pc, #180]	; (aadc <xQueueSemaphoreTake+0x47c>)
    aa26:	4798      	blx	r3
			( void ) xTaskResumeAll();
    aa28:	4b2d      	ldr	r3, [pc, #180]	; (aae0 <xQueueSemaphoreTake+0x480>)
    aa2a:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    aa2c:	69fb      	ldr	r3, [r7, #28]
    aa2e:	0018      	movs	r0, r3
    aa30:	4b2c      	ldr	r3, [pc, #176]	; (aae4 <xQueueSemaphoreTake+0x484>)
    aa32:	4798      	blx	r3
    aa34:	1e03      	subs	r3, r0, #0
    aa36:	d100      	bne.n	aa3a <xQueueSemaphoreTake+0x3da>
    aa38:	e636      	b.n	a6a8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    aa3a:	6a3b      	ldr	r3, [r7, #32]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d010      	beq.n	aa62 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
    aa40:	4b29      	ldr	r3, [pc, #164]	; (aae8 <xQueueSemaphoreTake+0x488>)
    aa42:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    aa44:	69fb      	ldr	r3, [r7, #28]
    aa46:	0018      	movs	r0, r3
    aa48:	4b28      	ldr	r3, [pc, #160]	; (aaec <xQueueSemaphoreTake+0x48c>)
    aa4a:	4798      	blx	r3
    aa4c:	0003      	movs	r3, r0
    aa4e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    aa50:	69fb      	ldr	r3, [r7, #28]
    aa52:	685b      	ldr	r3, [r3, #4]
    aa54:	697a      	ldr	r2, [r7, #20]
    aa56:	0011      	movs	r1, r2
    aa58:	0018      	movs	r0, r3
    aa5a:	4b25      	ldr	r3, [pc, #148]	; (aaf0 <xQueueSemaphoreTake+0x490>)
    aa5c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    aa5e:	4b25      	ldr	r3, [pc, #148]	; (aaf4 <xQueueSemaphoreTake+0x494>)
    aa60:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
    aa62:	4b25      	ldr	r3, [pc, #148]	; (aaf8 <xQueueSemaphoreTake+0x498>)
    aa64:	4798      	blx	r3
    aa66:	0003      	movs	r3, r0
    aa68:	0018      	movs	r0, r3
    aa6a:	4b24      	ldr	r3, [pc, #144]	; (aafc <xQueueSemaphoreTake+0x49c>)
    aa6c:	4798      	blx	r3
    aa6e:	0003      	movs	r3, r0
    aa70:	001a      	movs	r2, r3
    aa72:	4b23      	ldr	r3, [pc, #140]	; (ab00 <xQueueSemaphoreTake+0x4a0>)
    aa74:	881b      	ldrh	r3, [r3, #0]
    aa76:	4013      	ands	r3, r2
    aa78:	b29b      	uxth	r3, r3
    aa7a:	2b00      	cmp	r3, #0
    aa7c:	d029      	beq.n	aad2 <xQueueSemaphoreTake+0x472>
    aa7e:	69fb      	ldr	r3, [r7, #28]
    aa80:	0018      	movs	r0, r3
    aa82:	4b20      	ldr	r3, [pc, #128]	; (ab04 <xQueueSemaphoreTake+0x4a4>)
    aa84:	4798      	blx	r3
    aa86:	0003      	movs	r3, r0
    aa88:	001a      	movs	r2, r3
    aa8a:	4b1d      	ldr	r3, [pc, #116]	; (ab00 <xQueueSemaphoreTake+0x4a0>)
    aa8c:	881b      	ldrh	r3, [r3, #0]
    aa8e:	4013      	ands	r3, r2
    aa90:	b29b      	uxth	r3, r3
    aa92:	2b00      	cmp	r3, #0
    aa94:	d01d      	beq.n	aad2 <xQueueSemaphoreTake+0x472>
    aa96:	69fb      	ldr	r3, [r7, #28]
    aa98:	0018      	movs	r0, r3
    aa9a:	4b1b      	ldr	r3, [pc, #108]	; (ab08 <xQueueSemaphoreTake+0x4a8>)
    aa9c:	4798      	blx	r3
    aa9e:	0003      	movs	r3, r0
    aaa0:	001a      	movs	r2, r3
    aaa2:	4b1a      	ldr	r3, [pc, #104]	; (ab0c <xQueueSemaphoreTake+0x4ac>)
    aaa4:	5c9b      	ldrb	r3, [r3, r2]
    aaa6:	3350      	adds	r3, #80	; 0x50
    aaa8:	b2db      	uxtb	r3, r3
    aaaa:	001d      	movs	r5, r3
    aaac:	69fb      	ldr	r3, [r7, #28]
    aaae:	0018      	movs	r0, r3
    aab0:	4b15      	ldr	r3, [pc, #84]	; (ab08 <xQueueSemaphoreTake+0x4a8>)
    aab2:	4798      	blx	r3
    aab4:	0003      	movs	r3, r0
    aab6:	001a      	movs	r2, r3
    aab8:	4b14      	ldr	r3, [pc, #80]	; (ab0c <xQueueSemaphoreTake+0x4ac>)
    aaba:	5c9c      	ldrb	r4, [r3, r2]
    aabc:	69fb      	ldr	r3, [r7, #28]
    aabe:	0018      	movs	r0, r3
    aac0:	4b13      	ldr	r3, [pc, #76]	; (ab10 <xQueueSemaphoreTake+0x4b0>)
    aac2:	4798      	blx	r3
    aac4:	0003      	movs	r3, r0
    aac6:	b2db      	uxtb	r3, r3
    aac8:	001a      	movs	r2, r3
    aaca:	0021      	movs	r1, r4
    aacc:	0028      	movs	r0, r5
    aace:	4b11      	ldr	r3, [pc, #68]	; (ab14 <xQueueSemaphoreTake+0x4b4>)
    aad0:	4798      	blx	r3
				return errQUEUE_EMPTY;
    aad2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    aad4:	0018      	movs	r0, r3
    aad6:	46bd      	mov	sp, r7
    aad8:	b00a      	add	sp, #40	; 0x28
    aada:	bdb0      	pop	{r4, r5, r7, pc}
    aadc:	0000acb9 	.word	0x0000acb9
    aae0:	0000b68d 	.word	0x0000b68d
    aae4:	0000ada9 	.word	0x0000ada9
    aae8:	000093b9 	.word	0x000093b9
    aaec:	0000ab5b 	.word	0x0000ab5b
    aaf0:	0000c40d 	.word	0x0000c40d
    aaf4:	000093dd 	.word	0x000093dd
    aaf8:	0000764d 	.word	0x0000764d
    aafc:	000073b1 	.word	0x000073b1
    ab00:	20000104 	.word	0x20000104
    ab04:	00007471 	.word	0x00007471
    ab08:	00007371 	.word	0x00007371
    ab0c:	200000f8 	.word	0x200000f8
    ab10:	00007451 	.word	0x00007451
    ab14:	00007da9 	.word	0x00007da9

0000ab18 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
    ab18:	b580      	push	{r7, lr}
    ab1a:	b082      	sub	sp, #8
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    ab20:	687b      	ldr	r3, [r7, #4]
    ab22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
    ab24:	0018      	movs	r0, r3
    ab26:	46bd      	mov	sp, r7
    ab28:	b002      	add	sp, #8
    ab2a:	bd80      	pop	{r7, pc}

0000ab2c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	b082      	sub	sp, #8
    ab30:	af00      	add	r7, sp, #0
    ab32:	6078      	str	r0, [r7, #4]
    ab34:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    ab36:	687b      	ldr	r3, [r7, #4]
    ab38:	683a      	ldr	r2, [r7, #0]
    ab3a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
    ab3c:	46c0      	nop			; (mov r8, r8)
    ab3e:	46bd      	mov	sp, r7
    ab40:	b002      	add	sp, #8
    ab42:	bd80      	pop	{r7, pc}

0000ab44 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
    ab44:	b580      	push	{r7, lr}
    ab46:	b082      	sub	sp, #8
    ab48:	af00      	add	r7, sp, #0
    ab4a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    ab4c:	687b      	ldr	r3, [r7, #4]
    ab4e:	2250      	movs	r2, #80	; 0x50
    ab50:	5c9b      	ldrb	r3, [r3, r2]
	}
    ab52:	0018      	movs	r0, r3
    ab54:	46bd      	mov	sp, r7
    ab56:	b002      	add	sp, #8
    ab58:	bd80      	pop	{r7, pc}

0000ab5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    ab5a:	b580      	push	{r7, lr}
    ab5c:	b084      	sub	sp, #16
    ab5e:	af00      	add	r7, sp, #0
    ab60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ab66:	2b00      	cmp	r3, #0
    ab68:	d006      	beq.n	ab78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    ab6a:	687b      	ldr	r3, [r7, #4]
    ab6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ab6e:	681b      	ldr	r3, [r3, #0]
    ab70:	2205      	movs	r2, #5
    ab72:	1ad3      	subs	r3, r2, r3
    ab74:	60fb      	str	r3, [r7, #12]
    ab76:	e001      	b.n	ab7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    ab78:	2300      	movs	r3, #0
    ab7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    ab7c:	68fb      	ldr	r3, [r7, #12]
	}
    ab7e:	0018      	movs	r0, r3
    ab80:	46bd      	mov	sp, r7
    ab82:	b004      	add	sp, #16
    ab84:	bd80      	pop	{r7, pc}
	...

0000ab88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    ab88:	b580      	push	{r7, lr}
    ab8a:	b086      	sub	sp, #24
    ab8c:	af00      	add	r7, sp, #0
    ab8e:	60f8      	str	r0, [r7, #12]
    ab90:	60b9      	str	r1, [r7, #8]
    ab92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    ab94:	2300      	movs	r3, #0
    ab96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    ab98:	68fb      	ldr	r3, [r7, #12]
    ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ab9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    ab9e:	68fb      	ldr	r3, [r7, #12]
    aba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    aba2:	2b00      	cmp	r3, #0
    aba4:	d10e      	bne.n	abc4 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    aba6:	68fb      	ldr	r3, [r7, #12]
    aba8:	681b      	ldr	r3, [r3, #0]
    abaa:	2b00      	cmp	r3, #0
    abac:	d14e      	bne.n	ac4c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    abae:	68fb      	ldr	r3, [r7, #12]
    abb0:	685b      	ldr	r3, [r3, #4]
    abb2:	0018      	movs	r0, r3
    abb4:	4b2a      	ldr	r3, [pc, #168]	; (ac60 <prvCopyDataToQueue+0xd8>)
    abb6:	4798      	blx	r3
    abb8:	0003      	movs	r3, r0
    abba:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    abbc:	68fb      	ldr	r3, [r7, #12]
    abbe:	2200      	movs	r2, #0
    abc0:	605a      	str	r2, [r3, #4]
    abc2:	e043      	b.n	ac4c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	2b00      	cmp	r3, #0
    abc8:	d119      	bne.n	abfe <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    abca:	68fb      	ldr	r3, [r7, #12]
    abcc:	6898      	ldr	r0, [r3, #8]
    abce:	68fb      	ldr	r3, [r7, #12]
    abd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    abd2:	68bb      	ldr	r3, [r7, #8]
    abd4:	0019      	movs	r1, r3
    abd6:	4b23      	ldr	r3, [pc, #140]	; (ac64 <prvCopyDataToQueue+0xdc>)
    abd8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    abda:	68fb      	ldr	r3, [r7, #12]
    abdc:	689a      	ldr	r2, [r3, #8]
    abde:	68fb      	ldr	r3, [r7, #12]
    abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    abe2:	18d2      	adds	r2, r2, r3
    abe4:	68fb      	ldr	r3, [r7, #12]
    abe6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    abe8:	68fb      	ldr	r3, [r7, #12]
    abea:	689a      	ldr	r2, [r3, #8]
    abec:	68fb      	ldr	r3, [r7, #12]
    abee:	685b      	ldr	r3, [r3, #4]
    abf0:	429a      	cmp	r2, r3
    abf2:	d32b      	bcc.n	ac4c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    abf4:	68fb      	ldr	r3, [r7, #12]
    abf6:	681a      	ldr	r2, [r3, #0]
    abf8:	68fb      	ldr	r3, [r7, #12]
    abfa:	609a      	str	r2, [r3, #8]
    abfc:	e026      	b.n	ac4c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    abfe:	68fb      	ldr	r3, [r7, #12]
    ac00:	68d8      	ldr	r0, [r3, #12]
    ac02:	68fb      	ldr	r3, [r7, #12]
    ac04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ac06:	68bb      	ldr	r3, [r7, #8]
    ac08:	0019      	movs	r1, r3
    ac0a:	4b16      	ldr	r3, [pc, #88]	; (ac64 <prvCopyDataToQueue+0xdc>)
    ac0c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    ac0e:	68fb      	ldr	r3, [r7, #12]
    ac10:	68da      	ldr	r2, [r3, #12]
    ac12:	68fb      	ldr	r3, [r7, #12]
    ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ac16:	425b      	negs	r3, r3
    ac18:	18d2      	adds	r2, r2, r3
    ac1a:	68fb      	ldr	r3, [r7, #12]
    ac1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    ac1e:	68fb      	ldr	r3, [r7, #12]
    ac20:	68da      	ldr	r2, [r3, #12]
    ac22:	68fb      	ldr	r3, [r7, #12]
    ac24:	681b      	ldr	r3, [r3, #0]
    ac26:	429a      	cmp	r2, r3
    ac28:	d207      	bcs.n	ac3a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    ac2a:	68fb      	ldr	r3, [r7, #12]
    ac2c:	685a      	ldr	r2, [r3, #4]
    ac2e:	68fb      	ldr	r3, [r7, #12]
    ac30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ac32:	425b      	negs	r3, r3
    ac34:	18d2      	adds	r2, r2, r3
    ac36:	68fb      	ldr	r3, [r7, #12]
    ac38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    ac3a:	687b      	ldr	r3, [r7, #4]
    ac3c:	2b02      	cmp	r3, #2
    ac3e:	d105      	bne.n	ac4c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    ac40:	693b      	ldr	r3, [r7, #16]
    ac42:	2b00      	cmp	r3, #0
    ac44:	d002      	beq.n	ac4c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    ac46:	693b      	ldr	r3, [r7, #16]
    ac48:	3b01      	subs	r3, #1
    ac4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    ac4c:	693b      	ldr	r3, [r7, #16]
    ac4e:	1c5a      	adds	r2, r3, #1
    ac50:	68fb      	ldr	r3, [r7, #12]
    ac52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    ac54:	697b      	ldr	r3, [r7, #20]
}
    ac56:	0018      	movs	r0, r3
    ac58:	46bd      	mov	sp, r7
    ac5a:	b006      	add	sp, #24
    ac5c:	bd80      	pop	{r7, pc}
    ac5e:	46c0      	nop			; (mov r8, r8)
    ac60:	0000c2a5 	.word	0x0000c2a5
    ac64:	00024781 	.word	0x00024781

0000ac68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    ac68:	b580      	push	{r7, lr}
    ac6a:	b082      	sub	sp, #8
    ac6c:	af00      	add	r7, sp, #0
    ac6e:	6078      	str	r0, [r7, #4]
    ac70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    ac72:	687b      	ldr	r3, [r7, #4]
    ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ac76:	2b00      	cmp	r3, #0
    ac78:	d018      	beq.n	acac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    ac7a:	687b      	ldr	r3, [r7, #4]
    ac7c:	68da      	ldr	r2, [r3, #12]
    ac7e:	687b      	ldr	r3, [r7, #4]
    ac80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ac82:	18d2      	adds	r2, r2, r3
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    ac88:	687b      	ldr	r3, [r7, #4]
    ac8a:	68da      	ldr	r2, [r3, #12]
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	685b      	ldr	r3, [r3, #4]
    ac90:	429a      	cmp	r2, r3
    ac92:	d303      	bcc.n	ac9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    ac94:	687b      	ldr	r3, [r7, #4]
    ac96:	681a      	ldr	r2, [r3, #0]
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    ac9c:	687b      	ldr	r3, [r7, #4]
    ac9e:	68d9      	ldr	r1, [r3, #12]
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    aca4:	683b      	ldr	r3, [r7, #0]
    aca6:	0018      	movs	r0, r3
    aca8:	4b02      	ldr	r3, [pc, #8]	; (acb4 <prvCopyDataFromQueue+0x4c>)
    acaa:	4798      	blx	r3
	}
}
    acac:	46c0      	nop			; (mov r8, r8)
    acae:	46bd      	mov	sp, r7
    acb0:	b002      	add	sp, #8
    acb2:	bd80      	pop	{r7, pc}
    acb4:	00024781 	.word	0x00024781

0000acb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    acb8:	b580      	push	{r7, lr}
    acba:	b084      	sub	sp, #16
    acbc:	af00      	add	r7, sp, #0
    acbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    acc0:	4b34      	ldr	r3, [pc, #208]	; (ad94 <prvUnlockQueue+0xdc>)
    acc2:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    acc4:	230f      	movs	r3, #15
    acc6:	18fb      	adds	r3, r7, r3
    acc8:	687a      	ldr	r2, [r7, #4]
    acca:	2145      	movs	r1, #69	; 0x45
    accc:	5c52      	ldrb	r2, [r2, r1]
    acce:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    acd0:	e022      	b.n	ad18 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    acd2:	687b      	ldr	r3, [r7, #4]
    acd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    acd6:	2b00      	cmp	r3, #0
    acd8:	d009      	beq.n	acee <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    acda:	687b      	ldr	r3, [r7, #4]
    acdc:	2100      	movs	r1, #0
    acde:	0018      	movs	r0, r3
    ace0:	4b2d      	ldr	r3, [pc, #180]	; (ad98 <prvUnlockQueue+0xe0>)
    ace2:	4798      	blx	r3
    ace4:	1e03      	subs	r3, r0, #0
    ace6:	d00f      	beq.n	ad08 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    ace8:	4b2c      	ldr	r3, [pc, #176]	; (ad9c <prvUnlockQueue+0xe4>)
    acea:	4798      	blx	r3
    acec:	e00c      	b.n	ad08 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    acee:	687b      	ldr	r3, [r7, #4]
    acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    acf2:	2b00      	cmp	r3, #0
    acf4:	d017      	beq.n	ad26 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    acf6:	687b      	ldr	r3, [r7, #4]
    acf8:	3324      	adds	r3, #36	; 0x24
    acfa:	0018      	movs	r0, r3
    acfc:	4b28      	ldr	r3, [pc, #160]	; (ada0 <prvUnlockQueue+0xe8>)
    acfe:	4798      	blx	r3
    ad00:	1e03      	subs	r3, r0, #0
    ad02:	d001      	beq.n	ad08 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    ad04:	4b25      	ldr	r3, [pc, #148]	; (ad9c <prvUnlockQueue+0xe4>)
    ad06:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    ad08:	230f      	movs	r3, #15
    ad0a:	18fb      	adds	r3, r7, r3
    ad0c:	781b      	ldrb	r3, [r3, #0]
    ad0e:	3b01      	subs	r3, #1
    ad10:	b2da      	uxtb	r2, r3
    ad12:	230f      	movs	r3, #15
    ad14:	18fb      	adds	r3, r7, r3
    ad16:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    ad18:	230f      	movs	r3, #15
    ad1a:	18fb      	adds	r3, r7, r3
    ad1c:	781b      	ldrb	r3, [r3, #0]
    ad1e:	b25b      	sxtb	r3, r3
    ad20:	2b00      	cmp	r3, #0
    ad22:	dcd6      	bgt.n	acd2 <prvUnlockQueue+0x1a>
    ad24:	e000      	b.n	ad28 <prvUnlockQueue+0x70>
						break;
    ad26:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    ad28:	687b      	ldr	r3, [r7, #4]
    ad2a:	2245      	movs	r2, #69	; 0x45
    ad2c:	21ff      	movs	r1, #255	; 0xff
    ad2e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    ad30:	4b1c      	ldr	r3, [pc, #112]	; (ada4 <prvUnlockQueue+0xec>)
    ad32:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    ad34:	4b17      	ldr	r3, [pc, #92]	; (ad94 <prvUnlockQueue+0xdc>)
    ad36:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    ad38:	230e      	movs	r3, #14
    ad3a:	18fb      	adds	r3, r7, r3
    ad3c:	687a      	ldr	r2, [r7, #4]
    ad3e:	2144      	movs	r1, #68	; 0x44
    ad40:	5c52      	ldrb	r2, [r2, r1]
    ad42:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    ad44:	e014      	b.n	ad70 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    ad46:	687b      	ldr	r3, [r7, #4]
    ad48:	691b      	ldr	r3, [r3, #16]
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	d017      	beq.n	ad7e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    ad4e:	687b      	ldr	r3, [r7, #4]
    ad50:	3310      	adds	r3, #16
    ad52:	0018      	movs	r0, r3
    ad54:	4b12      	ldr	r3, [pc, #72]	; (ada0 <prvUnlockQueue+0xe8>)
    ad56:	4798      	blx	r3
    ad58:	1e03      	subs	r3, r0, #0
    ad5a:	d001      	beq.n	ad60 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    ad5c:	4b0f      	ldr	r3, [pc, #60]	; (ad9c <prvUnlockQueue+0xe4>)
    ad5e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    ad60:	230e      	movs	r3, #14
    ad62:	18fb      	adds	r3, r7, r3
    ad64:	781b      	ldrb	r3, [r3, #0]
    ad66:	3b01      	subs	r3, #1
    ad68:	b2da      	uxtb	r2, r3
    ad6a:	230e      	movs	r3, #14
    ad6c:	18fb      	adds	r3, r7, r3
    ad6e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    ad70:	230e      	movs	r3, #14
    ad72:	18fb      	adds	r3, r7, r3
    ad74:	781b      	ldrb	r3, [r3, #0]
    ad76:	b25b      	sxtb	r3, r3
    ad78:	2b00      	cmp	r3, #0
    ad7a:	dce4      	bgt.n	ad46 <prvUnlockQueue+0x8e>
    ad7c:	e000      	b.n	ad80 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    ad7e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    ad80:	687b      	ldr	r3, [r7, #4]
    ad82:	2244      	movs	r2, #68	; 0x44
    ad84:	21ff      	movs	r1, #255	; 0xff
    ad86:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    ad88:	4b06      	ldr	r3, [pc, #24]	; (ada4 <prvUnlockQueue+0xec>)
    ad8a:	4798      	blx	r3
}
    ad8c:	46c0      	nop			; (mov r8, r8)
    ad8e:	46bd      	mov	sp, r7
    ad90:	b004      	add	sp, #16
    ad92:	bd80      	pop	{r7, pc}
    ad94:	000093b9 	.word	0x000093b9
    ad98:	0000ae8d 	.word	0x0000ae8d
    ad9c:	0000be61 	.word	0x0000be61
    ada0:	0000bc4d 	.word	0x0000bc4d
    ada4:	000093dd 	.word	0x000093dd

0000ada8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    ada8:	b580      	push	{r7, lr}
    adaa:	b084      	sub	sp, #16
    adac:	af00      	add	r7, sp, #0
    adae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    adb0:	4b08      	ldr	r3, [pc, #32]	; (add4 <prvIsQueueEmpty+0x2c>)
    adb2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    adb8:	2b00      	cmp	r3, #0
    adba:	d102      	bne.n	adc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    adbc:	2301      	movs	r3, #1
    adbe:	60fb      	str	r3, [r7, #12]
    adc0:	e001      	b.n	adc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    adc2:	2300      	movs	r3, #0
    adc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    adc6:	4b04      	ldr	r3, [pc, #16]	; (add8 <prvIsQueueEmpty+0x30>)
    adc8:	4798      	blx	r3

	return xReturn;
    adca:	68fb      	ldr	r3, [r7, #12]
}
    adcc:	0018      	movs	r0, r3
    adce:	46bd      	mov	sp, r7
    add0:	b004      	add	sp, #16
    add2:	bd80      	pop	{r7, pc}
    add4:	000093b9 	.word	0x000093b9
    add8:	000093dd 	.word	0x000093dd

0000addc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    addc:	b580      	push	{r7, lr}
    adde:	b084      	sub	sp, #16
    ade0:	af00      	add	r7, sp, #0
    ade2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    ade4:	4b09      	ldr	r3, [pc, #36]	; (ae0c <prvIsQueueFull+0x30>)
    ade6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    ade8:	687b      	ldr	r3, [r7, #4]
    adea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    adec:	687b      	ldr	r3, [r7, #4]
    adee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    adf0:	429a      	cmp	r2, r3
    adf2:	d102      	bne.n	adfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    adf4:	2301      	movs	r3, #1
    adf6:	60fb      	str	r3, [r7, #12]
    adf8:	e001      	b.n	adfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    adfa:	2300      	movs	r3, #0
    adfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    adfe:	4b04      	ldr	r3, [pc, #16]	; (ae10 <prvIsQueueFull+0x34>)
    ae00:	4798      	blx	r3

	return xReturn;
    ae02:	68fb      	ldr	r3, [r7, #12]
}
    ae04:	0018      	movs	r0, r3
    ae06:	46bd      	mov	sp, r7
    ae08:	b004      	add	sp, #16
    ae0a:	bd80      	pop	{r7, pc}
    ae0c:	000093b9 	.word	0x000093b9
    ae10:	000093dd 	.word	0x000093dd

0000ae14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    ae14:	b580      	push	{r7, lr}
    ae16:	b086      	sub	sp, #24
    ae18:	af00      	add	r7, sp, #0
    ae1a:	60f8      	str	r0, [r7, #12]
    ae1c:	60b9      	str	r1, [r7, #8]
    ae1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    ae20:	68fb      	ldr	r3, [r7, #12]
    ae22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    ae24:	4b15      	ldr	r3, [pc, #84]	; (ae7c <vQueueWaitForMessageRestricted+0x68>)
    ae26:	4798      	blx	r3
    ae28:	697b      	ldr	r3, [r7, #20]
    ae2a:	2244      	movs	r2, #68	; 0x44
    ae2c:	5c9b      	ldrb	r3, [r3, r2]
    ae2e:	b25b      	sxtb	r3, r3
    ae30:	3301      	adds	r3, #1
    ae32:	d103      	bne.n	ae3c <vQueueWaitForMessageRestricted+0x28>
    ae34:	697b      	ldr	r3, [r7, #20]
    ae36:	2244      	movs	r2, #68	; 0x44
    ae38:	2100      	movs	r1, #0
    ae3a:	5499      	strb	r1, [r3, r2]
    ae3c:	697b      	ldr	r3, [r7, #20]
    ae3e:	2245      	movs	r2, #69	; 0x45
    ae40:	5c9b      	ldrb	r3, [r3, r2]
    ae42:	b25b      	sxtb	r3, r3
    ae44:	3301      	adds	r3, #1
    ae46:	d103      	bne.n	ae50 <vQueueWaitForMessageRestricted+0x3c>
    ae48:	697b      	ldr	r3, [r7, #20]
    ae4a:	2245      	movs	r2, #69	; 0x45
    ae4c:	2100      	movs	r1, #0
    ae4e:	5499      	strb	r1, [r3, r2]
    ae50:	4b0b      	ldr	r3, [pc, #44]	; (ae80 <vQueueWaitForMessageRestricted+0x6c>)
    ae52:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    ae54:	697b      	ldr	r3, [r7, #20]
    ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ae58:	2b00      	cmp	r3, #0
    ae5a:	d106      	bne.n	ae6a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    ae5c:	697b      	ldr	r3, [r7, #20]
    ae5e:	3324      	adds	r3, #36	; 0x24
    ae60:	687a      	ldr	r2, [r7, #4]
    ae62:	68b9      	ldr	r1, [r7, #8]
    ae64:	0018      	movs	r0, r3
    ae66:	4b07      	ldr	r3, [pc, #28]	; (ae84 <vQueueWaitForMessageRestricted+0x70>)
    ae68:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    ae6a:	697b      	ldr	r3, [r7, #20]
    ae6c:	0018      	movs	r0, r3
    ae6e:	4b06      	ldr	r3, [pc, #24]	; (ae88 <vQueueWaitForMessageRestricted+0x74>)
    ae70:	4798      	blx	r3
	}
    ae72:	46c0      	nop			; (mov r8, r8)
    ae74:	46bd      	mov	sp, r7
    ae76:	b006      	add	sp, #24
    ae78:	bd80      	pop	{r7, pc}
    ae7a:	46c0      	nop			; (mov r8, r8)
    ae7c:	000093b9 	.word	0x000093b9
    ae80:	000093dd 	.word	0x000093dd
    ae84:	0000bb6d 	.word	0x0000bb6d
    ae88:	0000acb9 	.word	0x0000acb9

0000ae8c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    ae8c:	b5b0      	push	{r4, r5, r7, lr}
    ae8e:	b086      	sub	sp, #24
    ae90:	af00      	add	r7, sp, #0
    ae92:	6078      	str	r0, [r7, #4]
    ae94:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    ae96:	687b      	ldr	r3, [r7, #4]
    ae98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ae9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    ae9c:	2300      	movs	r3, #0
    ae9e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    aea0:	693b      	ldr	r3, [r7, #16]
    aea2:	2b00      	cmp	r3, #0
    aea4:	d101      	bne.n	aeaa <prvNotifyQueueSetContainer+0x1e>
    aea6:	b672      	cpsid	i
    aea8:	e7fe      	b.n	aea8 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    aeaa:	693b      	ldr	r3, [r7, #16]
    aeac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    aeae:	693b      	ldr	r3, [r7, #16]
    aeb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    aeb2:	429a      	cmp	r2, r3
    aeb4:	d301      	bcc.n	aeba <prvNotifyQueueSetContainer+0x2e>
    aeb6:	b672      	cpsid	i
    aeb8:	e7fe      	b.n	aeb8 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    aeba:	693b      	ldr	r3, [r7, #16]
    aebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    aebe:	693b      	ldr	r3, [r7, #16]
    aec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    aec2:	429a      	cmp	r2, r3
    aec4:	d300      	bcc.n	aec8 <prvNotifyQueueSetContainer+0x3c>
    aec6:	e08b      	b.n	afe0 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    aec8:	230f      	movs	r3, #15
    aeca:	18fb      	adds	r3, r7, r3
    aecc:	693a      	ldr	r2, [r7, #16]
    aece:	2145      	movs	r1, #69	; 0x45
    aed0:	5c52      	ldrb	r2, [r2, r1]
    aed2:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
    aed4:	4b45      	ldr	r3, [pc, #276]	; (afec <prvNotifyQueueSetContainer+0x160>)
    aed6:	4798      	blx	r3
    aed8:	0003      	movs	r3, r0
    aeda:	0018      	movs	r0, r3
    aedc:	4b44      	ldr	r3, [pc, #272]	; (aff0 <prvNotifyQueueSetContainer+0x164>)
    aede:	4798      	blx	r3
    aee0:	0003      	movs	r3, r0
    aee2:	001a      	movs	r2, r3
    aee4:	4b43      	ldr	r3, [pc, #268]	; (aff4 <prvNotifyQueueSetContainer+0x168>)
    aee6:	881b      	ldrh	r3, [r3, #0]
    aee8:	4013      	ands	r3, r2
    aeea:	b29b      	uxth	r3, r3
    aeec:	2b00      	cmp	r3, #0
    aeee:	d02e      	beq.n	af4e <prvNotifyQueueSetContainer+0xc2>
    aef0:	693b      	ldr	r3, [r7, #16]
    aef2:	0018      	movs	r0, r3
    aef4:	4b40      	ldr	r3, [pc, #256]	; (aff8 <prvNotifyQueueSetContainer+0x16c>)
    aef6:	4798      	blx	r3
    aef8:	0003      	movs	r3, r0
    aefa:	001a      	movs	r2, r3
    aefc:	4b3d      	ldr	r3, [pc, #244]	; (aff4 <prvNotifyQueueSetContainer+0x168>)
    aefe:	881b      	ldrh	r3, [r3, #0]
    af00:	4013      	ands	r3, r2
    af02:	b29b      	uxth	r3, r3
    af04:	2b00      	cmp	r3, #0
    af06:	d022      	beq.n	af4e <prvNotifyQueueSetContainer+0xc2>
    af08:	683b      	ldr	r3, [r7, #0]
    af0a:	2b00      	cmp	r3, #0
    af0c:	d10b      	bne.n	af26 <prvNotifyQueueSetContainer+0x9a>
    af0e:	693b      	ldr	r3, [r7, #16]
    af10:	0018      	movs	r0, r3
    af12:	4b3a      	ldr	r3, [pc, #232]	; (affc <prvNotifyQueueSetContainer+0x170>)
    af14:	4798      	blx	r3
    af16:	0003      	movs	r3, r0
    af18:	001a      	movs	r2, r3
    af1a:	4b39      	ldr	r3, [pc, #228]	; (b000 <prvNotifyQueueSetContainer+0x174>)
    af1c:	5c9b      	ldrb	r3, [r3, r2]
    af1e:	3320      	adds	r3, #32
    af20:	b2db      	uxtb	r3, r3
    af22:	001d      	movs	r5, r3
    af24:	e000      	b.n	af28 <prvNotifyQueueSetContainer+0x9c>
    af26:	2525      	movs	r5, #37	; 0x25
    af28:	693b      	ldr	r3, [r7, #16]
    af2a:	0018      	movs	r0, r3
    af2c:	4b33      	ldr	r3, [pc, #204]	; (affc <prvNotifyQueueSetContainer+0x170>)
    af2e:	4798      	blx	r3
    af30:	0003      	movs	r3, r0
    af32:	001a      	movs	r2, r3
    af34:	4b32      	ldr	r3, [pc, #200]	; (b000 <prvNotifyQueueSetContainer+0x174>)
    af36:	5c9c      	ldrb	r4, [r3, r2]
    af38:	693b      	ldr	r3, [r7, #16]
    af3a:	0018      	movs	r0, r3
    af3c:	4b31      	ldr	r3, [pc, #196]	; (b004 <prvNotifyQueueSetContainer+0x178>)
    af3e:	4798      	blx	r3
    af40:	0003      	movs	r3, r0
    af42:	b2db      	uxtb	r3, r3
    af44:	001a      	movs	r2, r3
    af46:	0021      	movs	r1, r4
    af48:	0028      	movs	r0, r5
    af4a:	4b2f      	ldr	r3, [pc, #188]	; (b008 <prvNotifyQueueSetContainer+0x17c>)
    af4c:	4798      	blx	r3
    af4e:	693b      	ldr	r3, [r7, #16]
    af50:	0018      	movs	r0, r3
    af52:	4b2a      	ldr	r3, [pc, #168]	; (affc <prvNotifyQueueSetContainer+0x170>)
    af54:	4798      	blx	r3
    af56:	0003      	movs	r3, r0
    af58:	001a      	movs	r2, r3
    af5a:	4b29      	ldr	r3, [pc, #164]	; (b000 <prvNotifyQueueSetContainer+0x174>)
    af5c:	5c9c      	ldrb	r4, [r3, r2]
    af5e:	693b      	ldr	r3, [r7, #16]
    af60:	0018      	movs	r0, r3
    af62:	4b28      	ldr	r3, [pc, #160]	; (b004 <prvNotifyQueueSetContainer+0x178>)
    af64:	4798      	blx	r3
    af66:	0003      	movs	r3, r0
    af68:	b2dd      	uxtb	r5, r3
    af6a:	693b      	ldr	r3, [r7, #16]
    af6c:	0018      	movs	r0, r3
    af6e:	4b23      	ldr	r3, [pc, #140]	; (affc <prvNotifyQueueSetContainer+0x170>)
    af70:	4798      	blx	r3
    af72:	0003      	movs	r3, r0
    af74:	001a      	movs	r2, r3
    af76:	4b22      	ldr	r3, [pc, #136]	; (b000 <prvNotifyQueueSetContainer+0x174>)
    af78:	5c9b      	ldrb	r3, [r3, r2]
    af7a:	2b02      	cmp	r3, #2
    af7c:	d005      	beq.n	af8a <prvNotifyQueueSetContainer+0xfe>
    af7e:	693b      	ldr	r3, [r7, #16]
    af80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    af82:	b2db      	uxtb	r3, r3
    af84:	3301      	adds	r3, #1
    af86:	b2db      	uxtb	r3, r3
    af88:	e000      	b.n	af8c <prvNotifyQueueSetContainer+0x100>
    af8a:	2300      	movs	r3, #0
    af8c:	001a      	movs	r2, r3
    af8e:	0029      	movs	r1, r5
    af90:	0020      	movs	r0, r4
    af92:	4b1e      	ldr	r3, [pc, #120]	; (b00c <prvNotifyQueueSetContainer+0x180>)
    af94:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    af96:	683a      	ldr	r2, [r7, #0]
    af98:	1d39      	adds	r1, r7, #4
    af9a:	693b      	ldr	r3, [r7, #16]
    af9c:	0018      	movs	r0, r3
    af9e:	4b1c      	ldr	r3, [pc, #112]	; (b010 <prvNotifyQueueSetContainer+0x184>)
    afa0:	4798      	blx	r3
    afa2:	0003      	movs	r3, r0
    afa4:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    afa6:	230f      	movs	r3, #15
    afa8:	18fb      	adds	r3, r7, r3
    afaa:	781b      	ldrb	r3, [r3, #0]
    afac:	b25b      	sxtb	r3, r3
    afae:	3301      	adds	r3, #1
    afb0:	d10d      	bne.n	afce <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    afb2:	693b      	ldr	r3, [r7, #16]
    afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    afb6:	2b00      	cmp	r3, #0
    afb8:	d012      	beq.n	afe0 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    afba:	693b      	ldr	r3, [r7, #16]
    afbc:	3324      	adds	r3, #36	; 0x24
    afbe:	0018      	movs	r0, r3
    afc0:	4b14      	ldr	r3, [pc, #80]	; (b014 <prvNotifyQueueSetContainer+0x188>)
    afc2:	4798      	blx	r3
    afc4:	1e03      	subs	r3, r0, #0
    afc6:	d00b      	beq.n	afe0 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    afc8:	2301      	movs	r3, #1
    afca:	617b      	str	r3, [r7, #20]
    afcc:	e008      	b.n	afe0 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    afce:	230f      	movs	r3, #15
    afd0:	18fb      	adds	r3, r7, r3
    afd2:	781b      	ldrb	r3, [r3, #0]
    afd4:	3301      	adds	r3, #1
    afd6:	b2db      	uxtb	r3, r3
    afd8:	b259      	sxtb	r1, r3
    afda:	693b      	ldr	r3, [r7, #16]
    afdc:	2245      	movs	r2, #69	; 0x45
    afde:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    afe0:	697b      	ldr	r3, [r7, #20]
	}
    afe2:	0018      	movs	r0, r3
    afe4:	46bd      	mov	sp, r7
    afe6:	b006      	add	sp, #24
    afe8:	bdb0      	pop	{r4, r5, r7, pc}
    afea:	46c0      	nop			; (mov r8, r8)
    afec:	0000764d 	.word	0x0000764d
    aff0:	000073b1 	.word	0x000073b1
    aff4:	20000104 	.word	0x20000104
    aff8:	00007471 	.word	0x00007471
    affc:	00007371 	.word	0x00007371
    b000:	200000f8 	.word	0x200000f8
    b004:	00007451 	.word	0x00007451
    b008:	00007da9 	.word	0x00007da9
    b00c:	00008405 	.word	0x00008405
    b010:	0000ab89 	.word	0x0000ab89
    b014:	0000bc4d 	.word	0x0000bc4d

0000b018 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    b018:	b590      	push	{r4, r7, lr}
    b01a:	b08d      	sub	sp, #52	; 0x34
    b01c:	af04      	add	r7, sp, #16
    b01e:	60f8      	str	r0, [r7, #12]
    b020:	60b9      	str	r1, [r7, #8]
    b022:	603b      	str	r3, [r7, #0]
    b024:	1dbb      	adds	r3, r7, #6
    b026:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b028:	1dbb      	adds	r3, r7, #6
    b02a:	881b      	ldrh	r3, [r3, #0]
    b02c:	009b      	lsls	r3, r3, #2
    b02e:	0018      	movs	r0, r3
    b030:	4b1d      	ldr	r3, [pc, #116]	; (b0a8 <xTaskCreate+0x90>)
    b032:	4798      	blx	r3
    b034:	0003      	movs	r3, r0
    b036:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    b038:	697b      	ldr	r3, [r7, #20]
    b03a:	2b00      	cmp	r3, #0
    b03c:	d010      	beq.n	b060 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    b03e:	2054      	movs	r0, #84	; 0x54
    b040:	4b19      	ldr	r3, [pc, #100]	; (b0a8 <xTaskCreate+0x90>)
    b042:	4798      	blx	r3
    b044:	0003      	movs	r3, r0
    b046:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    b048:	69fb      	ldr	r3, [r7, #28]
    b04a:	2b00      	cmp	r3, #0
    b04c:	d003      	beq.n	b056 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    b04e:	69fb      	ldr	r3, [r7, #28]
    b050:	697a      	ldr	r2, [r7, #20]
    b052:	631a      	str	r2, [r3, #48]	; 0x30
    b054:	e006      	b.n	b064 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    b056:	697b      	ldr	r3, [r7, #20]
    b058:	0018      	movs	r0, r3
    b05a:	4b14      	ldr	r3, [pc, #80]	; (b0ac <xTaskCreate+0x94>)
    b05c:	4798      	blx	r3
    b05e:	e001      	b.n	b064 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    b060:	2300      	movs	r3, #0
    b062:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    b064:	69fb      	ldr	r3, [r7, #28]
    b066:	2b00      	cmp	r3, #0
    b068:	d016      	beq.n	b098 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    b06a:	1dbb      	adds	r3, r7, #6
    b06c:	881a      	ldrh	r2, [r3, #0]
    b06e:	683c      	ldr	r4, [r7, #0]
    b070:	68b9      	ldr	r1, [r7, #8]
    b072:	68f8      	ldr	r0, [r7, #12]
    b074:	2300      	movs	r3, #0
    b076:	9303      	str	r3, [sp, #12]
    b078:	69fb      	ldr	r3, [r7, #28]
    b07a:	9302      	str	r3, [sp, #8]
    b07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b07e:	9301      	str	r3, [sp, #4]
    b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b082:	9300      	str	r3, [sp, #0]
    b084:	0023      	movs	r3, r4
    b086:	4c0a      	ldr	r4, [pc, #40]	; (b0b0 <xTaskCreate+0x98>)
    b088:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    b08a:	69fb      	ldr	r3, [r7, #28]
    b08c:	0018      	movs	r0, r3
    b08e:	4b09      	ldr	r3, [pc, #36]	; (b0b4 <xTaskCreate+0x9c>)
    b090:	4798      	blx	r3
			xReturn = pdPASS;
    b092:	2301      	movs	r3, #1
    b094:	61bb      	str	r3, [r7, #24]
    b096:	e002      	b.n	b09e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    b098:	2301      	movs	r3, #1
    b09a:	425b      	negs	r3, r3
    b09c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    b09e:	69bb      	ldr	r3, [r7, #24]
	}
    b0a0:	0018      	movs	r0, r3
    b0a2:	46bd      	mov	sp, r7
    b0a4:	b009      	add	sp, #36	; 0x24
    b0a6:	bd90      	pop	{r4, r7, pc}
    b0a8:	000094f1 	.word	0x000094f1
    b0ac:	000095b5 	.word	0x000095b5
    b0b0:	0000b0b9 	.word	0x0000b0b9
    b0b4:	0000b1c9 	.word	0x0000b1c9

0000b0b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    b0b8:	b580      	push	{r7, lr}
    b0ba:	b086      	sub	sp, #24
    b0bc:	af00      	add	r7, sp, #0
    b0be:	60f8      	str	r0, [r7, #12]
    b0c0:	60b9      	str	r1, [r7, #8]
    b0c2:	607a      	str	r2, [r7, #4]
    b0c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b0c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
    b0ca:	687b      	ldr	r3, [r7, #4]
    b0cc:	009b      	lsls	r3, r3, #2
    b0ce:	001a      	movs	r2, r3
    b0d0:	21a5      	movs	r1, #165	; 0xa5
    b0d2:	4b39      	ldr	r3, [pc, #228]	; (b1b8 <prvInitialiseNewTask+0x100>)
    b0d4:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b0d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    b0da:	687b      	ldr	r3, [r7, #4]
    b0dc:	4937      	ldr	r1, [pc, #220]	; (b1bc <prvInitialiseNewTask+0x104>)
    b0de:	468c      	mov	ip, r1
    b0e0:	4463      	add	r3, ip
    b0e2:	009b      	lsls	r3, r3, #2
    b0e4:	18d3      	adds	r3, r2, r3
    b0e6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    b0e8:	693b      	ldr	r3, [r7, #16]
    b0ea:	2207      	movs	r2, #7
    b0ec:	4393      	bics	r3, r2
    b0ee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    b0f0:	693b      	ldr	r3, [r7, #16]
    b0f2:	2207      	movs	r2, #7
    b0f4:	4013      	ands	r3, r2
    b0f6:	d001      	beq.n	b0fc <prvInitialiseNewTask+0x44>
    b0f8:	b672      	cpsid	i
    b0fa:	e7fe      	b.n	b0fa <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    b0fc:	2300      	movs	r3, #0
    b0fe:	617b      	str	r3, [r7, #20]
    b100:	e013      	b.n	b12a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    b102:	68ba      	ldr	r2, [r7, #8]
    b104:	697b      	ldr	r3, [r7, #20]
    b106:	18d3      	adds	r3, r2, r3
    b108:	7818      	ldrb	r0, [r3, #0]
    b10a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b10c:	2134      	movs	r1, #52	; 0x34
    b10e:	697b      	ldr	r3, [r7, #20]
    b110:	18d3      	adds	r3, r2, r3
    b112:	185b      	adds	r3, r3, r1
    b114:	1c02      	adds	r2, r0, #0
    b116:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    b118:	68ba      	ldr	r2, [r7, #8]
    b11a:	697b      	ldr	r3, [r7, #20]
    b11c:	18d3      	adds	r3, r2, r3
    b11e:	781b      	ldrb	r3, [r3, #0]
    b120:	2b00      	cmp	r3, #0
    b122:	d006      	beq.n	b132 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    b124:	697b      	ldr	r3, [r7, #20]
    b126:	3301      	adds	r3, #1
    b128:	617b      	str	r3, [r7, #20]
    b12a:	697b      	ldr	r3, [r7, #20]
    b12c:	2b07      	cmp	r3, #7
    b12e:	d9e8      	bls.n	b102 <prvInitialiseNewTask+0x4a>
    b130:	e000      	b.n	b134 <prvInitialiseNewTask+0x7c>
		{
			break;
    b132:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b136:	223b      	movs	r2, #59	; 0x3b
    b138:	2100      	movs	r1, #0
    b13a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    b13c:	6a3b      	ldr	r3, [r7, #32]
    b13e:	2b04      	cmp	r3, #4
    b140:	d901      	bls.n	b146 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    b142:	2304      	movs	r3, #4
    b144:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b148:	6a3a      	ldr	r2, [r7, #32]
    b14a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b14e:	6a3a      	ldr	r2, [r7, #32]
    b150:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b154:	2200      	movs	r2, #0
    b156:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b15a:	3304      	adds	r3, #4
    b15c:	0018      	movs	r0, r3
    b15e:	4b18      	ldr	r3, [pc, #96]	; (b1c0 <prvInitialiseNewTask+0x108>)
    b160:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b164:	3318      	adds	r3, #24
    b166:	0018      	movs	r0, r3
    b168:	4b15      	ldr	r3, [pc, #84]	; (b1c0 <prvInitialiseNewTask+0x108>)
    b16a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b16e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b170:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b172:	6a3b      	ldr	r3, [r7, #32]
    b174:	2205      	movs	r2, #5
    b176:	1ad2      	subs	r2, r2, r3
    b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b17a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b17e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b180:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b184:	2200      	movs	r2, #0
    b186:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b18a:	2250      	movs	r2, #80	; 0x50
    b18c:	2100      	movs	r1, #0
    b18e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    b190:	683a      	ldr	r2, [r7, #0]
    b192:	68f9      	ldr	r1, [r7, #12]
    b194:	693b      	ldr	r3, [r7, #16]
    b196:	0018      	movs	r0, r3
    b198:	4b0a      	ldr	r3, [pc, #40]	; (b1c4 <prvInitialiseNewTask+0x10c>)
    b19a:	4798      	blx	r3
    b19c:	0002      	movs	r2, r0
    b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b1a0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b1a4:	2b00      	cmp	r3, #0
    b1a6:	d002      	beq.n	b1ae <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b1aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b1ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    b1ae:	46c0      	nop			; (mov r8, r8)
    b1b0:	46bd      	mov	sp, r7
    b1b2:	b006      	add	sp, #24
    b1b4:	bd80      	pop	{r7, pc}
    b1b6:	46c0      	nop			; (mov r8, r8)
    b1b8:	000247b7 	.word	0x000247b7
    b1bc:	3fffffff 	.word	0x3fffffff
    b1c0:	00009165 	.word	0x00009165
    b1c4:	0000927d 	.word	0x0000927d

0000b1c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    b1c8:	b580      	push	{r7, lr}
    b1ca:	b082      	sub	sp, #8
    b1cc:	af00      	add	r7, sp, #0
    b1ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    b1d0:	4b60      	ldr	r3, [pc, #384]	; (b354 <prvAddNewTaskToReadyList+0x18c>)
    b1d2:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    b1d4:	4b60      	ldr	r3, [pc, #384]	; (b358 <prvAddNewTaskToReadyList+0x190>)
    b1d6:	681b      	ldr	r3, [r3, #0]
    b1d8:	1c5a      	adds	r2, r3, #1
    b1da:	4b5f      	ldr	r3, [pc, #380]	; (b358 <prvAddNewTaskToReadyList+0x190>)
    b1dc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    b1de:	4b5f      	ldr	r3, [pc, #380]	; (b35c <prvAddNewTaskToReadyList+0x194>)
    b1e0:	681b      	ldr	r3, [r3, #0]
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	d109      	bne.n	b1fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    b1e6:	4b5d      	ldr	r3, [pc, #372]	; (b35c <prvAddNewTaskToReadyList+0x194>)
    b1e8:	687a      	ldr	r2, [r7, #4]
    b1ea:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    b1ec:	4b5a      	ldr	r3, [pc, #360]	; (b358 <prvAddNewTaskToReadyList+0x190>)
    b1ee:	681b      	ldr	r3, [r3, #0]
    b1f0:	2b01      	cmp	r3, #1
    b1f2:	d110      	bne.n	b216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    b1f4:	4b5a      	ldr	r3, [pc, #360]	; (b360 <prvAddNewTaskToReadyList+0x198>)
    b1f6:	4798      	blx	r3
    b1f8:	e00d      	b.n	b216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    b1fa:	4b5a      	ldr	r3, [pc, #360]	; (b364 <prvAddNewTaskToReadyList+0x19c>)
    b1fc:	681b      	ldr	r3, [r3, #0]
    b1fe:	2b00      	cmp	r3, #0
    b200:	d109      	bne.n	b216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    b202:	4b56      	ldr	r3, [pc, #344]	; (b35c <prvAddNewTaskToReadyList+0x194>)
    b204:	681b      	ldr	r3, [r3, #0]
    b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b208:	687b      	ldr	r3, [r7, #4]
    b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b20c:	429a      	cmp	r2, r3
    b20e:	d802      	bhi.n	b216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    b210:	4b52      	ldr	r3, [pc, #328]	; (b35c <prvAddNewTaskToReadyList+0x194>)
    b212:	687a      	ldr	r2, [r7, #4]
    b214:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    b216:	4b54      	ldr	r3, [pc, #336]	; (b368 <prvAddNewTaskToReadyList+0x1a0>)
    b218:	681b      	ldr	r3, [r3, #0]
    b21a:	1c5a      	adds	r2, r3, #1
    b21c:	4b52      	ldr	r3, [pc, #328]	; (b368 <prvAddNewTaskToReadyList+0x1a0>)
    b21e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    b220:	4b51      	ldr	r3, [pc, #324]	; (b368 <prvAddNewTaskToReadyList+0x1a0>)
    b222:	681a      	ldr	r2, [r3, #0]
    b224:	687b      	ldr	r3, [r7, #4]
    b226:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
    b228:	687b      	ldr	r3, [r7, #4]
    b22a:	2b00      	cmp	r3, #0
    b22c:	d052      	beq.n	b2d4 <prvAddNewTaskToReadyList+0x10c>
    b22e:	2003      	movs	r0, #3
    b230:	4b4e      	ldr	r3, [pc, #312]	; (b36c <prvAddNewTaskToReadyList+0x1a4>)
    b232:	4798      	blx	r3
    b234:	0003      	movs	r3, r0
    b236:	b29a      	uxth	r2, r3
    b238:	687b      	ldr	r3, [r7, #4]
    b23a:	0011      	movs	r1, r2
    b23c:	0018      	movs	r0, r3
    b23e:	4b4c      	ldr	r3, [pc, #304]	; (b370 <prvAddNewTaskToReadyList+0x1a8>)
    b240:	4798      	blx	r3
    b242:	4b4c      	ldr	r3, [pc, #304]	; (b374 <prvAddNewTaskToReadyList+0x1ac>)
    b244:	881a      	ldrh	r2, [r3, #0]
    b246:	687b      	ldr	r3, [r7, #4]
    b248:	0011      	movs	r1, r2
    b24a:	0018      	movs	r0, r3
    b24c:	4b4a      	ldr	r3, [pc, #296]	; (b378 <prvAddNewTaskToReadyList+0x1b0>)
    b24e:	4798      	blx	r3
    b250:	687b      	ldr	r3, [r7, #4]
    b252:	0018      	movs	r0, r3
    b254:	4b49      	ldr	r3, [pc, #292]	; (b37c <prvAddNewTaskToReadyList+0x1b4>)
    b256:	4798      	blx	r3
    b258:	0003      	movs	r3, r0
    b25a:	b2d9      	uxtb	r1, r3
    b25c:	687b      	ldr	r3, [r7, #4]
    b25e:	3334      	adds	r3, #52	; 0x34
    b260:	001a      	movs	r2, r3
    b262:	2003      	movs	r0, #3
    b264:	4b46      	ldr	r3, [pc, #280]	; (b380 <prvAddNewTaskToReadyList+0x1b8>)
    b266:	4798      	blx	r3
    b268:	687b      	ldr	r3, [r7, #4]
    b26a:	0018      	movs	r0, r3
    b26c:	4b43      	ldr	r3, [pc, #268]	; (b37c <prvAddNewTaskToReadyList+0x1b4>)
    b26e:	4798      	blx	r3
    b270:	0003      	movs	r3, r0
    b272:	b2d9      	uxtb	r1, r3
    b274:	687b      	ldr	r3, [r7, #4]
    b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b278:	b2db      	uxtb	r3, r3
    b27a:	001a      	movs	r2, r3
    b27c:	2003      	movs	r0, #3
    b27e:	4b41      	ldr	r3, [pc, #260]	; (b384 <prvAddNewTaskToReadyList+0x1bc>)
    b280:	4798      	blx	r3
    b282:	4b41      	ldr	r3, [pc, #260]	; (b388 <prvAddNewTaskToReadyList+0x1c0>)
    b284:	4798      	blx	r3
    b286:	0003      	movs	r3, r0
    b288:	0018      	movs	r0, r3
    b28a:	4b40      	ldr	r3, [pc, #256]	; (b38c <prvAddNewTaskToReadyList+0x1c4>)
    b28c:	4798      	blx	r3
    b28e:	0003      	movs	r3, r0
    b290:	001a      	movs	r2, r3
    b292:	4b3f      	ldr	r3, [pc, #252]	; (b390 <prvAddNewTaskToReadyList+0x1c8>)
    b294:	881b      	ldrh	r3, [r3, #0]
    b296:	4013      	ands	r3, r2
    b298:	b29b      	uxth	r3, r3
    b29a:	2b00      	cmp	r3, #0
    b29c:	d016      	beq.n	b2cc <prvAddNewTaskToReadyList+0x104>
    b29e:	687b      	ldr	r3, [r7, #4]
    b2a0:	0018      	movs	r0, r3
    b2a2:	4b3a      	ldr	r3, [pc, #232]	; (b38c <prvAddNewTaskToReadyList+0x1c4>)
    b2a4:	4798      	blx	r3
    b2a6:	0003      	movs	r3, r0
    b2a8:	001a      	movs	r2, r3
    b2aa:	4b39      	ldr	r3, [pc, #228]	; (b390 <prvAddNewTaskToReadyList+0x1c8>)
    b2ac:	881b      	ldrh	r3, [r3, #0]
    b2ae:	4013      	ands	r3, r2
    b2b0:	b29b      	uxth	r3, r3
    b2b2:	2b00      	cmp	r3, #0
    b2b4:	d00a      	beq.n	b2cc <prvAddNewTaskToReadyList+0x104>
    b2b6:	687b      	ldr	r3, [r7, #4]
    b2b8:	0018      	movs	r0, r3
    b2ba:	4b30      	ldr	r3, [pc, #192]	; (b37c <prvAddNewTaskToReadyList+0x1b4>)
    b2bc:	4798      	blx	r3
    b2be:	0003      	movs	r3, r0
    b2c0:	b2db      	uxtb	r3, r3
    b2c2:	001a      	movs	r2, r3
    b2c4:	2103      	movs	r1, #3
    b2c6:	201b      	movs	r0, #27
    b2c8:	4b32      	ldr	r3, [pc, #200]	; (b394 <prvAddNewTaskToReadyList+0x1cc>)
    b2ca:	4798      	blx	r3
    b2cc:	687b      	ldr	r3, [r7, #4]
    b2ce:	0018      	movs	r0, r3
    b2d0:	4b31      	ldr	r3, [pc, #196]	; (b398 <prvAddNewTaskToReadyList+0x1d0>)
    b2d2:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
    b2d4:	687b      	ldr	r3, [r7, #4]
    b2d6:	0018      	movs	r0, r3
    b2d8:	4b2c      	ldr	r3, [pc, #176]	; (b38c <prvAddNewTaskToReadyList+0x1c4>)
    b2da:	4798      	blx	r3
    b2dc:	0003      	movs	r3, r0
    b2de:	001a      	movs	r2, r3
    b2e0:	4b2b      	ldr	r3, [pc, #172]	; (b390 <prvAddNewTaskToReadyList+0x1c8>)
    b2e2:	881b      	ldrh	r3, [r3, #0]
    b2e4:	4013      	ands	r3, r2
    b2e6:	b29b      	uxth	r3, r3
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d008      	beq.n	b2fe <prvAddNewTaskToReadyList+0x136>
    b2ec:	687b      	ldr	r3, [r7, #4]
    b2ee:	0018      	movs	r0, r3
    b2f0:	4b22      	ldr	r3, [pc, #136]	; (b37c <prvAddNewTaskToReadyList+0x1b4>)
    b2f2:	4798      	blx	r3
    b2f4:	0003      	movs	r3, r0
    b2f6:	b2db      	uxtb	r3, r3
    b2f8:	0018      	movs	r0, r3
    b2fa:	4b28      	ldr	r3, [pc, #160]	; (b39c <prvAddNewTaskToReadyList+0x1d4>)
    b2fc:	4798      	blx	r3
    b2fe:	687b      	ldr	r3, [r7, #4]
    b300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b302:	4b27      	ldr	r3, [pc, #156]	; (b3a0 <prvAddNewTaskToReadyList+0x1d8>)
    b304:	681b      	ldr	r3, [r3, #0]
    b306:	429a      	cmp	r2, r3
    b308:	d903      	bls.n	b312 <prvAddNewTaskToReadyList+0x14a>
    b30a:	687b      	ldr	r3, [r7, #4]
    b30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b30e:	4b24      	ldr	r3, [pc, #144]	; (b3a0 <prvAddNewTaskToReadyList+0x1d8>)
    b310:	601a      	str	r2, [r3, #0]
    b312:	687b      	ldr	r3, [r7, #4]
    b314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b316:	0013      	movs	r3, r2
    b318:	009b      	lsls	r3, r3, #2
    b31a:	189b      	adds	r3, r3, r2
    b31c:	009b      	lsls	r3, r3, #2
    b31e:	4a21      	ldr	r2, [pc, #132]	; (b3a4 <prvAddNewTaskToReadyList+0x1dc>)
    b320:	189a      	adds	r2, r3, r2
    b322:	687b      	ldr	r3, [r7, #4]
    b324:	3304      	adds	r3, #4
    b326:	0019      	movs	r1, r3
    b328:	0010      	movs	r0, r2
    b32a:	4b1f      	ldr	r3, [pc, #124]	; (b3a8 <prvAddNewTaskToReadyList+0x1e0>)
    b32c:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    b32e:	4b1f      	ldr	r3, [pc, #124]	; (b3ac <prvAddNewTaskToReadyList+0x1e4>)
    b330:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    b332:	4b0c      	ldr	r3, [pc, #48]	; (b364 <prvAddNewTaskToReadyList+0x19c>)
    b334:	681b      	ldr	r3, [r3, #0]
    b336:	2b00      	cmp	r3, #0
    b338:	d008      	beq.n	b34c <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    b33a:	4b08      	ldr	r3, [pc, #32]	; (b35c <prvAddNewTaskToReadyList+0x194>)
    b33c:	681b      	ldr	r3, [r3, #0]
    b33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b340:	687b      	ldr	r3, [r7, #4]
    b342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b344:	429a      	cmp	r2, r3
    b346:	d201      	bcs.n	b34c <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
    b348:	4b19      	ldr	r3, [pc, #100]	; (b3b0 <prvAddNewTaskToReadyList+0x1e8>)
    b34a:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    b34c:	46c0      	nop			; (mov r8, r8)
    b34e:	46bd      	mov	sp, r7
    b350:	b002      	add	sp, #8
    b352:	bd80      	pop	{r7, pc}
    b354:	000093b9 	.word	0x000093b9
    b358:	20003dec 	.word	0x20003dec
    b35c:	20003d14 	.word	0x20003d14
    b360:	0000bee9 	.word	0x0000bee9
    b364:	20003df8 	.word	0x20003df8
    b368:	20003e08 	.word	0x20003e08
    b36c:	00008931 	.word	0x00008931
    b370:	000073d5 	.word	0x000073d5
    b374:	20000106 	.word	0x20000106
    b378:	00007411 	.word	0x00007411
    b37c:	00007391 	.word	0x00007391
    b380:	00008b61 	.word	0x00008b61
    b384:	000082c5 	.word	0x000082c5
    b388:	0000764d 	.word	0x0000764d
    b38c:	000073b1 	.word	0x000073b1
    b390:	20000104 	.word	0x20000104
    b394:	00007da9 	.word	0x00007da9
    b398:	00007511 	.word	0x00007511
    b39c:	00007b61 	.word	0x00007b61
    b3a0:	20003df4 	.word	0x20003df4
    b3a4:	20003d18 	.word	0x20003d18
    b3a8:	0000917b 	.word	0x0000917b
    b3ac:	000093dd 	.word	0x000093dd
    b3b0:	000093a1 	.word	0x000093a1

0000b3b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    b3b4:	b580      	push	{r7, lr}
    b3b6:	b084      	sub	sp, #16
    b3b8:	af00      	add	r7, sp, #0
    b3ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    b3bc:	2300      	movs	r3, #0
    b3be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    b3c0:	687b      	ldr	r3, [r7, #4]
    b3c2:	2b00      	cmp	r3, #0
    b3c4:	d045      	beq.n	b452 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    b3c6:	4b27      	ldr	r3, [pc, #156]	; (b464 <vTaskDelay+0xb0>)
    b3c8:	681b      	ldr	r3, [r3, #0]
    b3ca:	2b00      	cmp	r3, #0
    b3cc:	d001      	beq.n	b3d2 <vTaskDelay+0x1e>
    b3ce:	b672      	cpsid	i
    b3d0:	e7fe      	b.n	b3d0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    b3d2:	4b25      	ldr	r3, [pc, #148]	; (b468 <vTaskDelay+0xb4>)
    b3d4:	4798      	blx	r3
			{
				traceTASK_DELAY();
    b3d6:	4b25      	ldr	r3, [pc, #148]	; (b46c <vTaskDelay+0xb8>)
    b3d8:	681b      	ldr	r3, [r3, #0]
    b3da:	0018      	movs	r0, r3
    b3dc:	4b24      	ldr	r3, [pc, #144]	; (b470 <vTaskDelay+0xbc>)
    b3de:	4798      	blx	r3
    b3e0:	0003      	movs	r3, r0
    b3e2:	001a      	movs	r2, r3
    b3e4:	4b23      	ldr	r3, [pc, #140]	; (b474 <vTaskDelay+0xc0>)
    b3e6:	881b      	ldrh	r3, [r3, #0]
    b3e8:	4013      	ands	r3, r2
    b3ea:	b29b      	uxth	r3, r3
    b3ec:	2b00      	cmp	r3, #0
    b3ee:	d00e      	beq.n	b40e <vTaskDelay+0x5a>
    b3f0:	687b      	ldr	r3, [r7, #4]
    b3f2:	0019      	movs	r1, r3
    b3f4:	2089      	movs	r0, #137	; 0x89
    b3f6:	4b20      	ldr	r3, [pc, #128]	; (b478 <vTaskDelay+0xc4>)
    b3f8:	4798      	blx	r3
    b3fa:	4b1c      	ldr	r3, [pc, #112]	; (b46c <vTaskDelay+0xb8>)
    b3fc:	681b      	ldr	r3, [r3, #0]
    b3fe:	0018      	movs	r0, r3
    b400:	4b1e      	ldr	r3, [pc, #120]	; (b47c <vTaskDelay+0xc8>)
    b402:	4798      	blx	r3
    b404:	0003      	movs	r3, r0
    b406:	b2db      	uxtb	r3, r3
    b408:	0018      	movs	r0, r3
    b40a:	4b1d      	ldr	r3, [pc, #116]	; (b480 <vTaskDelay+0xcc>)
    b40c:	4798      	blx	r3
    b40e:	4b1d      	ldr	r3, [pc, #116]	; (b484 <vTaskDelay+0xd0>)
    b410:	4798      	blx	r3
    b412:	0003      	movs	r3, r0
    b414:	0018      	movs	r0, r3
    b416:	4b16      	ldr	r3, [pc, #88]	; (b470 <vTaskDelay+0xbc>)
    b418:	4798      	blx	r3
    b41a:	0003      	movs	r3, r0
    b41c:	001a      	movs	r2, r3
    b41e:	4b15      	ldr	r3, [pc, #84]	; (b474 <vTaskDelay+0xc0>)
    b420:	881b      	ldrh	r3, [r3, #0]
    b422:	4013      	ands	r3, r2
    b424:	b29b      	uxth	r3, r3
    b426:	2b00      	cmp	r3, #0
    b428:	d00a      	beq.n	b440 <vTaskDelay+0x8c>
    b42a:	4b16      	ldr	r3, [pc, #88]	; (b484 <vTaskDelay+0xd0>)
    b42c:	4798      	blx	r3
    b42e:	0003      	movs	r3, r0
    b430:	0018      	movs	r0, r3
    b432:	4b12      	ldr	r3, [pc, #72]	; (b47c <vTaskDelay+0xc8>)
    b434:	4798      	blx	r3
    b436:	0003      	movs	r3, r0
    b438:	b2db      	uxtb	r3, r3
    b43a:	0018      	movs	r0, r3
    b43c:	4b10      	ldr	r3, [pc, #64]	; (b480 <vTaskDelay+0xcc>)
    b43e:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    b440:	687b      	ldr	r3, [r7, #4]
    b442:	2100      	movs	r1, #0
    b444:	0018      	movs	r0, r3
    b446:	4b10      	ldr	r3, [pc, #64]	; (b488 <vTaskDelay+0xd4>)
    b448:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    b44a:	4b10      	ldr	r3, [pc, #64]	; (b48c <vTaskDelay+0xd8>)
    b44c:	4798      	blx	r3
    b44e:	0003      	movs	r3, r0
    b450:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    b452:	68fb      	ldr	r3, [r7, #12]
    b454:	2b00      	cmp	r3, #0
    b456:	d101      	bne.n	b45c <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
    b458:	4b0d      	ldr	r3, [pc, #52]	; (b490 <vTaskDelay+0xdc>)
    b45a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    b45c:	46c0      	nop			; (mov r8, r8)
    b45e:	46bd      	mov	sp, r7
    b460:	b004      	add	sp, #16
    b462:	bd80      	pop	{r7, pc}
    b464:	20003e14 	.word	0x20003e14
    b468:	0000b675 	.word	0x0000b675
    b46c:	20003d14 	.word	0x20003d14
    b470:	000073b1 	.word	0x000073b1
    b474:	20000104 	.word	0x20000104
    b478:	000080b1 	.word	0x000080b1
    b47c:	00007391 	.word	0x00007391
    b480:	00008541 	.word	0x00008541
    b484:	0000764d 	.word	0x0000764d
    b488:	0000c5cd 	.word	0x0000c5cd
    b48c:	0000b68d 	.word	0x0000b68d
    b490:	000093a1 	.word	0x000093a1

0000b494 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    b494:	b580      	push	{r7, lr}
    b496:	b084      	sub	sp, #16
    b498:	af00      	add	r7, sp, #0
    b49a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    b49c:	4b42      	ldr	r3, [pc, #264]	; (b5a8 <vTaskSuspend+0x114>)
    b49e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    b4a0:	687b      	ldr	r3, [r7, #4]
    b4a2:	2b00      	cmp	r3, #0
    b4a4:	d102      	bne.n	b4ac <vTaskSuspend+0x18>
    b4a6:	4b41      	ldr	r3, [pc, #260]	; (b5ac <vTaskSuspend+0x118>)
    b4a8:	681b      	ldr	r3, [r3, #0]
    b4aa:	e000      	b.n	b4ae <vTaskSuspend+0x1a>
    b4ac:	687b      	ldr	r3, [r7, #4]
    b4ae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
    b4b0:	4b3f      	ldr	r3, [pc, #252]	; (b5b0 <vTaskSuspend+0x11c>)
    b4b2:	4798      	blx	r3
    b4b4:	0003      	movs	r3, r0
    b4b6:	0018      	movs	r0, r3
    b4b8:	4b3e      	ldr	r3, [pc, #248]	; (b5b4 <vTaskSuspend+0x120>)
    b4ba:	4798      	blx	r3
    b4bc:	0003      	movs	r3, r0
    b4be:	001a      	movs	r2, r3
    b4c0:	4b3d      	ldr	r3, [pc, #244]	; (b5b8 <vTaskSuspend+0x124>)
    b4c2:	881b      	ldrh	r3, [r3, #0]
    b4c4:	4013      	ands	r3, r2
    b4c6:	b29b      	uxth	r3, r3
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d016      	beq.n	b4fa <vTaskSuspend+0x66>
    b4cc:	68fb      	ldr	r3, [r7, #12]
    b4ce:	0018      	movs	r0, r3
    b4d0:	4b38      	ldr	r3, [pc, #224]	; (b5b4 <vTaskSuspend+0x120>)
    b4d2:	4798      	blx	r3
    b4d4:	0003      	movs	r3, r0
    b4d6:	001a      	movs	r2, r3
    b4d8:	4b37      	ldr	r3, [pc, #220]	; (b5b8 <vTaskSuspend+0x124>)
    b4da:	881b      	ldrh	r3, [r3, #0]
    b4dc:	4013      	ands	r3, r2
    b4de:	b29b      	uxth	r3, r3
    b4e0:	2b00      	cmp	r3, #0
    b4e2:	d00a      	beq.n	b4fa <vTaskSuspend+0x66>
    b4e4:	68fb      	ldr	r3, [r7, #12]
    b4e6:	0018      	movs	r0, r3
    b4e8:	4b34      	ldr	r3, [pc, #208]	; (b5bc <vTaskSuspend+0x128>)
    b4ea:	4798      	blx	r3
    b4ec:	0003      	movs	r3, r0
    b4ee:	b2db      	uxtb	r3, r3
    b4f0:	001a      	movs	r2, r3
    b4f2:	2103      	movs	r1, #3
    b4f4:	208a      	movs	r0, #138	; 0x8a
    b4f6:	4b32      	ldr	r3, [pc, #200]	; (b5c0 <vTaskSuspend+0x12c>)
    b4f8:	4798      	blx	r3
    b4fa:	68fb      	ldr	r3, [r7, #12]
    b4fc:	0018      	movs	r0, r3
    b4fe:	4b2f      	ldr	r3, [pc, #188]	; (b5bc <vTaskSuspend+0x128>)
    b500:	4798      	blx	r3
    b502:	0003      	movs	r3, r0
    b504:	b2db      	uxtb	r3, r3
    b506:	0018      	movs	r0, r3
    b508:	4b2e      	ldr	r3, [pc, #184]	; (b5c4 <vTaskSuspend+0x130>)
    b50a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    b50c:	68fb      	ldr	r3, [r7, #12]
    b50e:	3304      	adds	r3, #4
    b510:	0018      	movs	r0, r3
    b512:	4b2d      	ldr	r3, [pc, #180]	; (b5c8 <vTaskSuspend+0x134>)
    b514:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    b516:	68fb      	ldr	r3, [r7, #12]
    b518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b51a:	2b00      	cmp	r3, #0
    b51c:	d004      	beq.n	b528 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    b51e:	68fb      	ldr	r3, [r7, #12]
    b520:	3318      	adds	r3, #24
    b522:	0018      	movs	r0, r3
    b524:	4b28      	ldr	r3, [pc, #160]	; (b5c8 <vTaskSuspend+0x134>)
    b526:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    b528:	68fb      	ldr	r3, [r7, #12]
    b52a:	1d1a      	adds	r2, r3, #4
    b52c:	4b27      	ldr	r3, [pc, #156]	; (b5cc <vTaskSuspend+0x138>)
    b52e:	0011      	movs	r1, r2
    b530:	0018      	movs	r0, r3
    b532:	4b27      	ldr	r3, [pc, #156]	; (b5d0 <vTaskSuspend+0x13c>)
    b534:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    b536:	68fb      	ldr	r3, [r7, #12]
    b538:	2250      	movs	r2, #80	; 0x50
    b53a:	5c9b      	ldrb	r3, [r3, r2]
    b53c:	b2db      	uxtb	r3, r3
    b53e:	2b01      	cmp	r3, #1
    b540:	d103      	bne.n	b54a <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    b542:	68fb      	ldr	r3, [r7, #12]
    b544:	2250      	movs	r2, #80	; 0x50
    b546:	2100      	movs	r1, #0
    b548:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    b54a:	4b22      	ldr	r3, [pc, #136]	; (b5d4 <vTaskSuspend+0x140>)
    b54c:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    b54e:	4b22      	ldr	r3, [pc, #136]	; (b5d8 <vTaskSuspend+0x144>)
    b550:	681b      	ldr	r3, [r3, #0]
    b552:	2b00      	cmp	r3, #0
    b554:	d005      	beq.n	b562 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    b556:	4b14      	ldr	r3, [pc, #80]	; (b5a8 <vTaskSuspend+0x114>)
    b558:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    b55a:	4b20      	ldr	r3, [pc, #128]	; (b5dc <vTaskSuspend+0x148>)
    b55c:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    b55e:	4b1d      	ldr	r3, [pc, #116]	; (b5d4 <vTaskSuspend+0x140>)
    b560:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    b562:	4b12      	ldr	r3, [pc, #72]	; (b5ac <vTaskSuspend+0x118>)
    b564:	681b      	ldr	r3, [r3, #0]
    b566:	68fa      	ldr	r2, [r7, #12]
    b568:	429a      	cmp	r2, r3
    b56a:	d118      	bne.n	b59e <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
    b56c:	4b1a      	ldr	r3, [pc, #104]	; (b5d8 <vTaskSuspend+0x144>)
    b56e:	681b      	ldr	r3, [r3, #0]
    b570:	2b00      	cmp	r3, #0
    b572:	d008      	beq.n	b586 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    b574:	4b1a      	ldr	r3, [pc, #104]	; (b5e0 <vTaskSuspend+0x14c>)
    b576:	681b      	ldr	r3, [r3, #0]
    b578:	2b00      	cmp	r3, #0
    b57a:	d001      	beq.n	b580 <vTaskSuspend+0xec>
    b57c:	b672      	cpsid	i
    b57e:	e7fe      	b.n	b57e <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
    b580:	4b18      	ldr	r3, [pc, #96]	; (b5e4 <vTaskSuspend+0x150>)
    b582:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    b584:	e00b      	b.n	b59e <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    b586:	4b11      	ldr	r3, [pc, #68]	; (b5cc <vTaskSuspend+0x138>)
    b588:	681a      	ldr	r2, [r3, #0]
    b58a:	4b17      	ldr	r3, [pc, #92]	; (b5e8 <vTaskSuspend+0x154>)
    b58c:	681b      	ldr	r3, [r3, #0]
    b58e:	429a      	cmp	r2, r3
    b590:	d103      	bne.n	b59a <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
    b592:	4b06      	ldr	r3, [pc, #24]	; (b5ac <vTaskSuspend+0x118>)
    b594:	2200      	movs	r2, #0
    b596:	601a      	str	r2, [r3, #0]
	}
    b598:	e001      	b.n	b59e <vTaskSuspend+0x10a>
					vTaskSwitchContext();
    b59a:	4b14      	ldr	r3, [pc, #80]	; (b5ec <vTaskSuspend+0x158>)
    b59c:	4798      	blx	r3
	}
    b59e:	46c0      	nop			; (mov r8, r8)
    b5a0:	46bd      	mov	sp, r7
    b5a2:	b004      	add	sp, #16
    b5a4:	bd80      	pop	{r7, pc}
    b5a6:	46c0      	nop			; (mov r8, r8)
    b5a8:	000093b9 	.word	0x000093b9
    b5ac:	20003d14 	.word	0x20003d14
    b5b0:	0000764d 	.word	0x0000764d
    b5b4:	000073b1 	.word	0x000073b1
    b5b8:	20000104 	.word	0x20000104
    b5bc:	00007391 	.word	0x00007391
    b5c0:	00007da9 	.word	0x00007da9
    b5c4:	00008541 	.word	0x00008541
    b5c8:	0000922b 	.word	0x0000922b
    b5cc:	20003dd8 	.word	0x20003dd8
    b5d0:	0000917b 	.word	0x0000917b
    b5d4:	000093dd 	.word	0x000093dd
    b5d8:	20003df8 	.word	0x20003df8
    b5dc:	0000c079 	.word	0x0000c079
    b5e0:	20003e14 	.word	0x20003e14
    b5e4:	000093a1 	.word	0x000093a1
    b5e8:	20003dec 	.word	0x20003dec
    b5ec:	0000ba09 	.word	0x0000ba09

0000b5f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    b5f0:	b590      	push	{r4, r7, lr}
    b5f2:	b085      	sub	sp, #20
    b5f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    b5f6:	4916      	ldr	r1, [pc, #88]	; (b650 <vTaskStartScheduler+0x60>)
    b5f8:	4816      	ldr	r0, [pc, #88]	; (b654 <vTaskStartScheduler+0x64>)
    b5fa:	4b17      	ldr	r3, [pc, #92]	; (b658 <vTaskStartScheduler+0x68>)
    b5fc:	9301      	str	r3, [sp, #4]
    b5fe:	2300      	movs	r3, #0
    b600:	9300      	str	r3, [sp, #0]
    b602:	2300      	movs	r3, #0
    b604:	2264      	movs	r2, #100	; 0x64
    b606:	4c15      	ldr	r4, [pc, #84]	; (b65c <vTaskStartScheduler+0x6c>)
    b608:	47a0      	blx	r4
    b60a:	0003      	movs	r3, r0
    b60c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    b60e:	687b      	ldr	r3, [r7, #4]
    b610:	2b01      	cmp	r3, #1
    b612:	d103      	bne.n	b61c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    b614:	4b12      	ldr	r3, [pc, #72]	; (b660 <vTaskStartScheduler+0x70>)
    b616:	4798      	blx	r3
    b618:	0003      	movs	r3, r0
    b61a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	2b01      	cmp	r3, #1
    b620:	d10d      	bne.n	b63e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    b622:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    b624:	4b0f      	ldr	r3, [pc, #60]	; (b664 <vTaskStartScheduler+0x74>)
    b626:	2201      	movs	r2, #1
    b628:	4252      	negs	r2, r2
    b62a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    b62c:	4b0e      	ldr	r3, [pc, #56]	; (b668 <vTaskStartScheduler+0x78>)
    b62e:	2201      	movs	r2, #1
    b630:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    b632:	4b0e      	ldr	r3, [pc, #56]	; (b66c <vTaskStartScheduler+0x7c>)
    b634:	2200      	movs	r2, #0
    b636:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    b638:	4b0d      	ldr	r3, [pc, #52]	; (b670 <vTaskStartScheduler+0x80>)
    b63a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    b63c:	e004      	b.n	b648 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    b63e:	687b      	ldr	r3, [r7, #4]
    b640:	3301      	adds	r3, #1
    b642:	d101      	bne.n	b648 <vTaskStartScheduler+0x58>
    b644:	b672      	cpsid	i
    b646:	e7fe      	b.n	b646 <vTaskStartScheduler+0x56>
}
    b648:	46c0      	nop			; (mov r8, r8)
    b64a:	46bd      	mov	sp, r7
    b64c:	b003      	add	sp, #12
    b64e:	bd90      	pop	{r4, r7, pc}
    b650:	000280c0 	.word	0x000280c0
    b654:	0000bec1 	.word	0x0000bec1
    b658:	20003e10 	.word	0x20003e10
    b65c:	0000b019 	.word	0x0000b019
    b660:	0000c681 	.word	0x0000c681
    b664:	20003e0c 	.word	0x20003e0c
    b668:	20003df8 	.word	0x20003df8
    b66c:	20003df0 	.word	0x20003df0
    b670:	00009349 	.word	0x00009349

0000b674 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    b674:	b580      	push	{r7, lr}
    b676:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    b678:	4b03      	ldr	r3, [pc, #12]	; (b688 <vTaskSuspendAll+0x14>)
    b67a:	681b      	ldr	r3, [r3, #0]
    b67c:	1c5a      	adds	r2, r3, #1
    b67e:	4b02      	ldr	r3, [pc, #8]	; (b688 <vTaskSuspendAll+0x14>)
    b680:	601a      	str	r2, [r3, #0]
}
    b682:	46c0      	nop			; (mov r8, r8)
    b684:	46bd      	mov	sp, r7
    b686:	bd80      	pop	{r7, pc}
    b688:	20003e14 	.word	0x20003e14

0000b68c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    b68c:	b580      	push	{r7, lr}
    b68e:	b084      	sub	sp, #16
    b690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    b692:	2300      	movs	r3, #0
    b694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    b696:	2300      	movs	r3, #0
    b698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    b69a:	4b45      	ldr	r3, [pc, #276]	; (b7b0 <xTaskResumeAll+0x124>)
    b69c:	681b      	ldr	r3, [r3, #0]
    b69e:	2b00      	cmp	r3, #0
    b6a0:	d101      	bne.n	b6a6 <xTaskResumeAll+0x1a>
    b6a2:	b672      	cpsid	i
    b6a4:	e7fe      	b.n	b6a4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    b6a6:	4b43      	ldr	r3, [pc, #268]	; (b7b4 <xTaskResumeAll+0x128>)
    b6a8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    b6aa:	4b41      	ldr	r3, [pc, #260]	; (b7b0 <xTaskResumeAll+0x124>)
    b6ac:	681b      	ldr	r3, [r3, #0]
    b6ae:	1e5a      	subs	r2, r3, #1
    b6b0:	4b3f      	ldr	r3, [pc, #252]	; (b7b0 <xTaskResumeAll+0x124>)
    b6b2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b6b4:	4b3e      	ldr	r3, [pc, #248]	; (b7b0 <xTaskResumeAll+0x124>)
    b6b6:	681b      	ldr	r3, [r3, #0]
    b6b8:	2b00      	cmp	r3, #0
    b6ba:	d000      	beq.n	b6be <xTaskResumeAll+0x32>
    b6bc:	e071      	b.n	b7a2 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    b6be:	4b3e      	ldr	r3, [pc, #248]	; (b7b8 <xTaskResumeAll+0x12c>)
    b6c0:	681b      	ldr	r3, [r3, #0]
    b6c2:	2b00      	cmp	r3, #0
    b6c4:	d100      	bne.n	b6c8 <xTaskResumeAll+0x3c>
    b6c6:	e06c      	b.n	b7a2 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    b6c8:	e044      	b.n	b754 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    b6ca:	4b3c      	ldr	r3, [pc, #240]	; (b7bc <xTaskResumeAll+0x130>)
    b6cc:	68db      	ldr	r3, [r3, #12]
    b6ce:	68db      	ldr	r3, [r3, #12]
    b6d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    b6d2:	68fb      	ldr	r3, [r7, #12]
    b6d4:	3318      	adds	r3, #24
    b6d6:	0018      	movs	r0, r3
    b6d8:	4b39      	ldr	r3, [pc, #228]	; (b7c0 <xTaskResumeAll+0x134>)
    b6da:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b6dc:	68fb      	ldr	r3, [r7, #12]
    b6de:	3304      	adds	r3, #4
    b6e0:	0018      	movs	r0, r3
    b6e2:	4b37      	ldr	r3, [pc, #220]	; (b7c0 <xTaskResumeAll+0x134>)
    b6e4:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    b6e6:	68fb      	ldr	r3, [r7, #12]
    b6e8:	0018      	movs	r0, r3
    b6ea:	4b36      	ldr	r3, [pc, #216]	; (b7c4 <xTaskResumeAll+0x138>)
    b6ec:	4798      	blx	r3
    b6ee:	0003      	movs	r3, r0
    b6f0:	001a      	movs	r2, r3
    b6f2:	4b35      	ldr	r3, [pc, #212]	; (b7c8 <xTaskResumeAll+0x13c>)
    b6f4:	881b      	ldrh	r3, [r3, #0]
    b6f6:	4013      	ands	r3, r2
    b6f8:	b29b      	uxth	r3, r3
    b6fa:	2b00      	cmp	r3, #0
    b6fc:	d008      	beq.n	b710 <xTaskResumeAll+0x84>
    b6fe:	68fb      	ldr	r3, [r7, #12]
    b700:	0018      	movs	r0, r3
    b702:	4b32      	ldr	r3, [pc, #200]	; (b7cc <xTaskResumeAll+0x140>)
    b704:	4798      	blx	r3
    b706:	0003      	movs	r3, r0
    b708:	b2db      	uxtb	r3, r3
    b70a:	0018      	movs	r0, r3
    b70c:	4b30      	ldr	r3, [pc, #192]	; (b7d0 <xTaskResumeAll+0x144>)
    b70e:	4798      	blx	r3
    b710:	68fb      	ldr	r3, [r7, #12]
    b712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b714:	4b2f      	ldr	r3, [pc, #188]	; (b7d4 <xTaskResumeAll+0x148>)
    b716:	681b      	ldr	r3, [r3, #0]
    b718:	429a      	cmp	r2, r3
    b71a:	d903      	bls.n	b724 <xTaskResumeAll+0x98>
    b71c:	68fb      	ldr	r3, [r7, #12]
    b71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b720:	4b2c      	ldr	r3, [pc, #176]	; (b7d4 <xTaskResumeAll+0x148>)
    b722:	601a      	str	r2, [r3, #0]
    b724:	68fb      	ldr	r3, [r7, #12]
    b726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b728:	0013      	movs	r3, r2
    b72a:	009b      	lsls	r3, r3, #2
    b72c:	189b      	adds	r3, r3, r2
    b72e:	009b      	lsls	r3, r3, #2
    b730:	4a29      	ldr	r2, [pc, #164]	; (b7d8 <xTaskResumeAll+0x14c>)
    b732:	189a      	adds	r2, r3, r2
    b734:	68fb      	ldr	r3, [r7, #12]
    b736:	3304      	adds	r3, #4
    b738:	0019      	movs	r1, r3
    b73a:	0010      	movs	r0, r2
    b73c:	4b27      	ldr	r3, [pc, #156]	; (b7dc <xTaskResumeAll+0x150>)
    b73e:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    b740:	68fb      	ldr	r3, [r7, #12]
    b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b744:	4b26      	ldr	r3, [pc, #152]	; (b7e0 <xTaskResumeAll+0x154>)
    b746:	681b      	ldr	r3, [r3, #0]
    b748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b74a:	429a      	cmp	r2, r3
    b74c:	d302      	bcc.n	b754 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
    b74e:	4b25      	ldr	r3, [pc, #148]	; (b7e4 <xTaskResumeAll+0x158>)
    b750:	2201      	movs	r2, #1
    b752:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    b754:	4b19      	ldr	r3, [pc, #100]	; (b7bc <xTaskResumeAll+0x130>)
    b756:	681b      	ldr	r3, [r3, #0]
    b758:	2b00      	cmp	r3, #0
    b75a:	d1b6      	bne.n	b6ca <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    b75c:	68fb      	ldr	r3, [r7, #12]
    b75e:	2b00      	cmp	r3, #0
    b760:	d001      	beq.n	b766 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    b762:	4b21      	ldr	r3, [pc, #132]	; (b7e8 <xTaskResumeAll+0x15c>)
    b764:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    b766:	4b21      	ldr	r3, [pc, #132]	; (b7ec <xTaskResumeAll+0x160>)
    b768:	681b      	ldr	r3, [r3, #0]
    b76a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    b76c:	687b      	ldr	r3, [r7, #4]
    b76e:	2b00      	cmp	r3, #0
    b770:	d00f      	beq.n	b792 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    b772:	4b1f      	ldr	r3, [pc, #124]	; (b7f0 <xTaskResumeAll+0x164>)
    b774:	4798      	blx	r3
    b776:	1e03      	subs	r3, r0, #0
    b778:	d002      	beq.n	b780 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
    b77a:	4b1a      	ldr	r3, [pc, #104]	; (b7e4 <xTaskResumeAll+0x158>)
    b77c:	2201      	movs	r2, #1
    b77e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    b780:	687b      	ldr	r3, [r7, #4]
    b782:	3b01      	subs	r3, #1
    b784:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    b786:	687b      	ldr	r3, [r7, #4]
    b788:	2b00      	cmp	r3, #0
    b78a:	d1f2      	bne.n	b772 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
    b78c:	4b17      	ldr	r3, [pc, #92]	; (b7ec <xTaskResumeAll+0x160>)
    b78e:	2200      	movs	r2, #0
    b790:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    b792:	4b14      	ldr	r3, [pc, #80]	; (b7e4 <xTaskResumeAll+0x158>)
    b794:	681b      	ldr	r3, [r3, #0]
    b796:	2b00      	cmp	r3, #0
    b798:	d003      	beq.n	b7a2 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    b79a:	2301      	movs	r3, #1
    b79c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    b79e:	4b15      	ldr	r3, [pc, #84]	; (b7f4 <xTaskResumeAll+0x168>)
    b7a0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    b7a2:	4b15      	ldr	r3, [pc, #84]	; (b7f8 <xTaskResumeAll+0x16c>)
    b7a4:	4798      	blx	r3

	return xAlreadyYielded;
    b7a6:	68bb      	ldr	r3, [r7, #8]
}
    b7a8:	0018      	movs	r0, r3
    b7aa:	46bd      	mov	sp, r7
    b7ac:	b004      	add	sp, #16
    b7ae:	bd80      	pop	{r7, pc}
    b7b0:	20003e14 	.word	0x20003e14
    b7b4:	000093b9 	.word	0x000093b9
    b7b8:	20003dec 	.word	0x20003dec
    b7bc:	20003dac 	.word	0x20003dac
    b7c0:	0000922b 	.word	0x0000922b
    b7c4:	000073b1 	.word	0x000073b1
    b7c8:	20000104 	.word	0x20000104
    b7cc:	00007391 	.word	0x00007391
    b7d0:	00007b61 	.word	0x00007b61
    b7d4:	20003df4 	.word	0x20003df4
    b7d8:	20003d18 	.word	0x20003d18
    b7dc:	0000917b 	.word	0x0000917b
    b7e0:	20003d14 	.word	0x20003d14
    b7e4:	20003e00 	.word	0x20003e00
    b7e8:	0000c079 	.word	0x0000c079
    b7ec:	20003dfc 	.word	0x20003dfc
    b7f0:	0000b819 	.word	0x0000b819
    b7f4:	000093a1 	.word	0x000093a1
    b7f8:	000093dd 	.word	0x000093dd

0000b7fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    b7fc:	b580      	push	{r7, lr}
    b7fe:	b082      	sub	sp, #8
    b800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    b802:	4b04      	ldr	r3, [pc, #16]	; (b814 <xTaskGetTickCount+0x18>)
    b804:	681b      	ldr	r3, [r3, #0]
    b806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    b808:	687b      	ldr	r3, [r7, #4]
}
    b80a:	0018      	movs	r0, r3
    b80c:	46bd      	mov	sp, r7
    b80e:	b002      	add	sp, #8
    b810:	bd80      	pop	{r7, pc}
    b812:	46c0      	nop			; (mov r8, r8)
    b814:	20003df0 	.word	0x20003df0

0000b818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    b818:	b580      	push	{r7, lr}
    b81a:	b086      	sub	sp, #24
    b81c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    b81e:	2300      	movs	r3, #0
    b820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    b822:	4b64      	ldr	r3, [pc, #400]	; (b9b4 <xTaskIncrementTick+0x19c>)
    b824:	681b      	ldr	r3, [r3, #0]
    b826:	2b01      	cmp	r3, #1
    b828:	d003      	beq.n	b832 <xTaskIncrementTick+0x1a>
    b82a:	4b63      	ldr	r3, [pc, #396]	; (b9b8 <xTaskIncrementTick+0x1a0>)
    b82c:	681b      	ldr	r3, [r3, #0]
    b82e:	2b00      	cmp	r3, #0
    b830:	d107      	bne.n	b842 <xTaskIncrementTick+0x2a>
    b832:	4b62      	ldr	r3, [pc, #392]	; (b9bc <xTaskIncrementTick+0x1a4>)
    b834:	681b      	ldr	r3, [r3, #0]
    b836:	1c5a      	adds	r2, r3, #1
    b838:	4b60      	ldr	r3, [pc, #384]	; (b9bc <xTaskIncrementTick+0x1a4>)
    b83a:	601a      	str	r2, [r3, #0]
    b83c:	2000      	movs	r0, #0
    b83e:	4b60      	ldr	r3, [pc, #384]	; (b9c0 <xTaskIncrementTick+0x1a8>)
    b840:	4798      	blx	r3
    b842:	4b5c      	ldr	r3, [pc, #368]	; (b9b4 <xTaskIncrementTick+0x19c>)
    b844:	681b      	ldr	r3, [r3, #0]
    b846:	2b00      	cmp	r3, #0
    b848:	d106      	bne.n	b858 <xTaskIncrementTick+0x40>
    b84a:	4b5e      	ldr	r3, [pc, #376]	; (b9c4 <xTaskIncrementTick+0x1ac>)
    b84c:	681b      	ldr	r3, [r3, #0]
    b84e:	3301      	adds	r3, #1
    b850:	0019      	movs	r1, r3
    b852:	2003      	movs	r0, #3
    b854:	4b5c      	ldr	r3, [pc, #368]	; (b9c8 <xTaskIncrementTick+0x1b0>)
    b856:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b858:	4b56      	ldr	r3, [pc, #344]	; (b9b4 <xTaskIncrementTick+0x19c>)
    b85a:	681b      	ldr	r3, [r3, #0]
    b85c:	2b00      	cmp	r3, #0
    b85e:	d000      	beq.n	b862 <xTaskIncrementTick+0x4a>
    b860:	e098      	b.n	b994 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    b862:	4b58      	ldr	r3, [pc, #352]	; (b9c4 <xTaskIncrementTick+0x1ac>)
    b864:	681b      	ldr	r3, [r3, #0]
    b866:	3301      	adds	r3, #1
    b868:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    b86a:	4b56      	ldr	r3, [pc, #344]	; (b9c4 <xTaskIncrementTick+0x1ac>)
    b86c:	693a      	ldr	r2, [r7, #16]
    b86e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    b870:	693b      	ldr	r3, [r7, #16]
    b872:	2b00      	cmp	r3, #0
    b874:	d117      	bne.n	b8a6 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
    b876:	4b55      	ldr	r3, [pc, #340]	; (b9cc <xTaskIncrementTick+0x1b4>)
    b878:	681b      	ldr	r3, [r3, #0]
    b87a:	681b      	ldr	r3, [r3, #0]
    b87c:	2b00      	cmp	r3, #0
    b87e:	d001      	beq.n	b884 <xTaskIncrementTick+0x6c>
    b880:	b672      	cpsid	i
    b882:	e7fe      	b.n	b882 <xTaskIncrementTick+0x6a>
    b884:	4b51      	ldr	r3, [pc, #324]	; (b9cc <xTaskIncrementTick+0x1b4>)
    b886:	681b      	ldr	r3, [r3, #0]
    b888:	60fb      	str	r3, [r7, #12]
    b88a:	4b51      	ldr	r3, [pc, #324]	; (b9d0 <xTaskIncrementTick+0x1b8>)
    b88c:	681a      	ldr	r2, [r3, #0]
    b88e:	4b4f      	ldr	r3, [pc, #316]	; (b9cc <xTaskIncrementTick+0x1b4>)
    b890:	601a      	str	r2, [r3, #0]
    b892:	4b4f      	ldr	r3, [pc, #316]	; (b9d0 <xTaskIncrementTick+0x1b8>)
    b894:	68fa      	ldr	r2, [r7, #12]
    b896:	601a      	str	r2, [r3, #0]
    b898:	4b4e      	ldr	r3, [pc, #312]	; (b9d4 <xTaskIncrementTick+0x1bc>)
    b89a:	681b      	ldr	r3, [r3, #0]
    b89c:	1c5a      	adds	r2, r3, #1
    b89e:	4b4d      	ldr	r3, [pc, #308]	; (b9d4 <xTaskIncrementTick+0x1bc>)
    b8a0:	601a      	str	r2, [r3, #0]
    b8a2:	4b4d      	ldr	r3, [pc, #308]	; (b9d8 <xTaskIncrementTick+0x1c0>)
    b8a4:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    b8a6:	4b4d      	ldr	r3, [pc, #308]	; (b9dc <xTaskIncrementTick+0x1c4>)
    b8a8:	681b      	ldr	r3, [r3, #0]
    b8aa:	693a      	ldr	r2, [r7, #16]
    b8ac:	429a      	cmp	r2, r3
    b8ae:	d363      	bcc.n	b978 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    b8b0:	4b46      	ldr	r3, [pc, #280]	; (b9cc <xTaskIncrementTick+0x1b4>)
    b8b2:	681b      	ldr	r3, [r3, #0]
    b8b4:	681b      	ldr	r3, [r3, #0]
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d101      	bne.n	b8be <xTaskIncrementTick+0xa6>
    b8ba:	2301      	movs	r3, #1
    b8bc:	e000      	b.n	b8c0 <xTaskIncrementTick+0xa8>
    b8be:	2300      	movs	r3, #0
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d004      	beq.n	b8ce <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b8c4:	4b45      	ldr	r3, [pc, #276]	; (b9dc <xTaskIncrementTick+0x1c4>)
    b8c6:	2201      	movs	r2, #1
    b8c8:	4252      	negs	r2, r2
    b8ca:	601a      	str	r2, [r3, #0]
					break;
    b8cc:	e054      	b.n	b978 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    b8ce:	4b3f      	ldr	r3, [pc, #252]	; (b9cc <xTaskIncrementTick+0x1b4>)
    b8d0:	681b      	ldr	r3, [r3, #0]
    b8d2:	68db      	ldr	r3, [r3, #12]
    b8d4:	68db      	ldr	r3, [r3, #12]
    b8d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    b8d8:	68bb      	ldr	r3, [r7, #8]
    b8da:	685b      	ldr	r3, [r3, #4]
    b8dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    b8de:	693a      	ldr	r2, [r7, #16]
    b8e0:	687b      	ldr	r3, [r7, #4]
    b8e2:	429a      	cmp	r2, r3
    b8e4:	d203      	bcs.n	b8ee <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    b8e6:	4b3d      	ldr	r3, [pc, #244]	; (b9dc <xTaskIncrementTick+0x1c4>)
    b8e8:	687a      	ldr	r2, [r7, #4]
    b8ea:	601a      	str	r2, [r3, #0]
						break;
    b8ec:	e044      	b.n	b978 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b8ee:	68bb      	ldr	r3, [r7, #8]
    b8f0:	3304      	adds	r3, #4
    b8f2:	0018      	movs	r0, r3
    b8f4:	4b3a      	ldr	r3, [pc, #232]	; (b9e0 <xTaskIncrementTick+0x1c8>)
    b8f6:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    b8f8:	68bb      	ldr	r3, [r7, #8]
    b8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8fc:	2b00      	cmp	r3, #0
    b8fe:	d004      	beq.n	b90a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    b900:	68bb      	ldr	r3, [r7, #8]
    b902:	3318      	adds	r3, #24
    b904:	0018      	movs	r0, r3
    b906:	4b36      	ldr	r3, [pc, #216]	; (b9e0 <xTaskIncrementTick+0x1c8>)
    b908:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    b90a:	68bb      	ldr	r3, [r7, #8]
    b90c:	0018      	movs	r0, r3
    b90e:	4b35      	ldr	r3, [pc, #212]	; (b9e4 <xTaskIncrementTick+0x1cc>)
    b910:	4798      	blx	r3
    b912:	0003      	movs	r3, r0
    b914:	001a      	movs	r2, r3
    b916:	4b34      	ldr	r3, [pc, #208]	; (b9e8 <xTaskIncrementTick+0x1d0>)
    b918:	881b      	ldrh	r3, [r3, #0]
    b91a:	4013      	ands	r3, r2
    b91c:	b29b      	uxth	r3, r3
    b91e:	2b00      	cmp	r3, #0
    b920:	d008      	beq.n	b934 <xTaskIncrementTick+0x11c>
    b922:	68bb      	ldr	r3, [r7, #8]
    b924:	0018      	movs	r0, r3
    b926:	4b31      	ldr	r3, [pc, #196]	; (b9ec <xTaskIncrementTick+0x1d4>)
    b928:	4798      	blx	r3
    b92a:	0003      	movs	r3, r0
    b92c:	b2db      	uxtb	r3, r3
    b92e:	0018      	movs	r0, r3
    b930:	4b2f      	ldr	r3, [pc, #188]	; (b9f0 <xTaskIncrementTick+0x1d8>)
    b932:	4798      	blx	r3
    b934:	68bb      	ldr	r3, [r7, #8]
    b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b938:	4b2e      	ldr	r3, [pc, #184]	; (b9f4 <xTaskIncrementTick+0x1dc>)
    b93a:	681b      	ldr	r3, [r3, #0]
    b93c:	429a      	cmp	r2, r3
    b93e:	d903      	bls.n	b948 <xTaskIncrementTick+0x130>
    b940:	68bb      	ldr	r3, [r7, #8]
    b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b944:	4b2b      	ldr	r3, [pc, #172]	; (b9f4 <xTaskIncrementTick+0x1dc>)
    b946:	601a      	str	r2, [r3, #0]
    b948:	68bb      	ldr	r3, [r7, #8]
    b94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b94c:	0013      	movs	r3, r2
    b94e:	009b      	lsls	r3, r3, #2
    b950:	189b      	adds	r3, r3, r2
    b952:	009b      	lsls	r3, r3, #2
    b954:	4a28      	ldr	r2, [pc, #160]	; (b9f8 <xTaskIncrementTick+0x1e0>)
    b956:	189a      	adds	r2, r3, r2
    b958:	68bb      	ldr	r3, [r7, #8]
    b95a:	3304      	adds	r3, #4
    b95c:	0019      	movs	r1, r3
    b95e:	0010      	movs	r0, r2
    b960:	4b26      	ldr	r3, [pc, #152]	; (b9fc <xTaskIncrementTick+0x1e4>)
    b962:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    b964:	68bb      	ldr	r3, [r7, #8]
    b966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b968:	4b25      	ldr	r3, [pc, #148]	; (ba00 <xTaskIncrementTick+0x1e8>)
    b96a:	681b      	ldr	r3, [r3, #0]
    b96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b96e:	429a      	cmp	r2, r3
    b970:	d39e      	bcc.n	b8b0 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
    b972:	2301      	movs	r3, #1
    b974:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    b976:	e79b      	b.n	b8b0 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    b978:	4b21      	ldr	r3, [pc, #132]	; (ba00 <xTaskIncrementTick+0x1e8>)
    b97a:	681b      	ldr	r3, [r3, #0]
    b97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b97e:	491e      	ldr	r1, [pc, #120]	; (b9f8 <xTaskIncrementTick+0x1e0>)
    b980:	0013      	movs	r3, r2
    b982:	009b      	lsls	r3, r3, #2
    b984:	189b      	adds	r3, r3, r2
    b986:	009b      	lsls	r3, r3, #2
    b988:	585b      	ldr	r3, [r3, r1]
    b98a:	2b01      	cmp	r3, #1
    b98c:	d907      	bls.n	b99e <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
    b98e:	2301      	movs	r3, #1
    b990:	617b      	str	r3, [r7, #20]
    b992:	e004      	b.n	b99e <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    b994:	4b08      	ldr	r3, [pc, #32]	; (b9b8 <xTaskIncrementTick+0x1a0>)
    b996:	681b      	ldr	r3, [r3, #0]
    b998:	1c5a      	adds	r2, r3, #1
    b99a:	4b07      	ldr	r3, [pc, #28]	; (b9b8 <xTaskIncrementTick+0x1a0>)
    b99c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    b99e:	4b19      	ldr	r3, [pc, #100]	; (ba04 <xTaskIncrementTick+0x1ec>)
    b9a0:	681b      	ldr	r3, [r3, #0]
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	d001      	beq.n	b9aa <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
    b9a6:	2301      	movs	r3, #1
    b9a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    b9aa:	697b      	ldr	r3, [r7, #20]
}
    b9ac:	0018      	movs	r0, r3
    b9ae:	46bd      	mov	sp, r7
    b9b0:	b006      	add	sp, #24
    b9b2:	bd80      	pop	{r7, pc}
    b9b4:	20003e14 	.word	0x20003e14
    b9b8:	20003dfc 	.word	0x20003dfc
    b9bc:	20000d5c 	.word	0x20000d5c
    b9c0:	00009045 	.word	0x00009045
    b9c4:	20003df0 	.word	0x20003df0
    b9c8:	000080b1 	.word	0x000080b1
    b9cc:	20003da4 	.word	0x20003da4
    b9d0:	20003da8 	.word	0x20003da8
    b9d4:	20003e04 	.word	0x20003e04
    b9d8:	0000c079 	.word	0x0000c079
    b9dc:	20003e0c 	.word	0x20003e0c
    b9e0:	0000922b 	.word	0x0000922b
    b9e4:	000073b1 	.word	0x000073b1
    b9e8:	20000104 	.word	0x20000104
    b9ec:	00007391 	.word	0x00007391
    b9f0:	00007b61 	.word	0x00007b61
    b9f4:	20003df4 	.word	0x20003df4
    b9f8:	20003d18 	.word	0x20003d18
    b9fc:	0000917b 	.word	0x0000917b
    ba00:	20003d14 	.word	0x20003d14
    ba04:	20003e00 	.word	0x20003e00

0000ba08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    ba08:	b580      	push	{r7, lr}
    ba0a:	b082      	sub	sp, #8
    ba0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    ba0e:	4b3a      	ldr	r3, [pc, #232]	; (baf8 <vTaskSwitchContext+0xf0>)
    ba10:	681b      	ldr	r3, [r3, #0]
    ba12:	2b00      	cmp	r3, #0
    ba14:	d003      	beq.n	ba1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    ba16:	4b39      	ldr	r3, [pc, #228]	; (bafc <vTaskSwitchContext+0xf4>)
    ba18:	2201      	movs	r2, #1
    ba1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    ba1c:	e067      	b.n	baee <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
    ba1e:	4b37      	ldr	r3, [pc, #220]	; (bafc <vTaskSwitchContext+0xf4>)
    ba20:	2200      	movs	r2, #0
    ba22:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    ba24:	4b36      	ldr	r3, [pc, #216]	; (bb00 <vTaskSwitchContext+0xf8>)
    ba26:	681b      	ldr	r3, [r3, #0]
    ba28:	681a      	ldr	r2, [r3, #0]
    ba2a:	4b35      	ldr	r3, [pc, #212]	; (bb00 <vTaskSwitchContext+0xf8>)
    ba2c:	681b      	ldr	r3, [r3, #0]
    ba2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ba30:	429a      	cmp	r2, r3
    ba32:	d808      	bhi.n	ba46 <vTaskSwitchContext+0x3e>
    ba34:	4b32      	ldr	r3, [pc, #200]	; (bb00 <vTaskSwitchContext+0xf8>)
    ba36:	681a      	ldr	r2, [r3, #0]
    ba38:	4b31      	ldr	r3, [pc, #196]	; (bb00 <vTaskSwitchContext+0xf8>)
    ba3a:	681b      	ldr	r3, [r3, #0]
    ba3c:	3334      	adds	r3, #52	; 0x34
    ba3e:	0019      	movs	r1, r3
    ba40:	0010      	movs	r0, r2
    ba42:	4b30      	ldr	r3, [pc, #192]	; (bb04 <vTaskSwitchContext+0xfc>)
    ba44:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    ba46:	4b30      	ldr	r3, [pc, #192]	; (bb08 <vTaskSwitchContext+0x100>)
    ba48:	681b      	ldr	r3, [r3, #0]
    ba4a:	607b      	str	r3, [r7, #4]
    ba4c:	e007      	b.n	ba5e <vTaskSwitchContext+0x56>
    ba4e:	687b      	ldr	r3, [r7, #4]
    ba50:	2b00      	cmp	r3, #0
    ba52:	d101      	bne.n	ba58 <vTaskSwitchContext+0x50>
    ba54:	b672      	cpsid	i
    ba56:	e7fe      	b.n	ba56 <vTaskSwitchContext+0x4e>
    ba58:	687b      	ldr	r3, [r7, #4]
    ba5a:	3b01      	subs	r3, #1
    ba5c:	607b      	str	r3, [r7, #4]
    ba5e:	492b      	ldr	r1, [pc, #172]	; (bb0c <vTaskSwitchContext+0x104>)
    ba60:	687a      	ldr	r2, [r7, #4]
    ba62:	0013      	movs	r3, r2
    ba64:	009b      	lsls	r3, r3, #2
    ba66:	189b      	adds	r3, r3, r2
    ba68:	009b      	lsls	r3, r3, #2
    ba6a:	585b      	ldr	r3, [r3, r1]
    ba6c:	2b00      	cmp	r3, #0
    ba6e:	d0ee      	beq.n	ba4e <vTaskSwitchContext+0x46>
    ba70:	687a      	ldr	r2, [r7, #4]
    ba72:	0013      	movs	r3, r2
    ba74:	009b      	lsls	r3, r3, #2
    ba76:	189b      	adds	r3, r3, r2
    ba78:	009b      	lsls	r3, r3, #2
    ba7a:	4a24      	ldr	r2, [pc, #144]	; (bb0c <vTaskSwitchContext+0x104>)
    ba7c:	189b      	adds	r3, r3, r2
    ba7e:	603b      	str	r3, [r7, #0]
    ba80:	683b      	ldr	r3, [r7, #0]
    ba82:	685b      	ldr	r3, [r3, #4]
    ba84:	685a      	ldr	r2, [r3, #4]
    ba86:	683b      	ldr	r3, [r7, #0]
    ba88:	605a      	str	r2, [r3, #4]
    ba8a:	683b      	ldr	r3, [r7, #0]
    ba8c:	685a      	ldr	r2, [r3, #4]
    ba8e:	683b      	ldr	r3, [r7, #0]
    ba90:	3308      	adds	r3, #8
    ba92:	429a      	cmp	r2, r3
    ba94:	d104      	bne.n	baa0 <vTaskSwitchContext+0x98>
    ba96:	683b      	ldr	r3, [r7, #0]
    ba98:	685b      	ldr	r3, [r3, #4]
    ba9a:	685a      	ldr	r2, [r3, #4]
    ba9c:	683b      	ldr	r3, [r7, #0]
    ba9e:	605a      	str	r2, [r3, #4]
    baa0:	683b      	ldr	r3, [r7, #0]
    baa2:	685b      	ldr	r3, [r3, #4]
    baa4:	68da      	ldr	r2, [r3, #12]
    baa6:	4b16      	ldr	r3, [pc, #88]	; (bb00 <vTaskSwitchContext+0xf8>)
    baa8:	601a      	str	r2, [r3, #0]
    baaa:	4b17      	ldr	r3, [pc, #92]	; (bb08 <vTaskSwitchContext+0x100>)
    baac:	687a      	ldr	r2, [r7, #4]
    baae:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
    bab0:	4b17      	ldr	r3, [pc, #92]	; (bb10 <vTaskSwitchContext+0x108>)
    bab2:	2201      	movs	r2, #1
    bab4:	601a      	str	r2, [r3, #0]
    bab6:	4b17      	ldr	r3, [pc, #92]	; (bb14 <vTaskSwitchContext+0x10c>)
    bab8:	4798      	blx	r3
    baba:	0003      	movs	r3, r0
    babc:	0018      	movs	r0, r3
    babe:	4b16      	ldr	r3, [pc, #88]	; (bb18 <vTaskSwitchContext+0x110>)
    bac0:	4798      	blx	r3
    bac2:	0003      	movs	r3, r0
    bac4:	001a      	movs	r2, r3
    bac6:	4b15      	ldr	r3, [pc, #84]	; (bb1c <vTaskSwitchContext+0x114>)
    bac8:	881b      	ldrh	r3, [r3, #0]
    baca:	4013      	ands	r3, r2
    bacc:	b29b      	uxth	r3, r3
    bace:	2b00      	cmp	r3, #0
    bad0:	d00a      	beq.n	bae8 <vTaskSwitchContext+0xe0>
    bad2:	4b10      	ldr	r3, [pc, #64]	; (bb14 <vTaskSwitchContext+0x10c>)
    bad4:	4798      	blx	r3
    bad6:	0003      	movs	r3, r0
    bad8:	0018      	movs	r0, r3
    bada:	4b11      	ldr	r3, [pc, #68]	; (bb20 <vTaskSwitchContext+0x118>)
    badc:	4798      	blx	r3
    bade:	0003      	movs	r3, r0
    bae0:	b2db      	uxtb	r3, r3
    bae2:	0018      	movs	r0, r3
    bae4:	4b0f      	ldr	r3, [pc, #60]	; (bb24 <vTaskSwitchContext+0x11c>)
    bae6:	4798      	blx	r3
    bae8:	4b09      	ldr	r3, [pc, #36]	; (bb10 <vTaskSwitchContext+0x108>)
    baea:	2202      	movs	r2, #2
    baec:	601a      	str	r2, [r3, #0]
}
    baee:	46c0      	nop			; (mov r8, r8)
    baf0:	46bd      	mov	sp, r7
    baf2:	b002      	add	sp, #8
    baf4:	bd80      	pop	{r7, pc}
    baf6:	46c0      	nop			; (mov r8, r8)
    baf8:	20003e14 	.word	0x20003e14
    bafc:	20003e00 	.word	0x20003e00
    bb00:	20003d14 	.word	0x20003d14
    bb04:	00021ce5 	.word	0x00021ce5
    bb08:	20003df4 	.word	0x20003df4
    bb0c:	20003d18 	.word	0x20003d18
    bb10:	20000d68 	.word	0x20000d68
    bb14:	0000764d 	.word	0x0000764d
    bb18:	000073b1 	.word	0x000073b1
    bb1c:	20000104 	.word	0x20000104
    bb20:	00007391 	.word	0x00007391
    bb24:	000081ad 	.word	0x000081ad

0000bb28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    bb28:	b580      	push	{r7, lr}
    bb2a:	b082      	sub	sp, #8
    bb2c:	af00      	add	r7, sp, #0
    bb2e:	6078      	str	r0, [r7, #4]
    bb30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    bb32:	687b      	ldr	r3, [r7, #4]
    bb34:	2b00      	cmp	r3, #0
    bb36:	d101      	bne.n	bb3c <vTaskPlaceOnEventList+0x14>
    bb38:	b672      	cpsid	i
    bb3a:	e7fe      	b.n	bb3a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    bb3c:	4b08      	ldr	r3, [pc, #32]	; (bb60 <vTaskPlaceOnEventList+0x38>)
    bb3e:	681b      	ldr	r3, [r3, #0]
    bb40:	3318      	adds	r3, #24
    bb42:	001a      	movs	r2, r3
    bb44:	687b      	ldr	r3, [r7, #4]
    bb46:	0011      	movs	r1, r2
    bb48:	0018      	movs	r0, r3
    bb4a:	4b06      	ldr	r3, [pc, #24]	; (bb64 <vTaskPlaceOnEventList+0x3c>)
    bb4c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    bb4e:	683b      	ldr	r3, [r7, #0]
    bb50:	2101      	movs	r1, #1
    bb52:	0018      	movs	r0, r3
    bb54:	4b04      	ldr	r3, [pc, #16]	; (bb68 <vTaskPlaceOnEventList+0x40>)
    bb56:	4798      	blx	r3
}
    bb58:	46c0      	nop			; (mov r8, r8)
    bb5a:	46bd      	mov	sp, r7
    bb5c:	b002      	add	sp, #8
    bb5e:	bd80      	pop	{r7, pc}
    bb60:	20003d14 	.word	0x20003d14
    bb64:	000091bf 	.word	0x000091bf
    bb68:	0000c5cd 	.word	0x0000c5cd

0000bb6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    bb6c:	b580      	push	{r7, lr}
    bb6e:	b084      	sub	sp, #16
    bb70:	af00      	add	r7, sp, #0
    bb72:	60f8      	str	r0, [r7, #12]
    bb74:	60b9      	str	r1, [r7, #8]
    bb76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    bb78:	68fb      	ldr	r3, [r7, #12]
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d101      	bne.n	bb82 <vTaskPlaceOnEventListRestricted+0x16>
    bb7e:	b672      	cpsid	i
    bb80:	e7fe      	b.n	bb80 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    bb82:	4b28      	ldr	r3, [pc, #160]	; (bc24 <vTaskPlaceOnEventListRestricted+0xb8>)
    bb84:	681b      	ldr	r3, [r3, #0]
    bb86:	3318      	adds	r3, #24
    bb88:	001a      	movs	r2, r3
    bb8a:	68fb      	ldr	r3, [r7, #12]
    bb8c:	0011      	movs	r1, r2
    bb8e:	0018      	movs	r0, r3
    bb90:	4b25      	ldr	r3, [pc, #148]	; (bc28 <vTaskPlaceOnEventListRestricted+0xbc>)
    bb92:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    bb94:	687b      	ldr	r3, [r7, #4]
    bb96:	2b00      	cmp	r3, #0
    bb98:	d002      	beq.n	bba0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    bb9a:	2301      	movs	r3, #1
    bb9c:	425b      	negs	r3, r3
    bb9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    bba0:	4b20      	ldr	r3, [pc, #128]	; (bc24 <vTaskPlaceOnEventListRestricted+0xb8>)
    bba2:	681b      	ldr	r3, [r3, #0]
    bba4:	0018      	movs	r0, r3
    bba6:	4b21      	ldr	r3, [pc, #132]	; (bc2c <vTaskPlaceOnEventListRestricted+0xc0>)
    bba8:	4798      	blx	r3
    bbaa:	0003      	movs	r3, r0
    bbac:	001a      	movs	r2, r3
    bbae:	4b20      	ldr	r3, [pc, #128]	; (bc30 <vTaskPlaceOnEventListRestricted+0xc4>)
    bbb0:	881b      	ldrh	r3, [r3, #0]
    bbb2:	4013      	ands	r3, r2
    bbb4:	b29b      	uxth	r3, r3
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d011      	beq.n	bbde <vTaskPlaceOnEventListRestricted+0x72>
    bbba:	4b1e      	ldr	r3, [pc, #120]	; (bc34 <vTaskPlaceOnEventListRestricted+0xc8>)
    bbbc:	681a      	ldr	r2, [r3, #0]
    bbbe:	68bb      	ldr	r3, [r7, #8]
    bbc0:	18d3      	adds	r3, r2, r3
    bbc2:	0019      	movs	r1, r3
    bbc4:	2088      	movs	r0, #136	; 0x88
    bbc6:	4b1c      	ldr	r3, [pc, #112]	; (bc38 <vTaskPlaceOnEventListRestricted+0xcc>)
    bbc8:	4798      	blx	r3
    bbca:	4b16      	ldr	r3, [pc, #88]	; (bc24 <vTaskPlaceOnEventListRestricted+0xb8>)
    bbcc:	681b      	ldr	r3, [r3, #0]
    bbce:	0018      	movs	r0, r3
    bbd0:	4b1a      	ldr	r3, [pc, #104]	; (bc3c <vTaskPlaceOnEventListRestricted+0xd0>)
    bbd2:	4798      	blx	r3
    bbd4:	0003      	movs	r3, r0
    bbd6:	b2db      	uxtb	r3, r3
    bbd8:	0018      	movs	r0, r3
    bbda:	4b19      	ldr	r3, [pc, #100]	; (bc40 <vTaskPlaceOnEventListRestricted+0xd4>)
    bbdc:	4798      	blx	r3
    bbde:	4b19      	ldr	r3, [pc, #100]	; (bc44 <vTaskPlaceOnEventListRestricted+0xd8>)
    bbe0:	4798      	blx	r3
    bbe2:	0003      	movs	r3, r0
    bbe4:	0018      	movs	r0, r3
    bbe6:	4b11      	ldr	r3, [pc, #68]	; (bc2c <vTaskPlaceOnEventListRestricted+0xc0>)
    bbe8:	4798      	blx	r3
    bbea:	0003      	movs	r3, r0
    bbec:	001a      	movs	r2, r3
    bbee:	4b10      	ldr	r3, [pc, #64]	; (bc30 <vTaskPlaceOnEventListRestricted+0xc4>)
    bbf0:	881b      	ldrh	r3, [r3, #0]
    bbf2:	4013      	ands	r3, r2
    bbf4:	b29b      	uxth	r3, r3
    bbf6:	2b00      	cmp	r3, #0
    bbf8:	d00a      	beq.n	bc10 <vTaskPlaceOnEventListRestricted+0xa4>
    bbfa:	4b12      	ldr	r3, [pc, #72]	; (bc44 <vTaskPlaceOnEventListRestricted+0xd8>)
    bbfc:	4798      	blx	r3
    bbfe:	0003      	movs	r3, r0
    bc00:	0018      	movs	r0, r3
    bc02:	4b0e      	ldr	r3, [pc, #56]	; (bc3c <vTaskPlaceOnEventListRestricted+0xd0>)
    bc04:	4798      	blx	r3
    bc06:	0003      	movs	r3, r0
    bc08:	b2db      	uxtb	r3, r3
    bc0a:	0018      	movs	r0, r3
    bc0c:	4b0c      	ldr	r3, [pc, #48]	; (bc40 <vTaskPlaceOnEventListRestricted+0xd4>)
    bc0e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    bc10:	687a      	ldr	r2, [r7, #4]
    bc12:	68bb      	ldr	r3, [r7, #8]
    bc14:	0011      	movs	r1, r2
    bc16:	0018      	movs	r0, r3
    bc18:	4b0b      	ldr	r3, [pc, #44]	; (bc48 <vTaskPlaceOnEventListRestricted+0xdc>)
    bc1a:	4798      	blx	r3
	}
    bc1c:	46c0      	nop			; (mov r8, r8)
    bc1e:	46bd      	mov	sp, r7
    bc20:	b004      	add	sp, #16
    bc22:	bd80      	pop	{r7, pc}
    bc24:	20003d14 	.word	0x20003d14
    bc28:	0000917b 	.word	0x0000917b
    bc2c:	000073b1 	.word	0x000073b1
    bc30:	20000104 	.word	0x20000104
    bc34:	20003df0 	.word	0x20003df0
    bc38:	000080b1 	.word	0x000080b1
    bc3c:	00007391 	.word	0x00007391
    bc40:	00008541 	.word	0x00008541
    bc44:	0000764d 	.word	0x0000764d
    bc48:	0000c5cd 	.word	0x0000c5cd

0000bc4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    bc4c:	b580      	push	{r7, lr}
    bc4e:	b084      	sub	sp, #16
    bc50:	af00      	add	r7, sp, #0
    bc52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    bc54:	687b      	ldr	r3, [r7, #4]
    bc56:	68db      	ldr	r3, [r3, #12]
    bc58:	68db      	ldr	r3, [r3, #12]
    bc5a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    bc5c:	68bb      	ldr	r3, [r7, #8]
    bc5e:	2b00      	cmp	r3, #0
    bc60:	d101      	bne.n	bc66 <xTaskRemoveFromEventList+0x1a>
    bc62:	b672      	cpsid	i
    bc64:	e7fe      	b.n	bc64 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    bc66:	68bb      	ldr	r3, [r7, #8]
    bc68:	3318      	adds	r3, #24
    bc6a:	0018      	movs	r0, r3
    bc6c:	4b2a      	ldr	r3, [pc, #168]	; (bd18 <xTaskRemoveFromEventList+0xcc>)
    bc6e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    bc70:	4b2a      	ldr	r3, [pc, #168]	; (bd1c <xTaskRemoveFromEventList+0xd0>)
    bc72:	681b      	ldr	r3, [r3, #0]
    bc74:	2b00      	cmp	r3, #0
    bc76:	d132      	bne.n	bcde <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    bc78:	68bb      	ldr	r3, [r7, #8]
    bc7a:	3304      	adds	r3, #4
    bc7c:	0018      	movs	r0, r3
    bc7e:	4b26      	ldr	r3, [pc, #152]	; (bd18 <xTaskRemoveFromEventList+0xcc>)
    bc80:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    bc82:	68bb      	ldr	r3, [r7, #8]
    bc84:	0018      	movs	r0, r3
    bc86:	4b26      	ldr	r3, [pc, #152]	; (bd20 <xTaskRemoveFromEventList+0xd4>)
    bc88:	4798      	blx	r3
    bc8a:	0003      	movs	r3, r0
    bc8c:	001a      	movs	r2, r3
    bc8e:	4b25      	ldr	r3, [pc, #148]	; (bd24 <xTaskRemoveFromEventList+0xd8>)
    bc90:	881b      	ldrh	r3, [r3, #0]
    bc92:	4013      	ands	r3, r2
    bc94:	b29b      	uxth	r3, r3
    bc96:	2b00      	cmp	r3, #0
    bc98:	d008      	beq.n	bcac <xTaskRemoveFromEventList+0x60>
    bc9a:	68bb      	ldr	r3, [r7, #8]
    bc9c:	0018      	movs	r0, r3
    bc9e:	4b22      	ldr	r3, [pc, #136]	; (bd28 <xTaskRemoveFromEventList+0xdc>)
    bca0:	4798      	blx	r3
    bca2:	0003      	movs	r3, r0
    bca4:	b2db      	uxtb	r3, r3
    bca6:	0018      	movs	r0, r3
    bca8:	4b20      	ldr	r3, [pc, #128]	; (bd2c <xTaskRemoveFromEventList+0xe0>)
    bcaa:	4798      	blx	r3
    bcac:	68bb      	ldr	r3, [r7, #8]
    bcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bcb0:	4b1f      	ldr	r3, [pc, #124]	; (bd30 <xTaskRemoveFromEventList+0xe4>)
    bcb2:	681b      	ldr	r3, [r3, #0]
    bcb4:	429a      	cmp	r2, r3
    bcb6:	d903      	bls.n	bcc0 <xTaskRemoveFromEventList+0x74>
    bcb8:	68bb      	ldr	r3, [r7, #8]
    bcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bcbc:	4b1c      	ldr	r3, [pc, #112]	; (bd30 <xTaskRemoveFromEventList+0xe4>)
    bcbe:	601a      	str	r2, [r3, #0]
    bcc0:	68bb      	ldr	r3, [r7, #8]
    bcc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bcc4:	0013      	movs	r3, r2
    bcc6:	009b      	lsls	r3, r3, #2
    bcc8:	189b      	adds	r3, r3, r2
    bcca:	009b      	lsls	r3, r3, #2
    bccc:	4a19      	ldr	r2, [pc, #100]	; (bd34 <xTaskRemoveFromEventList+0xe8>)
    bcce:	189a      	adds	r2, r3, r2
    bcd0:	68bb      	ldr	r3, [r7, #8]
    bcd2:	3304      	adds	r3, #4
    bcd4:	0019      	movs	r1, r3
    bcd6:	0010      	movs	r0, r2
    bcd8:	4b17      	ldr	r3, [pc, #92]	; (bd38 <xTaskRemoveFromEventList+0xec>)
    bcda:	4798      	blx	r3
    bcdc:	e007      	b.n	bcee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    bcde:	68bb      	ldr	r3, [r7, #8]
    bce0:	3318      	adds	r3, #24
    bce2:	001a      	movs	r2, r3
    bce4:	4b15      	ldr	r3, [pc, #84]	; (bd3c <xTaskRemoveFromEventList+0xf0>)
    bce6:	0011      	movs	r1, r2
    bce8:	0018      	movs	r0, r3
    bcea:	4b13      	ldr	r3, [pc, #76]	; (bd38 <xTaskRemoveFromEventList+0xec>)
    bcec:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    bcee:	68bb      	ldr	r3, [r7, #8]
    bcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bcf2:	4b13      	ldr	r3, [pc, #76]	; (bd40 <xTaskRemoveFromEventList+0xf4>)
    bcf4:	681b      	ldr	r3, [r3, #0]
    bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bcf8:	429a      	cmp	r2, r3
    bcfa:	d905      	bls.n	bd08 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    bcfc:	2301      	movs	r3, #1
    bcfe:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    bd00:	4b10      	ldr	r3, [pc, #64]	; (bd44 <xTaskRemoveFromEventList+0xf8>)
    bd02:	2201      	movs	r2, #1
    bd04:	601a      	str	r2, [r3, #0]
    bd06:	e001      	b.n	bd0c <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    bd08:	2300      	movs	r3, #0
    bd0a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    bd0c:	68fb      	ldr	r3, [r7, #12]
}
    bd0e:	0018      	movs	r0, r3
    bd10:	46bd      	mov	sp, r7
    bd12:	b004      	add	sp, #16
    bd14:	bd80      	pop	{r7, pc}
    bd16:	46c0      	nop			; (mov r8, r8)
    bd18:	0000922b 	.word	0x0000922b
    bd1c:	20003e14 	.word	0x20003e14
    bd20:	000073b1 	.word	0x000073b1
    bd24:	20000104 	.word	0x20000104
    bd28:	00007391 	.word	0x00007391
    bd2c:	00007b61 	.word	0x00007b61
    bd30:	20003df4 	.word	0x20003df4
    bd34:	20003d18 	.word	0x20003d18
    bd38:	0000917b 	.word	0x0000917b
    bd3c:	20003dac 	.word	0x20003dac
    bd40:	20003d14 	.word	0x20003d14
    bd44:	20003e00 	.word	0x20003e00

0000bd48 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    bd48:	b580      	push	{r7, lr}
    bd4a:	b082      	sub	sp, #8
    bd4c:	af00      	add	r7, sp, #0
    bd4e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    bd50:	687b      	ldr	r3, [r7, #4]
    bd52:	2b00      	cmp	r3, #0
    bd54:	d101      	bne.n	bd5a <vTaskSetTimeOutState+0x12>
    bd56:	b672      	cpsid	i
    bd58:	e7fe      	b.n	bd58 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
    bd5a:	4b08      	ldr	r3, [pc, #32]	; (bd7c <vTaskSetTimeOutState+0x34>)
    bd5c:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    bd5e:	4b08      	ldr	r3, [pc, #32]	; (bd80 <vTaskSetTimeOutState+0x38>)
    bd60:	681a      	ldr	r2, [r3, #0]
    bd62:	687b      	ldr	r3, [r7, #4]
    bd64:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    bd66:	4b07      	ldr	r3, [pc, #28]	; (bd84 <vTaskSetTimeOutState+0x3c>)
    bd68:	681a      	ldr	r2, [r3, #0]
    bd6a:	687b      	ldr	r3, [r7, #4]
    bd6c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
    bd6e:	4b06      	ldr	r3, [pc, #24]	; (bd88 <vTaskSetTimeOutState+0x40>)
    bd70:	4798      	blx	r3
}
    bd72:	46c0      	nop			; (mov r8, r8)
    bd74:	46bd      	mov	sp, r7
    bd76:	b002      	add	sp, #8
    bd78:	bd80      	pop	{r7, pc}
    bd7a:	46c0      	nop			; (mov r8, r8)
    bd7c:	000093b9 	.word	0x000093b9
    bd80:	20003e04 	.word	0x20003e04
    bd84:	20003df0 	.word	0x20003df0
    bd88:	000093dd 	.word	0x000093dd

0000bd8c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    bd8c:	b580      	push	{r7, lr}
    bd8e:	b082      	sub	sp, #8
    bd90:	af00      	add	r7, sp, #0
    bd92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    bd94:	4b05      	ldr	r3, [pc, #20]	; (bdac <vTaskInternalSetTimeOutState+0x20>)
    bd96:	681a      	ldr	r2, [r3, #0]
    bd98:	687b      	ldr	r3, [r7, #4]
    bd9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    bd9c:	4b04      	ldr	r3, [pc, #16]	; (bdb0 <vTaskInternalSetTimeOutState+0x24>)
    bd9e:	681a      	ldr	r2, [r3, #0]
    bda0:	687b      	ldr	r3, [r7, #4]
    bda2:	605a      	str	r2, [r3, #4]
}
    bda4:	46c0      	nop			; (mov r8, r8)
    bda6:	46bd      	mov	sp, r7
    bda8:	b002      	add	sp, #8
    bdaa:	bd80      	pop	{r7, pc}
    bdac:	20003e04 	.word	0x20003e04
    bdb0:	20003df0 	.word	0x20003df0

0000bdb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    bdb4:	b580      	push	{r7, lr}
    bdb6:	b086      	sub	sp, #24
    bdb8:	af00      	add	r7, sp, #0
    bdba:	6078      	str	r0, [r7, #4]
    bdbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    bdbe:	687b      	ldr	r3, [r7, #4]
    bdc0:	2b00      	cmp	r3, #0
    bdc2:	d101      	bne.n	bdc8 <xTaskCheckForTimeOut+0x14>
    bdc4:	b672      	cpsid	i
    bdc6:	e7fe      	b.n	bdc6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    bdc8:	683b      	ldr	r3, [r7, #0]
    bdca:	2b00      	cmp	r3, #0
    bdcc:	d101      	bne.n	bdd2 <xTaskCheckForTimeOut+0x1e>
    bdce:	b672      	cpsid	i
    bdd0:	e7fe      	b.n	bdd0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    bdd2:	4b1e      	ldr	r3, [pc, #120]	; (be4c <xTaskCheckForTimeOut+0x98>)
    bdd4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    bdd6:	4b1e      	ldr	r3, [pc, #120]	; (be50 <xTaskCheckForTimeOut+0x9c>)
    bdd8:	681b      	ldr	r3, [r3, #0]
    bdda:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    bddc:	687b      	ldr	r3, [r7, #4]
    bdde:	685b      	ldr	r3, [r3, #4]
    bde0:	693a      	ldr	r2, [r7, #16]
    bde2:	1ad3      	subs	r3, r2, r3
    bde4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    bde6:	683b      	ldr	r3, [r7, #0]
    bde8:	681b      	ldr	r3, [r3, #0]
    bdea:	3301      	adds	r3, #1
    bdec:	d102      	bne.n	bdf4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    bdee:	2300      	movs	r3, #0
    bdf0:	617b      	str	r3, [r7, #20]
    bdf2:	e024      	b.n	be3e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    bdf4:	687b      	ldr	r3, [r7, #4]
    bdf6:	681a      	ldr	r2, [r3, #0]
    bdf8:	4b16      	ldr	r3, [pc, #88]	; (be54 <xTaskCheckForTimeOut+0xa0>)
    bdfa:	681b      	ldr	r3, [r3, #0]
    bdfc:	429a      	cmp	r2, r3
    bdfe:	d007      	beq.n	be10 <xTaskCheckForTimeOut+0x5c>
    be00:	687b      	ldr	r3, [r7, #4]
    be02:	685a      	ldr	r2, [r3, #4]
    be04:	693b      	ldr	r3, [r7, #16]
    be06:	429a      	cmp	r2, r3
    be08:	d802      	bhi.n	be10 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    be0a:	2301      	movs	r3, #1
    be0c:	617b      	str	r3, [r7, #20]
    be0e:	e016      	b.n	be3e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    be10:	683b      	ldr	r3, [r7, #0]
    be12:	681a      	ldr	r2, [r3, #0]
    be14:	68fb      	ldr	r3, [r7, #12]
    be16:	429a      	cmp	r2, r3
    be18:	d90c      	bls.n	be34 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    be1a:	683b      	ldr	r3, [r7, #0]
    be1c:	681a      	ldr	r2, [r3, #0]
    be1e:	68fb      	ldr	r3, [r7, #12]
    be20:	1ad2      	subs	r2, r2, r3
    be22:	683b      	ldr	r3, [r7, #0]
    be24:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    be26:	687b      	ldr	r3, [r7, #4]
    be28:	0018      	movs	r0, r3
    be2a:	4b0b      	ldr	r3, [pc, #44]	; (be58 <xTaskCheckForTimeOut+0xa4>)
    be2c:	4798      	blx	r3
			xReturn = pdFALSE;
    be2e:	2300      	movs	r3, #0
    be30:	617b      	str	r3, [r7, #20]
    be32:	e004      	b.n	be3e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    be34:	683b      	ldr	r3, [r7, #0]
    be36:	2200      	movs	r2, #0
    be38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    be3a:	2301      	movs	r3, #1
    be3c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    be3e:	4b07      	ldr	r3, [pc, #28]	; (be5c <xTaskCheckForTimeOut+0xa8>)
    be40:	4798      	blx	r3

	return xReturn;
    be42:	697b      	ldr	r3, [r7, #20]
}
    be44:	0018      	movs	r0, r3
    be46:	46bd      	mov	sp, r7
    be48:	b006      	add	sp, #24
    be4a:	bd80      	pop	{r7, pc}
    be4c:	000093b9 	.word	0x000093b9
    be50:	20003df0 	.word	0x20003df0
    be54:	20003e04 	.word	0x20003e04
    be58:	0000bd8d 	.word	0x0000bd8d
    be5c:	000093dd 	.word	0x000093dd

0000be60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    be60:	b580      	push	{r7, lr}
    be62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    be64:	4b02      	ldr	r3, [pc, #8]	; (be70 <vTaskMissedYield+0x10>)
    be66:	2201      	movs	r2, #1
    be68:	601a      	str	r2, [r3, #0]
}
    be6a:	46c0      	nop			; (mov r8, r8)
    be6c:	46bd      	mov	sp, r7
    be6e:	bd80      	pop	{r7, pc}
    be70:	20003e00 	.word	0x20003e00

0000be74 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
    be74:	b580      	push	{r7, lr}
    be76:	b084      	sub	sp, #16
    be78:	af00      	add	r7, sp, #0
    be7a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    be7c:	687b      	ldr	r3, [r7, #4]
    be7e:	2b00      	cmp	r3, #0
    be80:	d005      	beq.n	be8e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    be82:	687b      	ldr	r3, [r7, #4]
    be84:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    be86:	68bb      	ldr	r3, [r7, #8]
    be88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    be8a:	60fb      	str	r3, [r7, #12]
    be8c:	e001      	b.n	be92 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
    be8e:	2300      	movs	r3, #0
    be90:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
    be92:	68fb      	ldr	r3, [r7, #12]
	}
    be94:	0018      	movs	r0, r3
    be96:	46bd      	mov	sp, r7
    be98:	b004      	add	sp, #16
    be9a:	bd80      	pop	{r7, pc}

0000be9c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
    be9c:	b580      	push	{r7, lr}
    be9e:	b084      	sub	sp, #16
    bea0:	af00      	add	r7, sp, #0
    bea2:	6078      	str	r0, [r7, #4]
    bea4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
    bea6:	687b      	ldr	r3, [r7, #4]
    bea8:	2b00      	cmp	r3, #0
    beaa:	d004      	beq.n	beb6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    beac:	687b      	ldr	r3, [r7, #4]
    beae:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    beb0:	68fb      	ldr	r3, [r7, #12]
    beb2:	683a      	ldr	r2, [r7, #0]
    beb4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	46bd      	mov	sp, r7
    beba:	b004      	add	sp, #16
    bebc:	bd80      	pop	{r7, pc}
	...

0000bec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    bec0:	b580      	push	{r7, lr}
    bec2:	b082      	sub	sp, #8
    bec4:	af00      	add	r7, sp, #0
    bec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    bec8:	4b04      	ldr	r3, [pc, #16]	; (bedc <prvIdleTask+0x1c>)
    beca:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    becc:	4b04      	ldr	r3, [pc, #16]	; (bee0 <prvIdleTask+0x20>)
    bece:	681b      	ldr	r3, [r3, #0]
    bed0:	2b01      	cmp	r3, #1
    bed2:	d9f9      	bls.n	bec8 <prvIdleTask+0x8>
			{
				taskYIELD();
    bed4:	4b03      	ldr	r3, [pc, #12]	; (bee4 <prvIdleTask+0x24>)
    bed6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    bed8:	e7f6      	b.n	bec8 <prvIdleTask+0x8>
    beda:	46c0      	nop			; (mov r8, r8)
    bedc:	0000bf75 	.word	0x0000bf75
    bee0:	20003d18 	.word	0x20003d18
    bee4:	000093a1 	.word	0x000093a1

0000bee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    bee8:	b580      	push	{r7, lr}
    beea:	b082      	sub	sp, #8
    beec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    beee:	2300      	movs	r3, #0
    bef0:	607b      	str	r3, [r7, #4]
    bef2:	e00c      	b.n	bf0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    bef4:	687a      	ldr	r2, [r7, #4]
    bef6:	0013      	movs	r3, r2
    bef8:	009b      	lsls	r3, r3, #2
    befa:	189b      	adds	r3, r3, r2
    befc:	009b      	lsls	r3, r3, #2
    befe:	4a14      	ldr	r2, [pc, #80]	; (bf50 <prvInitialiseTaskLists+0x68>)
    bf00:	189b      	adds	r3, r3, r2
    bf02:	0018      	movs	r0, r3
    bf04:	4b13      	ldr	r3, [pc, #76]	; (bf54 <prvInitialiseTaskLists+0x6c>)
    bf06:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    bf08:	687b      	ldr	r3, [r7, #4]
    bf0a:	3301      	adds	r3, #1
    bf0c:	607b      	str	r3, [r7, #4]
    bf0e:	687b      	ldr	r3, [r7, #4]
    bf10:	2b04      	cmp	r3, #4
    bf12:	d9ef      	bls.n	bef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    bf14:	4b10      	ldr	r3, [pc, #64]	; (bf58 <prvInitialiseTaskLists+0x70>)
    bf16:	0018      	movs	r0, r3
    bf18:	4b0e      	ldr	r3, [pc, #56]	; (bf54 <prvInitialiseTaskLists+0x6c>)
    bf1a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    bf1c:	4b0f      	ldr	r3, [pc, #60]	; (bf5c <prvInitialiseTaskLists+0x74>)
    bf1e:	0018      	movs	r0, r3
    bf20:	4b0c      	ldr	r3, [pc, #48]	; (bf54 <prvInitialiseTaskLists+0x6c>)
    bf22:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    bf24:	4b0e      	ldr	r3, [pc, #56]	; (bf60 <prvInitialiseTaskLists+0x78>)
    bf26:	0018      	movs	r0, r3
    bf28:	4b0a      	ldr	r3, [pc, #40]	; (bf54 <prvInitialiseTaskLists+0x6c>)
    bf2a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    bf2c:	4b0d      	ldr	r3, [pc, #52]	; (bf64 <prvInitialiseTaskLists+0x7c>)
    bf2e:	0018      	movs	r0, r3
    bf30:	4b08      	ldr	r3, [pc, #32]	; (bf54 <prvInitialiseTaskLists+0x6c>)
    bf32:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    bf34:	4b0c      	ldr	r3, [pc, #48]	; (bf68 <prvInitialiseTaskLists+0x80>)
    bf36:	0018      	movs	r0, r3
    bf38:	4b06      	ldr	r3, [pc, #24]	; (bf54 <prvInitialiseTaskLists+0x6c>)
    bf3a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    bf3c:	4b0b      	ldr	r3, [pc, #44]	; (bf6c <prvInitialiseTaskLists+0x84>)
    bf3e:	4a06      	ldr	r2, [pc, #24]	; (bf58 <prvInitialiseTaskLists+0x70>)
    bf40:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    bf42:	4b0b      	ldr	r3, [pc, #44]	; (bf70 <prvInitialiseTaskLists+0x88>)
    bf44:	4a05      	ldr	r2, [pc, #20]	; (bf5c <prvInitialiseTaskLists+0x74>)
    bf46:	601a      	str	r2, [r3, #0]
}
    bf48:	46c0      	nop			; (mov r8, r8)
    bf4a:	46bd      	mov	sp, r7
    bf4c:	b002      	add	sp, #8
    bf4e:	bd80      	pop	{r7, pc}
    bf50:	20003d18 	.word	0x20003d18
    bf54:	00009129 	.word	0x00009129
    bf58:	20003d7c 	.word	0x20003d7c
    bf5c:	20003d90 	.word	0x20003d90
    bf60:	20003dac 	.word	0x20003dac
    bf64:	20003dc0 	.word	0x20003dc0
    bf68:	20003dd8 	.word	0x20003dd8
    bf6c:	20003da4 	.word	0x20003da4
    bf70:	20003da8 	.word	0x20003da8

0000bf74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    bf74:	b580      	push	{r7, lr}
    bf76:	b082      	sub	sp, #8
    bf78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    bf7a:	e01a      	b.n	bfb2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    bf7c:	4b11      	ldr	r3, [pc, #68]	; (bfc4 <prvCheckTasksWaitingTermination+0x50>)
    bf7e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    bf80:	4b11      	ldr	r3, [pc, #68]	; (bfc8 <prvCheckTasksWaitingTermination+0x54>)
    bf82:	68db      	ldr	r3, [r3, #12]
    bf84:	68db      	ldr	r3, [r3, #12]
    bf86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    bf88:	687b      	ldr	r3, [r7, #4]
    bf8a:	3304      	adds	r3, #4
    bf8c:	0018      	movs	r0, r3
    bf8e:	4b0f      	ldr	r3, [pc, #60]	; (bfcc <prvCheckTasksWaitingTermination+0x58>)
    bf90:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    bf92:	4b0f      	ldr	r3, [pc, #60]	; (bfd0 <prvCheckTasksWaitingTermination+0x5c>)
    bf94:	681b      	ldr	r3, [r3, #0]
    bf96:	1e5a      	subs	r2, r3, #1
    bf98:	4b0d      	ldr	r3, [pc, #52]	; (bfd0 <prvCheckTasksWaitingTermination+0x5c>)
    bf9a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    bf9c:	4b0d      	ldr	r3, [pc, #52]	; (bfd4 <prvCheckTasksWaitingTermination+0x60>)
    bf9e:	681b      	ldr	r3, [r3, #0]
    bfa0:	1e5a      	subs	r2, r3, #1
    bfa2:	4b0c      	ldr	r3, [pc, #48]	; (bfd4 <prvCheckTasksWaitingTermination+0x60>)
    bfa4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    bfa6:	4b0c      	ldr	r3, [pc, #48]	; (bfd8 <prvCheckTasksWaitingTermination+0x64>)
    bfa8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    bfaa:	687b      	ldr	r3, [r7, #4]
    bfac:	0018      	movs	r0, r3
    bfae:	4b0b      	ldr	r3, [pc, #44]	; (bfdc <prvCheckTasksWaitingTermination+0x68>)
    bfb0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    bfb2:	4b08      	ldr	r3, [pc, #32]	; (bfd4 <prvCheckTasksWaitingTermination+0x60>)
    bfb4:	681b      	ldr	r3, [r3, #0]
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d1e0      	bne.n	bf7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    bfba:	46c0      	nop			; (mov r8, r8)
    bfbc:	46bd      	mov	sp, r7
    bfbe:	b002      	add	sp, #8
    bfc0:	bd80      	pop	{r7, pc}
    bfc2:	46c0      	nop			; (mov r8, r8)
    bfc4:	000093b9 	.word	0x000093b9
    bfc8:	20003dc0 	.word	0x20003dc0
    bfcc:	0000922b 	.word	0x0000922b
    bfd0:	20003dec 	.word	0x20003dec
    bfd4:	20003dd4 	.word	0x20003dd4
    bfd8:	000093dd 	.word	0x000093dd
    bfdc:	0000c051 	.word	0x0000c051

0000bfe0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    bfe0:	b580      	push	{r7, lr}
    bfe2:	b084      	sub	sp, #16
    bfe4:	af00      	add	r7, sp, #0
    bfe6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
    bfe8:	2300      	movs	r3, #0
    bfea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    bfec:	e005      	b.n	bffa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
    bfee:	687b      	ldr	r3, [r7, #4]
    bff0:	3301      	adds	r3, #1
    bff2:	607b      	str	r3, [r7, #4]
			ulCount++;
    bff4:	68fb      	ldr	r3, [r7, #12]
    bff6:	3301      	adds	r3, #1
    bff8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    bffa:	687b      	ldr	r3, [r7, #4]
    bffc:	781b      	ldrb	r3, [r3, #0]
    bffe:	2ba5      	cmp	r3, #165	; 0xa5
    c000:	d0f5      	beq.n	bfee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    c002:	68fb      	ldr	r3, [r7, #12]
    c004:	089b      	lsrs	r3, r3, #2
    c006:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
    c008:	68fb      	ldr	r3, [r7, #12]
    c00a:	b29b      	uxth	r3, r3
	}
    c00c:	0018      	movs	r0, r3
    c00e:	46bd      	mov	sp, r7
    c010:	b004      	add	sp, #16
    c012:	bd80      	pop	{r7, pc}

0000c014 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    c014:	b580      	push	{r7, lr}
    c016:	b086      	sub	sp, #24
    c018:	af00      	add	r7, sp, #0
    c01a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    c01c:	687b      	ldr	r3, [r7, #4]
    c01e:	2b00      	cmp	r3, #0
    c020:	d102      	bne.n	c028 <uxTaskGetStackHighWaterMark+0x14>
    c022:	4b09      	ldr	r3, [pc, #36]	; (c048 <uxTaskGetStackHighWaterMark+0x34>)
    c024:	681b      	ldr	r3, [r3, #0]
    c026:	e000      	b.n	c02a <uxTaskGetStackHighWaterMark+0x16>
    c028:	687b      	ldr	r3, [r7, #4]
    c02a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    c02c:	697b      	ldr	r3, [r7, #20]
    c02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c030:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    c032:	693b      	ldr	r3, [r7, #16]
    c034:	0018      	movs	r0, r3
    c036:	4b05      	ldr	r3, [pc, #20]	; (c04c <uxTaskGetStackHighWaterMark+0x38>)
    c038:	4798      	blx	r3
    c03a:	0003      	movs	r3, r0
    c03c:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    c03e:	68fb      	ldr	r3, [r7, #12]
	}
    c040:	0018      	movs	r0, r3
    c042:	46bd      	mov	sp, r7
    c044:	b006      	add	sp, #24
    c046:	bd80      	pop	{r7, pc}
    c048:	20003d14 	.word	0x20003d14
    c04c:	0000bfe1 	.word	0x0000bfe1

0000c050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    c050:	b580      	push	{r7, lr}
    c052:	b082      	sub	sp, #8
    c054:	af00      	add	r7, sp, #0
    c056:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    c058:	687b      	ldr	r3, [r7, #4]
    c05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c05c:	0018      	movs	r0, r3
    c05e:	4b05      	ldr	r3, [pc, #20]	; (c074 <prvDeleteTCB+0x24>)
    c060:	4798      	blx	r3
			vPortFree( pxTCB );
    c062:	687b      	ldr	r3, [r7, #4]
    c064:	0018      	movs	r0, r3
    c066:	4b03      	ldr	r3, [pc, #12]	; (c074 <prvDeleteTCB+0x24>)
    c068:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    c06a:	46c0      	nop			; (mov r8, r8)
    c06c:	46bd      	mov	sp, r7
    c06e:	b002      	add	sp, #8
    c070:	bd80      	pop	{r7, pc}
    c072:	46c0      	nop			; (mov r8, r8)
    c074:	000095b5 	.word	0x000095b5

0000c078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    c078:	b580      	push	{r7, lr}
    c07a:	b082      	sub	sp, #8
    c07c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    c07e:	4b0e      	ldr	r3, [pc, #56]	; (c0b8 <prvResetNextTaskUnblockTime+0x40>)
    c080:	681b      	ldr	r3, [r3, #0]
    c082:	681b      	ldr	r3, [r3, #0]
    c084:	2b00      	cmp	r3, #0
    c086:	d101      	bne.n	c08c <prvResetNextTaskUnblockTime+0x14>
    c088:	2301      	movs	r3, #1
    c08a:	e000      	b.n	c08e <prvResetNextTaskUnblockTime+0x16>
    c08c:	2300      	movs	r3, #0
    c08e:	2b00      	cmp	r3, #0
    c090:	d004      	beq.n	c09c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    c092:	4b0a      	ldr	r3, [pc, #40]	; (c0bc <prvResetNextTaskUnblockTime+0x44>)
    c094:	2201      	movs	r2, #1
    c096:	4252      	negs	r2, r2
    c098:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    c09a:	e008      	b.n	c0ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    c09c:	4b06      	ldr	r3, [pc, #24]	; (c0b8 <prvResetNextTaskUnblockTime+0x40>)
    c09e:	681b      	ldr	r3, [r3, #0]
    c0a0:	68db      	ldr	r3, [r3, #12]
    c0a2:	68db      	ldr	r3, [r3, #12]
    c0a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    c0a6:	687b      	ldr	r3, [r7, #4]
    c0a8:	685a      	ldr	r2, [r3, #4]
    c0aa:	4b04      	ldr	r3, [pc, #16]	; (c0bc <prvResetNextTaskUnblockTime+0x44>)
    c0ac:	601a      	str	r2, [r3, #0]
}
    c0ae:	46c0      	nop			; (mov r8, r8)
    c0b0:	46bd      	mov	sp, r7
    c0b2:	b002      	add	sp, #8
    c0b4:	bd80      	pop	{r7, pc}
    c0b6:	46c0      	nop			; (mov r8, r8)
    c0b8:	20003da4 	.word	0x20003da4
    c0bc:	20003e0c 	.word	0x20003e0c

0000c0c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    c0c0:	b580      	push	{r7, lr}
    c0c2:	b082      	sub	sp, #8
    c0c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    c0c6:	4b04      	ldr	r3, [pc, #16]	; (c0d8 <xTaskGetCurrentTaskHandle+0x18>)
    c0c8:	681b      	ldr	r3, [r3, #0]
    c0ca:	607b      	str	r3, [r7, #4]

		return xReturn;
    c0cc:	687b      	ldr	r3, [r7, #4]
	}
    c0ce:	0018      	movs	r0, r3
    c0d0:	46bd      	mov	sp, r7
    c0d2:	b002      	add	sp, #8
    c0d4:	bd80      	pop	{r7, pc}
    c0d6:	46c0      	nop			; (mov r8, r8)
    c0d8:	20003d14 	.word	0x20003d14

0000c0dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    c0dc:	b580      	push	{r7, lr}
    c0de:	b082      	sub	sp, #8
    c0e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    c0e2:	4b0a      	ldr	r3, [pc, #40]	; (c10c <xTaskGetSchedulerState+0x30>)
    c0e4:	681b      	ldr	r3, [r3, #0]
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	d102      	bne.n	c0f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    c0ea:	2301      	movs	r3, #1
    c0ec:	607b      	str	r3, [r7, #4]
    c0ee:	e008      	b.n	c102 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c0f0:	4b07      	ldr	r3, [pc, #28]	; (c110 <xTaskGetSchedulerState+0x34>)
    c0f2:	681b      	ldr	r3, [r3, #0]
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	d102      	bne.n	c0fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    c0f8:	2302      	movs	r3, #2
    c0fa:	607b      	str	r3, [r7, #4]
    c0fc:	e001      	b.n	c102 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    c0fe:	2300      	movs	r3, #0
    c100:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    c102:	687b      	ldr	r3, [r7, #4]
	}
    c104:	0018      	movs	r0, r3
    c106:	46bd      	mov	sp, r7
    c108:	b002      	add	sp, #8
    c10a:	bd80      	pop	{r7, pc}
    c10c:	20003df8 	.word	0x20003df8
    c110:	20003e14 	.word	0x20003e14

0000c114 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    c114:	b590      	push	{r4, r7, lr}
    c116:	b085      	sub	sp, #20
    c118:	af00      	add	r7, sp, #0
    c11a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    c11c:	687b      	ldr	r3, [r7, #4]
    c11e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    c120:	2300      	movs	r3, #0
    c122:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    c124:	687b      	ldr	r3, [r7, #4]
    c126:	2b00      	cmp	r3, #0
    c128:	d100      	bne.n	c12c <xTaskPriorityInherit+0x18>
    c12a:	e09d      	b.n	c268 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    c12c:	68bb      	ldr	r3, [r7, #8]
    c12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c130:	4b50      	ldr	r3, [pc, #320]	; (c274 <xTaskPriorityInherit+0x160>)
    c132:	681b      	ldr	r3, [r3, #0]
    c134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c136:	429a      	cmp	r2, r3
    c138:	d300      	bcc.n	c13c <xTaskPriorityInherit+0x28>
    c13a:	e08c      	b.n	c256 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    c13c:	68bb      	ldr	r3, [r7, #8]
    c13e:	699b      	ldr	r3, [r3, #24]
    c140:	2b00      	cmp	r3, #0
    c142:	db06      	blt.n	c152 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c144:	4b4b      	ldr	r3, [pc, #300]	; (c274 <xTaskPriorityInherit+0x160>)
    c146:	681b      	ldr	r3, [r3, #0]
    c148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c14a:	2205      	movs	r2, #5
    c14c:	1ad2      	subs	r2, r2, r3
    c14e:	68bb      	ldr	r3, [r7, #8]
    c150:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    c152:	68bb      	ldr	r3, [r7, #8]
    c154:	6959      	ldr	r1, [r3, #20]
    c156:	68bb      	ldr	r3, [r7, #8]
    c158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c15a:	0013      	movs	r3, r2
    c15c:	009b      	lsls	r3, r3, #2
    c15e:	189b      	adds	r3, r3, r2
    c160:	009b      	lsls	r3, r3, #2
    c162:	4a45      	ldr	r2, [pc, #276]	; (c278 <xTaskPriorityInherit+0x164>)
    c164:	189b      	adds	r3, r3, r2
    c166:	4299      	cmp	r1, r3
    c168:	d101      	bne.n	c16e <xTaskPriorityInherit+0x5a>
    c16a:	2301      	movs	r3, #1
    c16c:	e000      	b.n	c170 <xTaskPriorityInherit+0x5c>
    c16e:	2300      	movs	r3, #0
    c170:	2b00      	cmp	r3, #0
    c172:	d037      	beq.n	c1e4 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c174:	68bb      	ldr	r3, [r7, #8]
    c176:	3304      	adds	r3, #4
    c178:	0018      	movs	r0, r3
    c17a:	4b40      	ldr	r3, [pc, #256]	; (c27c <xTaskPriorityInherit+0x168>)
    c17c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    c17e:	4b3d      	ldr	r3, [pc, #244]	; (c274 <xTaskPriorityInherit+0x160>)
    c180:	681b      	ldr	r3, [r3, #0]
    c182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c184:	68bb      	ldr	r3, [r7, #8]
    c186:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    c188:	68bb      	ldr	r3, [r7, #8]
    c18a:	0018      	movs	r0, r3
    c18c:	4b3c      	ldr	r3, [pc, #240]	; (c280 <xTaskPriorityInherit+0x16c>)
    c18e:	4798      	blx	r3
    c190:	0003      	movs	r3, r0
    c192:	001a      	movs	r2, r3
    c194:	4b3b      	ldr	r3, [pc, #236]	; (c284 <xTaskPriorityInherit+0x170>)
    c196:	881b      	ldrh	r3, [r3, #0]
    c198:	4013      	ands	r3, r2
    c19a:	b29b      	uxth	r3, r3
    c19c:	2b00      	cmp	r3, #0
    c19e:	d008      	beq.n	c1b2 <xTaskPriorityInherit+0x9e>
    c1a0:	68bb      	ldr	r3, [r7, #8]
    c1a2:	0018      	movs	r0, r3
    c1a4:	4b38      	ldr	r3, [pc, #224]	; (c288 <xTaskPriorityInherit+0x174>)
    c1a6:	4798      	blx	r3
    c1a8:	0003      	movs	r3, r0
    c1aa:	b2db      	uxtb	r3, r3
    c1ac:	0018      	movs	r0, r3
    c1ae:	4b37      	ldr	r3, [pc, #220]	; (c28c <xTaskPriorityInherit+0x178>)
    c1b0:	4798      	blx	r3
    c1b2:	68bb      	ldr	r3, [r7, #8]
    c1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c1b6:	4b36      	ldr	r3, [pc, #216]	; (c290 <xTaskPriorityInherit+0x17c>)
    c1b8:	681b      	ldr	r3, [r3, #0]
    c1ba:	429a      	cmp	r2, r3
    c1bc:	d903      	bls.n	c1c6 <xTaskPriorityInherit+0xb2>
    c1be:	68bb      	ldr	r3, [r7, #8]
    c1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c1c2:	4b33      	ldr	r3, [pc, #204]	; (c290 <xTaskPriorityInherit+0x17c>)
    c1c4:	601a      	str	r2, [r3, #0]
    c1c6:	68bb      	ldr	r3, [r7, #8]
    c1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c1ca:	0013      	movs	r3, r2
    c1cc:	009b      	lsls	r3, r3, #2
    c1ce:	189b      	adds	r3, r3, r2
    c1d0:	009b      	lsls	r3, r3, #2
    c1d2:	4a29      	ldr	r2, [pc, #164]	; (c278 <xTaskPriorityInherit+0x164>)
    c1d4:	189a      	adds	r2, r3, r2
    c1d6:	68bb      	ldr	r3, [r7, #8]
    c1d8:	3304      	adds	r3, #4
    c1da:	0019      	movs	r1, r3
    c1dc:	0010      	movs	r0, r2
    c1de:	4b2d      	ldr	r3, [pc, #180]	; (c294 <xTaskPriorityInherit+0x180>)
    c1e0:	4798      	blx	r3
    c1e2:	e004      	b.n	c1ee <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    c1e4:	4b23      	ldr	r3, [pc, #140]	; (c274 <xTaskPriorityInherit+0x160>)
    c1e6:	681b      	ldr	r3, [r3, #0]
    c1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c1ea:	68bb      	ldr	r3, [r7, #8]
    c1ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    c1ee:	68bb      	ldr	r3, [r7, #8]
    c1f0:	0018      	movs	r0, r3
    c1f2:	4b23      	ldr	r3, [pc, #140]	; (c280 <xTaskPriorityInherit+0x16c>)
    c1f4:	4798      	blx	r3
    c1f6:	0003      	movs	r3, r0
    c1f8:	001a      	movs	r2, r3
    c1fa:	4b22      	ldr	r3, [pc, #136]	; (c284 <xTaskPriorityInherit+0x170>)
    c1fc:	881b      	ldrh	r3, [r3, #0]
    c1fe:	4013      	ands	r3, r2
    c200:	b29b      	uxth	r3, r3
    c202:	2b00      	cmp	r3, #0
    c204:	d024      	beq.n	c250 <xTaskPriorityInherit+0x13c>
    c206:	68bb      	ldr	r3, [r7, #8]
    c208:	0018      	movs	r0, r3
    c20a:	4b1f      	ldr	r3, [pc, #124]	; (c288 <xTaskPriorityInherit+0x174>)
    c20c:	4798      	blx	r3
    c20e:	0003      	movs	r3, r0
    c210:	b2db      	uxtb	r3, r3
    c212:	001c      	movs	r4, r3
    c214:	68bb      	ldr	r3, [r7, #8]
    c216:	0018      	movs	r0, r3
    c218:	4b1b      	ldr	r3, [pc, #108]	; (c288 <xTaskPriorityInherit+0x174>)
    c21a:	4798      	blx	r3
    c21c:	0003      	movs	r3, r0
    c21e:	b2db      	uxtb	r3, r3
    c220:	0019      	movs	r1, r3
    c222:	2003      	movs	r0, #3
    c224:	4b1c      	ldr	r3, [pc, #112]	; (c298 <xTaskPriorityInherit+0x184>)
    c226:	4798      	blx	r3
    c228:	0003      	movs	r3, r0
    c22a:	0022      	movs	r2, r4
    c22c:	2103      	movs	r1, #3
    c22e:	208e      	movs	r0, #142	; 0x8e
    c230:	4c1a      	ldr	r4, [pc, #104]	; (c29c <xTaskPriorityInherit+0x188>)
    c232:	47a0      	blx	r4
    c234:	68bb      	ldr	r3, [r7, #8]
    c236:	0018      	movs	r0, r3
    c238:	4b13      	ldr	r3, [pc, #76]	; (c288 <xTaskPriorityInherit+0x174>)
    c23a:	4798      	blx	r3
    c23c:	0003      	movs	r3, r0
    c23e:	b2d9      	uxtb	r1, r3
    c240:	4b0c      	ldr	r3, [pc, #48]	; (c274 <xTaskPriorityInherit+0x160>)
    c242:	681b      	ldr	r3, [r3, #0]
    c244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c246:	b2db      	uxtb	r3, r3
    c248:	001a      	movs	r2, r3
    c24a:	2003      	movs	r0, #3
    c24c:	4b14      	ldr	r3, [pc, #80]	; (c2a0 <xTaskPriorityInherit+0x18c>)
    c24e:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    c250:	2301      	movs	r3, #1
    c252:	60fb      	str	r3, [r7, #12]
    c254:	e008      	b.n	c268 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    c256:	68bb      	ldr	r3, [r7, #8]
    c258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c25a:	4b06      	ldr	r3, [pc, #24]	; (c274 <xTaskPriorityInherit+0x160>)
    c25c:	681b      	ldr	r3, [r3, #0]
    c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c260:	429a      	cmp	r2, r3
    c262:	d201      	bcs.n	c268 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    c264:	2301      	movs	r3, #1
    c266:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    c268:	68fb      	ldr	r3, [r7, #12]
	}
    c26a:	0018      	movs	r0, r3
    c26c:	46bd      	mov	sp, r7
    c26e:	b005      	add	sp, #20
    c270:	bd90      	pop	{r4, r7, pc}
    c272:	46c0      	nop			; (mov r8, r8)
    c274:	20003d14 	.word	0x20003d14
    c278:	20003d18 	.word	0x20003d18
    c27c:	0000922b 	.word	0x0000922b
    c280:	000073b1 	.word	0x000073b1
    c284:	20000104 	.word	0x20000104
    c288:	00007391 	.word	0x00007391
    c28c:	00007b61 	.word	0x00007b61
    c290:	20003df4 	.word	0x20003df4
    c294:	0000917b 	.word	0x0000917b
    c298:	00008369 	.word	0x00008369
    c29c:	00007ed9 	.word	0x00007ed9
    c2a0:	000082c5 	.word	0x000082c5

0000c2a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    c2a4:	b590      	push	{r4, r7, lr}
    c2a6:	b085      	sub	sp, #20
    c2a8:	af00      	add	r7, sp, #0
    c2aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    c2ac:	687b      	ldr	r3, [r7, #4]
    c2ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    c2b0:	2300      	movs	r3, #0
    c2b2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    c2b4:	687b      	ldr	r3, [r7, #4]
    c2b6:	2b00      	cmp	r3, #0
    c2b8:	d100      	bne.n	c2bc <xTaskPriorityDisinherit+0x18>
    c2ba:	e089      	b.n	c3d0 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    c2bc:	4b47      	ldr	r3, [pc, #284]	; (c3dc <xTaskPriorityDisinherit+0x138>)
    c2be:	681b      	ldr	r3, [r3, #0]
    c2c0:	68ba      	ldr	r2, [r7, #8]
    c2c2:	429a      	cmp	r2, r3
    c2c4:	d001      	beq.n	c2ca <xTaskPriorityDisinherit+0x26>
    c2c6:	b672      	cpsid	i
    c2c8:	e7fe      	b.n	c2c8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
    c2ca:	68bb      	ldr	r3, [r7, #8]
    c2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c2ce:	2b00      	cmp	r3, #0
    c2d0:	d101      	bne.n	c2d6 <xTaskPriorityDisinherit+0x32>
    c2d2:	b672      	cpsid	i
    c2d4:	e7fe      	b.n	c2d4 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
    c2d6:	68bb      	ldr	r3, [r7, #8]
    c2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c2da:	1e5a      	subs	r2, r3, #1
    c2dc:	68bb      	ldr	r3, [r7, #8]
    c2de:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    c2e0:	68bb      	ldr	r3, [r7, #8]
    c2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c2e4:	68bb      	ldr	r3, [r7, #8]
    c2e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c2e8:	429a      	cmp	r2, r3
    c2ea:	d071      	beq.n	c3d0 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    c2ec:	68bb      	ldr	r3, [r7, #8]
    c2ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c2f0:	2b00      	cmp	r3, #0
    c2f2:	d16d      	bne.n	c3d0 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c2f4:	68bb      	ldr	r3, [r7, #8]
    c2f6:	3304      	adds	r3, #4
    c2f8:	0018      	movs	r0, r3
    c2fa:	4b39      	ldr	r3, [pc, #228]	; (c3e0 <xTaskPriorityDisinherit+0x13c>)
    c2fc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    c2fe:	68bb      	ldr	r3, [r7, #8]
    c300:	0018      	movs	r0, r3
    c302:	4b38      	ldr	r3, [pc, #224]	; (c3e4 <xTaskPriorityDisinherit+0x140>)
    c304:	4798      	blx	r3
    c306:	0003      	movs	r3, r0
    c308:	001a      	movs	r2, r3
    c30a:	4b37      	ldr	r3, [pc, #220]	; (c3e8 <xTaskPriorityDisinherit+0x144>)
    c30c:	881b      	ldrh	r3, [r3, #0]
    c30e:	4013      	ands	r3, r2
    c310:	b29b      	uxth	r3, r3
    c312:	2b00      	cmp	r3, #0
    c314:	d023      	beq.n	c35e <xTaskPriorityDisinherit+0xba>
    c316:	68bb      	ldr	r3, [r7, #8]
    c318:	0018      	movs	r0, r3
    c31a:	4b34      	ldr	r3, [pc, #208]	; (c3ec <xTaskPriorityDisinherit+0x148>)
    c31c:	4798      	blx	r3
    c31e:	0003      	movs	r3, r0
    c320:	b2db      	uxtb	r3, r3
    c322:	001c      	movs	r4, r3
    c324:	68bb      	ldr	r3, [r7, #8]
    c326:	0018      	movs	r0, r3
    c328:	4b30      	ldr	r3, [pc, #192]	; (c3ec <xTaskPriorityDisinherit+0x148>)
    c32a:	4798      	blx	r3
    c32c:	0003      	movs	r3, r0
    c32e:	b2db      	uxtb	r3, r3
    c330:	0019      	movs	r1, r3
    c332:	2003      	movs	r0, #3
    c334:	4b2e      	ldr	r3, [pc, #184]	; (c3f0 <xTaskPriorityDisinherit+0x14c>)
    c336:	4798      	blx	r3
    c338:	0003      	movs	r3, r0
    c33a:	0022      	movs	r2, r4
    c33c:	2103      	movs	r1, #3
    c33e:	208f      	movs	r0, #143	; 0x8f
    c340:	4c2c      	ldr	r4, [pc, #176]	; (c3f4 <xTaskPriorityDisinherit+0x150>)
    c342:	47a0      	blx	r4
    c344:	68bb      	ldr	r3, [r7, #8]
    c346:	0018      	movs	r0, r3
    c348:	4b28      	ldr	r3, [pc, #160]	; (c3ec <xTaskPriorityDisinherit+0x148>)
    c34a:	4798      	blx	r3
    c34c:	0003      	movs	r3, r0
    c34e:	b2d9      	uxtb	r1, r3
    c350:	68bb      	ldr	r3, [r7, #8]
    c352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c354:	b2db      	uxtb	r3, r3
    c356:	001a      	movs	r2, r3
    c358:	2003      	movs	r0, #3
    c35a:	4b27      	ldr	r3, [pc, #156]	; (c3f8 <xTaskPriorityDisinherit+0x154>)
    c35c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    c35e:	68bb      	ldr	r3, [r7, #8]
    c360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c362:	68bb      	ldr	r3, [r7, #8]
    c364:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c366:	68bb      	ldr	r3, [r7, #8]
    c368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c36a:	2205      	movs	r2, #5
    c36c:	1ad2      	subs	r2, r2, r3
    c36e:	68bb      	ldr	r3, [r7, #8]
    c370:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    c372:	68bb      	ldr	r3, [r7, #8]
    c374:	0018      	movs	r0, r3
    c376:	4b1b      	ldr	r3, [pc, #108]	; (c3e4 <xTaskPriorityDisinherit+0x140>)
    c378:	4798      	blx	r3
    c37a:	0003      	movs	r3, r0
    c37c:	001a      	movs	r2, r3
    c37e:	4b1a      	ldr	r3, [pc, #104]	; (c3e8 <xTaskPriorityDisinherit+0x144>)
    c380:	881b      	ldrh	r3, [r3, #0]
    c382:	4013      	ands	r3, r2
    c384:	b29b      	uxth	r3, r3
    c386:	2b00      	cmp	r3, #0
    c388:	d008      	beq.n	c39c <xTaskPriorityDisinherit+0xf8>
    c38a:	68bb      	ldr	r3, [r7, #8]
    c38c:	0018      	movs	r0, r3
    c38e:	4b17      	ldr	r3, [pc, #92]	; (c3ec <xTaskPriorityDisinherit+0x148>)
    c390:	4798      	blx	r3
    c392:	0003      	movs	r3, r0
    c394:	b2db      	uxtb	r3, r3
    c396:	0018      	movs	r0, r3
    c398:	4b18      	ldr	r3, [pc, #96]	; (c3fc <xTaskPriorityDisinherit+0x158>)
    c39a:	4798      	blx	r3
    c39c:	68bb      	ldr	r3, [r7, #8]
    c39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c3a0:	4b17      	ldr	r3, [pc, #92]	; (c400 <xTaskPriorityDisinherit+0x15c>)
    c3a2:	681b      	ldr	r3, [r3, #0]
    c3a4:	429a      	cmp	r2, r3
    c3a6:	d903      	bls.n	c3b0 <xTaskPriorityDisinherit+0x10c>
    c3a8:	68bb      	ldr	r3, [r7, #8]
    c3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c3ac:	4b14      	ldr	r3, [pc, #80]	; (c400 <xTaskPriorityDisinherit+0x15c>)
    c3ae:	601a      	str	r2, [r3, #0]
    c3b0:	68bb      	ldr	r3, [r7, #8]
    c3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c3b4:	0013      	movs	r3, r2
    c3b6:	009b      	lsls	r3, r3, #2
    c3b8:	189b      	adds	r3, r3, r2
    c3ba:	009b      	lsls	r3, r3, #2
    c3bc:	4a11      	ldr	r2, [pc, #68]	; (c404 <xTaskPriorityDisinherit+0x160>)
    c3be:	189a      	adds	r2, r3, r2
    c3c0:	68bb      	ldr	r3, [r7, #8]
    c3c2:	3304      	adds	r3, #4
    c3c4:	0019      	movs	r1, r3
    c3c6:	0010      	movs	r0, r2
    c3c8:	4b0f      	ldr	r3, [pc, #60]	; (c408 <xTaskPriorityDisinherit+0x164>)
    c3ca:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    c3cc:	2301      	movs	r3, #1
    c3ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    c3d0:	68fb      	ldr	r3, [r7, #12]
	}
    c3d2:	0018      	movs	r0, r3
    c3d4:	46bd      	mov	sp, r7
    c3d6:	b005      	add	sp, #20
    c3d8:	bd90      	pop	{r4, r7, pc}
    c3da:	46c0      	nop			; (mov r8, r8)
    c3dc:	20003d14 	.word	0x20003d14
    c3e0:	0000922b 	.word	0x0000922b
    c3e4:	000073b1 	.word	0x000073b1
    c3e8:	20000104 	.word	0x20000104
    c3ec:	00007391 	.word	0x00007391
    c3f0:	00008369 	.word	0x00008369
    c3f4:	00007ed9 	.word	0x00007ed9
    c3f8:	000082c5 	.word	0x000082c5
    c3fc:	00007b61 	.word	0x00007b61
    c400:	20003df4 	.word	0x20003df4
    c404:	20003d18 	.word	0x20003d18
    c408:	0000917b 	.word	0x0000917b

0000c40c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    c40c:	b590      	push	{r4, r7, lr}
    c40e:	b087      	sub	sp, #28
    c410:	af00      	add	r7, sp, #0
    c412:	6078      	str	r0, [r7, #4]
    c414:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    c416:	687b      	ldr	r3, [r7, #4]
    c418:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    c41a:	2301      	movs	r3, #1
    c41c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    c41e:	687b      	ldr	r3, [r7, #4]
    c420:	2b00      	cmp	r3, #0
    c422:	d100      	bne.n	c426 <vTaskPriorityDisinheritAfterTimeout+0x1a>
    c424:	e0a4      	b.n	c570 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    c426:	693b      	ldr	r3, [r7, #16]
    c428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c42a:	2b00      	cmp	r3, #0
    c42c:	d101      	bne.n	c432 <vTaskPriorityDisinheritAfterTimeout+0x26>
    c42e:	b672      	cpsid	i
    c430:	e7fe      	b.n	c430 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    c432:	693b      	ldr	r3, [r7, #16]
    c434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c436:	683b      	ldr	r3, [r7, #0]
    c438:	429a      	cmp	r2, r3
    c43a:	d202      	bcs.n	c442 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    c43c:	683b      	ldr	r3, [r7, #0]
    c43e:	617b      	str	r3, [r7, #20]
    c440:	e002      	b.n	c448 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    c442:	693b      	ldr	r3, [r7, #16]
    c444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c446:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    c448:	693b      	ldr	r3, [r7, #16]
    c44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c44c:	697b      	ldr	r3, [r7, #20]
    c44e:	429a      	cmp	r2, r3
    c450:	d100      	bne.n	c454 <vTaskPriorityDisinheritAfterTimeout+0x48>
    c452:	e08d      	b.n	c570 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    c454:	693b      	ldr	r3, [r7, #16]
    c456:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    c458:	68fb      	ldr	r3, [r7, #12]
    c45a:	429a      	cmp	r2, r3
    c45c:	d000      	beq.n	c460 <vTaskPriorityDisinheritAfterTimeout+0x54>
    c45e:	e087      	b.n	c570 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    c460:	4b45      	ldr	r3, [pc, #276]	; (c578 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
    c462:	681b      	ldr	r3, [r3, #0]
    c464:	693a      	ldr	r2, [r7, #16]
    c466:	429a      	cmp	r2, r3
    c468:	d101      	bne.n	c46e <vTaskPriorityDisinheritAfterTimeout+0x62>
    c46a:	b672      	cpsid	i
    c46c:	e7fe      	b.n	c46c <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    c46e:	693b      	ldr	r3, [r7, #16]
    c470:	0018      	movs	r0, r3
    c472:	4b42      	ldr	r3, [pc, #264]	; (c57c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    c474:	4798      	blx	r3
    c476:	0003      	movs	r3, r0
    c478:	001a      	movs	r2, r3
    c47a:	4b41      	ldr	r3, [pc, #260]	; (c580 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    c47c:	881b      	ldrh	r3, [r3, #0]
    c47e:	4013      	ands	r3, r2
    c480:	b29b      	uxth	r3, r3
    c482:	2b00      	cmp	r3, #0
    c484:	d023      	beq.n	c4ce <vTaskPriorityDisinheritAfterTimeout+0xc2>
    c486:	693b      	ldr	r3, [r7, #16]
    c488:	0018      	movs	r0, r3
    c48a:	4b3e      	ldr	r3, [pc, #248]	; (c584 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    c48c:	4798      	blx	r3
    c48e:	0003      	movs	r3, r0
    c490:	b2db      	uxtb	r3, r3
    c492:	001c      	movs	r4, r3
    c494:	693b      	ldr	r3, [r7, #16]
    c496:	0018      	movs	r0, r3
    c498:	4b3a      	ldr	r3, [pc, #232]	; (c584 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    c49a:	4798      	blx	r3
    c49c:	0003      	movs	r3, r0
    c49e:	b2db      	uxtb	r3, r3
    c4a0:	0019      	movs	r1, r3
    c4a2:	2003      	movs	r0, #3
    c4a4:	4b38      	ldr	r3, [pc, #224]	; (c588 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
    c4a6:	4798      	blx	r3
    c4a8:	0003      	movs	r3, r0
    c4aa:	0022      	movs	r2, r4
    c4ac:	2103      	movs	r1, #3
    c4ae:	208f      	movs	r0, #143	; 0x8f
    c4b0:	4c36      	ldr	r4, [pc, #216]	; (c58c <vTaskPriorityDisinheritAfterTimeout+0x180>)
    c4b2:	47a0      	blx	r4
    c4b4:	693b      	ldr	r3, [r7, #16]
    c4b6:	0018      	movs	r0, r3
    c4b8:	4b32      	ldr	r3, [pc, #200]	; (c584 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    c4ba:	4798      	blx	r3
    c4bc:	0003      	movs	r3, r0
    c4be:	b2d9      	uxtb	r1, r3
    c4c0:	693b      	ldr	r3, [r7, #16]
    c4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c4c4:	b2db      	uxtb	r3, r3
    c4c6:	001a      	movs	r2, r3
    c4c8:	2003      	movs	r0, #3
    c4ca:	4b31      	ldr	r3, [pc, #196]	; (c590 <vTaskPriorityDisinheritAfterTimeout+0x184>)
    c4cc:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    c4ce:	693b      	ldr	r3, [r7, #16]
    c4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c4d2:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    c4d4:	693b      	ldr	r3, [r7, #16]
    c4d6:	697a      	ldr	r2, [r7, #20]
    c4d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    c4da:	693b      	ldr	r3, [r7, #16]
    c4dc:	699b      	ldr	r3, [r3, #24]
    c4de:	2b00      	cmp	r3, #0
    c4e0:	db04      	blt.n	c4ec <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c4e2:	697b      	ldr	r3, [r7, #20]
    c4e4:	2205      	movs	r2, #5
    c4e6:	1ad2      	subs	r2, r2, r3
    c4e8:	693b      	ldr	r3, [r7, #16]
    c4ea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    c4ec:	693b      	ldr	r3, [r7, #16]
    c4ee:	6959      	ldr	r1, [r3, #20]
    c4f0:	68ba      	ldr	r2, [r7, #8]
    c4f2:	0013      	movs	r3, r2
    c4f4:	009b      	lsls	r3, r3, #2
    c4f6:	189b      	adds	r3, r3, r2
    c4f8:	009b      	lsls	r3, r3, #2
    c4fa:	4a26      	ldr	r2, [pc, #152]	; (c594 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    c4fc:	189b      	adds	r3, r3, r2
    c4fe:	4299      	cmp	r1, r3
    c500:	d101      	bne.n	c506 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    c502:	2301      	movs	r3, #1
    c504:	e000      	b.n	c508 <vTaskPriorityDisinheritAfterTimeout+0xfc>
    c506:	2300      	movs	r3, #0
    c508:	2b00      	cmp	r3, #0
    c50a:	d031      	beq.n	c570 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c50c:	693b      	ldr	r3, [r7, #16]
    c50e:	3304      	adds	r3, #4
    c510:	0018      	movs	r0, r3
    c512:	4b21      	ldr	r3, [pc, #132]	; (c598 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
    c514:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    c516:	693b      	ldr	r3, [r7, #16]
    c518:	0018      	movs	r0, r3
    c51a:	4b18      	ldr	r3, [pc, #96]	; (c57c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    c51c:	4798      	blx	r3
    c51e:	0003      	movs	r3, r0
    c520:	001a      	movs	r2, r3
    c522:	4b17      	ldr	r3, [pc, #92]	; (c580 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    c524:	881b      	ldrh	r3, [r3, #0]
    c526:	4013      	ands	r3, r2
    c528:	b29b      	uxth	r3, r3
    c52a:	2b00      	cmp	r3, #0
    c52c:	d008      	beq.n	c540 <vTaskPriorityDisinheritAfterTimeout+0x134>
    c52e:	693b      	ldr	r3, [r7, #16]
    c530:	0018      	movs	r0, r3
    c532:	4b14      	ldr	r3, [pc, #80]	; (c584 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    c534:	4798      	blx	r3
    c536:	0003      	movs	r3, r0
    c538:	b2db      	uxtb	r3, r3
    c53a:	0018      	movs	r0, r3
    c53c:	4b17      	ldr	r3, [pc, #92]	; (c59c <vTaskPriorityDisinheritAfterTimeout+0x190>)
    c53e:	4798      	blx	r3
    c540:	693b      	ldr	r3, [r7, #16]
    c542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c544:	4b16      	ldr	r3, [pc, #88]	; (c5a0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    c546:	681b      	ldr	r3, [r3, #0]
    c548:	429a      	cmp	r2, r3
    c54a:	d903      	bls.n	c554 <vTaskPriorityDisinheritAfterTimeout+0x148>
    c54c:	693b      	ldr	r3, [r7, #16]
    c54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c550:	4b13      	ldr	r3, [pc, #76]	; (c5a0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    c552:	601a      	str	r2, [r3, #0]
    c554:	693b      	ldr	r3, [r7, #16]
    c556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c558:	0013      	movs	r3, r2
    c55a:	009b      	lsls	r3, r3, #2
    c55c:	189b      	adds	r3, r3, r2
    c55e:	009b      	lsls	r3, r3, #2
    c560:	4a0c      	ldr	r2, [pc, #48]	; (c594 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    c562:	189a      	adds	r2, r3, r2
    c564:	693b      	ldr	r3, [r7, #16]
    c566:	3304      	adds	r3, #4
    c568:	0019      	movs	r1, r3
    c56a:	0010      	movs	r0, r2
    c56c:	4b0d      	ldr	r3, [pc, #52]	; (c5a4 <vTaskPriorityDisinheritAfterTimeout+0x198>)
    c56e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    c570:	46c0      	nop			; (mov r8, r8)
    c572:	46bd      	mov	sp, r7
    c574:	b007      	add	sp, #28
    c576:	bd90      	pop	{r4, r7, pc}
    c578:	20003d14 	.word	0x20003d14
    c57c:	000073b1 	.word	0x000073b1
    c580:	20000104 	.word	0x20000104
    c584:	00007391 	.word	0x00007391
    c588:	00008369 	.word	0x00008369
    c58c:	00007ed9 	.word	0x00007ed9
    c590:	000082c5 	.word	0x000082c5
    c594:	20003d18 	.word	0x20003d18
    c598:	0000922b 	.word	0x0000922b
    c59c:	00007b61 	.word	0x00007b61
    c5a0:	20003df4 	.word	0x20003df4
    c5a4:	0000917b 	.word	0x0000917b

0000c5a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    c5a8:	b580      	push	{r7, lr}
    c5aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    c5ac:	4b06      	ldr	r3, [pc, #24]	; (c5c8 <pvTaskIncrementMutexHeldCount+0x20>)
    c5ae:	681b      	ldr	r3, [r3, #0]
    c5b0:	2b00      	cmp	r3, #0
    c5b2:	d004      	beq.n	c5be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    c5b4:	4b04      	ldr	r3, [pc, #16]	; (c5c8 <pvTaskIncrementMutexHeldCount+0x20>)
    c5b6:	681b      	ldr	r3, [r3, #0]
    c5b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    c5ba:	3201      	adds	r2, #1
    c5bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    c5be:	4b02      	ldr	r3, [pc, #8]	; (c5c8 <pvTaskIncrementMutexHeldCount+0x20>)
    c5c0:	681b      	ldr	r3, [r3, #0]
	}
    c5c2:	0018      	movs	r0, r3
    c5c4:	46bd      	mov	sp, r7
    c5c6:	bd80      	pop	{r7, pc}
    c5c8:	20003d14 	.word	0x20003d14

0000c5cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    c5cc:	b580      	push	{r7, lr}
    c5ce:	b084      	sub	sp, #16
    c5d0:	af00      	add	r7, sp, #0
    c5d2:	6078      	str	r0, [r7, #4]
    c5d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    c5d6:	4b21      	ldr	r3, [pc, #132]	; (c65c <prvAddCurrentTaskToDelayedList+0x90>)
    c5d8:	681b      	ldr	r3, [r3, #0]
    c5da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c5dc:	4b20      	ldr	r3, [pc, #128]	; (c660 <prvAddCurrentTaskToDelayedList+0x94>)
    c5de:	681b      	ldr	r3, [r3, #0]
    c5e0:	3304      	adds	r3, #4
    c5e2:	0018      	movs	r0, r3
    c5e4:	4b1f      	ldr	r3, [pc, #124]	; (c664 <prvAddCurrentTaskToDelayedList+0x98>)
    c5e6:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    c5e8:	687b      	ldr	r3, [r7, #4]
    c5ea:	3301      	adds	r3, #1
    c5ec:	d10b      	bne.n	c606 <prvAddCurrentTaskToDelayedList+0x3a>
    c5ee:	683b      	ldr	r3, [r7, #0]
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d008      	beq.n	c606 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c5f4:	4b1a      	ldr	r3, [pc, #104]	; (c660 <prvAddCurrentTaskToDelayedList+0x94>)
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	1d1a      	adds	r2, r3, #4
    c5fa:	4b1b      	ldr	r3, [pc, #108]	; (c668 <prvAddCurrentTaskToDelayedList+0x9c>)
    c5fc:	0011      	movs	r1, r2
    c5fe:	0018      	movs	r0, r3
    c600:	4b1a      	ldr	r3, [pc, #104]	; (c66c <prvAddCurrentTaskToDelayedList+0xa0>)
    c602:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c604:	e026      	b.n	c654 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    c606:	68fa      	ldr	r2, [r7, #12]
    c608:	687b      	ldr	r3, [r7, #4]
    c60a:	18d3      	adds	r3, r2, r3
    c60c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    c60e:	4b14      	ldr	r3, [pc, #80]	; (c660 <prvAddCurrentTaskToDelayedList+0x94>)
    c610:	681b      	ldr	r3, [r3, #0]
    c612:	68ba      	ldr	r2, [r7, #8]
    c614:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    c616:	68ba      	ldr	r2, [r7, #8]
    c618:	68fb      	ldr	r3, [r7, #12]
    c61a:	429a      	cmp	r2, r3
    c61c:	d209      	bcs.n	c632 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c61e:	4b14      	ldr	r3, [pc, #80]	; (c670 <prvAddCurrentTaskToDelayedList+0xa4>)
    c620:	681a      	ldr	r2, [r3, #0]
    c622:	4b0f      	ldr	r3, [pc, #60]	; (c660 <prvAddCurrentTaskToDelayedList+0x94>)
    c624:	681b      	ldr	r3, [r3, #0]
    c626:	3304      	adds	r3, #4
    c628:	0019      	movs	r1, r3
    c62a:	0010      	movs	r0, r2
    c62c:	4b11      	ldr	r3, [pc, #68]	; (c674 <prvAddCurrentTaskToDelayedList+0xa8>)
    c62e:	4798      	blx	r3
}
    c630:	e010      	b.n	c654 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c632:	4b11      	ldr	r3, [pc, #68]	; (c678 <prvAddCurrentTaskToDelayedList+0xac>)
    c634:	681a      	ldr	r2, [r3, #0]
    c636:	4b0a      	ldr	r3, [pc, #40]	; (c660 <prvAddCurrentTaskToDelayedList+0x94>)
    c638:	681b      	ldr	r3, [r3, #0]
    c63a:	3304      	adds	r3, #4
    c63c:	0019      	movs	r1, r3
    c63e:	0010      	movs	r0, r2
    c640:	4b0c      	ldr	r3, [pc, #48]	; (c674 <prvAddCurrentTaskToDelayedList+0xa8>)
    c642:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    c644:	4b0d      	ldr	r3, [pc, #52]	; (c67c <prvAddCurrentTaskToDelayedList+0xb0>)
    c646:	681b      	ldr	r3, [r3, #0]
    c648:	68ba      	ldr	r2, [r7, #8]
    c64a:	429a      	cmp	r2, r3
    c64c:	d202      	bcs.n	c654 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    c64e:	4b0b      	ldr	r3, [pc, #44]	; (c67c <prvAddCurrentTaskToDelayedList+0xb0>)
    c650:	68ba      	ldr	r2, [r7, #8]
    c652:	601a      	str	r2, [r3, #0]
}
    c654:	46c0      	nop			; (mov r8, r8)
    c656:	46bd      	mov	sp, r7
    c658:	b004      	add	sp, #16
    c65a:	bd80      	pop	{r7, pc}
    c65c:	20003df0 	.word	0x20003df0
    c660:	20003d14 	.word	0x20003d14
    c664:	0000922b 	.word	0x0000922b
    c668:	20003dd8 	.word	0x20003dd8
    c66c:	0000917b 	.word	0x0000917b
    c670:	20003da8 	.word	0x20003da8
    c674:	000091bf 	.word	0x000091bf
    c678:	20003da4 	.word	0x20003da4
    c67c:	20003e0c 	.word	0x20003e0c

0000c680 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    c680:	b590      	push	{r4, r7, lr}
    c682:	b085      	sub	sp, #20
    c684:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    c686:	2300      	movs	r3, #0
    c688:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    c68a:	4b0e      	ldr	r3, [pc, #56]	; (c6c4 <xTimerCreateTimerTask+0x44>)
    c68c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    c68e:	4b0e      	ldr	r3, [pc, #56]	; (c6c8 <xTimerCreateTimerTask+0x48>)
    c690:	681b      	ldr	r3, [r3, #0]
    c692:	2b00      	cmp	r3, #0
    c694:	d00b      	beq.n	c6ae <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    c696:	490d      	ldr	r1, [pc, #52]	; (c6cc <xTimerCreateTimerTask+0x4c>)
    c698:	480d      	ldr	r0, [pc, #52]	; (c6d0 <xTimerCreateTimerTask+0x50>)
    c69a:	4b0e      	ldr	r3, [pc, #56]	; (c6d4 <xTimerCreateTimerTask+0x54>)
    c69c:	9301      	str	r3, [sp, #4]
    c69e:	2302      	movs	r3, #2
    c6a0:	9300      	str	r3, [sp, #0]
    c6a2:	2300      	movs	r3, #0
    c6a4:	2280      	movs	r2, #128	; 0x80
    c6a6:	4c0c      	ldr	r4, [pc, #48]	; (c6d8 <xTimerCreateTimerTask+0x58>)
    c6a8:	47a0      	blx	r4
    c6aa:	0003      	movs	r3, r0
    c6ac:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    c6ae:	687b      	ldr	r3, [r7, #4]
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d101      	bne.n	c6b8 <xTimerCreateTimerTask+0x38>
    c6b4:	b672      	cpsid	i
    c6b6:	e7fe      	b.n	c6b6 <xTimerCreateTimerTask+0x36>
	return xReturn;
    c6b8:	687b      	ldr	r3, [r7, #4]
}
    c6ba:	0018      	movs	r0, r3
    c6bc:	46bd      	mov	sp, r7
    c6be:	b003      	add	sp, #12
    c6c0:	bd90      	pop	{r4, r7, pc}
    c6c2:	46c0      	nop			; (mov r8, r8)
    c6c4:	0000cbc9 	.word	0x0000cbc9
    c6c8:	20003e48 	.word	0x20003e48
    c6cc:	000280c8 	.word	0x000280c8
    c6d0:	0000c801 	.word	0x0000c801
    c6d4:	20003e4c 	.word	0x20003e4c
    c6d8:	0000b019 	.word	0x0000b019

0000c6dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    c6dc:	b590      	push	{r4, r7, lr}
    c6de:	b089      	sub	sp, #36	; 0x24
    c6e0:	af00      	add	r7, sp, #0
    c6e2:	60f8      	str	r0, [r7, #12]
    c6e4:	60b9      	str	r1, [r7, #8]
    c6e6:	607a      	str	r2, [r7, #4]
    c6e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    c6ea:	2300      	movs	r3, #0
    c6ec:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    c6ee:	68fb      	ldr	r3, [r7, #12]
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	d101      	bne.n	c6f8 <xTimerGenericCommand+0x1c>
    c6f4:	b672      	cpsid	i
    c6f6:	e7fe      	b.n	c6f6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    c6f8:	4b1e      	ldr	r3, [pc, #120]	; (c774 <xTimerGenericCommand+0x98>)
    c6fa:	681b      	ldr	r3, [r3, #0]
    c6fc:	2b00      	cmp	r3, #0
    c6fe:	d033      	beq.n	c768 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    c700:	2310      	movs	r3, #16
    c702:	18fb      	adds	r3, r7, r3
    c704:	68ba      	ldr	r2, [r7, #8]
    c706:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    c708:	2310      	movs	r3, #16
    c70a:	18fb      	adds	r3, r7, r3
    c70c:	687a      	ldr	r2, [r7, #4]
    c70e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    c710:	2310      	movs	r3, #16
    c712:	18fb      	adds	r3, r7, r3
    c714:	68fa      	ldr	r2, [r7, #12]
    c716:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    c718:	68bb      	ldr	r3, [r7, #8]
    c71a:	2b05      	cmp	r3, #5
    c71c:	dc1a      	bgt.n	c754 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    c71e:	4b16      	ldr	r3, [pc, #88]	; (c778 <xTimerGenericCommand+0x9c>)
    c720:	4798      	blx	r3
    c722:	0003      	movs	r3, r0
    c724:	2b02      	cmp	r3, #2
    c726:	d10a      	bne.n	c73e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    c728:	4b12      	ldr	r3, [pc, #72]	; (c774 <xTimerGenericCommand+0x98>)
    c72a:	6818      	ldr	r0, [r3, #0]
    c72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c72e:	2310      	movs	r3, #16
    c730:	18f9      	adds	r1, r7, r3
    c732:	2300      	movs	r3, #0
    c734:	4c11      	ldr	r4, [pc, #68]	; (c77c <xTimerGenericCommand+0xa0>)
    c736:	47a0      	blx	r4
    c738:	0003      	movs	r3, r0
    c73a:	61fb      	str	r3, [r7, #28]
    c73c:	e014      	b.n	c768 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    c73e:	4b0d      	ldr	r3, [pc, #52]	; (c774 <xTimerGenericCommand+0x98>)
    c740:	6818      	ldr	r0, [r3, #0]
    c742:	2310      	movs	r3, #16
    c744:	18f9      	adds	r1, r7, r3
    c746:	2300      	movs	r3, #0
    c748:	2200      	movs	r2, #0
    c74a:	4c0c      	ldr	r4, [pc, #48]	; (c77c <xTimerGenericCommand+0xa0>)
    c74c:	47a0      	blx	r4
    c74e:	0003      	movs	r3, r0
    c750:	61fb      	str	r3, [r7, #28]
    c752:	e009      	b.n	c768 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    c754:	4b07      	ldr	r3, [pc, #28]	; (c774 <xTimerGenericCommand+0x98>)
    c756:	6818      	ldr	r0, [r3, #0]
    c758:	683a      	ldr	r2, [r7, #0]
    c75a:	2310      	movs	r3, #16
    c75c:	18f9      	adds	r1, r7, r3
    c75e:	2300      	movs	r3, #0
    c760:	4c07      	ldr	r4, [pc, #28]	; (c780 <xTimerGenericCommand+0xa4>)
    c762:	47a0      	blx	r4
    c764:	0003      	movs	r3, r0
    c766:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    c768:	69fb      	ldr	r3, [r7, #28]
}
    c76a:	0018      	movs	r0, r3
    c76c:	46bd      	mov	sp, r7
    c76e:	b009      	add	sp, #36	; 0x24
    c770:	bd90      	pop	{r4, r7, pc}
    c772:	46c0      	nop			; (mov r8, r8)
    c774:	20003e48 	.word	0x20003e48
    c778:	0000c0dd 	.word	0x0000c0dd
    c77c:	00009951 	.word	0x00009951
    c780:	00009db1 	.word	0x00009db1

0000c784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    c784:	b590      	push	{r4, r7, lr}
    c786:	b087      	sub	sp, #28
    c788:	af02      	add	r7, sp, #8
    c78a:	6078      	str	r0, [r7, #4]
    c78c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    c78e:	4b18      	ldr	r3, [pc, #96]	; (c7f0 <prvProcessExpiredTimer+0x6c>)
    c790:	681b      	ldr	r3, [r3, #0]
    c792:	68db      	ldr	r3, [r3, #12]
    c794:	68db      	ldr	r3, [r3, #12]
    c796:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    c798:	68fb      	ldr	r3, [r7, #12]
    c79a:	3304      	adds	r3, #4
    c79c:	0018      	movs	r0, r3
    c79e:	4b15      	ldr	r3, [pc, #84]	; (c7f4 <prvProcessExpiredTimer+0x70>)
    c7a0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    c7a2:	68fb      	ldr	r3, [r7, #12]
    c7a4:	69db      	ldr	r3, [r3, #28]
    c7a6:	2b01      	cmp	r3, #1
    c7a8:	d119      	bne.n	c7de <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    c7aa:	68fb      	ldr	r3, [r7, #12]
    c7ac:	699a      	ldr	r2, [r3, #24]
    c7ae:	687b      	ldr	r3, [r7, #4]
    c7b0:	18d1      	adds	r1, r2, r3
    c7b2:	687b      	ldr	r3, [r7, #4]
    c7b4:	683a      	ldr	r2, [r7, #0]
    c7b6:	68f8      	ldr	r0, [r7, #12]
    c7b8:	4c0f      	ldr	r4, [pc, #60]	; (c7f8 <prvProcessExpiredTimer+0x74>)
    c7ba:	47a0      	blx	r4
    c7bc:	1e03      	subs	r3, r0, #0
    c7be:	d00e      	beq.n	c7de <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    c7c0:	687a      	ldr	r2, [r7, #4]
    c7c2:	68f8      	ldr	r0, [r7, #12]
    c7c4:	2300      	movs	r3, #0
    c7c6:	9300      	str	r3, [sp, #0]
    c7c8:	2300      	movs	r3, #0
    c7ca:	2100      	movs	r1, #0
    c7cc:	4c0b      	ldr	r4, [pc, #44]	; (c7fc <prvProcessExpiredTimer+0x78>)
    c7ce:	47a0      	blx	r4
    c7d0:	0003      	movs	r3, r0
    c7d2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    c7d4:	68bb      	ldr	r3, [r7, #8]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d101      	bne.n	c7de <prvProcessExpiredTimer+0x5a>
    c7da:	b672      	cpsid	i
    c7dc:	e7fe      	b.n	c7dc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    c7de:	68fb      	ldr	r3, [r7, #12]
    c7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c7e2:	68fa      	ldr	r2, [r7, #12]
    c7e4:	0010      	movs	r0, r2
    c7e6:	4798      	blx	r3
}
    c7e8:	46c0      	nop			; (mov r8, r8)
    c7ea:	46bd      	mov	sp, r7
    c7ec:	b005      	add	sp, #20
    c7ee:	bd90      	pop	{r4, r7, pc}
    c7f0:	20003e40 	.word	0x20003e40
    c7f4:	0000922b 	.word	0x0000922b
    c7f8:	0000c969 	.word	0x0000c969
    c7fc:	0000c6dd 	.word	0x0000c6dd

0000c800 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    c800:	b580      	push	{r7, lr}
    c802:	b084      	sub	sp, #16
    c804:	af00      	add	r7, sp, #0
    c806:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    c808:	4b08      	ldr	r3, [pc, #32]	; (c82c <prvTimerTask+0x2c>)
    c80a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    c80c:	2308      	movs	r3, #8
    c80e:	18fb      	adds	r3, r7, r3
    c810:	0018      	movs	r0, r3
    c812:	4b07      	ldr	r3, [pc, #28]	; (c830 <prvTimerTask+0x30>)
    c814:	4798      	blx	r3
    c816:	0003      	movs	r3, r0
    c818:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    c81a:	68ba      	ldr	r2, [r7, #8]
    c81c:	68fb      	ldr	r3, [r7, #12]
    c81e:	0011      	movs	r1, r2
    c820:	0018      	movs	r0, r3
    c822:	4b04      	ldr	r3, [pc, #16]	; (c834 <prvTimerTask+0x34>)
    c824:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    c826:	4b04      	ldr	r3, [pc, #16]	; (c838 <prvTimerTask+0x38>)
    c828:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    c82a:	e7ef      	b.n	c80c <prvTimerTask+0xc>
    c82c:	00021a35 	.word	0x00021a35
    c830:	0000c8e1 	.word	0x0000c8e1
    c834:	0000c83d 	.word	0x0000c83d
    c838:	0000c9f1 	.word	0x0000c9f1

0000c83c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    c83c:	b580      	push	{r7, lr}
    c83e:	b084      	sub	sp, #16
    c840:	af00      	add	r7, sp, #0
    c842:	6078      	str	r0, [r7, #4]
    c844:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    c846:	4b1e      	ldr	r3, [pc, #120]	; (c8c0 <prvProcessTimerOrBlockTask+0x84>)
    c848:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    c84a:	2308      	movs	r3, #8
    c84c:	18fb      	adds	r3, r7, r3
    c84e:	0018      	movs	r0, r3
    c850:	4b1c      	ldr	r3, [pc, #112]	; (c8c4 <prvProcessTimerOrBlockTask+0x88>)
    c852:	4798      	blx	r3
    c854:	0003      	movs	r3, r0
    c856:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    c858:	68bb      	ldr	r3, [r7, #8]
    c85a:	2b00      	cmp	r3, #0
    c85c:	d129      	bne.n	c8b2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    c85e:	683b      	ldr	r3, [r7, #0]
    c860:	2b00      	cmp	r3, #0
    c862:	d10c      	bne.n	c87e <prvProcessTimerOrBlockTask+0x42>
    c864:	687a      	ldr	r2, [r7, #4]
    c866:	68fb      	ldr	r3, [r7, #12]
    c868:	429a      	cmp	r2, r3
    c86a:	d808      	bhi.n	c87e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    c86c:	4b16      	ldr	r3, [pc, #88]	; (c8c8 <prvProcessTimerOrBlockTask+0x8c>)
    c86e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    c870:	68fa      	ldr	r2, [r7, #12]
    c872:	687b      	ldr	r3, [r7, #4]
    c874:	0011      	movs	r1, r2
    c876:	0018      	movs	r0, r3
    c878:	4b14      	ldr	r3, [pc, #80]	; (c8cc <prvProcessTimerOrBlockTask+0x90>)
    c87a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    c87c:	e01b      	b.n	c8b6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    c87e:	683b      	ldr	r3, [r7, #0]
    c880:	2b00      	cmp	r3, #0
    c882:	d006      	beq.n	c892 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    c884:	4b12      	ldr	r3, [pc, #72]	; (c8d0 <prvProcessTimerOrBlockTask+0x94>)
    c886:	681b      	ldr	r3, [r3, #0]
    c888:	681b      	ldr	r3, [r3, #0]
    c88a:	425a      	negs	r2, r3
    c88c:	4153      	adcs	r3, r2
    c88e:	b2db      	uxtb	r3, r3
    c890:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    c892:	4b10      	ldr	r3, [pc, #64]	; (c8d4 <prvProcessTimerOrBlockTask+0x98>)
    c894:	6818      	ldr	r0, [r3, #0]
    c896:	687a      	ldr	r2, [r7, #4]
    c898:	68fb      	ldr	r3, [r7, #12]
    c89a:	1ad3      	subs	r3, r2, r3
    c89c:	683a      	ldr	r2, [r7, #0]
    c89e:	0019      	movs	r1, r3
    c8a0:	4b0d      	ldr	r3, [pc, #52]	; (c8d8 <prvProcessTimerOrBlockTask+0x9c>)
    c8a2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    c8a4:	4b08      	ldr	r3, [pc, #32]	; (c8c8 <prvProcessTimerOrBlockTask+0x8c>)
    c8a6:	4798      	blx	r3
    c8a8:	1e03      	subs	r3, r0, #0
    c8aa:	d104      	bne.n	c8b6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    c8ac:	4b0b      	ldr	r3, [pc, #44]	; (c8dc <prvProcessTimerOrBlockTask+0xa0>)
    c8ae:	4798      	blx	r3
}
    c8b0:	e001      	b.n	c8b6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    c8b2:	4b05      	ldr	r3, [pc, #20]	; (c8c8 <prvProcessTimerOrBlockTask+0x8c>)
    c8b4:	4798      	blx	r3
}
    c8b6:	46c0      	nop			; (mov r8, r8)
    c8b8:	46bd      	mov	sp, r7
    c8ba:	b004      	add	sp, #16
    c8bc:	bd80      	pop	{r7, pc}
    c8be:	46c0      	nop			; (mov r8, r8)
    c8c0:	0000b675 	.word	0x0000b675
    c8c4:	0000c921 	.word	0x0000c921
    c8c8:	0000b68d 	.word	0x0000b68d
    c8cc:	0000c785 	.word	0x0000c785
    c8d0:	20003e44 	.word	0x20003e44
    c8d4:	20003e48 	.word	0x20003e48
    c8d8:	0000ae15 	.word	0x0000ae15
    c8dc:	000093a1 	.word	0x000093a1

0000c8e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    c8e0:	b580      	push	{r7, lr}
    c8e2:	b084      	sub	sp, #16
    c8e4:	af00      	add	r7, sp, #0
    c8e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    c8e8:	4b0c      	ldr	r3, [pc, #48]	; (c91c <prvGetNextExpireTime+0x3c>)
    c8ea:	681b      	ldr	r3, [r3, #0]
    c8ec:	681b      	ldr	r3, [r3, #0]
    c8ee:	425a      	negs	r2, r3
    c8f0:	4153      	adcs	r3, r2
    c8f2:	b2db      	uxtb	r3, r3
    c8f4:	001a      	movs	r2, r3
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    c8fa:	687b      	ldr	r3, [r7, #4]
    c8fc:	681b      	ldr	r3, [r3, #0]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d105      	bne.n	c90e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    c902:	4b06      	ldr	r3, [pc, #24]	; (c91c <prvGetNextExpireTime+0x3c>)
    c904:	681b      	ldr	r3, [r3, #0]
    c906:	68db      	ldr	r3, [r3, #12]
    c908:	681b      	ldr	r3, [r3, #0]
    c90a:	60fb      	str	r3, [r7, #12]
    c90c:	e001      	b.n	c912 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    c90e:	2300      	movs	r3, #0
    c910:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    c912:	68fb      	ldr	r3, [r7, #12]
}
    c914:	0018      	movs	r0, r3
    c916:	46bd      	mov	sp, r7
    c918:	b004      	add	sp, #16
    c91a:	bd80      	pop	{r7, pc}
    c91c:	20003e40 	.word	0x20003e40

0000c920 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    c920:	b580      	push	{r7, lr}
    c922:	b084      	sub	sp, #16
    c924:	af00      	add	r7, sp, #0
    c926:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    c928:	4b0c      	ldr	r3, [pc, #48]	; (c95c <prvSampleTimeNow+0x3c>)
    c92a:	4798      	blx	r3
    c92c:	0003      	movs	r3, r0
    c92e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    c930:	4b0b      	ldr	r3, [pc, #44]	; (c960 <prvSampleTimeNow+0x40>)
    c932:	681b      	ldr	r3, [r3, #0]
    c934:	68fa      	ldr	r2, [r7, #12]
    c936:	429a      	cmp	r2, r3
    c938:	d205      	bcs.n	c946 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    c93a:	4b0a      	ldr	r3, [pc, #40]	; (c964 <prvSampleTimeNow+0x44>)
    c93c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    c93e:	687b      	ldr	r3, [r7, #4]
    c940:	2201      	movs	r2, #1
    c942:	601a      	str	r2, [r3, #0]
    c944:	e002      	b.n	c94c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    c946:	687b      	ldr	r3, [r7, #4]
    c948:	2200      	movs	r2, #0
    c94a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    c94c:	4b04      	ldr	r3, [pc, #16]	; (c960 <prvSampleTimeNow+0x40>)
    c94e:	68fa      	ldr	r2, [r7, #12]
    c950:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    c952:	68fb      	ldr	r3, [r7, #12]
}
    c954:	0018      	movs	r0, r3
    c956:	46bd      	mov	sp, r7
    c958:	b004      	add	sp, #16
    c95a:	bd80      	pop	{r7, pc}
    c95c:	0000b7fd 	.word	0x0000b7fd
    c960:	20003e50 	.word	0x20003e50
    c964:	0000cb09 	.word	0x0000cb09

0000c968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    c968:	b580      	push	{r7, lr}
    c96a:	b086      	sub	sp, #24
    c96c:	af00      	add	r7, sp, #0
    c96e:	60f8      	str	r0, [r7, #12]
    c970:	60b9      	str	r1, [r7, #8]
    c972:	607a      	str	r2, [r7, #4]
    c974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    c976:	2300      	movs	r3, #0
    c978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    c97a:	68fb      	ldr	r3, [r7, #12]
    c97c:	68ba      	ldr	r2, [r7, #8]
    c97e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    c980:	68fb      	ldr	r3, [r7, #12]
    c982:	68fa      	ldr	r2, [r7, #12]
    c984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    c986:	68ba      	ldr	r2, [r7, #8]
    c988:	687b      	ldr	r3, [r7, #4]
    c98a:	429a      	cmp	r2, r3
    c98c:	d812      	bhi.n	c9b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c98e:	687a      	ldr	r2, [r7, #4]
    c990:	683b      	ldr	r3, [r7, #0]
    c992:	1ad2      	subs	r2, r2, r3
    c994:	68fb      	ldr	r3, [r7, #12]
    c996:	699b      	ldr	r3, [r3, #24]
    c998:	429a      	cmp	r2, r3
    c99a:	d302      	bcc.n	c9a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    c99c:	2301      	movs	r3, #1
    c99e:	617b      	str	r3, [r7, #20]
    c9a0:	e01b      	b.n	c9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    c9a2:	4b10      	ldr	r3, [pc, #64]	; (c9e4 <prvInsertTimerInActiveList+0x7c>)
    c9a4:	681a      	ldr	r2, [r3, #0]
    c9a6:	68fb      	ldr	r3, [r7, #12]
    c9a8:	3304      	adds	r3, #4
    c9aa:	0019      	movs	r1, r3
    c9ac:	0010      	movs	r0, r2
    c9ae:	4b0e      	ldr	r3, [pc, #56]	; (c9e8 <prvInsertTimerInActiveList+0x80>)
    c9b0:	4798      	blx	r3
    c9b2:	e012      	b.n	c9da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    c9b4:	687a      	ldr	r2, [r7, #4]
    c9b6:	683b      	ldr	r3, [r7, #0]
    c9b8:	429a      	cmp	r2, r3
    c9ba:	d206      	bcs.n	c9ca <prvInsertTimerInActiveList+0x62>
    c9bc:	68ba      	ldr	r2, [r7, #8]
    c9be:	683b      	ldr	r3, [r7, #0]
    c9c0:	429a      	cmp	r2, r3
    c9c2:	d302      	bcc.n	c9ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    c9c4:	2301      	movs	r3, #1
    c9c6:	617b      	str	r3, [r7, #20]
    c9c8:	e007      	b.n	c9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    c9ca:	4b08      	ldr	r3, [pc, #32]	; (c9ec <prvInsertTimerInActiveList+0x84>)
    c9cc:	681a      	ldr	r2, [r3, #0]
    c9ce:	68fb      	ldr	r3, [r7, #12]
    c9d0:	3304      	adds	r3, #4
    c9d2:	0019      	movs	r1, r3
    c9d4:	0010      	movs	r0, r2
    c9d6:	4b04      	ldr	r3, [pc, #16]	; (c9e8 <prvInsertTimerInActiveList+0x80>)
    c9d8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    c9da:	697b      	ldr	r3, [r7, #20]
}
    c9dc:	0018      	movs	r0, r3
    c9de:	46bd      	mov	sp, r7
    c9e0:	b006      	add	sp, #24
    c9e2:	bd80      	pop	{r7, pc}
    c9e4:	20003e44 	.word	0x20003e44
    c9e8:	000091bf 	.word	0x000091bf
    c9ec:	20003e40 	.word	0x20003e40

0000c9f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    c9f0:	b590      	push	{r4, r7, lr}
    c9f2:	b08b      	sub	sp, #44	; 0x2c
    c9f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    c9f6:	e068      	b.n	caca <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    c9f8:	2308      	movs	r3, #8
    c9fa:	18fb      	adds	r3, r7, r3
    c9fc:	681b      	ldr	r3, [r3, #0]
    c9fe:	2b00      	cmp	r3, #0
    ca00:	db63      	blt.n	caca <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    ca02:	2308      	movs	r3, #8
    ca04:	18fb      	adds	r3, r7, r3
    ca06:	689b      	ldr	r3, [r3, #8]
    ca08:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    ca0a:	69fb      	ldr	r3, [r7, #28]
    ca0c:	695b      	ldr	r3, [r3, #20]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	d004      	beq.n	ca1c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    ca12:	69fb      	ldr	r3, [r7, #28]
    ca14:	3304      	adds	r3, #4
    ca16:	0018      	movs	r0, r3
    ca18:	4b33      	ldr	r3, [pc, #204]	; (cae8 <prvProcessReceivedCommands+0xf8>)
    ca1a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    ca1c:	1d3b      	adds	r3, r7, #4
    ca1e:	0018      	movs	r0, r3
    ca20:	4b32      	ldr	r3, [pc, #200]	; (caec <prvProcessReceivedCommands+0xfc>)
    ca22:	4798      	blx	r3
    ca24:	0003      	movs	r3, r0
    ca26:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    ca28:	2308      	movs	r3, #8
    ca2a:	18fb      	adds	r3, r7, r3
    ca2c:	681b      	ldr	r3, [r3, #0]
    ca2e:	2b09      	cmp	r3, #9
    ca30:	d84a      	bhi.n	cac8 <prvProcessReceivedCommands+0xd8>
    ca32:	009a      	lsls	r2, r3, #2
    ca34:	4b2e      	ldr	r3, [pc, #184]	; (caf0 <prvProcessReceivedCommands+0x100>)
    ca36:	18d3      	adds	r3, r2, r3
    ca38:	681b      	ldr	r3, [r3, #0]
    ca3a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    ca3c:	2308      	movs	r3, #8
    ca3e:	18fb      	adds	r3, r7, r3
    ca40:	685a      	ldr	r2, [r3, #4]
    ca42:	69fb      	ldr	r3, [r7, #28]
    ca44:	699b      	ldr	r3, [r3, #24]
    ca46:	18d1      	adds	r1, r2, r3
    ca48:	2308      	movs	r3, #8
    ca4a:	18fb      	adds	r3, r7, r3
    ca4c:	685b      	ldr	r3, [r3, #4]
    ca4e:	69ba      	ldr	r2, [r7, #24]
    ca50:	69f8      	ldr	r0, [r7, #28]
    ca52:	4c28      	ldr	r4, [pc, #160]	; (caf4 <prvProcessReceivedCommands+0x104>)
    ca54:	47a0      	blx	r4
    ca56:	1e03      	subs	r3, r0, #0
    ca58:	d037      	beq.n	caca <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    ca5a:	69fb      	ldr	r3, [r7, #28]
    ca5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ca5e:	69fa      	ldr	r2, [r7, #28]
    ca60:	0010      	movs	r0, r2
    ca62:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    ca64:	69fb      	ldr	r3, [r7, #28]
    ca66:	69db      	ldr	r3, [r3, #28]
    ca68:	2b01      	cmp	r3, #1
    ca6a:	d12e      	bne.n	caca <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    ca6c:	2308      	movs	r3, #8
    ca6e:	18fb      	adds	r3, r7, r3
    ca70:	685a      	ldr	r2, [r3, #4]
    ca72:	69fb      	ldr	r3, [r7, #28]
    ca74:	699b      	ldr	r3, [r3, #24]
    ca76:	18d2      	adds	r2, r2, r3
    ca78:	69f8      	ldr	r0, [r7, #28]
    ca7a:	2300      	movs	r3, #0
    ca7c:	9300      	str	r3, [sp, #0]
    ca7e:	2300      	movs	r3, #0
    ca80:	2100      	movs	r1, #0
    ca82:	4c1d      	ldr	r4, [pc, #116]	; (caf8 <prvProcessReceivedCommands+0x108>)
    ca84:	47a0      	blx	r4
    ca86:	0003      	movs	r3, r0
    ca88:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    ca8a:	697b      	ldr	r3, [r7, #20]
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d11c      	bne.n	caca <prvProcessReceivedCommands+0xda>
    ca90:	b672      	cpsid	i
    ca92:	e7fe      	b.n	ca92 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    ca94:	2308      	movs	r3, #8
    ca96:	18fb      	adds	r3, r7, r3
    ca98:	685a      	ldr	r2, [r3, #4]
    ca9a:	69fb      	ldr	r3, [r7, #28]
    ca9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    ca9e:	69fb      	ldr	r3, [r7, #28]
    caa0:	699b      	ldr	r3, [r3, #24]
    caa2:	2b00      	cmp	r3, #0
    caa4:	d101      	bne.n	caaa <prvProcessReceivedCommands+0xba>
    caa6:	b672      	cpsid	i
    caa8:	e7fe      	b.n	caa8 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    caaa:	69fb      	ldr	r3, [r7, #28]
    caac:	699a      	ldr	r2, [r3, #24]
    caae:	69bb      	ldr	r3, [r7, #24]
    cab0:	18d1      	adds	r1, r2, r3
    cab2:	69bb      	ldr	r3, [r7, #24]
    cab4:	69ba      	ldr	r2, [r7, #24]
    cab6:	69f8      	ldr	r0, [r7, #28]
    cab8:	4c0e      	ldr	r4, [pc, #56]	; (caf4 <prvProcessReceivedCommands+0x104>)
    caba:	47a0      	blx	r4
					break;
    cabc:	e005      	b.n	caca <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    cabe:	69fb      	ldr	r3, [r7, #28]
    cac0:	0018      	movs	r0, r3
    cac2:	4b0e      	ldr	r3, [pc, #56]	; (cafc <prvProcessReceivedCommands+0x10c>)
    cac4:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    cac6:	e000      	b.n	caca <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    cac8:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    caca:	4b0d      	ldr	r3, [pc, #52]	; (cb00 <prvProcessReceivedCommands+0x110>)
    cacc:	681b      	ldr	r3, [r3, #0]
    cace:	2208      	movs	r2, #8
    cad0:	18b9      	adds	r1, r7, r2
    cad2:	2200      	movs	r2, #0
    cad4:	0018      	movs	r0, r3
    cad6:	4b0b      	ldr	r3, [pc, #44]	; (cb04 <prvProcessReceivedCommands+0x114>)
    cad8:	4798      	blx	r3
    cada:	1e03      	subs	r3, r0, #0
    cadc:	d18c      	bne.n	c9f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    cade:	46c0      	nop			; (mov r8, r8)
    cae0:	46bd      	mov	sp, r7
    cae2:	b009      	add	sp, #36	; 0x24
    cae4:	bd90      	pop	{r4, r7, pc}
    cae6:	46c0      	nop			; (mov r8, r8)
    cae8:	0000922b 	.word	0x0000922b
    caec:	0000c921 	.word	0x0000c921
    caf0:	000280d0 	.word	0x000280d0
    caf4:	0000c969 	.word	0x0000c969
    caf8:	0000c6dd 	.word	0x0000c6dd
    cafc:	000095b5 	.word	0x000095b5
    cb00:	20003e48 	.word	0x20003e48
    cb04:	0000a209 	.word	0x0000a209

0000cb08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    cb08:	b590      	push	{r4, r7, lr}
    cb0a:	b089      	sub	sp, #36	; 0x24
    cb0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    cb0e:	e03e      	b.n	cb8e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    cb10:	4b28      	ldr	r3, [pc, #160]	; (cbb4 <prvSwitchTimerLists+0xac>)
    cb12:	681b      	ldr	r3, [r3, #0]
    cb14:	68db      	ldr	r3, [r3, #12]
    cb16:	681b      	ldr	r3, [r3, #0]
    cb18:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    cb1a:	4b26      	ldr	r3, [pc, #152]	; (cbb4 <prvSwitchTimerLists+0xac>)
    cb1c:	681b      	ldr	r3, [r3, #0]
    cb1e:	68db      	ldr	r3, [r3, #12]
    cb20:	68db      	ldr	r3, [r3, #12]
    cb22:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    cb24:	693b      	ldr	r3, [r7, #16]
    cb26:	3304      	adds	r3, #4
    cb28:	0018      	movs	r0, r3
    cb2a:	4b23      	ldr	r3, [pc, #140]	; (cbb8 <prvSwitchTimerLists+0xb0>)
    cb2c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    cb2e:	693b      	ldr	r3, [r7, #16]
    cb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb32:	693a      	ldr	r2, [r7, #16]
    cb34:	0010      	movs	r0, r2
    cb36:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    cb38:	693b      	ldr	r3, [r7, #16]
    cb3a:	69db      	ldr	r3, [r3, #28]
    cb3c:	2b01      	cmp	r3, #1
    cb3e:	d126      	bne.n	cb8e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    cb40:	693b      	ldr	r3, [r7, #16]
    cb42:	699a      	ldr	r2, [r3, #24]
    cb44:	697b      	ldr	r3, [r7, #20]
    cb46:	18d3      	adds	r3, r2, r3
    cb48:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    cb4a:	68fa      	ldr	r2, [r7, #12]
    cb4c:	697b      	ldr	r3, [r7, #20]
    cb4e:	429a      	cmp	r2, r3
    cb50:	d90e      	bls.n	cb70 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    cb52:	693b      	ldr	r3, [r7, #16]
    cb54:	68fa      	ldr	r2, [r7, #12]
    cb56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    cb58:	693b      	ldr	r3, [r7, #16]
    cb5a:	693a      	ldr	r2, [r7, #16]
    cb5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    cb5e:	4b15      	ldr	r3, [pc, #84]	; (cbb4 <prvSwitchTimerLists+0xac>)
    cb60:	681a      	ldr	r2, [r3, #0]
    cb62:	693b      	ldr	r3, [r7, #16]
    cb64:	3304      	adds	r3, #4
    cb66:	0019      	movs	r1, r3
    cb68:	0010      	movs	r0, r2
    cb6a:	4b14      	ldr	r3, [pc, #80]	; (cbbc <prvSwitchTimerLists+0xb4>)
    cb6c:	4798      	blx	r3
    cb6e:	e00e      	b.n	cb8e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    cb70:	697a      	ldr	r2, [r7, #20]
    cb72:	6938      	ldr	r0, [r7, #16]
    cb74:	2300      	movs	r3, #0
    cb76:	9300      	str	r3, [sp, #0]
    cb78:	2300      	movs	r3, #0
    cb7a:	2100      	movs	r1, #0
    cb7c:	4c10      	ldr	r4, [pc, #64]	; (cbc0 <prvSwitchTimerLists+0xb8>)
    cb7e:	47a0      	blx	r4
    cb80:	0003      	movs	r3, r0
    cb82:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    cb84:	68bb      	ldr	r3, [r7, #8]
    cb86:	2b00      	cmp	r3, #0
    cb88:	d101      	bne.n	cb8e <prvSwitchTimerLists+0x86>
    cb8a:	b672      	cpsid	i
    cb8c:	e7fe      	b.n	cb8c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    cb8e:	4b09      	ldr	r3, [pc, #36]	; (cbb4 <prvSwitchTimerLists+0xac>)
    cb90:	681b      	ldr	r3, [r3, #0]
    cb92:	681b      	ldr	r3, [r3, #0]
    cb94:	2b00      	cmp	r3, #0
    cb96:	d1bb      	bne.n	cb10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    cb98:	4b06      	ldr	r3, [pc, #24]	; (cbb4 <prvSwitchTimerLists+0xac>)
    cb9a:	681b      	ldr	r3, [r3, #0]
    cb9c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    cb9e:	4b09      	ldr	r3, [pc, #36]	; (cbc4 <prvSwitchTimerLists+0xbc>)
    cba0:	681a      	ldr	r2, [r3, #0]
    cba2:	4b04      	ldr	r3, [pc, #16]	; (cbb4 <prvSwitchTimerLists+0xac>)
    cba4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    cba6:	4b07      	ldr	r3, [pc, #28]	; (cbc4 <prvSwitchTimerLists+0xbc>)
    cba8:	687a      	ldr	r2, [r7, #4]
    cbaa:	601a      	str	r2, [r3, #0]
}
    cbac:	46c0      	nop			; (mov r8, r8)
    cbae:	46bd      	mov	sp, r7
    cbb0:	b007      	add	sp, #28
    cbb2:	bd90      	pop	{r4, r7, pc}
    cbb4:	20003e40 	.word	0x20003e40
    cbb8:	0000922b 	.word	0x0000922b
    cbbc:	000091bf 	.word	0x000091bf
    cbc0:	0000c6dd 	.word	0x0000c6dd
    cbc4:	20003e44 	.word	0x20003e44

0000cbc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    cbc8:	b580      	push	{r7, lr}
    cbca:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    cbcc:	4b10      	ldr	r3, [pc, #64]	; (cc10 <prvCheckForValidListAndQueue+0x48>)
    cbce:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    cbd0:	4b10      	ldr	r3, [pc, #64]	; (cc14 <prvCheckForValidListAndQueue+0x4c>)
    cbd2:	681b      	ldr	r3, [r3, #0]
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	d115      	bne.n	cc04 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    cbd8:	4b0f      	ldr	r3, [pc, #60]	; (cc18 <prvCheckForValidListAndQueue+0x50>)
    cbda:	0018      	movs	r0, r3
    cbdc:	4b0f      	ldr	r3, [pc, #60]	; (cc1c <prvCheckForValidListAndQueue+0x54>)
    cbde:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    cbe0:	4b0f      	ldr	r3, [pc, #60]	; (cc20 <prvCheckForValidListAndQueue+0x58>)
    cbe2:	0018      	movs	r0, r3
    cbe4:	4b0d      	ldr	r3, [pc, #52]	; (cc1c <prvCheckForValidListAndQueue+0x54>)
    cbe6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    cbe8:	4b0e      	ldr	r3, [pc, #56]	; (cc24 <prvCheckForValidListAndQueue+0x5c>)
    cbea:	4a0b      	ldr	r2, [pc, #44]	; (cc18 <prvCheckForValidListAndQueue+0x50>)
    cbec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    cbee:	4b0e      	ldr	r3, [pc, #56]	; (cc28 <prvCheckForValidListAndQueue+0x60>)
    cbf0:	4a0b      	ldr	r2, [pc, #44]	; (cc20 <prvCheckForValidListAndQueue+0x58>)
    cbf2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    cbf4:	2200      	movs	r2, #0
    cbf6:	210c      	movs	r1, #12
    cbf8:	2005      	movs	r0, #5
    cbfa:	4b0c      	ldr	r3, [pc, #48]	; (cc2c <prvCheckForValidListAndQueue+0x64>)
    cbfc:	4798      	blx	r3
    cbfe:	0002      	movs	r2, r0
    cc00:	4b04      	ldr	r3, [pc, #16]	; (cc14 <prvCheckForValidListAndQueue+0x4c>)
    cc02:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    cc04:	4b0a      	ldr	r3, [pc, #40]	; (cc30 <prvCheckForValidListAndQueue+0x68>)
    cc06:	4798      	blx	r3
}
    cc08:	46c0      	nop			; (mov r8, r8)
    cc0a:	46bd      	mov	sp, r7
    cc0c:	bd80      	pop	{r7, pc}
    cc0e:	46c0      	nop			; (mov r8, r8)
    cc10:	000093b9 	.word	0x000093b9
    cc14:	20003e48 	.word	0x20003e48
    cc18:	20003e18 	.word	0x20003e18
    cc1c:	00009129 	.word	0x00009129
    cc20:	20003e2c 	.word	0x20003e2c
    cc24:	20003e40 	.word	0x20003e40
    cc28:	20003e44 	.word	0x20003e44
    cc2c:	000096a9 	.word	0x000096a9
    cc30:	000093dd 	.word	0x000093dd

0000cc34 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    cc34:	b580      	push	{r7, lr}
    cc36:	b082      	sub	sp, #8
    cc38:	af00      	add	r7, sp, #0
    cc3a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    cc3c:	687b      	ldr	r3, [r7, #4]
    cc3e:	7c1b      	ldrb	r3, [r3, #16]
    cc40:	2b00      	cmp	r3, #0
    cc42:	d00b      	beq.n	cc5c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    cc44:	687b      	ldr	r3, [r7, #4]
    cc46:	689b      	ldr	r3, [r3, #8]
    cc48:	1c5a      	adds	r2, r3, #1
    cc4a:	687b      	ldr	r3, [r7, #4]
    cc4c:	68d9      	ldr	r1, [r3, #12]
    cc4e:	4b10      	ldr	r3, [pc, #64]	; (cc90 <advance_pointer+0x5c>)
    cc50:	0010      	movs	r0, r2
    cc52:	4798      	blx	r3
    cc54:	000b      	movs	r3, r1
    cc56:	001a      	movs	r2, r3
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    cc5c:	687b      	ldr	r3, [r7, #4]
    cc5e:	685b      	ldr	r3, [r3, #4]
    cc60:	1c5a      	adds	r2, r3, #1
    cc62:	687b      	ldr	r3, [r7, #4]
    cc64:	68d9      	ldr	r1, [r3, #12]
    cc66:	4b0a      	ldr	r3, [pc, #40]	; (cc90 <advance_pointer+0x5c>)
    cc68:	0010      	movs	r0, r2
    cc6a:	4798      	blx	r3
    cc6c:	000b      	movs	r3, r1
    cc6e:	001a      	movs	r2, r3
    cc70:	687b      	ldr	r3, [r7, #4]
    cc72:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    cc74:	687b      	ldr	r3, [r7, #4]
    cc76:	685a      	ldr	r2, [r3, #4]
    cc78:	687b      	ldr	r3, [r7, #4]
    cc7a:	689b      	ldr	r3, [r3, #8]
    cc7c:	1ad3      	subs	r3, r2, r3
    cc7e:	425a      	negs	r2, r3
    cc80:	4153      	adcs	r3, r2
    cc82:	b2da      	uxtb	r2, r3
    cc84:	687b      	ldr	r3, [r7, #4]
    cc86:	741a      	strb	r2, [r3, #16]
 }
    cc88:	46c0      	nop			; (mov r8, r8)
    cc8a:	46bd      	mov	sp, r7
    cc8c:	b002      	add	sp, #8
    cc8e:	bd80      	pop	{r7, pc}
    cc90:	00021e09 	.word	0x00021e09

0000cc94 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    cc94:	b580      	push	{r7, lr}
    cc96:	b082      	sub	sp, #8
    cc98:	af00      	add	r7, sp, #0
    cc9a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    cc9c:	687b      	ldr	r3, [r7, #4]
    cc9e:	2200      	movs	r2, #0
    cca0:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	689b      	ldr	r3, [r3, #8]
    cca6:	1c5a      	adds	r2, r3, #1
    cca8:	687b      	ldr	r3, [r7, #4]
    ccaa:	68d9      	ldr	r1, [r3, #12]
    ccac:	4b05      	ldr	r3, [pc, #20]	; (ccc4 <retreat_pointer+0x30>)
    ccae:	0010      	movs	r0, r2
    ccb0:	4798      	blx	r3
    ccb2:	000b      	movs	r3, r1
    ccb4:	001a      	movs	r2, r3
    ccb6:	687b      	ldr	r3, [r7, #4]
    ccb8:	609a      	str	r2, [r3, #8]
 }
    ccba:	46c0      	nop			; (mov r8, r8)
    ccbc:	46bd      	mov	sp, r7
    ccbe:	b002      	add	sp, #8
    ccc0:	bd80      	pop	{r7, pc}
    ccc2:	46c0      	nop			; (mov r8, r8)
    ccc4:	00021e09 	.word	0x00021e09

0000ccc8 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    ccc8:	b580      	push	{r7, lr}
    ccca:	b084      	sub	sp, #16
    cccc:	af00      	add	r7, sp, #0
    ccce:	6078      	str	r0, [r7, #4]
    ccd0:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    ccd2:	2014      	movs	r0, #20
    ccd4:	4b09      	ldr	r3, [pc, #36]	; (ccfc <circular_buf_init+0x34>)
    ccd6:	4798      	blx	r3
    ccd8:	0003      	movs	r3, r0
    ccda:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    ccdc:	68fb      	ldr	r3, [r7, #12]
    ccde:	687a      	ldr	r2, [r7, #4]
    cce0:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    cce2:	68fb      	ldr	r3, [r7, #12]
    cce4:	683a      	ldr	r2, [r7, #0]
    cce6:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    cce8:	68fb      	ldr	r3, [r7, #12]
    ccea:	0018      	movs	r0, r3
    ccec:	4b04      	ldr	r3, [pc, #16]	; (cd00 <circular_buf_init+0x38>)
    ccee:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    ccf0:	68fb      	ldr	r3, [r7, #12]
 }
    ccf2:	0018      	movs	r0, r3
    ccf4:	46bd      	mov	sp, r7
    ccf6:	b004      	add	sp, #16
    ccf8:	bd80      	pop	{r7, pc}
    ccfa:	46c0      	nop			; (mov r8, r8)
    ccfc:	00024759 	.word	0x00024759
    cd00:	0000cd05 	.word	0x0000cd05

0000cd04 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    cd04:	b580      	push	{r7, lr}
    cd06:	b082      	sub	sp, #8
    cd08:	af00      	add	r7, sp, #0
    cd0a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    cd0c:	687b      	ldr	r3, [r7, #4]
    cd0e:	2200      	movs	r2, #0
    cd10:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    cd12:	687b      	ldr	r3, [r7, #4]
    cd14:	2200      	movs	r2, #0
    cd16:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    cd18:	687b      	ldr	r3, [r7, #4]
    cd1a:	2200      	movs	r2, #0
    cd1c:	741a      	strb	r2, [r3, #16]
 }
    cd1e:	46c0      	nop			; (mov r8, r8)
    cd20:	46bd      	mov	sp, r7
    cd22:	b002      	add	sp, #8
    cd24:	bd80      	pop	{r7, pc}
	...

0000cd28 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    cd28:	b580      	push	{r7, lr}
    cd2a:	b082      	sub	sp, #8
    cd2c:	af00      	add	r7, sp, #0
    cd2e:	6078      	str	r0, [r7, #4]
    cd30:	000a      	movs	r2, r1
    cd32:	1cfb      	adds	r3, r7, #3
    cd34:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    cd36:	687b      	ldr	r3, [r7, #4]
    cd38:	681a      	ldr	r2, [r3, #0]
    cd3a:	687b      	ldr	r3, [r7, #4]
    cd3c:	685b      	ldr	r3, [r3, #4]
    cd3e:	18d3      	adds	r3, r2, r3
    cd40:	1cfa      	adds	r2, r7, #3
    cd42:	7812      	ldrb	r2, [r2, #0]
    cd44:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    cd46:	687b      	ldr	r3, [r7, #4]
    cd48:	0018      	movs	r0, r3
    cd4a:	4b03      	ldr	r3, [pc, #12]	; (cd58 <circular_buf_put+0x30>)
    cd4c:	4798      	blx	r3
 }
    cd4e:	46c0      	nop			; (mov r8, r8)
    cd50:	46bd      	mov	sp, r7
    cd52:	b002      	add	sp, #8
    cd54:	bd80      	pop	{r7, pc}
    cd56:	46c0      	nop			; (mov r8, r8)
    cd58:	0000cc35 	.word	0x0000cc35

0000cd5c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    cd5c:	b580      	push	{r7, lr}
    cd5e:	b084      	sub	sp, #16
    cd60:	af00      	add	r7, sp, #0
    cd62:	6078      	str	r0, [r7, #4]
    cd64:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    cd66:	2301      	movs	r3, #1
    cd68:	425b      	negs	r3, r3
    cd6a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    cd6c:	687b      	ldr	r3, [r7, #4]
    cd6e:	0018      	movs	r0, r3
    cd70:	4b0d      	ldr	r3, [pc, #52]	; (cda8 <circular_buf_get+0x4c>)
    cd72:	4798      	blx	r3
    cd74:	0003      	movs	r3, r0
    cd76:	001a      	movs	r2, r3
    cd78:	2301      	movs	r3, #1
    cd7a:	4053      	eors	r3, r2
    cd7c:	b2db      	uxtb	r3, r3
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d00d      	beq.n	cd9e <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    cd82:	687b      	ldr	r3, [r7, #4]
    cd84:	681a      	ldr	r2, [r3, #0]
    cd86:	687b      	ldr	r3, [r7, #4]
    cd88:	689b      	ldr	r3, [r3, #8]
    cd8a:	18d3      	adds	r3, r2, r3
    cd8c:	781a      	ldrb	r2, [r3, #0]
    cd8e:	683b      	ldr	r3, [r7, #0]
    cd90:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    cd92:	687b      	ldr	r3, [r7, #4]
    cd94:	0018      	movs	r0, r3
    cd96:	4b05      	ldr	r3, [pc, #20]	; (cdac <circular_buf_get+0x50>)
    cd98:	4798      	blx	r3

		 r = 0;
    cd9a:	2300      	movs	r3, #0
    cd9c:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    cd9e:	68fb      	ldr	r3, [r7, #12]
 }
    cda0:	0018      	movs	r0, r3
    cda2:	46bd      	mov	sp, r7
    cda4:	b004      	add	sp, #16
    cda6:	bd80      	pop	{r7, pc}
    cda8:	0000cdb1 	.word	0x0000cdb1
    cdac:	0000cc95 	.word	0x0000cc95

0000cdb0 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    cdb0:	b580      	push	{r7, lr}
    cdb2:	b082      	sub	sp, #8
    cdb4:	af00      	add	r7, sp, #0
    cdb6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    cdb8:	687b      	ldr	r3, [r7, #4]
    cdba:	7c1b      	ldrb	r3, [r3, #16]
    cdbc:	2201      	movs	r2, #1
    cdbe:	4053      	eors	r3, r2
    cdc0:	b2db      	uxtb	r3, r3
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	d007      	beq.n	cdd6 <circular_buf_empty+0x26>
    cdc6:	687b      	ldr	r3, [r7, #4]
    cdc8:	685a      	ldr	r2, [r3, #4]
    cdca:	687b      	ldr	r3, [r7, #4]
    cdcc:	689b      	ldr	r3, [r3, #8]
    cdce:	429a      	cmp	r2, r3
    cdd0:	d101      	bne.n	cdd6 <circular_buf_empty+0x26>
    cdd2:	2301      	movs	r3, #1
    cdd4:	e000      	b.n	cdd8 <circular_buf_empty+0x28>
    cdd6:	2300      	movs	r3, #0
    cdd8:	1c1a      	adds	r2, r3, #0
    cdda:	2301      	movs	r3, #1
    cddc:	4013      	ands	r3, r2
    cdde:	b2db      	uxtb	r3, r3
 }
    cde0:	0018      	movs	r0, r3
    cde2:	46bd      	mov	sp, r7
    cde4:	b002      	add	sp, #8
    cde6:	bd80      	pop	{r7, pc}

0000cde8 <system_interrupt_enable>:
{
    cde8:	b580      	push	{r7, lr}
    cdea:	b082      	sub	sp, #8
    cdec:	af00      	add	r7, sp, #0
    cdee:	0002      	movs	r2, r0
    cdf0:	1dfb      	adds	r3, r7, #7
    cdf2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cdf4:	4b06      	ldr	r3, [pc, #24]	; (ce10 <system_interrupt_enable+0x28>)
    cdf6:	1dfa      	adds	r2, r7, #7
    cdf8:	7812      	ldrb	r2, [r2, #0]
    cdfa:	0011      	movs	r1, r2
    cdfc:	221f      	movs	r2, #31
    cdfe:	400a      	ands	r2, r1
    ce00:	2101      	movs	r1, #1
    ce02:	4091      	lsls	r1, r2
    ce04:	000a      	movs	r2, r1
    ce06:	601a      	str	r2, [r3, #0]
}
    ce08:	46c0      	nop			; (mov r8, r8)
    ce0a:	46bd      	mov	sp, r7
    ce0c:	b002      	add	sp, #8
    ce0e:	bd80      	pop	{r7, pc}
    ce10:	e000e100 	.word	0xe000e100

0000ce14 <usart_is_syncing>:
{
    ce14:	b580      	push	{r7, lr}
    ce16:	b084      	sub	sp, #16
    ce18:	af00      	add	r7, sp, #0
    ce1a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    ce1c:	687b      	ldr	r3, [r7, #4]
    ce1e:	681b      	ldr	r3, [r3, #0]
    ce20:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    ce22:	68fb      	ldr	r3, [r7, #12]
    ce24:	69db      	ldr	r3, [r3, #28]
    ce26:	1e5a      	subs	r2, r3, #1
    ce28:	4193      	sbcs	r3, r2
    ce2a:	b2db      	uxtb	r3, r3
}
    ce2c:	0018      	movs	r0, r3
    ce2e:	46bd      	mov	sp, r7
    ce30:	b004      	add	sp, #16
    ce32:	bd80      	pop	{r7, pc}

0000ce34 <_usart_wait_for_sync>:
{
    ce34:	b580      	push	{r7, lr}
    ce36:	b082      	sub	sp, #8
    ce38:	af00      	add	r7, sp, #0
    ce3a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    ce3c:	46c0      	nop			; (mov r8, r8)
    ce3e:	687b      	ldr	r3, [r7, #4]
    ce40:	0018      	movs	r0, r3
    ce42:	4b04      	ldr	r3, [pc, #16]	; (ce54 <_usart_wait_for_sync+0x20>)
    ce44:	4798      	blx	r3
    ce46:	1e03      	subs	r3, r0, #0
    ce48:	d1f9      	bne.n	ce3e <_usart_wait_for_sync+0xa>
}
    ce4a:	46c0      	nop			; (mov r8, r8)
    ce4c:	46bd      	mov	sp, r7
    ce4e:	b002      	add	sp, #8
    ce50:	bd80      	pop	{r7, pc}
    ce52:	46c0      	nop			; (mov r8, r8)
    ce54:	0000ce15 	.word	0x0000ce15

0000ce58 <usart_get_config_defaults>:
{
    ce58:	b580      	push	{r7, lr}
    ce5a:	b082      	sub	sp, #8
    ce5c:	af00      	add	r7, sp, #0
    ce5e:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
    ce60:	687b      	ldr	r3, [r7, #4]
    ce62:	2280      	movs	r2, #128	; 0x80
    ce64:	05d2      	lsls	r2, r2, #23
    ce66:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    ce68:	687b      	ldr	r3, [r7, #4]
    ce6a:	2200      	movs	r2, #0
    ce6c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    ce6e:	687b      	ldr	r3, [r7, #4]
    ce70:	22ff      	movs	r2, #255	; 0xff
    ce72:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    ce74:	687b      	ldr	r3, [r7, #4]
    ce76:	2200      	movs	r2, #0
    ce78:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ce7a:	687b      	ldr	r3, [r7, #4]
    ce7c:	2200      	movs	r2, #0
    ce7e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    ce80:	687b      	ldr	r3, [r7, #4]
    ce82:	2296      	movs	r2, #150	; 0x96
    ce84:	0192      	lsls	r2, r2, #6
    ce86:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	2224      	movs	r2, #36	; 0x24
    ce8c:	2101      	movs	r1, #1
    ce8e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    ce90:	687b      	ldr	r3, [r7, #4]
    ce92:	2225      	movs	r2, #37	; 0x25
    ce94:	2101      	movs	r1, #1
    ce96:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    ce98:	687b      	ldr	r3, [r7, #4]
    ce9a:	2226      	movs	r2, #38	; 0x26
    ce9c:	2100      	movs	r1, #0
    ce9e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    cea0:	687b      	ldr	r3, [r7, #4]
    cea2:	2227      	movs	r2, #39	; 0x27
    cea4:	2100      	movs	r1, #0
    cea6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    cea8:	687b      	ldr	r3, [r7, #4]
    ceaa:	2200      	movs	r2, #0
    ceac:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    ceae:	687b      	ldr	r3, [r7, #4]
    ceb0:	2288      	movs	r2, #136	; 0x88
    ceb2:	0352      	lsls	r2, r2, #13
    ceb4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    ceb6:	687b      	ldr	r3, [r7, #4]
    ceb8:	222c      	movs	r2, #44	; 0x2c
    ceba:	2100      	movs	r1, #0
    cebc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	222d      	movs	r2, #45	; 0x2d
    cec2:	2100      	movs	r1, #0
    cec4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    cec6:	687b      	ldr	r3, [r7, #4]
    cec8:	2200      	movs	r2, #0
    ceca:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    cecc:	687b      	ldr	r3, [r7, #4]
    cece:	2200      	movs	r2, #0
    ced0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	2200      	movs	r2, #0
    ced6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    ced8:	687b      	ldr	r3, [r7, #4]
    ceda:	2200      	movs	r2, #0
    cedc:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    cede:	687b      	ldr	r3, [r7, #4]
    cee0:	2200      	movs	r2, #0
    cee2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    cee4:	687b      	ldr	r3, [r7, #4]
    cee6:	2200      	movs	r2, #0
    cee8:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
    ceea:	687b      	ldr	r3, [r7, #4]
    ceec:	2200      	movs	r2, #0
    ceee:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
    cef0:	687b      	ldr	r3, [r7, #4]
    cef2:	2200      	movs	r2, #0
    cef4:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
    cef6:	687b      	ldr	r3, [r7, #4]
    cef8:	2200      	movs	r2, #0
    cefa:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
    cefc:	687b      	ldr	r3, [r7, #4]
    cefe:	2200      	movs	r2, #0
    cf00:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    cf02:	687b      	ldr	r3, [r7, #4]
    cf04:	2213      	movs	r2, #19
    cf06:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
    cf08:	687b      	ldr	r3, [r7, #4]
    cf0a:	2200      	movs	r2, #0
    cf0c:	775a      	strb	r2, [r3, #29]
}
    cf0e:	46c0      	nop			; (mov r8, r8)
    cf10:	46bd      	mov	sp, r7
    cf12:	b002      	add	sp, #8
    cf14:	bd80      	pop	{r7, pc}
	...

0000cf18 <usart_enable>:
{
    cf18:	b580      	push	{r7, lr}
    cf1a:	b084      	sub	sp, #16
    cf1c:	af00      	add	r7, sp, #0
    cf1e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    cf20:	687b      	ldr	r3, [r7, #4]
    cf22:	681b      	ldr	r3, [r3, #0]
    cf24:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cf26:	687b      	ldr	r3, [r7, #4]
    cf28:	681b      	ldr	r3, [r3, #0]
    cf2a:	0018      	movs	r0, r3
    cf2c:	4b09      	ldr	r3, [pc, #36]	; (cf54 <usart_enable+0x3c>)
    cf2e:	4798      	blx	r3
    cf30:	0003      	movs	r3, r0
    cf32:	0018      	movs	r0, r3
    cf34:	4b08      	ldr	r3, [pc, #32]	; (cf58 <usart_enable+0x40>)
    cf36:	4798      	blx	r3
	_usart_wait_for_sync(module);
    cf38:	687b      	ldr	r3, [r7, #4]
    cf3a:	0018      	movs	r0, r3
    cf3c:	4b07      	ldr	r3, [pc, #28]	; (cf5c <usart_enable+0x44>)
    cf3e:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    cf40:	68fb      	ldr	r3, [r7, #12]
    cf42:	681b      	ldr	r3, [r3, #0]
    cf44:	2202      	movs	r2, #2
    cf46:	431a      	orrs	r2, r3
    cf48:	68fb      	ldr	r3, [r7, #12]
    cf4a:	601a      	str	r2, [r3, #0]
}
    cf4c:	46c0      	nop			; (mov r8, r8)
    cf4e:	46bd      	mov	sp, r7
    cf50:	b004      	add	sp, #16
    cf52:	bd80      	pop	{r7, pc}
    cf54:	00016981 	.word	0x00016981
    cf58:	0000cde9 	.word	0x0000cde9
    cf5c:	0000ce35 	.word	0x0000ce35

0000cf60 <usart_enable_callback>:
{
    cf60:	b580      	push	{r7, lr}
    cf62:	b082      	sub	sp, #8
    cf64:	af00      	add	r7, sp, #0
    cf66:	6078      	str	r0, [r7, #4]
    cf68:	000a      	movs	r2, r1
    cf6a:	1cfb      	adds	r3, r7, #3
    cf6c:	701a      	strb	r2, [r3, #0]
	module->callback_enable_mask |= (1 << callback_type);
    cf6e:	687b      	ldr	r3, [r7, #4]
    cf70:	2231      	movs	r2, #49	; 0x31
    cf72:	5c9b      	ldrb	r3, [r3, r2]
    cf74:	b25a      	sxtb	r2, r3
    cf76:	1cfb      	adds	r3, r7, #3
    cf78:	781b      	ldrb	r3, [r3, #0]
    cf7a:	2101      	movs	r1, #1
    cf7c:	4099      	lsls	r1, r3
    cf7e:	000b      	movs	r3, r1
    cf80:	b25b      	sxtb	r3, r3
    cf82:	4313      	orrs	r3, r2
    cf84:	b25b      	sxtb	r3, r3
    cf86:	b2d9      	uxtb	r1, r3
    cf88:	687b      	ldr	r3, [r7, #4]
    cf8a:	2231      	movs	r2, #49	; 0x31
    cf8c:	5499      	strb	r1, [r3, r2]
}
    cf8e:	46c0      	nop			; (mov r8, r8)
    cf90:	46bd      	mov	sp, r7
    cf92:	b002      	add	sp, #8
    cf94:	bd80      	pop	{r7, pc}
	...

0000cf98 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
    cf98:	b580      	push	{r7, lr}
    cf9a:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
    cf9c:	2380      	movs	r3, #128	; 0x80
    cf9e:	009a      	lsls	r2, r3, #2
    cfa0:	4b0f      	ldr	r3, [pc, #60]	; (cfe0 <InitializeSerialConsole+0x48>)
    cfa2:	0011      	movs	r1, r2
    cfa4:	0018      	movs	r0, r3
    cfa6:	4b0f      	ldr	r3, [pc, #60]	; (cfe4 <InitializeSerialConsole+0x4c>)
    cfa8:	4798      	blx	r3
    cfaa:	0002      	movs	r2, r0
    cfac:	4b0e      	ldr	r3, [pc, #56]	; (cfe8 <InitializeSerialConsole+0x50>)
    cfae:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
    cfb0:	2380      	movs	r3, #128	; 0x80
    cfb2:	009a      	lsls	r2, r3, #2
    cfb4:	4b0d      	ldr	r3, [pc, #52]	; (cfec <InitializeSerialConsole+0x54>)
    cfb6:	0011      	movs	r1, r2
    cfb8:	0018      	movs	r0, r3
    cfba:	4b0a      	ldr	r3, [pc, #40]	; (cfe4 <InitializeSerialConsole+0x4c>)
    cfbc:	4798      	blx	r3
    cfbe:	0002      	movs	r2, r0
    cfc0:	4b0b      	ldr	r3, [pc, #44]	; (cff0 <InitializeSerialConsole+0x58>)
    cfc2:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
    cfc4:	4b0b      	ldr	r3, [pc, #44]	; (cff4 <InitializeSerialConsole+0x5c>)
    cfc6:	4798      	blx	r3
    configure_usart_callbacks();
    cfc8:	4b0b      	ldr	r3, [pc, #44]	; (cff8 <InitializeSerialConsole+0x60>)
    cfca:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
    cfcc:	490b      	ldr	r1, [pc, #44]	; (cffc <InitializeSerialConsole+0x64>)
    cfce:	4b0c      	ldr	r3, [pc, #48]	; (d000 <InitializeSerialConsole+0x68>)
    cfd0:	2201      	movs	r2, #1
    cfd2:	0018      	movs	r0, r3
    cfd4:	4b0b      	ldr	r3, [pc, #44]	; (d004 <InitializeSerialConsole+0x6c>)
    cfd6:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
    cfd8:	46c0      	nop			; (mov r8, r8)
    cfda:	46bd      	mov	sp, r7
    cfdc:	bd80      	pop	{r7, pc}
    cfde:	46c0      	nop			; (mov r8, r8)
    cfe0:	2000550c 	.word	0x2000550c
    cfe4:	0000ccc9 	.word	0x0000ccc9
    cfe8:	20005304 	.word	0x20005304
    cfec:	2000530c 	.word	0x2000530c
    cff0:	20005710 	.word	0x20005710
    cff4:	0000d16d 	.word	0x0000d16d
    cff8:	0000d1e5 	.word	0x0000d1e5
    cffc:	20005308 	.word	0x20005308
    d000:	200052d0 	.word	0x200052d0
    d004:	00018229 	.word	0x00018229

0000d008 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
    d008:	b580      	push	{r7, lr}
    d00a:	b084      	sub	sp, #16
    d00c:	af00      	add	r7, sp, #0
    d00e:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    d010:	4b1a      	ldr	r3, [pc, #104]	; (d07c <SerialConsoleWriteString+0x74>)
    d012:	4798      	blx	r3
    if (string != NULL) {
    d014:	687b      	ldr	r3, [r7, #4]
    d016:	2b00      	cmp	r3, #0
    d018:	d02a      	beq.n	d070 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
    d01a:	2300      	movs	r3, #0
    d01c:	60fb      	str	r3, [r7, #12]
    d01e:	e00b      	b.n	d038 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
    d020:	4b17      	ldr	r3, [pc, #92]	; (d080 <SerialConsoleWriteString+0x78>)
    d022:	6818      	ldr	r0, [r3, #0]
    d024:	687a      	ldr	r2, [r7, #4]
    d026:	68fb      	ldr	r3, [r7, #12]
    d028:	18d3      	adds	r3, r2, r3
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	0019      	movs	r1, r3
    d02e:	4b15      	ldr	r3, [pc, #84]	; (d084 <SerialConsoleWriteString+0x7c>)
    d030:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
    d032:	68fb      	ldr	r3, [r7, #12]
    d034:	3301      	adds	r3, #1
    d036:	60fb      	str	r3, [r7, #12]
    d038:	687b      	ldr	r3, [r7, #4]
    d03a:	0018      	movs	r0, r3
    d03c:	4b12      	ldr	r3, [pc, #72]	; (d088 <SerialConsoleWriteString+0x80>)
    d03e:	4798      	blx	r3
    d040:	0002      	movs	r2, r0
    d042:	68fb      	ldr	r3, [r7, #12]
    d044:	429a      	cmp	r2, r3
    d046:	d8eb      	bhi.n	d020 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    d048:	4b10      	ldr	r3, [pc, #64]	; (d08c <SerialConsoleWriteString+0x84>)
    d04a:	2101      	movs	r1, #1
    d04c:	0018      	movs	r0, r3
    d04e:	4b10      	ldr	r3, [pc, #64]	; (d090 <SerialConsoleWriteString+0x88>)
    d050:	4798      	blx	r3
    d052:	1e03      	subs	r3, r0, #0
    d054:	d10c      	bne.n	d070 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
    d056:	4b0a      	ldr	r3, [pc, #40]	; (d080 <SerialConsoleWriteString+0x78>)
    d058:	681b      	ldr	r3, [r3, #0]
    d05a:	4a0e      	ldr	r2, [pc, #56]	; (d094 <SerialConsoleWriteString+0x8c>)
    d05c:	0011      	movs	r1, r2
    d05e:	0018      	movs	r0, r3
    d060:	4b0d      	ldr	r3, [pc, #52]	; (d098 <SerialConsoleWriteString+0x90>)
    d062:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    d064:	490b      	ldr	r1, [pc, #44]	; (d094 <SerialConsoleWriteString+0x8c>)
    d066:	4b09      	ldr	r3, [pc, #36]	; (d08c <SerialConsoleWriteString+0x84>)
    d068:	2201      	movs	r2, #1
    d06a:	0018      	movs	r0, r3
    d06c:	4b0b      	ldr	r3, [pc, #44]	; (d09c <SerialConsoleWriteString+0x94>)
    d06e:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
    d070:	4b0b      	ldr	r3, [pc, #44]	; (d0a0 <SerialConsoleWriteString+0x98>)
    d072:	4798      	blx	r3
}
    d074:	46c0      	nop			; (mov r8, r8)
    d076:	46bd      	mov	sp, r7
    d078:	b004      	add	sp, #16
    d07a:	bd80      	pop	{r7, pc}
    d07c:	0000b675 	.word	0x0000b675
    d080:	20005710 	.word	0x20005710
    d084:	0000cd29 	.word	0x0000cd29
    d088:	00024b6f 	.word	0x00024b6f
    d08c:	200052d0 	.word	0x200052d0
    d090:	00018271 	.word	0x00018271
    d094:	2000570c 	.word	0x2000570c
    d098:	0000cd5d 	.word	0x0000cd5d
    d09c:	000181e1 	.word	0x000181e1
    d0a0:	0000b68d 	.word	0x0000b68d

0000d0a4 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
    d0a4:	b580      	push	{r7, lr}
    d0a6:	b084      	sub	sp, #16
    d0a8:	af00      	add	r7, sp, #0
    d0aa:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    d0ac:	4b08      	ldr	r3, [pc, #32]	; (d0d0 <SerialConsoleReadCharacter+0x2c>)
    d0ae:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
    d0b0:	4b08      	ldr	r3, [pc, #32]	; (d0d4 <SerialConsoleReadCharacter+0x30>)
    d0b2:	681b      	ldr	r3, [r3, #0]
    d0b4:	687a      	ldr	r2, [r7, #4]
    d0b6:	0011      	movs	r1, r2
    d0b8:	0018      	movs	r0, r3
    d0ba:	4b07      	ldr	r3, [pc, #28]	; (d0d8 <SerialConsoleReadCharacter+0x34>)
    d0bc:	4798      	blx	r3
    d0be:	0003      	movs	r3, r0
    d0c0:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
    d0c2:	4b06      	ldr	r3, [pc, #24]	; (d0dc <SerialConsoleReadCharacter+0x38>)
    d0c4:	4798      	blx	r3
    return a;
    d0c6:	68fb      	ldr	r3, [r7, #12]
}
    d0c8:	0018      	movs	r0, r3
    d0ca:	46bd      	mov	sp, r7
    d0cc:	b004      	add	sp, #16
    d0ce:	bd80      	pop	{r7, pc}
    d0d0:	0000b675 	.word	0x0000b675
    d0d4:	20005304 	.word	0x20005304
    d0d8:	0000cd5d 	.word	0x0000cd5d
    d0dc:	0000b68d 	.word	0x0000b68d

0000d0e0 <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
    d0e0:	b580      	push	{r7, lr}
    d0e2:	af00      	add	r7, sp, #0
    return currentDebugLevel;
    d0e4:	4b02      	ldr	r3, [pc, #8]	; (d0f0 <getLogLevel+0x10>)
    d0e6:	781b      	ldrb	r3, [r3, #0]
}
    d0e8:	0018      	movs	r0, r3
    d0ea:	46bd      	mov	sp, r7
    d0ec:	bd80      	pop	{r7, pc}
    d0ee:	46c0      	nop			; (mov r8, r8)
    d0f0:	20003e54 	.word	0x20003e54

0000d0f4 <LogMessage>:
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    d0f4:	b40e      	push	{r1, r2, r3}
    d0f6:	b590      	push	{r4, r7, lr}
    d0f8:	b084      	sub	sp, #16
    d0fa:	af00      	add	r7, sp, #0
    d0fc:	0002      	movs	r2, r0
    d0fe:	1dfb      	adds	r3, r7, #7
    d100:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
    d102:	4b0e      	ldr	r3, [pc, #56]	; (d13c <LogMessage+0x48>)
    d104:	4798      	blx	r3
    d106:	0003      	movs	r3, r0
    d108:	001a      	movs	r2, r3
    d10a:	1dfb      	adds	r3, r7, #7
    d10c:	781b      	ldrb	r3, [r3, #0]
    d10e:	4293      	cmp	r3, r2
    d110:	d30c      	bcc.n	d12c <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
    d112:	2320      	movs	r3, #32
    d114:	18fb      	adds	r3, r7, r3
    d116:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
    d118:	68fb      	ldr	r3, [r7, #12]
    d11a:	69fa      	ldr	r2, [r7, #28]
    d11c:	4808      	ldr	r0, [pc, #32]	; (d140 <LogMessage+0x4c>)
    d11e:	217f      	movs	r1, #127	; 0x7f
    d120:	4c08      	ldr	r4, [pc, #32]	; (d144 <LogMessage+0x50>)
    d122:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
    d124:	4b06      	ldr	r3, [pc, #24]	; (d140 <LogMessage+0x4c>)
    d126:	0018      	movs	r0, r3
    d128:	4b07      	ldr	r3, [pc, #28]	; (d148 <LogMessage+0x54>)
    d12a:	4798      	blx	r3
        va_end(ap);
    }
};
    d12c:	46c0      	nop			; (mov r8, r8)
    d12e:	46bd      	mov	sp, r7
    d130:	b004      	add	sp, #16
    d132:	bc90      	pop	{r4, r7}
    d134:	bc08      	pop	{r3}
    d136:	b003      	add	sp, #12
    d138:	4718      	bx	r3
    d13a:	46c0      	nop			; (mov r8, r8)
    d13c:	0000d0e1 	.word	0x0000d0e1
    d140:	20005250 	.word	0x20005250
    d144:	00024da9 	.word	0x00024da9
    d148:	0000d009 	.word	0x0000d009

0000d14c <LogMessageDebug>:
 * @fn			LogMessage Debug(Students to fill out this)
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
    d14c:	b40f      	push	{r0, r1, r2, r3}
    d14e:	b580      	push	{r7, lr}
    d150:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
    d152:	68bb      	ldr	r3, [r7, #8]
    d154:	0019      	movs	r1, r3
    d156:	2001      	movs	r0, #1
    d158:	4b03      	ldr	r3, [pc, #12]	; (d168 <LogMessageDebug+0x1c>)
    d15a:	4798      	blx	r3
};
    d15c:	46c0      	nop			; (mov r8, r8)
    d15e:	46bd      	mov	sp, r7
    d160:	bc80      	pop	{r7}
    d162:	bc08      	pop	{r3}
    d164:	b004      	add	sp, #16
    d166:	4718      	bx	r3
    d168:	0000d0f5 	.word	0x0000d0f5

0000d16c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
    d16c:	b580      	push	{r7, lr}
    d16e:	b090      	sub	sp, #64	; 0x40
    d170:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    d172:	003b      	movs	r3, r7
    d174:	0018      	movs	r0, r3
    d176:	4b14      	ldr	r3, [pc, #80]	; (d1c8 <configure_usart+0x5c>)
    d178:	4798      	blx	r3

    config_usart.baudrate = 115200;
    d17a:	003b      	movs	r3, r7
    d17c:	22e1      	movs	r2, #225	; 0xe1
    d17e:	0252      	lsls	r2, r2, #9
    d180:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    d182:	003b      	movs	r3, r7
    d184:	22c4      	movs	r2, #196	; 0xc4
    d186:	0392      	lsls	r2, r2, #14
    d188:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    d18a:	003b      	movs	r3, r7
    d18c:	2201      	movs	r2, #1
    d18e:	4252      	negs	r2, r2
    d190:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    d192:	003b      	movs	r3, r7
    d194:	2201      	movs	r2, #1
    d196:	4252      	negs	r2, r2
    d198:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    d19a:	003b      	movs	r3, r7
    d19c:	4a0b      	ldr	r2, [pc, #44]	; (d1cc <configure_usart+0x60>)
    d19e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    d1a0:	003b      	movs	r3, r7
    d1a2:	4a0b      	ldr	r2, [pc, #44]	; (d1d0 <configure_usart+0x64>)
    d1a4:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    d1a6:	46c0      	nop			; (mov r8, r8)
    d1a8:	003a      	movs	r2, r7
    d1aa:	490a      	ldr	r1, [pc, #40]	; (d1d4 <configure_usart+0x68>)
    d1ac:	4b0a      	ldr	r3, [pc, #40]	; (d1d8 <configure_usart+0x6c>)
    d1ae:	0018      	movs	r0, r3
    d1b0:	4b0a      	ldr	r3, [pc, #40]	; (d1dc <configure_usart+0x70>)
    d1b2:	4798      	blx	r3
    d1b4:	1e03      	subs	r3, r0, #0
    d1b6:	d1f7      	bne.n	d1a8 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
    d1b8:	4b07      	ldr	r3, [pc, #28]	; (d1d8 <configure_usart+0x6c>)
    d1ba:	0018      	movs	r0, r3
    d1bc:	4b08      	ldr	r3, [pc, #32]	; (d1e0 <configure_usart+0x74>)
    d1be:	4798      	blx	r3
}
    d1c0:	46c0      	nop			; (mov r8, r8)
    d1c2:	46bd      	mov	sp, r7
    d1c4:	b010      	add	sp, #64	; 0x40
    d1c6:	bd80      	pop	{r7, pc}
    d1c8:	0000ce59 	.word	0x0000ce59
    d1cc:	002a0003 	.word	0x002a0003
    d1d0:	002b0003 	.word	0x002b0003
    d1d4:	42001800 	.word	0x42001800
    d1d8:	200052d0 	.word	0x200052d0
    d1dc:	00017de5 	.word	0x00017de5
    d1e0:	0000cf19 	.word	0x0000cf19

0000d1e4 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
    d1e4:	b580      	push	{r7, lr}
    d1e6:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    d1e8:	490c      	ldr	r1, [pc, #48]	; (d21c <configure_usart_callbacks+0x38>)
    d1ea:	4b0d      	ldr	r3, [pc, #52]	; (d220 <configure_usart_callbacks+0x3c>)
    d1ec:	2200      	movs	r2, #0
    d1ee:	0018      	movs	r0, r3
    d1f0:	4b0c      	ldr	r3, [pc, #48]	; (d224 <configure_usart_callbacks+0x40>)
    d1f2:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    d1f4:	490c      	ldr	r1, [pc, #48]	; (d228 <configure_usart_callbacks+0x44>)
    d1f6:	4b0a      	ldr	r3, [pc, #40]	; (d220 <configure_usart_callbacks+0x3c>)
    d1f8:	2201      	movs	r2, #1
    d1fa:	0018      	movs	r0, r3
    d1fc:	4b09      	ldr	r3, [pc, #36]	; (d224 <configure_usart_callbacks+0x40>)
    d1fe:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    d200:	4b07      	ldr	r3, [pc, #28]	; (d220 <configure_usart_callbacks+0x3c>)
    d202:	2100      	movs	r1, #0
    d204:	0018      	movs	r0, r3
    d206:	4b09      	ldr	r3, [pc, #36]	; (d22c <configure_usart_callbacks+0x48>)
    d208:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    d20a:	4b05      	ldr	r3, [pc, #20]	; (d220 <configure_usart_callbacks+0x3c>)
    d20c:	2101      	movs	r1, #1
    d20e:	0018      	movs	r0, r3
    d210:	4b06      	ldr	r3, [pc, #24]	; (d22c <configure_usart_callbacks+0x48>)
    d212:	4798      	blx	r3
}
    d214:	46c0      	nop			; (mov r8, r8)
    d216:	46bd      	mov	sp, r7
    d218:	bd80      	pop	{r7, pc}
    d21a:	46c0      	nop			; (mov r8, r8)
    d21c:	0000d279 	.word	0x0000d279
    d220:	200052d0 	.word	0x200052d0
    d224:	00018199 	.word	0x00018199
    d228:	0000d231 	.word	0x0000d231
    d22c:	0000cf61 	.word	0x0000cf61

0000d230 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
    d230:	b580      	push	{r7, lr}
    d232:	b082      	sub	sp, #8
    d234:	af00      	add	r7, sp, #0
    d236:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
    d238:	4b09      	ldr	r3, [pc, #36]	; (d260 <usart_read_callback+0x30>)
    d23a:	681a      	ldr	r2, [r3, #0]
    d23c:	4b09      	ldr	r3, [pc, #36]	; (d264 <usart_read_callback+0x34>)
    d23e:	781b      	ldrb	r3, [r3, #0]
    d240:	0019      	movs	r1, r3
    d242:	0010      	movs	r0, r2
    d244:	4b08      	ldr	r3, [pc, #32]	; (d268 <usart_read_callback+0x38>)
    d246:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
    d248:	4906      	ldr	r1, [pc, #24]	; (d264 <usart_read_callback+0x34>)
    d24a:	4b08      	ldr	r3, [pc, #32]	; (d26c <usart_read_callback+0x3c>)
    d24c:	2201      	movs	r2, #1
    d24e:	0018      	movs	r0, r3
    d250:	4b07      	ldr	r3, [pc, #28]	; (d270 <usart_read_callback+0x40>)
    d252:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
    d254:	4b07      	ldr	r3, [pc, #28]	; (d274 <usart_read_callback+0x44>)
    d256:	4798      	blx	r3
}
    d258:	46c0      	nop			; (mov r8, r8)
    d25a:	46bd      	mov	sp, r7
    d25c:	b002      	add	sp, #8
    d25e:	bd80      	pop	{r7, pc}
    d260:	20005304 	.word	0x20005304
    d264:	20005308 	.word	0x20005308
    d268:	0000cd29 	.word	0x0000cd29
    d26c:	200052d0 	.word	0x200052d0
    d270:	00018229 	.word	0x00018229
    d274:	00001ef9 	.word	0x00001ef9

0000d278 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
    d278:	b580      	push	{r7, lr}
    d27a:	b082      	sub	sp, #8
    d27c:	af00      	add	r7, sp, #0
    d27e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
    d280:	4b09      	ldr	r3, [pc, #36]	; (d2a8 <usart_write_callback+0x30>)
    d282:	681b      	ldr	r3, [r3, #0]
    d284:	4a09      	ldr	r2, [pc, #36]	; (d2ac <usart_write_callback+0x34>)
    d286:	0011      	movs	r1, r2
    d288:	0018      	movs	r0, r3
    d28a:	4b09      	ldr	r3, [pc, #36]	; (d2b0 <usart_write_callback+0x38>)
    d28c:	4798      	blx	r3
    d28e:	0003      	movs	r3, r0
    d290:	3301      	adds	r3, #1
    d292:	d005      	beq.n	d2a0 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    d294:	4905      	ldr	r1, [pc, #20]	; (d2ac <usart_write_callback+0x34>)
    d296:	4b07      	ldr	r3, [pc, #28]	; (d2b4 <usart_write_callback+0x3c>)
    d298:	2201      	movs	r2, #1
    d29a:	0018      	movs	r0, r3
    d29c:	4b06      	ldr	r3, [pc, #24]	; (d2b8 <usart_write_callback+0x40>)
    d29e:	4798      	blx	r3
    }
}
    d2a0:	46c0      	nop			; (mov r8, r8)
    d2a2:	46bd      	mov	sp, r7
    d2a4:	b002      	add	sp, #8
    d2a6:	bd80      	pop	{r7, pc}
    d2a8:	20005710 	.word	0x20005710
    d2ac:	2000570c 	.word	0x2000570c
    d2b0:	0000cd5d 	.word	0x0000cd5d
    d2b4:	200052d0 	.word	0x200052d0
    d2b8:	000181e1 	.word	0x000181e1

0000d2bc <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    d2bc:	b590      	push	{r4, r7, lr}
    d2be:	b087      	sub	sp, #28
    d2c0:	af00      	add	r7, sp, #0
    d2c2:	60f8      	str	r0, [r7, #12]
    d2c4:	000c      	movs	r4, r1
    d2c6:	0010      	movs	r0, r2
    d2c8:	0019      	movs	r1, r3
    d2ca:	230a      	movs	r3, #10
    d2cc:	18fb      	adds	r3, r7, r3
    d2ce:	1c22      	adds	r2, r4, #0
    d2d0:	801a      	strh	r2, [r3, #0]
    d2d2:	2308      	movs	r3, #8
    d2d4:	18fb      	adds	r3, r7, r3
    d2d6:	1c02      	adds	r2, r0, #0
    d2d8:	801a      	strh	r2, [r3, #0]
    d2da:	1dfb      	adds	r3, r7, #7
    d2dc:	1c0a      	adds	r2, r1, #0
    d2de:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    d2e0:	230a      	movs	r3, #10
    d2e2:	18fb      	adds	r3, r7, r3
    d2e4:	881a      	ldrh	r2, [r3, #0]
    d2e6:	2308      	movs	r3, #8
    d2e8:	18fb      	adds	r3, r7, r3
    d2ea:	881b      	ldrh	r3, [r3, #0]
    d2ec:	1ad3      	subs	r3, r2, r3
    d2ee:	3307      	adds	r3, #7
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	da00      	bge.n	d2f6 <SDMMC_UNSTUFF_BITS+0x3a>
    d2f4:	3307      	adds	r3, #7
    d2f6:	10db      	asrs	r3, r3, #3
    d2f8:	3b01      	subs	r3, #1
    d2fa:	68fa      	ldr	r2, [r7, #12]
    d2fc:	18d3      	adds	r3, r2, r3
    d2fe:	781b      	ldrb	r3, [r3, #0]
    d300:	0019      	movs	r1, r3
    d302:	2308      	movs	r3, #8
    d304:	18fb      	adds	r3, r7, r3
    d306:	881b      	ldrh	r3, [r3, #0]
    d308:	2207      	movs	r2, #7
    d30a:	4013      	ands	r3, r2
    d30c:	4119      	asrs	r1, r3
    d30e:	000b      	movs	r3, r1
    d310:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    d312:	2308      	movs	r3, #8
    d314:	18fb      	adds	r3, r7, r3
    d316:	881b      	ldrh	r3, [r3, #0]
    d318:	2207      	movs	r2, #7
    d31a:	401a      	ands	r2, r3
    d31c:	1dfb      	adds	r3, r7, #7
    d31e:	781b      	ldrb	r3, [r3, #0]
    d320:	18d3      	adds	r3, r2, r3
    d322:	2b08      	cmp	r3, #8
    d324:	dd1c      	ble.n	d360 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    d326:	230a      	movs	r3, #10
    d328:	18fb      	adds	r3, r7, r3
    d32a:	881a      	ldrh	r2, [r3, #0]
    d32c:	2308      	movs	r3, #8
    d32e:	18fb      	adds	r3, r7, r3
    d330:	881b      	ldrh	r3, [r3, #0]
    d332:	1ad3      	subs	r3, r2, r3
    d334:	3307      	adds	r3, #7
    d336:	2b00      	cmp	r3, #0
    d338:	da00      	bge.n	d33c <SDMMC_UNSTUFF_BITS+0x80>
    d33a:	3307      	adds	r3, #7
    d33c:	10db      	asrs	r3, r3, #3
    d33e:	3b02      	subs	r3, #2
    d340:	68fa      	ldr	r2, [r7, #12]
    d342:	18d3      	adds	r3, r2, r3
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	0019      	movs	r1, r3
    d348:	2308      	movs	r3, #8
    d34a:	18fb      	adds	r3, r7, r3
    d34c:	881b      	ldrh	r3, [r3, #0]
    d34e:	2207      	movs	r2, #7
    d350:	4013      	ands	r3, r2
    d352:	2208      	movs	r2, #8
    d354:	1ad3      	subs	r3, r2, r3
    d356:	4099      	lsls	r1, r3
    d358:	000b      	movs	r3, r1
    d35a:	697a      	ldr	r2, [r7, #20]
    d35c:	4313      	orrs	r3, r2
    d35e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    d360:	2308      	movs	r3, #8
    d362:	18fb      	adds	r3, r7, r3
    d364:	881b      	ldrh	r3, [r3, #0]
    d366:	2207      	movs	r2, #7
    d368:	401a      	ands	r2, r3
    d36a:	1dfb      	adds	r3, r7, #7
    d36c:	781b      	ldrb	r3, [r3, #0]
    d36e:	18d3      	adds	r3, r2, r3
    d370:	2b10      	cmp	r3, #16
    d372:	dd1c      	ble.n	d3ae <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    d374:	230a      	movs	r3, #10
    d376:	18fb      	adds	r3, r7, r3
    d378:	881a      	ldrh	r2, [r3, #0]
    d37a:	2308      	movs	r3, #8
    d37c:	18fb      	adds	r3, r7, r3
    d37e:	881b      	ldrh	r3, [r3, #0]
    d380:	1ad3      	subs	r3, r2, r3
    d382:	3307      	adds	r3, #7
    d384:	2b00      	cmp	r3, #0
    d386:	da00      	bge.n	d38a <SDMMC_UNSTUFF_BITS+0xce>
    d388:	3307      	adds	r3, #7
    d38a:	10db      	asrs	r3, r3, #3
    d38c:	3b03      	subs	r3, #3
    d38e:	68fa      	ldr	r2, [r7, #12]
    d390:	18d3      	adds	r3, r2, r3
    d392:	781b      	ldrb	r3, [r3, #0]
    d394:	0019      	movs	r1, r3
    d396:	2308      	movs	r3, #8
    d398:	18fb      	adds	r3, r7, r3
    d39a:	881b      	ldrh	r3, [r3, #0]
    d39c:	2207      	movs	r2, #7
    d39e:	4013      	ands	r3, r2
    d3a0:	2210      	movs	r2, #16
    d3a2:	1ad3      	subs	r3, r2, r3
    d3a4:	4099      	lsls	r1, r3
    d3a6:	000b      	movs	r3, r1
    d3a8:	697a      	ldr	r2, [r7, #20]
    d3aa:	4313      	orrs	r3, r2
    d3ac:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    d3ae:	2308      	movs	r3, #8
    d3b0:	18fb      	adds	r3, r7, r3
    d3b2:	881b      	ldrh	r3, [r3, #0]
    d3b4:	2207      	movs	r2, #7
    d3b6:	401a      	ands	r2, r3
    d3b8:	1dfb      	adds	r3, r7, #7
    d3ba:	781b      	ldrb	r3, [r3, #0]
    d3bc:	18d3      	adds	r3, r2, r3
    d3be:	2b10      	cmp	r3, #16
    d3c0:	dd1c      	ble.n	d3fc <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    d3c2:	230a      	movs	r3, #10
    d3c4:	18fb      	adds	r3, r7, r3
    d3c6:	881a      	ldrh	r2, [r3, #0]
    d3c8:	2308      	movs	r3, #8
    d3ca:	18fb      	adds	r3, r7, r3
    d3cc:	881b      	ldrh	r3, [r3, #0]
    d3ce:	1ad3      	subs	r3, r2, r3
    d3d0:	3307      	adds	r3, #7
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	da00      	bge.n	d3d8 <SDMMC_UNSTUFF_BITS+0x11c>
    d3d6:	3307      	adds	r3, #7
    d3d8:	10db      	asrs	r3, r3, #3
    d3da:	3b03      	subs	r3, #3
    d3dc:	68fa      	ldr	r2, [r7, #12]
    d3de:	18d3      	adds	r3, r2, r3
    d3e0:	781b      	ldrb	r3, [r3, #0]
    d3e2:	0019      	movs	r1, r3
    d3e4:	2308      	movs	r3, #8
    d3e6:	18fb      	adds	r3, r7, r3
    d3e8:	881b      	ldrh	r3, [r3, #0]
    d3ea:	2207      	movs	r2, #7
    d3ec:	4013      	ands	r3, r2
    d3ee:	2210      	movs	r2, #16
    d3f0:	1ad3      	subs	r3, r2, r3
    d3f2:	4099      	lsls	r1, r3
    d3f4:	000b      	movs	r3, r1
    d3f6:	697a      	ldr	r2, [r7, #20]
    d3f8:	4313      	orrs	r3, r2
    d3fa:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    d3fc:	1dfb      	adds	r3, r7, #7
    d3fe:	781b      	ldrb	r3, [r3, #0]
    d400:	2201      	movs	r2, #1
    d402:	409a      	lsls	r2, r3
    d404:	0013      	movs	r3, r2
    d406:	1e5a      	subs	r2, r3, #1
    d408:	697b      	ldr	r3, [r7, #20]
    d40a:	4013      	ands	r3, r2
    d40c:	617b      	str	r3, [r7, #20]
	return value;
    d40e:	697b      	ldr	r3, [r7, #20]
}
    d410:	0018      	movs	r0, r3
    d412:	46bd      	mov	sp, r7
    d414:	b007      	add	sp, #28
    d416:	bd90      	pop	{r4, r7, pc}

0000d418 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    d418:	b580      	push	{r7, lr}
    d41a:	b082      	sub	sp, #8
    d41c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    d41e:	4b23      	ldr	r3, [pc, #140]	; (d4ac <mmc_spi_op_cond+0x94>)
    d420:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    d422:	4b23      	ldr	r3, [pc, #140]	; (d4b0 <mmc_spi_op_cond+0x98>)
    d424:	2100      	movs	r1, #0
    d426:	0018      	movs	r0, r3
    d428:	4b22      	ldr	r3, [pc, #136]	; (d4b4 <mmc_spi_op_cond+0x9c>)
    d42a:	4798      	blx	r3
    d42c:	0003      	movs	r3, r0
    d42e:	001a      	movs	r2, r3
    d430:	2301      	movs	r3, #1
    d432:	4053      	eors	r3, r2
    d434:	b2db      	uxtb	r3, r3
    d436:	2b00      	cmp	r3, #0
    d438:	d001      	beq.n	d43e <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    d43a:	2300      	movs	r3, #0
    d43c:	e031      	b.n	d4a2 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    d43e:	4b1e      	ldr	r3, [pc, #120]	; (d4b8 <mmc_spi_op_cond+0xa0>)
    d440:	4798      	blx	r3
    d442:	0003      	movs	r3, r0
    d444:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    d446:	683b      	ldr	r3, [r7, #0]
    d448:	2201      	movs	r2, #1
    d44a:	4013      	ands	r3, r2
    d44c:	d006      	beq.n	d45c <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    d44e:	687b      	ldr	r3, [r7, #4]
    d450:	1e5a      	subs	r2, r3, #1
    d452:	607a      	str	r2, [r7, #4]
    d454:	2b00      	cmp	r3, #0
    d456:	d1e4      	bne.n	d422 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    d458:	2300      	movs	r3, #0
    d45a:	e022      	b.n	d4a2 <mmc_spi_op_cond+0x8a>
			break;
    d45c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    d45e:	4b17      	ldr	r3, [pc, #92]	; (d4bc <mmc_spi_op_cond+0xa4>)
    d460:	2100      	movs	r1, #0
    d462:	0018      	movs	r0, r3
    d464:	4b13      	ldr	r3, [pc, #76]	; (d4b4 <mmc_spi_op_cond+0x9c>)
    d466:	4798      	blx	r3
    d468:	0003      	movs	r3, r0
    d46a:	001a      	movs	r2, r3
    d46c:	2301      	movs	r3, #1
    d46e:	4053      	eors	r3, r2
    d470:	b2db      	uxtb	r3, r3
    d472:	2b00      	cmp	r3, #0
    d474:	d001      	beq.n	d47a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    d476:	2300      	movs	r3, #0
    d478:	e013      	b.n	d4a2 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    d47a:	4b0f      	ldr	r3, [pc, #60]	; (d4b8 <mmc_spi_op_cond+0xa0>)
    d47c:	4798      	blx	r3
    d47e:	0002      	movs	r2, r0
    d480:	23c0      	movs	r3, #192	; 0xc0
    d482:	05db      	lsls	r3, r3, #23
    d484:	401a      	ands	r2, r3
    d486:	2380      	movs	r3, #128	; 0x80
    d488:	05db      	lsls	r3, r3, #23
    d48a:	429a      	cmp	r2, r3
    d48c:	d108      	bne.n	d4a0 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    d48e:	4b0c      	ldr	r3, [pc, #48]	; (d4c0 <mmc_spi_op_cond+0xa8>)
    d490:	681a      	ldr	r2, [r3, #0]
    d492:	4b0b      	ldr	r3, [pc, #44]	; (d4c0 <mmc_spi_op_cond+0xa8>)
    d494:	681b      	ldr	r3, [r3, #0]
    d496:	7adb      	ldrb	r3, [r3, #11]
    d498:	2108      	movs	r1, #8
    d49a:	430b      	orrs	r3, r1
    d49c:	b2db      	uxtb	r3, r3
    d49e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    d4a0:	2301      	movs	r3, #1
}
    d4a2:	0018      	movs	r0, r3
    d4a4:	46bd      	mov	sp, r7
    d4a6:	b002      	add	sp, #8
    d4a8:	bd80      	pop	{r7, pc}
    d4aa:	46c0      	nop			; (mov r8, r8)
    d4ac:	00001bee 	.word	0x00001bee
    d4b0:	00001101 	.word	0x00001101
    d4b4:	0000ee95 	.word	0x0000ee95
    d4b8:	0000f0d5 	.word	0x0000f0d5
    d4bc:	0000053a 	.word	0x0000053a
    d4c0:	20003e7c 	.word	0x20003e7c

0000d4c4 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    d4c4:	b580      	push	{r7, lr}
    d4c6:	b086      	sub	sp, #24
    d4c8:	af00      	add	r7, sp, #0
    d4ca:	0002      	movs	r2, r0
    d4cc:	1dfb      	adds	r3, r7, #7
    d4ce:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    d4d0:	4b2e      	ldr	r3, [pc, #184]	; (d58c <sd_spi_op_cond+0xc8>)
    d4d2:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    d4d4:	4b2e      	ldr	r3, [pc, #184]	; (d590 <sd_spi_op_cond+0xcc>)
    d4d6:	2100      	movs	r1, #0
    d4d8:	0018      	movs	r0, r3
    d4da:	4b2e      	ldr	r3, [pc, #184]	; (d594 <sd_spi_op_cond+0xd0>)
    d4dc:	4798      	blx	r3
    d4de:	0003      	movs	r3, r0
    d4e0:	001a      	movs	r2, r3
    d4e2:	2301      	movs	r3, #1
    d4e4:	4053      	eors	r3, r2
    d4e6:	b2db      	uxtb	r3, r3
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	d001      	beq.n	d4f0 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    d4ec:	2300      	movs	r3, #0
    d4ee:	e048      	b.n	d582 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    d4f0:	2300      	movs	r3, #0
    d4f2:	617b      	str	r3, [r7, #20]
		if (v2) {
    d4f4:	1dfb      	adds	r3, r7, #7
    d4f6:	781b      	ldrb	r3, [r3, #0]
    d4f8:	2b00      	cmp	r3, #0
    d4fa:	d004      	beq.n	d506 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    d4fc:	697b      	ldr	r3, [r7, #20]
    d4fe:	2280      	movs	r2, #128	; 0x80
    d500:	05d2      	lsls	r2, r2, #23
    d502:	4313      	orrs	r3, r2
    d504:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    d506:	697b      	ldr	r3, [r7, #20]
    d508:	4a23      	ldr	r2, [pc, #140]	; (d598 <sd_spi_op_cond+0xd4>)
    d50a:	0019      	movs	r1, r3
    d50c:	0010      	movs	r0, r2
    d50e:	4b21      	ldr	r3, [pc, #132]	; (d594 <sd_spi_op_cond+0xd0>)
    d510:	4798      	blx	r3
    d512:	0003      	movs	r3, r0
    d514:	001a      	movs	r2, r3
    d516:	2301      	movs	r3, #1
    d518:	4053      	eors	r3, r2
    d51a:	b2db      	uxtb	r3, r3
    d51c:	2b00      	cmp	r3, #0
    d51e:	d001      	beq.n	d524 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    d520:	2300      	movs	r3, #0
    d522:	e02e      	b.n	d582 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    d524:	4b1d      	ldr	r3, [pc, #116]	; (d59c <sd_spi_op_cond+0xd8>)
    d526:	4798      	blx	r3
    d528:	0003      	movs	r3, r0
    d52a:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    d52c:	68fb      	ldr	r3, [r7, #12]
    d52e:	2201      	movs	r2, #1
    d530:	4013      	ands	r3, r2
    d532:	d006      	beq.n	d542 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    d534:	693b      	ldr	r3, [r7, #16]
    d536:	1e5a      	subs	r2, r3, #1
    d538:	613a      	str	r2, [r7, #16]
    d53a:	2b00      	cmp	r3, #0
    d53c:	d1ca      	bne.n	d4d4 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    d53e:	2300      	movs	r3, #0
    d540:	e01f      	b.n	d582 <sd_spi_op_cond+0xbe>
			break;
    d542:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    d544:	4b16      	ldr	r3, [pc, #88]	; (d5a0 <sd_spi_op_cond+0xdc>)
    d546:	2100      	movs	r1, #0
    d548:	0018      	movs	r0, r3
    d54a:	4b12      	ldr	r3, [pc, #72]	; (d594 <sd_spi_op_cond+0xd0>)
    d54c:	4798      	blx	r3
    d54e:	0003      	movs	r3, r0
    d550:	001a      	movs	r2, r3
    d552:	2301      	movs	r3, #1
    d554:	4053      	eors	r3, r2
    d556:	b2db      	uxtb	r3, r3
    d558:	2b00      	cmp	r3, #0
    d55a:	d001      	beq.n	d560 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    d55c:	2300      	movs	r3, #0
    d55e:	e010      	b.n	d582 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    d560:	4b0e      	ldr	r3, [pc, #56]	; (d59c <sd_spi_op_cond+0xd8>)
    d562:	4798      	blx	r3
    d564:	0002      	movs	r2, r0
    d566:	2380      	movs	r3, #128	; 0x80
    d568:	05db      	lsls	r3, r3, #23
    d56a:	4013      	ands	r3, r2
    d56c:	d008      	beq.n	d580 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    d56e:	4b0d      	ldr	r3, [pc, #52]	; (d5a4 <sd_spi_op_cond+0xe0>)
    d570:	681a      	ldr	r2, [r3, #0]
    d572:	4b0c      	ldr	r3, [pc, #48]	; (d5a4 <sd_spi_op_cond+0xe0>)
    d574:	681b      	ldr	r3, [r3, #0]
    d576:	7adb      	ldrb	r3, [r3, #11]
    d578:	2108      	movs	r1, #8
    d57a:	430b      	orrs	r3, r1
    d57c:	b2db      	uxtb	r3, r3
    d57e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    d580:	2301      	movs	r3, #1
}
    d582:	0018      	movs	r0, r3
    d584:	46bd      	mov	sp, r7
    d586:	b006      	add	sp, #24
    d588:	bd80      	pop	{r7, pc}
    d58a:	46c0      	nop			; (mov r8, r8)
    d58c:	00001bee 	.word	0x00001bee
    d590:	00001137 	.word	0x00001137
    d594:	0000ee95 	.word	0x0000ee95
    d598:	00001129 	.word	0x00001129
    d59c:	0000f0d5 	.word	0x0000f0d5
    d5a0:	0000053a 	.word	0x0000053a
    d5a4:	20003e7c 	.word	0x20003e7c

0000d5a8 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    d5a8:	b580      	push	{r7, lr}
    d5aa:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    d5ac:	2301      	movs	r3, #1
}
    d5ae:	0018      	movs	r0, r3
    d5b0:	46bd      	mov	sp, r7
    d5b2:	bd80      	pop	{r7, pc}

0000d5b4 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    d5b4:	b580      	push	{r7, lr}
    d5b6:	b084      	sub	sp, #16
    d5b8:	af00      	add	r7, sp, #0
    d5ba:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	2200      	movs	r2, #0
    d5c0:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    d5c2:	23d5      	movs	r3, #213	; 0xd5
    d5c4:	005b      	lsls	r3, r3, #1
    d5c6:	4a14      	ldr	r2, [pc, #80]	; (d618 <sd_cmd8+0x64>)
    d5c8:	0019      	movs	r1, r3
    d5ca:	0010      	movs	r0, r2
    d5cc:	4b13      	ldr	r3, [pc, #76]	; (d61c <sd_cmd8+0x68>)
    d5ce:	4798      	blx	r3
    d5d0:	0003      	movs	r3, r0
    d5d2:	001a      	movs	r2, r3
    d5d4:	2301      	movs	r3, #1
    d5d6:	4053      	eors	r3, r2
    d5d8:	b2db      	uxtb	r3, r3
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d001      	beq.n	d5e2 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    d5de:	2301      	movs	r3, #1
    d5e0:	e015      	b.n	d60e <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    d5e2:	4b0f      	ldr	r3, [pc, #60]	; (d620 <sd_cmd8+0x6c>)
    d5e4:	4798      	blx	r3
    d5e6:	0003      	movs	r3, r0
    d5e8:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    d5ea:	68fb      	ldr	r3, [r7, #12]
    d5ec:	3301      	adds	r3, #1
    d5ee:	d101      	bne.n	d5f4 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    d5f0:	2301      	movs	r3, #1
    d5f2:	e00c      	b.n	d60e <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    d5f4:	68fb      	ldr	r3, [r7, #12]
    d5f6:	051b      	lsls	r3, r3, #20
    d5f8:	0d1a      	lsrs	r2, r3, #20
    d5fa:	23d5      	movs	r3, #213	; 0xd5
    d5fc:	005b      	lsls	r3, r3, #1
    d5fe:	429a      	cmp	r2, r3
    d600:	d001      	beq.n	d606 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    d602:	2300      	movs	r3, #0
    d604:	e003      	b.n	d60e <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    d606:	687b      	ldr	r3, [r7, #4]
    d608:	2201      	movs	r2, #1
    d60a:	701a      	strb	r2, [r3, #0]
	return true;
    d60c:	2301      	movs	r3, #1
}
    d60e:	0018      	movs	r0, r3
    d610:	46bd      	mov	sp, r7
    d612:	b004      	add	sp, #16
    d614:	bd80      	pop	{r7, pc}
    d616:	46c0      	nop			; (mov r8, r8)
    d618:	00005508 	.word	0x00005508
    d61c:	0000ee95 	.word	0x0000ee95
    d620:	0000f0d5 	.word	0x0000f0d5

0000d624 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    d624:	b590      	push	{r4, r7, lr}
    d626:	b089      	sub	sp, #36	; 0x24
    d628:	af02      	add	r7, sp, #8
    d62a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    d62c:	2380      	movs	r3, #128	; 0x80
    d62e:	009a      	lsls	r2, r3, #2
    d630:	4841      	ldr	r0, [pc, #260]	; (d738 <mmc_cmd8+0x114>)
    d632:	2300      	movs	r3, #0
    d634:	9300      	str	r3, [sp, #0]
    d636:	2301      	movs	r3, #1
    d638:	2100      	movs	r1, #0
    d63a:	4c40      	ldr	r4, [pc, #256]	; (d73c <mmc_cmd8+0x118>)
    d63c:	47a0      	blx	r4
    d63e:	0003      	movs	r3, r0
    d640:	001a      	movs	r2, r3
    d642:	2301      	movs	r3, #1
    d644:	4053      	eors	r3, r2
    d646:	b2db      	uxtb	r3, r3
    d648:	2b00      	cmp	r3, #0
    d64a:	d001      	beq.n	d650 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    d64c:	2300      	movs	r3, #0
    d64e:	e06e      	b.n	d72e <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    d650:	2316      	movs	r3, #22
    d652:	18fb      	adds	r3, r7, r3
    d654:	2200      	movs	r2, #0
    d656:	801a      	strh	r2, [r3, #0]
    d658:	e014      	b.n	d684 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    d65a:	2310      	movs	r3, #16
    d65c:	18fb      	adds	r3, r7, r3
    d65e:	0018      	movs	r0, r3
    d660:	4b37      	ldr	r3, [pc, #220]	; (d740 <mmc_cmd8+0x11c>)
    d662:	4798      	blx	r3
    d664:	0003      	movs	r3, r0
    d666:	001a      	movs	r2, r3
    d668:	2301      	movs	r3, #1
    d66a:	4053      	eors	r3, r2
    d66c:	b2db      	uxtb	r3, r3
    d66e:	2b00      	cmp	r3, #0
    d670:	d001      	beq.n	d676 <mmc_cmd8+0x52>
			return false;
    d672:	2300      	movs	r3, #0
    d674:	e05b      	b.n	d72e <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    d676:	2316      	movs	r3, #22
    d678:	18fb      	adds	r3, r7, r3
    d67a:	881a      	ldrh	r2, [r3, #0]
    d67c:	2316      	movs	r3, #22
    d67e:	18fb      	adds	r3, r7, r3
    d680:	3201      	adds	r2, #1
    d682:	801a      	strh	r2, [r3, #0]
    d684:	2316      	movs	r3, #22
    d686:	18fb      	adds	r3, r7, r3
    d688:	881b      	ldrh	r3, [r3, #0]
    d68a:	2b31      	cmp	r3, #49	; 0x31
    d68c:	d9e5      	bls.n	d65a <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    d68e:	693b      	ldr	r3, [r7, #16]
    d690:	b2db      	uxtb	r3, r3
    d692:	2202      	movs	r2, #2
    d694:	4013      	ands	r3, r2
    d696:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    d698:	687b      	ldr	r3, [r7, #4]
    d69a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    d69c:	4b29      	ldr	r3, [pc, #164]	; (d744 <mmc_cmd8+0x120>)
    d69e:	681b      	ldr	r3, [r3, #0]
    d6a0:	330e      	adds	r3, #14
    d6a2:	0018      	movs	r0, r3
    d6a4:	230c      	movs	r3, #12
    d6a6:	223e      	movs	r2, #62	; 0x3e
    d6a8:	2180      	movs	r1, #128	; 0x80
    d6aa:	4c27      	ldr	r4, [pc, #156]	; (d748 <mmc_cmd8+0x124>)
    d6ac:	47a0      	blx	r4
    d6ae:	0002      	movs	r2, r0
    d6b0:	4b26      	ldr	r3, [pc, #152]	; (d74c <mmc_cmd8+0x128>)
    d6b2:	429a      	cmp	r2, r3
    d6b4:	d135      	bne.n	d722 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    d6b6:	e014      	b.n	d6e2 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    d6b8:	230c      	movs	r3, #12
    d6ba:	18fb      	adds	r3, r7, r3
    d6bc:	0018      	movs	r0, r3
    d6be:	4b20      	ldr	r3, [pc, #128]	; (d740 <mmc_cmd8+0x11c>)
    d6c0:	4798      	blx	r3
    d6c2:	0003      	movs	r3, r0
    d6c4:	001a      	movs	r2, r3
    d6c6:	2301      	movs	r3, #1
    d6c8:	4053      	eors	r3, r2
    d6ca:	b2db      	uxtb	r3, r3
    d6cc:	2b00      	cmp	r3, #0
    d6ce:	d001      	beq.n	d6d4 <mmc_cmd8+0xb0>
				return false;
    d6d0:	2300      	movs	r3, #0
    d6d2:	e02c      	b.n	d72e <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    d6d4:	2316      	movs	r3, #22
    d6d6:	18fb      	adds	r3, r7, r3
    d6d8:	881a      	ldrh	r2, [r3, #0]
    d6da:	2316      	movs	r3, #22
    d6dc:	18fb      	adds	r3, r7, r3
    d6de:	3201      	adds	r2, #1
    d6e0:	801a      	strh	r2, [r3, #0]
    d6e2:	2316      	movs	r3, #22
    d6e4:	18fb      	adds	r3, r7, r3
    d6e6:	881b      	ldrh	r3, [r3, #0]
    d6e8:	2b35      	cmp	r3, #53	; 0x35
    d6ea:	d9e5      	bls.n	d6b8 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    d6ec:	4b15      	ldr	r3, [pc, #84]	; (d744 <mmc_cmd8+0x120>)
    d6ee:	681b      	ldr	r3, [r3, #0]
    d6f0:	68fa      	ldr	r2, [r7, #12]
    d6f2:	0852      	lsrs	r2, r2, #1
    d6f4:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    d6f6:	e014      	b.n	d722 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    d6f8:	230c      	movs	r3, #12
    d6fa:	18fb      	adds	r3, r7, r3
    d6fc:	0018      	movs	r0, r3
    d6fe:	4b10      	ldr	r3, [pc, #64]	; (d740 <mmc_cmd8+0x11c>)
    d700:	4798      	blx	r3
    d702:	0003      	movs	r3, r0
    d704:	001a      	movs	r2, r3
    d706:	2301      	movs	r3, #1
    d708:	4053      	eors	r3, r2
    d70a:	b2db      	uxtb	r3, r3
    d70c:	2b00      	cmp	r3, #0
    d70e:	d001      	beq.n	d714 <mmc_cmd8+0xf0>
			return false;
    d710:	2300      	movs	r3, #0
    d712:	e00c      	b.n	d72e <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    d714:	2316      	movs	r3, #22
    d716:	18fb      	adds	r3, r7, r3
    d718:	881a      	ldrh	r2, [r3, #0]
    d71a:	2316      	movs	r3, #22
    d71c:	18fb      	adds	r3, r7, r3
    d71e:	3201      	adds	r2, #1
    d720:	801a      	strh	r2, [r3, #0]
    d722:	2316      	movs	r3, #22
    d724:	18fb      	adds	r3, r7, r3
    d726:	881b      	ldrh	r3, [r3, #0]
    d728:	2b7f      	cmp	r3, #127	; 0x7f
    d72a:	d9e5      	bls.n	d6f8 <mmc_cmd8+0xd4>
		}
	}
	return true;
    d72c:	2301      	movs	r3, #1
}
    d72e:	0018      	movs	r0, r3
    d730:	46bd      	mov	sp, r7
    d732:	b007      	add	sp, #28
    d734:	bd90      	pop	{r4, r7, pc}
    d736:	46c0      	nop			; (mov r8, r8)
    d738:	00081108 	.word	0x00081108
    d73c:	0000eebd 	.word	0x0000eebd
    d740:	0000f0e9 	.word	0x0000f0e9
    d744:	20003e7c 	.word	0x20003e7c
    d748:	0000d2bd 	.word	0x0000d2bd
    d74c:	00000fff 	.word	0x00000fff

0000d750 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    d750:	b590      	push	{r4, r7, lr}
    d752:	b083      	sub	sp, #12
    d754:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    d756:	4b15      	ldr	r3, [pc, #84]	; (d7ac <sd_mmc_cmd9_spi+0x5c>)
    d758:	681b      	ldr	r3, [r3, #0]
    d75a:	891b      	ldrh	r3, [r3, #8]
    d75c:	0419      	lsls	r1, r3, #16
    d75e:	4814      	ldr	r0, [pc, #80]	; (d7b0 <sd_mmc_cmd9_spi+0x60>)
    d760:	2301      	movs	r3, #1
    d762:	9300      	str	r3, [sp, #0]
    d764:	2301      	movs	r3, #1
    d766:	2210      	movs	r2, #16
    d768:	4c12      	ldr	r4, [pc, #72]	; (d7b4 <sd_mmc_cmd9_spi+0x64>)
    d76a:	47a0      	blx	r4
    d76c:	0003      	movs	r3, r0
    d76e:	001a      	movs	r2, r3
    d770:	2301      	movs	r3, #1
    d772:	4053      	eors	r3, r2
    d774:	b2db      	uxtb	r3, r3
    d776:	2b00      	cmp	r3, #0
    d778:	d001      	beq.n	d77e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    d77a:	2300      	movs	r3, #0
    d77c:	e012      	b.n	d7a4 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    d77e:	4b0b      	ldr	r3, [pc, #44]	; (d7ac <sd_mmc_cmd9_spi+0x5c>)
    d780:	681b      	ldr	r3, [r3, #0]
    d782:	330e      	adds	r3, #14
    d784:	2101      	movs	r1, #1
    d786:	0018      	movs	r0, r3
    d788:	4b0b      	ldr	r3, [pc, #44]	; (d7b8 <sd_mmc_cmd9_spi+0x68>)
    d78a:	4798      	blx	r3
    d78c:	0003      	movs	r3, r0
    d78e:	001a      	movs	r2, r3
    d790:	2301      	movs	r3, #1
    d792:	4053      	eors	r3, r2
    d794:	b2db      	uxtb	r3, r3
    d796:	2b00      	cmp	r3, #0
    d798:	d001      	beq.n	d79e <sd_mmc_cmd9_spi+0x4e>
		return false;
    d79a:	2300      	movs	r3, #0
    d79c:	e002      	b.n	d7a4 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    d79e:	4b07      	ldr	r3, [pc, #28]	; (d7bc <sd_mmc_cmd9_spi+0x6c>)
    d7a0:	4798      	blx	r3
    d7a2:	0003      	movs	r3, r0
}
    d7a4:	0018      	movs	r0, r3
    d7a6:	46bd      	mov	sp, r7
    d7a8:	b001      	add	sp, #4
    d7aa:	bd90      	pop	{r4, r7, pc}
    d7ac:	20003e7c 	.word	0x20003e7c
    d7b0:	00081109 	.word	0x00081109
    d7b4:	0000eebd 	.word	0x0000eebd
    d7b8:	0000f18d 	.word	0x0000f18d
    d7bc:	0000f231 	.word	0x0000f231

0000d7c0 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    d7c0:	b5b0      	push	{r4, r5, r7, lr}
    d7c2:	b084      	sub	sp, #16
    d7c4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    d7c6:	4b45      	ldr	r3, [pc, #276]	; (d8dc <mmc_decode_csd+0x11c>)
    d7c8:	681b      	ldr	r3, [r3, #0]
    d7ca:	330e      	adds	r3, #14
    d7cc:	0018      	movs	r0, r3
    d7ce:	2304      	movs	r3, #4
    d7d0:	227a      	movs	r2, #122	; 0x7a
    d7d2:	2180      	movs	r1, #128	; 0x80
    d7d4:	4c42      	ldr	r4, [pc, #264]	; (d8e0 <mmc_decode_csd+0x120>)
    d7d6:	47a0      	blx	r4
    d7d8:	0003      	movs	r3, r0
    d7da:	2b02      	cmp	r3, #2
    d7dc:	d011      	beq.n	d802 <mmc_decode_csd+0x42>
    d7de:	d802      	bhi.n	d7e6 <mmc_decode_csd+0x26>
    d7e0:	2b01      	cmp	r3, #1
    d7e2:	d009      	beq.n	d7f8 <mmc_decode_csd+0x38>
    d7e4:	e003      	b.n	d7ee <mmc_decode_csd+0x2e>
    d7e6:	2b03      	cmp	r3, #3
    d7e8:	d010      	beq.n	d80c <mmc_decode_csd+0x4c>
    d7ea:	2b04      	cmp	r3, #4
    d7ec:	d013      	beq.n	d816 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    d7ee:	4b3b      	ldr	r3, [pc, #236]	; (d8dc <mmc_decode_csd+0x11c>)
    d7f0:	681b      	ldr	r3, [r3, #0]
    d7f2:	2212      	movs	r2, #18
    d7f4:	731a      	strb	r2, [r3, #12]
		break;
    d7f6:	e013      	b.n	d820 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    d7f8:	4b38      	ldr	r3, [pc, #224]	; (d8dc <mmc_decode_csd+0x11c>)
    d7fa:	681b      	ldr	r3, [r3, #0]
    d7fc:	2214      	movs	r2, #20
    d7fe:	731a      	strb	r2, [r3, #12]
		break;
    d800:	e00e      	b.n	d820 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    d802:	4b36      	ldr	r3, [pc, #216]	; (d8dc <mmc_decode_csd+0x11c>)
    d804:	681b      	ldr	r3, [r3, #0]
    d806:	2222      	movs	r2, #34	; 0x22
    d808:	731a      	strb	r2, [r3, #12]
		break;
    d80a:	e009      	b.n	d820 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    d80c:	4b33      	ldr	r3, [pc, #204]	; (d8dc <mmc_decode_csd+0x11c>)
    d80e:	681b      	ldr	r3, [r3, #0]
    d810:	2230      	movs	r2, #48	; 0x30
    d812:	731a      	strb	r2, [r3, #12]
		break;
    d814:	e004      	b.n	d820 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    d816:	4b31      	ldr	r3, [pc, #196]	; (d8dc <mmc_decode_csd+0x11c>)
    d818:	681b      	ldr	r3, [r3, #0]
    d81a:	2240      	movs	r2, #64	; 0x40
    d81c:	731a      	strb	r2, [r3, #12]
		break;
    d81e:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    d820:	4b2e      	ldr	r3, [pc, #184]	; (d8dc <mmc_decode_csd+0x11c>)
    d822:	681b      	ldr	r3, [r3, #0]
    d824:	330e      	adds	r3, #14
    d826:	0018      	movs	r0, r3
    d828:	2308      	movs	r3, #8
    d82a:	2260      	movs	r2, #96	; 0x60
    d82c:	2180      	movs	r1, #128	; 0x80
    d82e:	4c2c      	ldr	r4, [pc, #176]	; (d8e0 <mmc_decode_csd+0x120>)
    d830:	47a0      	blx	r4
    d832:	0003      	movs	r3, r0
    d834:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    d836:	68fb      	ldr	r3, [r7, #12]
    d838:	2207      	movs	r2, #7
    d83a:	401a      	ands	r2, r3
    d83c:	4b29      	ldr	r3, [pc, #164]	; (d8e4 <mmc_decode_csd+0x124>)
    d83e:	0092      	lsls	r2, r2, #2
    d840:	58d3      	ldr	r3, [r2, r3]
    d842:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    d844:	68fb      	ldr	r3, [r7, #12]
    d846:	08db      	lsrs	r3, r3, #3
    d848:	220f      	movs	r2, #15
    d84a:	401a      	ands	r2, r3
    d84c:	4b26      	ldr	r3, [pc, #152]	; (d8e8 <mmc_decode_csd+0x128>)
    d84e:	0092      	lsls	r2, r2, #2
    d850:	58d3      	ldr	r3, [r2, r3]
    d852:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    d854:	4b21      	ldr	r3, [pc, #132]	; (d8dc <mmc_decode_csd+0x11c>)
    d856:	681b      	ldr	r3, [r3, #0]
    d858:	68ba      	ldr	r2, [r7, #8]
    d85a:	6879      	ldr	r1, [r7, #4]
    d85c:	434a      	muls	r2, r1
    d85e:	21fa      	movs	r1, #250	; 0xfa
    d860:	0089      	lsls	r1, r1, #2
    d862:	434a      	muls	r2, r1
    d864:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    d866:	4b1d      	ldr	r3, [pc, #116]	; (d8dc <mmc_decode_csd+0x11c>)
    d868:	681b      	ldr	r3, [r3, #0]
    d86a:	330e      	adds	r3, #14
    d86c:	0018      	movs	r0, r3
    d86e:	230c      	movs	r3, #12
    d870:	223e      	movs	r2, #62	; 0x3e
    d872:	2180      	movs	r1, #128	; 0x80
    d874:	4c1a      	ldr	r4, [pc, #104]	; (d8e0 <mmc_decode_csd+0x120>)
    d876:	47a0      	blx	r4
    d878:	0002      	movs	r2, r0
    d87a:	4b1c      	ldr	r3, [pc, #112]	; (d8ec <mmc_decode_csd+0x12c>)
    d87c:	429a      	cmp	r2, r3
    d87e:	d028      	beq.n	d8d2 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    d880:	4b16      	ldr	r3, [pc, #88]	; (d8dc <mmc_decode_csd+0x11c>)
    d882:	681b      	ldr	r3, [r3, #0]
    d884:	330e      	adds	r3, #14
    d886:	0018      	movs	r0, r3
    d888:	230c      	movs	r3, #12
    d88a:	223e      	movs	r2, #62	; 0x3e
    d88c:	2180      	movs	r1, #128	; 0x80
    d88e:	4c14      	ldr	r4, [pc, #80]	; (d8e0 <mmc_decode_csd+0x120>)
    d890:	47a0      	blx	r4
    d892:	0003      	movs	r3, r0
    d894:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    d896:	4b11      	ldr	r3, [pc, #68]	; (d8dc <mmc_decode_csd+0x11c>)
    d898:	681b      	ldr	r3, [r3, #0]
    d89a:	330e      	adds	r3, #14
    d89c:	0018      	movs	r0, r3
    d89e:	2303      	movs	r3, #3
    d8a0:	222f      	movs	r2, #47	; 0x2f
    d8a2:	2180      	movs	r1, #128	; 0x80
    d8a4:	4d0e      	ldr	r5, [pc, #56]	; (d8e0 <mmc_decode_csd+0x120>)
    d8a6:	47a8      	blx	r5
    d8a8:	0003      	movs	r3, r0
    d8aa:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    d8ac:	409c      	lsls	r4, r3
    d8ae:	0023      	movs	r3, r4
    d8b0:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    d8b2:	4b0a      	ldr	r3, [pc, #40]	; (d8dc <mmc_decode_csd+0x11c>)
    d8b4:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    d8b6:	4b09      	ldr	r3, [pc, #36]	; (d8dc <mmc_decode_csd+0x11c>)
    d8b8:	681b      	ldr	r3, [r3, #0]
    d8ba:	330e      	adds	r3, #14
    d8bc:	0018      	movs	r0, r3
    d8be:	2304      	movs	r3, #4
    d8c0:	2250      	movs	r2, #80	; 0x50
    d8c2:	2180      	movs	r1, #128	; 0x80
    d8c4:	4d06      	ldr	r5, [pc, #24]	; (d8e0 <mmc_decode_csd+0x120>)
    d8c6:	47a8      	blx	r5
    d8c8:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    d8ca:	683b      	ldr	r3, [r7, #0]
    d8cc:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    d8ce:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    d8d0:	6063      	str	r3, [r4, #4]
	}
}
    d8d2:	46c0      	nop			; (mov r8, r8)
    d8d4:	46bd      	mov	sp, r7
    d8d6:	b004      	add	sp, #16
    d8d8:	bdb0      	pop	{r4, r5, r7, pc}
    d8da:	46c0      	nop			; (mov r8, r8)
    d8dc:	20003e7c 	.word	0x20003e7c
    d8e0:	0000d2bd 	.word	0x0000d2bd
    d8e4:	000280f8 	.word	0x000280f8
    d8e8:	00028154 	.word	0x00028154
    d8ec:	00000fff 	.word	0x00000fff

0000d8f0 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    d8f0:	b5b0      	push	{r4, r5, r7, lr}
    d8f2:	b084      	sub	sp, #16
    d8f4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    d8f6:	4b35      	ldr	r3, [pc, #212]	; (d9cc <sd_decode_csd+0xdc>)
    d8f8:	681b      	ldr	r3, [r3, #0]
    d8fa:	330e      	adds	r3, #14
    d8fc:	0018      	movs	r0, r3
    d8fe:	2308      	movs	r3, #8
    d900:	2260      	movs	r2, #96	; 0x60
    d902:	2180      	movs	r1, #128	; 0x80
    d904:	4c32      	ldr	r4, [pc, #200]	; (d9d0 <sd_decode_csd+0xe0>)
    d906:	47a0      	blx	r4
    d908:	0003      	movs	r3, r0
    d90a:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    d90c:	68fb      	ldr	r3, [r7, #12]
    d90e:	2207      	movs	r2, #7
    d910:	401a      	ands	r2, r3
    d912:	4b30      	ldr	r3, [pc, #192]	; (d9d4 <sd_decode_csd+0xe4>)
    d914:	0092      	lsls	r2, r2, #2
    d916:	58d3      	ldr	r3, [r2, r3]
    d918:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    d91a:	68fb      	ldr	r3, [r7, #12]
    d91c:	08db      	lsrs	r3, r3, #3
    d91e:	220f      	movs	r2, #15
    d920:	401a      	ands	r2, r3
    d922:	4b2d      	ldr	r3, [pc, #180]	; (d9d8 <sd_decode_csd+0xe8>)
    d924:	0092      	lsls	r2, r2, #2
    d926:	58d3      	ldr	r3, [r2, r3]
    d928:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    d92a:	4b28      	ldr	r3, [pc, #160]	; (d9cc <sd_decode_csd+0xdc>)
    d92c:	681b      	ldr	r3, [r3, #0]
    d92e:	68ba      	ldr	r2, [r7, #8]
    d930:	6879      	ldr	r1, [r7, #4]
    d932:	434a      	muls	r2, r1
    d934:	21fa      	movs	r1, #250	; 0xfa
    d936:	0089      	lsls	r1, r1, #2
    d938:	434a      	muls	r2, r1
    d93a:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    d93c:	4b23      	ldr	r3, [pc, #140]	; (d9cc <sd_decode_csd+0xdc>)
    d93e:	681b      	ldr	r3, [r3, #0]
    d940:	330e      	adds	r3, #14
    d942:	0018      	movs	r0, r3
    d944:	2302      	movs	r3, #2
    d946:	227e      	movs	r2, #126	; 0x7e
    d948:	2180      	movs	r1, #128	; 0x80
    d94a:	4c21      	ldr	r4, [pc, #132]	; (d9d0 <sd_decode_csd+0xe0>)
    d94c:	47a0      	blx	r4
    d94e:	1e03      	subs	r3, r0, #0
    d950:	d00f      	beq.n	d972 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    d952:	4b1e      	ldr	r3, [pc, #120]	; (d9cc <sd_decode_csd+0xdc>)
    d954:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    d956:	4b1d      	ldr	r3, [pc, #116]	; (d9cc <sd_decode_csd+0xdc>)
    d958:	681b      	ldr	r3, [r3, #0]
    d95a:	330e      	adds	r3, #14
    d95c:	0018      	movs	r0, r3
    d95e:	2316      	movs	r3, #22
    d960:	2230      	movs	r2, #48	; 0x30
    d962:	2180      	movs	r1, #128	; 0x80
    d964:	4d1a      	ldr	r5, [pc, #104]	; (d9d0 <sd_decode_csd+0xe0>)
    d966:	47a8      	blx	r5
    d968:	0003      	movs	r3, r0
				* 512;
    d96a:	3301      	adds	r3, #1
    d96c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    d96e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    d970:	e028      	b.n	d9c4 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    d972:	4b16      	ldr	r3, [pc, #88]	; (d9cc <sd_decode_csd+0xdc>)
    d974:	681b      	ldr	r3, [r3, #0]
    d976:	330e      	adds	r3, #14
    d978:	0018      	movs	r0, r3
    d97a:	230c      	movs	r3, #12
    d97c:	223e      	movs	r2, #62	; 0x3e
    d97e:	2180      	movs	r1, #128	; 0x80
    d980:	4c13      	ldr	r4, [pc, #76]	; (d9d0 <sd_decode_csd+0xe0>)
    d982:	47a0      	blx	r4
    d984:	0003      	movs	r3, r0
    d986:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    d988:	4b10      	ldr	r3, [pc, #64]	; (d9cc <sd_decode_csd+0xdc>)
    d98a:	681b      	ldr	r3, [r3, #0]
    d98c:	330e      	adds	r3, #14
    d98e:	0018      	movs	r0, r3
    d990:	2303      	movs	r3, #3
    d992:	222f      	movs	r2, #47	; 0x2f
    d994:	2180      	movs	r1, #128	; 0x80
    d996:	4d0e      	ldr	r5, [pc, #56]	; (d9d0 <sd_decode_csd+0xe0>)
    d998:	47a8      	blx	r5
    d99a:	0003      	movs	r3, r0
    d99c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    d99e:	409c      	lsls	r4, r3
    d9a0:	0023      	movs	r3, r4
    d9a2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    d9a4:	4b09      	ldr	r3, [pc, #36]	; (d9cc <sd_decode_csd+0xdc>)
    d9a6:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    d9a8:	4b08      	ldr	r3, [pc, #32]	; (d9cc <sd_decode_csd+0xdc>)
    d9aa:	681b      	ldr	r3, [r3, #0]
    d9ac:	330e      	adds	r3, #14
    d9ae:	0018      	movs	r0, r3
    d9b0:	2304      	movs	r3, #4
    d9b2:	2250      	movs	r2, #80	; 0x50
    d9b4:	2180      	movs	r1, #128	; 0x80
    d9b6:	4d06      	ldr	r5, [pc, #24]	; (d9d0 <sd_decode_csd+0xe0>)
    d9b8:	47a8      	blx	r5
    d9ba:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    d9bc:	683b      	ldr	r3, [r7, #0]
    d9be:	4093      	lsls	r3, r2
				/ 1024;
    d9c0:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    d9c2:	6063      	str	r3, [r4, #4]
}
    d9c4:	46c0      	nop			; (mov r8, r8)
    d9c6:	46bd      	mov	sp, r7
    d9c8:	b004      	add	sp, #16
    d9ca:	bdb0      	pop	{r4, r5, r7, pc}
    d9cc:	20003e7c 	.word	0x20003e7c
    d9d0:	0000d2bd 	.word	0x0000d2bd
    d9d4:	000280f8 	.word	0x000280f8
    d9d8:	00028114 	.word	0x00028114

0000d9dc <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    d9dc:	b580      	push	{r7, lr}
    d9de:	b082      	sub	sp, #8
    d9e0:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    d9e2:	4b11      	ldr	r3, [pc, #68]	; (da28 <sd_mmc_cmd13+0x4c>)
    d9e4:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    d9e6:	4b11      	ldr	r3, [pc, #68]	; (da2c <sd_mmc_cmd13+0x50>)
    d9e8:	2100      	movs	r1, #0
    d9ea:	0018      	movs	r0, r3
    d9ec:	4b10      	ldr	r3, [pc, #64]	; (da30 <sd_mmc_cmd13+0x54>)
    d9ee:	4798      	blx	r3
    d9f0:	0003      	movs	r3, r0
    d9f2:	001a      	movs	r2, r3
    d9f4:	2301      	movs	r3, #1
    d9f6:	4053      	eors	r3, r2
    d9f8:	b2db      	uxtb	r3, r3
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	d001      	beq.n	da02 <sd_mmc_cmd13+0x26>
				return false;
    d9fe:	2300      	movs	r3, #0
    da00:	e00e      	b.n	da20 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    da02:	4b0c      	ldr	r3, [pc, #48]	; (da34 <sd_mmc_cmd13+0x58>)
    da04:	4798      	blx	r3
    da06:	0002      	movs	r2, r0
    da08:	23ff      	movs	r3, #255	; 0xff
    da0a:	4013      	ands	r3, r2
    da0c:	d006      	beq.n	da1c <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    da0e:	687b      	ldr	r3, [r7, #4]
    da10:	1e5a      	subs	r2, r3, #1
    da12:	607a      	str	r2, [r7, #4]
    da14:	2b00      	cmp	r3, #0
    da16:	d1e6      	bne.n	d9e6 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    da18:	2300      	movs	r3, #0
    da1a:	e001      	b.n	da20 <sd_mmc_cmd13+0x44>
				break;
    da1c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    da1e:	2301      	movs	r3, #1
}
    da20:	0018      	movs	r0, r3
    da22:	46bd      	mov	sp, r7
    da24:	b002      	add	sp, #8
    da26:	bd80      	pop	{r7, pc}
    da28:	00030d40 	.word	0x00030d40
    da2c:	00001b0d 	.word	0x00001b0d
    da30:	0000ee95 	.word	0x0000ee95
    da34:	0000f0d5 	.word	0x0000f0d5

0000da38 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    da38:	b590      	push	{r4, r7, lr}
    da3a:	b085      	sub	sp, #20
    da3c:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    da3e:	4b38      	ldr	r3, [pc, #224]	; (db20 <sd_acmd51+0xe8>)
    da40:	681b      	ldr	r3, [r3, #0]
    da42:	891b      	ldrh	r3, [r3, #8]
    da44:	041b      	lsls	r3, r3, #16
    da46:	4a37      	ldr	r2, [pc, #220]	; (db24 <sd_acmd51+0xec>)
    da48:	0019      	movs	r1, r3
    da4a:	0010      	movs	r0, r2
    da4c:	4b36      	ldr	r3, [pc, #216]	; (db28 <sd_acmd51+0xf0>)
    da4e:	4798      	blx	r3
    da50:	0003      	movs	r3, r0
    da52:	001a      	movs	r2, r3
    da54:	2301      	movs	r3, #1
    da56:	4053      	eors	r3, r2
    da58:	b2db      	uxtb	r3, r3
    da5a:	2b00      	cmp	r3, #0
    da5c:	d001      	beq.n	da62 <sd_acmd51+0x2a>
		return false;
    da5e:	2300      	movs	r3, #0
    da60:	e059      	b.n	db16 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    da62:	4832      	ldr	r0, [pc, #200]	; (db2c <sd_acmd51+0xf4>)
    da64:	2301      	movs	r3, #1
    da66:	9300      	str	r3, [sp, #0]
    da68:	2301      	movs	r3, #1
    da6a:	2208      	movs	r2, #8
    da6c:	2100      	movs	r1, #0
    da6e:	4c30      	ldr	r4, [pc, #192]	; (db30 <sd_acmd51+0xf8>)
    da70:	47a0      	blx	r4
    da72:	0003      	movs	r3, r0
    da74:	001a      	movs	r2, r3
    da76:	2301      	movs	r3, #1
    da78:	4053      	eors	r3, r2
    da7a:	b2db      	uxtb	r3, r3
    da7c:	2b00      	cmp	r3, #0
    da7e:	d001      	beq.n	da84 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    da80:	2300      	movs	r3, #0
    da82:	e048      	b.n	db16 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    da84:	003b      	movs	r3, r7
    da86:	2101      	movs	r1, #1
    da88:	0018      	movs	r0, r3
    da8a:	4b2a      	ldr	r3, [pc, #168]	; (db34 <sd_acmd51+0xfc>)
    da8c:	4798      	blx	r3
    da8e:	0003      	movs	r3, r0
    da90:	001a      	movs	r2, r3
    da92:	2301      	movs	r3, #1
    da94:	4053      	eors	r3, r2
    da96:	b2db      	uxtb	r3, r3
    da98:	2b00      	cmp	r3, #0
    da9a:	d001      	beq.n	daa0 <sd_acmd51+0x68>
		return false;
    da9c:	2300      	movs	r3, #0
    da9e:	e03a      	b.n	db16 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    daa0:	4b25      	ldr	r3, [pc, #148]	; (db38 <sd_acmd51+0x100>)
    daa2:	4798      	blx	r3
    daa4:	0003      	movs	r3, r0
    daa6:	001a      	movs	r2, r3
    daa8:	2301      	movs	r3, #1
    daaa:	4053      	eors	r3, r2
    daac:	b2db      	uxtb	r3, r3
    daae:	2b00      	cmp	r3, #0
    dab0:	d001      	beq.n	dab6 <sd_acmd51+0x7e>
		return false;
    dab2:	2300      	movs	r3, #0
    dab4:	e02f      	b.n	db16 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    dab6:	0038      	movs	r0, r7
    dab8:	2304      	movs	r3, #4
    daba:	2238      	movs	r2, #56	; 0x38
    dabc:	2140      	movs	r1, #64	; 0x40
    dabe:	4c1f      	ldr	r4, [pc, #124]	; (db3c <sd_acmd51+0x104>)
    dac0:	47a0      	blx	r4
    dac2:	0003      	movs	r3, r0
    dac4:	2b01      	cmp	r3, #1
    dac6:	d008      	beq.n	dada <sd_acmd51+0xa2>
    dac8:	d302      	bcc.n	dad0 <sd_acmd51+0x98>
    daca:	2b02      	cmp	r3, #2
    dacc:	d00a      	beq.n	dae4 <sd_acmd51+0xac>
    dace:	e01c      	b.n	db0a <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    dad0:	4b13      	ldr	r3, [pc, #76]	; (db20 <sd_acmd51+0xe8>)
    dad2:	681b      	ldr	r3, [r3, #0]
    dad4:	2210      	movs	r2, #16
    dad6:	731a      	strb	r2, [r3, #12]
		break;
    dad8:	e01c      	b.n	db14 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    dada:	4b11      	ldr	r3, [pc, #68]	; (db20 <sd_acmd51+0xe8>)
    dadc:	681b      	ldr	r3, [r3, #0]
    dade:	221a      	movs	r2, #26
    dae0:	731a      	strb	r2, [r3, #12]
		break;
    dae2:	e017      	b.n	db14 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    dae4:	0038      	movs	r0, r7
    dae6:	2301      	movs	r3, #1
    dae8:	222f      	movs	r2, #47	; 0x2f
    daea:	2140      	movs	r1, #64	; 0x40
    daec:	4c13      	ldr	r4, [pc, #76]	; (db3c <sd_acmd51+0x104>)
    daee:	47a0      	blx	r4
    daf0:	0003      	movs	r3, r0
    daf2:	2b01      	cmp	r3, #1
    daf4:	d104      	bne.n	db00 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    daf6:	4b0a      	ldr	r3, [pc, #40]	; (db20 <sd_acmd51+0xe8>)
    daf8:	681b      	ldr	r3, [r3, #0]
    dafa:	2230      	movs	r2, #48	; 0x30
    dafc:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    dafe:	e009      	b.n	db14 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    db00:	4b07      	ldr	r3, [pc, #28]	; (db20 <sd_acmd51+0xe8>)
    db02:	681b      	ldr	r3, [r3, #0]
    db04:	2220      	movs	r2, #32
    db06:	731a      	strb	r2, [r3, #12]
		break;
    db08:	e004      	b.n	db14 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    db0a:	4b05      	ldr	r3, [pc, #20]	; (db20 <sd_acmd51+0xe8>)
    db0c:	681b      	ldr	r3, [r3, #0]
    db0e:	2210      	movs	r2, #16
    db10:	731a      	strb	r2, [r3, #12]
		break;
    db12:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    db14:	2301      	movs	r3, #1
}
    db16:	0018      	movs	r0, r3
    db18:	46bd      	mov	sp, r7
    db1a:	b003      	add	sp, #12
    db1c:	bd90      	pop	{r4, r7, pc}
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	20003e7c 	.word	0x20003e7c
    db24:	00001137 	.word	0x00001137
    db28:	0000ee95 	.word	0x0000ee95
    db2c:	00081133 	.word	0x00081133
    db30:	0000eebd 	.word	0x0000eebd
    db34:	0000f18d 	.word	0x0000f18d
    db38:	0000f231 	.word	0x0000f231
    db3c:	0000d2bd 	.word	0x0000d2bd

0000db40 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    db40:	b580      	push	{r7, lr}
    db42:	b082      	sub	sp, #8
    db44:	af00      	add	r7, sp, #0
    db46:	0002      	movs	r2, r0
    db48:	1dfb      	adds	r3, r7, #7
    db4a:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    db4c:	1dfb      	adds	r3, r7, #7
    db4e:	781b      	ldrb	r3, [r3, #0]
    db50:	2b00      	cmp	r3, #0
    db52:	d001      	beq.n	db58 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    db54:	2304      	movs	r3, #4
    db56:	e047      	b.n	dbe8 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    db58:	1dfb      	adds	r3, r7, #7
    db5a:	781b      	ldrb	r3, [r3, #0]
    db5c:	4a24      	ldr	r2, [pc, #144]	; (dbf0 <sd_mmc_select_slot+0xb0>)
    db5e:	015b      	lsls	r3, r3, #5
    db60:	18d3      	adds	r3, r2, r3
    db62:	330a      	adds	r3, #10
    db64:	781b      	ldrb	r3, [r3, #0]
    db66:	2b04      	cmp	r3, #4
    db68:	d008      	beq.n	db7c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    db6a:	1dfb      	adds	r3, r7, #7
    db6c:	781b      	ldrb	r3, [r3, #0]
    db6e:	4a20      	ldr	r2, [pc, #128]	; (dbf0 <sd_mmc_select_slot+0xb0>)
    db70:	015b      	lsls	r3, r3, #5
    db72:	18d3      	adds	r3, r2, r3
    db74:	330a      	adds	r3, #10
    db76:	781b      	ldrb	r3, [r3, #0]
    db78:	2b03      	cmp	r3, #3
    db7a:	d11d      	bne.n	dbb8 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    db7c:	1dfb      	adds	r3, r7, #7
    db7e:	781b      	ldrb	r3, [r3, #0]
    db80:	4a1b      	ldr	r2, [pc, #108]	; (dbf0 <sd_mmc_select_slot+0xb0>)
    db82:	015b      	lsls	r3, r3, #5
    db84:	18d3      	adds	r3, r2, r3
    db86:	330a      	adds	r3, #10
    db88:	2202      	movs	r2, #2
    db8a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    db8c:	1dfb      	adds	r3, r7, #7
    db8e:	781a      	ldrb	r2, [r3, #0]
    db90:	4b17      	ldr	r3, [pc, #92]	; (dbf0 <sd_mmc_select_slot+0xb0>)
    db92:	0152      	lsls	r2, r2, #5
    db94:	4917      	ldr	r1, [pc, #92]	; (dbf4 <sd_mmc_select_slot+0xb4>)
    db96:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    db98:	1dfb      	adds	r3, r7, #7
    db9a:	781b      	ldrb	r3, [r3, #0]
    db9c:	4a14      	ldr	r2, [pc, #80]	; (dbf0 <sd_mmc_select_slot+0xb0>)
    db9e:	015b      	lsls	r3, r3, #5
    dba0:	18d3      	adds	r3, r2, r3
    dba2:	330d      	adds	r3, #13
    dba4:	2201      	movs	r2, #1
    dba6:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    dba8:	1dfb      	adds	r3, r7, #7
    dbaa:	781b      	ldrb	r3, [r3, #0]
    dbac:	4a10      	ldr	r2, [pc, #64]	; (dbf0 <sd_mmc_select_slot+0xb0>)
    dbae:	015b      	lsls	r3, r3, #5
    dbb0:	18d3      	adds	r3, r2, r3
    dbb2:	331e      	adds	r3, #30
    dbb4:	2200      	movs	r2, #0
    dbb6:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    dbb8:	4b0f      	ldr	r3, [pc, #60]	; (dbf8 <sd_mmc_select_slot+0xb8>)
    dbba:	1dfa      	adds	r2, r7, #7
    dbbc:	7812      	ldrb	r2, [r2, #0]
    dbbe:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    dbc0:	1dfb      	adds	r3, r7, #7
    dbc2:	781b      	ldrb	r3, [r3, #0]
    dbc4:	015a      	lsls	r2, r3, #5
    dbc6:	4b0a      	ldr	r3, [pc, #40]	; (dbf0 <sd_mmc_select_slot+0xb0>)
    dbc8:	18d2      	adds	r2, r2, r3
    dbca:	4b0c      	ldr	r3, [pc, #48]	; (dbfc <sd_mmc_select_slot+0xbc>)
    dbcc:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    dbce:	4b0c      	ldr	r3, [pc, #48]	; (dc00 <sd_mmc_select_slot+0xc0>)
    dbd0:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    dbd2:	1dfb      	adds	r3, r7, #7
    dbd4:	781b      	ldrb	r3, [r3, #0]
    dbd6:	4a06      	ldr	r2, [pc, #24]	; (dbf0 <sd_mmc_select_slot+0xb0>)
    dbd8:	015b      	lsls	r3, r3, #5
    dbda:	18d3      	adds	r3, r2, r3
    dbdc:	330a      	adds	r3, #10
    dbde:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    dbe0:	3b02      	subs	r3, #2
    dbe2:	425a      	negs	r2, r3
    dbe4:	4153      	adcs	r3, r2
    dbe6:	b2db      	uxtb	r3, r3
}
    dbe8:	0018      	movs	r0, r3
    dbea:	46bd      	mov	sp, r7
    dbec:	b002      	add	sp, #8
    dbee:	bd80      	pop	{r7, pc}
    dbf0:	20003e58 	.word	0x20003e58
    dbf4:	00061a80 	.word	0x00061a80
    dbf8:	20003e78 	.word	0x20003e78
    dbfc:	20003e7c 	.word	0x20003e7c
    dc00:	0000dc05 	.word	0x0000dc05

0000dc04 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    dc04:	b5b0      	push	{r4, r5, r7, lr}
    dc06:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    dc08:	4b09      	ldr	r3, [pc, #36]	; (dc30 <sd_mmc_configure_slot+0x2c>)
    dc0a:	7818      	ldrb	r0, [r3, #0]
    dc0c:	4b09      	ldr	r3, [pc, #36]	; (dc34 <sd_mmc_configure_slot+0x30>)
    dc0e:	681b      	ldr	r3, [r3, #0]
    dc10:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    dc12:	4b08      	ldr	r3, [pc, #32]	; (dc34 <sd_mmc_configure_slot+0x30>)
    dc14:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    dc16:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    dc18:	4b06      	ldr	r3, [pc, #24]	; (dc34 <sd_mmc_configure_slot+0x30>)
    dc1a:	681b      	ldr	r3, [r3, #0]
    dc1c:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    dc1e:	1e5c      	subs	r4, r3, #1
    dc20:	41a3      	sbcs	r3, r4
    dc22:	b2db      	uxtb	r3, r3
    dc24:	4c04      	ldr	r4, [pc, #16]	; (dc38 <sd_mmc_configure_slot+0x34>)
    dc26:	47a0      	blx	r4
}
    dc28:	46c0      	nop			; (mov r8, r8)
    dc2a:	46bd      	mov	sp, r7
    dc2c:	bdb0      	pop	{r4, r5, r7, pc}
    dc2e:	46c0      	nop			; (mov r8, r8)
    dc30:	20003e78 	.word	0x20003e78
    dc34:	20003e7c 	.word	0x20003e7c
    dc38:	0000ed7d 	.word	0x0000ed7d

0000dc3c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    dc3c:	b580      	push	{r7, lr}
    dc3e:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    dc40:	4b05      	ldr	r3, [pc, #20]	; (dc58 <sd_mmc_deselect_slot+0x1c>)
    dc42:	781b      	ldrb	r3, [r3, #0]
    dc44:	2b00      	cmp	r3, #0
    dc46:	d104      	bne.n	dc52 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    dc48:	4b03      	ldr	r3, [pc, #12]	; (dc58 <sd_mmc_deselect_slot+0x1c>)
    dc4a:	781b      	ldrb	r3, [r3, #0]
    dc4c:	0018      	movs	r0, r3
    dc4e:	4b03      	ldr	r3, [pc, #12]	; (dc5c <sd_mmc_deselect_slot+0x20>)
    dc50:	4798      	blx	r3
	}
}
    dc52:	46c0      	nop			; (mov r8, r8)
    dc54:	46bd      	mov	sp, r7
    dc56:	bd80      	pop	{r7, pc}
    dc58:	20003e78 	.word	0x20003e78
    dc5c:	0000ee05 	.word	0x0000ee05

0000dc60 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    dc60:	b580      	push	{r7, lr}
    dc62:	b082      	sub	sp, #8
    dc64:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    dc66:	1dfb      	adds	r3, r7, #7
    dc68:	2200      	movs	r2, #0
    dc6a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    dc6c:	4b59      	ldr	r3, [pc, #356]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dc6e:	681b      	ldr	r3, [r3, #0]
    dc70:	2201      	movs	r2, #1
    dc72:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    dc74:	4b57      	ldr	r3, [pc, #348]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dc76:	681b      	ldr	r3, [r3, #0]
    dc78:	2200      	movs	r2, #0
    dc7a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    dc7c:	4b55      	ldr	r3, [pc, #340]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dc7e:	681b      	ldr	r3, [r3, #0]
    dc80:	2200      	movs	r2, #0
    dc82:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    dc84:	4b54      	ldr	r3, [pc, #336]	; (ddd8 <sd_mmc_spi_card_init+0x178>)
    dc86:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    dc88:	2388      	movs	r3, #136	; 0x88
    dc8a:	015b      	lsls	r3, r3, #5
    dc8c:	2100      	movs	r1, #0
    dc8e:	0018      	movs	r0, r3
    dc90:	4b52      	ldr	r3, [pc, #328]	; (dddc <sd_mmc_spi_card_init+0x17c>)
    dc92:	4798      	blx	r3
    dc94:	0003      	movs	r3, r0
    dc96:	001a      	movs	r2, r3
    dc98:	2301      	movs	r3, #1
    dc9a:	4053      	eors	r3, r2
    dc9c:	b2db      	uxtb	r3, r3
    dc9e:	2b00      	cmp	r3, #0
    dca0:	d001      	beq.n	dca6 <sd_mmc_spi_card_init+0x46>
		return false;
    dca2:	2300      	movs	r3, #0
    dca4:	e092      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    dca6:	1dfb      	adds	r3, r7, #7
    dca8:	0018      	movs	r0, r3
    dcaa:	4b4d      	ldr	r3, [pc, #308]	; (dde0 <sd_mmc_spi_card_init+0x180>)
    dcac:	4798      	blx	r3
    dcae:	0003      	movs	r3, r0
    dcb0:	001a      	movs	r2, r3
    dcb2:	2301      	movs	r3, #1
    dcb4:	4053      	eors	r3, r2
    dcb6:	b2db      	uxtb	r3, r3
    dcb8:	2b00      	cmp	r3, #0
    dcba:	d001      	beq.n	dcc0 <sd_mmc_spi_card_init+0x60>
		return false;
    dcbc:	2300      	movs	r3, #0
    dcbe:	e085      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    dcc0:	4b48      	ldr	r3, [pc, #288]	; (dde4 <sd_mmc_spi_card_init+0x184>)
    dcc2:	4798      	blx	r3
    dcc4:	0003      	movs	r3, r0
    dcc6:	001a      	movs	r2, r3
    dcc8:	2301      	movs	r3, #1
    dcca:	4053      	eors	r3, r2
    dccc:	b2db      	uxtb	r3, r3
    dcce:	2b00      	cmp	r3, #0
    dcd0:	d001      	beq.n	dcd6 <sd_mmc_spi_card_init+0x76>
		return false;
    dcd2:	2300      	movs	r3, #0
    dcd4:	e07a      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    dcd6:	4b3f      	ldr	r3, [pc, #252]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dcd8:	681b      	ldr	r3, [r3, #0]
    dcda:	7adb      	ldrb	r3, [r3, #11]
    dcdc:	001a      	movs	r2, r3
    dcde:	2301      	movs	r3, #1
    dce0:	4013      	ands	r3, r2
    dce2:	d021      	beq.n	dd28 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    dce4:	1dfb      	adds	r3, r7, #7
    dce6:	781b      	ldrb	r3, [r3, #0]
    dce8:	0018      	movs	r0, r3
    dcea:	4b3f      	ldr	r3, [pc, #252]	; (dde8 <sd_mmc_spi_card_init+0x188>)
    dcec:	4798      	blx	r3
    dcee:	0003      	movs	r3, r0
    dcf0:	001a      	movs	r2, r3
    dcf2:	2301      	movs	r3, #1
    dcf4:	4053      	eors	r3, r2
    dcf6:	b2db      	uxtb	r3, r3
    dcf8:	2b00      	cmp	r3, #0
    dcfa:	d007      	beq.n	dd0c <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    dcfc:	4b35      	ldr	r3, [pc, #212]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dcfe:	681b      	ldr	r3, [r3, #0]
    dd00:	2202      	movs	r2, #2
    dd02:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    dd04:	4b39      	ldr	r3, [pc, #228]	; (ddec <sd_mmc_spi_card_init+0x18c>)
    dd06:	4798      	blx	r3
    dd08:	0003      	movs	r3, r0
    dd0a:	e05f      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    dd0c:	4b38      	ldr	r3, [pc, #224]	; (ddf0 <sd_mmc_spi_card_init+0x190>)
    dd0e:	2100      	movs	r1, #0
    dd10:	0018      	movs	r0, r3
    dd12:	4b32      	ldr	r3, [pc, #200]	; (dddc <sd_mmc_spi_card_init+0x17c>)
    dd14:	4798      	blx	r3
    dd16:	0003      	movs	r3, r0
    dd18:	001a      	movs	r2, r3
    dd1a:	2301      	movs	r3, #1
    dd1c:	4053      	eors	r3, r2
    dd1e:	b2db      	uxtb	r3, r3
    dd20:	2b00      	cmp	r3, #0
    dd22:	d001      	beq.n	dd28 <sd_mmc_spi_card_init+0xc8>
			return false;
    dd24:	2300      	movs	r3, #0
    dd26:	e051      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    dd28:	4b2a      	ldr	r3, [pc, #168]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dd2a:	681b      	ldr	r3, [r3, #0]
    dd2c:	7adb      	ldrb	r3, [r3, #11]
    dd2e:	001a      	movs	r2, r3
    dd30:	2301      	movs	r3, #1
    dd32:	4013      	ands	r3, r2
    dd34:	d017      	beq.n	dd66 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    dd36:	4b2f      	ldr	r3, [pc, #188]	; (ddf4 <sd_mmc_spi_card_init+0x194>)
    dd38:	4798      	blx	r3
    dd3a:	0003      	movs	r3, r0
    dd3c:	001a      	movs	r2, r3
    dd3e:	2301      	movs	r3, #1
    dd40:	4053      	eors	r3, r2
    dd42:	b2db      	uxtb	r3, r3
    dd44:	2b00      	cmp	r3, #0
    dd46:	d001      	beq.n	dd4c <sd_mmc_spi_card_init+0xec>
			return false;
    dd48:	2300      	movs	r3, #0
    dd4a:	e03f      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    dd4c:	4b2a      	ldr	r3, [pc, #168]	; (ddf8 <sd_mmc_spi_card_init+0x198>)
    dd4e:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    dd50:	4b2a      	ldr	r3, [pc, #168]	; (ddfc <sd_mmc_spi_card_init+0x19c>)
    dd52:	4798      	blx	r3
    dd54:	0003      	movs	r3, r0
    dd56:	001a      	movs	r2, r3
    dd58:	2301      	movs	r3, #1
    dd5a:	4053      	eors	r3, r2
    dd5c:	b2db      	uxtb	r3, r3
    dd5e:	2b00      	cmp	r3, #0
    dd60:	d001      	beq.n	dd66 <sd_mmc_spi_card_init+0x106>
			return false;
    dd62:	2300      	movs	r3, #0
    dd64:	e032      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    dd66:	4b1b      	ldr	r3, [pc, #108]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dd68:	681b      	ldr	r3, [r3, #0]
    dd6a:	7adb      	ldrb	r3, [r3, #11]
    dd6c:	001a      	movs	r2, r3
    dd6e:	2301      	movs	r3, #1
    dd70:	4013      	ands	r3, r2
    dd72:	d016      	beq.n	dda2 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    dd74:	4b17      	ldr	r3, [pc, #92]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dd76:	681b      	ldr	r3, [r3, #0]
    dd78:	7adb      	ldrb	r3, [r3, #11]
    dd7a:	001a      	movs	r2, r3
    dd7c:	2308      	movs	r3, #8
    dd7e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    dd80:	d10f      	bne.n	dda2 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    dd82:	2380      	movs	r3, #128	; 0x80
    dd84:	009b      	lsls	r3, r3, #2
    dd86:	4a1e      	ldr	r2, [pc, #120]	; (de00 <sd_mmc_spi_card_init+0x1a0>)
    dd88:	0019      	movs	r1, r3
    dd8a:	0010      	movs	r0, r2
    dd8c:	4b13      	ldr	r3, [pc, #76]	; (dddc <sd_mmc_spi_card_init+0x17c>)
    dd8e:	4798      	blx	r3
    dd90:	0003      	movs	r3, r0
    dd92:	001a      	movs	r2, r3
    dd94:	2301      	movs	r3, #1
    dd96:	4053      	eors	r3, r2
    dd98:	b2db      	uxtb	r3, r3
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d001      	beq.n	dda2 <sd_mmc_spi_card_init+0x142>
			return false;
    dd9e:	2300      	movs	r3, #0
    dda0:	e014      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    dda2:	4b0c      	ldr	r3, [pc, #48]	; (ddd4 <sd_mmc_spi_card_init+0x174>)
    dda4:	681b      	ldr	r3, [r3, #0]
    dda6:	7adb      	ldrb	r3, [r3, #11]
    dda8:	001a      	movs	r2, r3
    ddaa:	2301      	movs	r3, #1
    ddac:	4013      	ands	r3, r2
    ddae:	d00a      	beq.n	ddc6 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    ddb0:	4b14      	ldr	r3, [pc, #80]	; (de04 <sd_mmc_spi_card_init+0x1a4>)
    ddb2:	4798      	blx	r3
    ddb4:	0003      	movs	r3, r0
    ddb6:	001a      	movs	r2, r3
    ddb8:	2301      	movs	r3, #1
    ddba:	4053      	eors	r3, r2
    ddbc:	b2db      	uxtb	r3, r3
    ddbe:	2b00      	cmp	r3, #0
    ddc0:	d001      	beq.n	ddc6 <sd_mmc_spi_card_init+0x166>
			return false;
    ddc2:	2300      	movs	r3, #0
    ddc4:	e002      	b.n	ddcc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    ddc6:	4b10      	ldr	r3, [pc, #64]	; (de08 <sd_mmc_spi_card_init+0x1a8>)
    ddc8:	4798      	blx	r3
	return true;
    ddca:	2301      	movs	r3, #1
}
    ddcc:	0018      	movs	r0, r3
    ddce:	46bd      	mov	sp, r7
    ddd0:	b002      	add	sp, #8
    ddd2:	bd80      	pop	{r7, pc}
    ddd4:	20003e7c 	.word	0x20003e7c
    ddd8:	0000ee49 	.word	0x0000ee49
    dddc:	0000ee95 	.word	0x0000ee95
    dde0:	0000d5b5 	.word	0x0000d5b5
    dde4:	0000d5a9 	.word	0x0000d5a9
    dde8:	0000d4c5 	.word	0x0000d4c5
    ddec:	0000de0d 	.word	0x0000de0d
    ddf0:	0000113b 	.word	0x0000113b
    ddf4:	0000d751 	.word	0x0000d751
    ddf8:	0000d8f1 	.word	0x0000d8f1
    ddfc:	0000da39 	.word	0x0000da39
    de00:	00001110 	.word	0x00001110
    de04:	0000d9dd 	.word	0x0000d9dd
    de08:	0000dc05 	.word	0x0000dc05

0000de0c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    de0c:	b580      	push	{r7, lr}
    de0e:	b082      	sub	sp, #8
    de10:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    de12:	2388      	movs	r3, #136	; 0x88
    de14:	015b      	lsls	r3, r3, #5
    de16:	2100      	movs	r1, #0
    de18:	0018      	movs	r0, r3
    de1a:	4b32      	ldr	r3, [pc, #200]	; (dee4 <sd_mmc_spi_install_mmc+0xd8>)
    de1c:	4798      	blx	r3
    de1e:	0003      	movs	r3, r0
    de20:	001a      	movs	r2, r3
    de22:	2301      	movs	r3, #1
    de24:	4053      	eors	r3, r2
    de26:	b2db      	uxtb	r3, r3
    de28:	2b00      	cmp	r3, #0
    de2a:	d001      	beq.n	de30 <sd_mmc_spi_install_mmc+0x24>
		return false;
    de2c:	2300      	movs	r3, #0
    de2e:	e055      	b.n	dedc <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    de30:	4b2d      	ldr	r3, [pc, #180]	; (dee8 <sd_mmc_spi_install_mmc+0xdc>)
    de32:	4798      	blx	r3
    de34:	0003      	movs	r3, r0
    de36:	001a      	movs	r2, r3
    de38:	2301      	movs	r3, #1
    de3a:	4053      	eors	r3, r2
    de3c:	b2db      	uxtb	r3, r3
    de3e:	2b00      	cmp	r3, #0
    de40:	d001      	beq.n	de46 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    de42:	2300      	movs	r3, #0
    de44:	e04a      	b.n	dedc <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    de46:	4b29      	ldr	r3, [pc, #164]	; (deec <sd_mmc_spi_install_mmc+0xe0>)
    de48:	2100      	movs	r1, #0
    de4a:	0018      	movs	r0, r3
    de4c:	4b25      	ldr	r3, [pc, #148]	; (dee4 <sd_mmc_spi_install_mmc+0xd8>)
    de4e:	4798      	blx	r3
    de50:	0003      	movs	r3, r0
    de52:	001a      	movs	r2, r3
    de54:	2301      	movs	r3, #1
    de56:	4053      	eors	r3, r2
    de58:	b2db      	uxtb	r3, r3
    de5a:	2b00      	cmp	r3, #0
    de5c:	d001      	beq.n	de62 <sd_mmc_spi_install_mmc+0x56>
		return false;
    de5e:	2300      	movs	r3, #0
    de60:	e03c      	b.n	dedc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    de62:	4b23      	ldr	r3, [pc, #140]	; (def0 <sd_mmc_spi_install_mmc+0xe4>)
    de64:	4798      	blx	r3
    de66:	0003      	movs	r3, r0
    de68:	001a      	movs	r2, r3
    de6a:	2301      	movs	r3, #1
    de6c:	4053      	eors	r3, r2
    de6e:	b2db      	uxtb	r3, r3
    de70:	2b00      	cmp	r3, #0
    de72:	d001      	beq.n	de78 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    de74:	2300      	movs	r3, #0
    de76:	e031      	b.n	dedc <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    de78:	4b1e      	ldr	r3, [pc, #120]	; (def4 <sd_mmc_spi_install_mmc+0xe8>)
    de7a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    de7c:	4b1e      	ldr	r3, [pc, #120]	; (def8 <sd_mmc_spi_install_mmc+0xec>)
    de7e:	681b      	ldr	r3, [r3, #0]
    de80:	7b1b      	ldrb	r3, [r3, #12]
    de82:	2b3f      	cmp	r3, #63	; 0x3f
    de84:	d90c      	bls.n	dea0 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    de86:	1dfb      	adds	r3, r7, #7
    de88:	0018      	movs	r0, r3
    de8a:	4b1c      	ldr	r3, [pc, #112]	; (defc <sd_mmc_spi_install_mmc+0xf0>)
    de8c:	4798      	blx	r3
    de8e:	0003      	movs	r3, r0
    de90:	001a      	movs	r2, r3
    de92:	2301      	movs	r3, #1
    de94:	4053      	eors	r3, r2
    de96:	b2db      	uxtb	r3, r3
    de98:	2b00      	cmp	r3, #0
    de9a:	d001      	beq.n	dea0 <sd_mmc_spi_install_mmc+0x94>
			return false;
    de9c:	2300      	movs	r3, #0
    de9e:	e01d      	b.n	dedc <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    dea0:	2380      	movs	r3, #128	; 0x80
    dea2:	009b      	lsls	r3, r3, #2
    dea4:	4a16      	ldr	r2, [pc, #88]	; (df00 <sd_mmc_spi_install_mmc+0xf4>)
    dea6:	0019      	movs	r1, r3
    dea8:	0010      	movs	r0, r2
    deaa:	4b0e      	ldr	r3, [pc, #56]	; (dee4 <sd_mmc_spi_install_mmc+0xd8>)
    deac:	4798      	blx	r3
    deae:	0003      	movs	r3, r0
    deb0:	001a      	movs	r2, r3
    deb2:	2301      	movs	r3, #1
    deb4:	4053      	eors	r3, r2
    deb6:	b2db      	uxtb	r3, r3
    deb8:	2b00      	cmp	r3, #0
    deba:	d001      	beq.n	dec0 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    debc:	2300      	movs	r3, #0
    debe:	e00d      	b.n	dedc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    dec0:	4b10      	ldr	r3, [pc, #64]	; (df04 <sd_mmc_spi_install_mmc+0xf8>)
    dec2:	4798      	blx	r3
    dec4:	0003      	movs	r3, r0
    dec6:	001a      	movs	r2, r3
    dec8:	2301      	movs	r3, #1
    deca:	4053      	eors	r3, r2
    decc:	b2db      	uxtb	r3, r3
    dece:	2b00      	cmp	r3, #0
    ded0:	d001      	beq.n	ded6 <sd_mmc_spi_install_mmc+0xca>
		return false;
    ded2:	2300      	movs	r3, #0
    ded4:	e002      	b.n	dedc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    ded6:	4b0c      	ldr	r3, [pc, #48]	; (df08 <sd_mmc_spi_install_mmc+0xfc>)
    ded8:	4798      	blx	r3
	return true;
    deda:	2301      	movs	r3, #1
}
    dedc:	0018      	movs	r0, r3
    dede:	46bd      	mov	sp, r7
    dee0:	b002      	add	sp, #8
    dee2:	bd80      	pop	{r7, pc}
    dee4:	0000ee95 	.word	0x0000ee95
    dee8:	0000d419 	.word	0x0000d419
    deec:	0000113b 	.word	0x0000113b
    def0:	0000d751 	.word	0x0000d751
    def4:	0000d7c1 	.word	0x0000d7c1
    def8:	20003e7c 	.word	0x20003e7c
    defc:	0000d625 	.word	0x0000d625
    df00:	00001110 	.word	0x00001110
    df04:	0000d9dd 	.word	0x0000d9dd
    df08:	0000dc05 	.word	0x0000dc05

0000df0c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    df0c:	b580      	push	{r7, lr}
    df0e:	b082      	sub	sp, #8
    df10:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    df12:	1dfb      	adds	r3, r7, #7
    df14:	2200      	movs	r2, #0
    df16:	701a      	strb	r2, [r3, #0]
    df18:	e00c      	b.n	df34 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    df1a:	1dfb      	adds	r3, r7, #7
    df1c:	781b      	ldrb	r3, [r3, #0]
    df1e:	4a0c      	ldr	r2, [pc, #48]	; (df50 <sd_mmc_init+0x44>)
    df20:	015b      	lsls	r3, r3, #5
    df22:	18d3      	adds	r3, r2, r3
    df24:	330a      	adds	r3, #10
    df26:	2204      	movs	r2, #4
    df28:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    df2a:	1dfb      	adds	r3, r7, #7
    df2c:	781a      	ldrb	r2, [r3, #0]
    df2e:	1dfb      	adds	r3, r7, #7
    df30:	3201      	adds	r2, #1
    df32:	701a      	strb	r2, [r3, #0]
    df34:	1dfb      	adds	r3, r7, #7
    df36:	781b      	ldrb	r3, [r3, #0]
    df38:	2b00      	cmp	r3, #0
    df3a:	d0ee      	beq.n	df1a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    df3c:	4b05      	ldr	r3, [pc, #20]	; (df54 <sd_mmc_init+0x48>)
    df3e:	22ff      	movs	r2, #255	; 0xff
    df40:	701a      	strb	r2, [r3, #0]
	driver_init();
    df42:	4b05      	ldr	r3, [pc, #20]	; (df58 <sd_mmc_init+0x4c>)
    df44:	4798      	blx	r3
}
    df46:	46c0      	nop			; (mov r8, r8)
    df48:	46bd      	mov	sp, r7
    df4a:	b002      	add	sp, #8
    df4c:	bd80      	pop	{r7, pc}
    df4e:	46c0      	nop			; (mov r8, r8)
    df50:	20003e58 	.word	0x20003e58
    df54:	20003e78 	.word	0x20003e78
    df58:	0000ecb5 	.word	0x0000ecb5

0000df5c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    df5c:	b590      	push	{r4, r7, lr}
    df5e:	b085      	sub	sp, #20
    df60:	af00      	add	r7, sp, #0
    df62:	0002      	movs	r2, r0
    df64:	1dfb      	adds	r3, r7, #7
    df66:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    df68:	230f      	movs	r3, #15
    df6a:	18fc      	adds	r4, r7, r3
    df6c:	1dfb      	adds	r3, r7, #7
    df6e:	781b      	ldrb	r3, [r3, #0]
    df70:	0018      	movs	r0, r3
    df72:	4b13      	ldr	r3, [pc, #76]	; (dfc0 <sd_mmc_check+0x64>)
    df74:	4798      	blx	r3
    df76:	0003      	movs	r3, r0
    df78:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    df7a:	230f      	movs	r3, #15
    df7c:	18fb      	adds	r3, r7, r3
    df7e:	781b      	ldrb	r3, [r3, #0]
    df80:	2b01      	cmp	r3, #1
    df82:	d005      	beq.n	df90 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    df84:	4b0f      	ldr	r3, [pc, #60]	; (dfc4 <sd_mmc_check+0x68>)
    df86:	4798      	blx	r3
		return sd_mmc_err;
    df88:	230f      	movs	r3, #15
    df8a:	18fb      	adds	r3, r7, r3
    df8c:	781b      	ldrb	r3, [r3, #0]
    df8e:	e012      	b.n	dfb6 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    df90:	4b0d      	ldr	r3, [pc, #52]	; (dfc8 <sd_mmc_check+0x6c>)
    df92:	4798      	blx	r3
    df94:	1e03      	subs	r3, r0, #0
    df96:	d007      	beq.n	dfa8 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    df98:	4b0c      	ldr	r3, [pc, #48]	; (dfcc <sd_mmc_check+0x70>)
    df9a:	681b      	ldr	r3, [r3, #0]
    df9c:	2200      	movs	r2, #0
    df9e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    dfa0:	4b08      	ldr	r3, [pc, #32]	; (dfc4 <sd_mmc_check+0x68>)
    dfa2:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    dfa4:	2301      	movs	r3, #1
    dfa6:	e006      	b.n	dfb6 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    dfa8:	4b08      	ldr	r3, [pc, #32]	; (dfcc <sd_mmc_check+0x70>)
    dfaa:	681b      	ldr	r3, [r3, #0]
    dfac:	2203      	movs	r2, #3
    dfae:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    dfb0:	4b04      	ldr	r3, [pc, #16]	; (dfc4 <sd_mmc_check+0x68>)
    dfb2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    dfb4:	2303      	movs	r3, #3
}
    dfb6:	0018      	movs	r0, r3
    dfb8:	46bd      	mov	sp, r7
    dfba:	b005      	add	sp, #20
    dfbc:	bd90      	pop	{r4, r7, pc}
    dfbe:	46c0      	nop			; (mov r8, r8)
    dfc0:	0000db41 	.word	0x0000db41
    dfc4:	0000dc3d 	.word	0x0000dc3d
    dfc8:	0000dc61 	.word	0x0000dc61
    dfcc:	20003e7c 	.word	0x20003e7c

0000dfd0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    dfd0:	b580      	push	{r7, lr}
    dfd2:	b082      	sub	sp, #8
    dfd4:	af00      	add	r7, sp, #0
    dfd6:	0002      	movs	r2, r0
    dfd8:	1dfb      	adds	r3, r7, #7
    dfda:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    dfdc:	1dfb      	adds	r3, r7, #7
    dfde:	781b      	ldrb	r3, [r3, #0]
    dfe0:	0018      	movs	r0, r3
    dfe2:	4b07      	ldr	r3, [pc, #28]	; (e000 <sd_mmc_get_type+0x30>)
    dfe4:	4798      	blx	r3
    dfe6:	1e03      	subs	r3, r0, #0
    dfe8:	d001      	beq.n	dfee <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    dfea:	2300      	movs	r3, #0
    dfec:	e004      	b.n	dff8 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    dfee:	4b05      	ldr	r3, [pc, #20]	; (e004 <sd_mmc_get_type+0x34>)
    dff0:	4798      	blx	r3
	return sd_mmc_card->type;
    dff2:	4b05      	ldr	r3, [pc, #20]	; (e008 <sd_mmc_get_type+0x38>)
    dff4:	681b      	ldr	r3, [r3, #0]
    dff6:	7adb      	ldrb	r3, [r3, #11]
}
    dff8:	0018      	movs	r0, r3
    dffa:	46bd      	mov	sp, r7
    dffc:	b002      	add	sp, #8
    dffe:	bd80      	pop	{r7, pc}
    e000:	0000db41 	.word	0x0000db41
    e004:	0000dc3d 	.word	0x0000dc3d
    e008:	20003e7c 	.word	0x20003e7c

0000e00c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    e00c:	b580      	push	{r7, lr}
    e00e:	b082      	sub	sp, #8
    e010:	af00      	add	r7, sp, #0
    e012:	0002      	movs	r2, r0
    e014:	1dfb      	adds	r3, r7, #7
    e016:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    e018:	1dfb      	adds	r3, r7, #7
    e01a:	781b      	ldrb	r3, [r3, #0]
    e01c:	0018      	movs	r0, r3
    e01e:	4b07      	ldr	r3, [pc, #28]	; (e03c <sd_mmc_get_capacity+0x30>)
    e020:	4798      	blx	r3
    e022:	1e03      	subs	r3, r0, #0
    e024:	d001      	beq.n	e02a <sd_mmc_get_capacity+0x1e>
		return 0;
    e026:	2300      	movs	r3, #0
    e028:	e004      	b.n	e034 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    e02a:	4b05      	ldr	r3, [pc, #20]	; (e040 <sd_mmc_get_capacity+0x34>)
    e02c:	4798      	blx	r3
	return sd_mmc_card->capacity;
    e02e:	4b05      	ldr	r3, [pc, #20]	; (e044 <sd_mmc_get_capacity+0x38>)
    e030:	681b      	ldr	r3, [r3, #0]
    e032:	685b      	ldr	r3, [r3, #4]
}
    e034:	0018      	movs	r0, r3
    e036:	46bd      	mov	sp, r7
    e038:	b002      	add	sp, #8
    e03a:	bd80      	pop	{r7, pc}
    e03c:	0000db41 	.word	0x0000db41
    e040:	0000dc3d 	.word	0x0000dc3d
    e044:	20003e7c 	.word	0x20003e7c

0000e048 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    e048:	b580      	push	{r7, lr}
    e04a:	b082      	sub	sp, #8
    e04c:	af00      	add	r7, sp, #0
    e04e:	0002      	movs	r2, r0
    e050:	1dfb      	adds	r3, r7, #7
    e052:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    e054:	2300      	movs	r3, #0
}
    e056:	0018      	movs	r0, r3
    e058:	46bd      	mov	sp, r7
    e05a:	b002      	add	sp, #8
    e05c:	bd80      	pop	{r7, pc}
	...

0000e060 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    e060:	b590      	push	{r4, r7, lr}
    e062:	b089      	sub	sp, #36	; 0x24
    e064:	af02      	add	r7, sp, #8
    e066:	6039      	str	r1, [r7, #0]
    e068:	0011      	movs	r1, r2
    e06a:	1dfb      	adds	r3, r7, #7
    e06c:	1c02      	adds	r2, r0, #0
    e06e:	701a      	strb	r2, [r3, #0]
    e070:	1d3b      	adds	r3, r7, #4
    e072:	1c0a      	adds	r2, r1, #0
    e074:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    e076:	230f      	movs	r3, #15
    e078:	18fc      	adds	r4, r7, r3
    e07a:	1dfb      	adds	r3, r7, #7
    e07c:	781b      	ldrb	r3, [r3, #0]
    e07e:	0018      	movs	r0, r3
    e080:	4b29      	ldr	r3, [pc, #164]	; (e128 <sd_mmc_init_read_blocks+0xc8>)
    e082:	4798      	blx	r3
    e084:	0003      	movs	r3, r0
    e086:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    e088:	230f      	movs	r3, #15
    e08a:	18fb      	adds	r3, r7, r3
    e08c:	781b      	ldrb	r3, [r3, #0]
    e08e:	2b00      	cmp	r3, #0
    e090:	d003      	beq.n	e09a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    e092:	230f      	movs	r3, #15
    e094:	18fb      	adds	r3, r7, r3
    e096:	781b      	ldrb	r3, [r3, #0]
    e098:	e041      	b.n	e11e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    e09a:	4b24      	ldr	r3, [pc, #144]	; (e12c <sd_mmc_init_read_blocks+0xcc>)
    e09c:	4798      	blx	r3
    e09e:	0003      	movs	r3, r0
    e0a0:	001a      	movs	r2, r3
    e0a2:	2301      	movs	r3, #1
    e0a4:	4053      	eors	r3, r2
    e0a6:	b2db      	uxtb	r3, r3
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d003      	beq.n	e0b4 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    e0ac:	4b20      	ldr	r3, [pc, #128]	; (e130 <sd_mmc_init_read_blocks+0xd0>)
    e0ae:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    e0b0:	2305      	movs	r3, #5
    e0b2:	e034      	b.n	e11e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    e0b4:	1d3b      	adds	r3, r7, #4
    e0b6:	881b      	ldrh	r3, [r3, #0]
    e0b8:	2b01      	cmp	r3, #1
    e0ba:	d902      	bls.n	e0c2 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    e0bc:	4b1d      	ldr	r3, [pc, #116]	; (e134 <sd_mmc_init_read_blocks+0xd4>)
    e0be:	617b      	str	r3, [r7, #20]
    e0c0:	e001      	b.n	e0c6 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    e0c2:	4b1d      	ldr	r3, [pc, #116]	; (e138 <sd_mmc_init_read_blocks+0xd8>)
    e0c4:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    e0c6:	4b1d      	ldr	r3, [pc, #116]	; (e13c <sd_mmc_init_read_blocks+0xdc>)
    e0c8:	681b      	ldr	r3, [r3, #0]
    e0ca:	7adb      	ldrb	r3, [r3, #11]
    e0cc:	001a      	movs	r2, r3
    e0ce:	2308      	movs	r3, #8
    e0d0:	4013      	ands	r3, r2
    e0d2:	d002      	beq.n	e0da <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    e0d4:	683b      	ldr	r3, [r7, #0]
    e0d6:	613b      	str	r3, [r7, #16]
    e0d8:	e002      	b.n	e0e0 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    e0da:	683b      	ldr	r3, [r7, #0]
    e0dc:	025b      	lsls	r3, r3, #9
    e0de:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    e0e0:	1d3b      	adds	r3, r7, #4
    e0e2:	881c      	ldrh	r4, [r3, #0]
    e0e4:	2380      	movs	r3, #128	; 0x80
    e0e6:	009a      	lsls	r2, r3, #2
    e0e8:	6939      	ldr	r1, [r7, #16]
    e0ea:	6978      	ldr	r0, [r7, #20]
    e0ec:	2301      	movs	r3, #1
    e0ee:	9300      	str	r3, [sp, #0]
    e0f0:	0023      	movs	r3, r4
    e0f2:	4c13      	ldr	r4, [pc, #76]	; (e140 <sd_mmc_init_read_blocks+0xe0>)
    e0f4:	47a0      	blx	r4
    e0f6:	0003      	movs	r3, r0
    e0f8:	001a      	movs	r2, r3
    e0fa:	2301      	movs	r3, #1
    e0fc:	4053      	eors	r3, r2
    e0fe:	b2db      	uxtb	r3, r3
    e100:	2b00      	cmp	r3, #0
    e102:	d003      	beq.n	e10c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    e104:	4b0a      	ldr	r3, [pc, #40]	; (e130 <sd_mmc_init_read_blocks+0xd0>)
    e106:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    e108:	2305      	movs	r3, #5
    e10a:	e008      	b.n	e11e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    e10c:	4b0d      	ldr	r3, [pc, #52]	; (e144 <sd_mmc_init_read_blocks+0xe4>)
    e10e:	1d3a      	adds	r2, r7, #4
    e110:	8812      	ldrh	r2, [r2, #0]
    e112:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    e114:	4b0c      	ldr	r3, [pc, #48]	; (e148 <sd_mmc_init_read_blocks+0xe8>)
    e116:	1d3a      	adds	r2, r7, #4
    e118:	8812      	ldrh	r2, [r2, #0]
    e11a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    e11c:	2300      	movs	r3, #0
}
    e11e:	0018      	movs	r0, r3
    e120:	46bd      	mov	sp, r7
    e122:	b007      	add	sp, #28
    e124:	bd90      	pop	{r4, r7, pc}
    e126:	46c0      	nop			; (mov r8, r8)
    e128:	0000db41 	.word	0x0000db41
    e12c:	0000d9dd 	.word	0x0000d9dd
    e130:	0000dc3d 	.word	0x0000dc3d
    e134:	00101112 	.word	0x00101112
    e138:	00081111 	.word	0x00081111
    e13c:	20003e7c 	.word	0x20003e7c
    e140:	0000eebd 	.word	0x0000eebd
    e144:	20003e82 	.word	0x20003e82
    e148:	20003e80 	.word	0x20003e80

0000e14c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    e14c:	b580      	push	{r7, lr}
    e14e:	b082      	sub	sp, #8
    e150:	af00      	add	r7, sp, #0
    e152:	6078      	str	r0, [r7, #4]
    e154:	000a      	movs	r2, r1
    e156:	1cbb      	adds	r3, r7, #2
    e158:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    e15a:	1cbb      	adds	r3, r7, #2
    e15c:	881a      	ldrh	r2, [r3, #0]
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	0011      	movs	r1, r2
    e162:	0018      	movs	r0, r3
    e164:	4b0d      	ldr	r3, [pc, #52]	; (e19c <sd_mmc_start_read_blocks+0x50>)
    e166:	4798      	blx	r3
    e168:	0003      	movs	r3, r0
    e16a:	001a      	movs	r2, r3
    e16c:	2301      	movs	r3, #1
    e16e:	4053      	eors	r3, r2
    e170:	b2db      	uxtb	r3, r3
    e172:	2b00      	cmp	r3, #0
    e174:	d004      	beq.n	e180 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    e176:	4b0a      	ldr	r3, [pc, #40]	; (e1a0 <sd_mmc_start_read_blocks+0x54>)
    e178:	2200      	movs	r2, #0
    e17a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    e17c:	2305      	movs	r3, #5
    e17e:	e008      	b.n	e192 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    e180:	4b07      	ldr	r3, [pc, #28]	; (e1a0 <sd_mmc_start_read_blocks+0x54>)
    e182:	881a      	ldrh	r2, [r3, #0]
    e184:	1cbb      	adds	r3, r7, #2
    e186:	881b      	ldrh	r3, [r3, #0]
    e188:	1ad3      	subs	r3, r2, r3
    e18a:	b29a      	uxth	r2, r3
    e18c:	4b04      	ldr	r3, [pc, #16]	; (e1a0 <sd_mmc_start_read_blocks+0x54>)
    e18e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    e190:	2300      	movs	r3, #0
}
    e192:	0018      	movs	r0, r3
    e194:	46bd      	mov	sp, r7
    e196:	b002      	add	sp, #8
    e198:	bd80      	pop	{r7, pc}
    e19a:	46c0      	nop			; (mov r8, r8)
    e19c:	0000f18d 	.word	0x0000f18d
    e1a0:	20003e82 	.word	0x20003e82

0000e1a4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    e1a4:	b580      	push	{r7, lr}
    e1a6:	b082      	sub	sp, #8
    e1a8:	af00      	add	r7, sp, #0
    e1aa:	0002      	movs	r2, r0
    e1ac:	1dfb      	adds	r3, r7, #7
    e1ae:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    e1b0:	4b1c      	ldr	r3, [pc, #112]	; (e224 <sd_mmc_wait_end_of_read_blocks+0x80>)
    e1b2:	4798      	blx	r3
    e1b4:	0003      	movs	r3, r0
    e1b6:	001a      	movs	r2, r3
    e1b8:	2301      	movs	r3, #1
    e1ba:	4053      	eors	r3, r2
    e1bc:	b2db      	uxtb	r3, r3
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d001      	beq.n	e1c6 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    e1c2:	2305      	movs	r3, #5
    e1c4:	e029      	b.n	e21a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    e1c6:	1dfb      	adds	r3, r7, #7
    e1c8:	781b      	ldrb	r3, [r3, #0]
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d003      	beq.n	e1d6 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    e1ce:	4b16      	ldr	r3, [pc, #88]	; (e228 <sd_mmc_wait_end_of_read_blocks+0x84>)
    e1d0:	2200      	movs	r2, #0
    e1d2:	801a      	strh	r2, [r3, #0]
    e1d4:	e005      	b.n	e1e2 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    e1d6:	4b14      	ldr	r3, [pc, #80]	; (e228 <sd_mmc_wait_end_of_read_blocks+0x84>)
    e1d8:	881b      	ldrh	r3, [r3, #0]
    e1da:	2b00      	cmp	r3, #0
    e1dc:	d001      	beq.n	e1e2 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    e1de:	2300      	movs	r3, #0
    e1e0:	e01b      	b.n	e21a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    e1e2:	4b12      	ldr	r3, [pc, #72]	; (e22c <sd_mmc_wait_end_of_read_blocks+0x88>)
    e1e4:	881b      	ldrh	r3, [r3, #0]
    e1e6:	2b01      	cmp	r3, #1
    e1e8:	d103      	bne.n	e1f2 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    e1ea:	4b11      	ldr	r3, [pc, #68]	; (e230 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    e1ec:	4798      	blx	r3
		return SD_MMC_OK;
    e1ee:	2300      	movs	r3, #0
    e1f0:	e013      	b.n	e21a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    e1f2:	4b10      	ldr	r3, [pc, #64]	; (e234 <sd_mmc_wait_end_of_read_blocks+0x90>)
    e1f4:	2100      	movs	r1, #0
    e1f6:	0018      	movs	r0, r3
    e1f8:	4b0f      	ldr	r3, [pc, #60]	; (e238 <sd_mmc_wait_end_of_read_blocks+0x94>)
    e1fa:	4798      	blx	r3
    e1fc:	0003      	movs	r3, r0
    e1fe:	001a      	movs	r2, r3
    e200:	2301      	movs	r3, #1
    e202:	4053      	eors	r3, r2
    e204:	b2db      	uxtb	r3, r3
    e206:	2b00      	cmp	r3, #0
    e208:	d004      	beq.n	e214 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    e20a:	4b0a      	ldr	r3, [pc, #40]	; (e234 <sd_mmc_wait_end_of_read_blocks+0x90>)
    e20c:	2100      	movs	r1, #0
    e20e:	0018      	movs	r0, r3
    e210:	4b09      	ldr	r3, [pc, #36]	; (e238 <sd_mmc_wait_end_of_read_blocks+0x94>)
    e212:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    e214:	4b06      	ldr	r3, [pc, #24]	; (e230 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    e216:	4798      	blx	r3
	return SD_MMC_OK;
    e218:	2300      	movs	r3, #0
}
    e21a:	0018      	movs	r0, r3
    e21c:	46bd      	mov	sp, r7
    e21e:	b002      	add	sp, #8
    e220:	bd80      	pop	{r7, pc}
    e222:	46c0      	nop			; (mov r8, r8)
    e224:	0000f231 	.word	0x0000f231
    e228:	20003e82 	.word	0x20003e82
    e22c:	20003e80 	.word	0x20003e80
    e230:	0000dc3d 	.word	0x0000dc3d
    e234:	0000310c 	.word	0x0000310c
    e238:	0000ee95 	.word	0x0000ee95

0000e23c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    e23c:	b590      	push	{r4, r7, lr}
    e23e:	b089      	sub	sp, #36	; 0x24
    e240:	af02      	add	r7, sp, #8
    e242:	6039      	str	r1, [r7, #0]
    e244:	0011      	movs	r1, r2
    e246:	1dfb      	adds	r3, r7, #7
    e248:	1c02      	adds	r2, r0, #0
    e24a:	701a      	strb	r2, [r3, #0]
    e24c:	1d3b      	adds	r3, r7, #4
    e24e:	1c0a      	adds	r2, r1, #0
    e250:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    e252:	230f      	movs	r3, #15
    e254:	18fc      	adds	r4, r7, r3
    e256:	1dfb      	adds	r3, r7, #7
    e258:	781b      	ldrb	r3, [r3, #0]
    e25a:	0018      	movs	r0, r3
    e25c:	4b28      	ldr	r3, [pc, #160]	; (e300 <sd_mmc_init_write_blocks+0xc4>)
    e25e:	4798      	blx	r3
    e260:	0003      	movs	r3, r0
    e262:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    e264:	230f      	movs	r3, #15
    e266:	18fb      	adds	r3, r7, r3
    e268:	781b      	ldrb	r3, [r3, #0]
    e26a:	2b00      	cmp	r3, #0
    e26c:	d003      	beq.n	e276 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    e26e:	230f      	movs	r3, #15
    e270:	18fb      	adds	r3, r7, r3
    e272:	781b      	ldrb	r3, [r3, #0]
    e274:	e03f      	b.n	e2f6 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    e276:	1dfb      	adds	r3, r7, #7
    e278:	781b      	ldrb	r3, [r3, #0]
    e27a:	0018      	movs	r0, r3
    e27c:	4b21      	ldr	r3, [pc, #132]	; (e304 <sd_mmc_init_write_blocks+0xc8>)
    e27e:	4798      	blx	r3
    e280:	1e03      	subs	r3, r0, #0
    e282:	d003      	beq.n	e28c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    e284:	4b20      	ldr	r3, [pc, #128]	; (e308 <sd_mmc_init_write_blocks+0xcc>)
    e286:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    e288:	2307      	movs	r3, #7
    e28a:	e034      	b.n	e2f6 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    e28c:	1d3b      	adds	r3, r7, #4
    e28e:	881b      	ldrh	r3, [r3, #0]
    e290:	2b01      	cmp	r3, #1
    e292:	d902      	bls.n	e29a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    e294:	4b1d      	ldr	r3, [pc, #116]	; (e30c <sd_mmc_init_write_blocks+0xd0>)
    e296:	617b      	str	r3, [r7, #20]
    e298:	e001      	b.n	e29e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    e29a:	4b1d      	ldr	r3, [pc, #116]	; (e310 <sd_mmc_init_write_blocks+0xd4>)
    e29c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    e29e:	4b1d      	ldr	r3, [pc, #116]	; (e314 <sd_mmc_init_write_blocks+0xd8>)
    e2a0:	681b      	ldr	r3, [r3, #0]
    e2a2:	7adb      	ldrb	r3, [r3, #11]
    e2a4:	001a      	movs	r2, r3
    e2a6:	2308      	movs	r3, #8
    e2a8:	4013      	ands	r3, r2
    e2aa:	d002      	beq.n	e2b2 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    e2ac:	683b      	ldr	r3, [r7, #0]
    e2ae:	613b      	str	r3, [r7, #16]
    e2b0:	e002      	b.n	e2b8 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    e2b2:	683b      	ldr	r3, [r7, #0]
    e2b4:	025b      	lsls	r3, r3, #9
    e2b6:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    e2b8:	1d3b      	adds	r3, r7, #4
    e2ba:	881c      	ldrh	r4, [r3, #0]
    e2bc:	2380      	movs	r3, #128	; 0x80
    e2be:	009a      	lsls	r2, r3, #2
    e2c0:	6939      	ldr	r1, [r7, #16]
    e2c2:	6978      	ldr	r0, [r7, #20]
    e2c4:	2301      	movs	r3, #1
    e2c6:	9300      	str	r3, [sp, #0]
    e2c8:	0023      	movs	r3, r4
    e2ca:	4c13      	ldr	r4, [pc, #76]	; (e318 <sd_mmc_init_write_blocks+0xdc>)
    e2cc:	47a0      	blx	r4
    e2ce:	0003      	movs	r3, r0
    e2d0:	001a      	movs	r2, r3
    e2d2:	2301      	movs	r3, #1
    e2d4:	4053      	eors	r3, r2
    e2d6:	b2db      	uxtb	r3, r3
    e2d8:	2b00      	cmp	r3, #0
    e2da:	d003      	beq.n	e2e4 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    e2dc:	4b0a      	ldr	r3, [pc, #40]	; (e308 <sd_mmc_init_write_blocks+0xcc>)
    e2de:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    e2e0:	2305      	movs	r3, #5
    e2e2:	e008      	b.n	e2f6 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    e2e4:	4b0d      	ldr	r3, [pc, #52]	; (e31c <sd_mmc_init_write_blocks+0xe0>)
    e2e6:	1d3a      	adds	r2, r7, #4
    e2e8:	8812      	ldrh	r2, [r2, #0]
    e2ea:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    e2ec:	4b0c      	ldr	r3, [pc, #48]	; (e320 <sd_mmc_init_write_blocks+0xe4>)
    e2ee:	1d3a      	adds	r2, r7, #4
    e2f0:	8812      	ldrh	r2, [r2, #0]
    e2f2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    e2f4:	2300      	movs	r3, #0
}
    e2f6:	0018      	movs	r0, r3
    e2f8:	46bd      	mov	sp, r7
    e2fa:	b007      	add	sp, #28
    e2fc:	bd90      	pop	{r4, r7, pc}
    e2fe:	46c0      	nop			; (mov r8, r8)
    e300:	0000db41 	.word	0x0000db41
    e304:	0000e049 	.word	0x0000e049
    e308:	0000dc3d 	.word	0x0000dc3d
    e30c:	00109119 	.word	0x00109119
    e310:	00089118 	.word	0x00089118
    e314:	20003e7c 	.word	0x20003e7c
    e318:	0000eebd 	.word	0x0000eebd
    e31c:	20003e82 	.word	0x20003e82
    e320:	20003e80 	.word	0x20003e80

0000e324 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    e324:	b580      	push	{r7, lr}
    e326:	b082      	sub	sp, #8
    e328:	af00      	add	r7, sp, #0
    e32a:	6078      	str	r0, [r7, #4]
    e32c:	000a      	movs	r2, r1
    e32e:	1cbb      	adds	r3, r7, #2
    e330:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    e332:	1cbb      	adds	r3, r7, #2
    e334:	881a      	ldrh	r2, [r3, #0]
    e336:	687b      	ldr	r3, [r7, #4]
    e338:	0011      	movs	r1, r2
    e33a:	0018      	movs	r0, r3
    e33c:	4b0d      	ldr	r3, [pc, #52]	; (e374 <sd_mmc_start_write_blocks+0x50>)
    e33e:	4798      	blx	r3
    e340:	0003      	movs	r3, r0
    e342:	001a      	movs	r2, r3
    e344:	2301      	movs	r3, #1
    e346:	4053      	eors	r3, r2
    e348:	b2db      	uxtb	r3, r3
    e34a:	2b00      	cmp	r3, #0
    e34c:	d004      	beq.n	e358 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    e34e:	4b0a      	ldr	r3, [pc, #40]	; (e378 <sd_mmc_start_write_blocks+0x54>)
    e350:	2200      	movs	r2, #0
    e352:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    e354:	2305      	movs	r3, #5
    e356:	e008      	b.n	e36a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    e358:	4b07      	ldr	r3, [pc, #28]	; (e378 <sd_mmc_start_write_blocks+0x54>)
    e35a:	881a      	ldrh	r2, [r3, #0]
    e35c:	1cbb      	adds	r3, r7, #2
    e35e:	881b      	ldrh	r3, [r3, #0]
    e360:	1ad3      	subs	r3, r2, r3
    e362:	b29a      	uxth	r2, r3
    e364:	4b04      	ldr	r3, [pc, #16]	; (e378 <sd_mmc_start_write_blocks+0x54>)
    e366:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    e368:	2300      	movs	r3, #0
}
    e36a:	0018      	movs	r0, r3
    e36c:	46bd      	mov	sp, r7
    e36e:	b002      	add	sp, #8
    e370:	bd80      	pop	{r7, pc}
    e372:	46c0      	nop			; (mov r8, r8)
    e374:	0000f23d 	.word	0x0000f23d
    e378:	20003e82 	.word	0x20003e82

0000e37c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    e37c:	b580      	push	{r7, lr}
    e37e:	b082      	sub	sp, #8
    e380:	af00      	add	r7, sp, #0
    e382:	0002      	movs	r2, r0
    e384:	1dfb      	adds	r3, r7, #7
    e386:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    e388:	4b13      	ldr	r3, [pc, #76]	; (e3d8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    e38a:	4798      	blx	r3
    e38c:	0003      	movs	r3, r0
    e38e:	001a      	movs	r2, r3
    e390:	2301      	movs	r3, #1
    e392:	4053      	eors	r3, r2
    e394:	b2db      	uxtb	r3, r3
    e396:	2b00      	cmp	r3, #0
    e398:	d001      	beq.n	e39e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    e39a:	2305      	movs	r3, #5
    e39c:	e018      	b.n	e3d0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    e39e:	1dfb      	adds	r3, r7, #7
    e3a0:	781b      	ldrb	r3, [r3, #0]
    e3a2:	2b00      	cmp	r3, #0
    e3a4:	d003      	beq.n	e3ae <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    e3a6:	4b0d      	ldr	r3, [pc, #52]	; (e3dc <sd_mmc_wait_end_of_write_blocks+0x60>)
    e3a8:	2200      	movs	r2, #0
    e3aa:	801a      	strh	r2, [r3, #0]
    e3ac:	e005      	b.n	e3ba <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    e3ae:	4b0b      	ldr	r3, [pc, #44]	; (e3dc <sd_mmc_wait_end_of_write_blocks+0x60>)
    e3b0:	881b      	ldrh	r3, [r3, #0]
    e3b2:	2b00      	cmp	r3, #0
    e3b4:	d001      	beq.n	e3ba <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    e3b6:	2300      	movs	r3, #0
    e3b8:	e00a      	b.n	e3d0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    e3ba:	4b09      	ldr	r3, [pc, #36]	; (e3e0 <sd_mmc_wait_end_of_write_blocks+0x64>)
    e3bc:	881b      	ldrh	r3, [r3, #0]
    e3be:	2b01      	cmp	r3, #1
    e3c0:	d103      	bne.n	e3ca <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    e3c2:	4b08      	ldr	r3, [pc, #32]	; (e3e4 <sd_mmc_wait_end_of_write_blocks+0x68>)
    e3c4:	4798      	blx	r3
		return SD_MMC_OK;
    e3c6:	2300      	movs	r3, #0
    e3c8:	e002      	b.n	e3d0 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    e3ca:	4b06      	ldr	r3, [pc, #24]	; (e3e4 <sd_mmc_wait_end_of_write_blocks+0x68>)
    e3cc:	4798      	blx	r3
	return SD_MMC_OK;
    e3ce:	2300      	movs	r3, #0
}
    e3d0:	0018      	movs	r0, r3
    e3d2:	46bd      	mov	sp, r7
    e3d4:	b002      	add	sp, #8
    e3d6:	bd80      	pop	{r7, pc}
    e3d8:	0000f2fd 	.word	0x0000f2fd
    e3dc:	20003e82 	.word	0x20003e82
    e3e0:	20003e80 	.word	0x20003e80
    e3e4:	0000dc3d 	.word	0x0000dc3d

0000e3e8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    e3e8:	b580      	push	{r7, lr}
    e3ea:	b082      	sub	sp, #8
    e3ec:	af00      	add	r7, sp, #0
    e3ee:	0002      	movs	r2, r0
    e3f0:	1dfb      	adds	r3, r7, #7
    e3f2:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    e3f4:	1dfb      	adds	r3, r7, #7
    e3f6:	781b      	ldrb	r3, [r3, #0]
    e3f8:	0018      	movs	r0, r3
    e3fa:	4b16      	ldr	r3, [pc, #88]	; (e454 <sd_mmc_test_unit_ready+0x6c>)
    e3fc:	4798      	blx	r3
    e3fe:	0003      	movs	r3, r0
    e400:	2b01      	cmp	r3, #1
    e402:	d019      	beq.n	e438 <sd_mmc_test_unit_ready+0x50>
    e404:	2b02      	cmp	r3, #2
    e406:	d019      	beq.n	e43c <sd_mmc_test_unit_ready+0x54>
    e408:	2b00      	cmp	r3, #0
    e40a:	d11e      	bne.n	e44a <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    e40c:	1dfb      	adds	r3, r7, #7
    e40e:	781b      	ldrb	r3, [r3, #0]
    e410:	4a11      	ldr	r2, [pc, #68]	; (e458 <sd_mmc_test_unit_ready+0x70>)
    e412:	5cd3      	ldrb	r3, [r2, r3]
    e414:	2b00      	cmp	r3, #0
    e416:	d001      	beq.n	e41c <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    e418:	2302      	movs	r3, #2
    e41a:	e017      	b.n	e44c <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    e41c:	1dfb      	adds	r3, r7, #7
    e41e:	781b      	ldrb	r3, [r3, #0]
    e420:	0018      	movs	r0, r3
    e422:	4b0e      	ldr	r3, [pc, #56]	; (e45c <sd_mmc_test_unit_ready+0x74>)
    e424:	4798      	blx	r3
    e426:	0003      	movs	r3, r0
    e428:	001a      	movs	r2, r3
    e42a:	2303      	movs	r3, #3
    e42c:	4013      	ands	r3, r2
    e42e:	d001      	beq.n	e434 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    e430:	2300      	movs	r3, #0
    e432:	e00b      	b.n	e44c <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    e434:	2302      	movs	r3, #2
    e436:	e009      	b.n	e44c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    e438:	2303      	movs	r3, #3
    e43a:	e007      	b.n	e44c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    e43c:	1dfb      	adds	r3, r7, #7
    e43e:	781b      	ldrb	r3, [r3, #0]
    e440:	4a05      	ldr	r2, [pc, #20]	; (e458 <sd_mmc_test_unit_ready+0x70>)
    e442:	2100      	movs	r1, #0
    e444:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    e446:	2302      	movs	r3, #2
    e448:	e000      	b.n	e44c <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    e44a:	2301      	movs	r3, #1
	}
}
    e44c:	0018      	movs	r0, r3
    e44e:	46bd      	mov	sp, r7
    e450:	b002      	add	sp, #8
    e452:	bd80      	pop	{r7, pc}
    e454:	0000df5d 	.word	0x0000df5d
    e458:	20003e84 	.word	0x20003e84
    e45c:	0000dfd1 	.word	0x0000dfd1

0000e460 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    e460:	b580      	push	{r7, lr}
    e462:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    e464:	2000      	movs	r0, #0
    e466:	4b03      	ldr	r3, [pc, #12]	; (e474 <sd_mmc_test_unit_ready_0+0x14>)
    e468:	4798      	blx	r3
    e46a:	0003      	movs	r3, r0
}
    e46c:	0018      	movs	r0, r3
    e46e:	46bd      	mov	sp, r7
    e470:	bd80      	pop	{r7, pc}
    e472:	46c0      	nop			; (mov r8, r8)
    e474:	0000e3e9 	.word	0x0000e3e9

0000e478 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    e478:	b580      	push	{r7, lr}
    e47a:	b082      	sub	sp, #8
    e47c:	af00      	add	r7, sp, #0
    e47e:	0002      	movs	r2, r0
    e480:	6039      	str	r1, [r7, #0]
    e482:	1dfb      	adds	r3, r7, #7
    e484:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    e486:	1dfb      	adds	r3, r7, #7
    e488:	781b      	ldrb	r3, [r3, #0]
    e48a:	0018      	movs	r0, r3
    e48c:	4b08      	ldr	r3, [pc, #32]	; (e4b0 <sd_mmc_read_capacity+0x38>)
    e48e:	4798      	blx	r3
    e490:	0003      	movs	r3, r0
    e492:	005b      	lsls	r3, r3, #1
    e494:	1e5a      	subs	r2, r3, #1
    e496:	683b      	ldr	r3, [r7, #0]
    e498:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    e49a:	1dfb      	adds	r3, r7, #7
    e49c:	781b      	ldrb	r3, [r3, #0]
    e49e:	0018      	movs	r0, r3
    e4a0:	4b04      	ldr	r3, [pc, #16]	; (e4b4 <sd_mmc_read_capacity+0x3c>)
    e4a2:	4798      	blx	r3
    e4a4:	0003      	movs	r3, r0
}
    e4a6:	0018      	movs	r0, r3
    e4a8:	46bd      	mov	sp, r7
    e4aa:	b002      	add	sp, #8
    e4ac:	bd80      	pop	{r7, pc}
    e4ae:	46c0      	nop			; (mov r8, r8)
    e4b0:	0000e00d 	.word	0x0000e00d
    e4b4:	0000e3e9 	.word	0x0000e3e9

0000e4b8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    e4b8:	b580      	push	{r7, lr}
    e4ba:	b082      	sub	sp, #8
    e4bc:	af00      	add	r7, sp, #0
    e4be:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    e4c0:	687b      	ldr	r3, [r7, #4]
    e4c2:	0019      	movs	r1, r3
    e4c4:	2000      	movs	r0, #0
    e4c6:	4b03      	ldr	r3, [pc, #12]	; (e4d4 <sd_mmc_read_capacity_0+0x1c>)
    e4c8:	4798      	blx	r3
    e4ca:	0003      	movs	r3, r0
}
    e4cc:	0018      	movs	r0, r3
    e4ce:	46bd      	mov	sp, r7
    e4d0:	b002      	add	sp, #8
    e4d2:	bd80      	pop	{r7, pc}
    e4d4:	0000e479 	.word	0x0000e479

0000e4d8 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    e4d8:	b580      	push	{r7, lr}
    e4da:	b082      	sub	sp, #8
    e4dc:	af00      	add	r7, sp, #0
    e4de:	0002      	movs	r2, r0
    e4e0:	1dfb      	adds	r3, r7, #7
    e4e2:	701a      	strb	r2, [r3, #0]
    e4e4:	1dbb      	adds	r3, r7, #6
    e4e6:	1c0a      	adds	r2, r1, #0
    e4e8:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    e4ea:	1dfb      	adds	r3, r7, #7
    e4ec:	781b      	ldrb	r3, [r3, #0]
    e4ee:	4a04      	ldr	r2, [pc, #16]	; (e500 <sd_mmc_unload+0x28>)
    e4f0:	1db9      	adds	r1, r7, #6
    e4f2:	7809      	ldrb	r1, [r1, #0]
    e4f4:	54d1      	strb	r1, [r2, r3]
	return true;
    e4f6:	2301      	movs	r3, #1
}
    e4f8:	0018      	movs	r0, r3
    e4fa:	46bd      	mov	sp, r7
    e4fc:	b002      	add	sp, #8
    e4fe:	bd80      	pop	{r7, pc}
    e500:	20003e84 	.word	0x20003e84

0000e504 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    e504:	b580      	push	{r7, lr}
    e506:	b082      	sub	sp, #8
    e508:	af00      	add	r7, sp, #0
    e50a:	0002      	movs	r2, r0
    e50c:	1dfb      	adds	r3, r7, #7
    e50e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    e510:	1dfb      	adds	r3, r7, #7
    e512:	781b      	ldrb	r3, [r3, #0]
    e514:	0019      	movs	r1, r3
    e516:	2000      	movs	r0, #0
    e518:	4b03      	ldr	r3, [pc, #12]	; (e528 <sd_mmc_unload_0+0x24>)
    e51a:	4798      	blx	r3
    e51c:	0003      	movs	r3, r0
}
    e51e:	0018      	movs	r0, r3
    e520:	46bd      	mov	sp, r7
    e522:	b002      	add	sp, #8
    e524:	bd80      	pop	{r7, pc}
    e526:	46c0      	nop			; (mov r8, r8)
    e528:	0000e4d9 	.word	0x0000e4d9

0000e52c <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    e52c:	b580      	push	{r7, lr}
    e52e:	b082      	sub	sp, #8
    e530:	af00      	add	r7, sp, #0
    e532:	0002      	movs	r2, r0
    e534:	1dfb      	adds	r3, r7, #7
    e536:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    e538:	1dfb      	adds	r3, r7, #7
    e53a:	781b      	ldrb	r3, [r3, #0]
    e53c:	0018      	movs	r0, r3
    e53e:	4b03      	ldr	r3, [pc, #12]	; (e54c <sd_mmc_wr_protect+0x20>)
    e540:	4798      	blx	r3
    e542:	0003      	movs	r3, r0
}
    e544:	0018      	movs	r0, r3
    e546:	46bd      	mov	sp, r7
    e548:	b002      	add	sp, #8
    e54a:	bd80      	pop	{r7, pc}
    e54c:	0000e049 	.word	0x0000e049

0000e550 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    e550:	b580      	push	{r7, lr}
    e552:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    e554:	2000      	movs	r0, #0
    e556:	4b03      	ldr	r3, [pc, #12]	; (e564 <sd_mmc_wr_protect_0+0x14>)
    e558:	4798      	blx	r3
    e55a:	0003      	movs	r3, r0
}
    e55c:	0018      	movs	r0, r3
    e55e:	46bd      	mov	sp, r7
    e560:	bd80      	pop	{r7, pc}
    e562:	46c0      	nop			; (mov r8, r8)
    e564:	0000e52d 	.word	0x0000e52d

0000e568 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    e568:	b580      	push	{r7, lr}
    e56a:	b082      	sub	sp, #8
    e56c:	af00      	add	r7, sp, #0
    e56e:	0002      	movs	r2, r0
    e570:	1dfb      	adds	r3, r7, #7
    e572:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    e574:	2301      	movs	r3, #1
}
    e576:	0018      	movs	r0, r3
    e578:	46bd      	mov	sp, r7
    e57a:	b002      	add	sp, #8
    e57c:	bd80      	pop	{r7, pc}
	...

0000e580 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    e580:	b580      	push	{r7, lr}
    e582:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    e584:	2000      	movs	r0, #0
    e586:	4b03      	ldr	r3, [pc, #12]	; (e594 <sd_mmc_removal_0+0x14>)
    e588:	4798      	blx	r3
    e58a:	0003      	movs	r3, r0
}
    e58c:	0018      	movs	r0, r3
    e58e:	46bd      	mov	sp, r7
    e590:	bd80      	pop	{r7, pc}
    e592:	46c0      	nop			; (mov r8, r8)
    e594:	0000e569 	.word	0x0000e569

0000e598 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    e598:	b580      	push	{r7, lr}
    e59a:	b084      	sub	sp, #16
    e59c:	af00      	add	r7, sp, #0
    e59e:	60b9      	str	r1, [r7, #8]
    e5a0:	607a      	str	r2, [r7, #4]
    e5a2:	230f      	movs	r3, #15
    e5a4:	18fb      	adds	r3, r7, r3
    e5a6:	1c02      	adds	r2, r0, #0
    e5a8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    e5aa:	68b9      	ldr	r1, [r7, #8]
    e5ac:	230f      	movs	r3, #15
    e5ae:	18fb      	adds	r3, r7, r3
    e5b0:	781b      	ldrb	r3, [r3, #0]
    e5b2:	2201      	movs	r2, #1
    e5b4:	0018      	movs	r0, r3
    e5b6:	4b10      	ldr	r3, [pc, #64]	; (e5f8 <sd_mmc_mem_2_ram+0x60>)
    e5b8:	4798      	blx	r3
    e5ba:	1e03      	subs	r3, r0, #0
    e5bc:	d005      	beq.n	e5ca <sd_mmc_mem_2_ram+0x32>
    e5be:	2b02      	cmp	r3, #2
    e5c0:	d101      	bne.n	e5c6 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    e5c2:	2302      	movs	r3, #2
    e5c4:	e013      	b.n	e5ee <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    e5c6:	2301      	movs	r3, #1
    e5c8:	e011      	b.n	e5ee <sd_mmc_mem_2_ram+0x56>
		break;
    e5ca:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	2101      	movs	r1, #1
    e5d0:	0018      	movs	r0, r3
    e5d2:	4b0a      	ldr	r3, [pc, #40]	; (e5fc <sd_mmc_mem_2_ram+0x64>)
    e5d4:	4798      	blx	r3
    e5d6:	1e03      	subs	r3, r0, #0
    e5d8:	d001      	beq.n	e5de <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    e5da:	2301      	movs	r3, #1
    e5dc:	e007      	b.n	e5ee <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    e5de:	2000      	movs	r0, #0
    e5e0:	4b07      	ldr	r3, [pc, #28]	; (e600 <sd_mmc_mem_2_ram+0x68>)
    e5e2:	4798      	blx	r3
    e5e4:	1e03      	subs	r3, r0, #0
    e5e6:	d001      	beq.n	e5ec <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    e5e8:	2301      	movs	r3, #1
    e5ea:	e000      	b.n	e5ee <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    e5ec:	2300      	movs	r3, #0
}
    e5ee:	0018      	movs	r0, r3
    e5f0:	46bd      	mov	sp, r7
    e5f2:	b004      	add	sp, #16
    e5f4:	bd80      	pop	{r7, pc}
    e5f6:	46c0      	nop			; (mov r8, r8)
    e5f8:	0000e061 	.word	0x0000e061
    e5fc:	0000e14d 	.word	0x0000e14d
    e600:	0000e1a5 	.word	0x0000e1a5

0000e604 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    e604:	b580      	push	{r7, lr}
    e606:	b082      	sub	sp, #8
    e608:	af00      	add	r7, sp, #0
    e60a:	6078      	str	r0, [r7, #4]
    e60c:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    e60e:	683a      	ldr	r2, [r7, #0]
    e610:	687b      	ldr	r3, [r7, #4]
    e612:	0019      	movs	r1, r3
    e614:	2000      	movs	r0, #0
    e616:	4b03      	ldr	r3, [pc, #12]	; (e624 <sd_mmc_mem_2_ram_0+0x20>)
    e618:	4798      	blx	r3
    e61a:	0003      	movs	r3, r0
}
    e61c:	0018      	movs	r0, r3
    e61e:	46bd      	mov	sp, r7
    e620:	b002      	add	sp, #8
    e622:	bd80      	pop	{r7, pc}
    e624:	0000e599 	.word	0x0000e599

0000e628 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    e628:	b580      	push	{r7, lr}
    e62a:	b084      	sub	sp, #16
    e62c:	af00      	add	r7, sp, #0
    e62e:	60b9      	str	r1, [r7, #8]
    e630:	607a      	str	r2, [r7, #4]
    e632:	230f      	movs	r3, #15
    e634:	18fb      	adds	r3, r7, r3
    e636:	1c02      	adds	r2, r0, #0
    e638:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    e63a:	68b9      	ldr	r1, [r7, #8]
    e63c:	230f      	movs	r3, #15
    e63e:	18fb      	adds	r3, r7, r3
    e640:	781b      	ldrb	r3, [r3, #0]
    e642:	2201      	movs	r2, #1
    e644:	0018      	movs	r0, r3
    e646:	4b10      	ldr	r3, [pc, #64]	; (e688 <sd_mmc_ram_2_mem+0x60>)
    e648:	4798      	blx	r3
    e64a:	1e03      	subs	r3, r0, #0
    e64c:	d005      	beq.n	e65a <sd_mmc_ram_2_mem+0x32>
    e64e:	2b02      	cmp	r3, #2
    e650:	d101      	bne.n	e656 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    e652:	2302      	movs	r3, #2
    e654:	e013      	b.n	e67e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    e656:	2301      	movs	r3, #1
    e658:	e011      	b.n	e67e <sd_mmc_ram_2_mem+0x56>
		break;
    e65a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    e65c:	687b      	ldr	r3, [r7, #4]
    e65e:	2101      	movs	r1, #1
    e660:	0018      	movs	r0, r3
    e662:	4b0a      	ldr	r3, [pc, #40]	; (e68c <sd_mmc_ram_2_mem+0x64>)
    e664:	4798      	blx	r3
    e666:	1e03      	subs	r3, r0, #0
    e668:	d001      	beq.n	e66e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    e66a:	2301      	movs	r3, #1
    e66c:	e007      	b.n	e67e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    e66e:	2000      	movs	r0, #0
    e670:	4b07      	ldr	r3, [pc, #28]	; (e690 <sd_mmc_ram_2_mem+0x68>)
    e672:	4798      	blx	r3
    e674:	1e03      	subs	r3, r0, #0
    e676:	d001      	beq.n	e67c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    e678:	2301      	movs	r3, #1
    e67a:	e000      	b.n	e67e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    e67c:	2300      	movs	r3, #0
}
    e67e:	0018      	movs	r0, r3
    e680:	46bd      	mov	sp, r7
    e682:	b004      	add	sp, #16
    e684:	bd80      	pop	{r7, pc}
    e686:	46c0      	nop			; (mov r8, r8)
    e688:	0000e23d 	.word	0x0000e23d
    e68c:	0000e325 	.word	0x0000e325
    e690:	0000e37d 	.word	0x0000e37d

0000e694 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    e694:	b580      	push	{r7, lr}
    e696:	b082      	sub	sp, #8
    e698:	af00      	add	r7, sp, #0
    e69a:	6078      	str	r0, [r7, #4]
    e69c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    e69e:	683a      	ldr	r2, [r7, #0]
    e6a0:	687b      	ldr	r3, [r7, #4]
    e6a2:	0019      	movs	r1, r3
    e6a4:	2000      	movs	r0, #0
    e6a6:	4b03      	ldr	r3, [pc, #12]	; (e6b4 <sd_mmc_ram_2_mem_0+0x20>)
    e6a8:	4798      	blx	r3
    e6aa:	0003      	movs	r3, r0
}
    e6ac:	0018      	movs	r0, r3
    e6ae:	46bd      	mov	sp, r7
    e6b0:	b002      	add	sp, #8
    e6b2:	bd80      	pop	{r7, pc}
    e6b4:	0000e629 	.word	0x0000e629

0000e6b8 <system_pinmux_get_group_from_gpio_pin>:
{
    e6b8:	b580      	push	{r7, lr}
    e6ba:	b084      	sub	sp, #16
    e6bc:	af00      	add	r7, sp, #0
    e6be:	0002      	movs	r2, r0
    e6c0:	1dfb      	adds	r3, r7, #7
    e6c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    e6c4:	230f      	movs	r3, #15
    e6c6:	18fb      	adds	r3, r7, r3
    e6c8:	1dfa      	adds	r2, r7, #7
    e6ca:	7812      	ldrb	r2, [r2, #0]
    e6cc:	09d2      	lsrs	r2, r2, #7
    e6ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    e6d0:	230e      	movs	r3, #14
    e6d2:	18fb      	adds	r3, r7, r3
    e6d4:	1dfa      	adds	r2, r7, #7
    e6d6:	7812      	ldrb	r2, [r2, #0]
    e6d8:	0952      	lsrs	r2, r2, #5
    e6da:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    e6dc:	4b0d      	ldr	r3, [pc, #52]	; (e714 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    e6de:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    e6e0:	230f      	movs	r3, #15
    e6e2:	18fb      	adds	r3, r7, r3
    e6e4:	781b      	ldrb	r3, [r3, #0]
    e6e6:	2b00      	cmp	r3, #0
    e6e8:	d10f      	bne.n	e70a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    e6ea:	230f      	movs	r3, #15
    e6ec:	18fb      	adds	r3, r7, r3
    e6ee:	781b      	ldrb	r3, [r3, #0]
    e6f0:	009b      	lsls	r3, r3, #2
    e6f2:	2210      	movs	r2, #16
    e6f4:	4694      	mov	ip, r2
    e6f6:	44bc      	add	ip, r7
    e6f8:	4463      	add	r3, ip
    e6fa:	3b08      	subs	r3, #8
    e6fc:	681a      	ldr	r2, [r3, #0]
    e6fe:	230e      	movs	r3, #14
    e700:	18fb      	adds	r3, r7, r3
    e702:	781b      	ldrb	r3, [r3, #0]
    e704:	01db      	lsls	r3, r3, #7
    e706:	18d3      	adds	r3, r2, r3
    e708:	e000      	b.n	e70c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    e70a:	2300      	movs	r3, #0
}
    e70c:	0018      	movs	r0, r3
    e70e:	46bd      	mov	sp, r7
    e710:	b004      	add	sp, #16
    e712:	bd80      	pop	{r7, pc}
    e714:	41004400 	.word	0x41004400

0000e718 <system_interrupt_enable>:
{
    e718:	b580      	push	{r7, lr}
    e71a:	b082      	sub	sp, #8
    e71c:	af00      	add	r7, sp, #0
    e71e:	0002      	movs	r2, r0
    e720:	1dfb      	adds	r3, r7, #7
    e722:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    e724:	4b06      	ldr	r3, [pc, #24]	; (e740 <system_interrupt_enable+0x28>)
    e726:	1dfa      	adds	r2, r7, #7
    e728:	7812      	ldrb	r2, [r2, #0]
    e72a:	0011      	movs	r1, r2
    e72c:	221f      	movs	r2, #31
    e72e:	400a      	ands	r2, r1
    e730:	2101      	movs	r1, #1
    e732:	4091      	lsls	r1, r2
    e734:	000a      	movs	r2, r1
    e736:	601a      	str	r2, [r3, #0]
}
    e738:	46c0      	nop			; (mov r8, r8)
    e73a:	46bd      	mov	sp, r7
    e73c:	b002      	add	sp, #8
    e73e:	bd80      	pop	{r7, pc}
    e740:	e000e100 	.word	0xe000e100

0000e744 <port_get_group_from_gpio_pin>:
{
    e744:	b580      	push	{r7, lr}
    e746:	b082      	sub	sp, #8
    e748:	af00      	add	r7, sp, #0
    e74a:	0002      	movs	r2, r0
    e74c:	1dfb      	adds	r3, r7, #7
    e74e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    e750:	1dfb      	adds	r3, r7, #7
    e752:	781b      	ldrb	r3, [r3, #0]
    e754:	0018      	movs	r0, r3
    e756:	4b03      	ldr	r3, [pc, #12]	; (e764 <port_get_group_from_gpio_pin+0x20>)
    e758:	4798      	blx	r3
    e75a:	0003      	movs	r3, r0
}
    e75c:	0018      	movs	r0, r3
    e75e:	46bd      	mov	sp, r7
    e760:	b002      	add	sp, #8
    e762:	bd80      	pop	{r7, pc}
    e764:	0000e6b9 	.word	0x0000e6b9

0000e768 <port_get_config_defaults>:
{
    e768:	b580      	push	{r7, lr}
    e76a:	b082      	sub	sp, #8
    e76c:	af00      	add	r7, sp, #0
    e76e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    e770:	687b      	ldr	r3, [r7, #4]
    e772:	2200      	movs	r2, #0
    e774:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    e776:	687b      	ldr	r3, [r7, #4]
    e778:	2201      	movs	r2, #1
    e77a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    e77c:	687b      	ldr	r3, [r7, #4]
    e77e:	2200      	movs	r2, #0
    e780:	709a      	strb	r2, [r3, #2]
}
    e782:	46c0      	nop			; (mov r8, r8)
    e784:	46bd      	mov	sp, r7
    e786:	b002      	add	sp, #8
    e788:	bd80      	pop	{r7, pc}
	...

0000e78c <port_pin_set_output_level>:
{
    e78c:	b580      	push	{r7, lr}
    e78e:	b084      	sub	sp, #16
    e790:	af00      	add	r7, sp, #0
    e792:	0002      	movs	r2, r0
    e794:	1dfb      	adds	r3, r7, #7
    e796:	701a      	strb	r2, [r3, #0]
    e798:	1dbb      	adds	r3, r7, #6
    e79a:	1c0a      	adds	r2, r1, #0
    e79c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    e79e:	1dfb      	adds	r3, r7, #7
    e7a0:	781b      	ldrb	r3, [r3, #0]
    e7a2:	0018      	movs	r0, r3
    e7a4:	4b0d      	ldr	r3, [pc, #52]	; (e7dc <port_pin_set_output_level+0x50>)
    e7a6:	4798      	blx	r3
    e7a8:	0003      	movs	r3, r0
    e7aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e7ac:	1dfb      	adds	r3, r7, #7
    e7ae:	781b      	ldrb	r3, [r3, #0]
    e7b0:	221f      	movs	r2, #31
    e7b2:	4013      	ands	r3, r2
    e7b4:	2201      	movs	r2, #1
    e7b6:	409a      	lsls	r2, r3
    e7b8:	0013      	movs	r3, r2
    e7ba:	60bb      	str	r3, [r7, #8]
	if (level) {
    e7bc:	1dbb      	adds	r3, r7, #6
    e7be:	781b      	ldrb	r3, [r3, #0]
    e7c0:	2b00      	cmp	r3, #0
    e7c2:	d003      	beq.n	e7cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    e7c4:	68fb      	ldr	r3, [r7, #12]
    e7c6:	68ba      	ldr	r2, [r7, #8]
    e7c8:	619a      	str	r2, [r3, #24]
}
    e7ca:	e002      	b.n	e7d2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    e7cc:	68fb      	ldr	r3, [r7, #12]
    e7ce:	68ba      	ldr	r2, [r7, #8]
    e7d0:	615a      	str	r2, [r3, #20]
}
    e7d2:	46c0      	nop			; (mov r8, r8)
    e7d4:	46bd      	mov	sp, r7
    e7d6:	b004      	add	sp, #16
    e7d8:	bd80      	pop	{r7, pc}
    e7da:	46c0      	nop			; (mov r8, r8)
    e7dc:	0000e745 	.word	0x0000e745

0000e7e0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    e7e0:	b580      	push	{r7, lr}
    e7e2:	b084      	sub	sp, #16
    e7e4:	af00      	add	r7, sp, #0
    e7e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e7e8:	687b      	ldr	r3, [r7, #4]
    e7ea:	681b      	ldr	r3, [r3, #0]
    e7ec:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    e7ee:	68fb      	ldr	r3, [r7, #12]
    e7f0:	69db      	ldr	r3, [r3, #28]
    e7f2:	1e5a      	subs	r2, r3, #1
    e7f4:	4193      	sbcs	r3, r2
    e7f6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    e7f8:	0018      	movs	r0, r3
    e7fa:	46bd      	mov	sp, r7
    e7fc:	b004      	add	sp, #16
    e7fe:	bd80      	pop	{r7, pc}

0000e800 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    e800:	b580      	push	{r7, lr}
    e802:	b082      	sub	sp, #8
    e804:	af00      	add	r7, sp, #0
    e806:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    e808:	687b      	ldr	r3, [r7, #4]
    e80a:	2201      	movs	r2, #1
    e80c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    e80e:	687b      	ldr	r3, [r7, #4]
    e810:	2200      	movs	r2, #0
    e812:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    e814:	687b      	ldr	r3, [r7, #4]
    e816:	2200      	movs	r2, #0
    e818:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    e81a:	687b      	ldr	r3, [r7, #4]
    e81c:	22c0      	movs	r2, #192	; 0xc0
    e81e:	0392      	lsls	r2, r2, #14
    e820:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    e822:	687b      	ldr	r3, [r7, #4]
    e824:	2200      	movs	r2, #0
    e826:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    e828:	687b      	ldr	r3, [r7, #4]
    e82a:	2200      	movs	r2, #0
    e82c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    e82e:	687b      	ldr	r3, [r7, #4]
    e830:	2201      	movs	r2, #1
    e832:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    e834:	687b      	ldr	r3, [r7, #4]
    e836:	2201      	movs	r2, #1
    e838:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    e83a:	687b      	ldr	r3, [r7, #4]
    e83c:	2200      	movs	r2, #0
    e83e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    e840:	687b      	ldr	r3, [r7, #4]
    e842:	2224      	movs	r2, #36	; 0x24
    e844:	2100      	movs	r1, #0
    e846:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    e848:	687b      	ldr	r3, [r7, #4]
    e84a:	3318      	adds	r3, #24
    e84c:	220c      	movs	r2, #12
    e84e:	2100      	movs	r1, #0
    e850:	0018      	movs	r0, r3
    e852:	4b0a      	ldr	r3, [pc, #40]	; (e87c <spi_get_config_defaults+0x7c>)
    e854:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    e856:	687b      	ldr	r3, [r7, #4]
    e858:	4a09      	ldr	r2, [pc, #36]	; (e880 <spi_get_config_defaults+0x80>)
    e85a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    e85c:	687b      	ldr	r3, [r7, #4]
    e85e:	2200      	movs	r2, #0
    e860:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    e862:	687b      	ldr	r3, [r7, #4]
    e864:	2200      	movs	r2, #0
    e866:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    e868:	687b      	ldr	r3, [r7, #4]
    e86a:	2200      	movs	r2, #0
    e86c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    e86e:	687b      	ldr	r3, [r7, #4]
    e870:	2200      	movs	r2, #0
    e872:	635a      	str	r2, [r3, #52]	; 0x34

};
    e874:	46c0      	nop			; (mov r8, r8)
    e876:	46bd      	mov	sp, r7
    e878:	b002      	add	sp, #8
    e87a:	bd80      	pop	{r7, pc}
    e87c:	000247b7 	.word	0x000247b7
    e880:	000186a0 	.word	0x000186a0

0000e884 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    e884:	b580      	push	{r7, lr}
    e886:	b082      	sub	sp, #8
    e888:	af00      	add	r7, sp, #0
    e88a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    e88c:	687b      	ldr	r3, [r7, #4]
    e88e:	220a      	movs	r2, #10
    e890:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    e892:	687b      	ldr	r3, [r7, #4]
    e894:	2200      	movs	r2, #0
    e896:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    e898:	687b      	ldr	r3, [r7, #4]
    e89a:	2200      	movs	r2, #0
    e89c:	709a      	strb	r2, [r3, #2]
}
    e89e:	46c0      	nop			; (mov r8, r8)
    e8a0:	46bd      	mov	sp, r7
    e8a2:	b002      	add	sp, #8
    e8a4:	bd80      	pop	{r7, pc}
	...

0000e8a8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    e8a8:	b580      	push	{r7, lr}
    e8aa:	b084      	sub	sp, #16
    e8ac:	af00      	add	r7, sp, #0
    e8ae:	6078      	str	r0, [r7, #4]
    e8b0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    e8b2:	683b      	ldr	r3, [r7, #0]
    e8b4:	781a      	ldrb	r2, [r3, #0]
    e8b6:	687b      	ldr	r3, [r7, #4]
    e8b8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    e8ba:	683b      	ldr	r3, [r7, #0]
    e8bc:	785a      	ldrb	r2, [r3, #1]
    e8be:	687b      	ldr	r3, [r7, #4]
    e8c0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    e8c2:	683b      	ldr	r3, [r7, #0]
    e8c4:	789a      	ldrb	r2, [r3, #2]
    e8c6:	687b      	ldr	r3, [r7, #4]
    e8c8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    e8ca:	230c      	movs	r3, #12
    e8cc:	18fb      	adds	r3, r7, r3
    e8ce:	0018      	movs	r0, r3
    e8d0:	4b0b      	ldr	r3, [pc, #44]	; (e900 <spi_attach_slave+0x58>)
    e8d2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    e8d4:	230c      	movs	r3, #12
    e8d6:	18fb      	adds	r3, r7, r3
    e8d8:	2201      	movs	r2, #1
    e8da:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    e8dc:	687b      	ldr	r3, [r7, #4]
    e8de:	781b      	ldrb	r3, [r3, #0]
    e8e0:	220c      	movs	r2, #12
    e8e2:	18ba      	adds	r2, r7, r2
    e8e4:	0011      	movs	r1, r2
    e8e6:	0018      	movs	r0, r3
    e8e8:	4b06      	ldr	r3, [pc, #24]	; (e904 <spi_attach_slave+0x5c>)
    e8ea:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    e8ec:	687b      	ldr	r3, [r7, #4]
    e8ee:	781b      	ldrb	r3, [r3, #0]
    e8f0:	2101      	movs	r1, #1
    e8f2:	0018      	movs	r0, r3
    e8f4:	4b04      	ldr	r3, [pc, #16]	; (e908 <spi_attach_slave+0x60>)
    e8f6:	4798      	blx	r3
}
    e8f8:	46c0      	nop			; (mov r8, r8)
    e8fa:	46bd      	mov	sp, r7
    e8fc:	b004      	add	sp, #16
    e8fe:	bd80      	pop	{r7, pc}
    e900:	0000e769 	.word	0x0000e769
    e904:	00015cb1 	.word	0x00015cb1
    e908:	0000e78d 	.word	0x0000e78d

0000e90c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    e90c:	b580      	push	{r7, lr}
    e90e:	b084      	sub	sp, #16
    e910:	af00      	add	r7, sp, #0
    e912:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e914:	687b      	ldr	r3, [r7, #4]
    e916:	681b      	ldr	r3, [r3, #0]
    e918:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    e91a:	687b      	ldr	r3, [r7, #4]
    e91c:	681b      	ldr	r3, [r3, #0]
    e91e:	0018      	movs	r0, r3
    e920:	4b0b      	ldr	r3, [pc, #44]	; (e950 <spi_enable+0x44>)
    e922:	4798      	blx	r3
    e924:	0003      	movs	r3, r0
    e926:	0018      	movs	r0, r3
    e928:	4b0a      	ldr	r3, [pc, #40]	; (e954 <spi_enable+0x48>)
    e92a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    e92c:	46c0      	nop			; (mov r8, r8)
    e92e:	687b      	ldr	r3, [r7, #4]
    e930:	0018      	movs	r0, r3
    e932:	4b09      	ldr	r3, [pc, #36]	; (e958 <spi_enable+0x4c>)
    e934:	4798      	blx	r3
    e936:	1e03      	subs	r3, r0, #0
    e938:	d1f9      	bne.n	e92e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    e93a:	68fb      	ldr	r3, [r7, #12]
    e93c:	681b      	ldr	r3, [r3, #0]
    e93e:	2202      	movs	r2, #2
    e940:	431a      	orrs	r2, r3
    e942:	68fb      	ldr	r3, [r7, #12]
    e944:	601a      	str	r2, [r3, #0]
}
    e946:	46c0      	nop			; (mov r8, r8)
    e948:	46bd      	mov	sp, r7
    e94a:	b004      	add	sp, #16
    e94c:	bd80      	pop	{r7, pc}
    e94e:	46c0      	nop			; (mov r8, r8)
    e950:	00016981 	.word	0x00016981
    e954:	0000e719 	.word	0x0000e719
    e958:	0000e7e1 	.word	0x0000e7e1

0000e95c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    e95c:	b580      	push	{r7, lr}
    e95e:	b084      	sub	sp, #16
    e960:	af00      	add	r7, sp, #0
    e962:	6078      	str	r0, [r7, #4]
    e964:	000a      	movs	r2, r1
    e966:	1cfb      	adds	r3, r7, #3
    e968:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    e96a:	230f      	movs	r3, #15
    e96c:	18fb      	adds	r3, r7, r3
    e96e:	2200      	movs	r2, #0
    e970:	701a      	strb	r2, [r3, #0]
	while (size--) {
    e972:	e038      	b.n	e9e6 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    e974:	687b      	ldr	r3, [r7, #4]
    e976:	1c5a      	adds	r2, r3, #1
    e978:	607a      	str	r2, [r7, #4]
    e97a:	220e      	movs	r2, #14
    e97c:	18ba      	adds	r2, r7, r2
    e97e:	781b      	ldrb	r3, [r3, #0]
    e980:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    e982:	230d      	movs	r3, #13
    e984:	18fb      	adds	r3, r7, r3
    e986:	2200      	movs	r2, #0
    e988:	701a      	strb	r2, [r3, #0]
    e98a:	e027      	b.n	e9dc <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    e98c:	230f      	movs	r3, #15
    e98e:	18fa      	adds	r2, r7, r3
    e990:	230f      	movs	r3, #15
    e992:	18fb      	adds	r3, r7, r3
    e994:	781b      	ldrb	r3, [r3, #0]
    e996:	18db      	adds	r3, r3, r3
    e998:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    e99a:	230e      	movs	r3, #14
    e99c:	18fa      	adds	r2, r7, r3
    e99e:	230f      	movs	r3, #15
    e9a0:	18fb      	adds	r3, r7, r3
    e9a2:	7812      	ldrb	r2, [r2, #0]
    e9a4:	781b      	ldrb	r3, [r3, #0]
    e9a6:	4053      	eors	r3, r2
    e9a8:	b2db      	uxtb	r3, r3
    e9aa:	b25b      	sxtb	r3, r3
    e9ac:	2b00      	cmp	r3, #0
    e9ae:	da07      	bge.n	e9c0 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    e9b0:	230f      	movs	r3, #15
    e9b2:	18fb      	adds	r3, r7, r3
    e9b4:	220f      	movs	r2, #15
    e9b6:	18ba      	adds	r2, r7, r2
    e9b8:	7812      	ldrb	r2, [r2, #0]
    e9ba:	2109      	movs	r1, #9
    e9bc:	404a      	eors	r2, r1
    e9be:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    e9c0:	230e      	movs	r3, #14
    e9c2:	18fa      	adds	r2, r7, r3
    e9c4:	230e      	movs	r3, #14
    e9c6:	18fb      	adds	r3, r7, r3
    e9c8:	781b      	ldrb	r3, [r3, #0]
    e9ca:	18db      	adds	r3, r3, r3
    e9cc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    e9ce:	230d      	movs	r3, #13
    e9d0:	18fb      	adds	r3, r7, r3
    e9d2:	781a      	ldrb	r2, [r3, #0]
    e9d4:	230d      	movs	r3, #13
    e9d6:	18fb      	adds	r3, r7, r3
    e9d8:	3201      	adds	r2, #1
    e9da:	701a      	strb	r2, [r3, #0]
    e9dc:	230d      	movs	r3, #13
    e9de:	18fb      	adds	r3, r7, r3
    e9e0:	781b      	ldrb	r3, [r3, #0]
    e9e2:	2b07      	cmp	r3, #7
    e9e4:	d9d2      	bls.n	e98c <sd_mmc_spi_crc7+0x30>
	while (size--) {
    e9e6:	1cfb      	adds	r3, r7, #3
    e9e8:	781b      	ldrb	r3, [r3, #0]
    e9ea:	1cfa      	adds	r2, r7, #3
    e9ec:	1e59      	subs	r1, r3, #1
    e9ee:	7011      	strb	r1, [r2, #0]
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d1bf      	bne.n	e974 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    e9f4:	230f      	movs	r3, #15
    e9f6:	18fb      	adds	r3, r7, r3
    e9f8:	781b      	ldrb	r3, [r3, #0]
    e9fa:	005b      	lsls	r3, r3, #1
    e9fc:	b25b      	sxtb	r3, r3
    e9fe:	2201      	movs	r2, #1
    ea00:	4313      	orrs	r3, r2
    ea02:	b25a      	sxtb	r2, r3
    ea04:	230f      	movs	r3, #15
    ea06:	18fb      	adds	r3, r7, r3
    ea08:	701a      	strb	r2, [r3, #0]
	return crc;
    ea0a:	230f      	movs	r3, #15
    ea0c:	18fb      	adds	r3, r7, r3
    ea0e:	781b      	ldrb	r3, [r3, #0]
}
    ea10:	0018      	movs	r0, r3
    ea12:	46bd      	mov	sp, r7
    ea14:	b004      	add	sp, #16
    ea16:	bd80      	pop	{r7, pc}

0000ea18 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    ea18:	b590      	push	{r4, r7, lr}
    ea1a:	b083      	sub	sp, #12
    ea1c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    ea1e:	1c7b      	adds	r3, r7, #1
    ea20:	22ff      	movs	r2, #255	; 0xff
    ea22:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    ea24:	1cbb      	adds	r3, r7, #2
    ea26:	22ff      	movs	r2, #255	; 0xff
    ea28:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    ea2a:	1cbb      	adds	r3, r7, #2
    ea2c:	881b      	ldrh	r3, [r3, #0]
    ea2e:	1c79      	adds	r1, r7, #1
    ea30:	4811      	ldr	r0, [pc, #68]	; (ea78 <sd_mmc_spi_wait_busy+0x60>)
    ea32:	2201      	movs	r2, #1
    ea34:	4c11      	ldr	r4, [pc, #68]	; (ea7c <sd_mmc_spi_wait_busy+0x64>)
    ea36:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    ea38:	4b11      	ldr	r3, [pc, #68]	; (ea80 <sd_mmc_spi_wait_busy+0x68>)
    ea3a:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    ea3c:	1cbb      	adds	r3, r7, #2
    ea3e:	881b      	ldrh	r3, [r3, #0]
    ea40:	1c79      	adds	r1, r7, #1
    ea42:	480d      	ldr	r0, [pc, #52]	; (ea78 <sd_mmc_spi_wait_busy+0x60>)
    ea44:	2201      	movs	r2, #1
    ea46:	4c0d      	ldr	r4, [pc, #52]	; (ea7c <sd_mmc_spi_wait_busy+0x64>)
    ea48:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    ea4a:	1cbb      	adds	r3, r7, #2
    ea4c:	881b      	ldrh	r3, [r3, #0]
    ea4e:	1c79      	adds	r1, r7, #1
    ea50:	4809      	ldr	r0, [pc, #36]	; (ea78 <sd_mmc_spi_wait_busy+0x60>)
    ea52:	2201      	movs	r2, #1
    ea54:	4c09      	ldr	r4, [pc, #36]	; (ea7c <sd_mmc_spi_wait_busy+0x64>)
    ea56:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    ea58:	687b      	ldr	r3, [r7, #4]
    ea5a:	1e5a      	subs	r2, r3, #1
    ea5c:	607a      	str	r2, [r7, #4]
    ea5e:	2b00      	cmp	r3, #0
    ea60:	d101      	bne.n	ea66 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    ea62:	2300      	movs	r3, #0
    ea64:	e004      	b.n	ea70 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    ea66:	1c7b      	adds	r3, r7, #1
    ea68:	781b      	ldrb	r3, [r3, #0]
    ea6a:	2bff      	cmp	r3, #255	; 0xff
    ea6c:	d1ed      	bne.n	ea4a <sd_mmc_spi_wait_busy+0x32>
	return true;
    ea6e:	2301      	movs	r3, #1
}
    ea70:	0018      	movs	r0, r3
    ea72:	46bd      	mov	sp, r7
    ea74:	b003      	add	sp, #12
    ea76:	bd90      	pop	{r4, r7, pc}
    ea78:	20003e88 	.word	0x20003e88
    ea7c:	000172c1 	.word	0x000172c1
    ea80:	00030d40 	.word	0x00030d40

0000ea84 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    ea84:	b590      	push	{r4, r7, lr}
    ea86:	b083      	sub	sp, #12
    ea88:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    ea8a:	1cbb      	adds	r3, r7, #2
    ea8c:	22ff      	movs	r2, #255	; 0xff
    ea8e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    ea90:	1c7b      	adds	r3, r7, #1
    ea92:	2200      	movs	r2, #0
    ea94:	701a      	strb	r2, [r3, #0]
	i = 500000;
    ea96:	4b18      	ldr	r3, [pc, #96]	; (eaf8 <sd_mmc_spi_start_read_block+0x74>)
    ea98:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    ea9a:	687b      	ldr	r3, [r7, #4]
    ea9c:	1e5a      	subs	r2, r3, #1
    ea9e:	607a      	str	r2, [r7, #4]
    eaa0:	2b00      	cmp	r3, #0
    eaa2:	d104      	bne.n	eaae <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    eaa4:	4b15      	ldr	r3, [pc, #84]	; (eafc <sd_mmc_spi_start_read_block+0x78>)
    eaa6:	2204      	movs	r2, #4
    eaa8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    eaaa:	2300      	movs	r3, #0
    eaac:	e020      	b.n	eaf0 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    eaae:	1cbb      	adds	r3, r7, #2
    eab0:	881b      	ldrh	r3, [r3, #0]
    eab2:	1c79      	adds	r1, r7, #1
    eab4:	4812      	ldr	r0, [pc, #72]	; (eb00 <sd_mmc_spi_start_read_block+0x7c>)
    eab6:	2201      	movs	r2, #1
    eab8:	4c12      	ldr	r4, [pc, #72]	; (eb04 <sd_mmc_spi_start_read_block+0x80>)
    eaba:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    eabc:	1c7b      	adds	r3, r7, #1
    eabe:	781b      	ldrb	r3, [r3, #0]
    eac0:	001a      	movs	r2, r3
    eac2:	23f0      	movs	r3, #240	; 0xf0
    eac4:	4013      	ands	r3, r2
    eac6:	d10e      	bne.n	eae6 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    eac8:	1c7b      	adds	r3, r7, #1
    eaca:	781b      	ldrb	r3, [r3, #0]
    eacc:	001a      	movs	r2, r3
    eace:	2307      	movs	r3, #7
    ead0:	4013      	ands	r3, r2
    ead2:	d003      	beq.n	eadc <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    ead4:	4b09      	ldr	r3, [pc, #36]	; (eafc <sd_mmc_spi_start_read_block+0x78>)
    ead6:	2207      	movs	r2, #7
    ead8:	701a      	strb	r2, [r3, #0]
    eada:	e002      	b.n	eae2 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    eadc:	4b07      	ldr	r3, [pc, #28]	; (eafc <sd_mmc_spi_start_read_block+0x78>)
    eade:	220b      	movs	r2, #11
    eae0:	701a      	strb	r2, [r3, #0]
			}
			return false;
    eae2:	2300      	movs	r3, #0
    eae4:	e004      	b.n	eaf0 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    eae6:	1c7b      	adds	r3, r7, #1
    eae8:	781b      	ldrb	r3, [r3, #0]
    eaea:	2bfe      	cmp	r3, #254	; 0xfe
    eaec:	d1d5      	bne.n	ea9a <sd_mmc_spi_start_read_block+0x16>

	return true;
    eaee:	2301      	movs	r3, #1
}
    eaf0:	0018      	movs	r0, r3
    eaf2:	46bd      	mov	sp, r7
    eaf4:	b003      	add	sp, #12
    eaf6:	bd90      	pop	{r4, r7, pc}
    eaf8:	0007a120 	.word	0x0007a120
    eafc:	20003ecb 	.word	0x20003ecb
    eb00:	20003e88 	.word	0x20003e88
    eb04:	000172c1 	.word	0x000172c1

0000eb08 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    eb08:	b590      	push	{r4, r7, lr}
    eb0a:	b083      	sub	sp, #12
    eb0c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    eb0e:	1dbb      	adds	r3, r7, #6
    eb10:	22ff      	movs	r2, #255	; 0xff
    eb12:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    eb14:	1dbb      	adds	r3, r7, #6
    eb16:	881b      	ldrh	r3, [r3, #0]
    eb18:	1d39      	adds	r1, r7, #4
    eb1a:	4804      	ldr	r0, [pc, #16]	; (eb2c <sd_mmc_spi_stop_read_block+0x24>)
    eb1c:	2202      	movs	r2, #2
    eb1e:	4c04      	ldr	r4, [pc, #16]	; (eb30 <sd_mmc_spi_stop_read_block+0x28>)
    eb20:	47a0      	blx	r4
			dummy);
}
    eb22:	46c0      	nop			; (mov r8, r8)
    eb24:	46bd      	mov	sp, r7
    eb26:	b003      	add	sp, #12
    eb28:	bd90      	pop	{r4, r7, pc}
    eb2a:	46c0      	nop			; (mov r8, r8)
    eb2c:	20003e88 	.word	0x20003e88
    eb30:	000172c1 	.word	0x000172c1

0000eb34 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    eb34:	b580      	push	{r7, lr}
    eb36:	b082      	sub	sp, #8
    eb38:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    eb3a:	1dfb      	adds	r3, r7, #7
    eb3c:	22ff      	movs	r2, #255	; 0xff
    eb3e:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    eb40:	1df9      	adds	r1, r7, #7
    eb42:	4b0d      	ldr	r3, [pc, #52]	; (eb78 <sd_mmc_spi_start_write_block+0x44>)
    eb44:	2201      	movs	r2, #1
    eb46:	0018      	movs	r0, r3
    eb48:	4b0c      	ldr	r3, [pc, #48]	; (eb7c <sd_mmc_spi_start_write_block+0x48>)
    eb4a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    eb4c:	4b0c      	ldr	r3, [pc, #48]	; (eb80 <sd_mmc_spi_start_write_block+0x4c>)
    eb4e:	881b      	ldrh	r3, [r3, #0]
    eb50:	2b01      	cmp	r3, #1
    eb52:	d103      	bne.n	eb5c <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    eb54:	1dbb      	adds	r3, r7, #6
    eb56:	22fe      	movs	r2, #254	; 0xfe
    eb58:	701a      	strb	r2, [r3, #0]
    eb5a:	e002      	b.n	eb62 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    eb5c:	1dbb      	adds	r3, r7, #6
    eb5e:	22fc      	movs	r2, #252	; 0xfc
    eb60:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    eb62:	1db9      	adds	r1, r7, #6
    eb64:	4b04      	ldr	r3, [pc, #16]	; (eb78 <sd_mmc_spi_start_write_block+0x44>)
    eb66:	2201      	movs	r2, #1
    eb68:	0018      	movs	r0, r3
    eb6a:	4b04      	ldr	r3, [pc, #16]	; (eb7c <sd_mmc_spi_start_write_block+0x48>)
    eb6c:	4798      	blx	r3
}
    eb6e:	46c0      	nop			; (mov r8, r8)
    eb70:	46bd      	mov	sp, r7
    eb72:	b002      	add	sp, #8
    eb74:	bd80      	pop	{r7, pc}
    eb76:	46c0      	nop			; (mov r8, r8)
    eb78:	20003e88 	.word	0x20003e88
    eb7c:	000174e5 	.word	0x000174e5
    eb80:	20003ed6 	.word	0x20003ed6

0000eb84 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    eb84:	b590      	push	{r4, r7, lr}
    eb86:	b083      	sub	sp, #12
    eb88:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    eb8a:	1dbb      	adds	r3, r7, #6
    eb8c:	22ff      	movs	r2, #255	; 0xff
    eb8e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    eb90:	1cbb      	adds	r3, r7, #2
    eb92:	2201      	movs	r2, #1
    eb94:	4252      	negs	r2, r2
    eb96:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    eb98:	1cb9      	adds	r1, r7, #2
    eb9a:	4b1b      	ldr	r3, [pc, #108]	; (ec08 <sd_mmc_spi_stop_write_block+0x84>)
    eb9c:	2202      	movs	r2, #2
    eb9e:	0018      	movs	r0, r3
    eba0:	4b1a      	ldr	r3, [pc, #104]	; (ec0c <sd_mmc_spi_stop_write_block+0x88>)
    eba2:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    eba4:	1dbb      	adds	r3, r7, #6
    eba6:	881b      	ldrh	r3, [r3, #0]
    eba8:	1d79      	adds	r1, r7, #5
    ebaa:	4817      	ldr	r0, [pc, #92]	; (ec08 <sd_mmc_spi_stop_write_block+0x84>)
    ebac:	2201      	movs	r2, #1
    ebae:	4c18      	ldr	r4, [pc, #96]	; (ec10 <sd_mmc_spi_stop_write_block+0x8c>)
    ebb0:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    ebb2:	1d7b      	adds	r3, r7, #5
    ebb4:	781b      	ldrb	r3, [r3, #0]
    ebb6:	001a      	movs	r2, r3
    ebb8:	2310      	movs	r3, #16
    ebba:	4013      	ands	r3, r2
    ebbc:	d105      	bne.n	ebca <sd_mmc_spi_stop_write_block+0x46>
    ebbe:	1d7b      	adds	r3, r7, #5
    ebc0:	781b      	ldrb	r3, [r3, #0]
    ebc2:	001a      	movs	r2, r3
    ebc4:	2301      	movs	r3, #1
    ebc6:	4013      	ands	r3, r2
    ebc8:	d104      	bne.n	ebd4 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ebca:	4b12      	ldr	r3, [pc, #72]	; (ec14 <sd_mmc_spi_stop_write_block+0x90>)
    ebcc:	2201      	movs	r2, #1
    ebce:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    ebd0:	2300      	movs	r3, #0
    ebd2:	e014      	b.n	ebfe <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    ebd4:	1d7b      	adds	r3, r7, #5
    ebd6:	781b      	ldrb	r3, [r3, #0]
    ebd8:	001a      	movs	r2, r3
    ebda:	231e      	movs	r3, #30
    ebdc:	4013      	ands	r3, r2
    ebde:	2b04      	cmp	r3, #4
    ebe0:	d00b      	beq.n	ebfa <sd_mmc_spi_stop_write_block+0x76>
    ebe2:	2b0a      	cmp	r3, #10
    ebe4:	d104      	bne.n	ebf0 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    ebe6:	4b0b      	ldr	r3, [pc, #44]	; (ec14 <sd_mmc_spi_stop_write_block+0x90>)
    ebe8:	2208      	movs	r2, #8
    ebea:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    ebec:	2300      	movs	r3, #0
    ebee:	e006      	b.n	ebfe <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    ebf0:	4b08      	ldr	r3, [pc, #32]	; (ec14 <sd_mmc_spi_stop_write_block+0x90>)
    ebf2:	220a      	movs	r2, #10
    ebf4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    ebf6:	2300      	movs	r3, #0
    ebf8:	e001      	b.n	ebfe <sd_mmc_spi_stop_write_block+0x7a>
		break;
    ebfa:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    ebfc:	2301      	movs	r3, #1
}
    ebfe:	0018      	movs	r0, r3
    ec00:	46bd      	mov	sp, r7
    ec02:	b003      	add	sp, #12
    ec04:	bd90      	pop	{r4, r7, pc}
    ec06:	46c0      	nop			; (mov r8, r8)
    ec08:	20003e88 	.word	0x20003e88
    ec0c:	000174e5 	.word	0x000174e5
    ec10:	000172c1 	.word	0x000172c1
    ec14:	20003ecb 	.word	0x20003ecb

0000ec18 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    ec18:	b590      	push	{r4, r7, lr}
    ec1a:	b083      	sub	sp, #12
    ec1c:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    ec1e:	4b1d      	ldr	r3, [pc, #116]	; (ec94 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    ec20:	881b      	ldrh	r3, [r3, #0]
    ec22:	2b01      	cmp	r3, #1
    ec24:	d101      	bne.n	ec2a <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    ec26:	2301      	movs	r3, #1
    ec28:	e030      	b.n	ec8c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    ec2a:	4b1a      	ldr	r3, [pc, #104]	; (ec94 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    ec2c:	881b      	ldrh	r3, [r3, #0]
    ec2e:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    ec30:	4b19      	ldr	r3, [pc, #100]	; (ec98 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    ec32:	681a      	ldr	r2, [r3, #0]
    ec34:	4b19      	ldr	r3, [pc, #100]	; (ec9c <sd_mmc_spi_stop_multiwrite_block+0x84>)
    ec36:	881b      	ldrh	r3, [r3, #0]
    ec38:	0019      	movs	r1, r3
    ec3a:	4b19      	ldr	r3, [pc, #100]	; (eca0 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    ec3c:	0010      	movs	r0, r2
    ec3e:	4798      	blx	r3
    ec40:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    ec42:	429c      	cmp	r4, r3
    ec44:	d901      	bls.n	ec4a <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    ec46:	2301      	movs	r3, #1
    ec48:	e020      	b.n	ec8c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    ec4a:	1dfb      	adds	r3, r7, #7
    ec4c:	22ff      	movs	r2, #255	; 0xff
    ec4e:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    ec50:	1df9      	adds	r1, r7, #7
    ec52:	4b14      	ldr	r3, [pc, #80]	; (eca4 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    ec54:	2201      	movs	r2, #1
    ec56:	0018      	movs	r0, r3
    ec58:	4b13      	ldr	r3, [pc, #76]	; (eca8 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    ec5a:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    ec5c:	1dfb      	adds	r3, r7, #7
    ec5e:	22fd      	movs	r2, #253	; 0xfd
    ec60:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    ec62:	1df9      	adds	r1, r7, #7
    ec64:	4b0f      	ldr	r3, [pc, #60]	; (eca4 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    ec66:	2201      	movs	r2, #1
    ec68:	0018      	movs	r0, r3
    ec6a:	4b0f      	ldr	r3, [pc, #60]	; (eca8 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    ec6c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    ec6e:	4b0f      	ldr	r3, [pc, #60]	; (ecac <sd_mmc_spi_stop_multiwrite_block+0x94>)
    ec70:	4798      	blx	r3
    ec72:	0003      	movs	r3, r0
    ec74:	001a      	movs	r2, r3
    ec76:	2301      	movs	r3, #1
    ec78:	4053      	eors	r3, r2
    ec7a:	b2db      	uxtb	r3, r3
    ec7c:	2b00      	cmp	r3, #0
    ec7e:	d004      	beq.n	ec8a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    ec80:	4b0b      	ldr	r3, [pc, #44]	; (ecb0 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    ec82:	2205      	movs	r2, #5
    ec84:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    ec86:	2300      	movs	r3, #0
    ec88:	e000      	b.n	ec8c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    ec8a:	2301      	movs	r3, #1
}
    ec8c:	0018      	movs	r0, r3
    ec8e:	46bd      	mov	sp, r7
    ec90:	b003      	add	sp, #12
    ec92:	bd90      	pop	{r4, r7, pc}
    ec94:	20003ed6 	.word	0x20003ed6
    ec98:	20003ed0 	.word	0x20003ed0
    ec9c:	20003ed4 	.word	0x20003ed4
    eca0:	00021cfd 	.word	0x00021cfd
    eca4:	20003e88 	.word	0x20003e88
    eca8:	000174e5 	.word	0x000174e5
    ecac:	0000ea19 	.word	0x0000ea19
    ecb0:	20003ecb 	.word	0x20003ecb

0000ecb4 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    ecb4:	b580      	push	{r7, lr}
    ecb6:	b090      	sub	sp, #64	; 0x40
    ecb8:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ecba:	4b1f      	ldr	r3, [pc, #124]	; (ed38 <sd_mmc_spi_init+0x84>)
    ecbc:	2200      	movs	r2, #0
    ecbe:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    ecc0:	233c      	movs	r3, #60	; 0x3c
    ecc2:	18fb      	adds	r3, r7, r3
    ecc4:	0018      	movs	r0, r3
    ecc6:	4b1d      	ldr	r3, [pc, #116]	; (ed3c <sd_mmc_spi_init+0x88>)
    ecc8:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    ecca:	1d3b      	adds	r3, r7, #4
    eccc:	0018      	movs	r0, r3
    ecce:	4b1c      	ldr	r3, [pc, #112]	; (ed40 <sd_mmc_spi_init+0x8c>)
    ecd0:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    ecd2:	1d3b      	adds	r3, r7, #4
    ecd4:	2280      	movs	r2, #128	; 0x80
    ecd6:	0252      	lsls	r2, r2, #9
    ecd8:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    ecda:	1d3b      	adds	r3, r7, #4
    ecdc:	4a19      	ldr	r2, [pc, #100]	; (ed44 <sd_mmc_spi_init+0x90>)
    ecde:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    ece0:	1d3b      	adds	r3, r7, #4
    ece2:	4a19      	ldr	r2, [pc, #100]	; (ed48 <sd_mmc_spi_init+0x94>)
    ece4:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    ece6:	1d3b      	adds	r3, r7, #4
    ece8:	4a18      	ldr	r2, [pc, #96]	; (ed4c <sd_mmc_spi_init+0x98>)
    ecea:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    ecec:	1d3b      	adds	r3, r7, #4
    ecee:	4a18      	ldr	r2, [pc, #96]	; (ed50 <sd_mmc_spi_init+0x9c>)
    ecf0:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    ecf2:	1d3b      	adds	r3, r7, #4
    ecf4:	2224      	movs	r2, #36	; 0x24
    ecf6:	2100      	movs	r1, #0
    ecf8:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    ecfa:	1d3b      	adds	r3, r7, #4
    ecfc:	4a15      	ldr	r2, [pc, #84]	; (ed54 <sd_mmc_spi_init+0xa0>)
    ecfe:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    ed00:	1d3a      	adds	r2, r7, #4
    ed02:	4915      	ldr	r1, [pc, #84]	; (ed58 <sd_mmc_spi_init+0xa4>)
    ed04:	4b15      	ldr	r3, [pc, #84]	; (ed5c <sd_mmc_spi_init+0xa8>)
    ed06:	0018      	movs	r0, r3
    ed08:	4b15      	ldr	r3, [pc, #84]	; (ed60 <sd_mmc_spi_init+0xac>)
    ed0a:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    ed0c:	4b13      	ldr	r3, [pc, #76]	; (ed5c <sd_mmc_spi_init+0xa8>)
    ed0e:	0018      	movs	r0, r3
    ed10:	4b14      	ldr	r3, [pc, #80]	; (ed64 <sd_mmc_spi_init+0xb0>)
    ed12:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    ed14:	4b14      	ldr	r3, [pc, #80]	; (ed68 <sd_mmc_spi_init+0xb4>)
    ed16:	0018      	movs	r0, r3
    ed18:	4b14      	ldr	r3, [pc, #80]	; (ed6c <sd_mmc_spi_init+0xb8>)
    ed1a:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    ed1c:	4b14      	ldr	r3, [pc, #80]	; (ed70 <sd_mmc_spi_init+0xbc>)
    ed1e:	781a      	ldrb	r2, [r3, #0]
    ed20:	4b11      	ldr	r3, [pc, #68]	; (ed68 <sd_mmc_spi_init+0xb4>)
    ed22:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    ed24:	4a10      	ldr	r2, [pc, #64]	; (ed68 <sd_mmc_spi_init+0xb4>)
    ed26:	4b13      	ldr	r3, [pc, #76]	; (ed74 <sd_mmc_spi_init+0xc0>)
    ed28:	0011      	movs	r1, r2
    ed2a:	0018      	movs	r0, r3
    ed2c:	4b12      	ldr	r3, [pc, #72]	; (ed78 <sd_mmc_spi_init+0xc4>)
    ed2e:	4798      	blx	r3
}
    ed30:	46c0      	nop			; (mov r8, r8)
    ed32:	46bd      	mov	sp, r7
    ed34:	b010      	add	sp, #64	; 0x40
    ed36:	bd80      	pop	{r7, pc}
    ed38:	20003ecb 	.word	0x20003ecb
    ed3c:	0000e769 	.word	0x0000e769
    ed40:	0000e801 	.word	0x0000e801
    ed44:	00100002 	.word	0x00100002
    ed48:	00110002 	.word	0x00110002
    ed4c:	00120002 	.word	0x00120002
    ed50:	00130002 	.word	0x00130002
    ed54:	00061a80 	.word	0x00061a80
    ed58:	42000c00 	.word	0x42000c00
    ed5c:	20003e88 	.word	0x20003e88
    ed60:	00017131 	.word	0x00017131
    ed64:	0000e90d 	.word	0x0000e90d
    ed68:	20003ec8 	.word	0x20003ec8
    ed6c:	0000e885 	.word	0x0000e885
    ed70:	2000010c 	.word	0x2000010c
    ed74:	20003ec4 	.word	0x20003ec4
    ed78:	0000e8a9 	.word	0x0000e8a9

0000ed7c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    ed7c:	b590      	push	{r4, r7, lr}
    ed7e:	b083      	sub	sp, #12
    ed80:	af00      	add	r7, sp, #0
    ed82:	0004      	movs	r4, r0
    ed84:	6039      	str	r1, [r7, #0]
    ed86:	0010      	movs	r0, r2
    ed88:	0019      	movs	r1, r3
    ed8a:	1dfb      	adds	r3, r7, #7
    ed8c:	1c22      	adds	r2, r4, #0
    ed8e:	701a      	strb	r2, [r3, #0]
    ed90:	1dbb      	adds	r3, r7, #6
    ed92:	1c02      	adds	r2, r0, #0
    ed94:	701a      	strb	r2, [r3, #0]
    ed96:	1d7b      	adds	r3, r7, #5
    ed98:	1c0a      	adds	r2, r1, #0
    ed9a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ed9c:	4b13      	ldr	r3, [pc, #76]	; (edec <sd_mmc_spi_select_device+0x70>)
    ed9e:	2200      	movs	r2, #0
    eda0:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    eda2:	683b      	ldr	r3, [r7, #0]
    eda4:	4a12      	ldr	r2, [pc, #72]	; (edf0 <sd_mmc_spi_select_device+0x74>)
    eda6:	4293      	cmp	r3, r2
    eda8:	d907      	bls.n	edba <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    edaa:	4b11      	ldr	r3, [pc, #68]	; (edf0 <sd_mmc_spi_select_device+0x74>)
    edac:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    edae:	e004      	b.n	edba <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    edb0:	683b      	ldr	r3, [r7, #0]
    edb2:	08db      	lsrs	r3, r3, #3
    edb4:	683a      	ldr	r2, [r7, #0]
    edb6:	1ad3      	subs	r3, r2, r3
    edb8:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    edba:	683a      	ldr	r2, [r7, #0]
    edbc:	4b0d      	ldr	r3, [pc, #52]	; (edf4 <sd_mmc_spi_select_device+0x78>)
    edbe:	0011      	movs	r1, r2
    edc0:	0018      	movs	r0, r3
    edc2:	4b0d      	ldr	r3, [pc, #52]	; (edf8 <sd_mmc_spi_select_device+0x7c>)
    edc4:	4798      	blx	r3
    edc6:	0003      	movs	r3, r0
    edc8:	2b17      	cmp	r3, #23
    edca:	d0f1      	beq.n	edb0 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    edcc:	1dfb      	adds	r3, r7, #7
    edce:	781a      	ldrb	r2, [r3, #0]
    edd0:	0013      	movs	r3, r2
    edd2:	005b      	lsls	r3, r3, #1
    edd4:	189b      	adds	r3, r3, r2
    edd6:	4a09      	ldr	r2, [pc, #36]	; (edfc <sd_mmc_spi_select_device+0x80>)
    edd8:	1899      	adds	r1, r3, r2
    edda:	4b06      	ldr	r3, [pc, #24]	; (edf4 <sd_mmc_spi_select_device+0x78>)
    eddc:	2201      	movs	r2, #1
    edde:	0018      	movs	r0, r3
    ede0:	4b07      	ldr	r3, [pc, #28]	; (ee00 <sd_mmc_spi_select_device+0x84>)
    ede2:	4798      	blx	r3
}
    ede4:	46c0      	nop			; (mov r8, r8)
    ede6:	46bd      	mov	sp, r7
    ede8:	b003      	add	sp, #12
    edea:	bd90      	pop	{r4, r7, pc}
    edec:	20003ecb 	.word	0x20003ecb
    edf0:	00989680 	.word	0x00989680
    edf4:	20003e88 	.word	0x20003e88
    edf8:	00016e59 	.word	0x00016e59
    edfc:	20003ec4 	.word	0x20003ec4
    ee00:	000173f5 	.word	0x000173f5

0000ee04 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    ee04:	b580      	push	{r7, lr}
    ee06:	b082      	sub	sp, #8
    ee08:	af00      	add	r7, sp, #0
    ee0a:	0002      	movs	r2, r0
    ee0c:	1dfb      	adds	r3, r7, #7
    ee0e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ee10:	4b09      	ldr	r3, [pc, #36]	; (ee38 <sd_mmc_spi_deselect_device+0x34>)
    ee12:	2200      	movs	r2, #0
    ee14:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    ee16:	1dfb      	adds	r3, r7, #7
    ee18:	781a      	ldrb	r2, [r3, #0]
    ee1a:	0013      	movs	r3, r2
    ee1c:	005b      	lsls	r3, r3, #1
    ee1e:	189b      	adds	r3, r3, r2
    ee20:	4a06      	ldr	r2, [pc, #24]	; (ee3c <sd_mmc_spi_deselect_device+0x38>)
    ee22:	1899      	adds	r1, r3, r2
    ee24:	4b06      	ldr	r3, [pc, #24]	; (ee40 <sd_mmc_spi_deselect_device+0x3c>)
    ee26:	2200      	movs	r2, #0
    ee28:	0018      	movs	r0, r3
    ee2a:	4b06      	ldr	r3, [pc, #24]	; (ee44 <sd_mmc_spi_deselect_device+0x40>)
    ee2c:	4798      	blx	r3
}
    ee2e:	46c0      	nop			; (mov r8, r8)
    ee30:	46bd      	mov	sp, r7
    ee32:	b002      	add	sp, #8
    ee34:	bd80      	pop	{r7, pc}
    ee36:	46c0      	nop			; (mov r8, r8)
    ee38:	20003ecb 	.word	0x20003ecb
    ee3c:	20003ec4 	.word	0x20003ec4
    ee40:	20003e88 	.word	0x20003e88
    ee44:	000173f5 	.word	0x000173f5

0000ee48 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    ee48:	b580      	push	{r7, lr}
    ee4a:	b082      	sub	sp, #8
    ee4c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    ee4e:	1dbb      	adds	r3, r7, #6
    ee50:	22ff      	movs	r2, #255	; 0xff
    ee52:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ee54:	4b0c      	ldr	r3, [pc, #48]	; (ee88 <sd_mmc_spi_send_clock+0x40>)
    ee56:	2200      	movs	r2, #0
    ee58:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    ee5a:	1dfb      	adds	r3, r7, #7
    ee5c:	2200      	movs	r2, #0
    ee5e:	701a      	strb	r2, [r3, #0]
    ee60:	e00a      	b.n	ee78 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    ee62:	1db9      	adds	r1, r7, #6
    ee64:	4b09      	ldr	r3, [pc, #36]	; (ee8c <sd_mmc_spi_send_clock+0x44>)
    ee66:	2201      	movs	r2, #1
    ee68:	0018      	movs	r0, r3
    ee6a:	4b09      	ldr	r3, [pc, #36]	; (ee90 <sd_mmc_spi_send_clock+0x48>)
    ee6c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    ee6e:	1dfb      	adds	r3, r7, #7
    ee70:	781a      	ldrb	r2, [r3, #0]
    ee72:	1dfb      	adds	r3, r7, #7
    ee74:	3201      	adds	r2, #1
    ee76:	701a      	strb	r2, [r3, #0]
    ee78:	1dfb      	adds	r3, r7, #7
    ee7a:	781b      	ldrb	r3, [r3, #0]
    ee7c:	2b09      	cmp	r3, #9
    ee7e:	d9f0      	bls.n	ee62 <sd_mmc_spi_send_clock+0x1a>
	}
}
    ee80:	46c0      	nop			; (mov r8, r8)
    ee82:	46bd      	mov	sp, r7
    ee84:	b002      	add	sp, #8
    ee86:	bd80      	pop	{r7, pc}
    ee88:	20003ecb 	.word	0x20003ecb
    ee8c:	20003e88 	.word	0x20003e88
    ee90:	000174e5 	.word	0x000174e5

0000ee94 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    ee94:	b590      	push	{r4, r7, lr}
    ee96:	b085      	sub	sp, #20
    ee98:	af02      	add	r7, sp, #8
    ee9a:	6078      	str	r0, [r7, #4]
    ee9c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    ee9e:	6839      	ldr	r1, [r7, #0]
    eea0:	6878      	ldr	r0, [r7, #4]
    eea2:	2300      	movs	r3, #0
    eea4:	9300      	str	r3, [sp, #0]
    eea6:	2300      	movs	r3, #0
    eea8:	2200      	movs	r2, #0
    eeaa:	4c03      	ldr	r4, [pc, #12]	; (eeb8 <sd_mmc_spi_send_cmd+0x24>)
    eeac:	47a0      	blx	r4
    eeae:	0003      	movs	r3, r0
}
    eeb0:	0018      	movs	r0, r3
    eeb2:	46bd      	mov	sp, r7
    eeb4:	b003      	add	sp, #12
    eeb6:	bd90      	pop	{r4, r7, pc}
    eeb8:	0000eebd 	.word	0x0000eebd

0000eebc <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    eebc:	b590      	push	{r4, r7, lr}
    eebe:	b089      	sub	sp, #36	; 0x24
    eec0:	af00      	add	r7, sp, #0
    eec2:	60f8      	str	r0, [r7, #12]
    eec4:	60b9      	str	r1, [r7, #8]
    eec6:	0019      	movs	r1, r3
    eec8:	1dbb      	adds	r3, r7, #6
    eeca:	801a      	strh	r2, [r3, #0]
    eecc:	1d3b      	adds	r3, r7, #4
    eece:	1c0a      	adds	r2, r1, #0
    eed0:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    eed2:	231b      	movs	r3, #27
    eed4:	18fb      	adds	r3, r7, r3
    eed6:	22ff      	movs	r2, #255	; 0xff
    eed8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    eeda:	231c      	movs	r3, #28
    eedc:	18fb      	adds	r3, r7, r3
    eede:	22ff      	movs	r2, #255	; 0xff
    eee0:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    eee2:	4b72      	ldr	r3, [pc, #456]	; (f0ac <sd_mmc_spi_adtc_start+0x1f0>)
    eee4:	2200      	movs	r2, #0
    eee6:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    eee8:	68fb      	ldr	r3, [r7, #12]
    eeea:	b2db      	uxtb	r3, r3
    eeec:	223f      	movs	r2, #63	; 0x3f
    eeee:	4013      	ands	r3, r2
    eef0:	b2db      	uxtb	r3, r3
    eef2:	2240      	movs	r2, #64	; 0x40
    eef4:	4313      	orrs	r3, r2
    eef6:	b2da      	uxtb	r2, r3
    eef8:	2314      	movs	r3, #20
    eefa:	18fb      	adds	r3, r7, r3
    eefc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    eefe:	68bb      	ldr	r3, [r7, #8]
    ef00:	0e1b      	lsrs	r3, r3, #24
    ef02:	b2da      	uxtb	r2, r3
    ef04:	2314      	movs	r3, #20
    ef06:	18fb      	adds	r3, r7, r3
    ef08:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    ef0a:	68bb      	ldr	r3, [r7, #8]
    ef0c:	0c1b      	lsrs	r3, r3, #16
    ef0e:	b2da      	uxtb	r2, r3
    ef10:	2314      	movs	r3, #20
    ef12:	18fb      	adds	r3, r7, r3
    ef14:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    ef16:	68bb      	ldr	r3, [r7, #8]
    ef18:	0a1b      	lsrs	r3, r3, #8
    ef1a:	b2da      	uxtb	r2, r3
    ef1c:	2314      	movs	r3, #20
    ef1e:	18fb      	adds	r3, r7, r3
    ef20:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    ef22:	68bb      	ldr	r3, [r7, #8]
    ef24:	b2da      	uxtb	r2, r3
    ef26:	2314      	movs	r3, #20
    ef28:	18fb      	adds	r3, r7, r3
    ef2a:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    ef2c:	2314      	movs	r3, #20
    ef2e:	18fb      	adds	r3, r7, r3
    ef30:	2105      	movs	r1, #5
    ef32:	0018      	movs	r0, r3
    ef34:	4b5e      	ldr	r3, [pc, #376]	; (f0b0 <sd_mmc_spi_adtc_start+0x1f4>)
    ef36:	4798      	blx	r3
    ef38:	0003      	movs	r3, r0
    ef3a:	001a      	movs	r2, r3
    ef3c:	2314      	movs	r3, #20
    ef3e:	18fb      	adds	r3, r7, r3
    ef40:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    ef42:	231b      	movs	r3, #27
    ef44:	18f9      	adds	r1, r7, r3
    ef46:	4b5b      	ldr	r3, [pc, #364]	; (f0b4 <sd_mmc_spi_adtc_start+0x1f8>)
    ef48:	2201      	movs	r2, #1
    ef4a:	0018      	movs	r0, r3
    ef4c:	4b5a      	ldr	r3, [pc, #360]	; (f0b8 <sd_mmc_spi_adtc_start+0x1fc>)
    ef4e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    ef50:	2314      	movs	r3, #20
    ef52:	18f9      	adds	r1, r7, r3
    ef54:	4b57      	ldr	r3, [pc, #348]	; (f0b4 <sd_mmc_spi_adtc_start+0x1f8>)
    ef56:	2206      	movs	r2, #6
    ef58:	0018      	movs	r0, r3
    ef5a:	4b57      	ldr	r3, [pc, #348]	; (f0b8 <sd_mmc_spi_adtc_start+0x1fc>)
    ef5c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    ef5e:	2313      	movs	r3, #19
    ef60:	18fb      	adds	r3, r7, r3
    ef62:	22ff      	movs	r2, #255	; 0xff
    ef64:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    ef66:	231c      	movs	r3, #28
    ef68:	18fb      	adds	r3, r7, r3
    ef6a:	881b      	ldrh	r3, [r3, #0]
    ef6c:	2213      	movs	r2, #19
    ef6e:	18b9      	adds	r1, r7, r2
    ef70:	4850      	ldr	r0, [pc, #320]	; (f0b4 <sd_mmc_spi_adtc_start+0x1f8>)
    ef72:	2201      	movs	r2, #1
    ef74:	4c51      	ldr	r4, [pc, #324]	; (f0bc <sd_mmc_spi_adtc_start+0x200>)
    ef76:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    ef78:	231f      	movs	r3, #31
    ef7a:	18fb      	adds	r3, r7, r3
    ef7c:	2207      	movs	r2, #7
    ef7e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    ef80:	231c      	movs	r3, #28
    ef82:	18fb      	adds	r3, r7, r3
    ef84:	881b      	ldrh	r3, [r3, #0]
    ef86:	2213      	movs	r2, #19
    ef88:	18b9      	adds	r1, r7, r2
    ef8a:	484a      	ldr	r0, [pc, #296]	; (f0b4 <sd_mmc_spi_adtc_start+0x1f8>)
    ef8c:	2201      	movs	r2, #1
    ef8e:	4c4b      	ldr	r4, [pc, #300]	; (f0bc <sd_mmc_spi_adtc_start+0x200>)
    ef90:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    ef92:	2313      	movs	r3, #19
    ef94:	18fb      	adds	r3, r7, r3
    ef96:	781b      	ldrb	r3, [r3, #0]
    ef98:	b25b      	sxtb	r3, r3
    ef9a:	2b00      	cmp	r3, #0
    ef9c:	da10      	bge.n	efc0 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    ef9e:	231f      	movs	r3, #31
    efa0:	18fb      	adds	r3, r7, r3
    efa2:	221f      	movs	r2, #31
    efa4:	18ba      	adds	r2, r7, r2
    efa6:	7812      	ldrb	r2, [r2, #0]
    efa8:	3a01      	subs	r2, #1
    efaa:	701a      	strb	r2, [r3, #0]
    efac:	231f      	movs	r3, #31
    efae:	18fb      	adds	r3, r7, r3
    efb0:	781b      	ldrb	r3, [r3, #0]
    efb2:	2b00      	cmp	r3, #0
    efb4:	d1e4      	bne.n	ef80 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    efb6:	4b3d      	ldr	r3, [pc, #244]	; (f0ac <sd_mmc_spi_adtc_start+0x1f0>)
    efb8:	2202      	movs	r2, #2
    efba:	701a      	strb	r2, [r3, #0]
			return false;
    efbc:	2300      	movs	r3, #0
    efbe:	e070      	b.n	f0a2 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    efc0:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    efc2:	2313      	movs	r3, #19
    efc4:	18fb      	adds	r3, r7, r3
    efc6:	781b      	ldrb	r3, [r3, #0]
    efc8:	001a      	movs	r2, r3
    efca:	4b3d      	ldr	r3, [pc, #244]	; (f0c0 <sd_mmc_spi_adtc_start+0x204>)
    efcc:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    efce:	2313      	movs	r3, #19
    efd0:	18fb      	adds	r3, r7, r3
    efd2:	781b      	ldrb	r3, [r3, #0]
    efd4:	001a      	movs	r2, r3
    efd6:	2308      	movs	r3, #8
    efd8:	4013      	ands	r3, r2
    efda:	d004      	beq.n	efe6 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    efdc:	4b33      	ldr	r3, [pc, #204]	; (f0ac <sd_mmc_spi_adtc_start+0x1f0>)
    efde:	2206      	movs	r2, #6
    efe0:	701a      	strb	r2, [r3, #0]
		return false;
    efe2:	2300      	movs	r3, #0
    efe4:	e05d      	b.n	f0a2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    efe6:	2313      	movs	r3, #19
    efe8:	18fb      	adds	r3, r7, r3
    efea:	781b      	ldrb	r3, [r3, #0]
    efec:	001a      	movs	r2, r3
    efee:	2304      	movs	r3, #4
    eff0:	4013      	ands	r3, r2
    eff2:	d004      	beq.n	effe <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    eff4:	4b2d      	ldr	r3, [pc, #180]	; (f0ac <sd_mmc_spi_adtc_start+0x1f0>)
    eff6:	2209      	movs	r2, #9
    eff8:	701a      	strb	r2, [r3, #0]
		return false;
    effa:	2300      	movs	r3, #0
    effc:	e051      	b.n	f0a2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    effe:	2313      	movs	r3, #19
    f000:	18fb      	adds	r3, r7, r3
    f002:	781b      	ldrb	r3, [r3, #0]
    f004:	001a      	movs	r2, r3
    f006:	2301      	movs	r3, #1
    f008:	439a      	bics	r2, r3
    f00a:	1e13      	subs	r3, r2, #0
    f00c:	d004      	beq.n	f018 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    f00e:	4b27      	ldr	r3, [pc, #156]	; (f0ac <sd_mmc_spi_adtc_start+0x1f0>)
    f010:	2201      	movs	r2, #1
    f012:	701a      	strb	r2, [r3, #0]
		return false;
    f014:	2300      	movs	r3, #0
    f016:	e044      	b.n	f0a2 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    f018:	68fa      	ldr	r2, [r7, #12]
    f01a:	2380      	movs	r3, #128	; 0x80
    f01c:	019b      	lsls	r3, r3, #6
    f01e:	4013      	ands	r3, r2
    f020:	d00d      	beq.n	f03e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    f022:	4b28      	ldr	r3, [pc, #160]	; (f0c4 <sd_mmc_spi_adtc_start+0x208>)
    f024:	4798      	blx	r3
    f026:	0003      	movs	r3, r0
    f028:	001a      	movs	r2, r3
    f02a:	2301      	movs	r3, #1
    f02c:	4053      	eors	r3, r2
    f02e:	b2db      	uxtb	r3, r3
    f030:	2b00      	cmp	r3, #0
    f032:	d004      	beq.n	f03e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    f034:	4b1d      	ldr	r3, [pc, #116]	; (f0ac <sd_mmc_spi_adtc_start+0x1f0>)
    f036:	2203      	movs	r2, #3
    f038:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    f03a:	2300      	movs	r3, #0
    f03c:	e031      	b.n	f0a2 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    f03e:	68fa      	ldr	r2, [r7, #12]
    f040:	2380      	movs	r3, #128	; 0x80
    f042:	009b      	lsls	r3, r3, #2
    f044:	4013      	ands	r3, r2
    f046:	d00e      	beq.n	f066 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    f048:	4b1d      	ldr	r3, [pc, #116]	; (f0c0 <sd_mmc_spi_adtc_start+0x204>)
    f04a:	2200      	movs	r2, #0
    f04c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    f04e:	231c      	movs	r3, #28
    f050:	18fb      	adds	r3, r7, r3
    f052:	881b      	ldrh	r3, [r3, #0]
    f054:	491a      	ldr	r1, [pc, #104]	; (f0c0 <sd_mmc_spi_adtc_start+0x204>)
    f056:	4817      	ldr	r0, [pc, #92]	; (f0b4 <sd_mmc_spi_adtc_start+0x1f8>)
    f058:	2201      	movs	r2, #1
    f05a:	4c18      	ldr	r4, [pc, #96]	; (f0bc <sd_mmc_spi_adtc_start+0x200>)
    f05c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    f05e:	4b18      	ldr	r3, [pc, #96]	; (f0c0 <sd_mmc_spi_adtc_start+0x204>)
    f060:	681a      	ldr	r2, [r3, #0]
    f062:	4b17      	ldr	r3, [pc, #92]	; (f0c0 <sd_mmc_spi_adtc_start+0x204>)
    f064:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    f066:	68fa      	ldr	r2, [r7, #12]
    f068:	2380      	movs	r3, #128	; 0x80
    f06a:	00db      	lsls	r3, r3, #3
    f06c:	4013      	ands	r3, r2
    f06e:	d00c      	beq.n	f08a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    f070:	231c      	movs	r3, #28
    f072:	18fb      	adds	r3, r7, r3
    f074:	881b      	ldrh	r3, [r3, #0]
    f076:	4912      	ldr	r1, [pc, #72]	; (f0c0 <sd_mmc_spi_adtc_start+0x204>)
    f078:	480e      	ldr	r0, [pc, #56]	; (f0b4 <sd_mmc_spi_adtc_start+0x1f8>)
    f07a:	2204      	movs	r2, #4
    f07c:	4c0f      	ldr	r4, [pc, #60]	; (f0bc <sd_mmc_spi_adtc_start+0x200>)
    f07e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    f080:	4b0f      	ldr	r3, [pc, #60]	; (f0c0 <sd_mmc_spi_adtc_start+0x204>)
    f082:	681b      	ldr	r3, [r3, #0]
    f084:	ba1a      	rev	r2, r3
    f086:	4b0e      	ldr	r3, [pc, #56]	; (f0c0 <sd_mmc_spi_adtc_start+0x204>)
    f088:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    f08a:	4b0f      	ldr	r3, [pc, #60]	; (f0c8 <sd_mmc_spi_adtc_start+0x20c>)
    f08c:	1dba      	adds	r2, r7, #6
    f08e:	8812      	ldrh	r2, [r2, #0]
    f090:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    f092:	4b0e      	ldr	r3, [pc, #56]	; (f0cc <sd_mmc_spi_adtc_start+0x210>)
    f094:	1d3a      	adds	r2, r7, #4
    f096:	8812      	ldrh	r2, [r2, #0]
    f098:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    f09a:	4b0d      	ldr	r3, [pc, #52]	; (f0d0 <sd_mmc_spi_adtc_start+0x214>)
    f09c:	2200      	movs	r2, #0
    f09e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    f0a0:	2301      	movs	r3, #1
}
    f0a2:	0018      	movs	r0, r3
    f0a4:	46bd      	mov	sp, r7
    f0a6:	b009      	add	sp, #36	; 0x24
    f0a8:	bd90      	pop	{r4, r7, pc}
    f0aa:	46c0      	nop			; (mov r8, r8)
    f0ac:	20003ecb 	.word	0x20003ecb
    f0b0:	0000e95d 	.word	0x0000e95d
    f0b4:	20003e88 	.word	0x20003e88
    f0b8:	000174e5 	.word	0x000174e5
    f0bc:	000172c1 	.word	0x000172c1
    f0c0:	20003ecc 	.word	0x20003ecc
    f0c4:	0000ea19 	.word	0x0000ea19
    f0c8:	20003ed4 	.word	0x20003ed4
    f0cc:	20003ed6 	.word	0x20003ed6
    f0d0:	20003ed0 	.word	0x20003ed0

0000f0d4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    f0d4:	b580      	push	{r7, lr}
    f0d6:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    f0d8:	4b02      	ldr	r3, [pc, #8]	; (f0e4 <sd_mmc_spi_get_response+0x10>)
    f0da:	681b      	ldr	r3, [r3, #0]
}
    f0dc:	0018      	movs	r0, r3
    f0de:	46bd      	mov	sp, r7
    f0e0:	bd80      	pop	{r7, pc}
    f0e2:	46c0      	nop			; (mov r8, r8)
    f0e4:	20003ecc 	.word	0x20003ecc

0000f0e8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    f0e8:	b590      	push	{r4, r7, lr}
    f0ea:	b085      	sub	sp, #20
    f0ec:	af00      	add	r7, sp, #0
    f0ee:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    f0f0:	230e      	movs	r3, #14
    f0f2:	18fb      	adds	r3, r7, r3
    f0f4:	22ff      	movs	r2, #255	; 0xff
    f0f6:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    f0f8:	4b1c      	ldr	r3, [pc, #112]	; (f16c <sd_mmc_spi_read_word+0x84>)
    f0fa:	2200      	movs	r2, #0
    f0fc:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    f0fe:	4b1c      	ldr	r3, [pc, #112]	; (f170 <sd_mmc_spi_read_word+0x88>)
    f100:	681a      	ldr	r2, [r3, #0]
    f102:	4b1c      	ldr	r3, [pc, #112]	; (f174 <sd_mmc_spi_read_word+0x8c>)
    f104:	881b      	ldrh	r3, [r3, #0]
    f106:	0019      	movs	r1, r3
    f108:	4b1b      	ldr	r3, [pc, #108]	; (f178 <sd_mmc_spi_read_word+0x90>)
    f10a:	0010      	movs	r0, r2
    f10c:	4798      	blx	r3
    f10e:	1e0b      	subs	r3, r1, #0
    f110:	d10a      	bne.n	f128 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    f112:	4b1a      	ldr	r3, [pc, #104]	; (f17c <sd_mmc_spi_read_word+0x94>)
    f114:	4798      	blx	r3
    f116:	0003      	movs	r3, r0
    f118:	001a      	movs	r2, r3
    f11a:	2301      	movs	r3, #1
    f11c:	4053      	eors	r3, r2
    f11e:	b2db      	uxtb	r3, r3
    f120:	2b00      	cmp	r3, #0
    f122:	d001      	beq.n	f128 <sd_mmc_spi_read_word+0x40>
			return false;
    f124:	2300      	movs	r3, #0
    f126:	e01d      	b.n	f164 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    f128:	230e      	movs	r3, #14
    f12a:	18fb      	adds	r3, r7, r3
    f12c:	881b      	ldrh	r3, [r3, #0]
    f12e:	1d39      	adds	r1, r7, #4
    f130:	4813      	ldr	r0, [pc, #76]	; (f180 <sd_mmc_spi_read_word+0x98>)
    f132:	2204      	movs	r2, #4
    f134:	4c13      	ldr	r4, [pc, #76]	; (f184 <sd_mmc_spi_read_word+0x9c>)
    f136:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    f138:	687b      	ldr	r3, [r7, #4]
    f13a:	687a      	ldr	r2, [r7, #4]
    f13c:	6812      	ldr	r2, [r2, #0]
    f13e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    f140:	4b0b      	ldr	r3, [pc, #44]	; (f170 <sd_mmc_spi_read_word+0x88>)
    f142:	681b      	ldr	r3, [r3, #0]
    f144:	1d1a      	adds	r2, r3, #4
    f146:	4b0a      	ldr	r3, [pc, #40]	; (f170 <sd_mmc_spi_read_word+0x88>)
    f148:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    f14a:	4b09      	ldr	r3, [pc, #36]	; (f170 <sd_mmc_spi_read_word+0x88>)
    f14c:	681a      	ldr	r2, [r3, #0]
    f14e:	4b09      	ldr	r3, [pc, #36]	; (f174 <sd_mmc_spi_read_word+0x8c>)
    f150:	881b      	ldrh	r3, [r3, #0]
    f152:	0019      	movs	r1, r3
    f154:	4b08      	ldr	r3, [pc, #32]	; (f178 <sd_mmc_spi_read_word+0x90>)
    f156:	0010      	movs	r0, r2
    f158:	4798      	blx	r3
    f15a:	1e0b      	subs	r3, r1, #0
    f15c:	d101      	bne.n	f162 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    f15e:	4b0a      	ldr	r3, [pc, #40]	; (f188 <sd_mmc_spi_read_word+0xa0>)
    f160:	4798      	blx	r3
	}
	return true;
    f162:	2301      	movs	r3, #1
}
    f164:	0018      	movs	r0, r3
    f166:	46bd      	mov	sp, r7
    f168:	b005      	add	sp, #20
    f16a:	bd90      	pop	{r4, r7, pc}
    f16c:	20003ecb 	.word	0x20003ecb
    f170:	20003ed0 	.word	0x20003ed0
    f174:	20003ed4 	.word	0x20003ed4
    f178:	00021e09 	.word	0x00021e09
    f17c:	0000ea85 	.word	0x0000ea85
    f180:	20003e88 	.word	0x20003e88
    f184:	000172c1 	.word	0x000172c1
    f188:	0000eb09 	.word	0x0000eb09

0000f18c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    f18c:	b590      	push	{r4, r7, lr}
    f18e:	b085      	sub	sp, #20
    f190:	af00      	add	r7, sp, #0
    f192:	6078      	str	r0, [r7, #4]
    f194:	000a      	movs	r2, r1
    f196:	1cbb      	adds	r3, r7, #2
    f198:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    f19a:	230a      	movs	r3, #10
    f19c:	18fb      	adds	r3, r7, r3
    f19e:	22ff      	movs	r2, #255	; 0xff
    f1a0:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    f1a2:	4b1c      	ldr	r3, [pc, #112]	; (f214 <sd_mmc_spi_start_read_blocks+0x88>)
    f1a4:	2200      	movs	r2, #0
    f1a6:	701a      	strb	r2, [r3, #0]
	pos = 0;
    f1a8:	2300      	movs	r3, #0
    f1aa:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    f1ac:	e025      	b.n	f1fa <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    f1ae:	4b1a      	ldr	r3, [pc, #104]	; (f218 <sd_mmc_spi_start_read_blocks+0x8c>)
    f1b0:	4798      	blx	r3
    f1b2:	0003      	movs	r3, r0
    f1b4:	001a      	movs	r2, r3
    f1b6:	2301      	movs	r3, #1
    f1b8:	4053      	eors	r3, r2
    f1ba:	b2db      	uxtb	r3, r3
    f1bc:	2b00      	cmp	r3, #0
    f1be:	d001      	beq.n	f1c4 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    f1c0:	2300      	movs	r3, #0
    f1c2:	e022      	b.n	f20a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    f1c4:	687a      	ldr	r2, [r7, #4]
    f1c6:	68fb      	ldr	r3, [r7, #12]
    f1c8:	18d1      	adds	r1, r2, r3
    f1ca:	4b14      	ldr	r3, [pc, #80]	; (f21c <sd_mmc_spi_start_read_blocks+0x90>)
    f1cc:	881a      	ldrh	r2, [r3, #0]
    f1ce:	230a      	movs	r3, #10
    f1d0:	18fb      	adds	r3, r7, r3
    f1d2:	881b      	ldrh	r3, [r3, #0]
    f1d4:	4812      	ldr	r0, [pc, #72]	; (f220 <sd_mmc_spi_start_read_blocks+0x94>)
    f1d6:	4c13      	ldr	r4, [pc, #76]	; (f224 <sd_mmc_spi_start_read_blocks+0x98>)
    f1d8:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    f1da:	4b10      	ldr	r3, [pc, #64]	; (f21c <sd_mmc_spi_start_read_blocks+0x90>)
    f1dc:	881b      	ldrh	r3, [r3, #0]
    f1de:	001a      	movs	r2, r3
    f1e0:	68fb      	ldr	r3, [r7, #12]
    f1e2:	189b      	adds	r3, r3, r2
    f1e4:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    f1e6:	4b0d      	ldr	r3, [pc, #52]	; (f21c <sd_mmc_spi_start_read_blocks+0x90>)
    f1e8:	881b      	ldrh	r3, [r3, #0]
    f1ea:	001a      	movs	r2, r3
    f1ec:	4b0e      	ldr	r3, [pc, #56]	; (f228 <sd_mmc_spi_start_read_blocks+0x9c>)
    f1ee:	681b      	ldr	r3, [r3, #0]
    f1f0:	18d2      	adds	r2, r2, r3
    f1f2:	4b0d      	ldr	r3, [pc, #52]	; (f228 <sd_mmc_spi_start_read_blocks+0x9c>)
    f1f4:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    f1f6:	4b0d      	ldr	r3, [pc, #52]	; (f22c <sd_mmc_spi_start_read_blocks+0xa0>)
    f1f8:	4798      	blx	r3
	while (nb_block--) {
    f1fa:	1cbb      	adds	r3, r7, #2
    f1fc:	881b      	ldrh	r3, [r3, #0]
    f1fe:	1cba      	adds	r2, r7, #2
    f200:	1e59      	subs	r1, r3, #1
    f202:	8011      	strh	r1, [r2, #0]
    f204:	2b00      	cmp	r3, #0
    f206:	d1d2      	bne.n	f1ae <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    f208:	2301      	movs	r3, #1
}
    f20a:	0018      	movs	r0, r3
    f20c:	46bd      	mov	sp, r7
    f20e:	b005      	add	sp, #20
    f210:	bd90      	pop	{r4, r7, pc}
    f212:	46c0      	nop			; (mov r8, r8)
    f214:	20003ecb 	.word	0x20003ecb
    f218:	0000ea85 	.word	0x0000ea85
    f21c:	20003ed4 	.word	0x20003ed4
    f220:	20003e88 	.word	0x20003e88
    f224:	000172c1 	.word	0x000172c1
    f228:	20003ed0 	.word	0x20003ed0
    f22c:	0000eb09 	.word	0x0000eb09

0000f230 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    f230:	b580      	push	{r7, lr}
    f232:	af00      	add	r7, sp, #0
	return true;
    f234:	2301      	movs	r3, #1
}
    f236:	0018      	movs	r0, r3
    f238:	46bd      	mov	sp, r7
    f23a:	bd80      	pop	{r7, pc}

0000f23c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    f23c:	b580      	push	{r7, lr}
    f23e:	b084      	sub	sp, #16
    f240:	af00      	add	r7, sp, #0
    f242:	6078      	str	r0, [r7, #4]
    f244:	000a      	movs	r2, r1
    f246:	1cbb      	adds	r3, r7, #2
    f248:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    f24a:	4b24      	ldr	r3, [pc, #144]	; (f2dc <sd_mmc_spi_start_write_blocks+0xa0>)
    f24c:	2200      	movs	r2, #0
    f24e:	701a      	strb	r2, [r3, #0]
	pos = 0;
    f250:	2300      	movs	r3, #0
    f252:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    f254:	e035      	b.n	f2c2 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    f256:	4b22      	ldr	r3, [pc, #136]	; (f2e0 <sd_mmc_spi_start_write_blocks+0xa4>)
    f258:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    f25a:	687a      	ldr	r2, [r7, #4]
    f25c:	68fb      	ldr	r3, [r7, #12]
    f25e:	18d1      	adds	r1, r2, r3
    f260:	4b20      	ldr	r3, [pc, #128]	; (f2e4 <sd_mmc_spi_start_write_blocks+0xa8>)
    f262:	881a      	ldrh	r2, [r3, #0]
    f264:	4b20      	ldr	r3, [pc, #128]	; (f2e8 <sd_mmc_spi_start_write_blocks+0xac>)
    f266:	0018      	movs	r0, r3
    f268:	4b20      	ldr	r3, [pc, #128]	; (f2ec <sd_mmc_spi_start_write_blocks+0xb0>)
    f26a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    f26c:	4b1d      	ldr	r3, [pc, #116]	; (f2e4 <sd_mmc_spi_start_write_blocks+0xa8>)
    f26e:	881b      	ldrh	r3, [r3, #0]
    f270:	001a      	movs	r2, r3
    f272:	68fb      	ldr	r3, [r7, #12]
    f274:	189b      	adds	r3, r3, r2
    f276:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    f278:	4b1a      	ldr	r3, [pc, #104]	; (f2e4 <sd_mmc_spi_start_write_blocks+0xa8>)
    f27a:	881b      	ldrh	r3, [r3, #0]
    f27c:	001a      	movs	r2, r3
    f27e:	4b1c      	ldr	r3, [pc, #112]	; (f2f0 <sd_mmc_spi_start_write_blocks+0xb4>)
    f280:	681b      	ldr	r3, [r3, #0]
    f282:	18d2      	adds	r2, r2, r3
    f284:	4b1a      	ldr	r3, [pc, #104]	; (f2f0 <sd_mmc_spi_start_write_blocks+0xb4>)
    f286:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    f288:	4b1a      	ldr	r3, [pc, #104]	; (f2f4 <sd_mmc_spi_start_write_blocks+0xb8>)
    f28a:	4798      	blx	r3
    f28c:	0003      	movs	r3, r0
    f28e:	001a      	movs	r2, r3
    f290:	2301      	movs	r3, #1
    f292:	4053      	eors	r3, r2
    f294:	b2db      	uxtb	r3, r3
    f296:	2b00      	cmp	r3, #0
    f298:	d001      	beq.n	f29e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    f29a:	2300      	movs	r3, #0
    f29c:	e019      	b.n	f2d2 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    f29e:	1cbb      	adds	r3, r7, #2
    f2a0:	881b      	ldrh	r3, [r3, #0]
    f2a2:	2b00      	cmp	r3, #0
    f2a4:	d00d      	beq.n	f2c2 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    f2a6:	4b14      	ldr	r3, [pc, #80]	; (f2f8 <sd_mmc_spi_start_write_blocks+0xbc>)
    f2a8:	4798      	blx	r3
    f2aa:	0003      	movs	r3, r0
    f2ac:	001a      	movs	r2, r3
    f2ae:	2301      	movs	r3, #1
    f2b0:	4053      	eors	r3, r2
    f2b2:	b2db      	uxtb	r3, r3
    f2b4:	2b00      	cmp	r3, #0
    f2b6:	d004      	beq.n	f2c2 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    f2b8:	4b08      	ldr	r3, [pc, #32]	; (f2dc <sd_mmc_spi_start_write_blocks+0xa0>)
    f2ba:	2205      	movs	r2, #5
    f2bc:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    f2be:	2300      	movs	r3, #0
    f2c0:	e007      	b.n	f2d2 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    f2c2:	1cbb      	adds	r3, r7, #2
    f2c4:	881b      	ldrh	r3, [r3, #0]
    f2c6:	1cba      	adds	r2, r7, #2
    f2c8:	1e59      	subs	r1, r3, #1
    f2ca:	8011      	strh	r1, [r2, #0]
    f2cc:	2b00      	cmp	r3, #0
    f2ce:	d1c2      	bne.n	f256 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    f2d0:	2301      	movs	r3, #1
}
    f2d2:	0018      	movs	r0, r3
    f2d4:	46bd      	mov	sp, r7
    f2d6:	b004      	add	sp, #16
    f2d8:	bd80      	pop	{r7, pc}
    f2da:	46c0      	nop			; (mov r8, r8)
    f2dc:	20003ecb 	.word	0x20003ecb
    f2e0:	0000eb35 	.word	0x0000eb35
    f2e4:	20003ed4 	.word	0x20003ed4
    f2e8:	20003e88 	.word	0x20003e88
    f2ec:	000174e5 	.word	0x000174e5
    f2f0:	20003ed0 	.word	0x20003ed0
    f2f4:	0000eb85 	.word	0x0000eb85
    f2f8:	0000ea19 	.word	0x0000ea19

0000f2fc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    f2fc:	b580      	push	{r7, lr}
    f2fe:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    f300:	4b09      	ldr	r3, [pc, #36]	; (f328 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    f302:	4798      	blx	r3
    f304:	0003      	movs	r3, r0
    f306:	001a      	movs	r2, r3
    f308:	2301      	movs	r3, #1
    f30a:	4053      	eors	r3, r2
    f30c:	b2db      	uxtb	r3, r3
    f30e:	2b00      	cmp	r3, #0
    f310:	d004      	beq.n	f31c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    f312:	4b06      	ldr	r3, [pc, #24]	; (f32c <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    f314:	2205      	movs	r2, #5
    f316:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    f318:	2300      	movs	r3, #0
    f31a:	e002      	b.n	f322 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    f31c:	4b04      	ldr	r3, [pc, #16]	; (f330 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    f31e:	4798      	blx	r3
    f320:	0003      	movs	r3, r0
}
    f322:	0018      	movs	r0, r3
    f324:	46bd      	mov	sp, r7
    f326:	bd80      	pop	{r7, pc}
    f328:	0000ea19 	.word	0x0000ea19
    f32c:	20003ecb 	.word	0x20003ecb
    f330:	0000ec19 	.word	0x0000ec19

0000f334 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    f334:	b580      	push	{r7, lr}
    f336:	b082      	sub	sp, #8
    f338:	af00      	add	r7, sp, #0
    f33a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    f33c:	687b      	ldr	r3, [r7, #4]
    f33e:	2b00      	cmp	r3, #0
    f340:	d00c      	beq.n	f35c <delay_cycles+0x28>
		SysTick->LOAD = n;
    f342:	4b08      	ldr	r3, [pc, #32]	; (f364 <delay_cycles+0x30>)
    f344:	687a      	ldr	r2, [r7, #4]
    f346:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    f348:	4b06      	ldr	r3, [pc, #24]	; (f364 <delay_cycles+0x30>)
    f34a:	2200      	movs	r2, #0
    f34c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    f34e:	46c0      	nop			; (mov r8, r8)
    f350:	4b04      	ldr	r3, [pc, #16]	; (f364 <delay_cycles+0x30>)
    f352:	681a      	ldr	r2, [r3, #0]
    f354:	2380      	movs	r3, #128	; 0x80
    f356:	025b      	lsls	r3, r3, #9
    f358:	4013      	ands	r3, r2
    f35a:	d0f9      	beq.n	f350 <delay_cycles+0x1c>
		};
	}
}
    f35c:	46c0      	nop			; (mov r8, r8)
    f35e:	46bd      	mov	sp, r7
    f360:	b002      	add	sp, #8
    f362:	bd80      	pop	{r7, pc}
    f364:	e000e010 	.word	0xe000e010

0000f368 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    f368:	b580      	push	{r7, lr}
    f36a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    f36c:	2000      	movs	r0, #0
    f36e:	4b0f      	ldr	r3, [pc, #60]	; (f3ac <delay_init+0x44>)
    f370:	4798      	blx	r3
    f372:	0002      	movs	r2, r0
    f374:	4b0e      	ldr	r3, [pc, #56]	; (f3b0 <delay_init+0x48>)
    f376:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    f378:	4b0d      	ldr	r3, [pc, #52]	; (f3b0 <delay_init+0x48>)
    f37a:	6818      	ldr	r0, [r3, #0]
    f37c:	4b0d      	ldr	r3, [pc, #52]	; (f3b4 <delay_init+0x4c>)
    f37e:	22fa      	movs	r2, #250	; 0xfa
    f380:	0091      	lsls	r1, r2, #2
    f382:	4798      	blx	r3
    f384:	0003      	movs	r3, r0
    f386:	001a      	movs	r2, r3
    f388:	4b09      	ldr	r3, [pc, #36]	; (f3b0 <delay_init+0x48>)
    f38a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    f38c:	4b08      	ldr	r3, [pc, #32]	; (f3b0 <delay_init+0x48>)
    f38e:	6818      	ldr	r0, [r3, #0]
    f390:	4b08      	ldr	r3, [pc, #32]	; (f3b4 <delay_init+0x4c>)
    f392:	22fa      	movs	r2, #250	; 0xfa
    f394:	0091      	lsls	r1, r2, #2
    f396:	4798      	blx	r3
    f398:	0003      	movs	r3, r0
    f39a:	001a      	movs	r2, r3
    f39c:	4b06      	ldr	r3, [pc, #24]	; (f3b8 <delay_init+0x50>)
    f39e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    f3a0:	4b06      	ldr	r3, [pc, #24]	; (f3bc <delay_init+0x54>)
    f3a2:	2205      	movs	r2, #5
    f3a4:	601a      	str	r2, [r3, #0]
}
    f3a6:	46c0      	nop			; (mov r8, r8)
    f3a8:	46bd      	mov	sp, r7
    f3aa:	bd80      	pop	{r7, pc}
    f3ac:	00019069 	.word	0x00019069
    f3b0:	20000110 	.word	0x20000110
    f3b4:	00021cfd 	.word	0x00021cfd
    f3b8:	20000114 	.word	0x20000114
    f3bc:	e000e010 	.word	0xe000e010

0000f3c0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    f3c0:	b580      	push	{r7, lr}
    f3c2:	b082      	sub	sp, #8
    f3c4:	af00      	add	r7, sp, #0
    f3c6:	6078      	str	r0, [r7, #4]
	while (n--) {
    f3c8:	e004      	b.n	f3d4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    f3ca:	4b07      	ldr	r3, [pc, #28]	; (f3e8 <delay_cycles_ms+0x28>)
    f3cc:	681b      	ldr	r3, [r3, #0]
    f3ce:	0018      	movs	r0, r3
    f3d0:	4b06      	ldr	r3, [pc, #24]	; (f3ec <delay_cycles_ms+0x2c>)
    f3d2:	4798      	blx	r3
	while (n--) {
    f3d4:	687b      	ldr	r3, [r7, #4]
    f3d6:	1e5a      	subs	r2, r3, #1
    f3d8:	607a      	str	r2, [r7, #4]
    f3da:	2b00      	cmp	r3, #0
    f3dc:	d1f5      	bne.n	f3ca <delay_cycles_ms+0xa>
	}
}
    f3de:	46c0      	nop			; (mov r8, r8)
    f3e0:	46bd      	mov	sp, r7
    f3e2:	b002      	add	sp, #8
    f3e4:	bd80      	pop	{r7, pc}
    f3e6:	46c0      	nop			; (mov r8, r8)
    f3e8:	20000110 	.word	0x20000110
    f3ec:	0000f335 	.word	0x0000f335

0000f3f0 <system_pinmux_get_group_from_gpio_pin>:
{
    f3f0:	b580      	push	{r7, lr}
    f3f2:	b084      	sub	sp, #16
    f3f4:	af00      	add	r7, sp, #0
    f3f6:	0002      	movs	r2, r0
    f3f8:	1dfb      	adds	r3, r7, #7
    f3fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    f3fc:	230f      	movs	r3, #15
    f3fe:	18fb      	adds	r3, r7, r3
    f400:	1dfa      	adds	r2, r7, #7
    f402:	7812      	ldrb	r2, [r2, #0]
    f404:	09d2      	lsrs	r2, r2, #7
    f406:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    f408:	230e      	movs	r3, #14
    f40a:	18fb      	adds	r3, r7, r3
    f40c:	1dfa      	adds	r2, r7, #7
    f40e:	7812      	ldrb	r2, [r2, #0]
    f410:	0952      	lsrs	r2, r2, #5
    f412:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    f414:	4b0d      	ldr	r3, [pc, #52]	; (f44c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    f416:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    f418:	230f      	movs	r3, #15
    f41a:	18fb      	adds	r3, r7, r3
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	2b00      	cmp	r3, #0
    f420:	d10f      	bne.n	f442 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    f422:	230f      	movs	r3, #15
    f424:	18fb      	adds	r3, r7, r3
    f426:	781b      	ldrb	r3, [r3, #0]
    f428:	009b      	lsls	r3, r3, #2
    f42a:	2210      	movs	r2, #16
    f42c:	4694      	mov	ip, r2
    f42e:	44bc      	add	ip, r7
    f430:	4463      	add	r3, ip
    f432:	3b08      	subs	r3, #8
    f434:	681a      	ldr	r2, [r3, #0]
    f436:	230e      	movs	r3, #14
    f438:	18fb      	adds	r3, r7, r3
    f43a:	781b      	ldrb	r3, [r3, #0]
    f43c:	01db      	lsls	r3, r3, #7
    f43e:	18d3      	adds	r3, r2, r3
    f440:	e000      	b.n	f444 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    f442:	2300      	movs	r3, #0
}
    f444:	0018      	movs	r0, r3
    f446:	46bd      	mov	sp, r7
    f448:	b004      	add	sp, #16
    f44a:	bd80      	pop	{r7, pc}
    f44c:	41004400 	.word	0x41004400

0000f450 <system_interrupt_enable_global>:
{
    f450:	b580      	push	{r7, lr}
    f452:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    f454:	4b04      	ldr	r3, [pc, #16]	; (f468 <system_interrupt_enable_global+0x18>)
    f456:	2201      	movs	r2, #1
    f458:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    f45a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f45e:	b662      	cpsie	i
}
    f460:	46c0      	nop			; (mov r8, r8)
    f462:	46bd      	mov	sp, r7
    f464:	bd80      	pop	{r7, pc}
    f466:	46c0      	nop			; (mov r8, r8)
    f468:	2000011a 	.word	0x2000011a

0000f46c <port_get_group_from_gpio_pin>:
{
    f46c:	b580      	push	{r7, lr}
    f46e:	b082      	sub	sp, #8
    f470:	af00      	add	r7, sp, #0
    f472:	0002      	movs	r2, r0
    f474:	1dfb      	adds	r3, r7, #7
    f476:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    f478:	1dfb      	adds	r3, r7, #7
    f47a:	781b      	ldrb	r3, [r3, #0]
    f47c:	0018      	movs	r0, r3
    f47e:	4b03      	ldr	r3, [pc, #12]	; (f48c <port_get_group_from_gpio_pin+0x20>)
    f480:	4798      	blx	r3
    f482:	0003      	movs	r3, r0
}
    f484:	0018      	movs	r0, r3
    f486:	46bd      	mov	sp, r7
    f488:	b002      	add	sp, #8
    f48a:	bd80      	pop	{r7, pc}
    f48c:	0000f3f1 	.word	0x0000f3f1

0000f490 <port_get_config_defaults>:
{
    f490:	b580      	push	{r7, lr}
    f492:	b082      	sub	sp, #8
    f494:	af00      	add	r7, sp, #0
    f496:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    f498:	687b      	ldr	r3, [r7, #4]
    f49a:	2200      	movs	r2, #0
    f49c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    f49e:	687b      	ldr	r3, [r7, #4]
    f4a0:	2201      	movs	r2, #1
    f4a2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    f4a4:	687b      	ldr	r3, [r7, #4]
    f4a6:	2200      	movs	r2, #0
    f4a8:	709a      	strb	r2, [r3, #2]
}
    f4aa:	46c0      	nop			; (mov r8, r8)
    f4ac:	46bd      	mov	sp, r7
    f4ae:	b002      	add	sp, #8
    f4b0:	bd80      	pop	{r7, pc}
	...

0000f4b4 <port_pin_set_output_level>:
{
    f4b4:	b580      	push	{r7, lr}
    f4b6:	b084      	sub	sp, #16
    f4b8:	af00      	add	r7, sp, #0
    f4ba:	0002      	movs	r2, r0
    f4bc:	1dfb      	adds	r3, r7, #7
    f4be:	701a      	strb	r2, [r3, #0]
    f4c0:	1dbb      	adds	r3, r7, #6
    f4c2:	1c0a      	adds	r2, r1, #0
    f4c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    f4c6:	1dfb      	adds	r3, r7, #7
    f4c8:	781b      	ldrb	r3, [r3, #0]
    f4ca:	0018      	movs	r0, r3
    f4cc:	4b0d      	ldr	r3, [pc, #52]	; (f504 <port_pin_set_output_level+0x50>)
    f4ce:	4798      	blx	r3
    f4d0:	0003      	movs	r3, r0
    f4d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f4d4:	1dfb      	adds	r3, r7, #7
    f4d6:	781b      	ldrb	r3, [r3, #0]
    f4d8:	221f      	movs	r2, #31
    f4da:	4013      	ands	r3, r2
    f4dc:	2201      	movs	r2, #1
    f4de:	409a      	lsls	r2, r3
    f4e0:	0013      	movs	r3, r2
    f4e2:	60bb      	str	r3, [r7, #8]
	if (level) {
    f4e4:	1dbb      	adds	r3, r7, #6
    f4e6:	781b      	ldrb	r3, [r3, #0]
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d003      	beq.n	f4f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    f4ec:	68fb      	ldr	r3, [r7, #12]
    f4ee:	68ba      	ldr	r2, [r7, #8]
    f4f0:	619a      	str	r2, [r3, #24]
}
    f4f2:	e002      	b.n	f4fa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    f4f4:	68fb      	ldr	r3, [r7, #12]
    f4f6:	68ba      	ldr	r2, [r7, #8]
    f4f8:	615a      	str	r2, [r3, #20]
}
    f4fa:	46c0      	nop			; (mov r8, r8)
    f4fc:	46bd      	mov	sp, r7
    f4fe:	b004      	add	sp, #16
    f500:	bd80      	pop	{r7, pc}
    f502:	46c0      	nop			; (mov r8, r8)
    f504:	0000f46d 	.word	0x0000f46d

0000f508 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    f508:	b580      	push	{r7, lr}
    f50a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    f50c:	4b04      	ldr	r3, [pc, #16]	; (f520 <chip_isr+0x18>)
    f50e:	681b      	ldr	r3, [r3, #0]
    f510:	2b00      	cmp	r3, #0
    f512:	d002      	beq.n	f51a <chip_isr+0x12>
		gpfIsr();
    f514:	4b02      	ldr	r3, [pc, #8]	; (f520 <chip_isr+0x18>)
    f516:	681b      	ldr	r3, [r3, #0]
    f518:	4798      	blx	r3
	}
}
    f51a:	46c0      	nop			; (mov r8, r8)
    f51c:	46bd      	mov	sp, r7
    f51e:	bd80      	pop	{r7, pc}
    f520:	20003ed8 	.word	0x20003ed8

0000f524 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    f524:	b580      	push	{r7, lr}
    f526:	b082      	sub	sp, #8
    f528:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    f52a:	1d3b      	adds	r3, r7, #4
    f52c:	0018      	movs	r0, r3
    f52e:	4b10      	ldr	r3, [pc, #64]	; (f570 <init_chip_pins+0x4c>)
    f530:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f532:	1d3b      	adds	r3, r7, #4
    f534:	2201      	movs	r2, #1
    f536:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    f538:	1d3b      	adds	r3, r7, #4
    f53a:	0019      	movs	r1, r3
    f53c:	201b      	movs	r0, #27
    f53e:	4b0d      	ldr	r3, [pc, #52]	; (f574 <init_chip_pins+0x50>)
    f540:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    f542:	1d3b      	adds	r3, r7, #4
    f544:	0019      	movs	r1, r3
    f546:	201c      	movs	r0, #28
    f548:	4b0a      	ldr	r3, [pc, #40]	; (f574 <init_chip_pins+0x50>)
    f54a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    f54c:	1d3b      	adds	r3, r7, #4
    f54e:	0019      	movs	r1, r3
    f550:	2028      	movs	r0, #40	; 0x28
    f552:	4b08      	ldr	r3, [pc, #32]	; (f574 <init_chip_pins+0x50>)
    f554:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    f556:	2100      	movs	r1, #0
    f558:	201c      	movs	r0, #28
    f55a:	4b07      	ldr	r3, [pc, #28]	; (f578 <init_chip_pins+0x54>)
    f55c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    f55e:	2100      	movs	r1, #0
    f560:	201b      	movs	r0, #27
    f562:	4b05      	ldr	r3, [pc, #20]	; (f578 <init_chip_pins+0x54>)
    f564:	4798      	blx	r3
}
    f566:	46c0      	nop			; (mov r8, r8)
    f568:	46bd      	mov	sp, r7
    f56a:	b002      	add	sp, #8
    f56c:	bd80      	pop	{r7, pc}
    f56e:	46c0      	nop			; (mov r8, r8)
    f570:	0000f491 	.word	0x0000f491
    f574:	00015cb1 	.word	0x00015cb1
    f578:	0000f4b5 	.word	0x0000f4b5

0000f57c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    f57c:	b580      	push	{r7, lr}
    f57e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    f580:	4b0b      	ldr	r3, [pc, #44]	; (f5b0 <nm_bsp_init+0x34>)
    f582:	2200      	movs	r2, #0
    f584:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    f586:	4b0b      	ldr	r3, [pc, #44]	; (f5b4 <nm_bsp_init+0x38>)
    f588:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    f58a:	4b0b      	ldr	r3, [pc, #44]	; (f5b8 <nm_bsp_init+0x3c>)
    f58c:	681b      	ldr	r3, [r3, #0]
    f58e:	2201      	movs	r2, #1
    f590:	4013      	ands	r3, r2
    f592:	d004      	beq.n	f59e <nm_bsp_init+0x22>
    f594:	4b08      	ldr	r3, [pc, #32]	; (f5b8 <nm_bsp_init+0x3c>)
    f596:	681b      	ldr	r3, [r3, #0]
    f598:	2202      	movs	r2, #2
    f59a:	4013      	ands	r3, r2
    f59c:	d101      	bne.n	f5a2 <nm_bsp_init+0x26>
	    delay_init();
    f59e:	4b07      	ldr	r3, [pc, #28]	; (f5bc <nm_bsp_init+0x40>)
    f5a0:	4798      	blx	r3
    }

	system_interrupt_enable_global();
    f5a2:	4b07      	ldr	r3, [pc, #28]	; (f5c0 <nm_bsp_init+0x44>)
    f5a4:	4798      	blx	r3

	return M2M_SUCCESS;
    f5a6:	2300      	movs	r3, #0
}
    f5a8:	0018      	movs	r0, r3
    f5aa:	46bd      	mov	sp, r7
    f5ac:	bd80      	pop	{r7, pc}
    f5ae:	46c0      	nop			; (mov r8, r8)
    f5b0:	20003ed8 	.word	0x20003ed8
    f5b4:	0000f525 	.word	0x0000f525
    f5b8:	e000e010 	.word	0xe000e010
    f5bc:	0000f369 	.word	0x0000f369
    f5c0:	0000f451 	.word	0x0000f451

0000f5c4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    f5c4:	b580      	push	{r7, lr}
    f5c6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    f5c8:	2100      	movs	r1, #0
    f5ca:	201c      	movs	r0, #28
    f5cc:	4b0b      	ldr	r3, [pc, #44]	; (f5fc <nm_bsp_reset+0x38>)
    f5ce:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    f5d0:	2100      	movs	r1, #0
    f5d2:	201b      	movs	r0, #27
    f5d4:	4b09      	ldr	r3, [pc, #36]	; (f5fc <nm_bsp_reset+0x38>)
    f5d6:	4798      	blx	r3
	nm_bsp_sleep(1);
    f5d8:	2001      	movs	r0, #1
    f5da:	4b09      	ldr	r3, [pc, #36]	; (f600 <nm_bsp_reset+0x3c>)
    f5dc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    f5de:	2101      	movs	r1, #1
    f5e0:	201c      	movs	r0, #28
    f5e2:	4b06      	ldr	r3, [pc, #24]	; (f5fc <nm_bsp_reset+0x38>)
    f5e4:	4798      	blx	r3
	nm_bsp_sleep(10);
    f5e6:	200a      	movs	r0, #10
    f5e8:	4b05      	ldr	r3, [pc, #20]	; (f600 <nm_bsp_reset+0x3c>)
    f5ea:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    f5ec:	2101      	movs	r1, #1
    f5ee:	201b      	movs	r0, #27
    f5f0:	4b02      	ldr	r3, [pc, #8]	; (f5fc <nm_bsp_reset+0x38>)
    f5f2:	4798      	blx	r3
}
    f5f4:	46c0      	nop			; (mov r8, r8)
    f5f6:	46bd      	mov	sp, r7
    f5f8:	bd80      	pop	{r7, pc}
    f5fa:	46c0      	nop			; (mov r8, r8)
    f5fc:	0000f4b5 	.word	0x0000f4b5
    f600:	0000f605 	.word	0x0000f605

0000f604 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    f604:	b580      	push	{r7, lr}
    f606:	b082      	sub	sp, #8
    f608:	af00      	add	r7, sp, #0
    f60a:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
    f60c:	687b      	ldr	r3, [r7, #4]
    f60e:	0018      	movs	r0, r3
    f610:	4b02      	ldr	r3, [pc, #8]	; (f61c <nm_bsp_sleep+0x18>)
    f612:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
    f614:	46c0      	nop			; (mov r8, r8)
    f616:	46bd      	mov	sp, r7
    f618:	b002      	add	sp, #8
    f61a:	bd80      	pop	{r7, pc}
    f61c:	0000b3b5 	.word	0x0000b3b5

0000f620 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    f620:	b580      	push	{r7, lr}
    f622:	b086      	sub	sp, #24
    f624:	af00      	add	r7, sp, #0
    f626:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    f628:	4b15      	ldr	r3, [pc, #84]	; (f680 <nm_bsp_register_isr+0x60>)
    f62a:	687a      	ldr	r2, [r7, #4]
    f62c:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    f62e:	230c      	movs	r3, #12
    f630:	18fb      	adds	r3, r7, r3
    f632:	0018      	movs	r0, r3
    f634:	4b13      	ldr	r3, [pc, #76]	; (f684 <nm_bsp_register_isr+0x64>)
    f636:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    f638:	230c      	movs	r3, #12
    f63a:	18fb      	adds	r3, r7, r3
    f63c:	2229      	movs	r2, #41	; 0x29
    f63e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    f640:	230c      	movs	r3, #12
    f642:	18fb      	adds	r3, r7, r3
    f644:	2200      	movs	r2, #0
    f646:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    f648:	230c      	movs	r3, #12
    f64a:	18fb      	adds	r3, r7, r3
    f64c:	2201      	movs	r2, #1
    f64e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    f650:	230c      	movs	r3, #12
    f652:	18fb      	adds	r3, r7, r3
    f654:	2202      	movs	r2, #2
    f656:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    f658:	230c      	movs	r3, #12
    f65a:	18fb      	adds	r3, r7, r3
    f65c:	0019      	movs	r1, r3
    f65e:	2009      	movs	r0, #9
    f660:	4b09      	ldr	r3, [pc, #36]	; (f688 <nm_bsp_register_isr+0x68>)
    f662:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    f664:	4b09      	ldr	r3, [pc, #36]	; (f68c <nm_bsp_register_isr+0x6c>)
    f666:	2200      	movs	r2, #0
    f668:	2109      	movs	r1, #9
    f66a:	0018      	movs	r0, r3
    f66c:	4b08      	ldr	r3, [pc, #32]	; (f690 <nm_bsp_register_isr+0x70>)
    f66e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    f670:	2100      	movs	r1, #0
    f672:	2009      	movs	r0, #9
    f674:	4b07      	ldr	r3, [pc, #28]	; (f694 <nm_bsp_register_isr+0x74>)
    f676:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    f678:	46c0      	nop			; (mov r8, r8)
    f67a:	46bd      	mov	sp, r7
    f67c:	b006      	add	sp, #24
    f67e:	bd80      	pop	{r7, pc}
    f680:	20003ed8 	.word	0x20003ed8
    f684:	00015b59 	.word	0x00015b59
    f688:	00015b8d 	.word	0x00015b8d
    f68c:	0000f509 	.word	0x0000f509
    f690:	00015759 	.word	0x00015759
    f694:	000157bd 	.word	0x000157bd

0000f698 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    f698:	b580      	push	{r7, lr}
    f69a:	b082      	sub	sp, #8
    f69c:	af00      	add	r7, sp, #0
    f69e:	0002      	movs	r2, r0
    f6a0:	1dfb      	adds	r3, r7, #7
    f6a2:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    f6a4:	1dfb      	adds	r3, r7, #7
    f6a6:	781b      	ldrb	r3, [r3, #0]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d004      	beq.n	f6b6 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    f6ac:	2100      	movs	r1, #0
    f6ae:	2009      	movs	r0, #9
    f6b0:	4b05      	ldr	r3, [pc, #20]	; (f6c8 <nm_bsp_interrupt_ctrl+0x30>)
    f6b2:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    f6b4:	e003      	b.n	f6be <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    f6b6:	2100      	movs	r1, #0
    f6b8:	2009      	movs	r0, #9
    f6ba:	4b04      	ldr	r3, [pc, #16]	; (f6cc <nm_bsp_interrupt_ctrl+0x34>)
    f6bc:	4798      	blx	r3
}
    f6be:	46c0      	nop			; (mov r8, r8)
    f6c0:	46bd      	mov	sp, r7
    f6c2:	b002      	add	sp, #8
    f6c4:	bd80      	pop	{r7, pc}
    f6c6:	46c0      	nop			; (mov r8, r8)
    f6c8:	000157bd 	.word	0x000157bd
    f6cc:	00015805 	.word	0x00015805

0000f6d0 <system_pinmux_get_group_from_gpio_pin>:
{
    f6d0:	b580      	push	{r7, lr}
    f6d2:	b084      	sub	sp, #16
    f6d4:	af00      	add	r7, sp, #0
    f6d6:	0002      	movs	r2, r0
    f6d8:	1dfb      	adds	r3, r7, #7
    f6da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    f6dc:	230f      	movs	r3, #15
    f6de:	18fb      	adds	r3, r7, r3
    f6e0:	1dfa      	adds	r2, r7, #7
    f6e2:	7812      	ldrb	r2, [r2, #0]
    f6e4:	09d2      	lsrs	r2, r2, #7
    f6e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    f6e8:	230e      	movs	r3, #14
    f6ea:	18fb      	adds	r3, r7, r3
    f6ec:	1dfa      	adds	r2, r7, #7
    f6ee:	7812      	ldrb	r2, [r2, #0]
    f6f0:	0952      	lsrs	r2, r2, #5
    f6f2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    f6f4:	4b0d      	ldr	r3, [pc, #52]	; (f72c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    f6f6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    f6f8:	230f      	movs	r3, #15
    f6fa:	18fb      	adds	r3, r7, r3
    f6fc:	781b      	ldrb	r3, [r3, #0]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d10f      	bne.n	f722 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    f702:	230f      	movs	r3, #15
    f704:	18fb      	adds	r3, r7, r3
    f706:	781b      	ldrb	r3, [r3, #0]
    f708:	009b      	lsls	r3, r3, #2
    f70a:	2210      	movs	r2, #16
    f70c:	4694      	mov	ip, r2
    f70e:	44bc      	add	ip, r7
    f710:	4463      	add	r3, ip
    f712:	3b08      	subs	r3, #8
    f714:	681a      	ldr	r2, [r3, #0]
    f716:	230e      	movs	r3, #14
    f718:	18fb      	adds	r3, r7, r3
    f71a:	781b      	ldrb	r3, [r3, #0]
    f71c:	01db      	lsls	r3, r3, #7
    f71e:	18d3      	adds	r3, r2, r3
    f720:	e000      	b.n	f724 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    f722:	2300      	movs	r3, #0
}
    f724:	0018      	movs	r0, r3
    f726:	46bd      	mov	sp, r7
    f728:	b004      	add	sp, #16
    f72a:	bd80      	pop	{r7, pc}
    f72c:	41004400 	.word	0x41004400

0000f730 <system_interrupt_enable>:
{
    f730:	b580      	push	{r7, lr}
    f732:	b082      	sub	sp, #8
    f734:	af00      	add	r7, sp, #0
    f736:	0002      	movs	r2, r0
    f738:	1dfb      	adds	r3, r7, #7
    f73a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f73c:	4b06      	ldr	r3, [pc, #24]	; (f758 <system_interrupt_enable+0x28>)
    f73e:	1dfa      	adds	r2, r7, #7
    f740:	7812      	ldrb	r2, [r2, #0]
    f742:	0011      	movs	r1, r2
    f744:	221f      	movs	r2, #31
    f746:	400a      	ands	r2, r1
    f748:	2101      	movs	r1, #1
    f74a:	4091      	lsls	r1, r2
    f74c:	000a      	movs	r2, r1
    f74e:	601a      	str	r2, [r3, #0]
}
    f750:	46c0      	nop			; (mov r8, r8)
    f752:	46bd      	mov	sp, r7
    f754:	b002      	add	sp, #8
    f756:	bd80      	pop	{r7, pc}
    f758:	e000e100 	.word	0xe000e100

0000f75c <system_interrupt_disable>:
{
    f75c:	b580      	push	{r7, lr}
    f75e:	b082      	sub	sp, #8
    f760:	af00      	add	r7, sp, #0
    f762:	0002      	movs	r2, r0
    f764:	1dfb      	adds	r3, r7, #7
    f766:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f768:	4a07      	ldr	r2, [pc, #28]	; (f788 <system_interrupt_disable+0x2c>)
    f76a:	1dfb      	adds	r3, r7, #7
    f76c:	781b      	ldrb	r3, [r3, #0]
    f76e:	0019      	movs	r1, r3
    f770:	231f      	movs	r3, #31
    f772:	400b      	ands	r3, r1
    f774:	2101      	movs	r1, #1
    f776:	4099      	lsls	r1, r3
    f778:	000b      	movs	r3, r1
    f77a:	0019      	movs	r1, r3
    f77c:	2380      	movs	r3, #128	; 0x80
    f77e:	50d1      	str	r1, [r2, r3]
}
    f780:	46c0      	nop			; (mov r8, r8)
    f782:	46bd      	mov	sp, r7
    f784:	b002      	add	sp, #8
    f786:	bd80      	pop	{r7, pc}
    f788:	e000e100 	.word	0xe000e100

0000f78c <port_get_group_from_gpio_pin>:
{
    f78c:	b580      	push	{r7, lr}
    f78e:	b082      	sub	sp, #8
    f790:	af00      	add	r7, sp, #0
    f792:	0002      	movs	r2, r0
    f794:	1dfb      	adds	r3, r7, #7
    f796:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    f798:	1dfb      	adds	r3, r7, #7
    f79a:	781b      	ldrb	r3, [r3, #0]
    f79c:	0018      	movs	r0, r3
    f79e:	4b03      	ldr	r3, [pc, #12]	; (f7ac <port_get_group_from_gpio_pin+0x20>)
    f7a0:	4798      	blx	r3
    f7a2:	0003      	movs	r3, r0
}
    f7a4:	0018      	movs	r0, r3
    f7a6:	46bd      	mov	sp, r7
    f7a8:	b002      	add	sp, #8
    f7aa:	bd80      	pop	{r7, pc}
    f7ac:	0000f6d1 	.word	0x0000f6d1

0000f7b0 <port_get_config_defaults>:
{
    f7b0:	b580      	push	{r7, lr}
    f7b2:	b082      	sub	sp, #8
    f7b4:	af00      	add	r7, sp, #0
    f7b6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    f7b8:	687b      	ldr	r3, [r7, #4]
    f7ba:	2200      	movs	r2, #0
    f7bc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    f7be:	687b      	ldr	r3, [r7, #4]
    f7c0:	2201      	movs	r2, #1
    f7c2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    f7c4:	687b      	ldr	r3, [r7, #4]
    f7c6:	2200      	movs	r2, #0
    f7c8:	709a      	strb	r2, [r3, #2]
}
    f7ca:	46c0      	nop			; (mov r8, r8)
    f7cc:	46bd      	mov	sp, r7
    f7ce:	b002      	add	sp, #8
    f7d0:	bd80      	pop	{r7, pc}
	...

0000f7d4 <port_pin_set_output_level>:
{
    f7d4:	b580      	push	{r7, lr}
    f7d6:	b084      	sub	sp, #16
    f7d8:	af00      	add	r7, sp, #0
    f7da:	0002      	movs	r2, r0
    f7dc:	1dfb      	adds	r3, r7, #7
    f7de:	701a      	strb	r2, [r3, #0]
    f7e0:	1dbb      	adds	r3, r7, #6
    f7e2:	1c0a      	adds	r2, r1, #0
    f7e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    f7e6:	1dfb      	adds	r3, r7, #7
    f7e8:	781b      	ldrb	r3, [r3, #0]
    f7ea:	0018      	movs	r0, r3
    f7ec:	4b0d      	ldr	r3, [pc, #52]	; (f824 <port_pin_set_output_level+0x50>)
    f7ee:	4798      	blx	r3
    f7f0:	0003      	movs	r3, r0
    f7f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f7f4:	1dfb      	adds	r3, r7, #7
    f7f6:	781b      	ldrb	r3, [r3, #0]
    f7f8:	221f      	movs	r2, #31
    f7fa:	4013      	ands	r3, r2
    f7fc:	2201      	movs	r2, #1
    f7fe:	409a      	lsls	r2, r3
    f800:	0013      	movs	r3, r2
    f802:	60bb      	str	r3, [r7, #8]
	if (level) {
    f804:	1dbb      	adds	r3, r7, #6
    f806:	781b      	ldrb	r3, [r3, #0]
    f808:	2b00      	cmp	r3, #0
    f80a:	d003      	beq.n	f814 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    f80c:	68fb      	ldr	r3, [r7, #12]
    f80e:	68ba      	ldr	r2, [r7, #8]
    f810:	619a      	str	r2, [r3, #24]
}
    f812:	e002      	b.n	f81a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    f814:	68fb      	ldr	r3, [r7, #12]
    f816:	68ba      	ldr	r2, [r7, #8]
    f818:	615a      	str	r2, [r3, #20]
}
    f81a:	46c0      	nop			; (mov r8, r8)
    f81c:	46bd      	mov	sp, r7
    f81e:	b004      	add	sp, #16
    f820:	bd80      	pop	{r7, pc}
    f822:	46c0      	nop			; (mov r8, r8)
    f824:	0000f78d 	.word	0x0000f78d

0000f828 <spi_is_syncing>:
{
    f828:	b580      	push	{r7, lr}
    f82a:	b084      	sub	sp, #16
    f82c:	af00      	add	r7, sp, #0
    f82e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f830:	687b      	ldr	r3, [r7, #4]
    f832:	681b      	ldr	r3, [r3, #0]
    f834:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    f836:	68fb      	ldr	r3, [r7, #12]
    f838:	69db      	ldr	r3, [r3, #28]
    f83a:	1e5a      	subs	r2, r3, #1
    f83c:	4193      	sbcs	r3, r2
    f83e:	b2db      	uxtb	r3, r3
}
    f840:	0018      	movs	r0, r3
    f842:	46bd      	mov	sp, r7
    f844:	b004      	add	sp, #16
    f846:	bd80      	pop	{r7, pc}

0000f848 <spi_get_config_defaults>:
{
    f848:	b580      	push	{r7, lr}
    f84a:	b082      	sub	sp, #8
    f84c:	af00      	add	r7, sp, #0
    f84e:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    f850:	687b      	ldr	r3, [r7, #4]
    f852:	2201      	movs	r2, #1
    f854:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    f856:	687b      	ldr	r3, [r7, #4]
    f858:	2200      	movs	r2, #0
    f85a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    f85c:	687b      	ldr	r3, [r7, #4]
    f85e:	2200      	movs	r2, #0
    f860:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    f862:	687b      	ldr	r3, [r7, #4]
    f864:	22c0      	movs	r2, #192	; 0xc0
    f866:	0392      	lsls	r2, r2, #14
    f868:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    f86a:	687b      	ldr	r3, [r7, #4]
    f86c:	2200      	movs	r2, #0
    f86e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    f870:	687b      	ldr	r3, [r7, #4]
    f872:	2200      	movs	r2, #0
    f874:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    f876:	687b      	ldr	r3, [r7, #4]
    f878:	2201      	movs	r2, #1
    f87a:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    f87c:	687b      	ldr	r3, [r7, #4]
    f87e:	2201      	movs	r2, #1
    f880:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    f882:	687b      	ldr	r3, [r7, #4]
    f884:	2200      	movs	r2, #0
    f886:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    f888:	687b      	ldr	r3, [r7, #4]
    f88a:	2224      	movs	r2, #36	; 0x24
    f88c:	2100      	movs	r1, #0
    f88e:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    f890:	687b      	ldr	r3, [r7, #4]
    f892:	3318      	adds	r3, #24
    f894:	220c      	movs	r2, #12
    f896:	2100      	movs	r1, #0
    f898:	0018      	movs	r0, r3
    f89a:	4b0a      	ldr	r3, [pc, #40]	; (f8c4 <spi_get_config_defaults+0x7c>)
    f89c:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    f89e:	687b      	ldr	r3, [r7, #4]
    f8a0:	4a09      	ldr	r2, [pc, #36]	; (f8c8 <spi_get_config_defaults+0x80>)
    f8a2:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    f8a4:	687b      	ldr	r3, [r7, #4]
    f8a6:	2200      	movs	r2, #0
    f8a8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    f8aa:	687b      	ldr	r3, [r7, #4]
    f8ac:	2200      	movs	r2, #0
    f8ae:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    f8b0:	687b      	ldr	r3, [r7, #4]
    f8b2:	2200      	movs	r2, #0
    f8b4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    f8b6:	687b      	ldr	r3, [r7, #4]
    f8b8:	2200      	movs	r2, #0
    f8ba:	635a      	str	r2, [r3, #52]	; 0x34
};
    f8bc:	46c0      	nop			; (mov r8, r8)
    f8be:	46bd      	mov	sp, r7
    f8c0:	b002      	add	sp, #8
    f8c2:	bd80      	pop	{r7, pc}
    f8c4:	000247b7 	.word	0x000247b7
    f8c8:	000186a0 	.word	0x000186a0

0000f8cc <spi_slave_inst_get_config_defaults>:
{
    f8cc:	b580      	push	{r7, lr}
    f8ce:	b082      	sub	sp, #8
    f8d0:	af00      	add	r7, sp, #0
    f8d2:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    f8d4:	687b      	ldr	r3, [r7, #4]
    f8d6:	220a      	movs	r2, #10
    f8d8:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    f8da:	687b      	ldr	r3, [r7, #4]
    f8dc:	2200      	movs	r2, #0
    f8de:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    f8e0:	687b      	ldr	r3, [r7, #4]
    f8e2:	2200      	movs	r2, #0
    f8e4:	709a      	strb	r2, [r3, #2]
}
    f8e6:	46c0      	nop			; (mov r8, r8)
    f8e8:	46bd      	mov	sp, r7
    f8ea:	b002      	add	sp, #8
    f8ec:	bd80      	pop	{r7, pc}
	...

0000f8f0 <spi_attach_slave>:
{
    f8f0:	b580      	push	{r7, lr}
    f8f2:	b084      	sub	sp, #16
    f8f4:	af00      	add	r7, sp, #0
    f8f6:	6078      	str	r0, [r7, #4]
    f8f8:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    f8fa:	683b      	ldr	r3, [r7, #0]
    f8fc:	781a      	ldrb	r2, [r3, #0]
    f8fe:	687b      	ldr	r3, [r7, #4]
    f900:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    f902:	683b      	ldr	r3, [r7, #0]
    f904:	785a      	ldrb	r2, [r3, #1]
    f906:	687b      	ldr	r3, [r7, #4]
    f908:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    f90a:	683b      	ldr	r3, [r7, #0]
    f90c:	789a      	ldrb	r2, [r3, #2]
    f90e:	687b      	ldr	r3, [r7, #4]
    f910:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    f912:	230c      	movs	r3, #12
    f914:	18fb      	adds	r3, r7, r3
    f916:	0018      	movs	r0, r3
    f918:	4b0b      	ldr	r3, [pc, #44]	; (f948 <spi_attach_slave+0x58>)
    f91a:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    f91c:	230c      	movs	r3, #12
    f91e:	18fb      	adds	r3, r7, r3
    f920:	2201      	movs	r2, #1
    f922:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    f924:	687b      	ldr	r3, [r7, #4]
    f926:	781b      	ldrb	r3, [r3, #0]
    f928:	220c      	movs	r2, #12
    f92a:	18ba      	adds	r2, r7, r2
    f92c:	0011      	movs	r1, r2
    f92e:	0018      	movs	r0, r3
    f930:	4b06      	ldr	r3, [pc, #24]	; (f94c <spi_attach_slave+0x5c>)
    f932:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    f934:	687b      	ldr	r3, [r7, #4]
    f936:	781b      	ldrb	r3, [r3, #0]
    f938:	2101      	movs	r1, #1
    f93a:	0018      	movs	r0, r3
    f93c:	4b04      	ldr	r3, [pc, #16]	; (f950 <spi_attach_slave+0x60>)
    f93e:	4798      	blx	r3
}
    f940:	46c0      	nop			; (mov r8, r8)
    f942:	46bd      	mov	sp, r7
    f944:	b004      	add	sp, #16
    f946:	bd80      	pop	{r7, pc}
    f948:	0000f7b1 	.word	0x0000f7b1
    f94c:	00015cb1 	.word	0x00015cb1
    f950:	0000f7d5 	.word	0x0000f7d5

0000f954 <spi_enable>:
{
    f954:	b580      	push	{r7, lr}
    f956:	b084      	sub	sp, #16
    f958:	af00      	add	r7, sp, #0
    f95a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f95c:	687b      	ldr	r3, [r7, #4]
    f95e:	681b      	ldr	r3, [r3, #0]
    f960:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    f962:	687b      	ldr	r3, [r7, #4]
    f964:	681b      	ldr	r3, [r3, #0]
    f966:	0018      	movs	r0, r3
    f968:	4b0b      	ldr	r3, [pc, #44]	; (f998 <spi_enable+0x44>)
    f96a:	4798      	blx	r3
    f96c:	0003      	movs	r3, r0
    f96e:	0018      	movs	r0, r3
    f970:	4b0a      	ldr	r3, [pc, #40]	; (f99c <spi_enable+0x48>)
    f972:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    f974:	46c0      	nop			; (mov r8, r8)
    f976:	687b      	ldr	r3, [r7, #4]
    f978:	0018      	movs	r0, r3
    f97a:	4b09      	ldr	r3, [pc, #36]	; (f9a0 <spi_enable+0x4c>)
    f97c:	4798      	blx	r3
    f97e:	1e03      	subs	r3, r0, #0
    f980:	d1f9      	bne.n	f976 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    f982:	68fb      	ldr	r3, [r7, #12]
    f984:	681b      	ldr	r3, [r3, #0]
    f986:	2202      	movs	r2, #2
    f988:	431a      	orrs	r2, r3
    f98a:	68fb      	ldr	r3, [r7, #12]
    f98c:	601a      	str	r2, [r3, #0]
}
    f98e:	46c0      	nop			; (mov r8, r8)
    f990:	46bd      	mov	sp, r7
    f992:	b004      	add	sp, #16
    f994:	bd80      	pop	{r7, pc}
    f996:	46c0      	nop			; (mov r8, r8)
    f998:	00016981 	.word	0x00016981
    f99c:	0000f731 	.word	0x0000f731
    f9a0:	0000f829 	.word	0x0000f829

0000f9a4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    f9a4:	b580      	push	{r7, lr}
    f9a6:	b084      	sub	sp, #16
    f9a8:	af00      	add	r7, sp, #0
    f9aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    f9ac:	687b      	ldr	r3, [r7, #4]
    f9ae:	681b      	ldr	r3, [r3, #0]
    f9b0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    f9b2:	687b      	ldr	r3, [r7, #4]
    f9b4:	681b      	ldr	r3, [r3, #0]
    f9b6:	0018      	movs	r0, r3
    f9b8:	4b0e      	ldr	r3, [pc, #56]	; (f9f4 <spi_disable+0x50>)
    f9ba:	4798      	blx	r3
    f9bc:	0003      	movs	r3, r0
    f9be:	0018      	movs	r0, r3
    f9c0:	4b0d      	ldr	r3, [pc, #52]	; (f9f8 <spi_disable+0x54>)
    f9c2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    f9c4:	46c0      	nop			; (mov r8, r8)
    f9c6:	687b      	ldr	r3, [r7, #4]
    f9c8:	0018      	movs	r0, r3
    f9ca:	4b0c      	ldr	r3, [pc, #48]	; (f9fc <spi_disable+0x58>)
    f9cc:	4798      	blx	r3
    f9ce:	1e03      	subs	r3, r0, #0
    f9d0:	d1f9      	bne.n	f9c6 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    f9d2:	68fb      	ldr	r3, [r7, #12]
    f9d4:	228f      	movs	r2, #143	; 0x8f
    f9d6:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    f9d8:	68fb      	ldr	r3, [r7, #12]
    f9da:	228f      	movs	r2, #143	; 0x8f
    f9dc:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    f9de:	68fb      	ldr	r3, [r7, #12]
    f9e0:	681b      	ldr	r3, [r3, #0]
    f9e2:	2202      	movs	r2, #2
    f9e4:	4393      	bics	r3, r2
    f9e6:	001a      	movs	r2, r3
    f9e8:	68fb      	ldr	r3, [r7, #12]
    f9ea:	601a      	str	r2, [r3, #0]
}
    f9ec:	46c0      	nop			; (mov r8, r8)
    f9ee:	46bd      	mov	sp, r7
    f9f0:	b004      	add	sp, #16
    f9f2:	bd80      	pop	{r7, pc}
    f9f4:	00016981 	.word	0x00016981
    f9f8:	0000f75d 	.word	0x0000f75d
    f9fc:	0000f829 	.word	0x0000f829

0000fa00 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    fa00:	b580      	push	{r7, lr}
    fa02:	b084      	sub	sp, #16
    fa04:	af00      	add	r7, sp, #0
    fa06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fa08:	687b      	ldr	r3, [r7, #4]
    fa0a:	681b      	ldr	r3, [r3, #0]
    fa0c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    fa0e:	68fb      	ldr	r3, [r7, #12]
    fa10:	7e1b      	ldrb	r3, [r3, #24]
    fa12:	b2db      	uxtb	r3, r3
    fa14:	001a      	movs	r2, r3
    fa16:	2302      	movs	r3, #2
    fa18:	4013      	ands	r3, r2
    fa1a:	1e5a      	subs	r2, r3, #1
    fa1c:	4193      	sbcs	r3, r2
    fa1e:	b2db      	uxtb	r3, r3
}
    fa20:	0018      	movs	r0, r3
    fa22:	46bd      	mov	sp, r7
    fa24:	b004      	add	sp, #16
    fa26:	bd80      	pop	{r7, pc}

0000fa28 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    fa28:	b580      	push	{r7, lr}
    fa2a:	b084      	sub	sp, #16
    fa2c:	af00      	add	r7, sp, #0
    fa2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fa30:	687b      	ldr	r3, [r7, #4]
    fa32:	681b      	ldr	r3, [r3, #0]
    fa34:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    fa36:	68fb      	ldr	r3, [r7, #12]
    fa38:	7e1b      	ldrb	r3, [r3, #24]
    fa3a:	b2db      	uxtb	r3, r3
    fa3c:	001a      	movs	r2, r3
    fa3e:	2301      	movs	r3, #1
    fa40:	4013      	ands	r3, r2
    fa42:	1e5a      	subs	r2, r3, #1
    fa44:	4193      	sbcs	r3, r2
    fa46:	b2db      	uxtb	r3, r3
}
    fa48:	0018      	movs	r0, r3
    fa4a:	46bd      	mov	sp, r7
    fa4c:	b004      	add	sp, #16
    fa4e:	bd80      	pop	{r7, pc}

0000fa50 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    fa50:	b580      	push	{r7, lr}
    fa52:	b084      	sub	sp, #16
    fa54:	af00      	add	r7, sp, #0
    fa56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fa58:	687b      	ldr	r3, [r7, #4]
    fa5a:	681b      	ldr	r3, [r3, #0]
    fa5c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fa5e:	68fb      	ldr	r3, [r7, #12]
    fa60:	7e1b      	ldrb	r3, [r3, #24]
    fa62:	b2db      	uxtb	r3, r3
    fa64:	001a      	movs	r2, r3
    fa66:	2304      	movs	r3, #4
    fa68:	4013      	ands	r3, r2
    fa6a:	1e5a      	subs	r2, r3, #1
    fa6c:	4193      	sbcs	r3, r2
    fa6e:	b2db      	uxtb	r3, r3
}
    fa70:	0018      	movs	r0, r3
    fa72:	46bd      	mov	sp, r7
    fa74:	b004      	add	sp, #16
    fa76:	bd80      	pop	{r7, pc}

0000fa78 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    fa78:	b580      	push	{r7, lr}
    fa7a:	b084      	sub	sp, #16
    fa7c:	af00      	add	r7, sp, #0
    fa7e:	6078      	str	r0, [r7, #4]
    fa80:	000a      	movs	r2, r1
    fa82:	1cbb      	adds	r3, r7, #2
    fa84:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fa86:	687b      	ldr	r3, [r7, #4]
    fa88:	681b      	ldr	r3, [r3, #0]
    fa8a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    fa8c:	687b      	ldr	r3, [r7, #4]
    fa8e:	0018      	movs	r0, r3
    fa90:	4b0a      	ldr	r3, [pc, #40]	; (fabc <spi_write+0x44>)
    fa92:	4798      	blx	r3
    fa94:	0003      	movs	r3, r0
    fa96:	001a      	movs	r2, r3
    fa98:	2301      	movs	r3, #1
    fa9a:	4053      	eors	r3, r2
    fa9c:	b2db      	uxtb	r3, r3
    fa9e:	2b00      	cmp	r3, #0
    faa0:	d001      	beq.n	faa6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    faa2:	2305      	movs	r3, #5
    faa4:	e006      	b.n	fab4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    faa6:	1cbb      	adds	r3, r7, #2
    faa8:	881b      	ldrh	r3, [r3, #0]
    faaa:	05db      	lsls	r3, r3, #23
    faac:	0dda      	lsrs	r2, r3, #23
    faae:	68fb      	ldr	r3, [r7, #12]
    fab0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    fab2:	2300      	movs	r3, #0
}
    fab4:	0018      	movs	r0, r3
    fab6:	46bd      	mov	sp, r7
    fab8:	b004      	add	sp, #16
    faba:	bd80      	pop	{r7, pc}
    fabc:	0000fa29 	.word	0x0000fa29

0000fac0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    fac0:	b580      	push	{r7, lr}
    fac2:	b084      	sub	sp, #16
    fac4:	af00      	add	r7, sp, #0
    fac6:	6078      	str	r0, [r7, #4]
    fac8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    faca:	687b      	ldr	r3, [r7, #4]
    facc:	681b      	ldr	r3, [r3, #0]
    face:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    fad0:	687b      	ldr	r3, [r7, #4]
    fad2:	0018      	movs	r0, r3
    fad4:	4b1b      	ldr	r3, [pc, #108]	; (fb44 <spi_read+0x84>)
    fad6:	4798      	blx	r3
    fad8:	0003      	movs	r3, r0
    fada:	001a      	movs	r2, r3
    fadc:	2301      	movs	r3, #1
    fade:	4053      	eors	r3, r2
    fae0:	b2db      	uxtb	r3, r3
    fae2:	2b00      	cmp	r3, #0
    fae4:	d001      	beq.n	faea <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    fae6:	2310      	movs	r3, #16
    fae8:	e027      	b.n	fb3a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    faea:	230f      	movs	r3, #15
    faec:	18fb      	adds	r3, r7, r3
    faee:	2200      	movs	r2, #0
    faf0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    faf2:	68bb      	ldr	r3, [r7, #8]
    faf4:	8b5b      	ldrh	r3, [r3, #26]
    faf6:	b29b      	uxth	r3, r3
    faf8:	001a      	movs	r2, r3
    fafa:	2304      	movs	r3, #4
    fafc:	4013      	ands	r3, r2
    fafe:	d006      	beq.n	fb0e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    fb00:	230f      	movs	r3, #15
    fb02:	18fb      	adds	r3, r7, r3
    fb04:	221e      	movs	r2, #30
    fb06:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fb08:	68bb      	ldr	r3, [r7, #8]
    fb0a:	2204      	movs	r2, #4
    fb0c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fb0e:	687b      	ldr	r3, [r7, #4]
    fb10:	799b      	ldrb	r3, [r3, #6]
    fb12:	2b01      	cmp	r3, #1
    fb14:	d108      	bne.n	fb28 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    fb16:	68bb      	ldr	r3, [r7, #8]
    fb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fb1a:	b29b      	uxth	r3, r3
    fb1c:	05db      	lsls	r3, r3, #23
    fb1e:	0ddb      	lsrs	r3, r3, #23
    fb20:	b29a      	uxth	r2, r3
    fb22:	683b      	ldr	r3, [r7, #0]
    fb24:	801a      	strh	r2, [r3, #0]
    fb26:	e005      	b.n	fb34 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    fb28:	68bb      	ldr	r3, [r7, #8]
    fb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fb2c:	b2db      	uxtb	r3, r3
    fb2e:	b29a      	uxth	r2, r3
    fb30:	683b      	ldr	r3, [r7, #0]
    fb32:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    fb34:	230f      	movs	r3, #15
    fb36:	18fb      	adds	r3, r7, r3
    fb38:	781b      	ldrb	r3, [r3, #0]
}
    fb3a:	0018      	movs	r0, r3
    fb3c:	46bd      	mov	sp, r7
    fb3e:	b004      	add	sp, #16
    fb40:	bd80      	pop	{r7, pc}
    fb42:	46c0      	nop			; (mov r8, r8)
    fb44:	0000fa51 	.word	0x0000fa51

0000fb48 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    fb48:	b580      	push	{r7, lr}
    fb4a:	b086      	sub	sp, #24
    fb4c:	af00      	add	r7, sp, #0
    fb4e:	60f8      	str	r0, [r7, #12]
    fb50:	60b9      	str	r1, [r7, #8]
    fb52:	1dbb      	adds	r3, r7, #6
    fb54:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
    fb56:	2313      	movs	r3, #19
    fb58:	18fb      	adds	r3, r7, r3
    fb5a:	22ff      	movs	r2, #255	; 0xff
    fb5c:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    fb5e:	2317      	movs	r3, #23
    fb60:	18fb      	adds	r3, r7, r3
    fb62:	2200      	movs	r2, #0
    fb64:	701a      	strb	r2, [r3, #0]
    fb66:	2316      	movs	r3, #22
    fb68:	18fb      	adds	r3, r7, r3
    fb6a:	2200      	movs	r2, #0
    fb6c:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    fb6e:	2314      	movs	r3, #20
    fb70:	18fb      	adds	r3, r7, r3
    fb72:	2200      	movs	r2, #0
    fb74:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    fb76:	2310      	movs	r3, #16
    fb78:	18fb      	adds	r3, r7, r3
    fb7a:	2200      	movs	r2, #0
    fb7c:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    fb7e:	68bb      	ldr	r3, [r7, #8]
    fb80:	2b00      	cmp	r3, #0
    fb82:	d102      	bne.n	fb8a <spi_rw+0x42>
    fb84:	68fb      	ldr	r3, [r7, #12]
    fb86:	2b00      	cmp	r3, #0
    fb88:	d003      	beq.n	fb92 <spi_rw+0x4a>
    fb8a:	1dbb      	adds	r3, r7, #6
    fb8c:	881b      	ldrh	r3, [r3, #0]
    fb8e:	2b00      	cmp	r3, #0
    fb90:	d102      	bne.n	fb98 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    fb92:	230f      	movs	r3, #15
    fb94:	425b      	negs	r3, r3
    fb96:	e07e      	b.n	fc96 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    fb98:	68fb      	ldr	r3, [r7, #12]
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d106      	bne.n	fbac <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    fb9e:	2313      	movs	r3, #19
    fba0:	18fb      	adds	r3, r7, r3
    fba2:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    fba4:	2317      	movs	r3, #23
    fba6:	18fb      	adds	r3, r7, r3
    fba8:	2201      	movs	r2, #1
    fbaa:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    fbac:	68bb      	ldr	r3, [r7, #8]
    fbae:	2b00      	cmp	r3, #0
    fbb0:	d106      	bne.n	fbc0 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    fbb2:	2313      	movs	r3, #19
    fbb4:	18fb      	adds	r3, r7, r3
    fbb6:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    fbb8:	2316      	movs	r3, #22
    fbba:	18fb      	adds	r3, r7, r3
    fbbc:	2201      	movs	r2, #1
    fbbe:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    fbc0:	4937      	ldr	r1, [pc, #220]	; (fca0 <spi_rw+0x158>)
    fbc2:	4b38      	ldr	r3, [pc, #224]	; (fca4 <spi_rw+0x15c>)
    fbc4:	2201      	movs	r2, #1
    fbc6:	0018      	movs	r0, r3
    fbc8:	4b37      	ldr	r3, [pc, #220]	; (fca8 <spi_rw+0x160>)
    fbca:	4798      	blx	r3

	while (u16Sz) {
    fbcc:	e04c      	b.n	fc68 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    fbce:	68fb      	ldr	r3, [r7, #12]
    fbd0:	781a      	ldrb	r2, [r3, #0]
    fbd2:	2314      	movs	r3, #20
    fbd4:	18fb      	adds	r3, r7, r3
    fbd6:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    fbd8:	46c0      	nop			; (mov r8, r8)
    fbda:	4b32      	ldr	r3, [pc, #200]	; (fca4 <spi_rw+0x15c>)
    fbdc:	0018      	movs	r0, r3
    fbde:	4b33      	ldr	r3, [pc, #204]	; (fcac <spi_rw+0x164>)
    fbe0:	4798      	blx	r3
    fbe2:	0003      	movs	r3, r0
    fbe4:	001a      	movs	r2, r3
    fbe6:	2301      	movs	r3, #1
    fbe8:	4053      	eors	r3, r2
    fbea:	b2db      	uxtb	r3, r3
    fbec:	2b00      	cmp	r3, #0
    fbee:	d1f4      	bne.n	fbda <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    fbf0:	46c0      	nop			; (mov r8, r8)
    fbf2:	2314      	movs	r3, #20
    fbf4:	18fb      	adds	r3, r7, r3
    fbf6:	881a      	ldrh	r2, [r3, #0]
    fbf8:	4b2a      	ldr	r3, [pc, #168]	; (fca4 <spi_rw+0x15c>)
    fbfa:	0011      	movs	r1, r2
    fbfc:	0018      	movs	r0, r3
    fbfe:	4b2c      	ldr	r3, [pc, #176]	; (fcb0 <spi_rw+0x168>)
    fc00:	4798      	blx	r3
    fc02:	1e03      	subs	r3, r0, #0
    fc04:	d1f5      	bne.n	fbf2 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    fc06:	46c0      	nop			; (mov r8, r8)
    fc08:	4b26      	ldr	r3, [pc, #152]	; (fca4 <spi_rw+0x15c>)
    fc0a:	0018      	movs	r0, r3
    fc0c:	4b29      	ldr	r3, [pc, #164]	; (fcb4 <spi_rw+0x16c>)
    fc0e:	4798      	blx	r3
    fc10:	0003      	movs	r3, r0
    fc12:	001a      	movs	r2, r3
    fc14:	2301      	movs	r3, #1
    fc16:	4053      	eors	r3, r2
    fc18:	b2db      	uxtb	r3, r3
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d1f4      	bne.n	fc08 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    fc1e:	46c0      	nop			; (mov r8, r8)
    fc20:	2310      	movs	r3, #16
    fc22:	18fa      	adds	r2, r7, r3
    fc24:	4b1f      	ldr	r3, [pc, #124]	; (fca4 <spi_rw+0x15c>)
    fc26:	0011      	movs	r1, r2
    fc28:	0018      	movs	r0, r3
    fc2a:	4b23      	ldr	r3, [pc, #140]	; (fcb8 <spi_rw+0x170>)
    fc2c:	4798      	blx	r3
    fc2e:	1e03      	subs	r3, r0, #0
    fc30:	d1f6      	bne.n	fc20 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    fc32:	2310      	movs	r3, #16
    fc34:	18fb      	adds	r3, r7, r3
    fc36:	881b      	ldrh	r3, [r3, #0]
    fc38:	b2da      	uxtb	r2, r3
    fc3a:	68bb      	ldr	r3, [r7, #8]
    fc3c:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    fc3e:	1dbb      	adds	r3, r7, #6
    fc40:	881a      	ldrh	r2, [r3, #0]
    fc42:	1dbb      	adds	r3, r7, #6
    fc44:	3a01      	subs	r2, #1
    fc46:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    fc48:	2316      	movs	r3, #22
    fc4a:	18fb      	adds	r3, r7, r3
    fc4c:	781b      	ldrb	r3, [r3, #0]
    fc4e:	2b00      	cmp	r3, #0
    fc50:	d102      	bne.n	fc58 <spi_rw+0x110>
			pu8Miso++;
    fc52:	68bb      	ldr	r3, [r7, #8]
    fc54:	3301      	adds	r3, #1
    fc56:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    fc58:	2317      	movs	r3, #23
    fc5a:	18fb      	adds	r3, r7, r3
    fc5c:	781b      	ldrb	r3, [r3, #0]
    fc5e:	2b00      	cmp	r3, #0
    fc60:	d102      	bne.n	fc68 <spi_rw+0x120>
			pu8Mosi++;
    fc62:	68fb      	ldr	r3, [r7, #12]
    fc64:	3301      	adds	r3, #1
    fc66:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    fc68:	1dbb      	adds	r3, r7, #6
    fc6a:	881b      	ldrh	r3, [r3, #0]
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d1ae      	bne.n	fbce <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    fc70:	46c0      	nop			; (mov r8, r8)
    fc72:	4b0c      	ldr	r3, [pc, #48]	; (fca4 <spi_rw+0x15c>)
    fc74:	0018      	movs	r0, r3
    fc76:	4b11      	ldr	r3, [pc, #68]	; (fcbc <spi_rw+0x174>)
    fc78:	4798      	blx	r3
    fc7a:	0003      	movs	r3, r0
    fc7c:	001a      	movs	r2, r3
    fc7e:	2301      	movs	r3, #1
    fc80:	4053      	eors	r3, r2
    fc82:	b2db      	uxtb	r3, r3
    fc84:	2b00      	cmp	r3, #0
    fc86:	d1f4      	bne.n	fc72 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    fc88:	4905      	ldr	r1, [pc, #20]	; (fca0 <spi_rw+0x158>)
    fc8a:	4b06      	ldr	r3, [pc, #24]	; (fca4 <spi_rw+0x15c>)
    fc8c:	2200      	movs	r2, #0
    fc8e:	0018      	movs	r0, r3
    fc90:	4b05      	ldr	r3, [pc, #20]	; (fca8 <spi_rw+0x160>)
    fc92:	4798      	blx	r3

	return M2M_SUCCESS;
    fc94:	2300      	movs	r3, #0
}
    fc96:	0018      	movs	r0, r3
    fc98:	46bd      	mov	sp, r7
    fc9a:	b006      	add	sp, #24
    fc9c:	bd80      	pop	{r7, pc}
    fc9e:	46c0      	nop			; (mov r8, r8)
    fca0:	20005714 	.word	0x20005714
    fca4:	20005718 	.word	0x20005718
    fca8:	000173f5 	.word	0x000173f5
    fcac:	0000fa29 	.word	0x0000fa29
    fcb0:	0000fa79 	.word	0x0000fa79
    fcb4:	0000fa51 	.word	0x0000fa51
    fcb8:	0000fac1 	.word	0x0000fac1
    fcbc:	0000fa01 	.word	0x0000fa01

0000fcc0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    fcc0:	b580      	push	{r7, lr}
    fcc2:	b092      	sub	sp, #72	; 0x48
    fcc4:	af00      	add	r7, sp, #0
    fcc6:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    fcc8:	2347      	movs	r3, #71	; 0x47
    fcca:	18fb      	adds	r3, r7, r3
    fccc:	2200      	movs	r2, #0
    fcce:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    fcd0:	2308      	movs	r3, #8
    fcd2:	18fb      	adds	r3, r7, r3
    fcd4:	0018      	movs	r0, r3
    fcd6:	4b26      	ldr	r3, [pc, #152]	; (fd70 <nm_bus_init+0xb0>)
    fcd8:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    fcda:	2308      	movs	r3, #8
    fcdc:	18fb      	adds	r3, r7, r3
    fcde:	220e      	movs	r2, #14
    fce0:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    fce2:	2308      	movs	r3, #8
    fce4:	18fa      	adds	r2, r7, r3
    fce6:	4b23      	ldr	r3, [pc, #140]	; (fd74 <nm_bus_init+0xb4>)
    fce8:	0011      	movs	r1, r2
    fcea:	0018      	movs	r0, r3
    fcec:	4b22      	ldr	r3, [pc, #136]	; (fd78 <nm_bus_init+0xb8>)
    fcee:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    fcf0:	230c      	movs	r3, #12
    fcf2:	18fb      	adds	r3, r7, r3
    fcf4:	0018      	movs	r0, r3
    fcf6:	4b21      	ldr	r3, [pc, #132]	; (fd7c <nm_bus_init+0xbc>)
    fcf8:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    fcfa:	230c      	movs	r3, #12
    fcfc:	18fb      	adds	r3, r7, r3
    fcfe:	22c0      	movs	r2, #192	; 0xc0
    fd00:	0392      	lsls	r2, r2, #14
    fd02:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    fd04:	230c      	movs	r3, #12
    fd06:	18fb      	adds	r3, r7, r3
    fd08:	4a1d      	ldr	r2, [pc, #116]	; (fd80 <nm_bus_init+0xc0>)
    fd0a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    fd0c:	230c      	movs	r3, #12
    fd0e:	18fb      	adds	r3, r7, r3
    fd10:	4a1c      	ldr	r2, [pc, #112]	; (fd84 <nm_bus_init+0xc4>)
    fd12:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    fd14:	230c      	movs	r3, #12
    fd16:	18fb      	adds	r3, r7, r3
    fd18:	2201      	movs	r2, #1
    fd1a:	4252      	negs	r2, r2
    fd1c:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    fd1e:	230c      	movs	r3, #12
    fd20:	18fb      	adds	r3, r7, r3
    fd22:	4a19      	ldr	r2, [pc, #100]	; (fd88 <nm_bus_init+0xc8>)
    fd24:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    fd26:	230c      	movs	r3, #12
    fd28:	18fb      	adds	r3, r7, r3
    fd2a:	2200      	movs	r2, #0
    fd2c:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    fd2e:	230c      	movs	r3, #12
    fd30:	18fb      	adds	r3, r7, r3
    fd32:	4a16      	ldr	r2, [pc, #88]	; (fd8c <nm_bus_init+0xcc>)
    fd34:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    fd36:	230c      	movs	r3, #12
    fd38:	18fa      	adds	r2, r7, r3
    fd3a:	4915      	ldr	r1, [pc, #84]	; (fd90 <nm_bus_init+0xd0>)
    fd3c:	4b15      	ldr	r3, [pc, #84]	; (fd94 <nm_bus_init+0xd4>)
    fd3e:	0018      	movs	r0, r3
    fd40:	4b15      	ldr	r3, [pc, #84]	; (fd98 <nm_bus_init+0xd8>)
    fd42:	4798      	blx	r3
    fd44:	1e03      	subs	r3, r0, #0
    fd46:	d002      	beq.n	fd4e <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    fd48:	2306      	movs	r3, #6
    fd4a:	425b      	negs	r3, r3
    fd4c:	e00c      	b.n	fd68 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    fd4e:	4b11      	ldr	r3, [pc, #68]	; (fd94 <nm_bus_init+0xd4>)
    fd50:	0018      	movs	r0, r3
    fd52:	4b12      	ldr	r3, [pc, #72]	; (fd9c <nm_bus_init+0xdc>)
    fd54:	4798      	blx	r3

	nm_bsp_reset();
    fd56:	4b12      	ldr	r3, [pc, #72]	; (fda0 <nm_bus_init+0xe0>)
    fd58:	4798      	blx	r3
	nm_bsp_sleep(1);
    fd5a:	2001      	movs	r0, #1
    fd5c:	4b11      	ldr	r3, [pc, #68]	; (fda4 <nm_bus_init+0xe4>)
    fd5e:	4798      	blx	r3
#endif
	return result;
    fd60:	2347      	movs	r3, #71	; 0x47
    fd62:	18fb      	adds	r3, r7, r3
    fd64:	781b      	ldrb	r3, [r3, #0]
    fd66:	b25b      	sxtb	r3, r3
}
    fd68:	0018      	movs	r0, r3
    fd6a:	46bd      	mov	sp, r7
    fd6c:	b012      	add	sp, #72	; 0x48
    fd6e:	bd80      	pop	{r7, pc}
    fd70:	0000f8cd 	.word	0x0000f8cd
    fd74:	20005714 	.word	0x20005714
    fd78:	0000f8f1 	.word	0x0000f8f1
    fd7c:	0000f849 	.word	0x0000f849
    fd80:	000c0002 	.word	0x000c0002
    fd84:	000d0002 	.word	0x000d0002
    fd88:	000f0002 	.word	0x000f0002
    fd8c:	00124f80 	.word	0x00124f80
    fd90:	42001000 	.word	0x42001000
    fd94:	20005718 	.word	0x20005718
    fd98:	00017131 	.word	0x00017131
    fd9c:	0000f955 	.word	0x0000f955
    fda0:	0000f5c5 	.word	0x0000f5c5
    fda4:	0000f605 	.word	0x0000f605

0000fda8 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    fda8:	b590      	push	{r4, r7, lr}
    fdaa:	b085      	sub	sp, #20
    fdac:	af00      	add	r7, sp, #0
    fdae:	0002      	movs	r2, r0
    fdb0:	6039      	str	r1, [r7, #0]
    fdb2:	1dfb      	adds	r3, r7, #7
    fdb4:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    fdb6:	230f      	movs	r3, #15
    fdb8:	18fb      	adds	r3, r7, r3
    fdba:	2200      	movs	r2, #0
    fdbc:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    fdbe:	1dfb      	adds	r3, r7, #7
    fdc0:	781b      	ldrb	r3, [r3, #0]
    fdc2:	2b03      	cmp	r3, #3
    fdc4:	d10f      	bne.n	fde6 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    fdc6:	683b      	ldr	r3, [r7, #0]
    fdc8:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    fdca:	68bb      	ldr	r3, [r7, #8]
    fdcc:	6818      	ldr	r0, [r3, #0]
    fdce:	68bb      	ldr	r3, [r7, #8]
    fdd0:	6859      	ldr	r1, [r3, #4]
    fdd2:	68bb      	ldr	r3, [r7, #8]
    fdd4:	891b      	ldrh	r3, [r3, #8]
    fdd6:	220f      	movs	r2, #15
    fdd8:	18bc      	adds	r4, r7, r2
    fdda:	001a      	movs	r2, r3
    fddc:	4b10      	ldr	r3, [pc, #64]	; (fe20 <nm_bus_ioctl+0x78>)
    fdde:	4798      	blx	r3
    fde0:	0003      	movs	r3, r0
    fde2:	7023      	strb	r3, [r4, #0]
		}
		break;
    fde4:	e013      	b.n	fe0e <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    fde6:	230f      	movs	r3, #15
    fde8:	18fb      	adds	r3, r7, r3
    fdea:	22ff      	movs	r2, #255	; 0xff
    fdec:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    fdee:	2383      	movs	r3, #131	; 0x83
    fdf0:	005a      	lsls	r2, r3, #1
    fdf2:	490c      	ldr	r1, [pc, #48]	; (fe24 <nm_bus_ioctl+0x7c>)
    fdf4:	4b0c      	ldr	r3, [pc, #48]	; (fe28 <nm_bus_ioctl+0x80>)
    fdf6:	0018      	movs	r0, r3
    fdf8:	4b0c      	ldr	r3, [pc, #48]	; (fe2c <nm_bus_ioctl+0x84>)
    fdfa:	4798      	blx	r3
    fdfc:	4b0c      	ldr	r3, [pc, #48]	; (fe30 <nm_bus_ioctl+0x88>)
    fdfe:	0018      	movs	r0, r3
    fe00:	4b0a      	ldr	r3, [pc, #40]	; (fe2c <nm_bus_ioctl+0x84>)
    fe02:	4798      	blx	r3
    fe04:	4b0b      	ldr	r3, [pc, #44]	; (fe34 <nm_bus_ioctl+0x8c>)
    fe06:	0018      	movs	r0, r3
    fe08:	4b08      	ldr	r3, [pc, #32]	; (fe2c <nm_bus_ioctl+0x84>)
    fe0a:	4798      	blx	r3
			break;
    fe0c:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    fe0e:	230f      	movs	r3, #15
    fe10:	18fb      	adds	r3, r7, r3
    fe12:	781b      	ldrb	r3, [r3, #0]
    fe14:	b25b      	sxtb	r3, r3
}
    fe16:	0018      	movs	r0, r3
    fe18:	46bd      	mov	sp, r7
    fe1a:	b005      	add	sp, #20
    fe1c:	bd90      	pop	{r4, r7, pc}
    fe1e:	46c0      	nop			; (mov r8, r8)
    fe20:	0000fb49 	.word	0x0000fb49
    fe24:	000281c0 	.word	0x000281c0
    fe28:	00028194 	.word	0x00028194
    fe2c:	0000d14d 	.word	0x0000d14d
    fe30:	000281a8 	.word	0x000281a8
    fe34:	000281bc 	.word	0x000281bc

0000fe38 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    fe38:	b580      	push	{r7, lr}
    fe3a:	b082      	sub	sp, #8
    fe3c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    fe3e:	1dfb      	adds	r3, r7, #7
    fe40:	2200      	movs	r2, #0
    fe42:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    fe44:	1d3b      	adds	r3, r7, #4
    fe46:	0018      	movs	r0, r3
    fe48:	4b13      	ldr	r3, [pc, #76]	; (fe98 <nm_bus_deinit+0x60>)
    fe4a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    fe4c:	1d3b      	adds	r3, r7, #4
    fe4e:	2200      	movs	r2, #0
    fe50:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    fe52:	1d3b      	adds	r3, r7, #4
    fe54:	2200      	movs	r2, #0
    fe56:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    fe58:	4b10      	ldr	r3, [pc, #64]	; (fe9c <nm_bus_deinit+0x64>)
    fe5a:	0018      	movs	r0, r3
    fe5c:	4b10      	ldr	r3, [pc, #64]	; (fea0 <nm_bus_deinit+0x68>)
    fe5e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    fe60:	1d3b      	adds	r3, r7, #4
    fe62:	0019      	movs	r1, r3
    fe64:	200c      	movs	r0, #12
    fe66:	4b0f      	ldr	r3, [pc, #60]	; (fea4 <nm_bus_deinit+0x6c>)
    fe68:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    fe6a:	1d3b      	adds	r3, r7, #4
    fe6c:	0019      	movs	r1, r3
    fe6e:	200f      	movs	r0, #15
    fe70:	4b0c      	ldr	r3, [pc, #48]	; (fea4 <nm_bus_deinit+0x6c>)
    fe72:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    fe74:	1d3b      	adds	r3, r7, #4
    fe76:	0019      	movs	r1, r3
    fe78:	200d      	movs	r0, #13
    fe7a:	4b0a      	ldr	r3, [pc, #40]	; (fea4 <nm_bus_deinit+0x6c>)
    fe7c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    fe7e:	1d3b      	adds	r3, r7, #4
    fe80:	0019      	movs	r1, r3
    fe82:	200e      	movs	r0, #14
    fe84:	4b07      	ldr	r3, [pc, #28]	; (fea4 <nm_bus_deinit+0x6c>)
    fe86:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    fe88:	1dfb      	adds	r3, r7, #7
    fe8a:	781b      	ldrb	r3, [r3, #0]
    fe8c:	b25b      	sxtb	r3, r3
}
    fe8e:	0018      	movs	r0, r3
    fe90:	46bd      	mov	sp, r7
    fe92:	b002      	add	sp, #8
    fe94:	bd80      	pop	{r7, pc}
    fe96:	46c0      	nop			; (mov r8, r8)
    fe98:	0000f7b1 	.word	0x0000f7b1
    fe9c:	20005718 	.word	0x20005718
    fea0:	0000f9a5 	.word	0x0000f9a5
    fea4:	00015cb1 	.word	0x00015cb1

0000fea8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    fea8:	b580      	push	{r7, lr}
    feaa:	b084      	sub	sp, #16
    feac:	af00      	add	r7, sp, #0
    feae:	60f8      	str	r0, [r7, #12]
    feb0:	60b9      	str	r1, [r7, #8]
    feb2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    feb4:	687b      	ldr	r3, [r7, #4]
    feb6:	2b00      	cmp	r3, #0
    feb8:	d010      	beq.n	fedc <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    feba:	68bb      	ldr	r3, [r7, #8]
    febc:	781a      	ldrb	r2, [r3, #0]
    febe:	68fb      	ldr	r3, [r7, #12]
    fec0:	701a      	strb	r2, [r3, #0]
		pDst++;
    fec2:	68fb      	ldr	r3, [r7, #12]
    fec4:	3301      	adds	r3, #1
    fec6:	60fb      	str	r3, [r7, #12]
		pSrc++;
    fec8:	68bb      	ldr	r3, [r7, #8]
    feca:	3301      	adds	r3, #1
    fecc:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    fece:	687b      	ldr	r3, [r7, #4]
    fed0:	3b01      	subs	r3, #1
    fed2:	607b      	str	r3, [r7, #4]
    fed4:	687b      	ldr	r3, [r7, #4]
    fed6:	2b00      	cmp	r3, #0
    fed8:	d1ef      	bne.n	feba <m2m_memcpy+0x12>
    feda:	e000      	b.n	fede <m2m_memcpy+0x36>
	if(sz == 0) return;
    fedc:	46c0      	nop			; (mov r8, r8)
}
    fede:	46bd      	mov	sp, r7
    fee0:	b004      	add	sp, #16
    fee2:	bd80      	pop	{r7, pc}

0000fee4 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    fee4:	b580      	push	{r7, lr}
    fee6:	b084      	sub	sp, #16
    fee8:	af00      	add	r7, sp, #0
    feea:	60f8      	str	r0, [r7, #12]
    feec:	607a      	str	r2, [r7, #4]
    feee:	230b      	movs	r3, #11
    fef0:	18fb      	adds	r3, r7, r3
    fef2:	1c0a      	adds	r2, r1, #0
    fef4:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    fef6:	687b      	ldr	r3, [r7, #4]
    fef8:	2b00      	cmp	r3, #0
    fefa:	d00e      	beq.n	ff1a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    fefc:	68fb      	ldr	r3, [r7, #12]
    fefe:	220b      	movs	r2, #11
    ff00:	18ba      	adds	r2, r7, r2
    ff02:	7812      	ldrb	r2, [r2, #0]
    ff04:	701a      	strb	r2, [r3, #0]
		pBuf++;
    ff06:	68fb      	ldr	r3, [r7, #12]
    ff08:	3301      	adds	r3, #1
    ff0a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    ff0c:	687b      	ldr	r3, [r7, #4]
    ff0e:	3b01      	subs	r3, #1
    ff10:	607b      	str	r3, [r7, #4]
    ff12:	687b      	ldr	r3, [r7, #4]
    ff14:	2b00      	cmp	r3, #0
    ff16:	d1f1      	bne.n	fefc <m2m_memset+0x18>
    ff18:	e000      	b.n	ff1c <m2m_memset+0x38>
	if(sz == 0) return;
    ff1a:	46c0      	nop			; (mov r8, r8)
}
    ff1c:	46bd      	mov	sp, r7
    ff1e:	b004      	add	sp, #16
    ff20:	bd80      	pop	{r7, pc}

0000ff22 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    ff22:	b580      	push	{r7, lr}
    ff24:	b084      	sub	sp, #16
    ff26:	af00      	add	r7, sp, #0
    ff28:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    ff2a:	230e      	movs	r3, #14
    ff2c:	18fb      	adds	r3, r7, r3
    ff2e:	2200      	movs	r2, #0
    ff30:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    ff32:	e009      	b.n	ff48 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    ff34:	230e      	movs	r3, #14
    ff36:	18fb      	adds	r3, r7, r3
    ff38:	881a      	ldrh	r2, [r3, #0]
    ff3a:	230e      	movs	r3, #14
    ff3c:	18fb      	adds	r3, r7, r3
    ff3e:	3201      	adds	r2, #1
    ff40:	801a      	strh	r2, [r3, #0]
		pcStr++;
    ff42:	687b      	ldr	r3, [r7, #4]
    ff44:	3301      	adds	r3, #1
    ff46:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    ff48:	687b      	ldr	r3, [r7, #4]
    ff4a:	781b      	ldrb	r3, [r3, #0]
    ff4c:	2b00      	cmp	r3, #0
    ff4e:	d1f1      	bne.n	ff34 <m2m_strlen+0x12>
	}
	return u16StrLen;
    ff50:	230e      	movs	r3, #14
    ff52:	18fb      	adds	r3, r7, r3
    ff54:	881b      	ldrh	r3, [r3, #0]
}
    ff56:	0018      	movs	r0, r3
    ff58:	46bd      	mov	sp, r7
    ff5a:	b004      	add	sp, #16
    ff5c:	bd80      	pop	{r7, pc}
	...

0000ff60 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
    ff60:	b580      	push	{r7, lr}
    ff62:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    ff64:	4b04      	ldr	r3, [pc, #16]	; (ff78 <isr+0x18>)
    ff66:	78db      	ldrb	r3, [r3, #3]
    ff68:	b2db      	uxtb	r3, r3
    ff6a:	3301      	adds	r3, #1
    ff6c:	b2da      	uxtb	r2, r3
    ff6e:	4b02      	ldr	r3, [pc, #8]	; (ff78 <isr+0x18>)
    ff70:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    ff72:	46c0      	nop			; (mov r8, r8)
    ff74:	46bd      	mov	sp, r7
    ff76:	bd80      	pop	{r7, pc}
    ff78:	20005754 	.word	0x20005754

0000ff7c <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    ff7c:	b590      	push	{r4, r7, lr}
    ff7e:	b083      	sub	sp, #12
    ff80:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    ff82:	1dfb      	adds	r3, r7, #7
    ff84:	2200      	movs	r2, #0
    ff86:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    ff88:	4b14      	ldr	r3, [pc, #80]	; (ffdc <hif_set_rx_done+0x60>)
    ff8a:	2200      	movs	r2, #0
    ff8c:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    ff8e:	2001      	movs	r0, #1
    ff90:	4b13      	ldr	r3, [pc, #76]	; (ffe0 <hif_set_rx_done+0x64>)
    ff92:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    ff94:	1dfc      	adds	r4, r7, #7
    ff96:	003b      	movs	r3, r7
    ff98:	4a12      	ldr	r2, [pc, #72]	; (ffe4 <hif_set_rx_done+0x68>)
    ff9a:	0019      	movs	r1, r3
    ff9c:	0010      	movs	r0, r2
    ff9e:	4b12      	ldr	r3, [pc, #72]	; (ffe8 <hif_set_rx_done+0x6c>)
    ffa0:	4798      	blx	r3
    ffa2:	0003      	movs	r3, r0
    ffa4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    ffa6:	1dfb      	adds	r3, r7, #7
    ffa8:	781b      	ldrb	r3, [r3, #0]
    ffaa:	b25b      	sxtb	r3, r3
    ffac:	2b00      	cmp	r3, #0
    ffae:	d10d      	bne.n	ffcc <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    ffb0:	683b      	ldr	r3, [r7, #0]
    ffb2:	2202      	movs	r2, #2
    ffb4:	4313      	orrs	r3, r2
    ffb6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    ffb8:	683b      	ldr	r3, [r7, #0]
    ffba:	1dfc      	adds	r4, r7, #7
    ffbc:	4a09      	ldr	r2, [pc, #36]	; (ffe4 <hif_set_rx_done+0x68>)
    ffbe:	0019      	movs	r1, r3
    ffc0:	0010      	movs	r0, r2
    ffc2:	4b0a      	ldr	r3, [pc, #40]	; (ffec <hif_set_rx_done+0x70>)
    ffc4:	4798      	blx	r3
    ffc6:	0003      	movs	r3, r0
    ffc8:	7023      	strb	r3, [r4, #0]
    ffca:	e000      	b.n	ffce <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    ffcc:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    ffce:	1dfb      	adds	r3, r7, #7
    ffd0:	781b      	ldrb	r3, [r3, #0]
    ffd2:	b25b      	sxtb	r3, r3

}
    ffd4:	0018      	movs	r0, r3
    ffd6:	46bd      	mov	sp, r7
    ffd8:	b003      	add	sp, #12
    ffda:	bd90      	pop	{r4, r7, pc}
    ffdc:	20005754 	.word	0x20005754
    ffe0:	0000f699 	.word	0x0000f699
    ffe4:	00001070 	.word	0x00001070
    ffe8:	00011f75 	.word	0x00011f75
    ffec:	00011f99 	.word	0x00011f99

0000fff0 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    fff0:	b580      	push	{r7, lr}
    fff2:	b082      	sub	sp, #8
    fff4:	af00      	add	r7, sp, #0
    fff6:	603a      	str	r2, [r7, #0]
    fff8:	1dfb      	adds	r3, r7, #7
    fffa:	1c02      	adds	r2, r0, #0
    fffc:	701a      	strb	r2, [r3, #0]
    fffe:	1d3b      	adds	r3, r7, #4
   10000:	1c0a      	adds	r2, r1, #0
   10002:	801a      	strh	r2, [r3, #0]


}
   10004:	46c0      	nop			; (mov r8, r8)
   10006:	46bd      	mov	sp, r7
   10008:	b002      	add	sp, #8
   1000a:	bd80      	pop	{r7, pc}

0001000c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1000c:	b590      	push	{r4, r7, lr}
   1000e:	b083      	sub	sp, #12
   10010:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   10012:	1dfb      	adds	r3, r7, #7
   10014:	2200      	movs	r2, #0
   10016:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   10018:	4b16      	ldr	r3, [pc, #88]	; (10074 <hif_chip_wake+0x68>)
   1001a:	789b      	ldrb	r3, [r3, #2]
   1001c:	b2db      	uxtb	r3, r3
   1001e:	2b00      	cmp	r3, #0
   10020:	d003      	beq.n	1002a <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   10022:	1dfb      	adds	r3, r7, #7
   10024:	781b      	ldrb	r3, [r3, #0]
   10026:	b25b      	sxtb	r3, r3
   10028:	e01f      	b.n	1006a <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1002a:	4b12      	ldr	r3, [pc, #72]	; (10074 <hif_chip_wake+0x68>)
   1002c:	785b      	ldrb	r3, [r3, #1]
   1002e:	b2db      	uxtb	r3, r3
   10030:	2b00      	cmp	r3, #0
   10032:	d10e      	bne.n	10052 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   10034:	4b0f      	ldr	r3, [pc, #60]	; (10074 <hif_chip_wake+0x68>)
   10036:	781b      	ldrb	r3, [r3, #0]
   10038:	b2db      	uxtb	r3, r3
   1003a:	2b00      	cmp	r3, #0
   1003c:	d009      	beq.n	10052 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1003e:	1dfc      	adds	r4, r7, #7
   10040:	4b0d      	ldr	r3, [pc, #52]	; (10078 <hif_chip_wake+0x6c>)
   10042:	4798      	blx	r3
   10044:	0003      	movs	r3, r0
   10046:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   10048:	1dfb      	adds	r3, r7, #7
   1004a:	781b      	ldrb	r3, [r3, #0]
   1004c:	b25b      	sxtb	r3, r3
   1004e:	2b00      	cmp	r3, #0
   10050:	d107      	bne.n	10062 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   10052:	4b08      	ldr	r3, [pc, #32]	; (10074 <hif_chip_wake+0x68>)
   10054:	785b      	ldrb	r3, [r3, #1]
   10056:	b2db      	uxtb	r3, r3
   10058:	3301      	adds	r3, #1
   1005a:	b2da      	uxtb	r2, r3
   1005c:	4b05      	ldr	r3, [pc, #20]	; (10074 <hif_chip_wake+0x68>)
   1005e:	705a      	strb	r2, [r3, #1]
   10060:	e000      	b.n	10064 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   10062:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   10064:	1dfb      	adds	r3, r7, #7
   10066:	781b      	ldrb	r3, [r3, #0]
   10068:	b25b      	sxtb	r3, r3
}
   1006a:	0018      	movs	r0, r3
   1006c:	46bd      	mov	sp, r7
   1006e:	b003      	add	sp, #12
   10070:	bd90      	pop	{r4, r7, pc}
   10072:	46c0      	nop			; (mov r8, r8)
   10074:	20005754 	.word	0x20005754
   10078:	00011a45 	.word	0x00011a45

0001007c <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1007c:	b580      	push	{r7, lr}
   1007e:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   10080:	4b07      	ldr	r3, [pc, #28]	; (100a0 <hif_chip_sleep_sc+0x24>)
   10082:	785b      	ldrb	r3, [r3, #1]
   10084:	b2db      	uxtb	r3, r3
   10086:	2b00      	cmp	r3, #0
   10088:	d006      	beq.n	10098 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1008a:	4b05      	ldr	r3, [pc, #20]	; (100a0 <hif_chip_sleep_sc+0x24>)
   1008c:	785b      	ldrb	r3, [r3, #1]
   1008e:	b2db      	uxtb	r3, r3
   10090:	3b01      	subs	r3, #1
   10092:	b2da      	uxtb	r2, r3
   10094:	4b02      	ldr	r3, [pc, #8]	; (100a0 <hif_chip_sleep_sc+0x24>)
   10096:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   10098:	2300      	movs	r3, #0
}
   1009a:	0018      	movs	r0, r3
   1009c:	46bd      	mov	sp, r7
   1009e:	bd80      	pop	{r7, pc}
   100a0:	20005754 	.word	0x20005754

000100a4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   100a4:	b590      	push	{r4, r7, lr}
   100a6:	b083      	sub	sp, #12
   100a8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   100aa:	1dfb      	adds	r3, r7, #7
   100ac:	2200      	movs	r2, #0
   100ae:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   100b0:	4b10      	ldr	r3, [pc, #64]	; (100f4 <hif_chip_sleep+0x50>)
   100b2:	785b      	ldrb	r3, [r3, #1]
   100b4:	b2db      	uxtb	r3, r3
   100b6:	2b00      	cmp	r3, #0
   100b8:	d006      	beq.n	100c8 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   100ba:	4b0e      	ldr	r3, [pc, #56]	; (100f4 <hif_chip_sleep+0x50>)
   100bc:	785b      	ldrb	r3, [r3, #1]
   100be:	b2db      	uxtb	r3, r3
   100c0:	3b01      	subs	r3, #1
   100c2:	b2da      	uxtb	r2, r3
   100c4:	4b0b      	ldr	r3, [pc, #44]	; (100f4 <hif_chip_sleep+0x50>)
   100c6:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   100c8:	4b0a      	ldr	r3, [pc, #40]	; (100f4 <hif_chip_sleep+0x50>)
   100ca:	785b      	ldrb	r3, [r3, #1]
   100cc:	b2db      	uxtb	r3, r3
   100ce:	2b00      	cmp	r3, #0
   100d0:	d109      	bne.n	100e6 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   100d2:	4b08      	ldr	r3, [pc, #32]	; (100f4 <hif_chip_sleep+0x50>)
   100d4:	781b      	ldrb	r3, [r3, #0]
   100d6:	b2db      	uxtb	r3, r3
   100d8:	2b00      	cmp	r3, #0
   100da:	d004      	beq.n	100e6 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   100dc:	1dfc      	adds	r4, r7, #7
   100de:	4b06      	ldr	r3, [pc, #24]	; (100f8 <hif_chip_sleep+0x54>)
   100e0:	4798      	blx	r3
   100e2:	0003      	movs	r3, r0
   100e4:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   100e6:	1dfb      	adds	r3, r7, #7
   100e8:	781b      	ldrb	r3, [r3, #0]
   100ea:	b25b      	sxtb	r3, r3
}
   100ec:	0018      	movs	r0, r3
   100ee:	46bd      	mov	sp, r7
   100f0:	b003      	add	sp, #12
   100f2:	bd90      	pop	{r4, r7, pc}
   100f4:	20005754 	.word	0x20005754
   100f8:	0001196d 	.word	0x0001196d

000100fc <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   100fc:	b580      	push	{r7, lr}
   100fe:	b082      	sub	sp, #8
   10100:	af00      	add	r7, sp, #0
   10102:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   10104:	4b09      	ldr	r3, [pc, #36]	; (1012c <hif_init+0x30>)
   10106:	222c      	movs	r2, #44	; 0x2c
   10108:	2100      	movs	r1, #0
   1010a:	0018      	movs	r0, r3
   1010c:	4b08      	ldr	r3, [pc, #32]	; (10130 <hif_init+0x34>)
   1010e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   10110:	4b08      	ldr	r3, [pc, #32]	; (10134 <hif_init+0x38>)
   10112:	0018      	movs	r0, r3
   10114:	4b08      	ldr	r3, [pc, #32]	; (10138 <hif_init+0x3c>)
   10116:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   10118:	4b08      	ldr	r3, [pc, #32]	; (1013c <hif_init+0x40>)
   1011a:	0019      	movs	r1, r3
   1011c:	2003      	movs	r0, #3
   1011e:	4b08      	ldr	r3, [pc, #32]	; (10140 <hif_init+0x44>)
   10120:	4798      	blx	r3
	return M2M_SUCCESS;
   10122:	2300      	movs	r3, #0
}
   10124:	0018      	movs	r0, r3
   10126:	46bd      	mov	sp, r7
   10128:	b002      	add	sp, #8
   1012a:	bd80      	pop	{r7, pc}
   1012c:	20005754 	.word	0x20005754
   10130:	0000fee5 	.word	0x0000fee5
   10134:	0000ff61 	.word	0x0000ff61
   10138:	0000f621 	.word	0x0000f621
   1013c:	0000fff1 	.word	0x0000fff1
   10140:	00010be1 	.word	0x00010be1

00010144 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   10144:	b590      	push	{r4, r7, lr}
   10146:	b089      	sub	sp, #36	; 0x24
   10148:	af00      	add	r7, sp, #0
   1014a:	0004      	movs	r4, r0
   1014c:	0008      	movs	r0, r1
   1014e:	603a      	str	r2, [r7, #0]
   10150:	0019      	movs	r1, r3
   10152:	1dfb      	adds	r3, r7, #7
   10154:	1c22      	adds	r2, r4, #0
   10156:	701a      	strb	r2, [r3, #0]
   10158:	1dbb      	adds	r3, r7, #6
   1015a:	1c02      	adds	r2, r0, #0
   1015c:	701a      	strb	r2, [r3, #0]
   1015e:	1d3b      	adds	r3, r7, #4
   10160:	1c0a      	adds	r2, r1, #0
   10162:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   10164:	231f      	movs	r3, #31
   10166:	18fb      	adds	r3, r7, r3
   10168:	22ff      	movs	r2, #255	; 0xff
   1016a:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1016c:	1dbb      	adds	r3, r7, #6
   1016e:	781b      	ldrb	r3, [r3, #0]
   10170:	227f      	movs	r2, #127	; 0x7f
   10172:	4013      	ands	r3, r2
   10174:	b2da      	uxtb	r2, r3
   10176:	2318      	movs	r3, #24
   10178:	18fb      	adds	r3, r7, r3
   1017a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1017c:	2318      	movs	r3, #24
   1017e:	18fb      	adds	r3, r7, r3
   10180:	1dfa      	adds	r2, r7, #7
   10182:	7812      	ldrb	r2, [r2, #0]
   10184:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   10186:	2318      	movs	r3, #24
   10188:	18fb      	adds	r3, r7, r3
   1018a:	2208      	movs	r2, #8
   1018c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1018e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10190:	2b00      	cmp	r3, #0
   10192:	d011      	beq.n	101b8 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   10194:	2318      	movs	r3, #24
   10196:	18fb      	adds	r3, r7, r3
   10198:	885b      	ldrh	r3, [r3, #2]
   1019a:	b29a      	uxth	r2, r3
   1019c:	2338      	movs	r3, #56	; 0x38
   1019e:	18f9      	adds	r1, r7, r3
   101a0:	2334      	movs	r3, #52	; 0x34
   101a2:	18fb      	adds	r3, r7, r3
   101a4:	8809      	ldrh	r1, [r1, #0]
   101a6:	881b      	ldrh	r3, [r3, #0]
   101a8:	18cb      	adds	r3, r1, r3
   101aa:	b29b      	uxth	r3, r3
   101ac:	18d3      	adds	r3, r2, r3
   101ae:	b29a      	uxth	r2, r3
   101b0:	2318      	movs	r3, #24
   101b2:	18fb      	adds	r3, r7, r3
   101b4:	805a      	strh	r2, [r3, #2]
   101b6:	e00a      	b.n	101ce <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   101b8:	2318      	movs	r3, #24
   101ba:	18fb      	adds	r3, r7, r3
   101bc:	885b      	ldrh	r3, [r3, #2]
   101be:	b29a      	uxth	r2, r3
   101c0:	1d3b      	adds	r3, r7, #4
   101c2:	881b      	ldrh	r3, [r3, #0]
   101c4:	18d3      	adds	r3, r2, r3
   101c6:	b29a      	uxth	r2, r3
   101c8:	2318      	movs	r3, #24
   101ca:	18fb      	adds	r3, r7, r3
   101cc:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   101ce:	231f      	movs	r3, #31
   101d0:	18fc      	adds	r4, r7, r3
   101d2:	4bb2      	ldr	r3, [pc, #712]	; (1049c <hif_send+0x358>)
   101d4:	4798      	blx	r3
   101d6:	0003      	movs	r3, r0
   101d8:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   101da:	231f      	movs	r3, #31
   101dc:	18fb      	adds	r3, r7, r3
   101de:	781b      	ldrb	r3, [r3, #0]
   101e0:	b25b      	sxtb	r3, r3
   101e2:	2b00      	cmp	r3, #0
   101e4:	d000      	beq.n	101e8 <hif_send+0xa4>
   101e6:	e129      	b.n	1043c <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   101e8:	2300      	movs	r3, #0
   101ea:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   101ec:	230e      	movs	r3, #14
   101ee:	18fb      	adds	r3, r7, r3
   101f0:	2200      	movs	r2, #0
   101f2:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   101f4:	2300      	movs	r3, #0
   101f6:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   101f8:	1dfb      	adds	r3, r7, #7
   101fa:	781a      	ldrb	r2, [r3, #0]
   101fc:	697b      	ldr	r3, [r7, #20]
   101fe:	4313      	orrs	r3, r2
   10200:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   10202:	1dbb      	adds	r3, r7, #6
   10204:	781b      	ldrb	r3, [r3, #0]
   10206:	021a      	lsls	r2, r3, #8
   10208:	697b      	ldr	r3, [r7, #20]
   1020a:	4313      	orrs	r3, r2
   1020c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   1020e:	2318      	movs	r3, #24
   10210:	18fb      	adds	r3, r7, r3
   10212:	885b      	ldrh	r3, [r3, #2]
   10214:	b29b      	uxth	r3, r3
   10216:	041a      	lsls	r2, r3, #16
   10218:	697b      	ldr	r3, [r7, #20]
   1021a:	4313      	orrs	r3, r2
   1021c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1021e:	697b      	ldr	r3, [r7, #20]
   10220:	221f      	movs	r2, #31
   10222:	18bc      	adds	r4, r7, r2
   10224:	4a9e      	ldr	r2, [pc, #632]	; (104a0 <hif_send+0x35c>)
   10226:	0019      	movs	r1, r3
   10228:	0010      	movs	r0, r2
   1022a:	4b9e      	ldr	r3, [pc, #632]	; (104a4 <hif_send+0x360>)
   1022c:	4798      	blx	r3
   1022e:	0003      	movs	r3, r0
   10230:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   10232:	231f      	movs	r3, #31
   10234:	18fb      	adds	r3, r7, r3
   10236:	781b      	ldrb	r3, [r3, #0]
   10238:	b25b      	sxtb	r3, r3
   1023a:	2b00      	cmp	r3, #0
   1023c:	d000      	beq.n	10240 <hif_send+0xfc>
   1023e:	e119      	b.n	10474 <hif_send+0x330>

		reg = 0UL;
   10240:	2300      	movs	r3, #0
   10242:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   10244:	697b      	ldr	r3, [r7, #20]
   10246:	2202      	movs	r2, #2
   10248:	4313      	orrs	r3, r2
   1024a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1024c:	697b      	ldr	r3, [r7, #20]
   1024e:	221f      	movs	r2, #31
   10250:	18bc      	adds	r4, r7, r2
   10252:	4a95      	ldr	r2, [pc, #596]	; (104a8 <hif_send+0x364>)
   10254:	0019      	movs	r1, r3
   10256:	0010      	movs	r0, r2
   10258:	4b92      	ldr	r3, [pc, #584]	; (104a4 <hif_send+0x360>)
   1025a:	4798      	blx	r3
   1025c:	0003      	movs	r3, r0
   1025e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   10260:	231f      	movs	r3, #31
   10262:	18fb      	adds	r3, r7, r3
   10264:	781b      	ldrb	r3, [r3, #0]
   10266:	b25b      	sxtb	r3, r3
   10268:	2b00      	cmp	r3, #0
   1026a:	d000      	beq.n	1026e <hif_send+0x12a>
   1026c:	e104      	b.n	10478 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1026e:	2300      	movs	r3, #0
   10270:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   10272:	230e      	movs	r3, #14
   10274:	18fb      	adds	r3, r7, r3
   10276:	2200      	movs	r2, #0
   10278:	801a      	strh	r2, [r3, #0]
   1027a:	e050      	b.n	1031e <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1027c:	231f      	movs	r3, #31
   1027e:	18fc      	adds	r4, r7, r3
   10280:	2314      	movs	r3, #20
   10282:	18fb      	adds	r3, r7, r3
   10284:	4a88      	ldr	r2, [pc, #544]	; (104a8 <hif_send+0x364>)
   10286:	0019      	movs	r1, r3
   10288:	0010      	movs	r0, r2
   1028a:	4b88      	ldr	r3, [pc, #544]	; (104ac <hif_send+0x368>)
   1028c:	4798      	blx	r3
   1028e:	0003      	movs	r3, r0
   10290:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   10292:	231f      	movs	r3, #31
   10294:	18fb      	adds	r3, r7, r3
   10296:	781b      	ldrb	r3, [r3, #0]
   10298:	b25b      	sxtb	r3, r3
   1029a:	2b00      	cmp	r3, #0
   1029c:	d147      	bne.n	1032e <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   1029e:	230e      	movs	r3, #14
   102a0:	18fb      	adds	r3, r7, r3
   102a2:	881b      	ldrh	r3, [r3, #0]
   102a4:	b29a      	uxth	r2, r3
   102a6:	23f4      	movs	r3, #244	; 0xf4
   102a8:	33ff      	adds	r3, #255	; 0xff
   102aa:	429a      	cmp	r2, r3
   102ac:	d916      	bls.n	102dc <hif_send+0x198>
				if(cnt < 501) {
   102ae:	230e      	movs	r3, #14
   102b0:	18fb      	adds	r3, r7, r3
   102b2:	881b      	ldrh	r3, [r3, #0]
   102b4:	b29a      	uxth	r2, r3
   102b6:	23fa      	movs	r3, #250	; 0xfa
   102b8:	005b      	lsls	r3, r3, #1
   102ba:	429a      	cmp	r2, r3
   102bc:	d80b      	bhi.n	102d6 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   102be:	4b7c      	ldr	r3, [pc, #496]	; (104b0 <hif_send+0x36c>)
   102c0:	0018      	movs	r0, r3
   102c2:	4b7c      	ldr	r3, [pc, #496]	; (104b4 <hif_send+0x370>)
   102c4:	4798      	blx	r3
   102c6:	4b7c      	ldr	r3, [pc, #496]	; (104b8 <hif_send+0x374>)
   102c8:	0018      	movs	r0, r3
   102ca:	4b7a      	ldr	r3, [pc, #488]	; (104b4 <hif_send+0x370>)
   102cc:	4798      	blx	r3
   102ce:	4b7b      	ldr	r3, [pc, #492]	; (104bc <hif_send+0x378>)
   102d0:	0018      	movs	r0, r3
   102d2:	4b78      	ldr	r3, [pc, #480]	; (104b4 <hif_send+0x370>)
   102d4:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   102d6:	2001      	movs	r0, #1
   102d8:	4b79      	ldr	r3, [pc, #484]	; (104c0 <hif_send+0x37c>)
   102da:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   102dc:	697b      	ldr	r3, [r7, #20]
   102de:	2202      	movs	r2, #2
   102e0:	4013      	ands	r3, r2
   102e2:	d113      	bne.n	1030c <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   102e4:	231f      	movs	r3, #31
   102e6:	18fc      	adds	r4, r7, r3
   102e8:	2310      	movs	r3, #16
   102ea:	18fb      	adds	r3, r7, r3
   102ec:	4a75      	ldr	r2, [pc, #468]	; (104c4 <hif_send+0x380>)
   102ee:	0019      	movs	r1, r3
   102f0:	0010      	movs	r0, r2
   102f2:	4b6e      	ldr	r3, [pc, #440]	; (104ac <hif_send+0x368>)
   102f4:	4798      	blx	r3
   102f6:	0003      	movs	r3, r0
   102f8:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   102fa:	231f      	movs	r3, #31
   102fc:	18fb      	adds	r3, r7, r3
   102fe:	781b      	ldrb	r3, [r3, #0]
   10300:	b25b      	sxtb	r3, r3
   10302:	2b00      	cmp	r3, #0
   10304:	d015      	beq.n	10332 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   10306:	2300      	movs	r3, #0
   10308:	613b      	str	r3, [r7, #16]
					goto ERR1;
   1030a:	e0bc      	b.n	10486 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   1030c:	230e      	movs	r3, #14
   1030e:	18fb      	adds	r3, r7, r3
   10310:	881b      	ldrh	r3, [r3, #0]
   10312:	b29b      	uxth	r3, r3
   10314:	3301      	adds	r3, #1
   10316:	b29a      	uxth	r2, r3
   10318:	230e      	movs	r3, #14
   1031a:	18fb      	adds	r3, r7, r3
   1031c:	801a      	strh	r2, [r3, #0]
   1031e:	230e      	movs	r3, #14
   10320:	18fb      	adds	r3, r7, r3
   10322:	881b      	ldrh	r3, [r3, #0]
   10324:	b29b      	uxth	r3, r3
   10326:	4a68      	ldr	r2, [pc, #416]	; (104c8 <hif_send+0x384>)
   10328:	4293      	cmp	r3, r2
   1032a:	d9a7      	bls.n	1027c <hif_send+0x138>
   1032c:	e002      	b.n	10334 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   1032e:	46c0      	nop			; (mov r8, r8)
   10330:	e000      	b.n	10334 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   10332:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   10334:	693b      	ldr	r3, [r7, #16]
   10336:	2b00      	cmp	r3, #0
   10338:	d100      	bne.n	1033c <hif_send+0x1f8>
   1033a:	e074      	b.n	10426 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   1033c:	693b      	ldr	r3, [r7, #16]
   1033e:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   10340:	2318      	movs	r3, #24
   10342:	18fb      	adds	r3, r7, r3
   10344:	885b      	ldrh	r3, [r3, #2]
   10346:	b29a      	uxth	r2, r3
   10348:	2318      	movs	r3, #24
   1034a:	18fb      	adds	r3, r7, r3
   1034c:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1034e:	68bb      	ldr	r3, [r7, #8]
   10350:	221f      	movs	r2, #31
   10352:	18bc      	adds	r4, r7, r2
   10354:	2218      	movs	r2, #24
   10356:	18b9      	adds	r1, r7, r2
   10358:	2208      	movs	r2, #8
   1035a:	0018      	movs	r0, r3
   1035c:	4b5b      	ldr	r3, [pc, #364]	; (104cc <hif_send+0x388>)
   1035e:	4798      	blx	r3
   10360:	0003      	movs	r3, r0
   10362:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   10364:	231f      	movs	r3, #31
   10366:	18fb      	adds	r3, r7, r3
   10368:	781b      	ldrb	r3, [r3, #0]
   1036a:	b25b      	sxtb	r3, r3
   1036c:	2b00      	cmp	r3, #0
   1036e:	d000      	beq.n	10372 <hif_send+0x22e>
   10370:	e084      	b.n	1047c <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   10372:	68bb      	ldr	r3, [r7, #8]
   10374:	3308      	adds	r3, #8
   10376:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   10378:	683b      	ldr	r3, [r7, #0]
   1037a:	2b00      	cmp	r3, #0
   1037c:	d016      	beq.n	103ac <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1037e:	68b8      	ldr	r0, [r7, #8]
   10380:	1d3b      	adds	r3, r7, #4
   10382:	881a      	ldrh	r2, [r3, #0]
   10384:	231f      	movs	r3, #31
   10386:	18fc      	adds	r4, r7, r3
   10388:	683b      	ldr	r3, [r7, #0]
   1038a:	0019      	movs	r1, r3
   1038c:	4b4f      	ldr	r3, [pc, #316]	; (104cc <hif_send+0x388>)
   1038e:	4798      	blx	r3
   10390:	0003      	movs	r3, r0
   10392:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   10394:	231f      	movs	r3, #31
   10396:	18fb      	adds	r3, r7, r3
   10398:	781b      	ldrb	r3, [r3, #0]
   1039a:	b25b      	sxtb	r3, r3
   1039c:	2b00      	cmp	r3, #0
   1039e:	d000      	beq.n	103a2 <hif_send+0x25e>
   103a0:	e06e      	b.n	10480 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   103a2:	1d3b      	adds	r3, r7, #4
   103a4:	881a      	ldrh	r2, [r3, #0]
   103a6:	68bb      	ldr	r3, [r7, #8]
   103a8:	18d3      	adds	r3, r2, r3
   103aa:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   103ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   103ae:	2b00      	cmp	r3, #0
   103b0:	d021      	beq.n	103f6 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   103b2:	2338      	movs	r3, #56	; 0x38
   103b4:	18fb      	adds	r3, r7, r3
   103b6:	881a      	ldrh	r2, [r3, #0]
   103b8:	1d3b      	adds	r3, r7, #4
   103ba:	881b      	ldrh	r3, [r3, #0]
   103bc:	1ad3      	subs	r3, r2, r3
   103be:	001a      	movs	r2, r3
   103c0:	68bb      	ldr	r3, [r7, #8]
   103c2:	18d3      	adds	r3, r2, r3
   103c4:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   103c6:	68b8      	ldr	r0, [r7, #8]
   103c8:	2334      	movs	r3, #52	; 0x34
   103ca:	18fb      	adds	r3, r7, r3
   103cc:	881a      	ldrh	r2, [r3, #0]
   103ce:	231f      	movs	r3, #31
   103d0:	18fc      	adds	r4, r7, r3
   103d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   103d4:	0019      	movs	r1, r3
   103d6:	4b3d      	ldr	r3, [pc, #244]	; (104cc <hif_send+0x388>)
   103d8:	4798      	blx	r3
   103da:	0003      	movs	r3, r0
   103dc:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   103de:	231f      	movs	r3, #31
   103e0:	18fb      	adds	r3, r7, r3
   103e2:	781b      	ldrb	r3, [r3, #0]
   103e4:	b25b      	sxtb	r3, r3
   103e6:	2b00      	cmp	r3, #0
   103e8:	d14c      	bne.n	10484 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   103ea:	2334      	movs	r3, #52	; 0x34
   103ec:	18fb      	adds	r3, r7, r3
   103ee:	881a      	ldrh	r2, [r3, #0]
   103f0:	68bb      	ldr	r3, [r7, #8]
   103f2:	18d3      	adds	r3, r2, r3
   103f4:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   103f6:	693b      	ldr	r3, [r7, #16]
   103f8:	009b      	lsls	r3, r3, #2
   103fa:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   103fc:	697b      	ldr	r3, [r7, #20]
   103fe:	2202      	movs	r2, #2
   10400:	4313      	orrs	r3, r2
   10402:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   10404:	697b      	ldr	r3, [r7, #20]
   10406:	221f      	movs	r2, #31
   10408:	18bc      	adds	r4, r7, r2
   1040a:	4a31      	ldr	r2, [pc, #196]	; (104d0 <hif_send+0x38c>)
   1040c:	0019      	movs	r1, r3
   1040e:	0010      	movs	r0, r2
   10410:	4b24      	ldr	r3, [pc, #144]	; (104a4 <hif_send+0x360>)
   10412:	4798      	blx	r3
   10414:	0003      	movs	r3, r0
   10416:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   10418:	231f      	movs	r3, #31
   1041a:	18fb      	adds	r3, r7, r3
   1041c:	781b      	ldrb	r3, [r3, #0]
   1041e:	b25b      	sxtb	r3, r3
   10420:	2b00      	cmp	r3, #0
   10422:	d01c      	beq.n	1045e <hif_send+0x31a>
   10424:	e02f      	b.n	10486 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   10426:	231f      	movs	r3, #31
   10428:	18fc      	adds	r4, r7, r3
   1042a:	4b2a      	ldr	r3, [pc, #168]	; (104d4 <hif_send+0x390>)
   1042c:	4798      	blx	r3
   1042e:	0003      	movs	r3, r0
   10430:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   10432:	231f      	movs	r3, #31
   10434:	18fb      	adds	r3, r7, r3
   10436:	22fd      	movs	r2, #253	; 0xfd
   10438:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   1043a:	e026      	b.n	1048a <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1043c:	2398      	movs	r3, #152	; 0x98
   1043e:	33ff      	adds	r3, #255	; 0xff
   10440:	001a      	movs	r2, r3
   10442:	4925      	ldr	r1, [pc, #148]	; (104d8 <hif_send+0x394>)
   10444:	4b25      	ldr	r3, [pc, #148]	; (104dc <hif_send+0x398>)
   10446:	0018      	movs	r0, r3
   10448:	4b1a      	ldr	r3, [pc, #104]	; (104b4 <hif_send+0x370>)
   1044a:	4798      	blx	r3
   1044c:	4b24      	ldr	r3, [pc, #144]	; (104e0 <hif_send+0x39c>)
   1044e:	0018      	movs	r0, r3
   10450:	4b18      	ldr	r3, [pc, #96]	; (104b4 <hif_send+0x370>)
   10452:	4798      	blx	r3
   10454:	4b19      	ldr	r3, [pc, #100]	; (104bc <hif_send+0x378>)
   10456:	0018      	movs	r0, r3
   10458:	4b16      	ldr	r3, [pc, #88]	; (104b4 <hif_send+0x370>)
   1045a:	4798      	blx	r3
		goto ERR2;
   1045c:	e015      	b.n	1048a <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   1045e:	231f      	movs	r3, #31
   10460:	18fc      	adds	r4, r7, r3
   10462:	4b1c      	ldr	r3, [pc, #112]	; (104d4 <hif_send+0x390>)
   10464:	4798      	blx	r3
   10466:	0003      	movs	r3, r0
   10468:	7023      	strb	r3, [r4, #0]
	return ret;
   1046a:	231f      	movs	r3, #31
   1046c:	18fb      	adds	r3, r7, r3
   1046e:	781b      	ldrb	r3, [r3, #0]
   10470:	b25b      	sxtb	r3, r3
   10472:	e00e      	b.n	10492 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   10474:	46c0      	nop			; (mov r8, r8)
   10476:	e006      	b.n	10486 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   10478:	46c0      	nop			; (mov r8, r8)
   1047a:	e004      	b.n	10486 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   1047c:	46c0      	nop			; (mov r8, r8)
   1047e:	e002      	b.n	10486 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   10480:	46c0      	nop			; (mov r8, r8)
   10482:	e000      	b.n	10486 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   10484:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   10486:	4b17      	ldr	r3, [pc, #92]	; (104e4 <hif_send+0x3a0>)
   10488:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   1048a:	231f      	movs	r3, #31
   1048c:	18fb      	adds	r3, r7, r3
   1048e:	781b      	ldrb	r3, [r3, #0]
   10490:	b25b      	sxtb	r3, r3
}
   10492:	0018      	movs	r0, r3
   10494:	46bd      	mov	sp, r7
   10496:	b009      	add	sp, #36	; 0x24
   10498:	bd90      	pop	{r4, r7, pc}
   1049a:	46c0      	nop			; (mov r8, r8)
   1049c:	0001000d 	.word	0x0001000d
   104a0:	0000108c 	.word	0x0000108c
   104a4:	00011f99 	.word	0x00011f99
   104a8:	00001078 	.word	0x00001078
   104ac:	00011f75 	.word	0x00011f75
   104b0:	000281d0 	.word	0x000281d0
   104b4:	0000d14d 	.word	0x0000d14d
   104b8:	000281dc 	.word	0x000281dc
   104bc:	000281f0 	.word	0x000281f0
   104c0:	0000f605 	.word	0x0000f605
   104c4:	00150400 	.word	0x00150400
   104c8:	000003e7 	.word	0x000003e7
   104cc:	000120e1 	.word	0x000120e1
   104d0:	0000106c 	.word	0x0000106c
   104d4:	000100a5 	.word	0x000100a5
   104d8:	000284f8 	.word	0x000284f8
   104dc:	000281f4 	.word	0x000281f4
   104e0:	00028208 	.word	0x00028208
   104e4:	0001007d 	.word	0x0001007d

000104e8 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   104e8:	b590      	push	{r4, r7, lr}
   104ea:	b087      	sub	sp, #28
   104ec:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   104ee:	230f      	movs	r3, #15
   104f0:	18fb      	adds	r3, r7, r3
   104f2:	2200      	movs	r2, #0
   104f4:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   104f6:	230f      	movs	r3, #15
   104f8:	18fc      	adds	r4, r7, r3
   104fa:	2308      	movs	r3, #8
   104fc:	18fb      	adds	r3, r7, r3
   104fe:	4adc      	ldr	r2, [pc, #880]	; (10870 <hif_isr+0x388>)
   10500:	0019      	movs	r1, r3
   10502:	0010      	movs	r0, r2
   10504:	4bdb      	ldr	r3, [pc, #876]	; (10874 <hif_isr+0x38c>)
   10506:	4798      	blx	r3
   10508:	0003      	movs	r3, r0
   1050a:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   1050c:	230f      	movs	r3, #15
   1050e:	18fb      	adds	r3, r7, r3
   10510:	781b      	ldrb	r3, [r3, #0]
   10512:	b25b      	sxtb	r3, r3
   10514:	2b00      	cmp	r3, #0
   10516:	d000      	beq.n	1051a <hif_isr+0x32>
   10518:	e21e      	b.n	10958 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   1051a:	68bb      	ldr	r3, [r7, #8]
   1051c:	2201      	movs	r2, #1
   1051e:	4013      	ands	r3, r2
   10520:	d100      	bne.n	10524 <hif_isr+0x3c>
   10522:	e204      	b.n	1092e <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   10524:	2000      	movs	r0, #0
   10526:	4bd4      	ldr	r3, [pc, #848]	; (10878 <hif_isr+0x390>)
   10528:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   1052a:	68bb      	ldr	r3, [r7, #8]
   1052c:	2201      	movs	r2, #1
   1052e:	4393      	bics	r3, r2
   10530:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   10532:	68bb      	ldr	r3, [r7, #8]
   10534:	220f      	movs	r2, #15
   10536:	18bc      	adds	r4, r7, r2
   10538:	4acd      	ldr	r2, [pc, #820]	; (10870 <hif_isr+0x388>)
   1053a:	0019      	movs	r1, r3
   1053c:	0010      	movs	r0, r2
   1053e:	4bcf      	ldr	r3, [pc, #828]	; (1087c <hif_isr+0x394>)
   10540:	4798      	blx	r3
   10542:	0003      	movs	r3, r0
   10544:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   10546:	230f      	movs	r3, #15
   10548:	18fb      	adds	r3, r7, r3
   1054a:	781b      	ldrb	r3, [r3, #0]
   1054c:	b25b      	sxtb	r3, r3
   1054e:	2b00      	cmp	r3, #0
   10550:	d000      	beq.n	10554 <hif_isr+0x6c>
   10552:	e210      	b.n	10976 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   10554:	4bca      	ldr	r3, [pc, #808]	; (10880 <hif_isr+0x398>)
   10556:	2201      	movs	r2, #1
   10558:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1055a:	68bb      	ldr	r3, [r7, #8]
   1055c:	089b      	lsrs	r3, r3, #2
   1055e:	b29a      	uxth	r2, r3
   10560:	230c      	movs	r3, #12
   10562:	18fb      	adds	r3, r7, r3
   10564:	0512      	lsls	r2, r2, #20
   10566:	0d12      	lsrs	r2, r2, #20
   10568:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   1056a:	230c      	movs	r3, #12
   1056c:	18fb      	adds	r3, r7, r3
   1056e:	881b      	ldrh	r3, [r3, #0]
   10570:	2b00      	cmp	r3, #0
   10572:	d100      	bne.n	10576 <hif_isr+0x8e>
   10574:	e1c8      	b.n	10908 <hif_isr+0x420>
				uint32 address = 0;
   10576:	2300      	movs	r3, #0
   10578:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1057a:	230f      	movs	r3, #15
   1057c:	18fc      	adds	r4, r7, r3
   1057e:	003b      	movs	r3, r7
   10580:	4ac0      	ldr	r2, [pc, #768]	; (10884 <hif_isr+0x39c>)
   10582:	0019      	movs	r1, r3
   10584:	0010      	movs	r0, r2
   10586:	4bbb      	ldr	r3, [pc, #748]	; (10874 <hif_isr+0x38c>)
   10588:	4798      	blx	r3
   1058a:	0003      	movs	r3, r0
   1058c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   1058e:	230f      	movs	r3, #15
   10590:	18fb      	adds	r3, r7, r3
   10592:	781b      	ldrb	r3, [r3, #0]
   10594:	b25b      	sxtb	r3, r3
   10596:	2b00      	cmp	r3, #0
   10598:	d012      	beq.n	105c0 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1059a:	23e4      	movs	r3, #228	; 0xe4
   1059c:	005a      	lsls	r2, r3, #1
   1059e:	49ba      	ldr	r1, [pc, #744]	; (10888 <hif_isr+0x3a0>)
   105a0:	4bba      	ldr	r3, [pc, #744]	; (1088c <hif_isr+0x3a4>)
   105a2:	0018      	movs	r0, r3
   105a4:	4bba      	ldr	r3, [pc, #744]	; (10890 <hif_isr+0x3a8>)
   105a6:	4798      	blx	r3
   105a8:	4bba      	ldr	r3, [pc, #744]	; (10894 <hif_isr+0x3ac>)
   105aa:	0018      	movs	r0, r3
   105ac:	4bb8      	ldr	r3, [pc, #736]	; (10890 <hif_isr+0x3a8>)
   105ae:	4798      	blx	r3
   105b0:	4bb9      	ldr	r3, [pc, #740]	; (10898 <hif_isr+0x3b0>)
   105b2:	0018      	movs	r0, r3
   105b4:	4bb6      	ldr	r3, [pc, #728]	; (10890 <hif_isr+0x3a8>)
   105b6:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   105b8:	2001      	movs	r0, #1
   105ba:	4baf      	ldr	r3, [pc, #700]	; (10878 <hif_isr+0x390>)
   105bc:	4798      	blx	r3
					goto ERR1;
   105be:	e1db      	b.n	10978 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   105c0:	683a      	ldr	r2, [r7, #0]
   105c2:	4baf      	ldr	r3, [pc, #700]	; (10880 <hif_isr+0x398>)
   105c4:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   105c6:	230c      	movs	r3, #12
   105c8:	18fb      	adds	r3, r7, r3
   105ca:	881a      	ldrh	r2, [r3, #0]
   105cc:	4bac      	ldr	r3, [pc, #688]	; (10880 <hif_isr+0x398>)
   105ce:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   105d0:	683b      	ldr	r3, [r7, #0]
   105d2:	220f      	movs	r2, #15
   105d4:	18bc      	adds	r4, r7, r2
   105d6:	1d39      	adds	r1, r7, #4
   105d8:	2204      	movs	r2, #4
   105da:	0018      	movs	r0, r3
   105dc:	4baf      	ldr	r3, [pc, #700]	; (1089c <hif_isr+0x3b4>)
   105de:	4798      	blx	r3
   105e0:	0003      	movs	r3, r0
   105e2:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   105e4:	1d3b      	adds	r3, r7, #4
   105e6:	885b      	ldrh	r3, [r3, #2]
   105e8:	b29a      	uxth	r2, r3
   105ea:	1d3b      	adds	r3, r7, #4
   105ec:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   105ee:	230f      	movs	r3, #15
   105f0:	18fb      	adds	r3, r7, r3
   105f2:	781b      	ldrb	r3, [r3, #0]
   105f4:	b25b      	sxtb	r3, r3
   105f6:	2b00      	cmp	r3, #0
   105f8:	d012      	beq.n	10620 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   105fa:	23e9      	movs	r3, #233	; 0xe9
   105fc:	005a      	lsls	r2, r3, #1
   105fe:	49a2      	ldr	r1, [pc, #648]	; (10888 <hif_isr+0x3a0>)
   10600:	4ba2      	ldr	r3, [pc, #648]	; (1088c <hif_isr+0x3a4>)
   10602:	0018      	movs	r0, r3
   10604:	4ba2      	ldr	r3, [pc, #648]	; (10890 <hif_isr+0x3a8>)
   10606:	4798      	blx	r3
   10608:	4ba5      	ldr	r3, [pc, #660]	; (108a0 <hif_isr+0x3b8>)
   1060a:	0018      	movs	r0, r3
   1060c:	4ba0      	ldr	r3, [pc, #640]	; (10890 <hif_isr+0x3a8>)
   1060e:	4798      	blx	r3
   10610:	4ba1      	ldr	r3, [pc, #644]	; (10898 <hif_isr+0x3b0>)
   10612:	0018      	movs	r0, r3
   10614:	4b9e      	ldr	r3, [pc, #632]	; (10890 <hif_isr+0x3a8>)
   10616:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   10618:	2001      	movs	r0, #1
   1061a:	4b97      	ldr	r3, [pc, #604]	; (10878 <hif_isr+0x390>)
   1061c:	4798      	blx	r3
					goto ERR1;
   1061e:	e1ab      	b.n	10978 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   10620:	1d3b      	adds	r3, r7, #4
   10622:	885b      	ldrh	r3, [r3, #2]
   10624:	b29b      	uxth	r3, r3
   10626:	220c      	movs	r2, #12
   10628:	18ba      	adds	r2, r7, r2
   1062a:	8812      	ldrh	r2, [r2, #0]
   1062c:	429a      	cmp	r2, r3
   1062e:	d02f      	beq.n	10690 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   10630:	230c      	movs	r3, #12
   10632:	18fb      	adds	r3, r7, r3
   10634:	881b      	ldrh	r3, [r3, #0]
   10636:	1d3a      	adds	r2, r7, #4
   10638:	8852      	ldrh	r2, [r2, #2]
   1063a:	b292      	uxth	r2, r2
   1063c:	1a9b      	subs	r3, r3, r2
   1063e:	2b04      	cmp	r3, #4
   10640:	dd26      	ble.n	10690 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   10642:	23dc      	movs	r3, #220	; 0xdc
   10644:	33ff      	adds	r3, #255	; 0xff
   10646:	001a      	movs	r2, r3
   10648:	498f      	ldr	r1, [pc, #572]	; (10888 <hif_isr+0x3a0>)
   1064a:	4b90      	ldr	r3, [pc, #576]	; (1088c <hif_isr+0x3a4>)
   1064c:	0018      	movs	r0, r3
   1064e:	4b90      	ldr	r3, [pc, #576]	; (10890 <hif_isr+0x3a8>)
   10650:	4798      	blx	r3
   10652:	230c      	movs	r3, #12
   10654:	18fb      	adds	r3, r7, r3
   10656:	8819      	ldrh	r1, [r3, #0]
   10658:	1d3b      	adds	r3, r7, #4
   1065a:	885b      	ldrh	r3, [r3, #2]
   1065c:	b29b      	uxth	r3, r3
   1065e:	001a      	movs	r2, r3
   10660:	1d3b      	adds	r3, r7, #4
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	b2db      	uxtb	r3, r3
   10666:	001c      	movs	r4, r3
   10668:	1d3b      	adds	r3, r7, #4
   1066a:	785b      	ldrb	r3, [r3, #1]
   1066c:	b2db      	uxtb	r3, r3
   1066e:	488d      	ldr	r0, [pc, #564]	; (108a4 <hif_isr+0x3bc>)
   10670:	9300      	str	r3, [sp, #0]
   10672:	0023      	movs	r3, r4
   10674:	4c86      	ldr	r4, [pc, #536]	; (10890 <hif_isr+0x3a8>)
   10676:	47a0      	blx	r4
   10678:	4b87      	ldr	r3, [pc, #540]	; (10898 <hif_isr+0x3b0>)
   1067a:	0018      	movs	r0, r3
   1067c:	4b84      	ldr	r3, [pc, #528]	; (10890 <hif_isr+0x3a8>)
   1067e:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   10680:	2001      	movs	r0, #1
   10682:	4b7d      	ldr	r3, [pc, #500]	; (10878 <hif_isr+0x390>)
   10684:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   10686:	230f      	movs	r3, #15
   10688:	18fb      	adds	r3, r7, r3
   1068a:	22fa      	movs	r2, #250	; 0xfa
   1068c:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   1068e:	e173      	b.n	10978 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   10690:	1d3b      	adds	r3, r7, #4
   10692:	781b      	ldrb	r3, [r3, #0]
   10694:	b2db      	uxtb	r3, r3
   10696:	2b01      	cmp	r3, #1
   10698:	d122      	bne.n	106e0 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   1069a:	4b79      	ldr	r3, [pc, #484]	; (10880 <hif_isr+0x398>)
   1069c:	691b      	ldr	r3, [r3, #16]
   1069e:	2b00      	cmp	r3, #0
   106a0:	d00d      	beq.n	106be <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   106a2:	4b77      	ldr	r3, [pc, #476]	; (10880 <hif_isr+0x398>)
   106a4:	691b      	ldr	r3, [r3, #16]
   106a6:	1d3a      	adds	r2, r7, #4
   106a8:	7852      	ldrb	r2, [r2, #1]
   106aa:	b2d0      	uxtb	r0, r2
   106ac:	1d3a      	adds	r2, r7, #4
   106ae:	8852      	ldrh	r2, [r2, #2]
   106b0:	b292      	uxth	r2, r2
   106b2:	3a08      	subs	r2, #8
   106b4:	b291      	uxth	r1, r2
   106b6:	683a      	ldr	r2, [r7, #0]
   106b8:	3208      	adds	r2, #8
   106ba:	4798      	blx	r3
   106bc:	e102      	b.n	108c4 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   106be:	23e8      	movs	r3, #232	; 0xe8
   106c0:	33ff      	adds	r3, #255	; 0xff
   106c2:	001a      	movs	r2, r3
   106c4:	4970      	ldr	r1, [pc, #448]	; (10888 <hif_isr+0x3a0>)
   106c6:	4b71      	ldr	r3, [pc, #452]	; (1088c <hif_isr+0x3a4>)
   106c8:	0018      	movs	r0, r3
   106ca:	4b71      	ldr	r3, [pc, #452]	; (10890 <hif_isr+0x3a8>)
   106cc:	4798      	blx	r3
   106ce:	4b76      	ldr	r3, [pc, #472]	; (108a8 <hif_isr+0x3c0>)
   106d0:	0018      	movs	r0, r3
   106d2:	4b6f      	ldr	r3, [pc, #444]	; (10890 <hif_isr+0x3a8>)
   106d4:	4798      	blx	r3
   106d6:	4b70      	ldr	r3, [pc, #448]	; (10898 <hif_isr+0x3b0>)
   106d8:	0018      	movs	r0, r3
   106da:	4b6d      	ldr	r3, [pc, #436]	; (10890 <hif_isr+0x3a8>)
   106dc:	4798      	blx	r3
   106de:	e0f1      	b.n	108c4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   106e0:	1d3b      	adds	r3, r7, #4
   106e2:	781b      	ldrb	r3, [r3, #0]
   106e4:	b2db      	uxtb	r3, r3
   106e6:	2b02      	cmp	r3, #2
   106e8:	d122      	bne.n	10730 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   106ea:	4b65      	ldr	r3, [pc, #404]	; (10880 <hif_isr+0x398>)
   106ec:	695b      	ldr	r3, [r3, #20]
   106ee:	2b00      	cmp	r3, #0
   106f0:	d00d      	beq.n	1070e <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   106f2:	4b63      	ldr	r3, [pc, #396]	; (10880 <hif_isr+0x398>)
   106f4:	695b      	ldr	r3, [r3, #20]
   106f6:	1d3a      	adds	r2, r7, #4
   106f8:	7852      	ldrb	r2, [r2, #1]
   106fa:	b2d0      	uxtb	r0, r2
   106fc:	1d3a      	adds	r2, r7, #4
   106fe:	8852      	ldrh	r2, [r2, #2]
   10700:	b292      	uxth	r2, r2
   10702:	3a08      	subs	r2, #8
   10704:	b291      	uxth	r1, r2
   10706:	683a      	ldr	r2, [r7, #0]
   10708:	3208      	adds	r2, #8
   1070a:	4798      	blx	r3
   1070c:	e0da      	b.n	108c4 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   1070e:	23f0      	movs	r3, #240	; 0xf0
   10710:	33ff      	adds	r3, #255	; 0xff
   10712:	001a      	movs	r2, r3
   10714:	495c      	ldr	r1, [pc, #368]	; (10888 <hif_isr+0x3a0>)
   10716:	4b5d      	ldr	r3, [pc, #372]	; (1088c <hif_isr+0x3a4>)
   10718:	0018      	movs	r0, r3
   1071a:	4b5d      	ldr	r3, [pc, #372]	; (10890 <hif_isr+0x3a8>)
   1071c:	4798      	blx	r3
   1071e:	4b63      	ldr	r3, [pc, #396]	; (108ac <hif_isr+0x3c4>)
   10720:	0018      	movs	r0, r3
   10722:	4b5b      	ldr	r3, [pc, #364]	; (10890 <hif_isr+0x3a8>)
   10724:	4798      	blx	r3
   10726:	4b5c      	ldr	r3, [pc, #368]	; (10898 <hif_isr+0x3b0>)
   10728:	0018      	movs	r0, r3
   1072a:	4b59      	ldr	r3, [pc, #356]	; (10890 <hif_isr+0x3a8>)
   1072c:	4798      	blx	r3
   1072e:	e0c9      	b.n	108c4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   10730:	1d3b      	adds	r3, r7, #4
   10732:	781b      	ldrb	r3, [r3, #0]
   10734:	b2db      	uxtb	r3, r3
   10736:	2b04      	cmp	r3, #4
   10738:	d122      	bne.n	10780 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   1073a:	4b51      	ldr	r3, [pc, #324]	; (10880 <hif_isr+0x398>)
   1073c:	699b      	ldr	r3, [r3, #24]
   1073e:	2b00      	cmp	r3, #0
   10740:	d00d      	beq.n	1075e <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   10742:	4b4f      	ldr	r3, [pc, #316]	; (10880 <hif_isr+0x398>)
   10744:	699b      	ldr	r3, [r3, #24]
   10746:	1d3a      	adds	r2, r7, #4
   10748:	7852      	ldrb	r2, [r2, #1]
   1074a:	b2d0      	uxtb	r0, r2
   1074c:	1d3a      	adds	r2, r7, #4
   1074e:	8852      	ldrh	r2, [r2, #2]
   10750:	b292      	uxth	r2, r2
   10752:	3a08      	subs	r2, #8
   10754:	b291      	uxth	r1, r2
   10756:	683a      	ldr	r2, [r7, #0]
   10758:	3208      	adds	r2, #8
   1075a:	4798      	blx	r3
   1075c:	e0b2      	b.n	108c4 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   1075e:	23f8      	movs	r3, #248	; 0xf8
   10760:	33ff      	adds	r3, #255	; 0xff
   10762:	001a      	movs	r2, r3
   10764:	4948      	ldr	r1, [pc, #288]	; (10888 <hif_isr+0x3a0>)
   10766:	4b49      	ldr	r3, [pc, #292]	; (1088c <hif_isr+0x3a4>)
   10768:	0018      	movs	r0, r3
   1076a:	4b49      	ldr	r3, [pc, #292]	; (10890 <hif_isr+0x3a8>)
   1076c:	4798      	blx	r3
   1076e:	4b50      	ldr	r3, [pc, #320]	; (108b0 <hif_isr+0x3c8>)
   10770:	0018      	movs	r0, r3
   10772:	4b47      	ldr	r3, [pc, #284]	; (10890 <hif_isr+0x3a8>)
   10774:	4798      	blx	r3
   10776:	4b48      	ldr	r3, [pc, #288]	; (10898 <hif_isr+0x3b0>)
   10778:	0018      	movs	r0, r3
   1077a:	4b45      	ldr	r3, [pc, #276]	; (10890 <hif_isr+0x3a8>)
   1077c:	4798      	blx	r3
   1077e:	e0a1      	b.n	108c4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   10780:	1d3b      	adds	r3, r7, #4
   10782:	781b      	ldrb	r3, [r3, #0]
   10784:	b2db      	uxtb	r3, r3
   10786:	2b06      	cmp	r3, #6
   10788:	d121      	bne.n	107ce <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   1078a:	4b3d      	ldr	r3, [pc, #244]	; (10880 <hif_isr+0x398>)
   1078c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1078e:	2b00      	cmp	r3, #0
   10790:	d00d      	beq.n	107ae <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   10792:	4b3b      	ldr	r3, [pc, #236]	; (10880 <hif_isr+0x398>)
   10794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10796:	1d3a      	adds	r2, r7, #4
   10798:	7852      	ldrb	r2, [r2, #1]
   1079a:	b2d0      	uxtb	r0, r2
   1079c:	1d3a      	adds	r2, r7, #4
   1079e:	8852      	ldrh	r2, [r2, #2]
   107a0:	b292      	uxth	r2, r2
   107a2:	3a08      	subs	r2, #8
   107a4:	b291      	uxth	r1, r2
   107a6:	683a      	ldr	r2, [r7, #0]
   107a8:	3208      	adds	r2, #8
   107aa:	4798      	blx	r3
   107ac:	e08a      	b.n	108c4 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   107ae:	2380      	movs	r3, #128	; 0x80
   107b0:	009a      	lsls	r2, r3, #2
   107b2:	4935      	ldr	r1, [pc, #212]	; (10888 <hif_isr+0x3a0>)
   107b4:	4b35      	ldr	r3, [pc, #212]	; (1088c <hif_isr+0x3a4>)
   107b6:	0018      	movs	r0, r3
   107b8:	4b35      	ldr	r3, [pc, #212]	; (10890 <hif_isr+0x3a8>)
   107ba:	4798      	blx	r3
   107bc:	4b3d      	ldr	r3, [pc, #244]	; (108b4 <hif_isr+0x3cc>)
   107be:	0018      	movs	r0, r3
   107c0:	4b33      	ldr	r3, [pc, #204]	; (10890 <hif_isr+0x3a8>)
   107c2:	4798      	blx	r3
   107c4:	4b34      	ldr	r3, [pc, #208]	; (10898 <hif_isr+0x3b0>)
   107c6:	0018      	movs	r0, r3
   107c8:	4b31      	ldr	r3, [pc, #196]	; (10890 <hif_isr+0x3a8>)
   107ca:	4798      	blx	r3
   107cc:	e07a      	b.n	108c4 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   107ce:	1d3b      	adds	r3, r7, #4
   107d0:	781b      	ldrb	r3, [r3, #0]
   107d2:	b2db      	uxtb	r3, r3
   107d4:	2b07      	cmp	r3, #7
   107d6:	d120      	bne.n	1081a <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   107d8:	4b29      	ldr	r3, [pc, #164]	; (10880 <hif_isr+0x398>)
   107da:	69db      	ldr	r3, [r3, #28]
   107dc:	2b00      	cmp	r3, #0
   107de:	d00d      	beq.n	107fc <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   107e0:	4b27      	ldr	r3, [pc, #156]	; (10880 <hif_isr+0x398>)
   107e2:	69db      	ldr	r3, [r3, #28]
   107e4:	1d3a      	adds	r2, r7, #4
   107e6:	7852      	ldrb	r2, [r2, #1]
   107e8:	b2d0      	uxtb	r0, r2
   107ea:	1d3a      	adds	r2, r7, #4
   107ec:	8852      	ldrh	r2, [r2, #2]
   107ee:	b292      	uxth	r2, r2
   107f0:	3a08      	subs	r2, #8
   107f2:	b291      	uxth	r1, r2
   107f4:	683a      	ldr	r2, [r7, #0]
   107f6:	3208      	adds	r2, #8
   107f8:	4798      	blx	r3
   107fa:	e063      	b.n	108c4 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   107fc:	4a2e      	ldr	r2, [pc, #184]	; (108b8 <hif_isr+0x3d0>)
   107fe:	4922      	ldr	r1, [pc, #136]	; (10888 <hif_isr+0x3a0>)
   10800:	4b22      	ldr	r3, [pc, #136]	; (1088c <hif_isr+0x3a4>)
   10802:	0018      	movs	r0, r3
   10804:	4b22      	ldr	r3, [pc, #136]	; (10890 <hif_isr+0x3a8>)
   10806:	4798      	blx	r3
   10808:	4b2c      	ldr	r3, [pc, #176]	; (108bc <hif_isr+0x3d4>)
   1080a:	0018      	movs	r0, r3
   1080c:	4b20      	ldr	r3, [pc, #128]	; (10890 <hif_isr+0x3a8>)
   1080e:	4798      	blx	r3
   10810:	4b21      	ldr	r3, [pc, #132]	; (10898 <hif_isr+0x3b0>)
   10812:	0018      	movs	r0, r3
   10814:	4b1e      	ldr	r3, [pc, #120]	; (10890 <hif_isr+0x3a8>)
   10816:	4798      	blx	r3
   10818:	e054      	b.n	108c4 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1081a:	1d3b      	adds	r3, r7, #4
   1081c:	781b      	ldrb	r3, [r3, #0]
   1081e:	b2db      	uxtb	r3, r3
   10820:	2b05      	cmp	r3, #5
   10822:	d111      	bne.n	10848 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   10824:	4b16      	ldr	r3, [pc, #88]	; (10880 <hif_isr+0x398>)
   10826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10828:	2b00      	cmp	r3, #0
   1082a:	d04b      	beq.n	108c4 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1082c:	4b14      	ldr	r3, [pc, #80]	; (10880 <hif_isr+0x398>)
   1082e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10830:	1d3a      	adds	r2, r7, #4
   10832:	7852      	ldrb	r2, [r2, #1]
   10834:	b2d0      	uxtb	r0, r2
   10836:	1d3a      	adds	r2, r7, #4
   10838:	8852      	ldrh	r2, [r2, #2]
   1083a:	b292      	uxth	r2, r2
   1083c:	3a08      	subs	r2, #8
   1083e:	b291      	uxth	r1, r2
   10840:	683a      	ldr	r2, [r7, #0]
   10842:	3208      	adds	r2, #8
   10844:	4798      	blx	r3
   10846:	e03d      	b.n	108c4 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   10848:	2384      	movs	r3, #132	; 0x84
   1084a:	009a      	lsls	r2, r3, #2
   1084c:	490e      	ldr	r1, [pc, #56]	; (10888 <hif_isr+0x3a0>)
   1084e:	4b0f      	ldr	r3, [pc, #60]	; (1088c <hif_isr+0x3a4>)
   10850:	0018      	movs	r0, r3
   10852:	4b0f      	ldr	r3, [pc, #60]	; (10890 <hif_isr+0x3a8>)
   10854:	4798      	blx	r3
   10856:	4b1a      	ldr	r3, [pc, #104]	; (108c0 <hif_isr+0x3d8>)
   10858:	0018      	movs	r0, r3
   1085a:	4b0d      	ldr	r3, [pc, #52]	; (10890 <hif_isr+0x3a8>)
   1085c:	4798      	blx	r3
   1085e:	4b0e      	ldr	r3, [pc, #56]	; (10898 <hif_isr+0x3b0>)
   10860:	0018      	movs	r0, r3
   10862:	4b0b      	ldr	r3, [pc, #44]	; (10890 <hif_isr+0x3a8>)
   10864:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   10866:	230f      	movs	r3, #15
   10868:	18fb      	adds	r3, r7, r3
   1086a:	22fa      	movs	r2, #250	; 0xfa
   1086c:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1086e:	e083      	b.n	10978 <hif_isr+0x490>
   10870:	00001070 	.word	0x00001070
   10874:	00011f75 	.word	0x00011f75
   10878:	0000f699 	.word	0x0000f699
   1087c:	00011f99 	.word	0x00011f99
   10880:	20005754 	.word	0x20005754
   10884:	00001084 	.word	0x00001084
   10888:	00028504 	.word	0x00028504
   1088c:	000281f4 	.word	0x000281f4
   10890:	0000d14d 	.word	0x0000d14d
   10894:	00028228 	.word	0x00028228
   10898:	000281f0 	.word	0x000281f0
   1089c:	00011fe9 	.word	0x00011fe9
   108a0:	00028250 	.word	0x00028250
   108a4:	00028268 	.word	0x00028268
   108a8:	000282a8 	.word	0x000282a8
   108ac:	000282cc 	.word	0x000282cc
   108b0:	000282f0 	.word	0x000282f0
   108b4:	00028310 	.word	0x00028310
   108b8:	00000207 	.word	0x00000207
   108bc:	00028334 	.word	0x00028334
   108c0:	00028358 	.word	0x00028358
				}
				if(gstrHifCxt.u8HifRXDone)
   108c4:	4b30      	ldr	r3, [pc, #192]	; (10988 <hif_isr+0x4a0>)
   108c6:	789b      	ldrb	r3, [r3, #2]
   108c8:	b2db      	uxtb	r3, r3
   108ca:	2b00      	cmp	r3, #0
   108cc:	d054      	beq.n	10978 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   108ce:	4a2f      	ldr	r2, [pc, #188]	; (1098c <hif_isr+0x4a4>)
   108d0:	492f      	ldr	r1, [pc, #188]	; (10990 <hif_isr+0x4a8>)
   108d2:	4b30      	ldr	r3, [pc, #192]	; (10994 <hif_isr+0x4ac>)
   108d4:	0018      	movs	r0, r3
   108d6:	4b30      	ldr	r3, [pc, #192]	; (10998 <hif_isr+0x4b0>)
   108d8:	4798      	blx	r3
   108da:	1d3b      	adds	r3, r7, #4
   108dc:	781b      	ldrb	r3, [r3, #0]
   108de:	b2db      	uxtb	r3, r3
   108e0:	0019      	movs	r1, r3
   108e2:	1d3b      	adds	r3, r7, #4
   108e4:	785b      	ldrb	r3, [r3, #1]
   108e6:	b2db      	uxtb	r3, r3
   108e8:	001a      	movs	r2, r3
   108ea:	4b2c      	ldr	r3, [pc, #176]	; (1099c <hif_isr+0x4b4>)
   108ec:	0018      	movs	r0, r3
   108ee:	4b2a      	ldr	r3, [pc, #168]	; (10998 <hif_isr+0x4b0>)
   108f0:	4798      	blx	r3
   108f2:	4b2b      	ldr	r3, [pc, #172]	; (109a0 <hif_isr+0x4b8>)
   108f4:	0018      	movs	r0, r3
   108f6:	4b28      	ldr	r3, [pc, #160]	; (10998 <hif_isr+0x4b0>)
   108f8:	4798      	blx	r3
					ret = hif_set_rx_done();
   108fa:	230f      	movs	r3, #15
   108fc:	18fc      	adds	r4, r7, r3
   108fe:	4b29      	ldr	r3, [pc, #164]	; (109a4 <hif_isr+0x4bc>)
   10900:	4798      	blx	r3
   10902:	0003      	movs	r3, r0
   10904:	7023      	strb	r3, [r4, #0]
   10906:	e037      	b.n	10978 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   10908:	4a27      	ldr	r2, [pc, #156]	; (109a8 <hif_isr+0x4c0>)
   1090a:	4921      	ldr	r1, [pc, #132]	; (10990 <hif_isr+0x4a8>)
   1090c:	4b21      	ldr	r3, [pc, #132]	; (10994 <hif_isr+0x4ac>)
   1090e:	0018      	movs	r0, r3
   10910:	4b21      	ldr	r3, [pc, #132]	; (10998 <hif_isr+0x4b0>)
   10912:	4798      	blx	r3
   10914:	4b25      	ldr	r3, [pc, #148]	; (109ac <hif_isr+0x4c4>)
   10916:	0018      	movs	r0, r3
   10918:	4b1f      	ldr	r3, [pc, #124]	; (10998 <hif_isr+0x4b0>)
   1091a:	4798      	blx	r3
   1091c:	4b20      	ldr	r3, [pc, #128]	; (109a0 <hif_isr+0x4b8>)
   1091e:	0018      	movs	r0, r3
   10920:	4b1d      	ldr	r3, [pc, #116]	; (10998 <hif_isr+0x4b0>)
   10922:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   10924:	230f      	movs	r3, #15
   10926:	18fb      	adds	r3, r7, r3
   10928:	22fe      	movs	r2, #254	; 0xfe
   1092a:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   1092c:	e024      	b.n	10978 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   1092e:	4a20      	ldr	r2, [pc, #128]	; (109b0 <hif_isr+0x4c8>)
   10930:	4917      	ldr	r1, [pc, #92]	; (10990 <hif_isr+0x4a8>)
   10932:	4b18      	ldr	r3, [pc, #96]	; (10994 <hif_isr+0x4ac>)
   10934:	0018      	movs	r0, r3
   10936:	4b18      	ldr	r3, [pc, #96]	; (10998 <hif_isr+0x4b0>)
   10938:	4798      	blx	r3
   1093a:	68ba      	ldr	r2, [r7, #8]
   1093c:	4b1d      	ldr	r3, [pc, #116]	; (109b4 <hif_isr+0x4cc>)
   1093e:	0011      	movs	r1, r2
   10940:	0018      	movs	r0, r3
   10942:	4b15      	ldr	r3, [pc, #84]	; (10998 <hif_isr+0x4b0>)
   10944:	4798      	blx	r3
   10946:	4b16      	ldr	r3, [pc, #88]	; (109a0 <hif_isr+0x4b8>)
   10948:	0018      	movs	r0, r3
   1094a:	4b13      	ldr	r3, [pc, #76]	; (10998 <hif_isr+0x4b0>)
   1094c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1094e:	230f      	movs	r3, #15
   10950:	18fb      	adds	r3, r7, r3
   10952:	22f4      	movs	r2, #244	; 0xf4
   10954:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   10956:	e00f      	b.n	10978 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   10958:	4a17      	ldr	r2, [pc, #92]	; (109b8 <hif_isr+0x4d0>)
   1095a:	490d      	ldr	r1, [pc, #52]	; (10990 <hif_isr+0x4a8>)
   1095c:	4b0d      	ldr	r3, [pc, #52]	; (10994 <hif_isr+0x4ac>)
   1095e:	0018      	movs	r0, r3
   10960:	4b0d      	ldr	r3, [pc, #52]	; (10998 <hif_isr+0x4b0>)
   10962:	4798      	blx	r3
   10964:	4b15      	ldr	r3, [pc, #84]	; (109bc <hif_isr+0x4d4>)
   10966:	0018      	movs	r0, r3
   10968:	4b0b      	ldr	r3, [pc, #44]	; (10998 <hif_isr+0x4b0>)
   1096a:	4798      	blx	r3
   1096c:	4b0c      	ldr	r3, [pc, #48]	; (109a0 <hif_isr+0x4b8>)
   1096e:	0018      	movs	r0, r3
   10970:	4b09      	ldr	r3, [pc, #36]	; (10998 <hif_isr+0x4b0>)
   10972:	4798      	blx	r3
		goto ERR1;
   10974:	e000      	b.n	10978 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   10976:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   10978:	230f      	movs	r3, #15
   1097a:	18fb      	adds	r3, r7, r3
   1097c:	781b      	ldrb	r3, [r3, #0]
   1097e:	b25b      	sxtb	r3, r3
}
   10980:	0018      	movs	r0, r3
   10982:	46bd      	mov	sp, r7
   10984:	b005      	add	sp, #20
   10986:	bd90      	pop	{r4, r7, pc}
   10988:	20005754 	.word	0x20005754
   1098c:	00000216 	.word	0x00000216
   10990:	00028504 	.word	0x00028504
   10994:	000281f4 	.word	0x000281f4
   10998:	0000d14d 	.word	0x0000d14d
   1099c:	00028370 	.word	0x00028370
   109a0:	000281f0 	.word	0x000281f0
   109a4:	0000ff7d 	.word	0x0000ff7d
   109a8:	0000021d 	.word	0x0000021d
   109ac:	0002839c 	.word	0x0002839c
   109b0:	00000225 	.word	0x00000225
   109b4:	000283b0 	.word	0x000283b0
   109b8:	0000022e 	.word	0x0000022e
   109bc:	000283cc 	.word	0x000283cc

000109c0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   109c0:	b590      	push	{r4, r7, lr}
   109c2:	b083      	sub	sp, #12
   109c4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   109c6:	1dfb      	adds	r3, r7, #7
   109c8:	2200      	movs	r2, #0
   109ca:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   109cc:	4b1c      	ldr	r3, [pc, #112]	; (10a40 <hif_handle_isr+0x80>)
   109ce:	2200      	movs	r2, #0
   109d0:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   109d2:	e024      	b.n	10a1e <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   109d4:	4b1a      	ldr	r3, [pc, #104]	; (10a40 <hif_handle_isr+0x80>)
   109d6:	78db      	ldrb	r3, [r3, #3]
   109d8:	b2db      	uxtb	r3, r3
   109da:	3b01      	subs	r3, #1
   109dc:	b2da      	uxtb	r2, r3
   109de:	4b18      	ldr	r3, [pc, #96]	; (10a40 <hif_handle_isr+0x80>)
   109e0:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   109e2:	1dfc      	adds	r4, r7, #7
   109e4:	4b17      	ldr	r3, [pc, #92]	; (10a44 <hif_handle_isr+0x84>)
   109e6:	4798      	blx	r3
   109e8:	0003      	movs	r3, r0
   109ea:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   109ec:	1dfb      	adds	r3, r7, #7
   109ee:	781b      	ldrb	r3, [r3, #0]
   109f0:	b25b      	sxtb	r3, r3
   109f2:	2b00      	cmp	r3, #0
   109f4:	d100      	bne.n	109f8 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   109f6:	e012      	b.n	10a1e <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   109f8:	4a13      	ldr	r2, [pc, #76]	; (10a48 <hif_handle_isr+0x88>)
   109fa:	4914      	ldr	r1, [pc, #80]	; (10a4c <hif_handle_isr+0x8c>)
   109fc:	4b14      	ldr	r3, [pc, #80]	; (10a50 <hif_handle_isr+0x90>)
   109fe:	0018      	movs	r0, r3
   10a00:	4b14      	ldr	r3, [pc, #80]	; (10a54 <hif_handle_isr+0x94>)
   10a02:	4798      	blx	r3
   10a04:	1dfb      	adds	r3, r7, #7
   10a06:	2200      	movs	r2, #0
   10a08:	569a      	ldrsb	r2, [r3, r2]
   10a0a:	4b13      	ldr	r3, [pc, #76]	; (10a58 <hif_handle_isr+0x98>)
   10a0c:	0011      	movs	r1, r2
   10a0e:	0018      	movs	r0, r3
   10a10:	4b10      	ldr	r3, [pc, #64]	; (10a54 <hif_handle_isr+0x94>)
   10a12:	4798      	blx	r3
   10a14:	4b11      	ldr	r3, [pc, #68]	; (10a5c <hif_handle_isr+0x9c>)
   10a16:	0018      	movs	r0, r3
   10a18:	4b0e      	ldr	r3, [pc, #56]	; (10a54 <hif_handle_isr+0x94>)
   10a1a:	4798      	blx	r3
			ret = hif_isr();
   10a1c:	e7e1      	b.n	109e2 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   10a1e:	4b08      	ldr	r3, [pc, #32]	; (10a40 <hif_handle_isr+0x80>)
   10a20:	78db      	ldrb	r3, [r3, #3]
   10a22:	b2db      	uxtb	r3, r3
   10a24:	2b00      	cmp	r3, #0
   10a26:	d004      	beq.n	10a32 <hif_handle_isr+0x72>
   10a28:	4b05      	ldr	r3, [pc, #20]	; (10a40 <hif_handle_isr+0x80>)
   10a2a:	791b      	ldrb	r3, [r3, #4]
   10a2c:	b2db      	uxtb	r3, r3
   10a2e:	2b00      	cmp	r3, #0
   10a30:	d0d0      	beq.n	109d4 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   10a32:	1dfb      	adds	r3, r7, #7
   10a34:	781b      	ldrb	r3, [r3, #0]
   10a36:	b25b      	sxtb	r3, r3
}
   10a38:	0018      	movs	r0, r3
   10a3a:	46bd      	mov	sp, r7
   10a3c:	b003      	add	sp, #12
   10a3e:	bd90      	pop	{r4, r7, pc}
   10a40:	20005754 	.word	0x20005754
   10a44:	000104e9 	.word	0x000104e9
   10a48:	00000257 	.word	0x00000257
   10a4c:	0002850c 	.word	0x0002850c
   10a50:	000281f4 	.word	0x000281f4
   10a54:	0000d14d 	.word	0x0000d14d
   10a58:	000283f0 	.word	0x000283f0
   10a5c:	000281f0 	.word	0x000281f0

00010a60 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   10a60:	b590      	push	{r4, r7, lr}
   10a62:	b087      	sub	sp, #28
   10a64:	af00      	add	r7, sp, #0
   10a66:	60f8      	str	r0, [r7, #12]
   10a68:	60b9      	str	r1, [r7, #8]
   10a6a:	0019      	movs	r1, r3
   10a6c:	1dbb      	adds	r3, r7, #6
   10a6e:	801a      	strh	r2, [r3, #0]
   10a70:	1d7b      	adds	r3, r7, #5
   10a72:	1c0a      	adds	r2, r1, #0
   10a74:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   10a76:	2317      	movs	r3, #23
   10a78:	18fb      	adds	r3, r7, r3
   10a7a:	2200      	movs	r2, #0
   10a7c:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   10a7e:	68fb      	ldr	r3, [r7, #12]
   10a80:	2b00      	cmp	r3, #0
   10a82:	d006      	beq.n	10a92 <hif_receive+0x32>
   10a84:	68bb      	ldr	r3, [r7, #8]
   10a86:	2b00      	cmp	r3, #0
   10a88:	d003      	beq.n	10a92 <hif_receive+0x32>
   10a8a:	1dbb      	adds	r3, r7, #6
   10a8c:	881b      	ldrh	r3, [r3, #0]
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d11e      	bne.n	10ad0 <hif_receive+0x70>
	{
		if(isDone)
   10a92:	1d7b      	adds	r3, r7, #5
   10a94:	781b      	ldrb	r3, [r3, #0]
   10a96:	2b00      	cmp	r3, #0
   10a98:	d006      	beq.n	10aa8 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   10a9a:	2317      	movs	r3, #23
   10a9c:	18fc      	adds	r4, r7, r3
   10a9e:	4b45      	ldr	r3, [pc, #276]	; (10bb4 <hif_receive+0x154>)
   10aa0:	4798      	blx	r3
   10aa2:	0003      	movs	r3, r0
   10aa4:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   10aa6:	e07c      	b.n	10ba2 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   10aa8:	2317      	movs	r3, #23
   10aaa:	18fb      	adds	r3, r7, r3
   10aac:	22f4      	movs	r2, #244	; 0xf4
   10aae:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   10ab0:	239e      	movs	r3, #158	; 0x9e
   10ab2:	009a      	lsls	r2, r3, #2
   10ab4:	4940      	ldr	r1, [pc, #256]	; (10bb8 <hif_receive+0x158>)
   10ab6:	4b41      	ldr	r3, [pc, #260]	; (10bbc <hif_receive+0x15c>)
   10ab8:	0018      	movs	r0, r3
   10aba:	4b41      	ldr	r3, [pc, #260]	; (10bc0 <hif_receive+0x160>)
   10abc:	4798      	blx	r3
   10abe:	4b41      	ldr	r3, [pc, #260]	; (10bc4 <hif_receive+0x164>)
   10ac0:	0018      	movs	r0, r3
   10ac2:	4b3f      	ldr	r3, [pc, #252]	; (10bc0 <hif_receive+0x160>)
   10ac4:	4798      	blx	r3
   10ac6:	4b40      	ldr	r3, [pc, #256]	; (10bc8 <hif_receive+0x168>)
   10ac8:	0018      	movs	r0, r3
   10aca:	4b3d      	ldr	r3, [pc, #244]	; (10bc0 <hif_receive+0x160>)
   10acc:	4798      	blx	r3
		goto ERR1;
   10ace:	e068      	b.n	10ba2 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   10ad0:	1dbb      	adds	r3, r7, #6
   10ad2:	881a      	ldrh	r2, [r3, #0]
   10ad4:	4b3d      	ldr	r3, [pc, #244]	; (10bcc <hif_receive+0x16c>)
   10ad6:	68db      	ldr	r3, [r3, #12]
   10ad8:	429a      	cmp	r2, r3
   10ada:	d917      	bls.n	10b0c <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   10adc:	2317      	movs	r3, #23
   10ade:	18fb      	adds	r3, r7, r3
   10ae0:	22f4      	movs	r2, #244	; 0xf4
   10ae2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   10ae4:	23a0      	movs	r3, #160	; 0xa0
   10ae6:	009a      	lsls	r2, r3, #2
   10ae8:	4933      	ldr	r1, [pc, #204]	; (10bb8 <hif_receive+0x158>)
   10aea:	4b34      	ldr	r3, [pc, #208]	; (10bbc <hif_receive+0x15c>)
   10aec:	0018      	movs	r0, r3
   10aee:	4b34      	ldr	r3, [pc, #208]	; (10bc0 <hif_receive+0x160>)
   10af0:	4798      	blx	r3
   10af2:	1dbb      	adds	r3, r7, #6
   10af4:	8819      	ldrh	r1, [r3, #0]
   10af6:	4b35      	ldr	r3, [pc, #212]	; (10bcc <hif_receive+0x16c>)
   10af8:	68da      	ldr	r2, [r3, #12]
   10afa:	4b35      	ldr	r3, [pc, #212]	; (10bd0 <hif_receive+0x170>)
   10afc:	0018      	movs	r0, r3
   10afe:	4b30      	ldr	r3, [pc, #192]	; (10bc0 <hif_receive+0x160>)
   10b00:	4798      	blx	r3
   10b02:	4b31      	ldr	r3, [pc, #196]	; (10bc8 <hif_receive+0x168>)
   10b04:	0018      	movs	r0, r3
   10b06:	4b2e      	ldr	r3, [pc, #184]	; (10bc0 <hif_receive+0x160>)
   10b08:	4798      	blx	r3
		goto ERR1;
   10b0a:	e04a      	b.n	10ba2 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   10b0c:	4b2f      	ldr	r3, [pc, #188]	; (10bcc <hif_receive+0x16c>)
   10b0e:	689a      	ldr	r2, [r3, #8]
   10b10:	68fb      	ldr	r3, [r7, #12]
   10b12:	429a      	cmp	r2, r3
   10b14:	d80a      	bhi.n	10b2c <hif_receive+0xcc>
   10b16:	1dbb      	adds	r3, r7, #6
   10b18:	881a      	ldrh	r2, [r3, #0]
   10b1a:	68fb      	ldr	r3, [r7, #12]
   10b1c:	18d2      	adds	r2, r2, r3
   10b1e:	4b2b      	ldr	r3, [pc, #172]	; (10bcc <hif_receive+0x16c>)
   10b20:	6899      	ldr	r1, [r3, #8]
   10b22:	4b2a      	ldr	r3, [pc, #168]	; (10bcc <hif_receive+0x16c>)
   10b24:	68db      	ldr	r3, [r3, #12]
   10b26:	18cb      	adds	r3, r1, r3
   10b28:	429a      	cmp	r2, r3
   10b2a:	d912      	bls.n	10b52 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   10b2c:	2317      	movs	r3, #23
   10b2e:	18fb      	adds	r3, r7, r3
   10b30:	22f4      	movs	r2, #244	; 0xf4
   10b32:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   10b34:	4a27      	ldr	r2, [pc, #156]	; (10bd4 <hif_receive+0x174>)
   10b36:	4920      	ldr	r1, [pc, #128]	; (10bb8 <hif_receive+0x158>)
   10b38:	4b20      	ldr	r3, [pc, #128]	; (10bbc <hif_receive+0x15c>)
   10b3a:	0018      	movs	r0, r3
   10b3c:	4b20      	ldr	r3, [pc, #128]	; (10bc0 <hif_receive+0x160>)
   10b3e:	4798      	blx	r3
   10b40:	4b25      	ldr	r3, [pc, #148]	; (10bd8 <hif_receive+0x178>)
   10b42:	0018      	movs	r0, r3
   10b44:	4b1e      	ldr	r3, [pc, #120]	; (10bc0 <hif_receive+0x160>)
   10b46:	4798      	blx	r3
   10b48:	4b1f      	ldr	r3, [pc, #124]	; (10bc8 <hif_receive+0x168>)
   10b4a:	0018      	movs	r0, r3
   10b4c:	4b1c      	ldr	r3, [pc, #112]	; (10bc0 <hif_receive+0x160>)
   10b4e:	4798      	blx	r3
		goto ERR1;
   10b50:	e027      	b.n	10ba2 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   10b52:	1dbb      	adds	r3, r7, #6
   10b54:	881a      	ldrh	r2, [r3, #0]
   10b56:	2317      	movs	r3, #23
   10b58:	18fc      	adds	r4, r7, r3
   10b5a:	68b9      	ldr	r1, [r7, #8]
   10b5c:	68fb      	ldr	r3, [r7, #12]
   10b5e:	0018      	movs	r0, r3
   10b60:	4b1e      	ldr	r3, [pc, #120]	; (10bdc <hif_receive+0x17c>)
   10b62:	4798      	blx	r3
   10b64:	0003      	movs	r3, r0
   10b66:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   10b68:	2317      	movs	r3, #23
   10b6a:	18fb      	adds	r3, r7, r3
   10b6c:	781b      	ldrb	r3, [r3, #0]
   10b6e:	b25b      	sxtb	r3, r3
   10b70:	2b00      	cmp	r3, #0
   10b72:	d115      	bne.n	10ba0 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   10b74:	4b15      	ldr	r3, [pc, #84]	; (10bcc <hif_receive+0x16c>)
   10b76:	689a      	ldr	r2, [r3, #8]
   10b78:	4b14      	ldr	r3, [pc, #80]	; (10bcc <hif_receive+0x16c>)
   10b7a:	68db      	ldr	r3, [r3, #12]
   10b7c:	18d2      	adds	r2, r2, r3
   10b7e:	1dbb      	adds	r3, r7, #6
   10b80:	8819      	ldrh	r1, [r3, #0]
   10b82:	68fb      	ldr	r3, [r7, #12]
   10b84:	18cb      	adds	r3, r1, r3
   10b86:	429a      	cmp	r2, r3
   10b88:	d003      	beq.n	10b92 <hif_receive+0x132>
   10b8a:	1d7b      	adds	r3, r7, #5
   10b8c:	781b      	ldrb	r3, [r3, #0]
   10b8e:	2b00      	cmp	r3, #0
   10b90:	d007      	beq.n	10ba2 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   10b92:	2317      	movs	r3, #23
   10b94:	18fc      	adds	r4, r7, r3
   10b96:	4b07      	ldr	r3, [pc, #28]	; (10bb4 <hif_receive+0x154>)
   10b98:	4798      	blx	r3
   10b9a:	0003      	movs	r3, r0
   10b9c:	7023      	strb	r3, [r4, #0]
   10b9e:	e000      	b.n	10ba2 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   10ba0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   10ba2:	2317      	movs	r3, #23
   10ba4:	18fb      	adds	r3, r7, r3
   10ba6:	781b      	ldrb	r3, [r3, #0]
   10ba8:	b25b      	sxtb	r3, r3
}
   10baa:	0018      	movs	r0, r3
   10bac:	46bd      	mov	sp, r7
   10bae:	b007      	add	sp, #28
   10bb0:	bd90      	pop	{r4, r7, pc}
   10bb2:	46c0      	nop			; (mov r8, r8)
   10bb4:	0000ff7d 	.word	0x0000ff7d
   10bb8:	0002851c 	.word	0x0002851c
   10bbc:	000281f4 	.word	0x000281f4
   10bc0:	0000d14d 	.word	0x0000d14d
   10bc4:	00028420 	.word	0x00028420
   10bc8:	000281f0 	.word	0x000281f0
   10bcc:	20005754 	.word	0x20005754
   10bd0:	00028440 	.word	0x00028440
   10bd4:	00000286 	.word	0x00000286
   10bd8:	00028488 	.word	0x00028488
   10bdc:	00011fe9 	.word	0x00011fe9

00010be0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   10be0:	b580      	push	{r7, lr}
   10be2:	b084      	sub	sp, #16
   10be4:	af00      	add	r7, sp, #0
   10be6:	0002      	movs	r2, r0
   10be8:	6039      	str	r1, [r7, #0]
   10bea:	1dfb      	adds	r3, r7, #7
   10bec:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   10bee:	230f      	movs	r3, #15
   10bf0:	18fb      	adds	r3, r7, r3
   10bf2:	2200      	movs	r2, #0
   10bf4:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   10bf6:	1dfb      	adds	r3, r7, #7
   10bf8:	781b      	ldrb	r3, [r3, #0]
   10bfa:	2b07      	cmp	r3, #7
   10bfc:	d820      	bhi.n	10c40 <hif_register_cb+0x60>
   10bfe:	009a      	lsls	r2, r3, #2
   10c00:	4b1e      	ldr	r3, [pc, #120]	; (10c7c <hif_register_cb+0x9c>)
   10c02:	18d3      	adds	r3, r2, r3
   10c04:	681b      	ldr	r3, [r3, #0]
   10c06:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   10c08:	4b1d      	ldr	r3, [pc, #116]	; (10c80 <hif_register_cb+0xa0>)
   10c0a:	683a      	ldr	r2, [r7, #0]
   10c0c:	615a      	str	r2, [r3, #20]
			break;
   10c0e:	e02d      	b.n	10c6c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   10c10:	4b1b      	ldr	r3, [pc, #108]	; (10c80 <hif_register_cb+0xa0>)
   10c12:	683a      	ldr	r2, [r7, #0]
   10c14:	611a      	str	r2, [r3, #16]
			break;
   10c16:	e029      	b.n	10c6c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   10c18:	4b19      	ldr	r3, [pc, #100]	; (10c80 <hif_register_cb+0xa0>)
   10c1a:	683a      	ldr	r2, [r7, #0]
   10c1c:	619a      	str	r2, [r3, #24]
			break;
   10c1e:	e025      	b.n	10c6c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   10c20:	4b17      	ldr	r3, [pc, #92]	; (10c80 <hif_register_cb+0xa0>)
   10c22:	683a      	ldr	r2, [r7, #0]
   10c24:	621a      	str	r2, [r3, #32]
			break;
   10c26:	e021      	b.n	10c6c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   10c28:	4b15      	ldr	r3, [pc, #84]	; (10c80 <hif_register_cb+0xa0>)
   10c2a:	683a      	ldr	r2, [r7, #0]
   10c2c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   10c2e:	e01d      	b.n	10c6c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   10c30:	4b13      	ldr	r3, [pc, #76]	; (10c80 <hif_register_cb+0xa0>)
   10c32:	683a      	ldr	r2, [r7, #0]
   10c34:	61da      	str	r2, [r3, #28]
			break;
   10c36:	e019      	b.n	10c6c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   10c38:	4b11      	ldr	r3, [pc, #68]	; (10c80 <hif_register_cb+0xa0>)
   10c3a:	683a      	ldr	r2, [r7, #0]
   10c3c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   10c3e:	e015      	b.n	10c6c <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   10c40:	4a10      	ldr	r2, [pc, #64]	; (10c84 <hif_register_cb+0xa4>)
   10c42:	4911      	ldr	r1, [pc, #68]	; (10c88 <hif_register_cb+0xa8>)
   10c44:	4b11      	ldr	r3, [pc, #68]	; (10c8c <hif_register_cb+0xac>)
   10c46:	0018      	movs	r0, r3
   10c48:	4b11      	ldr	r3, [pc, #68]	; (10c90 <hif_register_cb+0xb0>)
   10c4a:	4798      	blx	r3
   10c4c:	1dfb      	adds	r3, r7, #7
   10c4e:	781a      	ldrb	r2, [r3, #0]
   10c50:	4b10      	ldr	r3, [pc, #64]	; (10c94 <hif_register_cb+0xb4>)
   10c52:	0011      	movs	r1, r2
   10c54:	0018      	movs	r0, r3
   10c56:	4b0e      	ldr	r3, [pc, #56]	; (10c90 <hif_register_cb+0xb0>)
   10c58:	4798      	blx	r3
   10c5a:	4b0f      	ldr	r3, [pc, #60]	; (10c98 <hif_register_cb+0xb8>)
   10c5c:	0018      	movs	r0, r3
   10c5e:	4b0c      	ldr	r3, [pc, #48]	; (10c90 <hif_register_cb+0xb0>)
   10c60:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   10c62:	230f      	movs	r3, #15
   10c64:	18fb      	adds	r3, r7, r3
   10c66:	22f4      	movs	r2, #244	; 0xf4
   10c68:	701a      	strb	r2, [r3, #0]
			break;
   10c6a:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   10c6c:	230f      	movs	r3, #15
   10c6e:	18fb      	adds	r3, r7, r3
   10c70:	781b      	ldrb	r3, [r3, #0]
   10c72:	b25b      	sxtb	r3, r3
}
   10c74:	0018      	movs	r0, r3
   10c76:	46bd      	mov	sp, r7
   10c78:	b004      	add	sp, #16
   10c7a:	bd80      	pop	{r7, pc}
   10c7c:	000284d8 	.word	0x000284d8
   10c80:	20005754 	.word	0x20005754
   10c84:	000002be 	.word	0x000002be
   10c88:	00028528 	.word	0x00028528
   10c8c:	000281f4 	.word	0x000281f4
   10c90:	0000d14d 	.word	0x0000d14d
   10c94:	000284cc 	.word	0x000284cc
   10c98:	000281f0 	.word	0x000281f0

00010c9c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   10c9c:	b590      	push	{r4, r7, lr}
   10c9e:	b0af      	sub	sp, #188	; 0xbc
   10ca0:	af02      	add	r7, sp, #8
   10ca2:	603a      	str	r2, [r7, #0]
   10ca4:	1dfb      	adds	r3, r7, #7
   10ca6:	1c02      	adds	r2, r0, #0
   10ca8:	701a      	strb	r2, [r3, #0]
   10caa:	1d3b      	adds	r3, r7, #4
   10cac:	1c0a      	adds	r2, r1, #0
   10cae:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   10cb0:	1dfb      	adds	r3, r7, #7
   10cb2:	781b      	ldrb	r3, [r3, #0]
   10cb4:	2b2c      	cmp	r3, #44	; 0x2c
   10cb6:	d116      	bne.n	10ce6 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   10cb8:	23a4      	movs	r3, #164	; 0xa4
   10cba:	18f9      	adds	r1, r7, r3
   10cbc:	6838      	ldr	r0, [r7, #0]
   10cbe:	2300      	movs	r3, #0
   10cc0:	2204      	movs	r2, #4
   10cc2:	4cca      	ldr	r4, [pc, #808]	; (10fec <m2m_wifi_cb+0x350>)
   10cc4:	47a0      	blx	r4
   10cc6:	1e03      	subs	r3, r0, #0
   10cc8:	d000      	beq.n	10ccc <m2m_wifi_cb+0x30>
   10cca:	e1b4      	b.n	11036 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   10ccc:	4bc8      	ldr	r3, [pc, #800]	; (10ff0 <m2m_wifi_cb+0x354>)
   10cce:	681b      	ldr	r3, [r3, #0]
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d100      	bne.n	10cd6 <m2m_wifi_cb+0x3a>
   10cd4:	e1af      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   10cd6:	4bc6      	ldr	r3, [pc, #792]	; (10ff0 <m2m_wifi_cb+0x354>)
   10cd8:	681b      	ldr	r3, [r3, #0]
   10cda:	22a4      	movs	r2, #164	; 0xa4
   10cdc:	18ba      	adds	r2, r7, r2
   10cde:	0011      	movs	r1, r2
   10ce0:	202c      	movs	r0, #44	; 0x2c
   10ce2:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   10ce4:	e1a7      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   10ce6:	1dfb      	adds	r3, r7, #7
   10ce8:	781b      	ldrb	r3, [r3, #0]
   10cea:	2b1b      	cmp	r3, #27
   10cec:	d116      	bne.n	10d1c <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   10cee:	239c      	movs	r3, #156	; 0x9c
   10cf0:	18f9      	adds	r1, r7, r3
   10cf2:	6838      	ldr	r0, [r7, #0]
   10cf4:	2300      	movs	r3, #0
   10cf6:	2208      	movs	r2, #8
   10cf8:	4cbc      	ldr	r4, [pc, #752]	; (10fec <m2m_wifi_cb+0x350>)
   10cfa:	47a0      	blx	r4
   10cfc:	1e03      	subs	r3, r0, #0
   10cfe:	d000      	beq.n	10d02 <m2m_wifi_cb+0x66>
   10d00:	e199      	b.n	11036 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   10d02:	4bbb      	ldr	r3, [pc, #748]	; (10ff0 <m2m_wifi_cb+0x354>)
   10d04:	681b      	ldr	r3, [r3, #0]
   10d06:	2b00      	cmp	r3, #0
   10d08:	d100      	bne.n	10d0c <m2m_wifi_cb+0x70>
   10d0a:	e194      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   10d0c:	4bb8      	ldr	r3, [pc, #736]	; (10ff0 <m2m_wifi_cb+0x354>)
   10d0e:	681b      	ldr	r3, [r3, #0]
   10d10:	229c      	movs	r2, #156	; 0x9c
   10d12:	18ba      	adds	r2, r7, r2
   10d14:	0011      	movs	r1, r2
   10d16:	201b      	movs	r0, #27
   10d18:	4798      	blx	r3
}
   10d1a:	e18c      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   10d1c:	1dfb      	adds	r3, r7, #7
   10d1e:	781b      	ldrb	r3, [r3, #0]
   10d20:	2b06      	cmp	r3, #6
   10d22:	d116      	bne.n	10d52 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   10d24:	230c      	movs	r3, #12
   10d26:	18f9      	adds	r1, r7, r3
   10d28:	6838      	ldr	r0, [r7, #0]
   10d2a:	2301      	movs	r3, #1
   10d2c:	2230      	movs	r2, #48	; 0x30
   10d2e:	4caf      	ldr	r4, [pc, #700]	; (10fec <m2m_wifi_cb+0x350>)
   10d30:	47a0      	blx	r4
   10d32:	1e03      	subs	r3, r0, #0
   10d34:	d000      	beq.n	10d38 <m2m_wifi_cb+0x9c>
   10d36:	e17e      	b.n	11036 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   10d38:	4bad      	ldr	r3, [pc, #692]	; (10ff0 <m2m_wifi_cb+0x354>)
   10d3a:	681b      	ldr	r3, [r3, #0]
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	d100      	bne.n	10d42 <m2m_wifi_cb+0xa6>
   10d40:	e179      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   10d42:	4bab      	ldr	r3, [pc, #684]	; (10ff0 <m2m_wifi_cb+0x354>)
   10d44:	681b      	ldr	r3, [r3, #0]
   10d46:	220c      	movs	r2, #12
   10d48:	18ba      	adds	r2, r7, r2
   10d4a:	0011      	movs	r1, r2
   10d4c:	2006      	movs	r0, #6
   10d4e:	4798      	blx	r3
}
   10d50:	e171      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   10d52:	1dfb      	adds	r3, r7, #7
   10d54:	781b      	ldrb	r3, [r3, #0]
   10d56:	2b0e      	cmp	r3, #14
   10d58:	d100      	bne.n	10d5c <m2m_wifi_cb+0xc0>
   10d5a:	e16c      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   10d5c:	1dfb      	adds	r3, r7, #7
   10d5e:	781b      	ldrb	r3, [r3, #0]
   10d60:	2b32      	cmp	r3, #50	; 0x32
   10d62:	d116      	bne.n	10d92 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   10d64:	2384      	movs	r3, #132	; 0x84
   10d66:	18f9      	adds	r1, r7, r3
   10d68:	6838      	ldr	r0, [r7, #0]
   10d6a:	2300      	movs	r3, #0
   10d6c:	2218      	movs	r2, #24
   10d6e:	4c9f      	ldr	r4, [pc, #636]	; (10fec <m2m_wifi_cb+0x350>)
   10d70:	47a0      	blx	r4
   10d72:	1e03      	subs	r3, r0, #0
   10d74:	d000      	beq.n	10d78 <m2m_wifi_cb+0xdc>
   10d76:	e15e      	b.n	11036 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   10d78:	4b9d      	ldr	r3, [pc, #628]	; (10ff0 <m2m_wifi_cb+0x354>)
   10d7a:	681b      	ldr	r3, [r3, #0]
   10d7c:	2b00      	cmp	r3, #0
   10d7e:	d100      	bne.n	10d82 <m2m_wifi_cb+0xe6>
   10d80:	e159      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   10d82:	4b9b      	ldr	r3, [pc, #620]	; (10ff0 <m2m_wifi_cb+0x354>)
   10d84:	681b      	ldr	r3, [r3, #0]
   10d86:	2284      	movs	r2, #132	; 0x84
   10d88:	18ba      	adds	r2, r7, r2
   10d8a:	0011      	movs	r1, r2
   10d8c:	2032      	movs	r0, #50	; 0x32
   10d8e:	4798      	blx	r3
}
   10d90:	e151      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   10d92:	1dfb      	adds	r3, r7, #7
   10d94:	781b      	ldrb	r3, [r3, #0]
   10d96:	2b2f      	cmp	r3, #47	; 0x2f
   10d98:	d11d      	bne.n	10dd6 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   10d9a:	230c      	movs	r3, #12
   10d9c:	18fb      	adds	r3, r7, r3
   10d9e:	2264      	movs	r2, #100	; 0x64
   10da0:	2100      	movs	r1, #0
   10da2:	0018      	movs	r0, r3
   10da4:	4b93      	ldr	r3, [pc, #588]	; (10ff4 <m2m_wifi_cb+0x358>)
   10da6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   10da8:	230c      	movs	r3, #12
   10daa:	18f9      	adds	r1, r7, r3
   10dac:	6838      	ldr	r0, [r7, #0]
   10dae:	2300      	movs	r3, #0
   10db0:	2264      	movs	r2, #100	; 0x64
   10db2:	4c8e      	ldr	r4, [pc, #568]	; (10fec <m2m_wifi_cb+0x350>)
   10db4:	47a0      	blx	r4
   10db6:	1e03      	subs	r3, r0, #0
   10db8:	d000      	beq.n	10dbc <m2m_wifi_cb+0x120>
   10dba:	e13c      	b.n	11036 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   10dbc:	4b8c      	ldr	r3, [pc, #560]	; (10ff0 <m2m_wifi_cb+0x354>)
   10dbe:	681b      	ldr	r3, [r3, #0]
   10dc0:	2b00      	cmp	r3, #0
   10dc2:	d100      	bne.n	10dc6 <m2m_wifi_cb+0x12a>
   10dc4:	e137      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   10dc6:	4b8a      	ldr	r3, [pc, #552]	; (10ff0 <m2m_wifi_cb+0x354>)
   10dc8:	681b      	ldr	r3, [r3, #0]
   10dca:	220c      	movs	r2, #12
   10dcc:	18ba      	adds	r2, r7, r2
   10dce:	0011      	movs	r1, r2
   10dd0:	202f      	movs	r0, #47	; 0x2f
   10dd2:	4798      	blx	r3
}
   10dd4:	e12f      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   10dd6:	1dfb      	adds	r3, r7, #7
   10dd8:	781b      	ldrb	r3, [r3, #0]
   10dda:	2b34      	cmp	r3, #52	; 0x34
   10ddc:	d137      	bne.n	10e4e <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   10dde:	2380      	movs	r3, #128	; 0x80
   10de0:	18f9      	adds	r1, r7, r3
   10de2:	6838      	ldr	r0, [r7, #0]
   10de4:	2300      	movs	r3, #0
   10de6:	2204      	movs	r2, #4
   10de8:	4c80      	ldr	r4, [pc, #512]	; (10fec <m2m_wifi_cb+0x350>)
   10dea:	47a0      	blx	r4
   10dec:	1e03      	subs	r3, r0, #0
   10dee:	d000      	beq.n	10df2 <m2m_wifi_cb+0x156>
   10df0:	e121      	b.n	11036 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   10df2:	4b81      	ldr	r3, [pc, #516]	; (10ff8 <m2m_wifi_cb+0x35c>)
   10df4:	0018      	movs	r0, r3
   10df6:	4b81      	ldr	r3, [pc, #516]	; (10ffc <m2m_wifi_cb+0x360>)
   10df8:	4798      	blx	r3
   10dfa:	2380      	movs	r3, #128	; 0x80
   10dfc:	18fb      	adds	r3, r7, r3
   10dfe:	681b      	ldr	r3, [r3, #0]
   10e00:	0e1b      	lsrs	r3, r3, #24
   10e02:	b2db      	uxtb	r3, r3
   10e04:	0019      	movs	r1, r3
   10e06:	2380      	movs	r3, #128	; 0x80
   10e08:	18fb      	adds	r3, r7, r3
   10e0a:	681b      	ldr	r3, [r3, #0]
   10e0c:	0c1b      	lsrs	r3, r3, #16
   10e0e:	b2db      	uxtb	r3, r3
   10e10:	001a      	movs	r2, r3
   10e12:	2380      	movs	r3, #128	; 0x80
   10e14:	18fb      	adds	r3, r7, r3
   10e16:	681b      	ldr	r3, [r3, #0]
   10e18:	0a1b      	lsrs	r3, r3, #8
   10e1a:	b2db      	uxtb	r3, r3
   10e1c:	001c      	movs	r4, r3
   10e1e:	2380      	movs	r3, #128	; 0x80
   10e20:	18fb      	adds	r3, r7, r3
   10e22:	681b      	ldr	r3, [r3, #0]
   10e24:	b2db      	uxtb	r3, r3
   10e26:	4876      	ldr	r0, [pc, #472]	; (11000 <m2m_wifi_cb+0x364>)
   10e28:	9300      	str	r3, [sp, #0]
   10e2a:	0023      	movs	r3, r4
   10e2c:	4c73      	ldr	r4, [pc, #460]	; (10ffc <m2m_wifi_cb+0x360>)
   10e2e:	47a0      	blx	r4
   10e30:	4b74      	ldr	r3, [pc, #464]	; (11004 <m2m_wifi_cb+0x368>)
   10e32:	0018      	movs	r0, r3
   10e34:	4b71      	ldr	r3, [pc, #452]	; (10ffc <m2m_wifi_cb+0x360>)
   10e36:	4798      	blx	r3
			if (gpfAppWifiCb)
   10e38:	4b6d      	ldr	r3, [pc, #436]	; (10ff0 <m2m_wifi_cb+0x354>)
   10e3a:	681b      	ldr	r3, [r3, #0]
   10e3c:	2b00      	cmp	r3, #0
   10e3e:	d100      	bne.n	10e42 <m2m_wifi_cb+0x1a6>
   10e40:	e0f9      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   10e42:	4b6b      	ldr	r3, [pc, #428]	; (10ff0 <m2m_wifi_cb+0x354>)
   10e44:	681b      	ldr	r3, [r3, #0]
   10e46:	2100      	movs	r1, #0
   10e48:	2034      	movs	r0, #52	; 0x34
   10e4a:	4798      	blx	r3
}
   10e4c:	e0f3      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   10e4e:	1dfb      	adds	r3, r7, #7
   10e50:	781b      	ldrb	r3, [r3, #0]
   10e52:	2b11      	cmp	r3, #17
   10e54:	d11e      	bne.n	10e94 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   10e56:	4b6c      	ldr	r3, [pc, #432]	; (11008 <m2m_wifi_cb+0x36c>)
   10e58:	2200      	movs	r2, #0
   10e5a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   10e5c:	237c      	movs	r3, #124	; 0x7c
   10e5e:	18f9      	adds	r1, r7, r3
   10e60:	6838      	ldr	r0, [r7, #0]
   10e62:	2300      	movs	r3, #0
   10e64:	2204      	movs	r2, #4
   10e66:	4c61      	ldr	r4, [pc, #388]	; (10fec <m2m_wifi_cb+0x350>)
   10e68:	47a0      	blx	r4
   10e6a:	1e03      	subs	r3, r0, #0
   10e6c:	d000      	beq.n	10e70 <m2m_wifi_cb+0x1d4>
   10e6e:	e0e2      	b.n	11036 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   10e70:	237c      	movs	r3, #124	; 0x7c
   10e72:	18fb      	adds	r3, r7, r3
   10e74:	781a      	ldrb	r2, [r3, #0]
   10e76:	4b65      	ldr	r3, [pc, #404]	; (1100c <m2m_wifi_cb+0x370>)
   10e78:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   10e7a:	4b5d      	ldr	r3, [pc, #372]	; (10ff0 <m2m_wifi_cb+0x354>)
   10e7c:	681b      	ldr	r3, [r3, #0]
   10e7e:	2b00      	cmp	r3, #0
   10e80:	d100      	bne.n	10e84 <m2m_wifi_cb+0x1e8>
   10e82:	e0d8      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   10e84:	4b5a      	ldr	r3, [pc, #360]	; (10ff0 <m2m_wifi_cb+0x354>)
   10e86:	681b      	ldr	r3, [r3, #0]
   10e88:	227c      	movs	r2, #124	; 0x7c
   10e8a:	18ba      	adds	r2, r7, r2
   10e8c:	0011      	movs	r1, r2
   10e8e:	2011      	movs	r0, #17
   10e90:	4798      	blx	r3
}
   10e92:	e0d0      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   10e94:	1dfb      	adds	r3, r7, #7
   10e96:	781b      	ldrb	r3, [r3, #0]
   10e98:	2b13      	cmp	r3, #19
   10e9a:	d116      	bne.n	10eca <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   10e9c:	230c      	movs	r3, #12
   10e9e:	18f9      	adds	r1, r7, r3
   10ea0:	6838      	ldr	r0, [r7, #0]
   10ea2:	2300      	movs	r3, #0
   10ea4:	222c      	movs	r2, #44	; 0x2c
   10ea6:	4c51      	ldr	r4, [pc, #324]	; (10fec <m2m_wifi_cb+0x350>)
   10ea8:	47a0      	blx	r4
   10eaa:	1e03      	subs	r3, r0, #0
   10eac:	d000      	beq.n	10eb0 <m2m_wifi_cb+0x214>
   10eae:	e0c2      	b.n	11036 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   10eb0:	4b4f      	ldr	r3, [pc, #316]	; (10ff0 <m2m_wifi_cb+0x354>)
   10eb2:	681b      	ldr	r3, [r3, #0]
   10eb4:	2b00      	cmp	r3, #0
   10eb6:	d100      	bne.n	10eba <m2m_wifi_cb+0x21e>
   10eb8:	e0bd      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   10eba:	4b4d      	ldr	r3, [pc, #308]	; (10ff0 <m2m_wifi_cb+0x354>)
   10ebc:	681b      	ldr	r3, [r3, #0]
   10ebe:	220c      	movs	r2, #12
   10ec0:	18ba      	adds	r2, r7, r2
   10ec2:	0011      	movs	r1, r2
   10ec4:	2013      	movs	r0, #19
   10ec6:	4798      	blx	r3
}
   10ec8:	e0b5      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   10eca:	1dfb      	adds	r3, r7, #7
   10ecc:	781b      	ldrb	r3, [r3, #0]
   10ece:	2b04      	cmp	r3, #4
   10ed0:	d116      	bne.n	10f00 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   10ed2:	23a8      	movs	r3, #168	; 0xa8
   10ed4:	18f9      	adds	r1, r7, r3
   10ed6:	6838      	ldr	r0, [r7, #0]
   10ed8:	2300      	movs	r3, #0
   10eda:	2204      	movs	r2, #4
   10edc:	4c43      	ldr	r4, [pc, #268]	; (10fec <m2m_wifi_cb+0x350>)
   10ede:	47a0      	blx	r4
   10ee0:	1e03      	subs	r3, r0, #0
   10ee2:	d000      	beq.n	10ee6 <m2m_wifi_cb+0x24a>
   10ee4:	e0a7      	b.n	11036 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   10ee6:	4b42      	ldr	r3, [pc, #264]	; (10ff0 <m2m_wifi_cb+0x354>)
   10ee8:	681b      	ldr	r3, [r3, #0]
   10eea:	2b00      	cmp	r3, #0
   10eec:	d100      	bne.n	10ef0 <m2m_wifi_cb+0x254>
   10eee:	e0a2      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   10ef0:	4b3f      	ldr	r3, [pc, #252]	; (10ff0 <m2m_wifi_cb+0x354>)
   10ef2:	681b      	ldr	r3, [r3, #0]
   10ef4:	22a8      	movs	r2, #168	; 0xa8
   10ef6:	18ba      	adds	r2, r7, r2
   10ef8:	0011      	movs	r1, r2
   10efa:	2004      	movs	r0, #4
   10efc:	4798      	blx	r3
}
   10efe:	e09a      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   10f00:	1dfb      	adds	r3, r7, #7
   10f02:	781b      	ldrb	r3, [r3, #0]
   10f04:	2b65      	cmp	r3, #101	; 0x65
   10f06:	d116      	bne.n	10f36 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   10f08:	23a8      	movs	r3, #168	; 0xa8
   10f0a:	18f9      	adds	r1, r7, r3
   10f0c:	6838      	ldr	r0, [r7, #0]
   10f0e:	2300      	movs	r3, #0
   10f10:	2204      	movs	r2, #4
   10f12:	4c36      	ldr	r4, [pc, #216]	; (10fec <m2m_wifi_cb+0x350>)
   10f14:	47a0      	blx	r4
   10f16:	1e03      	subs	r3, r0, #0
   10f18:	d000      	beq.n	10f1c <m2m_wifi_cb+0x280>
   10f1a:	e08c      	b.n	11036 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   10f1c:	4b34      	ldr	r3, [pc, #208]	; (10ff0 <m2m_wifi_cb+0x354>)
   10f1e:	681b      	ldr	r3, [r3, #0]
   10f20:	2b00      	cmp	r3, #0
   10f22:	d100      	bne.n	10f26 <m2m_wifi_cb+0x28a>
   10f24:	e087      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   10f26:	4b32      	ldr	r3, [pc, #200]	; (10ff0 <m2m_wifi_cb+0x354>)
   10f28:	681b      	ldr	r3, [r3, #0]
   10f2a:	22a8      	movs	r2, #168	; 0xa8
   10f2c:	18ba      	adds	r2, r7, r2
   10f2e:	0011      	movs	r1, r2
   10f30:	2065      	movs	r0, #101	; 0x65
   10f32:	4798      	blx	r3
}
   10f34:	e07f      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   10f36:	1dfb      	adds	r3, r7, #7
   10f38:	781b      	ldrb	r3, [r3, #0]
   10f3a:	2b09      	cmp	r3, #9
   10f3c:	d116      	bne.n	10f6c <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   10f3e:	230c      	movs	r3, #12
   10f40:	18f9      	adds	r1, r7, r3
   10f42:	6838      	ldr	r0, [r7, #0]
   10f44:	2301      	movs	r3, #1
   10f46:	2264      	movs	r2, #100	; 0x64
   10f48:	4c28      	ldr	r4, [pc, #160]	; (10fec <m2m_wifi_cb+0x350>)
   10f4a:	47a0      	blx	r4
   10f4c:	1e03      	subs	r3, r0, #0
   10f4e:	d000      	beq.n	10f52 <m2m_wifi_cb+0x2b6>
   10f50:	e071      	b.n	11036 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   10f52:	4b27      	ldr	r3, [pc, #156]	; (10ff0 <m2m_wifi_cb+0x354>)
   10f54:	681b      	ldr	r3, [r3, #0]
   10f56:	2b00      	cmp	r3, #0
   10f58:	d100      	bne.n	10f5c <m2m_wifi_cb+0x2c0>
   10f5a:	e06c      	b.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   10f5c:	4b24      	ldr	r3, [pc, #144]	; (10ff0 <m2m_wifi_cb+0x354>)
   10f5e:	681b      	ldr	r3, [r3, #0]
   10f60:	220c      	movs	r2, #12
   10f62:	18ba      	adds	r2, r7, r2
   10f64:	0011      	movs	r1, r2
   10f66:	2009      	movs	r0, #9
   10f68:	4798      	blx	r3
}
   10f6a:	e064      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   10f6c:	1dfb      	adds	r3, r7, #7
   10f6e:	781b      	ldrb	r3, [r3, #0]
   10f70:	2b2a      	cmp	r3, #42	; 0x2a
   10f72:	d114      	bne.n	10f9e <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   10f74:	2378      	movs	r3, #120	; 0x78
   10f76:	18f9      	adds	r1, r7, r3
   10f78:	6838      	ldr	r0, [r7, #0]
   10f7a:	2301      	movs	r3, #1
   10f7c:	2204      	movs	r2, #4
   10f7e:	4c1b      	ldr	r4, [pc, #108]	; (10fec <m2m_wifi_cb+0x350>)
   10f80:	47a0      	blx	r4
   10f82:	1e03      	subs	r3, r0, #0
   10f84:	d157      	bne.n	11036 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   10f86:	4b1a      	ldr	r3, [pc, #104]	; (10ff0 <m2m_wifi_cb+0x354>)
   10f88:	681b      	ldr	r3, [r3, #0]
   10f8a:	2b00      	cmp	r3, #0
   10f8c:	d053      	beq.n	11036 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   10f8e:	4b18      	ldr	r3, [pc, #96]	; (10ff0 <m2m_wifi_cb+0x354>)
   10f90:	681b      	ldr	r3, [r3, #0]
   10f92:	2278      	movs	r2, #120	; 0x78
   10f94:	18ba      	adds	r2, r7, r2
   10f96:	0011      	movs	r1, r2
   10f98:	202a      	movs	r0, #42	; 0x2a
   10f9a:	4798      	blx	r3
}
   10f9c:	e04b      	b.n	11036 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   10f9e:	1dfb      	adds	r3, r7, #7
   10fa0:	781b      	ldrb	r3, [r3, #0]
   10fa2:	2b20      	cmp	r3, #32
   10fa4:	d134      	bne.n	11010 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   10fa6:	2370      	movs	r3, #112	; 0x70
   10fa8:	18f9      	adds	r1, r7, r3
   10faa:	6838      	ldr	r0, [r7, #0]
   10fac:	2300      	movs	r3, #0
   10fae:	2208      	movs	r2, #8
   10fb0:	4c0e      	ldr	r4, [pc, #56]	; (10fec <m2m_wifi_cb+0x350>)
   10fb2:	47a0      	blx	r4
   10fb4:	1e03      	subs	r3, r0, #0
   10fb6:	d13e      	bne.n	11036 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   10fb8:	683b      	ldr	r3, [r7, #0]
   10fba:	3308      	adds	r3, #8
   10fbc:	0018      	movs	r0, r3
   10fbe:	2370      	movs	r3, #112	; 0x70
   10fc0:	18fb      	adds	r3, r7, r3
   10fc2:	6819      	ldr	r1, [r3, #0]
   10fc4:	2370      	movs	r3, #112	; 0x70
   10fc6:	18fb      	adds	r3, r7, r3
   10fc8:	889a      	ldrh	r2, [r3, #4]
   10fca:	2301      	movs	r3, #1
   10fcc:	4c07      	ldr	r4, [pc, #28]	; (10fec <m2m_wifi_cb+0x350>)
   10fce:	47a0      	blx	r4
   10fd0:	1e03      	subs	r3, r0, #0
   10fd2:	d130      	bne.n	11036 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   10fd4:	4b06      	ldr	r3, [pc, #24]	; (10ff0 <m2m_wifi_cb+0x354>)
   10fd6:	681b      	ldr	r3, [r3, #0]
   10fd8:	2b00      	cmp	r3, #0
   10fda:	d02c      	beq.n	11036 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   10fdc:	4b04      	ldr	r3, [pc, #16]	; (10ff0 <m2m_wifi_cb+0x354>)
   10fde:	681b      	ldr	r3, [r3, #0]
   10fe0:	2270      	movs	r2, #112	; 0x70
   10fe2:	18ba      	adds	r2, r7, r2
   10fe4:	0011      	movs	r1, r2
   10fe6:	2020      	movs	r0, #32
   10fe8:	4798      	blx	r3
}
   10fea:	e024      	b.n	11036 <m2m_wifi_cb+0x39a>
   10fec:	00010a61 	.word	0x00010a61
   10ff0:	20003ee0 	.word	0x20003ee0
   10ff4:	0000fee5 	.word	0x0000fee5
   10ff8:	00028538 	.word	0x00028538
   10ffc:	0000d14d 	.word	0x0000d14d
   11000:	00028544 	.word	0x00028544
   11004:	00028564 	.word	0x00028564
   11008:	20003edd 	.word	0x20003edd
   1100c:	20003edc 	.word	0x20003edc
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   11010:	2324      	movs	r3, #36	; 0x24
   11012:	33ff      	adds	r3, #255	; 0xff
   11014:	001a      	movs	r2, r3
   11016:	490a      	ldr	r1, [pc, #40]	; (11040 <m2m_wifi_cb+0x3a4>)
   11018:	4b0a      	ldr	r3, [pc, #40]	; (11044 <m2m_wifi_cb+0x3a8>)
   1101a:	0018      	movs	r0, r3
   1101c:	4b0a      	ldr	r3, [pc, #40]	; (11048 <m2m_wifi_cb+0x3ac>)
   1101e:	4798      	blx	r3
   11020:	1dfb      	adds	r3, r7, #7
   11022:	781a      	ldrb	r2, [r3, #0]
   11024:	4b09      	ldr	r3, [pc, #36]	; (1104c <m2m_wifi_cb+0x3b0>)
   11026:	0011      	movs	r1, r2
   11028:	0018      	movs	r0, r3
   1102a:	4b07      	ldr	r3, [pc, #28]	; (11048 <m2m_wifi_cb+0x3ac>)
   1102c:	4798      	blx	r3
   1102e:	4b08      	ldr	r3, [pc, #32]	; (11050 <m2m_wifi_cb+0x3b4>)
   11030:	0018      	movs	r0, r3
   11032:	4b05      	ldr	r3, [pc, #20]	; (11048 <m2m_wifi_cb+0x3ac>)
   11034:	4798      	blx	r3
}
   11036:	46c0      	nop			; (mov r8, r8)
   11038:	46bd      	mov	sp, r7
   1103a:	b02d      	add	sp, #180	; 0xb4
   1103c:	bd90      	pop	{r4, r7, pc}
   1103e:	46c0      	nop			; (mov r8, r8)
   11040:	00028904 	.word	0x00028904
   11044:	00028568 	.word	0x00028568
   11048:	0000d14d 	.word	0x0000d14d
   1104c:	0002857c 	.word	0x0002857c
   11050:	00028564 	.word	0x00028564

00011054 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   11054:	b590      	push	{r4, r7, lr}
   11056:	b091      	sub	sp, #68	; 0x44
   11058:	af02      	add	r7, sp, #8
   1105a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   1105c:	2337      	movs	r3, #55	; 0x37
   1105e:	18fb      	adds	r3, r7, r3
   11060:	2200      	movs	r2, #0
   11062:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   11064:	230b      	movs	r3, #11
   11066:	18fb      	adds	r3, r7, r3
   11068:	2201      	movs	r2, #1
   1106a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   1106c:	687b      	ldr	r3, [r7, #4]
   1106e:	2b00      	cmp	r3, #0
   11070:	d104      	bne.n	1107c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   11072:	2337      	movs	r3, #55	; 0x37
   11074:	18fb      	adds	r3, r7, r3
   11076:	22f4      	movs	r2, #244	; 0xf4
   11078:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   1107a:	e0b3      	b.n	111e4 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1107c:	687b      	ldr	r3, [r7, #4]
   1107e:	681a      	ldr	r2, [r3, #0]
   11080:	4b5c      	ldr	r3, [pc, #368]	; (111f4 <m2m_wifi_init+0x1a0>)
   11082:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   11084:	4b5c      	ldr	r3, [pc, #368]	; (111f8 <m2m_wifi_init+0x1a4>)
   11086:	2200      	movs	r2, #0
   11088:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   1108a:	2337      	movs	r3, #55	; 0x37
   1108c:	18fc      	adds	r4, r7, r3
   1108e:	230b      	movs	r3, #11
   11090:	18fb      	adds	r3, r7, r3
   11092:	0018      	movs	r0, r3
   11094:	4b59      	ldr	r3, [pc, #356]	; (111fc <m2m_wifi_init+0x1a8>)
   11096:	4798      	blx	r3
   11098:	0003      	movs	r3, r0
   1109a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1109c:	2337      	movs	r3, #55	; 0x37
   1109e:	18fb      	adds	r3, r7, r3
   110a0:	781b      	ldrb	r3, [r3, #0]
   110a2:	b25b      	sxtb	r3, r3
   110a4:	2b00      	cmp	r3, #0
   110a6:	d000      	beq.n	110aa <m2m_wifi_init+0x56>
   110a8:	e099      	b.n	111de <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   110aa:	2337      	movs	r3, #55	; 0x37
   110ac:	18fc      	adds	r4, r7, r3
   110ae:	2000      	movs	r0, #0
   110b0:	4b53      	ldr	r3, [pc, #332]	; (11200 <m2m_wifi_init+0x1ac>)
   110b2:	4798      	blx	r3
   110b4:	0003      	movs	r3, r0
   110b6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   110b8:	2337      	movs	r3, #55	; 0x37
   110ba:	18fb      	adds	r3, r7, r3
   110bc:	781b      	ldrb	r3, [r3, #0]
   110be:	b25b      	sxtb	r3, r3
   110c0:	2b00      	cmp	r3, #0
   110c2:	d000      	beq.n	110c6 <m2m_wifi_init+0x72>
   110c4:	e086      	b.n	111d4 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   110c6:	4b4f      	ldr	r3, [pc, #316]	; (11204 <m2m_wifi_init+0x1b0>)
   110c8:	0019      	movs	r1, r3
   110ca:	2001      	movs	r0, #1
   110cc:	4b4e      	ldr	r3, [pc, #312]	; (11208 <m2m_wifi_init+0x1b4>)
   110ce:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   110d0:	2337      	movs	r3, #55	; 0x37
   110d2:	18fc      	adds	r4, r7, r3
   110d4:	230c      	movs	r3, #12
   110d6:	18fb      	adds	r3, r7, r3
   110d8:	0018      	movs	r0, r3
   110da:	4b4c      	ldr	r3, [pc, #304]	; (1120c <m2m_wifi_init+0x1b8>)
   110dc:	4798      	blx	r3
   110de:	0003      	movs	r3, r0
   110e0:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   110e2:	4b4b      	ldr	r3, [pc, #300]	; (11210 <m2m_wifi_init+0x1bc>)
   110e4:	0018      	movs	r0, r3
   110e6:	4b4b      	ldr	r3, [pc, #300]	; (11214 <m2m_wifi_init+0x1c0>)
   110e8:	4798      	blx	r3
   110ea:	230c      	movs	r3, #12
   110ec:	18fb      	adds	r3, r7, r3
   110ee:	791b      	ldrb	r3, [r3, #4]
   110f0:	0019      	movs	r1, r3
   110f2:	230c      	movs	r3, #12
   110f4:	18fb      	adds	r3, r7, r3
   110f6:	795b      	ldrb	r3, [r3, #5]
   110f8:	001a      	movs	r2, r3
   110fa:	230c      	movs	r3, #12
   110fc:	18fb      	adds	r3, r7, r3
   110fe:	799b      	ldrb	r3, [r3, #6]
   11100:	001c      	movs	r4, r3
   11102:	230c      	movs	r3, #12
   11104:	18fb      	adds	r3, r7, r3
   11106:	8c1b      	ldrh	r3, [r3, #32]
   11108:	4843      	ldr	r0, [pc, #268]	; (11218 <m2m_wifi_init+0x1c4>)
   1110a:	9300      	str	r3, [sp, #0]
   1110c:	0023      	movs	r3, r4
   1110e:	4c41      	ldr	r4, [pc, #260]	; (11214 <m2m_wifi_init+0x1c0>)
   11110:	47a0      	blx	r4
   11112:	4b42      	ldr	r3, [pc, #264]	; (1121c <m2m_wifi_init+0x1c8>)
   11114:	0018      	movs	r0, r3
   11116:	4b3f      	ldr	r3, [pc, #252]	; (11214 <m2m_wifi_init+0x1c0>)
   11118:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   1111a:	4b3d      	ldr	r3, [pc, #244]	; (11210 <m2m_wifi_init+0x1bc>)
   1111c:	0018      	movs	r0, r3
   1111e:	4b3d      	ldr	r3, [pc, #244]	; (11214 <m2m_wifi_init+0x1c0>)
   11120:	4798      	blx	r3
   11122:	230c      	movs	r3, #12
   11124:	18fb      	adds	r3, r7, r3
   11126:	3316      	adds	r3, #22
   11128:	001a      	movs	r2, r3
   1112a:	230c      	movs	r3, #12
   1112c:	18fb      	adds	r3, r7, r3
   1112e:	330a      	adds	r3, #10
   11130:	0019      	movs	r1, r3
   11132:	4b3b      	ldr	r3, [pc, #236]	; (11220 <m2m_wifi_init+0x1cc>)
   11134:	0018      	movs	r0, r3
   11136:	4b37      	ldr	r3, [pc, #220]	; (11214 <m2m_wifi_init+0x1c0>)
   11138:	4798      	blx	r3
   1113a:	4b38      	ldr	r3, [pc, #224]	; (1121c <m2m_wifi_init+0x1c8>)
   1113c:	0018      	movs	r0, r3
   1113e:	4b35      	ldr	r3, [pc, #212]	; (11214 <m2m_wifi_init+0x1c0>)
   11140:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   11142:	4b33      	ldr	r3, [pc, #204]	; (11210 <m2m_wifi_init+0x1bc>)
   11144:	0018      	movs	r0, r3
   11146:	4b33      	ldr	r3, [pc, #204]	; (11214 <m2m_wifi_init+0x1c0>)
   11148:	4798      	blx	r3
   1114a:	230c      	movs	r3, #12
   1114c:	18fb      	adds	r3, r7, r3
   1114e:	79db      	ldrb	r3, [r3, #7]
   11150:	0019      	movs	r1, r3
   11152:	230c      	movs	r3, #12
   11154:	18fb      	adds	r3, r7, r3
   11156:	7a1b      	ldrb	r3, [r3, #8]
   11158:	001a      	movs	r2, r3
   1115a:	230c      	movs	r3, #12
   1115c:	18fb      	adds	r3, r7, r3
   1115e:	7a5b      	ldrb	r3, [r3, #9]
   11160:	4830      	ldr	r0, [pc, #192]	; (11224 <m2m_wifi_init+0x1d0>)
   11162:	4c2c      	ldr	r4, [pc, #176]	; (11214 <m2m_wifi_init+0x1c0>)
   11164:	47a0      	blx	r4
   11166:	4b2d      	ldr	r3, [pc, #180]	; (1121c <m2m_wifi_init+0x1c8>)
   11168:	0018      	movs	r0, r3
   1116a:	4b2a      	ldr	r3, [pc, #168]	; (11214 <m2m_wifi_init+0x1c0>)
   1116c:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1116e:	4b28      	ldr	r3, [pc, #160]	; (11210 <m2m_wifi_init+0x1bc>)
   11170:	0018      	movs	r0, r3
   11172:	4b28      	ldr	r3, [pc, #160]	; (11214 <m2m_wifi_init+0x1c0>)
   11174:	4798      	blx	r3
   11176:	482c      	ldr	r0, [pc, #176]	; (11228 <m2m_wifi_init+0x1d4>)
   11178:	2304      	movs	r3, #4
   1117a:	2205      	movs	r2, #5
   1117c:	2113      	movs	r1, #19
   1117e:	4c25      	ldr	r4, [pc, #148]	; (11214 <m2m_wifi_init+0x1c0>)
   11180:	47a0      	blx	r4
   11182:	4b26      	ldr	r3, [pc, #152]	; (1121c <m2m_wifi_init+0x1c8>)
   11184:	0018      	movs	r0, r3
   11186:	4b23      	ldr	r3, [pc, #140]	; (11214 <m2m_wifi_init+0x1c0>)
   11188:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   1118a:	4b21      	ldr	r3, [pc, #132]	; (11210 <m2m_wifi_init+0x1bc>)
   1118c:	0018      	movs	r0, r3
   1118e:	4b21      	ldr	r3, [pc, #132]	; (11214 <m2m_wifi_init+0x1c0>)
   11190:	4798      	blx	r3
   11192:	4a26      	ldr	r2, [pc, #152]	; (1122c <m2m_wifi_init+0x1d8>)
   11194:	4926      	ldr	r1, [pc, #152]	; (11230 <m2m_wifi_init+0x1dc>)
   11196:	4b27      	ldr	r3, [pc, #156]	; (11234 <m2m_wifi_init+0x1e0>)
   11198:	0018      	movs	r0, r3
   1119a:	4b1e      	ldr	r3, [pc, #120]	; (11214 <m2m_wifi_init+0x1c0>)
   1119c:	4798      	blx	r3
   1119e:	4b1f      	ldr	r3, [pc, #124]	; (1121c <m2m_wifi_init+0x1c8>)
   111a0:	0018      	movs	r0, r3
   111a2:	4b1c      	ldr	r3, [pc, #112]	; (11214 <m2m_wifi_init+0x1c0>)
   111a4:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   111a6:	2337      	movs	r3, #55	; 0x37
   111a8:	18fb      	adds	r3, r7, r3
   111aa:	781b      	ldrb	r3, [r3, #0]
   111ac:	b25b      	sxtb	r3, r3
   111ae:	330d      	adds	r3, #13
   111b0:	d117      	bne.n	111e2 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   111b2:	23e8      	movs	r3, #232	; 0xe8
   111b4:	33ff      	adds	r3, #255	; 0xff
   111b6:	001a      	movs	r2, r3
   111b8:	491f      	ldr	r1, [pc, #124]	; (11238 <m2m_wifi_init+0x1e4>)
   111ba:	4b20      	ldr	r3, [pc, #128]	; (1123c <m2m_wifi_init+0x1e8>)
   111bc:	0018      	movs	r0, r3
   111be:	4b15      	ldr	r3, [pc, #84]	; (11214 <m2m_wifi_init+0x1c0>)
   111c0:	4798      	blx	r3
   111c2:	4b1f      	ldr	r3, [pc, #124]	; (11240 <m2m_wifi_init+0x1ec>)
   111c4:	0018      	movs	r0, r3
   111c6:	4b13      	ldr	r3, [pc, #76]	; (11214 <m2m_wifi_init+0x1c0>)
   111c8:	4798      	blx	r3
   111ca:	4b14      	ldr	r3, [pc, #80]	; (1121c <m2m_wifi_init+0x1c8>)
   111cc:	0018      	movs	r0, r3
   111ce:	4b11      	ldr	r3, [pc, #68]	; (11214 <m2m_wifi_init+0x1c0>)
   111d0:	4798      	blx	r3
	}

	goto _EXIT0;
   111d2:	e006      	b.n	111e2 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   111d4:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   111d6:	2000      	movs	r0, #0
   111d8:	4b1a      	ldr	r3, [pc, #104]	; (11244 <m2m_wifi_init+0x1f0>)
   111da:	4798      	blx	r3
   111dc:	e002      	b.n	111e4 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   111de:	46c0      	nop			; (mov r8, r8)
   111e0:	e000      	b.n	111e4 <m2m_wifi_init+0x190>
	goto _EXIT0;
   111e2:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   111e4:	2337      	movs	r3, #55	; 0x37
   111e6:	18fb      	adds	r3, r7, r3
   111e8:	781b      	ldrb	r3, [r3, #0]
   111ea:	b25b      	sxtb	r3, r3
}
   111ec:	0018      	movs	r0, r3
   111ee:	46bd      	mov	sp, r7
   111f0:	b00f      	add	sp, #60	; 0x3c
   111f2:	bd90      	pop	{r4, r7, pc}
   111f4:	20003ee0 	.word	0x20003ee0
   111f8:	20003edd 	.word	0x20003edd
   111fc:	00012379 	.word	0x00012379
   11200:	000100fd 	.word	0x000100fd
   11204:	00010c9d 	.word	0x00010c9d
   11208:	00010be1 	.word	0x00010be1
   1120c:	000121ad 	.word	0x000121ad
   11210:	00028538 	.word	0x00028538
   11214:	0000d14d 	.word	0x0000d14d
   11218:	000286dc 	.word	0x000286dc
   1121c:	00028564 	.word	0x00028564
   11220:	00028704 	.word	0x00028704
   11224:	00028720 	.word	0x00028720
   11228:	00028744 	.word	0x00028744
   1122c:	0002875c 	.word	0x0002875c
   11230:	00028768 	.word	0x00028768
   11234:	00028774 	.word	0x00028774
   11238:	00028910 	.word	0x00028910
   1123c:	00028568 	.word	0x00028568
   11240:	0002878c 	.word	0x0002878c
   11244:	00012509 	.word	0x00012509

00011248 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   11248:	b580      	push	{r7, lr}
   1124a:	b082      	sub	sp, #8
   1124c:	af00      	add	r7, sp, #0
   1124e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   11250:	4b03      	ldr	r3, [pc, #12]	; (11260 <m2m_wifi_handle_events+0x18>)
   11252:	4798      	blx	r3
   11254:	0003      	movs	r3, r0
}
   11256:	0018      	movs	r0, r3
   11258:	46bd      	mov	sp, r7
   1125a:	b002      	add	sp, #8
   1125c:	bd80      	pop	{r7, pc}
   1125e:	46c0      	nop			; (mov r8, r8)
   11260:	000109c1 	.word	0x000109c1

00011264 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   11264:	b590      	push	{r4, r7, lr}
   11266:	b087      	sub	sp, #28
   11268:	af02      	add	r7, sp, #8
   1126a:	60f8      	str	r0, [r7, #12]
   1126c:	0008      	movs	r0, r1
   1126e:	0011      	movs	r1, r2
   11270:	607b      	str	r3, [r7, #4]
   11272:	230b      	movs	r3, #11
   11274:	18fb      	adds	r3, r7, r3
   11276:	1c02      	adds	r2, r0, #0
   11278:	701a      	strb	r2, [r3, #0]
   1127a:	230a      	movs	r3, #10
   1127c:	18fb      	adds	r3, r7, r3
   1127e:	1c0a      	adds	r2, r1, #0
   11280:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   11282:	687c      	ldr	r4, [r7, #4]
   11284:	230a      	movs	r3, #10
   11286:	18fb      	adds	r3, r7, r3
   11288:	781a      	ldrb	r2, [r3, #0]
   1128a:	230b      	movs	r3, #11
   1128c:	18fb      	adds	r3, r7, r3
   1128e:	7819      	ldrb	r1, [r3, #0]
   11290:	68f8      	ldr	r0, [r7, #12]
   11292:	2300      	movs	r3, #0
   11294:	9301      	str	r3, [sp, #4]
   11296:	2320      	movs	r3, #32
   11298:	18fb      	adds	r3, r7, r3
   1129a:	881b      	ldrh	r3, [r3, #0]
   1129c:	9300      	str	r3, [sp, #0]
   1129e:	0023      	movs	r3, r4
   112a0:	4c03      	ldr	r4, [pc, #12]	; (112b0 <m2m_wifi_connect+0x4c>)
   112a2:	47a0      	blx	r4
   112a4:	0003      	movs	r3, r0
}
   112a6:	0018      	movs	r0, r3
   112a8:	46bd      	mov	sp, r7
   112aa:	b005      	add	sp, #20
   112ac:	bd90      	pop	{r4, r7, pc}
   112ae:	46c0      	nop			; (mov r8, r8)
   112b0:	000112b5 	.word	0x000112b5

000112b4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   112b4:	b5b0      	push	{r4, r5, r7, lr}
   112b6:	b0aa      	sub	sp, #168	; 0xa8
   112b8:	af04      	add	r7, sp, #16
   112ba:	60f8      	str	r0, [r7, #12]
   112bc:	0008      	movs	r0, r1
   112be:	0011      	movs	r1, r2
   112c0:	607b      	str	r3, [r7, #4]
   112c2:	230b      	movs	r3, #11
   112c4:	18fb      	adds	r3, r7, r3
   112c6:	1c02      	adds	r2, r0, #0
   112c8:	701a      	strb	r2, [r3, #0]
   112ca:	230a      	movs	r3, #10
   112cc:	18fb      	adds	r3, r7, r3
   112ce:	1c0a      	adds	r2, r1, #0
   112d0:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   112d2:	2397      	movs	r3, #151	; 0x97
   112d4:	18fb      	adds	r3, r7, r3
   112d6:	2200      	movs	r2, #0
   112d8:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   112da:	230a      	movs	r3, #10
   112dc:	18fb      	adds	r3, r7, r3
   112de:	781b      	ldrb	r3, [r3, #0]
   112e0:	2b01      	cmp	r3, #1
   112e2:	d100      	bne.n	112e6 <m2m_wifi_connect_sc+0x32>
   112e4:	e085      	b.n	113f2 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   112e6:	687b      	ldr	r3, [r7, #4]
   112e8:	2b00      	cmp	r3, #0
   112ea:	d112      	bne.n	11312 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   112ec:	4ad8      	ldr	r2, [pc, #864]	; (11650 <m2m_wifi_connect_sc+0x39c>)
   112ee:	49d9      	ldr	r1, [pc, #868]	; (11654 <m2m_wifi_connect_sc+0x3a0>)
   112f0:	4bd9      	ldr	r3, [pc, #868]	; (11658 <m2m_wifi_connect_sc+0x3a4>)
   112f2:	0018      	movs	r0, r3
   112f4:	4bd9      	ldr	r3, [pc, #868]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   112f6:	4798      	blx	r3
   112f8:	4bd9      	ldr	r3, [pc, #868]	; (11660 <m2m_wifi_connect_sc+0x3ac>)
   112fa:	0018      	movs	r0, r3
   112fc:	4bd7      	ldr	r3, [pc, #860]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   112fe:	4798      	blx	r3
   11300:	4bd8      	ldr	r3, [pc, #864]	; (11664 <m2m_wifi_connect_sc+0x3b0>)
   11302:	0018      	movs	r0, r3
   11304:	4bd5      	ldr	r3, [pc, #852]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11306:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   11308:	2397      	movs	r3, #151	; 0x97
   1130a:	18fb      	adds	r3, r7, r3
   1130c:	22f4      	movs	r2, #244	; 0xf4
   1130e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   11310:	e1f9      	b.n	11706 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   11312:	230a      	movs	r3, #10
   11314:	18fb      	adds	r3, r7, r3
   11316:	781b      	ldrb	r3, [r3, #0]
   11318:	2b02      	cmp	r3, #2
   1131a:	d16a      	bne.n	113f2 <m2m_wifi_connect_sc+0x13e>
   1131c:	687b      	ldr	r3, [r7, #4]
   1131e:	0018      	movs	r0, r3
   11320:	4bd1      	ldr	r3, [pc, #836]	; (11668 <m2m_wifi_connect_sc+0x3b4>)
   11322:	4798      	blx	r3
   11324:	0003      	movs	r3, r0
   11326:	2b40      	cmp	r3, #64	; 0x40
   11328:	d163      	bne.n	113f2 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   1132a:	2396      	movs	r3, #150	; 0x96
   1132c:	18fb      	adds	r3, r7, r3
   1132e:	2200      	movs	r2, #0
   11330:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   11332:	687b      	ldr	r3, [r7, #4]
   11334:	2290      	movs	r2, #144	; 0x90
   11336:	18ba      	adds	r2, r7, r2
   11338:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   1133a:	e055      	b.n	113e8 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   1133c:	2396      	movs	r3, #150	; 0x96
   1133e:	18fb      	adds	r3, r7, r3
   11340:	781b      	ldrb	r3, [r3, #0]
   11342:	2290      	movs	r2, #144	; 0x90
   11344:	18ba      	adds	r2, r7, r2
   11346:	6812      	ldr	r2, [r2, #0]
   11348:	18d3      	adds	r3, r2, r3
   1134a:	781b      	ldrb	r3, [r3, #0]
   1134c:	2b2f      	cmp	r3, #47	; 0x2f
   1134e:	d931      	bls.n	113b4 <m2m_wifi_connect_sc+0x100>
   11350:	2396      	movs	r3, #150	; 0x96
   11352:	18fb      	adds	r3, r7, r3
   11354:	781b      	ldrb	r3, [r3, #0]
   11356:	2290      	movs	r2, #144	; 0x90
   11358:	18ba      	adds	r2, r7, r2
   1135a:	6812      	ldr	r2, [r2, #0]
   1135c:	18d3      	adds	r3, r2, r3
   1135e:	781b      	ldrb	r3, [r3, #0]
   11360:	2b39      	cmp	r3, #57	; 0x39
   11362:	d909      	bls.n	11378 <m2m_wifi_connect_sc+0xc4>
   11364:	2396      	movs	r3, #150	; 0x96
   11366:	18fb      	adds	r3, r7, r3
   11368:	781b      	ldrb	r3, [r3, #0]
   1136a:	2290      	movs	r2, #144	; 0x90
   1136c:	18ba      	adds	r2, r7, r2
   1136e:	6812      	ldr	r2, [r2, #0]
   11370:	18d3      	adds	r3, r2, r3
   11372:	781b      	ldrb	r3, [r3, #0]
   11374:	2b40      	cmp	r3, #64	; 0x40
   11376:	d91d      	bls.n	113b4 <m2m_wifi_connect_sc+0x100>
   11378:	2396      	movs	r3, #150	; 0x96
   1137a:	18fb      	adds	r3, r7, r3
   1137c:	781b      	ldrb	r3, [r3, #0]
   1137e:	2290      	movs	r2, #144	; 0x90
   11380:	18ba      	adds	r2, r7, r2
   11382:	6812      	ldr	r2, [r2, #0]
   11384:	18d3      	adds	r3, r2, r3
   11386:	781b      	ldrb	r3, [r3, #0]
   11388:	2b46      	cmp	r3, #70	; 0x46
   1138a:	d909      	bls.n	113a0 <m2m_wifi_connect_sc+0xec>
   1138c:	2396      	movs	r3, #150	; 0x96
   1138e:	18fb      	adds	r3, r7, r3
   11390:	781b      	ldrb	r3, [r3, #0]
   11392:	2290      	movs	r2, #144	; 0x90
   11394:	18ba      	adds	r2, r7, r2
   11396:	6812      	ldr	r2, [r2, #0]
   11398:	18d3      	adds	r3, r2, r3
   1139a:	781b      	ldrb	r3, [r3, #0]
   1139c:	2b60      	cmp	r3, #96	; 0x60
   1139e:	d909      	bls.n	113b4 <m2m_wifi_connect_sc+0x100>
   113a0:	2396      	movs	r3, #150	; 0x96
   113a2:	18fb      	adds	r3, r7, r3
   113a4:	781b      	ldrb	r3, [r3, #0]
   113a6:	2290      	movs	r2, #144	; 0x90
   113a8:	18ba      	adds	r2, r7, r2
   113aa:	6812      	ldr	r2, [r2, #0]
   113ac:	18d3      	adds	r3, r2, r3
   113ae:	781b      	ldrb	r3, [r3, #0]
   113b0:	2b66      	cmp	r3, #102	; 0x66
   113b2:	d912      	bls.n	113da <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   113b4:	4aad      	ldr	r2, [pc, #692]	; (1166c <m2m_wifi_connect_sc+0x3b8>)
   113b6:	49a7      	ldr	r1, [pc, #668]	; (11654 <m2m_wifi_connect_sc+0x3a0>)
   113b8:	4ba7      	ldr	r3, [pc, #668]	; (11658 <m2m_wifi_connect_sc+0x3a4>)
   113ba:	0018      	movs	r0, r3
   113bc:	4ba7      	ldr	r3, [pc, #668]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   113be:	4798      	blx	r3
   113c0:	4bab      	ldr	r3, [pc, #684]	; (11670 <m2m_wifi_connect_sc+0x3bc>)
   113c2:	0018      	movs	r0, r3
   113c4:	4ba5      	ldr	r3, [pc, #660]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   113c6:	4798      	blx	r3
   113c8:	4ba6      	ldr	r3, [pc, #664]	; (11664 <m2m_wifi_connect_sc+0x3b0>)
   113ca:	0018      	movs	r0, r3
   113cc:	4ba3      	ldr	r3, [pc, #652]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   113ce:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   113d0:	2397      	movs	r3, #151	; 0x97
   113d2:	18fb      	adds	r3, r7, r3
   113d4:	22f4      	movs	r2, #244	; 0xf4
   113d6:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   113d8:	e195      	b.n	11706 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   113da:	2396      	movs	r3, #150	; 0x96
   113dc:	18fb      	adds	r3, r7, r3
   113de:	781a      	ldrb	r2, [r3, #0]
   113e0:	2396      	movs	r3, #150	; 0x96
   113e2:	18fb      	adds	r3, r7, r3
   113e4:	3201      	adds	r2, #1
   113e6:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   113e8:	2396      	movs	r3, #150	; 0x96
   113ea:	18fb      	adds	r3, r7, r3
   113ec:	781b      	ldrb	r3, [r3, #0]
   113ee:	2b3f      	cmp	r3, #63	; 0x3f
   113f0:	d9a4      	bls.n	1133c <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   113f2:	230b      	movs	r3, #11
   113f4:	18fb      	adds	r3, r7, r3
   113f6:	781b      	ldrb	r3, [r3, #0]
   113f8:	2b00      	cmp	r3, #0
   113fa:	d004      	beq.n	11406 <m2m_wifi_connect_sc+0x152>
   113fc:	230b      	movs	r3, #11
   113fe:	18fb      	adds	r3, r7, r3
   11400:	781b      	ldrb	r3, [r3, #0]
   11402:	2b20      	cmp	r3, #32
   11404:	d913      	bls.n	1142e <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   11406:	238c      	movs	r3, #140	; 0x8c
   11408:	009a      	lsls	r2, r3, #2
   1140a:	4992      	ldr	r1, [pc, #584]	; (11654 <m2m_wifi_connect_sc+0x3a0>)
   1140c:	4b92      	ldr	r3, [pc, #584]	; (11658 <m2m_wifi_connect_sc+0x3a4>)
   1140e:	0018      	movs	r0, r3
   11410:	4b92      	ldr	r3, [pc, #584]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11412:	4798      	blx	r3
   11414:	4b97      	ldr	r3, [pc, #604]	; (11674 <m2m_wifi_connect_sc+0x3c0>)
   11416:	0018      	movs	r0, r3
   11418:	4b90      	ldr	r3, [pc, #576]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   1141a:	4798      	blx	r3
   1141c:	4b91      	ldr	r3, [pc, #580]	; (11664 <m2m_wifi_connect_sc+0x3b0>)
   1141e:	0018      	movs	r0, r3
   11420:	4b8e      	ldr	r3, [pc, #568]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11422:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   11424:	2397      	movs	r3, #151	; 0x97
   11426:	18fb      	adds	r3, r7, r3
   11428:	22f4      	movs	r2, #244	; 0xf4
   1142a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   1142c:	e16b      	b.n	11706 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   1142e:	23a8      	movs	r3, #168	; 0xa8
   11430:	18fb      	adds	r3, r7, r3
   11432:	881b      	ldrh	r3, [r3, #0]
   11434:	2b00      	cmp	r3, #0
   11436:	d004      	beq.n	11442 <m2m_wifi_connect_sc+0x18e>
   11438:	23a8      	movs	r3, #168	; 0xa8
   1143a:	18fb      	adds	r3, r7, r3
   1143c:	881b      	ldrh	r3, [r3, #0]
   1143e:	2b0e      	cmp	r3, #14
   11440:	d917      	bls.n	11472 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   11442:	23a8      	movs	r3, #168	; 0xa8
   11444:	18fb      	adds	r3, r7, r3
   11446:	881b      	ldrh	r3, [r3, #0]
   11448:	2bff      	cmp	r3, #255	; 0xff
   1144a:	d012      	beq.n	11472 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   1144c:	4a8a      	ldr	r2, [pc, #552]	; (11678 <m2m_wifi_connect_sc+0x3c4>)
   1144e:	4981      	ldr	r1, [pc, #516]	; (11654 <m2m_wifi_connect_sc+0x3a0>)
   11450:	4b81      	ldr	r3, [pc, #516]	; (11658 <m2m_wifi_connect_sc+0x3a4>)
   11452:	0018      	movs	r0, r3
   11454:	4b81      	ldr	r3, [pc, #516]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11456:	4798      	blx	r3
   11458:	4b88      	ldr	r3, [pc, #544]	; (1167c <m2m_wifi_connect_sc+0x3c8>)
   1145a:	0018      	movs	r0, r3
   1145c:	4b7f      	ldr	r3, [pc, #508]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   1145e:	4798      	blx	r3
   11460:	4b80      	ldr	r3, [pc, #512]	; (11664 <m2m_wifi_connect_sc+0x3b0>)
   11462:	0018      	movs	r0, r3
   11464:	4b7d      	ldr	r3, [pc, #500]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11466:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   11468:	2397      	movs	r3, #151	; 0x97
   1146a:	18fb      	adds	r3, r7, r3
   1146c:	22f4      	movs	r2, #244	; 0xf4
   1146e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   11470:	e149      	b.n	11706 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   11472:	230b      	movs	r3, #11
   11474:	18fb      	adds	r3, r7, r3
   11476:	781a      	ldrb	r2, [r3, #0]
   11478:	68f9      	ldr	r1, [r7, #12]
   1147a:	2314      	movs	r3, #20
   1147c:	18fb      	adds	r3, r7, r3
   1147e:	3346      	adds	r3, #70	; 0x46
   11480:	0018      	movs	r0, r3
   11482:	4b7f      	ldr	r3, [pc, #508]	; (11680 <m2m_wifi_connect_sc+0x3cc>)
   11484:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   11486:	230b      	movs	r3, #11
   11488:	18fb      	adds	r3, r7, r3
   1148a:	781b      	ldrb	r3, [r3, #0]
   1148c:	2214      	movs	r2, #20
   1148e:	18ba      	adds	r2, r7, r2
   11490:	2146      	movs	r1, #70	; 0x46
   11492:	18d3      	adds	r3, r2, r3
   11494:	185b      	adds	r3, r3, r1
   11496:	2200      	movs	r2, #0
   11498:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   1149a:	2314      	movs	r3, #20
   1149c:	18fb      	adds	r3, r7, r3
   1149e:	22a8      	movs	r2, #168	; 0xa8
   114a0:	18ba      	adds	r2, r7, r2
   114a2:	2144      	movs	r1, #68	; 0x44
   114a4:	8812      	ldrh	r2, [r2, #0]
   114a6:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   114a8:	23ac      	movs	r3, #172	; 0xac
   114aa:	18fb      	adds	r3, r7, r3
   114ac:	781b      	ldrb	r3, [r3, #0]
   114ae:	1e5a      	subs	r2, r3, #1
   114b0:	4193      	sbcs	r3, r2
   114b2:	b2db      	uxtb	r3, r3
   114b4:	0019      	movs	r1, r3
   114b6:	2314      	movs	r3, #20
   114b8:	18fb      	adds	r3, r7, r3
   114ba:	2267      	movs	r2, #103	; 0x67
   114bc:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   114be:	2314      	movs	r3, #20
   114c0:	18fb      	adds	r3, r7, r3
   114c2:	228c      	movs	r2, #140	; 0x8c
   114c4:	18ba      	adds	r2, r7, r2
   114c6:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   114c8:	238c      	movs	r3, #140	; 0x8c
   114ca:	18fb      	adds	r3, r7, r3
   114cc:	681b      	ldr	r3, [r3, #0]
   114ce:	220a      	movs	r2, #10
   114d0:	18ba      	adds	r2, r7, r2
   114d2:	2141      	movs	r1, #65	; 0x41
   114d4:	7812      	ldrb	r2, [r2, #0]
   114d6:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   114d8:	230a      	movs	r3, #10
   114da:	18fb      	adds	r3, r7, r3
   114dc:	781b      	ldrb	r3, [r3, #0]
   114de:	2b03      	cmp	r3, #3
   114e0:	d000      	beq.n	114e4 <m2m_wifi_connect_sc+0x230>
   114e2:	e07d      	b.n	115e0 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   114e4:	687b      	ldr	r3, [r7, #4]
   114e6:	2288      	movs	r2, #136	; 0x88
   114e8:	18ba      	adds	r2, r7, r2
   114ea:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   114ec:	238c      	movs	r3, #140	; 0x8c
   114ee:	18fb      	adds	r3, r7, r3
   114f0:	681b      	ldr	r3, [r3, #0]
   114f2:	2284      	movs	r2, #132	; 0x84
   114f4:	18ba      	adds	r2, r7, r2
   114f6:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   114f8:	2388      	movs	r3, #136	; 0x88
   114fa:	18fb      	adds	r3, r7, r3
   114fc:	681b      	ldr	r3, [r3, #0]
   114fe:	781b      	ldrb	r3, [r3, #0]
   11500:	3b01      	subs	r3, #1
   11502:	b2da      	uxtb	r2, r3
   11504:	2384      	movs	r3, #132	; 0x84
   11506:	18fb      	adds	r3, r7, r3
   11508:	681b      	ldr	r3, [r3, #0]
   1150a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   1150c:	2384      	movs	r3, #132	; 0x84
   1150e:	18fb      	adds	r3, r7, r3
   11510:	681b      	ldr	r3, [r3, #0]
   11512:	781b      	ldrb	r3, [r3, #0]
   11514:	2b03      	cmp	r3, #3
   11516:	d919      	bls.n	1154c <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   11518:	2394      	movs	r3, #148	; 0x94
   1151a:	009a      	lsls	r2, r3, #2
   1151c:	494d      	ldr	r1, [pc, #308]	; (11654 <m2m_wifi_connect_sc+0x3a0>)
   1151e:	4b4e      	ldr	r3, [pc, #312]	; (11658 <m2m_wifi_connect_sc+0x3a4>)
   11520:	0018      	movs	r0, r3
   11522:	4b4e      	ldr	r3, [pc, #312]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11524:	4798      	blx	r3
   11526:	2384      	movs	r3, #132	; 0x84
   11528:	18fb      	adds	r3, r7, r3
   1152a:	681b      	ldr	r3, [r3, #0]
   1152c:	781b      	ldrb	r3, [r3, #0]
   1152e:	001a      	movs	r2, r3
   11530:	4b54      	ldr	r3, [pc, #336]	; (11684 <m2m_wifi_connect_sc+0x3d0>)
   11532:	0011      	movs	r1, r2
   11534:	0018      	movs	r0, r3
   11536:	4b49      	ldr	r3, [pc, #292]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11538:	4798      	blx	r3
   1153a:	4b4a      	ldr	r3, [pc, #296]	; (11664 <m2m_wifi_connect_sc+0x3b0>)
   1153c:	0018      	movs	r0, r3
   1153e:	4b47      	ldr	r3, [pc, #284]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11540:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   11542:	2397      	movs	r3, #151	; 0x97
   11544:	18fb      	adds	r3, r7, r3
   11546:	22f4      	movs	r2, #244	; 0xf4
   11548:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1154a:	e0dc      	b.n	11706 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   1154c:	2388      	movs	r3, #136	; 0x88
   1154e:	18fb      	adds	r3, r7, r3
   11550:	681b      	ldr	r3, [r3, #0]
   11552:	785b      	ldrb	r3, [r3, #1]
   11554:	3b01      	subs	r3, #1
   11556:	b2da      	uxtb	r2, r3
   11558:	2384      	movs	r3, #132	; 0x84
   1155a:	18fb      	adds	r3, r7, r3
   1155c:	681b      	ldr	r3, [r3, #0]
   1155e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   11560:	2384      	movs	r3, #132	; 0x84
   11562:	18fb      	adds	r3, r7, r3
   11564:	681b      	ldr	r3, [r3, #0]
   11566:	785b      	ldrb	r3, [r3, #1]
   11568:	2b0a      	cmp	r3, #10
   1156a:	d01e      	beq.n	115aa <m2m_wifi_connect_sc+0x2f6>
   1156c:	2384      	movs	r3, #132	; 0x84
   1156e:	18fb      	adds	r3, r7, r3
   11570:	681b      	ldr	r3, [r3, #0]
   11572:	785b      	ldrb	r3, [r3, #1]
   11574:	2b1a      	cmp	r3, #26
   11576:	d018      	beq.n	115aa <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   11578:	4a43      	ldr	r2, [pc, #268]	; (11688 <m2m_wifi_connect_sc+0x3d4>)
   1157a:	4936      	ldr	r1, [pc, #216]	; (11654 <m2m_wifi_connect_sc+0x3a0>)
   1157c:	4b36      	ldr	r3, [pc, #216]	; (11658 <m2m_wifi_connect_sc+0x3a4>)
   1157e:	0018      	movs	r0, r3
   11580:	4b36      	ldr	r3, [pc, #216]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11582:	4798      	blx	r3
   11584:	2384      	movs	r3, #132	; 0x84
   11586:	18fb      	adds	r3, r7, r3
   11588:	681b      	ldr	r3, [r3, #0]
   1158a:	785b      	ldrb	r3, [r3, #1]
   1158c:	001a      	movs	r2, r3
   1158e:	4b3f      	ldr	r3, [pc, #252]	; (1168c <m2m_wifi_connect_sc+0x3d8>)
   11590:	0011      	movs	r1, r2
   11592:	0018      	movs	r0, r3
   11594:	4b31      	ldr	r3, [pc, #196]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11596:	4798      	blx	r3
   11598:	4b32      	ldr	r3, [pc, #200]	; (11664 <m2m_wifi_connect_sc+0x3b0>)
   1159a:	0018      	movs	r0, r3
   1159c:	4b2f      	ldr	r3, [pc, #188]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   1159e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   115a0:	2397      	movs	r3, #151	; 0x97
   115a2:	18fb      	adds	r3, r7, r3
   115a4:	22f4      	movs	r2, #244	; 0xf4
   115a6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   115a8:	e0ad      	b.n	11706 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   115aa:	2384      	movs	r3, #132	; 0x84
   115ac:	18fb      	adds	r3, r7, r3
   115ae:	681b      	ldr	r3, [r3, #0]
   115b0:	1c98      	adds	r0, r3, #2
   115b2:	2388      	movs	r3, #136	; 0x88
   115b4:	18fb      	adds	r3, r7, r3
   115b6:	681b      	ldr	r3, [r3, #0]
   115b8:	1c99      	adds	r1, r3, #2
   115ba:	2388      	movs	r3, #136	; 0x88
   115bc:	18fb      	adds	r3, r7, r3
   115be:	681b      	ldr	r3, [r3, #0]
   115c0:	785b      	ldrb	r3, [r3, #1]
   115c2:	001a      	movs	r2, r3
   115c4:	4b2e      	ldr	r3, [pc, #184]	; (11680 <m2m_wifi_connect_sc+0x3cc>)
   115c6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   115c8:	2388      	movs	r3, #136	; 0x88
   115ca:	18fb      	adds	r3, r7, r3
   115cc:	681b      	ldr	r3, [r3, #0]
   115ce:	785b      	ldrb	r3, [r3, #1]
   115d0:	001a      	movs	r2, r3
   115d2:	2384      	movs	r3, #132	; 0x84
   115d4:	18fb      	adds	r3, r7, r3
   115d6:	681b      	ldr	r3, [r3, #0]
   115d8:	189b      	adds	r3, r3, r2
   115da:	2200      	movs	r2, #0
   115dc:	709a      	strb	r2, [r3, #2]
   115de:	e081      	b.n	116e4 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   115e0:	230a      	movs	r3, #10
   115e2:	18fb      	adds	r3, r7, r3
   115e4:	781b      	ldrb	r3, [r3, #0]
   115e6:	2b02      	cmp	r3, #2
   115e8:	d156      	bne.n	11698 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   115ea:	2382      	movs	r3, #130	; 0x82
   115ec:	18fc      	adds	r4, r7, r3
   115ee:	687b      	ldr	r3, [r7, #4]
   115f0:	0018      	movs	r0, r3
   115f2:	4b1d      	ldr	r3, [pc, #116]	; (11668 <m2m_wifi_connect_sc+0x3b4>)
   115f4:	4798      	blx	r3
   115f6:	0003      	movs	r3, r0
   115f8:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   115fa:	2382      	movs	r3, #130	; 0x82
   115fc:	18fb      	adds	r3, r7, r3
   115fe:	881b      	ldrh	r3, [r3, #0]
   11600:	2b00      	cmp	r3, #0
   11602:	d004      	beq.n	1160e <m2m_wifi_connect_sc+0x35a>
   11604:	2382      	movs	r3, #130	; 0x82
   11606:	18fb      	adds	r3, r7, r3
   11608:	881b      	ldrh	r3, [r3, #0]
   1160a:	2b40      	cmp	r3, #64	; 0x40
   1160c:	d912      	bls.n	11634 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   1160e:	4a20      	ldr	r2, [pc, #128]	; (11690 <m2m_wifi_connect_sc+0x3dc>)
   11610:	4910      	ldr	r1, [pc, #64]	; (11654 <m2m_wifi_connect_sc+0x3a0>)
   11612:	4b11      	ldr	r3, [pc, #68]	; (11658 <m2m_wifi_connect_sc+0x3a4>)
   11614:	0018      	movs	r0, r3
   11616:	4b11      	ldr	r3, [pc, #68]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11618:	4798      	blx	r3
   1161a:	4b1e      	ldr	r3, [pc, #120]	; (11694 <m2m_wifi_connect_sc+0x3e0>)
   1161c:	0018      	movs	r0, r3
   1161e:	4b0f      	ldr	r3, [pc, #60]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11620:	4798      	blx	r3
   11622:	4b10      	ldr	r3, [pc, #64]	; (11664 <m2m_wifi_connect_sc+0x3b0>)
   11624:	0018      	movs	r0, r3
   11626:	4b0d      	ldr	r3, [pc, #52]	; (1165c <m2m_wifi_connect_sc+0x3a8>)
   11628:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1162a:	2397      	movs	r3, #151	; 0x97
   1162c:	18fb      	adds	r3, r7, r3
   1162e:	22f4      	movs	r2, #244	; 0xf4
   11630:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   11632:	e068      	b.n	11706 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   11634:	238c      	movs	r3, #140	; 0x8c
   11636:	18fb      	adds	r3, r7, r3
   11638:	6818      	ldr	r0, [r3, #0]
   1163a:	2382      	movs	r3, #130	; 0x82
   1163c:	18fb      	adds	r3, r7, r3
   1163e:	881b      	ldrh	r3, [r3, #0]
   11640:	3301      	adds	r3, #1
   11642:	001a      	movs	r2, r3
   11644:	687b      	ldr	r3, [r7, #4]
   11646:	0019      	movs	r1, r3
   11648:	4b0d      	ldr	r3, [pc, #52]	; (11680 <m2m_wifi_connect_sc+0x3cc>)
   1164a:	4798      	blx	r3
   1164c:	e04a      	b.n	116e4 <m2m_wifi_connect_sc+0x430>
   1164e:	46c0      	nop			; (mov r8, r8)
   11650:	0000021a 	.word	0x0000021a
   11654:	00028920 	.word	0x00028920
   11658:	00028568 	.word	0x00028568
   1165c:	0000d14d 	.word	0x0000d14d
   11660:	000287a8 	.word	0x000287a8
   11664:	00028564 	.word	0x00028564
   11668:	0000ff23 	.word	0x0000ff23
   1166c:	00000226 	.word	0x00000226
   11670:	000287bc 	.word	0x000287bc
   11674:	000287cc 	.word	0x000287cc
   11678:	00000239 	.word	0x00000239
   1167c:	000287e0 	.word	0x000287e0
   11680:	0000fea9 	.word	0x0000fea9
   11684:	000287ec 	.word	0x000287ec
   11688:	00000257 	.word	0x00000257
   1168c:	00028808 	.word	0x00028808
   11690:	00000266 	.word	0x00000266
   11694:	00028824 	.word	0x00028824
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   11698:	230a      	movs	r3, #10
   1169a:	18fb      	adds	r3, r7, r3
   1169c:	781b      	ldrb	r3, [r3, #0]
   1169e:	2b04      	cmp	r3, #4
   116a0:	d108      	bne.n	116b4 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   116a2:	238c      	movs	r3, #140	; 0x8c
   116a4:	18fb      	adds	r3, r7, r3
   116a6:	681b      	ldr	r3, [r3, #0]
   116a8:	6879      	ldr	r1, [r7, #4]
   116aa:	223e      	movs	r2, #62	; 0x3e
   116ac:	0018      	movs	r0, r3
   116ae:	4b1a      	ldr	r3, [pc, #104]	; (11718 <m2m_wifi_connect_sc+0x464>)
   116b0:	4798      	blx	r3
   116b2:	e017      	b.n	116e4 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   116b4:	230a      	movs	r3, #10
   116b6:	18fb      	adds	r3, r7, r3
   116b8:	781b      	ldrb	r3, [r3, #0]
   116ba:	2b01      	cmp	r3, #1
   116bc:	d012      	beq.n	116e4 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   116be:	4a17      	ldr	r2, [pc, #92]	; (1171c <m2m_wifi_connect_sc+0x468>)
   116c0:	4917      	ldr	r1, [pc, #92]	; (11720 <m2m_wifi_connect_sc+0x46c>)
   116c2:	4b18      	ldr	r3, [pc, #96]	; (11724 <m2m_wifi_connect_sc+0x470>)
   116c4:	0018      	movs	r0, r3
   116c6:	4b18      	ldr	r3, [pc, #96]	; (11728 <m2m_wifi_connect_sc+0x474>)
   116c8:	4798      	blx	r3
   116ca:	4b18      	ldr	r3, [pc, #96]	; (1172c <m2m_wifi_connect_sc+0x478>)
   116cc:	0018      	movs	r0, r3
   116ce:	4b16      	ldr	r3, [pc, #88]	; (11728 <m2m_wifi_connect_sc+0x474>)
   116d0:	4798      	blx	r3
   116d2:	4b17      	ldr	r3, [pc, #92]	; (11730 <m2m_wifi_connect_sc+0x47c>)
   116d4:	0018      	movs	r0, r3
   116d6:	4b14      	ldr	r3, [pc, #80]	; (11728 <m2m_wifi_connect_sc+0x474>)
   116d8:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   116da:	2397      	movs	r3, #151	; 0x97
   116dc:	18fb      	adds	r3, r7, r3
   116de:	22f4      	movs	r2, #244	; 0xf4
   116e0:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   116e2:	e010      	b.n	11706 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   116e4:	2397      	movs	r3, #151	; 0x97
   116e6:	18fc      	adds	r4, r7, r3
   116e8:	2314      	movs	r3, #20
   116ea:	18fa      	adds	r2, r7, r3
   116ec:	2300      	movs	r3, #0
   116ee:	9302      	str	r3, [sp, #8]
   116f0:	2300      	movs	r3, #0
   116f2:	9301      	str	r3, [sp, #4]
   116f4:	2300      	movs	r3, #0
   116f6:	9300      	str	r3, [sp, #0]
   116f8:	236c      	movs	r3, #108	; 0x6c
   116fa:	2128      	movs	r1, #40	; 0x28
   116fc:	2001      	movs	r0, #1
   116fe:	4d0d      	ldr	r5, [pc, #52]	; (11734 <m2m_wifi_connect_sc+0x480>)
   11700:	47a8      	blx	r5
   11702:	0003      	movs	r3, r0
   11704:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   11706:	2397      	movs	r3, #151	; 0x97
   11708:	18fb      	adds	r3, r7, r3
   1170a:	781b      	ldrb	r3, [r3, #0]
   1170c:	b25b      	sxtb	r3, r3
}
   1170e:	0018      	movs	r0, r3
   11710:	46bd      	mov	sp, r7
   11712:	b026      	add	sp, #152	; 0x98
   11714:	bdb0      	pop	{r4, r5, r7, pc}
   11716:	46c0      	nop			; (mov r8, r8)
   11718:	0000fea9 	.word	0x0000fea9
   1171c:	00000276 	.word	0x00000276
   11720:	00028920 	.word	0x00028920
   11724:	00028568 	.word	0x00028568
   11728:	0000d14d 	.word	0x0000d14d
   1172c:	00028840 	.word	0x00028840
   11730:	00028564 	.word	0x00028564
   11734:	00010145 	.word	0x00010145

00011738 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   11738:	b580      	push	{r7, lr}
   1173a:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   1173c:	2300      	movs	r3, #0
}
   1173e:	0018      	movs	r0, r3
   11740:	46bd      	mov	sp, r7
   11742:	bd80      	pop	{r7, pc}

00011744 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   11744:	b590      	push	{r4, r7, lr}
   11746:	b087      	sub	sp, #28
   11748:	af00      	add	r7, sp, #0
   1174a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   1174c:	2317      	movs	r3, #23
   1174e:	18fb      	adds	r3, r7, r3
   11750:	2200      	movs	r2, #0
   11752:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   11754:	687b      	ldr	r3, [r7, #4]
   11756:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   11758:	693b      	ldr	r3, [r7, #16]
   1175a:	2280      	movs	r2, #128	; 0x80
   1175c:	0052      	lsls	r2, r2, #1
   1175e:	4313      	orrs	r3, r2
   11760:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   11762:	693a      	ldr	r2, [r7, #16]
   11764:	23a5      	movs	r3, #165	; 0xa5
   11766:	015b      	lsls	r3, r3, #5
   11768:	0011      	movs	r1, r2
   1176a:	0018      	movs	r0, r3
   1176c:	4b12      	ldr	r3, [pc, #72]	; (117b8 <chip_apply_conf+0x74>)
   1176e:	4798      	blx	r3
		if(val32 != 0) {		
   11770:	693b      	ldr	r3, [r7, #16]
   11772:	2b00      	cmp	r3, #0
   11774:	d018      	beq.n	117a8 <chip_apply_conf+0x64>
			uint32 reg = 0;
   11776:	2300      	movs	r3, #0
   11778:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1177a:	2317      	movs	r3, #23
   1177c:	18fc      	adds	r4, r7, r3
   1177e:	230c      	movs	r3, #12
   11780:	18fa      	adds	r2, r7, r3
   11782:	23a5      	movs	r3, #165	; 0xa5
   11784:	015b      	lsls	r3, r3, #5
   11786:	0011      	movs	r1, r2
   11788:	0018      	movs	r0, r3
   1178a:	4b0c      	ldr	r3, [pc, #48]	; (117bc <chip_apply_conf+0x78>)
   1178c:	4798      	blx	r3
   1178e:	0003      	movs	r3, r0
   11790:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   11792:	2317      	movs	r3, #23
   11794:	18fb      	adds	r3, r7, r3
   11796:	781b      	ldrb	r3, [r3, #0]
   11798:	b25b      	sxtb	r3, r3
   1179a:	2b00      	cmp	r3, #0
   1179c:	d1e1      	bne.n	11762 <chip_apply_conf+0x1e>
				if(reg == val32)
   1179e:	68fa      	ldr	r2, [r7, #12]
   117a0:	693b      	ldr	r3, [r7, #16]
   117a2:	429a      	cmp	r2, r3
   117a4:	d002      	beq.n	117ac <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   117a6:	e7dc      	b.n	11762 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   117a8:	46c0      	nop			; (mov r8, r8)
   117aa:	e000      	b.n	117ae <chip_apply_conf+0x6a>
					break;
   117ac:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   117ae:	2300      	movs	r3, #0
}
   117b0:	0018      	movs	r0, r3
   117b2:	46bd      	mov	sp, r7
   117b4:	b007      	add	sp, #28
   117b6:	bd90      	pop	{r4, r7, pc}
   117b8:	00011f99 	.word	0x00011f99
   117bc:	00011f75 	.word	0x00011f75

000117c0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   117c0:	b590      	push	{r4, r7, lr}
   117c2:	b083      	sub	sp, #12
   117c4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   117c6:	2300      	movs	r3, #0
   117c8:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   117ca:	1dfb      	adds	r3, r7, #7
   117cc:	2200      	movs	r2, #0
   117ce:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   117d0:	1dfc      	adds	r4, r7, #7
   117d2:	003b      	movs	r3, r7
   117d4:	4a24      	ldr	r2, [pc, #144]	; (11868 <enable_interrupts+0xa8>)
   117d6:	0019      	movs	r1, r3
   117d8:	0010      	movs	r0, r2
   117da:	4b24      	ldr	r3, [pc, #144]	; (1186c <enable_interrupts+0xac>)
   117dc:	4798      	blx	r3
   117de:	0003      	movs	r3, r0
   117e0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   117e2:	1dfb      	adds	r3, r7, #7
   117e4:	781b      	ldrb	r3, [r3, #0]
   117e6:	b25b      	sxtb	r3, r3
   117e8:	2b00      	cmp	r3, #0
   117ea:	d131      	bne.n	11850 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   117ec:	683b      	ldr	r3, [r7, #0]
   117ee:	2280      	movs	r2, #128	; 0x80
   117f0:	0052      	lsls	r2, r2, #1
   117f2:	4313      	orrs	r3, r2
   117f4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   117f6:	683b      	ldr	r3, [r7, #0]
   117f8:	1dfc      	adds	r4, r7, #7
   117fa:	4a1b      	ldr	r2, [pc, #108]	; (11868 <enable_interrupts+0xa8>)
   117fc:	0019      	movs	r1, r3
   117fe:	0010      	movs	r0, r2
   11800:	4b1b      	ldr	r3, [pc, #108]	; (11870 <enable_interrupts+0xb0>)
   11802:	4798      	blx	r3
   11804:	0003      	movs	r3, r0
   11806:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   11808:	1dfb      	adds	r3, r7, #7
   1180a:	781b      	ldrb	r3, [r3, #0]
   1180c:	b25b      	sxtb	r3, r3
   1180e:	2b00      	cmp	r3, #0
   11810:	d120      	bne.n	11854 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   11812:	1dfc      	adds	r4, r7, #7
   11814:	003a      	movs	r2, r7
   11816:	23d0      	movs	r3, #208	; 0xd0
   11818:	015b      	lsls	r3, r3, #5
   1181a:	0011      	movs	r1, r2
   1181c:	0018      	movs	r0, r3
   1181e:	4b13      	ldr	r3, [pc, #76]	; (1186c <enable_interrupts+0xac>)
   11820:	4798      	blx	r3
   11822:	0003      	movs	r3, r0
   11824:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   11826:	1dfb      	adds	r3, r7, #7
   11828:	781b      	ldrb	r3, [r3, #0]
   1182a:	b25b      	sxtb	r3, r3
   1182c:	2b00      	cmp	r3, #0
   1182e:	d113      	bne.n	11858 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   11830:	683b      	ldr	r3, [r7, #0]
   11832:	2280      	movs	r2, #128	; 0x80
   11834:	0252      	lsls	r2, r2, #9
   11836:	4313      	orrs	r3, r2
   11838:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   1183a:	683a      	ldr	r2, [r7, #0]
   1183c:	1dfc      	adds	r4, r7, #7
   1183e:	23d0      	movs	r3, #208	; 0xd0
   11840:	015b      	lsls	r3, r3, #5
   11842:	0011      	movs	r1, r2
   11844:	0018      	movs	r0, r3
   11846:	4b0a      	ldr	r3, [pc, #40]	; (11870 <enable_interrupts+0xb0>)
   11848:	4798      	blx	r3
   1184a:	0003      	movs	r3, r0
   1184c:	7023      	strb	r3, [r4, #0]
   1184e:	e004      	b.n	1185a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   11850:	46c0      	nop			; (mov r8, r8)
   11852:	e002      	b.n	1185a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   11854:	46c0      	nop			; (mov r8, r8)
   11856:	e000      	b.n	1185a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   11858:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   1185a:	1dfb      	adds	r3, r7, #7
   1185c:	781b      	ldrb	r3, [r3, #0]
   1185e:	b25b      	sxtb	r3, r3
}
   11860:	0018      	movs	r0, r3
   11862:	46bd      	mov	sp, r7
   11864:	b003      	add	sp, #12
   11866:	bd90      	pop	{r4, r7, pc}
   11868:	00001408 	.word	0x00001408
   1186c:	00011f75 	.word	0x00011f75
   11870:	00011f99 	.word	0x00011f99

00011874 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   11874:	b580      	push	{r7, lr}
   11876:	b082      	sub	sp, #8
   11878:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   1187a:	4b32      	ldr	r3, [pc, #200]	; (11944 <nmi_get_chipid+0xd0>)
   1187c:	681b      	ldr	r3, [r3, #0]
   1187e:	2b00      	cmp	r3, #0
   11880:	d159      	bne.n	11936 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   11882:	4a30      	ldr	r2, [pc, #192]	; (11944 <nmi_get_chipid+0xd0>)
   11884:	2380      	movs	r3, #128	; 0x80
   11886:	015b      	lsls	r3, r3, #5
   11888:	0011      	movs	r1, r2
   1188a:	0018      	movs	r0, r3
   1188c:	4b2e      	ldr	r3, [pc, #184]	; (11948 <nmi_get_chipid+0xd4>)
   1188e:	4798      	blx	r3
   11890:	1e03      	subs	r3, r0, #0
   11892:	d004      	beq.n	1189e <nmi_get_chipid+0x2a>
			chipid = 0;
   11894:	4b2b      	ldr	r3, [pc, #172]	; (11944 <nmi_get_chipid+0xd0>)
   11896:	2200      	movs	r2, #0
   11898:	601a      	str	r2, [r3, #0]
			return 0;
   1189a:	2300      	movs	r3, #0
   1189c:	e04d      	b.n	1193a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   1189e:	1d3b      	adds	r3, r7, #4
   118a0:	4a2a      	ldr	r2, [pc, #168]	; (1194c <nmi_get_chipid+0xd8>)
   118a2:	0019      	movs	r1, r3
   118a4:	0010      	movs	r0, r2
   118a6:	4b28      	ldr	r3, [pc, #160]	; (11948 <nmi_get_chipid+0xd4>)
   118a8:	4798      	blx	r3
   118aa:	1e03      	subs	r3, r0, #0
   118ac:	d004      	beq.n	118b8 <nmi_get_chipid+0x44>
			chipid = 0;
   118ae:	4b25      	ldr	r3, [pc, #148]	; (11944 <nmi_get_chipid+0xd0>)
   118b0:	2200      	movs	r2, #0
   118b2:	601a      	str	r2, [r3, #0]
			return 0;
   118b4:	2300      	movs	r3, #0
   118b6:	e040      	b.n	1193a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   118b8:	4b22      	ldr	r3, [pc, #136]	; (11944 <nmi_get_chipid+0xd0>)
   118ba:	681b      	ldr	r3, [r3, #0]
   118bc:	4a24      	ldr	r2, [pc, #144]	; (11950 <nmi_get_chipid+0xdc>)
   118be:	4293      	cmp	r3, r2
   118c0:	d106      	bne.n	118d0 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   118c2:	687b      	ldr	r3, [r7, #4]
   118c4:	2b01      	cmp	r3, #1
   118c6:	d029      	beq.n	1191c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   118c8:	4b1e      	ldr	r3, [pc, #120]	; (11944 <nmi_get_chipid+0xd0>)
   118ca:	4a22      	ldr	r2, [pc, #136]	; (11954 <nmi_get_chipid+0xe0>)
   118cc:	601a      	str	r2, [r3, #0]
   118ce:	e025      	b.n	1191c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   118d0:	4b1c      	ldr	r3, [pc, #112]	; (11944 <nmi_get_chipid+0xd0>)
   118d2:	681b      	ldr	r3, [r3, #0]
   118d4:	4a20      	ldr	r2, [pc, #128]	; (11958 <nmi_get_chipid+0xe4>)
   118d6:	4293      	cmp	r3, r2
   118d8:	d10d      	bne.n	118f6 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   118da:	687b      	ldr	r3, [r7, #4]
   118dc:	2b03      	cmp	r3, #3
   118de:	d01d      	beq.n	1191c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   118e0:	687b      	ldr	r3, [r7, #4]
   118e2:	2b04      	cmp	r3, #4
   118e4:	d103      	bne.n	118ee <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   118e6:	4b17      	ldr	r3, [pc, #92]	; (11944 <nmi_get_chipid+0xd0>)
   118e8:	4a1c      	ldr	r2, [pc, #112]	; (1195c <nmi_get_chipid+0xe8>)
   118ea:	601a      	str	r2, [r3, #0]
   118ec:	e016      	b.n	1191c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   118ee:	4b15      	ldr	r3, [pc, #84]	; (11944 <nmi_get_chipid+0xd0>)
   118f0:	4a1b      	ldr	r2, [pc, #108]	; (11960 <nmi_get_chipid+0xec>)
   118f2:	601a      	str	r2, [r3, #0]
   118f4:	e012      	b.n	1191c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   118f6:	4b13      	ldr	r3, [pc, #76]	; (11944 <nmi_get_chipid+0xd0>)
   118f8:	681b      	ldr	r3, [r3, #0]
   118fa:	4a1a      	ldr	r2, [pc, #104]	; (11964 <nmi_get_chipid+0xf0>)
   118fc:	4293      	cmp	r3, r2
   118fe:	d10d      	bne.n	1191c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   11900:	4a10      	ldr	r2, [pc, #64]	; (11944 <nmi_get_chipid+0xd0>)
   11902:	23ec      	movs	r3, #236	; 0xec
   11904:	039b      	lsls	r3, r3, #14
   11906:	0011      	movs	r1, r2
   11908:	0018      	movs	r0, r3
   1190a:	4b0f      	ldr	r3, [pc, #60]	; (11948 <nmi_get_chipid+0xd4>)
   1190c:	4798      	blx	r3
   1190e:	1e03      	subs	r3, r0, #0
   11910:	d004      	beq.n	1191c <nmi_get_chipid+0xa8>
			chipid = 0;
   11912:	4b0c      	ldr	r3, [pc, #48]	; (11944 <nmi_get_chipid+0xd0>)
   11914:	2200      	movs	r2, #0
   11916:	601a      	str	r2, [r3, #0]
			return 0;
   11918:	2300      	movs	r3, #0
   1191a:	e00e      	b.n	1193a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   1191c:	4b09      	ldr	r3, [pc, #36]	; (11944 <nmi_get_chipid+0xd0>)
   1191e:	681b      	ldr	r3, [r3, #0]
   11920:	4a11      	ldr	r2, [pc, #68]	; (11968 <nmi_get_chipid+0xf4>)
   11922:	401a      	ands	r2, r3
   11924:	4b07      	ldr	r3, [pc, #28]	; (11944 <nmi_get_chipid+0xd0>)
   11926:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   11928:	4b06      	ldr	r3, [pc, #24]	; (11944 <nmi_get_chipid+0xd0>)
   1192a:	681b      	ldr	r3, [r3, #0]
   1192c:	22a0      	movs	r2, #160	; 0xa0
   1192e:	02d2      	lsls	r2, r2, #11
   11930:	431a      	orrs	r2, r3
   11932:	4b04      	ldr	r3, [pc, #16]	; (11944 <nmi_get_chipid+0xd0>)
   11934:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   11936:	4b03      	ldr	r3, [pc, #12]	; (11944 <nmi_get_chipid+0xd0>)
   11938:	681b      	ldr	r3, [r3, #0]
}
   1193a:	0018      	movs	r0, r3
   1193c:	46bd      	mov	sp, r7
   1193e:	b002      	add	sp, #8
   11940:	bd80      	pop	{r7, pc}
   11942:	46c0      	nop			; (mov r8, r8)
   11944:	20003ee4 	.word	0x20003ee4
   11948:	00011f75 	.word	0x00011f75
   1194c:	000013f4 	.word	0x000013f4
   11950:	001002a0 	.word	0x001002a0
   11954:	001002a1 	.word	0x001002a1
   11958:	001002b0 	.word	0x001002b0
   1195c:	001002b1 	.word	0x001002b1
   11960:	001002b2 	.word	0x001002b2
   11964:	001000f0 	.word	0x001000f0
   11968:	fff0ffff 	.word	0xfff0ffff

0001196c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   1196c:	b590      	push	{r4, r7, lr}
   1196e:	b083      	sub	sp, #12
   11970:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   11972:	1dfb      	adds	r3, r7, #7
   11974:	2200      	movs	r2, #0
   11976:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   11978:	1dfc      	adds	r4, r7, #7
   1197a:	003b      	movs	r3, r7
   1197c:	0019      	movs	r1, r3
   1197e:	2010      	movs	r0, #16
   11980:	4b2e      	ldr	r3, [pc, #184]	; (11a3c <chip_sleep+0xd0>)
   11982:	4798      	blx	r3
   11984:	0003      	movs	r3, r0
   11986:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   11988:	1dfb      	adds	r3, r7, #7
   1198a:	781b      	ldrb	r3, [r3, #0]
   1198c:	b25b      	sxtb	r3, r3
   1198e:	2b00      	cmp	r3, #0
   11990:	d145      	bne.n	11a1e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   11992:	683b      	ldr	r3, [r7, #0]
   11994:	2201      	movs	r2, #1
   11996:	4013      	ands	r3, r2
   11998:	d000      	beq.n	1199c <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1199a:	e7ed      	b.n	11978 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   1199c:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1199e:	1dfc      	adds	r4, r7, #7
   119a0:	003b      	movs	r3, r7
   119a2:	0019      	movs	r1, r3
   119a4:	2001      	movs	r0, #1
   119a6:	4b25      	ldr	r3, [pc, #148]	; (11a3c <chip_sleep+0xd0>)
   119a8:	4798      	blx	r3
   119aa:	0003      	movs	r3, r0
   119ac:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   119ae:	1dfb      	adds	r3, r7, #7
   119b0:	781b      	ldrb	r3, [r3, #0]
   119b2:	b25b      	sxtb	r3, r3
   119b4:	2b00      	cmp	r3, #0
   119b6:	d134      	bne.n	11a22 <chip_sleep+0xb6>
	if(reg & NBIT1)
   119b8:	683b      	ldr	r3, [r7, #0]
   119ba:	2202      	movs	r2, #2
   119bc:	4013      	ands	r3, r2
   119be:	d010      	beq.n	119e2 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   119c0:	683b      	ldr	r3, [r7, #0]
   119c2:	2202      	movs	r2, #2
   119c4:	4393      	bics	r3, r2
   119c6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   119c8:	683b      	ldr	r3, [r7, #0]
   119ca:	1dfc      	adds	r4, r7, #7
   119cc:	0019      	movs	r1, r3
   119ce:	2001      	movs	r0, #1
   119d0:	4b1b      	ldr	r3, [pc, #108]	; (11a40 <chip_sleep+0xd4>)
   119d2:	4798      	blx	r3
   119d4:	0003      	movs	r3, r0
   119d6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   119d8:	1dfb      	adds	r3, r7, #7
   119da:	781b      	ldrb	r3, [r3, #0]
   119dc:	b25b      	sxtb	r3, r3
   119de:	2b00      	cmp	r3, #0
   119e0:	d121      	bne.n	11a26 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   119e2:	1dfc      	adds	r4, r7, #7
   119e4:	003b      	movs	r3, r7
   119e6:	0019      	movs	r1, r3
   119e8:	200b      	movs	r0, #11
   119ea:	4b14      	ldr	r3, [pc, #80]	; (11a3c <chip_sleep+0xd0>)
   119ec:	4798      	blx	r3
   119ee:	0003      	movs	r3, r0
   119f0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   119f2:	1dfb      	adds	r3, r7, #7
   119f4:	781b      	ldrb	r3, [r3, #0]
   119f6:	b25b      	sxtb	r3, r3
   119f8:	2b00      	cmp	r3, #0
   119fa:	d116      	bne.n	11a2a <chip_sleep+0xbe>
	if(reg & NBIT0)
   119fc:	683b      	ldr	r3, [r7, #0]
   119fe:	2201      	movs	r2, #1
   11a00:	4013      	ands	r3, r2
   11a02:	d013      	beq.n	11a2c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   11a04:	683b      	ldr	r3, [r7, #0]
   11a06:	2201      	movs	r2, #1
   11a08:	4393      	bics	r3, r2
   11a0a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   11a0c:	683b      	ldr	r3, [r7, #0]
   11a0e:	1dfc      	adds	r4, r7, #7
   11a10:	0019      	movs	r1, r3
   11a12:	200b      	movs	r0, #11
   11a14:	4b0a      	ldr	r3, [pc, #40]	; (11a40 <chip_sleep+0xd4>)
   11a16:	4798      	blx	r3
   11a18:	0003      	movs	r3, r0
   11a1a:	7023      	strb	r3, [r4, #0]
   11a1c:	e006      	b.n	11a2c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   11a1e:	46c0      	nop			; (mov r8, r8)
   11a20:	e004      	b.n	11a2c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   11a22:	46c0      	nop			; (mov r8, r8)
   11a24:	e002      	b.n	11a2c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   11a26:	46c0      	nop			; (mov r8, r8)
   11a28:	e000      	b.n	11a2c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   11a2a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   11a2c:	1dfb      	adds	r3, r7, #7
   11a2e:	781b      	ldrb	r3, [r3, #0]
   11a30:	b25b      	sxtb	r3, r3
}
   11a32:	0018      	movs	r0, r3
   11a34:	46bd      	mov	sp, r7
   11a36:	b003      	add	sp, #12
   11a38:	bd90      	pop	{r4, r7, pc}
   11a3a:	46c0      	nop			; (mov r8, r8)
   11a3c:	00011f75 	.word	0x00011f75
   11a40:	00011f99 	.word	0x00011f99

00011a44 <chip_wake>:
sint8 chip_wake(void)
{
   11a44:	b590      	push	{r4, r7, lr}
   11a46:	b085      	sub	sp, #20
   11a48:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   11a4a:	230f      	movs	r3, #15
   11a4c:	18fb      	adds	r3, r7, r3
   11a4e:	2200      	movs	r2, #0
   11a50:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   11a52:	2300      	movs	r3, #0
   11a54:	607b      	str	r3, [r7, #4]
   11a56:	2300      	movs	r3, #0
   11a58:	603b      	str	r3, [r7, #0]
   11a5a:	2300      	movs	r3, #0
   11a5c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   11a5e:	230f      	movs	r3, #15
   11a60:	18fc      	adds	r4, r7, r3
   11a62:	1d3b      	adds	r3, r7, #4
   11a64:	0019      	movs	r1, r3
   11a66:	200b      	movs	r0, #11
   11a68:	4b4e      	ldr	r3, [pc, #312]	; (11ba4 <chip_wake+0x160>)
   11a6a:	4798      	blx	r3
   11a6c:	0003      	movs	r3, r0
   11a6e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   11a70:	230f      	movs	r3, #15
   11a72:	18fb      	adds	r3, r7, r3
   11a74:	781b      	ldrb	r3, [r3, #0]
   11a76:	b25b      	sxtb	r3, r3
   11a78:	2b00      	cmp	r3, #0
   11a7a:	d000      	beq.n	11a7e <chip_wake+0x3a>
   11a7c:	e082      	b.n	11b84 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   11a7e:	687b      	ldr	r3, [r7, #4]
   11a80:	2201      	movs	r2, #1
   11a82:	4013      	ands	r3, r2
   11a84:	d111      	bne.n	11aaa <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   11a86:	687b      	ldr	r3, [r7, #4]
   11a88:	2201      	movs	r2, #1
   11a8a:	4313      	orrs	r3, r2
   11a8c:	220f      	movs	r2, #15
   11a8e:	18bc      	adds	r4, r7, r2
   11a90:	0019      	movs	r1, r3
   11a92:	200b      	movs	r0, #11
   11a94:	4b44      	ldr	r3, [pc, #272]	; (11ba8 <chip_wake+0x164>)
   11a96:	4798      	blx	r3
   11a98:	0003      	movs	r3, r0
   11a9a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   11a9c:	230f      	movs	r3, #15
   11a9e:	18fb      	adds	r3, r7, r3
   11aa0:	781b      	ldrb	r3, [r3, #0]
   11aa2:	b25b      	sxtb	r3, r3
   11aa4:	2b00      	cmp	r3, #0
   11aa6:	d000      	beq.n	11aaa <chip_wake+0x66>
   11aa8:	e06e      	b.n	11b88 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   11aaa:	230f      	movs	r3, #15
   11aac:	18fc      	adds	r4, r7, r3
   11aae:	1d3b      	adds	r3, r7, #4
   11ab0:	0019      	movs	r1, r3
   11ab2:	2001      	movs	r0, #1
   11ab4:	4b3b      	ldr	r3, [pc, #236]	; (11ba4 <chip_wake+0x160>)
   11ab6:	4798      	blx	r3
   11ab8:	0003      	movs	r3, r0
   11aba:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   11abc:	230f      	movs	r3, #15
   11abe:	18fb      	adds	r3, r7, r3
   11ac0:	781b      	ldrb	r3, [r3, #0]
   11ac2:	b25b      	sxtb	r3, r3
   11ac4:	2b00      	cmp	r3, #0
   11ac6:	d161      	bne.n	11b8c <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   11ac8:	687b      	ldr	r3, [r7, #4]
   11aca:	2202      	movs	r2, #2
   11acc:	4013      	ands	r3, r2
   11ace:	d110      	bne.n	11af2 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   11ad0:	687b      	ldr	r3, [r7, #4]
   11ad2:	2202      	movs	r2, #2
   11ad4:	4313      	orrs	r3, r2
   11ad6:	220f      	movs	r2, #15
   11ad8:	18bc      	adds	r4, r7, r2
   11ada:	0019      	movs	r1, r3
   11adc:	2001      	movs	r0, #1
   11ade:	4b32      	ldr	r3, [pc, #200]	; (11ba8 <chip_wake+0x164>)
   11ae0:	4798      	blx	r3
   11ae2:	0003      	movs	r3, r0
   11ae4:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   11ae6:	230f      	movs	r3, #15
   11ae8:	18fb      	adds	r3, r7, r3
   11aea:	781b      	ldrb	r3, [r3, #0]
   11aec:	b25b      	sxtb	r3, r3
   11aee:	2b00      	cmp	r3, #0
   11af0:	d14e      	bne.n	11b90 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   11af2:	230f      	movs	r3, #15
   11af4:	18fc      	adds	r4, r7, r3
   11af6:	003b      	movs	r3, r7
   11af8:	0019      	movs	r1, r3
   11afa:	200f      	movs	r0, #15
   11afc:	4b29      	ldr	r3, [pc, #164]	; (11ba4 <chip_wake+0x160>)
   11afe:	4798      	blx	r3
   11b00:	0003      	movs	r3, r0
   11b02:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   11b04:	230f      	movs	r3, #15
   11b06:	18fb      	adds	r3, r7, r3
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	b25b      	sxtb	r3, r3
   11b0c:	2b00      	cmp	r3, #0
   11b0e:	d014      	beq.n	11b3a <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   11b10:	23a8      	movs	r3, #168	; 0xa8
   11b12:	005a      	lsls	r2, r3, #1
   11b14:	4925      	ldr	r1, [pc, #148]	; (11bac <chip_wake+0x168>)
   11b16:	4b26      	ldr	r3, [pc, #152]	; (11bb0 <chip_wake+0x16c>)
   11b18:	0018      	movs	r0, r3
   11b1a:	4b26      	ldr	r3, [pc, #152]	; (11bb4 <chip_wake+0x170>)
   11b1c:	4798      	blx	r3
   11b1e:	230f      	movs	r3, #15
   11b20:	18fb      	adds	r3, r7, r3
   11b22:	2100      	movs	r1, #0
   11b24:	5659      	ldrsb	r1, [r3, r1]
   11b26:	683a      	ldr	r2, [r7, #0]
   11b28:	4b23      	ldr	r3, [pc, #140]	; (11bb8 <chip_wake+0x174>)
   11b2a:	0018      	movs	r0, r3
   11b2c:	4b21      	ldr	r3, [pc, #132]	; (11bb4 <chip_wake+0x170>)
   11b2e:	4798      	blx	r3
   11b30:	4b22      	ldr	r3, [pc, #136]	; (11bbc <chip_wake+0x178>)
   11b32:	0018      	movs	r0, r3
   11b34:	4b1f      	ldr	r3, [pc, #124]	; (11bb4 <chip_wake+0x170>)
   11b36:	4798      	blx	r3
			goto _WAKE_EXIT;
   11b38:	e02b      	b.n	11b92 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   11b3a:	683b      	ldr	r3, [r7, #0]
   11b3c:	2204      	movs	r2, #4
   11b3e:	4013      	ands	r3, r2
   11b40:	d11c      	bne.n	11b7c <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   11b42:	2002      	movs	r0, #2
   11b44:	4b1e      	ldr	r3, [pc, #120]	; (11bc0 <chip_wake+0x17c>)
   11b46:	4798      	blx	r3
		trials++;
   11b48:	68bb      	ldr	r3, [r7, #8]
   11b4a:	3301      	adds	r3, #1
   11b4c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   11b4e:	68bb      	ldr	r3, [r7, #8]
   11b50:	2b04      	cmp	r3, #4
   11b52:	d9ce      	bls.n	11af2 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   11b54:	23ad      	movs	r3, #173	; 0xad
   11b56:	005a      	lsls	r2, r3, #1
   11b58:	4914      	ldr	r1, [pc, #80]	; (11bac <chip_wake+0x168>)
   11b5a:	4b15      	ldr	r3, [pc, #84]	; (11bb0 <chip_wake+0x16c>)
   11b5c:	0018      	movs	r0, r3
   11b5e:	4b15      	ldr	r3, [pc, #84]	; (11bb4 <chip_wake+0x170>)
   11b60:	4798      	blx	r3
   11b62:	4b18      	ldr	r3, [pc, #96]	; (11bc4 <chip_wake+0x180>)
   11b64:	0018      	movs	r0, r3
   11b66:	4b13      	ldr	r3, [pc, #76]	; (11bb4 <chip_wake+0x170>)
   11b68:	4798      	blx	r3
   11b6a:	4b14      	ldr	r3, [pc, #80]	; (11bbc <chip_wake+0x178>)
   11b6c:	0018      	movs	r0, r3
   11b6e:	4b11      	ldr	r3, [pc, #68]	; (11bb4 <chip_wake+0x170>)
   11b70:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   11b72:	230f      	movs	r3, #15
   11b74:	18fb      	adds	r3, r7, r3
   11b76:	22fc      	movs	r2, #252	; 0xfc
   11b78:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   11b7a:	e00a      	b.n	11b92 <chip_wake+0x14e>
			break;
   11b7c:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   11b7e:	4b12      	ldr	r3, [pc, #72]	; (11bc8 <chip_wake+0x184>)
   11b80:	4798      	blx	r3
   11b82:	e006      	b.n	11b92 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   11b84:	46c0      	nop			; (mov r8, r8)
   11b86:	e004      	b.n	11b92 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   11b88:	46c0      	nop			; (mov r8, r8)
   11b8a:	e002      	b.n	11b92 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   11b8c:	46c0      	nop			; (mov r8, r8)
   11b8e:	e000      	b.n	11b92 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   11b90:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   11b92:	230f      	movs	r3, #15
   11b94:	18fb      	adds	r3, r7, r3
   11b96:	781b      	ldrb	r3, [r3, #0]
   11b98:	b25b      	sxtb	r3, r3
}
   11b9a:	0018      	movs	r0, r3
   11b9c:	46bd      	mov	sp, r7
   11b9e:	b005      	add	sp, #20
   11ba0:	bd90      	pop	{r4, r7, pc}
   11ba2:	46c0      	nop			; (mov r8, r8)
   11ba4:	00011f75 	.word	0x00011f75
   11ba8:	00011f99 	.word	0x00011f99
   11bac:	000289c0 	.word	0x000289c0
   11bb0:	00028934 	.word	0x00028934
   11bb4:	0000d14d 	.word	0x0000d14d
   11bb8:	00028948 	.word	0x00028948
   11bbc:	00028960 	.word	0x00028960
   11bc0:	0000f605 	.word	0x0000f605
   11bc4:	00028964 	.word	0x00028964
   11bc8:	00011f35 	.word	0x00011f35

00011bcc <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   11bcc:	b580      	push	{r7, lr}
   11bce:	b088      	sub	sp, #32
   11bd0:	af00      	add	r7, sp, #0
   11bd2:	0002      	movs	r2, r0
   11bd4:	1dfb      	adds	r3, r7, #7
   11bd6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   11bd8:	2313      	movs	r3, #19
   11bda:	18fb      	adds	r3, r7, r3
   11bdc:	2200      	movs	r2, #0
   11bde:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   11be0:	2300      	movs	r3, #0
   11be2:	61fb      	str	r3, [r7, #28]
   11be4:	2300      	movs	r3, #0
   11be6:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   11be8:	2300      	movs	r3, #0
   11bea:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   11bec:	4b4a      	ldr	r3, [pc, #296]	; (11d18 <wait_for_bootrom+0x14c>)
   11bee:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   11bf0:	2300      	movs	r3, #0
   11bf2:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   11bf4:	4b49      	ldr	r3, [pc, #292]	; (11d1c <wait_for_bootrom+0x150>)
   11bf6:	0018      	movs	r0, r3
   11bf8:	4b49      	ldr	r3, [pc, #292]	; (11d20 <wait_for_bootrom+0x154>)
   11bfa:	4798      	blx	r3
   11bfc:	0003      	movs	r3, r0
   11bfe:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   11c00:	69fb      	ldr	r3, [r7, #28]
   11c02:	2b00      	cmp	r3, #0
   11c04:	db03      	blt.n	11c0e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   11c06:	2001      	movs	r0, #1
   11c08:	4b46      	ldr	r3, [pc, #280]	; (11d24 <wait_for_bootrom+0x158>)
   11c0a:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   11c0c:	e7f2      	b.n	11bf4 <wait_for_bootrom+0x28>
			break;
   11c0e:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   11c10:	4b45      	ldr	r3, [pc, #276]	; (11d28 <wait_for_bootrom+0x15c>)
   11c12:	0018      	movs	r0, r3
   11c14:	4b42      	ldr	r3, [pc, #264]	; (11d20 <wait_for_bootrom+0x154>)
   11c16:	4798      	blx	r3
   11c18:	0003      	movs	r3, r0
   11c1a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   11c1c:	69fb      	ldr	r3, [r7, #28]
   11c1e:	2201      	movs	r2, #1
   11c20:	4013      	ands	r3, r2
   11c22:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   11c24:	69fb      	ldr	r3, [r7, #28]
   11c26:	2b00      	cmp	r3, #0
   11c28:	d112      	bne.n	11c50 <wait_for_bootrom+0x84>
	{
		reg = 0;
   11c2a:	2300      	movs	r3, #0
   11c2c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   11c2e:	e00b      	b.n	11c48 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   11c30:	2001      	movs	r0, #1
   11c32:	4b3c      	ldr	r3, [pc, #240]	; (11d24 <wait_for_bootrom+0x158>)
   11c34:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   11c36:	4b3d      	ldr	r3, [pc, #244]	; (11d2c <wait_for_bootrom+0x160>)
   11c38:	0018      	movs	r0, r3
   11c3a:	4b39      	ldr	r3, [pc, #228]	; (11d20 <wait_for_bootrom+0x154>)
   11c3c:	4798      	blx	r3
   11c3e:	0003      	movs	r3, r0
   11c40:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   11c42:	69bb      	ldr	r3, [r7, #24]
   11c44:	3301      	adds	r3, #1
   11c46:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   11c48:	69fb      	ldr	r3, [r7, #28]
   11c4a:	4a39      	ldr	r2, [pc, #228]	; (11d30 <wait_for_bootrom+0x164>)
   11c4c:	4293      	cmp	r3, r2
   11c4e:	d1ef      	bne.n	11c30 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   11c50:	1dfb      	adds	r3, r7, #7
   11c52:	781b      	ldrb	r3, [r3, #0]
   11c54:	2b02      	cmp	r3, #2
   11c56:	d10d      	bne.n	11c74 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   11c58:	4a36      	ldr	r2, [pc, #216]	; (11d34 <wait_for_bootrom+0x168>)
   11c5a:	4b37      	ldr	r3, [pc, #220]	; (11d38 <wait_for_bootrom+0x16c>)
   11c5c:	0011      	movs	r1, r2
   11c5e:	0018      	movs	r0, r3
   11c60:	4b36      	ldr	r3, [pc, #216]	; (11d3c <wait_for_bootrom+0x170>)
   11c62:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   11c64:	2380      	movs	r3, #128	; 0x80
   11c66:	035b      	lsls	r3, r3, #13
   11c68:	4a35      	ldr	r2, [pc, #212]	; (11d40 <wait_for_bootrom+0x174>)
   11c6a:	0019      	movs	r1, r3
   11c6c:	0010      	movs	r0, r2
   11c6e:	4b33      	ldr	r3, [pc, #204]	; (11d3c <wait_for_bootrom+0x170>)
   11c70:	4798      	blx	r3
   11c72:	e022      	b.n	11cba <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   11c74:	1dfb      	adds	r3, r7, #7
   11c76:	781b      	ldrb	r3, [r3, #0]
   11c78:	2b03      	cmp	r3, #3
   11c7a:	d10b      	bne.n	11c94 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   11c7c:	4a2d      	ldr	r2, [pc, #180]	; (11d34 <wait_for_bootrom+0x168>)
   11c7e:	4b2e      	ldr	r3, [pc, #184]	; (11d38 <wait_for_bootrom+0x16c>)
   11c80:	0011      	movs	r1, r2
   11c82:	0018      	movs	r0, r3
   11c84:	4b2d      	ldr	r3, [pc, #180]	; (11d3c <wait_for_bootrom+0x170>)
   11c86:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   11c88:	4b2d      	ldr	r3, [pc, #180]	; (11d40 <wait_for_bootrom+0x174>)
   11c8a:	2100      	movs	r1, #0
   11c8c:	0018      	movs	r0, r3
   11c8e:	4b2b      	ldr	r3, [pc, #172]	; (11d3c <wait_for_bootrom+0x170>)
   11c90:	4798      	blx	r3
   11c92:	e012      	b.n	11cba <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   11c94:	1dfb      	adds	r3, r7, #7
   11c96:	781b      	ldrb	r3, [r3, #0]
   11c98:	2b04      	cmp	r3, #4
   11c9a:	d108      	bne.n	11cae <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   11c9c:	2380      	movs	r3, #128	; 0x80
   11c9e:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   11ca0:	68fb      	ldr	r3, [r7, #12]
   11ca2:	4a27      	ldr	r2, [pc, #156]	; (11d40 <wait_for_bootrom+0x174>)
   11ca4:	0019      	movs	r1, r3
   11ca6:	0010      	movs	r0, r2
   11ca8:	4b24      	ldr	r3, [pc, #144]	; (11d3c <wait_for_bootrom+0x170>)
   11caa:	4798      	blx	r3
   11cac:	e005      	b.n	11cba <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   11cae:	68fb      	ldr	r3, [r7, #12]
   11cb0:	4a23      	ldr	r2, [pc, #140]	; (11d40 <wait_for_bootrom+0x174>)
   11cb2:	0019      	movs	r1, r3
   11cb4:	0010      	movs	r0, r2
   11cb6:	4b21      	ldr	r3, [pc, #132]	; (11d3c <wait_for_bootrom+0x170>)
   11cb8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   11cba:	4b22      	ldr	r3, [pc, #136]	; (11d44 <wait_for_bootrom+0x178>)
   11cbc:	4798      	blx	r3
   11cbe:	0003      	movs	r3, r0
   11cc0:	051b      	lsls	r3, r3, #20
   11cc2:	0d1b      	lsrs	r3, r3, #20
   11cc4:	4a20      	ldr	r2, [pc, #128]	; (11d48 <wait_for_bootrom+0x17c>)
   11cc6:	4293      	cmp	r3, r2
   11cc8:	d906      	bls.n	11cd8 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   11cca:	697b      	ldr	r3, [r7, #20]
   11ccc:	2202      	movs	r2, #2
   11cce:	4313      	orrs	r3, r2
   11cd0:	0018      	movs	r0, r3
   11cd2:	4b1e      	ldr	r3, [pc, #120]	; (11d4c <wait_for_bootrom+0x180>)
   11cd4:	4798      	blx	r3
   11cd6:	e003      	b.n	11ce0 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   11cd8:	697b      	ldr	r3, [r7, #20]
   11cda:	0018      	movs	r0, r3
   11cdc:	4b1b      	ldr	r3, [pc, #108]	; (11d4c <wait_for_bootrom+0x180>)
   11cde:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   11ce0:	4b1b      	ldr	r3, [pc, #108]	; (11d50 <wait_for_bootrom+0x184>)
   11ce2:	0018      	movs	r0, r3
   11ce4:	4b1b      	ldr	r3, [pc, #108]	; (11d54 <wait_for_bootrom+0x188>)
   11ce6:	4798      	blx	r3
   11ce8:	68fa      	ldr	r2, [r7, #12]
   11cea:	4b1b      	ldr	r3, [pc, #108]	; (11d58 <wait_for_bootrom+0x18c>)
   11cec:	0011      	movs	r1, r2
   11cee:	0018      	movs	r0, r3
   11cf0:	4b18      	ldr	r3, [pc, #96]	; (11d54 <wait_for_bootrom+0x188>)
   11cf2:	4798      	blx	r3
   11cf4:	4b19      	ldr	r3, [pc, #100]	; (11d5c <wait_for_bootrom+0x190>)
   11cf6:	0018      	movs	r0, r3
   11cf8:	4b16      	ldr	r3, [pc, #88]	; (11d54 <wait_for_bootrom+0x188>)
   11cfa:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   11cfc:	4a18      	ldr	r2, [pc, #96]	; (11d60 <wait_for_bootrom+0x194>)
   11cfe:	4b0b      	ldr	r3, [pc, #44]	; (11d2c <wait_for_bootrom+0x160>)
   11d00:	0011      	movs	r1, r2
   11d02:	0018      	movs	r0, r3
   11d04:	4b0d      	ldr	r3, [pc, #52]	; (11d3c <wait_for_bootrom+0x170>)
   11d06:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   11d08:	2313      	movs	r3, #19
   11d0a:	18fb      	adds	r3, r7, r3
   11d0c:	781b      	ldrb	r3, [r3, #0]
   11d0e:	b25b      	sxtb	r3, r3
}
   11d10:	0018      	movs	r0, r3
   11d12:	46bd      	mov	sp, r7
   11d14:	b008      	add	sp, #32
   11d16:	bd80      	pop	{r7, pc}
   11d18:	13301354 	.word	0x13301354
   11d1c:	00001014 	.word	0x00001014
   11d20:	00011f55 	.word	0x00011f55
   11d24:	0000f605 	.word	0x0000f605
   11d28:	000207bc 	.word	0x000207bc
   11d2c:	000c000c 	.word	0x000c000c
   11d30:	10add09e 	.word	0x10add09e
   11d34:	3c1cd57d 	.word	0x3c1cd57d
   11d38:	000207ac 	.word	0x000207ac
   11d3c:	00011f99 	.word	0x00011f99
   11d40:	0000108c 	.word	0x0000108c
   11d44:	00011875 	.word	0x00011875
   11d48:	0000039f 	.word	0x0000039f
   11d4c:	00011745 	.word	0x00011745
   11d50:	00028980 	.word	0x00028980
   11d54:	0000d14d 	.word	0x0000d14d
   11d58:	0002898c 	.word	0x0002898c
   11d5c:	00028960 	.word	0x00028960
   11d60:	ef522f61 	.word	0xef522f61

00011d64 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   11d64:	b580      	push	{r7, lr}
   11d66:	b088      	sub	sp, #32
   11d68:	af00      	add	r7, sp, #0
   11d6a:	0002      	movs	r2, r0
   11d6c:	1dfb      	adds	r3, r7, #7
   11d6e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   11d70:	231f      	movs	r3, #31
   11d72:	18fb      	adds	r3, r7, r3
   11d74:	2200      	movs	r2, #0
   11d76:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   11d78:	2300      	movs	r3, #0
   11d7a:	61bb      	str	r3, [r7, #24]
   11d7c:	2300      	movs	r3, #0
   11d7e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   11d80:	2301      	movs	r3, #1
   11d82:	425b      	negs	r3, r3
   11d84:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   11d86:	4b1d      	ldr	r3, [pc, #116]	; (11dfc <wait_for_firmware_start+0x98>)
   11d88:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   11d8a:	4b1d      	ldr	r3, [pc, #116]	; (11e00 <wait_for_firmware_start+0x9c>)
   11d8c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   11d8e:	1dfb      	adds	r3, r7, #7
   11d90:	781b      	ldrb	r3, [r3, #0]
   11d92:	2b02      	cmp	r3, #2
   11d94:	d003      	beq.n	11d9e <wait_for_firmware_start+0x3a>
   11d96:	1dfb      	adds	r3, r7, #7
   11d98:	781b      	ldrb	r3, [r3, #0]
   11d9a:	2b03      	cmp	r3, #3
   11d9c:	d119      	bne.n	11dd2 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   11d9e:	4b19      	ldr	r3, [pc, #100]	; (11e04 <wait_for_firmware_start+0xa0>)
   11da0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   11da2:	4b19      	ldr	r3, [pc, #100]	; (11e08 <wait_for_firmware_start+0xa4>)
   11da4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   11da6:	e014      	b.n	11dd2 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   11da8:	2002      	movs	r0, #2
   11daa:	4b18      	ldr	r3, [pc, #96]	; (11e0c <wait_for_firmware_start+0xa8>)
   11dac:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   11dae:	68fb      	ldr	r3, [r7, #12]
   11db0:	0018      	movs	r0, r3
   11db2:	4b17      	ldr	r3, [pc, #92]	; (11e10 <wait_for_firmware_start+0xac>)
   11db4:	4798      	blx	r3
   11db6:	0003      	movs	r3, r0
   11db8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   11dba:	697b      	ldr	r3, [r7, #20]
   11dbc:	3301      	adds	r3, #1
   11dbe:	617b      	str	r3, [r7, #20]
   11dc0:	697a      	ldr	r2, [r7, #20]
   11dc2:	693b      	ldr	r3, [r7, #16]
   11dc4:	429a      	cmp	r2, r3
   11dc6:	d304      	bcc.n	11dd2 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   11dc8:	231f      	movs	r3, #31
   11dca:	18fb      	adds	r3, r7, r3
   11dcc:	22fb      	movs	r2, #251	; 0xfb
   11dce:	701a      	strb	r2, [r3, #0]
			goto ERR;
   11dd0:	e00c      	b.n	11dec <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   11dd2:	68ba      	ldr	r2, [r7, #8]
   11dd4:	69bb      	ldr	r3, [r7, #24]
   11dd6:	429a      	cmp	r2, r3
   11dd8:	d1e6      	bne.n	11da8 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   11dda:	68bb      	ldr	r3, [r7, #8]
   11ddc:	4a08      	ldr	r2, [pc, #32]	; (11e00 <wait_for_firmware_start+0x9c>)
   11dde:	4293      	cmp	r3, r2
   11de0:	d104      	bne.n	11dec <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   11de2:	4b06      	ldr	r3, [pc, #24]	; (11dfc <wait_for_firmware_start+0x98>)
   11de4:	2100      	movs	r1, #0
   11de6:	0018      	movs	r0, r3
   11de8:	4b0a      	ldr	r3, [pc, #40]	; (11e14 <wait_for_firmware_start+0xb0>)
   11dea:	4798      	blx	r3
	}
ERR:
	return ret;
   11dec:	231f      	movs	r3, #31
   11dee:	18fb      	adds	r3, r7, r3
   11df0:	781b      	ldrb	r3, [r3, #0]
   11df2:	b25b      	sxtb	r3, r3
}
   11df4:	0018      	movs	r0, r3
   11df6:	46bd      	mov	sp, r7
   11df8:	b008      	add	sp, #32
   11dfa:	bd80      	pop	{r7, pc}
   11dfc:	0000108c 	.word	0x0000108c
   11e00:	02532636 	.word	0x02532636
   11e04:	000207ac 	.word	0x000207ac
   11e08:	d75dc1c3 	.word	0xd75dc1c3
   11e0c:	0000f605 	.word	0x0000f605
   11e10:	00011f55 	.word	0x00011f55
   11e14:	00011f99 	.word	0x00011f99

00011e18 <chip_deinit>:

sint8 chip_deinit(void)
{
   11e18:	b590      	push	{r4, r7, lr}
   11e1a:	b083      	sub	sp, #12
   11e1c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   11e1e:	2300      	movs	r3, #0
   11e20:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   11e22:	1dfc      	adds	r4, r7, #7
   11e24:	003a      	movs	r2, r7
   11e26:	23a0      	movs	r3, #160	; 0xa0
   11e28:	015b      	lsls	r3, r3, #5
   11e2a:	0011      	movs	r1, r2
   11e2c:	0018      	movs	r0, r3
   11e2e:	4b20      	ldr	r3, [pc, #128]	; (11eb0 <chip_deinit+0x98>)
   11e30:	4798      	blx	r3
   11e32:	0003      	movs	r3, r0
   11e34:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   11e36:	1dfb      	adds	r3, r7, #7
   11e38:	781b      	ldrb	r3, [r3, #0]
   11e3a:	b25b      	sxtb	r3, r3
   11e3c:	2b00      	cmp	r3, #0
   11e3e:	d00e      	beq.n	11e5e <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   11e40:	4a1c      	ldr	r2, [pc, #112]	; (11eb4 <chip_deinit+0x9c>)
   11e42:	491d      	ldr	r1, [pc, #116]	; (11eb8 <chip_deinit+0xa0>)
   11e44:	4b1d      	ldr	r3, [pc, #116]	; (11ebc <chip_deinit+0xa4>)
   11e46:	0018      	movs	r0, r3
   11e48:	4b1d      	ldr	r3, [pc, #116]	; (11ec0 <chip_deinit+0xa8>)
   11e4a:	4798      	blx	r3
   11e4c:	4b1d      	ldr	r3, [pc, #116]	; (11ec4 <chip_deinit+0xac>)
   11e4e:	0018      	movs	r0, r3
   11e50:	4b1b      	ldr	r3, [pc, #108]	; (11ec0 <chip_deinit+0xa8>)
   11e52:	4798      	blx	r3
   11e54:	4b1c      	ldr	r3, [pc, #112]	; (11ec8 <chip_deinit+0xb0>)
   11e56:	0018      	movs	r0, r3
   11e58:	4b19      	ldr	r3, [pc, #100]	; (11ec0 <chip_deinit+0xa8>)
   11e5a:	4798      	blx	r3
		goto ERR1;
   11e5c:	e021      	b.n	11ea2 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   11e5e:	683b      	ldr	r3, [r7, #0]
   11e60:	4a1a      	ldr	r2, [pc, #104]	; (11ecc <chip_deinit+0xb4>)
   11e62:	4013      	ands	r3, r2
   11e64:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   11e66:	683a      	ldr	r2, [r7, #0]
   11e68:	1dfc      	adds	r4, r7, #7
   11e6a:	23a0      	movs	r3, #160	; 0xa0
   11e6c:	015b      	lsls	r3, r3, #5
   11e6e:	0011      	movs	r1, r2
   11e70:	0018      	movs	r0, r3
   11e72:	4b17      	ldr	r3, [pc, #92]	; (11ed0 <chip_deinit+0xb8>)
   11e74:	4798      	blx	r3
   11e76:	0003      	movs	r3, r0
   11e78:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   11e7a:	1dfb      	adds	r3, r7, #7
   11e7c:	781b      	ldrb	r3, [r3, #0]
   11e7e:	b25b      	sxtb	r3, r3
   11e80:	2b00      	cmp	r3, #0
   11e82:	d00e      	beq.n	11ea2 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   11e84:	4a13      	ldr	r2, [pc, #76]	; (11ed4 <chip_deinit+0xbc>)
   11e86:	490c      	ldr	r1, [pc, #48]	; (11eb8 <chip_deinit+0xa0>)
   11e88:	4b0c      	ldr	r3, [pc, #48]	; (11ebc <chip_deinit+0xa4>)
   11e8a:	0018      	movs	r0, r3
   11e8c:	4b0c      	ldr	r3, [pc, #48]	; (11ec0 <chip_deinit+0xa8>)
   11e8e:	4798      	blx	r3
   11e90:	4b0c      	ldr	r3, [pc, #48]	; (11ec4 <chip_deinit+0xac>)
   11e92:	0018      	movs	r0, r3
   11e94:	4b0a      	ldr	r3, [pc, #40]	; (11ec0 <chip_deinit+0xa8>)
   11e96:	4798      	blx	r3
   11e98:	4b0b      	ldr	r3, [pc, #44]	; (11ec8 <chip_deinit+0xb0>)
   11e9a:	0018      	movs	r0, r3
   11e9c:	4b08      	ldr	r3, [pc, #32]	; (11ec0 <chip_deinit+0xa8>)
   11e9e:	4798      	blx	r3
		goto ERR1;
   11ea0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   11ea2:	1dfb      	adds	r3, r7, #7
   11ea4:	781b      	ldrb	r3, [r3, #0]
   11ea6:	b25b      	sxtb	r3, r3
}
   11ea8:	0018      	movs	r0, r3
   11eaa:	46bd      	mov	sp, r7
   11eac:	b003      	add	sp, #12
   11eae:	bd90      	pop	{r4, r7, pc}
   11eb0:	00011f75 	.word	0x00011f75
   11eb4:	00000201 	.word	0x00000201
   11eb8:	000289cc 	.word	0x000289cc
   11ebc:	00028934 	.word	0x00028934
   11ec0:	0000d14d 	.word	0x0000d14d
   11ec4:	000289a4 	.word	0x000289a4
   11ec8:	00028960 	.word	0x00028960
   11ecc:	fffffbff 	.word	0xfffffbff
   11ed0:	00011f99 	.word	0x00011f99
   11ed4:	00000207 	.word	0x00000207

00011ed8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   11ed8:	b590      	push	{r4, r7, lr}
   11eda:	b085      	sub	sp, #20
   11edc:	af00      	add	r7, sp, #0
   11ede:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   11ee0:	230f      	movs	r3, #15
   11ee2:	18fb      	adds	r3, r7, r3
   11ee4:	2200      	movs	r2, #0
   11ee6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   11ee8:	230f      	movs	r3, #15
   11eea:	18fc      	adds	r4, r7, r3
   11eec:	687b      	ldr	r3, [r7, #4]
   11eee:	0018      	movs	r0, r3
   11ef0:	4b05      	ldr	r3, [pc, #20]	; (11f08 <nm_bus_iface_init+0x30>)
   11ef2:	4798      	blx	r3
   11ef4:	0003      	movs	r3, r0
   11ef6:	7023      	strb	r3, [r4, #0]
	return ret;
   11ef8:	230f      	movs	r3, #15
   11efa:	18fb      	adds	r3, r7, r3
   11efc:	781b      	ldrb	r3, [r3, #0]
   11efe:	b25b      	sxtb	r3, r3
}
   11f00:	0018      	movs	r0, r3
   11f02:	46bd      	mov	sp, r7
   11f04:	b005      	add	sp, #20
   11f06:	bd90      	pop	{r4, r7, pc}
   11f08:	0000fcc1 	.word	0x0000fcc1

00011f0c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   11f0c:	b590      	push	{r4, r7, lr}
   11f0e:	b083      	sub	sp, #12
   11f10:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   11f12:	1dfb      	adds	r3, r7, #7
   11f14:	2200      	movs	r2, #0
   11f16:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   11f18:	1dfc      	adds	r4, r7, #7
   11f1a:	4b05      	ldr	r3, [pc, #20]	; (11f30 <nm_bus_iface_deinit+0x24>)
   11f1c:	4798      	blx	r3
   11f1e:	0003      	movs	r3, r0
   11f20:	7023      	strb	r3, [r4, #0]

	return ret;
   11f22:	1dfb      	adds	r3, r7, #7
   11f24:	781b      	ldrb	r3, [r3, #0]
   11f26:	b25b      	sxtb	r3, r3
}
   11f28:	0018      	movs	r0, r3
   11f2a:	46bd      	mov	sp, r7
   11f2c:	b003      	add	sp, #12
   11f2e:	bd90      	pop	{r4, r7, pc}
   11f30:	0000fe39 	.word	0x0000fe39

00011f34 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   11f34:	b580      	push	{r7, lr}
   11f36:	b082      	sub	sp, #8
   11f38:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   11f3a:	1dfb      	adds	r3, r7, #7
   11f3c:	2200      	movs	r2, #0
   11f3e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   11f40:	4b03      	ldr	r3, [pc, #12]	; (11f50 <nm_bus_reset+0x1c>)
   11f42:	4798      	blx	r3
   11f44:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   11f46:	0018      	movs	r0, r3
   11f48:	46bd      	mov	sp, r7
   11f4a:	b002      	add	sp, #8
   11f4c:	bd80      	pop	{r7, pc}
   11f4e:	46c0      	nop			; (mov r8, r8)
   11f50:	00013d61 	.word	0x00013d61

00011f54 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   11f54:	b580      	push	{r7, lr}
   11f56:	b082      	sub	sp, #8
   11f58:	af00      	add	r7, sp, #0
   11f5a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   11f5c:	687b      	ldr	r3, [r7, #4]
   11f5e:	0018      	movs	r0, r3
   11f60:	4b03      	ldr	r3, [pc, #12]	; (11f70 <nm_read_reg+0x1c>)
   11f62:	4798      	blx	r3
   11f64:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   11f66:	0018      	movs	r0, r3
   11f68:	46bd      	mov	sp, r7
   11f6a:	b002      	add	sp, #8
   11f6c:	bd80      	pop	{r7, pc}
   11f6e:	46c0      	nop			; (mov r8, r8)
   11f70:	00013ef5 	.word	0x00013ef5

00011f74 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   11f74:	b580      	push	{r7, lr}
   11f76:	b082      	sub	sp, #8
   11f78:	af00      	add	r7, sp, #0
   11f7a:	6078      	str	r0, [r7, #4]
   11f7c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   11f7e:	683a      	ldr	r2, [r7, #0]
   11f80:	687b      	ldr	r3, [r7, #4]
   11f82:	0011      	movs	r1, r2
   11f84:	0018      	movs	r0, r3
   11f86:	4b03      	ldr	r3, [pc, #12]	; (11f94 <nm_read_reg_with_ret+0x20>)
   11f88:	4798      	blx	r3
   11f8a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   11f8c:	0018      	movs	r0, r3
   11f8e:	46bd      	mov	sp, r7
   11f90:	b002      	add	sp, #8
   11f92:	bd80      	pop	{r7, pc}
   11f94:	00013f19 	.word	0x00013f19

00011f98 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   11f98:	b580      	push	{r7, lr}
   11f9a:	b082      	sub	sp, #8
   11f9c:	af00      	add	r7, sp, #0
   11f9e:	6078      	str	r0, [r7, #4]
   11fa0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   11fa2:	683a      	ldr	r2, [r7, #0]
   11fa4:	687b      	ldr	r3, [r7, #4]
   11fa6:	0011      	movs	r1, r2
   11fa8:	0018      	movs	r0, r3
   11faa:	4b03      	ldr	r3, [pc, #12]	; (11fb8 <nm_write_reg+0x20>)
   11fac:	4798      	blx	r3
   11fae:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   11fb0:	0018      	movs	r0, r3
   11fb2:	46bd      	mov	sp, r7
   11fb4:	b002      	add	sp, #8
   11fb6:	bd80      	pop	{r7, pc}
   11fb8:	00013f69 	.word	0x00013f69

00011fbc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   11fbc:	b580      	push	{r7, lr}
   11fbe:	b084      	sub	sp, #16
   11fc0:	af00      	add	r7, sp, #0
   11fc2:	60f8      	str	r0, [r7, #12]
   11fc4:	60b9      	str	r1, [r7, #8]
   11fc6:	1dbb      	adds	r3, r7, #6
   11fc8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   11fca:	1dbb      	adds	r3, r7, #6
   11fcc:	881a      	ldrh	r2, [r3, #0]
   11fce:	68b9      	ldr	r1, [r7, #8]
   11fd0:	68fb      	ldr	r3, [r7, #12]
   11fd2:	0018      	movs	r0, r3
   11fd4:	4b03      	ldr	r3, [pc, #12]	; (11fe4 <p_nm_read_block+0x28>)
   11fd6:	4798      	blx	r3
   11fd8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   11fda:	0018      	movs	r0, r3
   11fdc:	46bd      	mov	sp, r7
   11fde:	b004      	add	sp, #16
   11fe0:	bd80      	pop	{r7, pc}
   11fe2:	46c0      	nop			; (mov r8, r8)
   11fe4:	00013fb9 	.word	0x00013fb9

00011fe8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   11fe8:	b580      	push	{r7, lr}
   11fea:	b086      	sub	sp, #24
   11fec:	af00      	add	r7, sp, #0
   11fee:	60f8      	str	r0, [r7, #12]
   11ff0:	60b9      	str	r1, [r7, #8]
   11ff2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   11ff4:	4b2d      	ldr	r3, [pc, #180]	; (120ac <nm_read_block+0xc4>)
   11ff6:	881a      	ldrh	r2, [r3, #0]
   11ff8:	2310      	movs	r3, #16
   11ffa:	18fb      	adds	r3, r7, r3
   11ffc:	3a08      	subs	r2, #8
   11ffe:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   12000:	2300      	movs	r3, #0
   12002:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   12004:	2313      	movs	r3, #19
   12006:	18fb      	adds	r3, r7, r3
   12008:	2200      	movs	r2, #0
   1200a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1200c:	2310      	movs	r3, #16
   1200e:	18fb      	adds	r3, r7, r3
   12010:	881a      	ldrh	r2, [r3, #0]
   12012:	687b      	ldr	r3, [r7, #4]
   12014:	429a      	cmp	r2, r3
   12016:	d313      	bcc.n	12040 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   12018:	68ba      	ldr	r2, [r7, #8]
   1201a:	697b      	ldr	r3, [r7, #20]
   1201c:	18d1      	adds	r1, r2, r3
   1201e:	687b      	ldr	r3, [r7, #4]
   12020:	b29a      	uxth	r2, r3
   12022:	68fb      	ldr	r3, [r7, #12]
   12024:	0018      	movs	r0, r3
   12026:	4b22      	ldr	r3, [pc, #136]	; (120b0 <nm_read_block+0xc8>)
   12028:	4798      	blx	r3
   1202a:	0003      	movs	r3, r0
   1202c:	b2da      	uxtb	r2, r3
   1202e:	2313      	movs	r3, #19
   12030:	18fb      	adds	r3, r7, r3
   12032:	781b      	ldrb	r3, [r3, #0]
   12034:	18d3      	adds	r3, r2, r3
   12036:	b2da      	uxtb	r2, r3
   12038:	2313      	movs	r3, #19
   1203a:	18fb      	adds	r3, r7, r3
   1203c:	701a      	strb	r2, [r3, #0]
			break;
   1203e:	e02d      	b.n	1209c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   12040:	68ba      	ldr	r2, [r7, #8]
   12042:	697b      	ldr	r3, [r7, #20]
   12044:	18d1      	adds	r1, r2, r3
   12046:	2310      	movs	r3, #16
   12048:	18fb      	adds	r3, r7, r3
   1204a:	881a      	ldrh	r2, [r3, #0]
   1204c:	68fb      	ldr	r3, [r7, #12]
   1204e:	0018      	movs	r0, r3
   12050:	4b17      	ldr	r3, [pc, #92]	; (120b0 <nm_read_block+0xc8>)
   12052:	4798      	blx	r3
   12054:	0003      	movs	r3, r0
   12056:	b2da      	uxtb	r2, r3
   12058:	2313      	movs	r3, #19
   1205a:	18fb      	adds	r3, r7, r3
   1205c:	781b      	ldrb	r3, [r3, #0]
   1205e:	18d3      	adds	r3, r2, r3
   12060:	b2da      	uxtb	r2, r3
   12062:	2313      	movs	r3, #19
   12064:	18fb      	adds	r3, r7, r3
   12066:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   12068:	2313      	movs	r3, #19
   1206a:	18fb      	adds	r3, r7, r3
   1206c:	781b      	ldrb	r3, [r3, #0]
   1206e:	b25b      	sxtb	r3, r3
   12070:	2b00      	cmp	r3, #0
   12072:	d112      	bne.n	1209a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   12074:	2310      	movs	r3, #16
   12076:	18fb      	adds	r3, r7, r3
   12078:	881b      	ldrh	r3, [r3, #0]
   1207a:	687a      	ldr	r2, [r7, #4]
   1207c:	1ad3      	subs	r3, r2, r3
   1207e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   12080:	2310      	movs	r3, #16
   12082:	18fb      	adds	r3, r7, r3
   12084:	881b      	ldrh	r3, [r3, #0]
   12086:	697a      	ldr	r2, [r7, #20]
   12088:	18d3      	adds	r3, r2, r3
   1208a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   1208c:	2310      	movs	r3, #16
   1208e:	18fb      	adds	r3, r7, r3
   12090:	881b      	ldrh	r3, [r3, #0]
   12092:	68fa      	ldr	r2, [r7, #12]
   12094:	18d3      	adds	r3, r2, r3
   12096:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   12098:	e7b8      	b.n	1200c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   1209a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   1209c:	2313      	movs	r3, #19
   1209e:	18fb      	adds	r3, r7, r3
   120a0:	781b      	ldrb	r3, [r3, #0]
   120a2:	b25b      	sxtb	r3, r3
}
   120a4:	0018      	movs	r0, r3
   120a6:	46bd      	mov	sp, r7
   120a8:	b006      	add	sp, #24
   120aa:	bd80      	pop	{r7, pc}
   120ac:	20000118 	.word	0x20000118
   120b0:	00011fbd 	.word	0x00011fbd

000120b4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   120b4:	b580      	push	{r7, lr}
   120b6:	b084      	sub	sp, #16
   120b8:	af00      	add	r7, sp, #0
   120ba:	60f8      	str	r0, [r7, #12]
   120bc:	60b9      	str	r1, [r7, #8]
   120be:	1dbb      	adds	r3, r7, #6
   120c0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   120c2:	1dbb      	adds	r3, r7, #6
   120c4:	881a      	ldrh	r2, [r3, #0]
   120c6:	68b9      	ldr	r1, [r7, #8]
   120c8:	68fb      	ldr	r3, [r7, #12]
   120ca:	0018      	movs	r0, r3
   120cc:	4b03      	ldr	r3, [pc, #12]	; (120dc <p_nm_write_block+0x28>)
   120ce:	4798      	blx	r3
   120d0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   120d2:	0018      	movs	r0, r3
   120d4:	46bd      	mov	sp, r7
   120d6:	b004      	add	sp, #16
   120d8:	bd80      	pop	{r7, pc}
   120da:	46c0      	nop			; (mov r8, r8)
   120dc:	00014011 	.word	0x00014011

000120e0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   120e0:	b580      	push	{r7, lr}
   120e2:	b086      	sub	sp, #24
   120e4:	af00      	add	r7, sp, #0
   120e6:	60f8      	str	r0, [r7, #12]
   120e8:	60b9      	str	r1, [r7, #8]
   120ea:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   120ec:	4b2d      	ldr	r3, [pc, #180]	; (121a4 <nm_write_block+0xc4>)
   120ee:	881a      	ldrh	r2, [r3, #0]
   120f0:	2310      	movs	r3, #16
   120f2:	18fb      	adds	r3, r7, r3
   120f4:	3a08      	subs	r2, #8
   120f6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   120f8:	2300      	movs	r3, #0
   120fa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   120fc:	2313      	movs	r3, #19
   120fe:	18fb      	adds	r3, r7, r3
   12100:	2200      	movs	r2, #0
   12102:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   12104:	2310      	movs	r3, #16
   12106:	18fb      	adds	r3, r7, r3
   12108:	881a      	ldrh	r2, [r3, #0]
   1210a:	687b      	ldr	r3, [r7, #4]
   1210c:	429a      	cmp	r2, r3
   1210e:	d313      	bcc.n	12138 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   12110:	68ba      	ldr	r2, [r7, #8]
   12112:	697b      	ldr	r3, [r7, #20]
   12114:	18d1      	adds	r1, r2, r3
   12116:	687b      	ldr	r3, [r7, #4]
   12118:	b29a      	uxth	r2, r3
   1211a:	68fb      	ldr	r3, [r7, #12]
   1211c:	0018      	movs	r0, r3
   1211e:	4b22      	ldr	r3, [pc, #136]	; (121a8 <nm_write_block+0xc8>)
   12120:	4798      	blx	r3
   12122:	0003      	movs	r3, r0
   12124:	b2da      	uxtb	r2, r3
   12126:	2313      	movs	r3, #19
   12128:	18fb      	adds	r3, r7, r3
   1212a:	781b      	ldrb	r3, [r3, #0]
   1212c:	18d3      	adds	r3, r2, r3
   1212e:	b2da      	uxtb	r2, r3
   12130:	2313      	movs	r3, #19
   12132:	18fb      	adds	r3, r7, r3
   12134:	701a      	strb	r2, [r3, #0]
			break;
   12136:	e02d      	b.n	12194 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   12138:	68ba      	ldr	r2, [r7, #8]
   1213a:	697b      	ldr	r3, [r7, #20]
   1213c:	18d1      	adds	r1, r2, r3
   1213e:	2310      	movs	r3, #16
   12140:	18fb      	adds	r3, r7, r3
   12142:	881a      	ldrh	r2, [r3, #0]
   12144:	68fb      	ldr	r3, [r7, #12]
   12146:	0018      	movs	r0, r3
   12148:	4b17      	ldr	r3, [pc, #92]	; (121a8 <nm_write_block+0xc8>)
   1214a:	4798      	blx	r3
   1214c:	0003      	movs	r3, r0
   1214e:	b2da      	uxtb	r2, r3
   12150:	2313      	movs	r3, #19
   12152:	18fb      	adds	r3, r7, r3
   12154:	781b      	ldrb	r3, [r3, #0]
   12156:	18d3      	adds	r3, r2, r3
   12158:	b2da      	uxtb	r2, r3
   1215a:	2313      	movs	r3, #19
   1215c:	18fb      	adds	r3, r7, r3
   1215e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   12160:	2313      	movs	r3, #19
   12162:	18fb      	adds	r3, r7, r3
   12164:	781b      	ldrb	r3, [r3, #0]
   12166:	b25b      	sxtb	r3, r3
   12168:	2b00      	cmp	r3, #0
   1216a:	d112      	bne.n	12192 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   1216c:	2310      	movs	r3, #16
   1216e:	18fb      	adds	r3, r7, r3
   12170:	881b      	ldrh	r3, [r3, #0]
   12172:	687a      	ldr	r2, [r7, #4]
   12174:	1ad3      	subs	r3, r2, r3
   12176:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   12178:	2310      	movs	r3, #16
   1217a:	18fb      	adds	r3, r7, r3
   1217c:	881b      	ldrh	r3, [r3, #0]
   1217e:	697a      	ldr	r2, [r7, #20]
   12180:	18d3      	adds	r3, r2, r3
   12182:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   12184:	2310      	movs	r3, #16
   12186:	18fb      	adds	r3, r7, r3
   12188:	881b      	ldrh	r3, [r3, #0]
   1218a:	68fa      	ldr	r2, [r7, #12]
   1218c:	18d3      	adds	r3, r2, r3
   1218e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   12190:	e7b8      	b.n	12104 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   12192:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   12194:	2313      	movs	r3, #19
   12196:	18fb      	adds	r3, r7, r3
   12198:	781b      	ldrb	r3, [r3, #0]
   1219a:	b25b      	sxtb	r3, r3
}
   1219c:	0018      	movs	r0, r3
   1219e:	46bd      	mov	sp, r7
   121a0:	b006      	add	sp, #24
   121a2:	bd80      	pop	{r7, pc}
   121a4:	20000118 	.word	0x20000118
   121a8:	000120b5 	.word	0x000120b5

000121ac <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   121ac:	b590      	push	{r4, r7, lr}
   121ae:	b089      	sub	sp, #36	; 0x24
   121b0:	af00      	add	r7, sp, #0
   121b2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   121b4:	2300      	movs	r3, #0
   121b6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   121b8:	231f      	movs	r3, #31
   121ba:	18fb      	adds	r3, r7, r3
   121bc:	2200      	movs	r2, #0
   121be:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   121c0:	230c      	movs	r3, #12
   121c2:	18fb      	adds	r3, r7, r3
   121c4:	0018      	movs	r0, r3
   121c6:	2308      	movs	r3, #8
   121c8:	001a      	movs	r2, r3
   121ca:	2100      	movs	r1, #0
   121cc:	4b64      	ldr	r3, [pc, #400]	; (12360 <nm_get_firmware_full_info+0x1b4>)
   121ce:	4798      	blx	r3
	if (pstrRev != NULL)
   121d0:	687b      	ldr	r3, [r7, #4]
   121d2:	2b00      	cmp	r3, #0
   121d4:	d100      	bne.n	121d8 <nm_get_firmware_full_info+0x2c>
   121d6:	e0ba      	b.n	1234e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   121d8:	687b      	ldr	r3, [r7, #4]
   121da:	2228      	movs	r2, #40	; 0x28
   121dc:	2100      	movs	r1, #0
   121de:	0018      	movs	r0, r3
   121e0:	4b60      	ldr	r3, [pc, #384]	; (12364 <nm_get_firmware_full_info+0x1b8>)
   121e2:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   121e4:	231f      	movs	r3, #31
   121e6:	18fc      	adds	r4, r7, r3
   121e8:	2314      	movs	r3, #20
   121ea:	18fb      	adds	r3, r7, r3
   121ec:	4a5e      	ldr	r2, [pc, #376]	; (12368 <nm_get_firmware_full_info+0x1bc>)
   121ee:	0019      	movs	r1, r3
   121f0:	0010      	movs	r0, r2
   121f2:	4b5e      	ldr	r3, [pc, #376]	; (1236c <nm_get_firmware_full_info+0x1c0>)
   121f4:	4798      	blx	r3
   121f6:	0003      	movs	r3, r0
   121f8:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   121fa:	231f      	movs	r3, #31
   121fc:	18fb      	adds	r3, r7, r3
   121fe:	781b      	ldrb	r3, [r3, #0]
   12200:	b25b      	sxtb	r3, r3
   12202:	2b00      	cmp	r3, #0
   12204:	d000      	beq.n	12208 <nm_get_firmware_full_info+0x5c>
   12206:	e0a2      	b.n	1234e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   12208:	697b      	ldr	r3, [r7, #20]
   1220a:	2b00      	cmp	r3, #0
   1220c:	d100      	bne.n	12210 <nm_get_firmware_full_info+0x64>
   1220e:	e09a      	b.n	12346 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   12210:	697b      	ldr	r3, [r7, #20]
   12212:	22c0      	movs	r2, #192	; 0xc0
   12214:	0292      	lsls	r2, r2, #10
   12216:	4313      	orrs	r3, r2
   12218:	221f      	movs	r2, #31
   1221a:	18bc      	adds	r4, r7, r2
   1221c:	220c      	movs	r2, #12
   1221e:	18b9      	adds	r1, r7, r2
   12220:	2208      	movs	r2, #8
   12222:	0018      	movs	r0, r3
   12224:	4b52      	ldr	r3, [pc, #328]	; (12370 <nm_get_firmware_full_info+0x1c4>)
   12226:	4798      	blx	r3
   12228:	0003      	movs	r3, r0
   1222a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   1222c:	231f      	movs	r3, #31
   1222e:	18fb      	adds	r3, r7, r3
   12230:	781b      	ldrb	r3, [r3, #0]
   12232:	b25b      	sxtb	r3, r3
   12234:	2b00      	cmp	r3, #0
   12236:	d000      	beq.n	1223a <nm_get_firmware_full_info+0x8e>
   12238:	e089      	b.n	1234e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   1223a:	230c      	movs	r3, #12
   1223c:	18fb      	adds	r3, r7, r3
   1223e:	685b      	ldr	r3, [r3, #4]
   12240:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   12242:	697b      	ldr	r3, [r7, #20]
   12244:	041b      	lsls	r3, r3, #16
   12246:	0c1b      	lsrs	r3, r3, #16
   12248:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   1224a:	697b      	ldr	r3, [r7, #20]
   1224c:	2b00      	cmp	r3, #0
   1224e:	d100      	bne.n	12252 <nm_get_firmware_full_info+0xa6>
   12250:	e074      	b.n	1233c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   12252:	697b      	ldr	r3, [r7, #20]
   12254:	22c0      	movs	r2, #192	; 0xc0
   12256:	0292      	lsls	r2, r2, #10
   12258:	4313      	orrs	r3, r2
   1225a:	221f      	movs	r2, #31
   1225c:	18bc      	adds	r4, r7, r2
   1225e:	6879      	ldr	r1, [r7, #4]
   12260:	2228      	movs	r2, #40	; 0x28
   12262:	0018      	movs	r0, r3
   12264:	4b42      	ldr	r3, [pc, #264]	; (12370 <nm_get_firmware_full_info+0x1c4>)
   12266:	4798      	blx	r3
   12268:	0003      	movs	r3, r0
   1226a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   1226c:	231f      	movs	r3, #31
   1226e:	18fb      	adds	r3, r7, r3
   12270:	781b      	ldrb	r3, [r3, #0]
   12272:	b25b      	sxtb	r3, r3
   12274:	2b00      	cmp	r3, #0
   12276:	d16a      	bne.n	1234e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   12278:	687b      	ldr	r3, [r7, #4]
   1227a:	791b      	ldrb	r3, [r3, #4]
   1227c:	021b      	lsls	r3, r3, #8
   1227e:	b21a      	sxth	r2, r3
   12280:	687b      	ldr	r3, [r7, #4]
   12282:	795b      	ldrb	r3, [r3, #5]
   12284:	011b      	lsls	r3, r3, #4
   12286:	b21b      	sxth	r3, r3
   12288:	21ff      	movs	r1, #255	; 0xff
   1228a:	400b      	ands	r3, r1
   1228c:	b21b      	sxth	r3, r3
   1228e:	4313      	orrs	r3, r2
   12290:	b21a      	sxth	r2, r3
   12292:	687b      	ldr	r3, [r7, #4]
   12294:	799b      	ldrb	r3, [r3, #6]
   12296:	b21b      	sxth	r3, r3
   12298:	210f      	movs	r1, #15
   1229a:	400b      	ands	r3, r1
   1229c:	b21b      	sxth	r3, r3
   1229e:	4313      	orrs	r3, r2
   122a0:	b21a      	sxth	r2, r3
   122a2:	231c      	movs	r3, #28
   122a4:	18fb      	adds	r3, r7, r3
   122a6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   122a8:	231a      	movs	r3, #26
   122aa:	18fb      	adds	r3, r7, r3
   122ac:	4a31      	ldr	r2, [pc, #196]	; (12374 <nm_get_firmware_full_info+0x1c8>)
   122ae:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   122b0:	687b      	ldr	r3, [r7, #4]
   122b2:	79db      	ldrb	r3, [r3, #7]
   122b4:	021b      	lsls	r3, r3, #8
   122b6:	b21a      	sxth	r2, r3
   122b8:	687b      	ldr	r3, [r7, #4]
   122ba:	7a1b      	ldrb	r3, [r3, #8]
   122bc:	011b      	lsls	r3, r3, #4
   122be:	b21b      	sxth	r3, r3
   122c0:	21ff      	movs	r1, #255	; 0xff
   122c2:	400b      	ands	r3, r1
   122c4:	b21b      	sxth	r3, r3
   122c6:	4313      	orrs	r3, r2
   122c8:	b21a      	sxth	r2, r3
   122ca:	687b      	ldr	r3, [r7, #4]
   122cc:	7a5b      	ldrb	r3, [r3, #9]
   122ce:	b21b      	sxth	r3, r3
   122d0:	210f      	movs	r1, #15
   122d2:	400b      	ands	r3, r1
   122d4:	b21b      	sxth	r3, r3
   122d6:	4313      	orrs	r3, r2
   122d8:	b21a      	sxth	r2, r3
   122da:	2318      	movs	r3, #24
   122dc:	18fb      	adds	r3, r7, r3
   122de:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   122e0:	231c      	movs	r3, #28
   122e2:	18fb      	adds	r3, r7, r3
   122e4:	881b      	ldrh	r3, [r3, #0]
   122e6:	2b00      	cmp	r3, #0
   122e8:	d009      	beq.n	122fe <nm_get_firmware_full_info+0x152>
   122ea:	2318      	movs	r3, #24
   122ec:	18fb      	adds	r3, r7, r3
   122ee:	881b      	ldrh	r3, [r3, #0]
   122f0:	2b00      	cmp	r3, #0
   122f2:	d004      	beq.n	122fe <nm_get_firmware_full_info+0x152>
   122f4:	2318      	movs	r3, #24
   122f6:	18fb      	adds	r3, r7, r3
   122f8:	881b      	ldrh	r3, [r3, #0]
   122fa:	2b00      	cmp	r3, #0
   122fc:	d104      	bne.n	12308 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   122fe:	231f      	movs	r3, #31
   12300:	18fb      	adds	r3, r7, r3
   12302:	22f4      	movs	r2, #244	; 0xf4
   12304:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   12306:	e022      	b.n	1234e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   12308:	231a      	movs	r3, #26
   1230a:	18fa      	adds	r2, r7, r3
   1230c:	2318      	movs	r3, #24
   1230e:	18fb      	adds	r3, r7, r3
   12310:	8812      	ldrh	r2, [r2, #0]
   12312:	881b      	ldrh	r3, [r3, #0]
   12314:	429a      	cmp	r2, r3
   12316:	d204      	bcs.n	12322 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   12318:	231f      	movs	r3, #31
   1231a:	18fb      	adds	r3, r7, r3
   1231c:	22f3      	movs	r2, #243	; 0xf3
   1231e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   12320:	e015      	b.n	1234e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   12322:	231a      	movs	r3, #26
   12324:	18fa      	adds	r2, r7, r3
   12326:	231c      	movs	r3, #28
   12328:	18fb      	adds	r3, r7, r3
   1232a:	8812      	ldrh	r2, [r2, #0]
   1232c:	881b      	ldrh	r3, [r3, #0]
   1232e:	429a      	cmp	r2, r3
   12330:	d90d      	bls.n	1234e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   12332:	231f      	movs	r3, #31
   12334:	18fb      	adds	r3, r7, r3
   12336:	22f3      	movs	r2, #243	; 0xf3
   12338:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   1233a:	e008      	b.n	1234e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   1233c:	231f      	movs	r3, #31
   1233e:	18fb      	adds	r3, r7, r3
   12340:	22f4      	movs	r2, #244	; 0xf4
   12342:	701a      	strb	r2, [r3, #0]
   12344:	e003      	b.n	1234e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   12346:	231f      	movs	r3, #31
   12348:	18fb      	adds	r3, r7, r3
   1234a:	22f4      	movs	r2, #244	; 0xf4
   1234c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   1234e:	231f      	movs	r3, #31
   12350:	18fb      	adds	r3, r7, r3
   12352:	781b      	ldrb	r3, [r3, #0]
   12354:	b25b      	sxtb	r3, r3
}
   12356:	0018      	movs	r0, r3
   12358:	46bd      	mov	sp, r7
   1235a:	b009      	add	sp, #36	; 0x24
   1235c:	bd90      	pop	{r4, r7, pc}
   1235e:	46c0      	nop			; (mov r8, r8)
   12360:	000247b7 	.word	0x000247b7
   12364:	0000fee5 	.word	0x0000fee5
   12368:	000c0008 	.word	0x000c0008
   1236c:	00011f75 	.word	0x00011f75
   12370:	00011fe9 	.word	0x00011fe9
   12374:	00001354 	.word	0x00001354

00012378 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   12378:	b590      	push	{r4, r7, lr}
   1237a:	b085      	sub	sp, #20
   1237c:	af00      	add	r7, sp, #0
   1237e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   12380:	230f      	movs	r3, #15
   12382:	18fb      	adds	r3, r7, r3
   12384:	2200      	movs	r2, #0
   12386:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   12388:	687b      	ldr	r3, [r7, #4]
   1238a:	2b00      	cmp	r3, #0
   1238c:	d013      	beq.n	123b6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   1238e:	230e      	movs	r3, #14
   12390:	18fb      	adds	r3, r7, r3
   12392:	687a      	ldr	r2, [r7, #4]
   12394:	7812      	ldrb	r2, [r2, #0]
   12396:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   12398:	230e      	movs	r3, #14
   1239a:	18fb      	adds	r3, r7, r3
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	2b00      	cmp	r3, #0
   123a0:	d004      	beq.n	123ac <nm_drv_init+0x34>
   123a2:	230e      	movs	r3, #14
   123a4:	18fb      	adds	r3, r7, r3
   123a6:	781b      	ldrb	r3, [r3, #0]
   123a8:	2b04      	cmp	r3, #4
   123aa:	d908      	bls.n	123be <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   123ac:	230e      	movs	r3, #14
   123ae:	18fb      	adds	r3, r7, r3
   123b0:	2201      	movs	r2, #1
   123b2:	701a      	strb	r2, [r3, #0]
   123b4:	e003      	b.n	123be <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   123b6:	230e      	movs	r3, #14
   123b8:	18fb      	adds	r3, r7, r3
   123ba:	2201      	movs	r2, #1
   123bc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   123be:	230f      	movs	r3, #15
   123c0:	18fc      	adds	r4, r7, r3
   123c2:	2000      	movs	r0, #0
   123c4:	4b41      	ldr	r3, [pc, #260]	; (124cc <nm_drv_init+0x154>)
   123c6:	4798      	blx	r3
   123c8:	0003      	movs	r3, r0
   123ca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   123cc:	230f      	movs	r3, #15
   123ce:	18fb      	adds	r3, r7, r3
   123d0:	781b      	ldrb	r3, [r3, #0]
   123d2:	b25b      	sxtb	r3, r3
   123d4:	2b00      	cmp	r3, #0
   123d6:	d00f      	beq.n	123f8 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   123d8:	2390      	movs	r3, #144	; 0x90
   123da:	005a      	lsls	r2, r3, #1
   123dc:	493c      	ldr	r1, [pc, #240]	; (124d0 <nm_drv_init+0x158>)
   123de:	4b3d      	ldr	r3, [pc, #244]	; (124d4 <nm_drv_init+0x15c>)
   123e0:	0018      	movs	r0, r3
   123e2:	4b3d      	ldr	r3, [pc, #244]	; (124d8 <nm_drv_init+0x160>)
   123e4:	4798      	blx	r3
   123e6:	4b3d      	ldr	r3, [pc, #244]	; (124dc <nm_drv_init+0x164>)
   123e8:	0018      	movs	r0, r3
   123ea:	4b3b      	ldr	r3, [pc, #236]	; (124d8 <nm_drv_init+0x160>)
   123ec:	4798      	blx	r3
   123ee:	4b3c      	ldr	r3, [pc, #240]	; (124e0 <nm_drv_init+0x168>)
   123f0:	0018      	movs	r0, r3
   123f2:	4b39      	ldr	r3, [pc, #228]	; (124d8 <nm_drv_init+0x160>)
   123f4:	4798      	blx	r3
		goto ERR1;
   123f6:	e061      	b.n	124bc <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   123f8:	4b3a      	ldr	r3, [pc, #232]	; (124e4 <nm_drv_init+0x16c>)
   123fa:	0018      	movs	r0, r3
   123fc:	4b36      	ldr	r3, [pc, #216]	; (124d8 <nm_drv_init+0x160>)
   123fe:	4798      	blx	r3
   12400:	4b39      	ldr	r3, [pc, #228]	; (124e8 <nm_drv_init+0x170>)
   12402:	4798      	blx	r3
   12404:	0002      	movs	r2, r0
   12406:	4b39      	ldr	r3, [pc, #228]	; (124ec <nm_drv_init+0x174>)
   12408:	0011      	movs	r1, r2
   1240a:	0018      	movs	r0, r3
   1240c:	4b32      	ldr	r3, [pc, #200]	; (124d8 <nm_drv_init+0x160>)
   1240e:	4798      	blx	r3
   12410:	4b33      	ldr	r3, [pc, #204]	; (124e0 <nm_drv_init+0x168>)
   12412:	0018      	movs	r0, r3
   12414:	4b30      	ldr	r3, [pc, #192]	; (124d8 <nm_drv_init+0x160>)
   12416:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   12418:	4b35      	ldr	r3, [pc, #212]	; (124f0 <nm_drv_init+0x178>)
   1241a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   1241c:	230f      	movs	r3, #15
   1241e:	18fc      	adds	r4, r7, r3
   12420:	230e      	movs	r3, #14
   12422:	18fb      	adds	r3, r7, r3
   12424:	781b      	ldrb	r3, [r3, #0]
   12426:	0018      	movs	r0, r3
   12428:	4b32      	ldr	r3, [pc, #200]	; (124f4 <nm_drv_init+0x17c>)
   1242a:	4798      	blx	r3
   1242c:	0003      	movs	r3, r0
   1242e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   12430:	230f      	movs	r3, #15
   12432:	18fb      	adds	r3, r7, r3
   12434:	781b      	ldrb	r3, [r3, #0]
   12436:	b25b      	sxtb	r3, r3
   12438:	2b00      	cmp	r3, #0
   1243a:	d13a      	bne.n	124b2 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   1243c:	230f      	movs	r3, #15
   1243e:	18fc      	adds	r4, r7, r3
   12440:	230e      	movs	r3, #14
   12442:	18fb      	adds	r3, r7, r3
   12444:	781b      	ldrb	r3, [r3, #0]
   12446:	0018      	movs	r0, r3
   12448:	4b2b      	ldr	r3, [pc, #172]	; (124f8 <nm_drv_init+0x180>)
   1244a:	4798      	blx	r3
   1244c:	0003      	movs	r3, r0
   1244e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   12450:	230f      	movs	r3, #15
   12452:	18fb      	adds	r3, r7, r3
   12454:	781b      	ldrb	r3, [r3, #0]
   12456:	b25b      	sxtb	r3, r3
   12458:	2b00      	cmp	r3, #0
   1245a:	d12c      	bne.n	124b6 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   1245c:	230e      	movs	r3, #14
   1245e:	18fb      	adds	r3, r7, r3
   12460:	781b      	ldrb	r3, [r3, #0]
   12462:	2b02      	cmp	r3, #2
   12464:	d02a      	beq.n	124bc <nm_drv_init+0x144>
   12466:	230e      	movs	r3, #14
   12468:	18fb      	adds	r3, r7, r3
   1246a:	781b      	ldrb	r3, [r3, #0]
   1246c:	2b03      	cmp	r3, #3
   1246e:	d025      	beq.n	124bc <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   12470:	230f      	movs	r3, #15
   12472:	18fc      	adds	r4, r7, r3
   12474:	4b21      	ldr	r3, [pc, #132]	; (124fc <nm_drv_init+0x184>)
   12476:	4798      	blx	r3
   12478:	0003      	movs	r3, r0
   1247a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1247c:	230f      	movs	r3, #15
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781b      	ldrb	r3, [r3, #0]
   12482:	b25b      	sxtb	r3, r3
   12484:	2b00      	cmp	r3, #0
   12486:	d00f      	beq.n	124a8 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   12488:	23a7      	movs	r3, #167	; 0xa7
   1248a:	005a      	lsls	r2, r3, #1
   1248c:	4910      	ldr	r1, [pc, #64]	; (124d0 <nm_drv_init+0x158>)
   1248e:	4b11      	ldr	r3, [pc, #68]	; (124d4 <nm_drv_init+0x15c>)
   12490:	0018      	movs	r0, r3
   12492:	4b11      	ldr	r3, [pc, #68]	; (124d8 <nm_drv_init+0x160>)
   12494:	4798      	blx	r3
   12496:	4b1a      	ldr	r3, [pc, #104]	; (12500 <nm_drv_init+0x188>)
   12498:	0018      	movs	r0, r3
   1249a:	4b0f      	ldr	r3, [pc, #60]	; (124d8 <nm_drv_init+0x160>)
   1249c:	4798      	blx	r3
   1249e:	4b10      	ldr	r3, [pc, #64]	; (124e0 <nm_drv_init+0x168>)
   124a0:	0018      	movs	r0, r3
   124a2:	4b0d      	ldr	r3, [pc, #52]	; (124d8 <nm_drv_init+0x160>)
   124a4:	4798      	blx	r3
		goto ERR2;
   124a6:	e007      	b.n	124b8 <nm_drv_init+0x140>
	}
	return ret;
   124a8:	230f      	movs	r3, #15
   124aa:	18fb      	adds	r3, r7, r3
   124ac:	781b      	ldrb	r3, [r3, #0]
   124ae:	b25b      	sxtb	r3, r3
   124b0:	e008      	b.n	124c4 <nm_drv_init+0x14c>
		goto ERR2;
   124b2:	46c0      	nop			; (mov r8, r8)
   124b4:	e000      	b.n	124b8 <nm_drv_init+0x140>
		goto ERR2;
   124b6:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   124b8:	4b12      	ldr	r3, [pc, #72]	; (12504 <nm_drv_init+0x18c>)
   124ba:	4798      	blx	r3
ERR1:
	return ret;
   124bc:	230f      	movs	r3, #15
   124be:	18fb      	adds	r3, r7, r3
   124c0:	781b      	ldrb	r3, [r3, #0]
   124c2:	b25b      	sxtb	r3, r3
}
   124c4:	0018      	movs	r0, r3
   124c6:	46bd      	mov	sp, r7
   124c8:	b005      	add	sp, #20
   124ca:	bd90      	pop	{r4, r7, pc}
   124cc:	00011ed9 	.word	0x00011ed9
   124d0:	00028aa8 	.word	0x00028aa8
   124d4:	000289d8 	.word	0x000289d8
   124d8:	0000d14d 	.word	0x0000d14d
   124dc:	000289ec 	.word	0x000289ec
   124e0:	00028a08 	.word	0x00028a08
   124e4:	00028a0c 	.word	0x00028a0c
   124e8:	00011875 	.word	0x00011875
   124ec:	00028a18 	.word	0x00028a18
   124f0:	00013d91 	.word	0x00013d91
   124f4:	00011bcd 	.word	0x00011bcd
   124f8:	00011d65 	.word	0x00011d65
   124fc:	000117c1 	.word	0x000117c1
   12500:	00028a28 	.word	0x00028a28
   12504:	00011f0d 	.word	0x00011f0d

00012508 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   12508:	b590      	push	{r4, r7, lr}
   1250a:	b085      	sub	sp, #20
   1250c:	af00      	add	r7, sp, #0
   1250e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   12510:	230f      	movs	r3, #15
   12512:	18fc      	adds	r4, r7, r3
   12514:	4b2e      	ldr	r3, [pc, #184]	; (125d0 <nm_drv_deinit+0xc8>)
   12516:	4798      	blx	r3
   12518:	0003      	movs	r3, r0
   1251a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1251c:	230f      	movs	r3, #15
   1251e:	18fb      	adds	r3, r7, r3
   12520:	781b      	ldrb	r3, [r3, #0]
   12522:	b25b      	sxtb	r3, r3
   12524:	2b00      	cmp	r3, #0
   12526:	d010      	beq.n	1254a <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   12528:	2366      	movs	r3, #102	; 0x66
   1252a:	33ff      	adds	r3, #255	; 0xff
   1252c:	001a      	movs	r2, r3
   1252e:	4929      	ldr	r1, [pc, #164]	; (125d4 <nm_drv_deinit+0xcc>)
   12530:	4b29      	ldr	r3, [pc, #164]	; (125d8 <nm_drv_deinit+0xd0>)
   12532:	0018      	movs	r0, r3
   12534:	4b29      	ldr	r3, [pc, #164]	; (125dc <nm_drv_deinit+0xd4>)
   12536:	4798      	blx	r3
   12538:	4b29      	ldr	r3, [pc, #164]	; (125e0 <nm_drv_deinit+0xd8>)
   1253a:	0018      	movs	r0, r3
   1253c:	4b27      	ldr	r3, [pc, #156]	; (125dc <nm_drv_deinit+0xd4>)
   1253e:	4798      	blx	r3
   12540:	4b28      	ldr	r3, [pc, #160]	; (125e4 <nm_drv_deinit+0xdc>)
   12542:	0018      	movs	r0, r3
   12544:	4b25      	ldr	r3, [pc, #148]	; (125dc <nm_drv_deinit+0xd4>)
   12546:	4798      	blx	r3
		goto ERR1;
   12548:	e03a      	b.n	125c0 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   1254a:	230f      	movs	r3, #15
   1254c:	18fc      	adds	r4, r7, r3
   1254e:	2000      	movs	r0, #0
   12550:	4b25      	ldr	r3, [pc, #148]	; (125e8 <nm_drv_deinit+0xe0>)
   12552:	4798      	blx	r3
   12554:	0003      	movs	r3, r0
   12556:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   12558:	230f      	movs	r3, #15
   1255a:	18fb      	adds	r3, r7, r3
   1255c:	781b      	ldrb	r3, [r3, #0]
   1255e:	b25b      	sxtb	r3, r3
   12560:	2b00      	cmp	r3, #0
   12562:	d00f      	beq.n	12584 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   12564:	23b6      	movs	r3, #182	; 0xb6
   12566:	005a      	lsls	r2, r3, #1
   12568:	491a      	ldr	r1, [pc, #104]	; (125d4 <nm_drv_deinit+0xcc>)
   1256a:	4b1b      	ldr	r3, [pc, #108]	; (125d8 <nm_drv_deinit+0xd0>)
   1256c:	0018      	movs	r0, r3
   1256e:	4b1b      	ldr	r3, [pc, #108]	; (125dc <nm_drv_deinit+0xd4>)
   12570:	4798      	blx	r3
   12572:	4b1e      	ldr	r3, [pc, #120]	; (125ec <nm_drv_deinit+0xe4>)
   12574:	0018      	movs	r0, r3
   12576:	4b19      	ldr	r3, [pc, #100]	; (125dc <nm_drv_deinit+0xd4>)
   12578:	4798      	blx	r3
   1257a:	4b1a      	ldr	r3, [pc, #104]	; (125e4 <nm_drv_deinit+0xdc>)
   1257c:	0018      	movs	r0, r3
   1257e:	4b17      	ldr	r3, [pc, #92]	; (125dc <nm_drv_deinit+0xd4>)
   12580:	4798      	blx	r3
		goto ERR1;
   12582:	e01d      	b.n	125c0 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   12584:	230f      	movs	r3, #15
   12586:	18fc      	adds	r4, r7, r3
   12588:	4b19      	ldr	r3, [pc, #100]	; (125f0 <nm_drv_deinit+0xe8>)
   1258a:	4798      	blx	r3
   1258c:	0003      	movs	r3, r0
   1258e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   12590:	230f      	movs	r3, #15
   12592:	18fb      	adds	r3, r7, r3
   12594:	781b      	ldrb	r3, [r3, #0]
   12596:	b25b      	sxtb	r3, r3
   12598:	2b00      	cmp	r3, #0
   1259a:	d00f      	beq.n	125bc <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   1259c:	23b9      	movs	r3, #185	; 0xb9
   1259e:	005a      	lsls	r2, r3, #1
   125a0:	490c      	ldr	r1, [pc, #48]	; (125d4 <nm_drv_deinit+0xcc>)
   125a2:	4b0d      	ldr	r3, [pc, #52]	; (125d8 <nm_drv_deinit+0xd0>)
   125a4:	0018      	movs	r0, r3
   125a6:	4b0d      	ldr	r3, [pc, #52]	; (125dc <nm_drv_deinit+0xd4>)
   125a8:	4798      	blx	r3
   125aa:	4b12      	ldr	r3, [pc, #72]	; (125f4 <nm_drv_deinit+0xec>)
   125ac:	0018      	movs	r0, r3
   125ae:	4b0b      	ldr	r3, [pc, #44]	; (125dc <nm_drv_deinit+0xd4>)
   125b0:	4798      	blx	r3
   125b2:	4b0c      	ldr	r3, [pc, #48]	; (125e4 <nm_drv_deinit+0xdc>)
   125b4:	0018      	movs	r0, r3
   125b6:	4b09      	ldr	r3, [pc, #36]	; (125dc <nm_drv_deinit+0xd4>)
   125b8:	4798      	blx	r3
		goto ERR1;
   125ba:	e001      	b.n	125c0 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   125bc:	4b0e      	ldr	r3, [pc, #56]	; (125f8 <nm_drv_deinit+0xf0>)
   125be:	4798      	blx	r3
#endif

ERR1:
	return ret;
   125c0:	230f      	movs	r3, #15
   125c2:	18fb      	adds	r3, r7, r3
   125c4:	781b      	ldrb	r3, [r3, #0]
   125c6:	b25b      	sxtb	r3, r3
}
   125c8:	0018      	movs	r0, r3
   125ca:	46bd      	mov	sp, r7
   125cc:	b005      	add	sp, #20
   125ce:	bd90      	pop	{r4, r7, pc}
   125d0:	00011e19 	.word	0x00011e19
   125d4:	00028ab4 	.word	0x00028ab4
   125d8:	000289d8 	.word	0x000289d8
   125dc:	0000d14d 	.word	0x0000d14d
   125e0:	00028a48 	.word	0x00028a48
   125e4:	00028a08 	.word	0x00028a08
   125e8:	00015239 	.word	0x00015239
   125ec:	00028a68 	.word	0x00028a68
   125f0:	00011f0d 	.word	0x00011f0d
   125f4:	00028a8c 	.word	0x00028a8c
   125f8:	00013edd 	.word	0x00013edd

000125fc <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   125fc:	b580      	push	{r7, lr}
   125fe:	b086      	sub	sp, #24
   12600:	af00      	add	r7, sp, #0
   12602:	6078      	str	r0, [r7, #4]
   12604:	000a      	movs	r2, r1
   12606:	1cbb      	adds	r3, r7, #2
   12608:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   1260a:	230c      	movs	r3, #12
   1260c:	18fb      	adds	r3, r7, r3
   1260e:	2200      	movs	r2, #0
   12610:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   12612:	230c      	movs	r3, #12
   12614:	18fb      	adds	r3, r7, r3
   12616:	687a      	ldr	r2, [r7, #4]
   12618:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   1261a:	230c      	movs	r3, #12
   1261c:	18fb      	adds	r3, r7, r3
   1261e:	1cba      	adds	r2, r7, #2
   12620:	8812      	ldrh	r2, [r2, #0]
   12622:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   12624:	230c      	movs	r3, #12
   12626:	18fb      	adds	r3, r7, r3
   12628:	0019      	movs	r1, r3
   1262a:	2003      	movs	r0, #3
   1262c:	4b03      	ldr	r3, [pc, #12]	; (1263c <nmi_spi_read+0x40>)
   1262e:	4798      	blx	r3
   12630:	0003      	movs	r3, r0
}
   12632:	0018      	movs	r0, r3
   12634:	46bd      	mov	sp, r7
   12636:	b006      	add	sp, #24
   12638:	bd80      	pop	{r7, pc}
   1263a:	46c0      	nop			; (mov r8, r8)
   1263c:	0000fda9 	.word	0x0000fda9

00012640 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   12640:	b580      	push	{r7, lr}
   12642:	b086      	sub	sp, #24
   12644:	af00      	add	r7, sp, #0
   12646:	6078      	str	r0, [r7, #4]
   12648:	000a      	movs	r2, r1
   1264a:	1cbb      	adds	r3, r7, #2
   1264c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   1264e:	230c      	movs	r3, #12
   12650:	18fb      	adds	r3, r7, r3
   12652:	687a      	ldr	r2, [r7, #4]
   12654:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   12656:	230c      	movs	r3, #12
   12658:	18fb      	adds	r3, r7, r3
   1265a:	2200      	movs	r2, #0
   1265c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   1265e:	230c      	movs	r3, #12
   12660:	18fb      	adds	r3, r7, r3
   12662:	1cba      	adds	r2, r7, #2
   12664:	8812      	ldrh	r2, [r2, #0]
   12666:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   12668:	230c      	movs	r3, #12
   1266a:	18fb      	adds	r3, r7, r3
   1266c:	0019      	movs	r1, r3
   1266e:	2003      	movs	r0, #3
   12670:	4b03      	ldr	r3, [pc, #12]	; (12680 <nmi_spi_write+0x40>)
   12672:	4798      	blx	r3
   12674:	0003      	movs	r3, r0
}
   12676:	0018      	movs	r0, r3
   12678:	46bd      	mov	sp, r7
   1267a:	b006      	add	sp, #24
   1267c:	bd80      	pop	{r7, pc}
   1267e:	46c0      	nop			; (mov r8, r8)
   12680:	0000fda9 	.word	0x0000fda9

00012684 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   12684:	b580      	push	{r7, lr}
   12686:	b088      	sub	sp, #32
   12688:	af00      	add	r7, sp, #0
   1268a:	60f8      	str	r0, [r7, #12]
   1268c:	60b9      	str	r1, [r7, #8]
   1268e:	1dbb      	adds	r3, r7, #6
   12690:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   12692:	2314      	movs	r3, #20
   12694:	18fb      	adds	r3, r7, r3
   12696:	68fa      	ldr	r2, [r7, #12]
   12698:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   1269a:	2314      	movs	r3, #20
   1269c:	18fb      	adds	r3, r7, r3
   1269e:	68ba      	ldr	r2, [r7, #8]
   126a0:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   126a2:	2314      	movs	r3, #20
   126a4:	18fb      	adds	r3, r7, r3
   126a6:	1dba      	adds	r2, r7, #6
   126a8:	8812      	ldrh	r2, [r2, #0]
   126aa:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   126ac:	2314      	movs	r3, #20
   126ae:	18fb      	adds	r3, r7, r3
   126b0:	0019      	movs	r1, r3
   126b2:	2003      	movs	r0, #3
   126b4:	4b03      	ldr	r3, [pc, #12]	; (126c4 <nmi_spi_rw+0x40>)
   126b6:	4798      	blx	r3
   126b8:	0003      	movs	r3, r0
}
   126ba:	0018      	movs	r0, r3
   126bc:	46bd      	mov	sp, r7
   126be:	b008      	add	sp, #32
   126c0:	bd80      	pop	{r7, pc}
   126c2:	46c0      	nop			; (mov r8, r8)
   126c4:	0000fda9 	.word	0x0000fda9

000126c8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   126c8:	b580      	push	{r7, lr}
   126ca:	b082      	sub	sp, #8
   126cc:	af00      	add	r7, sp, #0
   126ce:	0002      	movs	r2, r0
   126d0:	1dfb      	adds	r3, r7, #7
   126d2:	701a      	strb	r2, [r3, #0]
   126d4:	1dbb      	adds	r3, r7, #6
   126d6:	1c0a      	adds	r2, r1, #0
   126d8:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   126da:	1dfb      	adds	r3, r7, #7
   126dc:	781b      	ldrb	r3, [r3, #0]
   126de:	005a      	lsls	r2, r3, #1
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	781b      	ldrb	r3, [r3, #0]
   126e4:	4053      	eors	r3, r2
   126e6:	4a03      	ldr	r2, [pc, #12]	; (126f4 <crc7_byte+0x2c>)
   126e8:	5cd3      	ldrb	r3, [r2, r3]
}
   126ea:	0018      	movs	r0, r3
   126ec:	46bd      	mov	sp, r7
   126ee:	b002      	add	sp, #8
   126f0:	bd80      	pop	{r7, pc}
   126f2:	46c0      	nop			; (mov r8, r8)
   126f4:	00028ac4 	.word	0x00028ac4

000126f8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   126f8:	b590      	push	{r4, r7, lr}
   126fa:	b085      	sub	sp, #20
   126fc:	af00      	add	r7, sp, #0
   126fe:	60b9      	str	r1, [r7, #8]
   12700:	607a      	str	r2, [r7, #4]
   12702:	230f      	movs	r3, #15
   12704:	18fb      	adds	r3, r7, r3
   12706:	1c02      	adds	r2, r0, #0
   12708:	701a      	strb	r2, [r3, #0]
	while (len--)
   1270a:	e00e      	b.n	1272a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   1270c:	68bb      	ldr	r3, [r7, #8]
   1270e:	1c5a      	adds	r2, r3, #1
   12710:	60ba      	str	r2, [r7, #8]
   12712:	781a      	ldrb	r2, [r3, #0]
   12714:	230f      	movs	r3, #15
   12716:	18fc      	adds	r4, r7, r3
   12718:	230f      	movs	r3, #15
   1271a:	18fb      	adds	r3, r7, r3
   1271c:	781b      	ldrb	r3, [r3, #0]
   1271e:	0011      	movs	r1, r2
   12720:	0018      	movs	r0, r3
   12722:	4b08      	ldr	r3, [pc, #32]	; (12744 <crc7+0x4c>)
   12724:	4798      	blx	r3
   12726:	0003      	movs	r3, r0
   12728:	7023      	strb	r3, [r4, #0]
	while (len--)
   1272a:	687b      	ldr	r3, [r7, #4]
   1272c:	1e5a      	subs	r2, r3, #1
   1272e:	607a      	str	r2, [r7, #4]
   12730:	2b00      	cmp	r3, #0
   12732:	d1eb      	bne.n	1270c <crc7+0x14>
	return crc;
   12734:	230f      	movs	r3, #15
   12736:	18fb      	adds	r3, r7, r3
   12738:	781b      	ldrb	r3, [r3, #0]
}
   1273a:	0018      	movs	r0, r3
   1273c:	46bd      	mov	sp, r7
   1273e:	b005      	add	sp, #20
   12740:	bd90      	pop	{r4, r7, pc}
   12742:	46c0      	nop			; (mov r8, r8)
   12744:	000126c9 	.word	0x000126c9

00012748 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   12748:	b590      	push	{r4, r7, lr}
   1274a:	b089      	sub	sp, #36	; 0x24
   1274c:	af00      	add	r7, sp, #0
   1274e:	60b9      	str	r1, [r7, #8]
   12750:	607a      	str	r2, [r7, #4]
   12752:	603b      	str	r3, [r7, #0]
   12754:	230f      	movs	r3, #15
   12756:	18fb      	adds	r3, r7, r3
   12758:	1c02      	adds	r2, r0, #0
   1275a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   1275c:	231f      	movs	r3, #31
   1275e:	18fb      	adds	r3, r7, r3
   12760:	2205      	movs	r2, #5
   12762:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   12764:	231e      	movs	r3, #30
   12766:	18fb      	adds	r3, r7, r3
   12768:	2201      	movs	r2, #1
   1276a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   1276c:	2314      	movs	r3, #20
   1276e:	18fb      	adds	r3, r7, r3
   12770:	220f      	movs	r2, #15
   12772:	18ba      	adds	r2, r7, r2
   12774:	7812      	ldrb	r2, [r2, #0]
   12776:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   12778:	230f      	movs	r3, #15
   1277a:	18fb      	adds	r3, r7, r3
   1277c:	781b      	ldrb	r3, [r3, #0]
   1277e:	3bc1      	subs	r3, #193	; 0xc1
   12780:	2b0e      	cmp	r3, #14
   12782:	d900      	bls.n	12786 <spi_cmd+0x3e>
   12784:	e11b      	b.n	129be <spi_cmd+0x276>
   12786:	009a      	lsls	r2, r3, #2
   12788:	4bb6      	ldr	r3, [pc, #728]	; (12a64 <spi_cmd+0x31c>)
   1278a:	18d3      	adds	r3, r2, r3
   1278c:	681b      	ldr	r3, [r3, #0]
   1278e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   12790:	68bb      	ldr	r3, [r7, #8]
   12792:	0c1b      	lsrs	r3, r3, #16
   12794:	b2da      	uxtb	r2, r3
   12796:	2314      	movs	r3, #20
   12798:	18fb      	adds	r3, r7, r3
   1279a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1279c:	68bb      	ldr	r3, [r7, #8]
   1279e:	0a1b      	lsrs	r3, r3, #8
   127a0:	b2da      	uxtb	r2, r3
   127a2:	2314      	movs	r3, #20
   127a4:	18fb      	adds	r3, r7, r3
   127a6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   127a8:	68bb      	ldr	r3, [r7, #8]
   127aa:	b2da      	uxtb	r2, r3
   127ac:	2314      	movs	r3, #20
   127ae:	18fb      	adds	r3, r7, r3
   127b0:	70da      	strb	r2, [r3, #3]
		len = 5;
   127b2:	231f      	movs	r3, #31
   127b4:	18fb      	adds	r3, r7, r3
   127b6:	2205      	movs	r2, #5
   127b8:	701a      	strb	r2, [r3, #0]
		break;
   127ba:	e105      	b.n	129c8 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   127bc:	68bb      	ldr	r3, [r7, #8]
   127be:	0a1b      	lsrs	r3, r3, #8
   127c0:	b2da      	uxtb	r2, r3
   127c2:	2314      	movs	r3, #20
   127c4:	18fb      	adds	r3, r7, r3
   127c6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   127c8:	2330      	movs	r3, #48	; 0x30
   127ca:	18fb      	adds	r3, r7, r3
   127cc:	781b      	ldrb	r3, [r3, #0]
   127ce:	2b00      	cmp	r3, #0
   127d0:	d009      	beq.n	127e6 <spi_cmd+0x9e>
   127d2:	2314      	movs	r3, #20
   127d4:	18fb      	adds	r3, r7, r3
   127d6:	785b      	ldrb	r3, [r3, #1]
   127d8:	2280      	movs	r2, #128	; 0x80
   127da:	4252      	negs	r2, r2
   127dc:	4313      	orrs	r3, r2
   127de:	b2da      	uxtb	r2, r3
   127e0:	2314      	movs	r3, #20
   127e2:	18fb      	adds	r3, r7, r3
   127e4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   127e6:	68bb      	ldr	r3, [r7, #8]
   127e8:	b2da      	uxtb	r2, r3
   127ea:	2314      	movs	r3, #20
   127ec:	18fb      	adds	r3, r7, r3
   127ee:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   127f0:	2314      	movs	r3, #20
   127f2:	18fb      	adds	r3, r7, r3
   127f4:	2200      	movs	r2, #0
   127f6:	70da      	strb	r2, [r3, #3]
		len = 5;
   127f8:	231f      	movs	r3, #31
   127fa:	18fb      	adds	r3, r7, r3
   127fc:	2205      	movs	r2, #5
   127fe:	701a      	strb	r2, [r3, #0]
		break;
   12800:	e0e2      	b.n	129c8 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   12802:	2314      	movs	r3, #20
   12804:	18fb      	adds	r3, r7, r3
   12806:	2200      	movs	r2, #0
   12808:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1280a:	2314      	movs	r3, #20
   1280c:	18fb      	adds	r3, r7, r3
   1280e:	2200      	movs	r2, #0
   12810:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   12812:	2314      	movs	r3, #20
   12814:	18fb      	adds	r3, r7, r3
   12816:	2200      	movs	r2, #0
   12818:	70da      	strb	r2, [r3, #3]
		len = 5;
   1281a:	231f      	movs	r3, #31
   1281c:	18fb      	adds	r3, r7, r3
   1281e:	2205      	movs	r2, #5
   12820:	701a      	strb	r2, [r3, #0]
		break;
   12822:	e0d1      	b.n	129c8 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   12824:	2314      	movs	r3, #20
   12826:	18fb      	adds	r3, r7, r3
   12828:	2200      	movs	r2, #0
   1282a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1282c:	2314      	movs	r3, #20
   1282e:	18fb      	adds	r3, r7, r3
   12830:	2200      	movs	r2, #0
   12832:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   12834:	2314      	movs	r3, #20
   12836:	18fb      	adds	r3, r7, r3
   12838:	2200      	movs	r2, #0
   1283a:	70da      	strb	r2, [r3, #3]
		len = 5;
   1283c:	231f      	movs	r3, #31
   1283e:	18fb      	adds	r3, r7, r3
   12840:	2205      	movs	r2, #5
   12842:	701a      	strb	r2, [r3, #0]
		break;
   12844:	e0c0      	b.n	129c8 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   12846:	2314      	movs	r3, #20
   12848:	18fb      	adds	r3, r7, r3
   1284a:	22ff      	movs	r2, #255	; 0xff
   1284c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   1284e:	2314      	movs	r3, #20
   12850:	18fb      	adds	r3, r7, r3
   12852:	22ff      	movs	r2, #255	; 0xff
   12854:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   12856:	2314      	movs	r3, #20
   12858:	18fb      	adds	r3, r7, r3
   1285a:	22ff      	movs	r2, #255	; 0xff
   1285c:	70da      	strb	r2, [r3, #3]
		len = 5;
   1285e:	231f      	movs	r3, #31
   12860:	18fb      	adds	r3, r7, r3
   12862:	2205      	movs	r2, #5
   12864:	701a      	strb	r2, [r3, #0]
		break;
   12866:	e0af      	b.n	129c8 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   12868:	68bb      	ldr	r3, [r7, #8]
   1286a:	0c1b      	lsrs	r3, r3, #16
   1286c:	b2da      	uxtb	r2, r3
   1286e:	2314      	movs	r3, #20
   12870:	18fb      	adds	r3, r7, r3
   12872:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   12874:	68bb      	ldr	r3, [r7, #8]
   12876:	0a1b      	lsrs	r3, r3, #8
   12878:	b2da      	uxtb	r2, r3
   1287a:	2314      	movs	r3, #20
   1287c:	18fb      	adds	r3, r7, r3
   1287e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   12880:	68bb      	ldr	r3, [r7, #8]
   12882:	b2da      	uxtb	r2, r3
   12884:	2314      	movs	r3, #20
   12886:	18fb      	adds	r3, r7, r3
   12888:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   1288a:	683b      	ldr	r3, [r7, #0]
   1288c:	0a1b      	lsrs	r3, r3, #8
   1288e:	b2da      	uxtb	r2, r3
   12890:	2314      	movs	r3, #20
   12892:	18fb      	adds	r3, r7, r3
   12894:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   12896:	683b      	ldr	r3, [r7, #0]
   12898:	b2da      	uxtb	r2, r3
   1289a:	2314      	movs	r3, #20
   1289c:	18fb      	adds	r3, r7, r3
   1289e:	715a      	strb	r2, [r3, #5]
		len = 7;
   128a0:	231f      	movs	r3, #31
   128a2:	18fb      	adds	r3, r7, r3
   128a4:	2207      	movs	r2, #7
   128a6:	701a      	strb	r2, [r3, #0]
		break;
   128a8:	e08e      	b.n	129c8 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   128aa:	68bb      	ldr	r3, [r7, #8]
   128ac:	0c1b      	lsrs	r3, r3, #16
   128ae:	b2da      	uxtb	r2, r3
   128b0:	2314      	movs	r3, #20
   128b2:	18fb      	adds	r3, r7, r3
   128b4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   128b6:	68bb      	ldr	r3, [r7, #8]
   128b8:	0a1b      	lsrs	r3, r3, #8
   128ba:	b2da      	uxtb	r2, r3
   128bc:	2314      	movs	r3, #20
   128be:	18fb      	adds	r3, r7, r3
   128c0:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   128c2:	68bb      	ldr	r3, [r7, #8]
   128c4:	b2da      	uxtb	r2, r3
   128c6:	2314      	movs	r3, #20
   128c8:	18fb      	adds	r3, r7, r3
   128ca:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   128cc:	683b      	ldr	r3, [r7, #0]
   128ce:	0c1b      	lsrs	r3, r3, #16
   128d0:	b2da      	uxtb	r2, r3
   128d2:	2314      	movs	r3, #20
   128d4:	18fb      	adds	r3, r7, r3
   128d6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   128d8:	683b      	ldr	r3, [r7, #0]
   128da:	0a1b      	lsrs	r3, r3, #8
   128dc:	b2da      	uxtb	r2, r3
   128de:	2314      	movs	r3, #20
   128e0:	18fb      	adds	r3, r7, r3
   128e2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   128e4:	683b      	ldr	r3, [r7, #0]
   128e6:	b2da      	uxtb	r2, r3
   128e8:	2314      	movs	r3, #20
   128ea:	18fb      	adds	r3, r7, r3
   128ec:	719a      	strb	r2, [r3, #6]
		len = 8;
   128ee:	231f      	movs	r3, #31
   128f0:	18fb      	adds	r3, r7, r3
   128f2:	2208      	movs	r2, #8
   128f4:	701a      	strb	r2, [r3, #0]
		break;
   128f6:	e067      	b.n	129c8 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   128f8:	68bb      	ldr	r3, [r7, #8]
   128fa:	0a1b      	lsrs	r3, r3, #8
   128fc:	b2da      	uxtb	r2, r3
   128fe:	2314      	movs	r3, #20
   12900:	18fb      	adds	r3, r7, r3
   12902:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   12904:	2330      	movs	r3, #48	; 0x30
   12906:	18fb      	adds	r3, r7, r3
   12908:	781b      	ldrb	r3, [r3, #0]
   1290a:	2b00      	cmp	r3, #0
   1290c:	d009      	beq.n	12922 <spi_cmd+0x1da>
   1290e:	2314      	movs	r3, #20
   12910:	18fb      	adds	r3, r7, r3
   12912:	785b      	ldrb	r3, [r3, #1]
   12914:	2280      	movs	r2, #128	; 0x80
   12916:	4252      	negs	r2, r2
   12918:	4313      	orrs	r3, r2
   1291a:	b2da      	uxtb	r2, r3
   1291c:	2314      	movs	r3, #20
   1291e:	18fb      	adds	r3, r7, r3
   12920:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   12922:	68bb      	ldr	r3, [r7, #8]
   12924:	b2da      	uxtb	r2, r3
   12926:	2314      	movs	r3, #20
   12928:	18fb      	adds	r3, r7, r3
   1292a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   1292c:	687b      	ldr	r3, [r7, #4]
   1292e:	0e1b      	lsrs	r3, r3, #24
   12930:	b2da      	uxtb	r2, r3
   12932:	2314      	movs	r3, #20
   12934:	18fb      	adds	r3, r7, r3
   12936:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   12938:	687b      	ldr	r3, [r7, #4]
   1293a:	0c1b      	lsrs	r3, r3, #16
   1293c:	b2da      	uxtb	r2, r3
   1293e:	2314      	movs	r3, #20
   12940:	18fb      	adds	r3, r7, r3
   12942:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   12944:	687b      	ldr	r3, [r7, #4]
   12946:	0a1b      	lsrs	r3, r3, #8
   12948:	b2da      	uxtb	r2, r3
   1294a:	2314      	movs	r3, #20
   1294c:	18fb      	adds	r3, r7, r3
   1294e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   12950:	687b      	ldr	r3, [r7, #4]
   12952:	b2da      	uxtb	r2, r3
   12954:	2314      	movs	r3, #20
   12956:	18fb      	adds	r3, r7, r3
   12958:	719a      	strb	r2, [r3, #6]
		len = 8;
   1295a:	231f      	movs	r3, #31
   1295c:	18fb      	adds	r3, r7, r3
   1295e:	2208      	movs	r2, #8
   12960:	701a      	strb	r2, [r3, #0]
		break;
   12962:	e031      	b.n	129c8 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   12964:	68bb      	ldr	r3, [r7, #8]
   12966:	0c1b      	lsrs	r3, r3, #16
   12968:	b2da      	uxtb	r2, r3
   1296a:	2314      	movs	r3, #20
   1296c:	18fb      	adds	r3, r7, r3
   1296e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   12970:	68bb      	ldr	r3, [r7, #8]
   12972:	0a1b      	lsrs	r3, r3, #8
   12974:	b2da      	uxtb	r2, r3
   12976:	2314      	movs	r3, #20
   12978:	18fb      	adds	r3, r7, r3
   1297a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   1297c:	68bb      	ldr	r3, [r7, #8]
   1297e:	b2da      	uxtb	r2, r3
   12980:	2314      	movs	r3, #20
   12982:	18fb      	adds	r3, r7, r3
   12984:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   12986:	687b      	ldr	r3, [r7, #4]
   12988:	0e1b      	lsrs	r3, r3, #24
   1298a:	b2da      	uxtb	r2, r3
   1298c:	2314      	movs	r3, #20
   1298e:	18fb      	adds	r3, r7, r3
   12990:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   12992:	687b      	ldr	r3, [r7, #4]
   12994:	0c1b      	lsrs	r3, r3, #16
   12996:	b2da      	uxtb	r2, r3
   12998:	2314      	movs	r3, #20
   1299a:	18fb      	adds	r3, r7, r3
   1299c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   1299e:	687b      	ldr	r3, [r7, #4]
   129a0:	0a1b      	lsrs	r3, r3, #8
   129a2:	b2da      	uxtb	r2, r3
   129a4:	2314      	movs	r3, #20
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   129aa:	687b      	ldr	r3, [r7, #4]
   129ac:	b2da      	uxtb	r2, r3
   129ae:	2314      	movs	r3, #20
   129b0:	18fb      	adds	r3, r7, r3
   129b2:	71da      	strb	r2, [r3, #7]
		len = 9;
   129b4:	231f      	movs	r3, #31
   129b6:	18fb      	adds	r3, r7, r3
   129b8:	2209      	movs	r2, #9
   129ba:	701a      	strb	r2, [r3, #0]
		break;
   129bc:	e004      	b.n	129c8 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   129be:	231e      	movs	r3, #30
   129c0:	18fb      	adds	r3, r7, r3
   129c2:	2200      	movs	r2, #0
   129c4:	701a      	strb	r2, [r3, #0]
		break;
   129c6:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   129c8:	231e      	movs	r3, #30
   129ca:	18fb      	adds	r3, r7, r3
   129cc:	781b      	ldrb	r3, [r3, #0]
   129ce:	b25b      	sxtb	r3, r3
   129d0:	2b00      	cmp	r3, #0
   129d2:	d03f      	beq.n	12a54 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   129d4:	4b24      	ldr	r3, [pc, #144]	; (12a68 <spi_cmd+0x320>)
   129d6:	781b      	ldrb	r3, [r3, #0]
   129d8:	2b00      	cmp	r3, #0
   129da:	d115      	bne.n	12a08 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   129dc:	231f      	movs	r3, #31
   129de:	18fb      	adds	r3, r7, r3
   129e0:	781b      	ldrb	r3, [r3, #0]
   129e2:	1e5c      	subs	r4, r3, #1
   129e4:	231f      	movs	r3, #31
   129e6:	18fb      	adds	r3, r7, r3
   129e8:	781b      	ldrb	r3, [r3, #0]
   129ea:	3b01      	subs	r3, #1
   129ec:	001a      	movs	r2, r3
   129ee:	2314      	movs	r3, #20
   129f0:	18fb      	adds	r3, r7, r3
   129f2:	0019      	movs	r1, r3
   129f4:	207f      	movs	r0, #127	; 0x7f
   129f6:	4b1d      	ldr	r3, [pc, #116]	; (12a6c <spi_cmd+0x324>)
   129f8:	4798      	blx	r3
   129fa:	0003      	movs	r3, r0
   129fc:	18db      	adds	r3, r3, r3
   129fe:	b2da      	uxtb	r2, r3
   12a00:	2314      	movs	r3, #20
   12a02:	18fb      	adds	r3, r7, r3
   12a04:	551a      	strb	r2, [r3, r4]
   12a06:	e006      	b.n	12a16 <spi_cmd+0x2ce>
		else
			len-=1;
   12a08:	231f      	movs	r3, #31
   12a0a:	18fb      	adds	r3, r7, r3
   12a0c:	221f      	movs	r2, #31
   12a0e:	18ba      	adds	r2, r7, r2
   12a10:	7812      	ldrb	r2, [r2, #0]
   12a12:	3a01      	subs	r2, #1
   12a14:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   12a16:	231f      	movs	r3, #31
   12a18:	18fb      	adds	r3, r7, r3
   12a1a:	781b      	ldrb	r3, [r3, #0]
   12a1c:	b29a      	uxth	r2, r3
   12a1e:	2314      	movs	r3, #20
   12a20:	18fb      	adds	r3, r7, r3
   12a22:	0011      	movs	r1, r2
   12a24:	0018      	movs	r0, r3
   12a26:	4b12      	ldr	r3, [pc, #72]	; (12a70 <spi_cmd+0x328>)
   12a28:	4798      	blx	r3
   12a2a:	1e03      	subs	r3, r0, #0
   12a2c:	d012      	beq.n	12a54 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   12a2e:	2390      	movs	r3, #144	; 0x90
   12a30:	005a      	lsls	r2, r3, #1
   12a32:	4910      	ldr	r1, [pc, #64]	; (12a74 <spi_cmd+0x32c>)
   12a34:	4b10      	ldr	r3, [pc, #64]	; (12a78 <spi_cmd+0x330>)
   12a36:	0018      	movs	r0, r3
   12a38:	4b10      	ldr	r3, [pc, #64]	; (12a7c <spi_cmd+0x334>)
   12a3a:	4798      	blx	r3
   12a3c:	4b10      	ldr	r3, [pc, #64]	; (12a80 <spi_cmd+0x338>)
   12a3e:	0018      	movs	r0, r3
   12a40:	4b0e      	ldr	r3, [pc, #56]	; (12a7c <spi_cmd+0x334>)
   12a42:	4798      	blx	r3
   12a44:	4b0f      	ldr	r3, [pc, #60]	; (12a84 <spi_cmd+0x33c>)
   12a46:	0018      	movs	r0, r3
   12a48:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <spi_cmd+0x334>)
   12a4a:	4798      	blx	r3
			result = N_FAIL;
   12a4c:	231e      	movs	r3, #30
   12a4e:	18fb      	adds	r3, r7, r3
   12a50:	2200      	movs	r2, #0
   12a52:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   12a54:	231e      	movs	r3, #30
   12a56:	18fb      	adds	r3, r7, r3
   12a58:	781b      	ldrb	r3, [r3, #0]
   12a5a:	b25b      	sxtb	r3, r3
}
   12a5c:	0018      	movs	r0, r3
   12a5e:	46bd      	mov	sp, r7
   12a60:	b009      	add	sp, #36	; 0x24
   12a62:	bd90      	pop	{r4, r7, pc}
   12a64:	0002913c 	.word	0x0002913c
   12a68:	20003ee8 	.word	0x20003ee8
   12a6c:	000126f9 	.word	0x000126f9
   12a70:	00012641 	.word	0x00012641
   12a74:	000291b4 	.word	0x000291b4
   12a78:	00028bc4 	.word	0x00028bc4
   12a7c:	0000d14d 	.word	0x0000d14d
   12a80:	00028bd8 	.word	0x00028bd8
   12a84:	00028c04 	.word	0x00028c04

00012a88 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   12a88:	b590      	push	{r4, r7, lr}
   12a8a:	b085      	sub	sp, #20
   12a8c:	af00      	add	r7, sp, #0
   12a8e:	0002      	movs	r2, r0
   12a90:	1dfb      	adds	r3, r7, #7
   12a92:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   12a94:	230e      	movs	r3, #14
   12a96:	18fb      	adds	r3, r7, r3
   12a98:	2201      	movs	r2, #1
   12a9a:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   12a9c:	4b32      	ldr	r3, [pc, #200]	; (12b68 <spi_data_rsp+0xe0>)
   12a9e:	781b      	ldrb	r3, [r3, #0]
   12aa0:	2b00      	cmp	r3, #0
   12aa2:	d104      	bne.n	12aae <spi_data_rsp+0x26>
		len = 2;
   12aa4:	230f      	movs	r3, #15
   12aa6:	18fb      	adds	r3, r7, r3
   12aa8:	2202      	movs	r2, #2
   12aaa:	701a      	strb	r2, [r3, #0]
   12aac:	e003      	b.n	12ab6 <spi_data_rsp+0x2e>
	else
		len = 3;
   12aae:	230f      	movs	r3, #15
   12ab0:	18fb      	adds	r3, r7, r3
   12ab2:	2203      	movs	r2, #3
   12ab4:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   12ab6:	230f      	movs	r3, #15
   12ab8:	18fb      	adds	r3, r7, r3
   12aba:	781b      	ldrb	r3, [r3, #0]
   12abc:	b29a      	uxth	r2, r3
   12abe:	2308      	movs	r3, #8
   12ac0:	18fb      	adds	r3, r7, r3
   12ac2:	0011      	movs	r1, r2
   12ac4:	0018      	movs	r0, r3
   12ac6:	4b29      	ldr	r3, [pc, #164]	; (12b6c <spi_data_rsp+0xe4>)
   12ac8:	4798      	blx	r3
   12aca:	1e03      	subs	r3, r0, #0
   12acc:	d013      	beq.n	12af6 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   12ace:	239a      	movs	r3, #154	; 0x9a
   12ad0:	005a      	lsls	r2, r3, #1
   12ad2:	4927      	ldr	r1, [pc, #156]	; (12b70 <spi_data_rsp+0xe8>)
   12ad4:	4b27      	ldr	r3, [pc, #156]	; (12b74 <spi_data_rsp+0xec>)
   12ad6:	0018      	movs	r0, r3
   12ad8:	4b27      	ldr	r3, [pc, #156]	; (12b78 <spi_data_rsp+0xf0>)
   12ada:	4798      	blx	r3
   12adc:	4b27      	ldr	r3, [pc, #156]	; (12b7c <spi_data_rsp+0xf4>)
   12ade:	0018      	movs	r0, r3
   12ae0:	4b25      	ldr	r3, [pc, #148]	; (12b78 <spi_data_rsp+0xf0>)
   12ae2:	4798      	blx	r3
   12ae4:	4b26      	ldr	r3, [pc, #152]	; (12b80 <spi_data_rsp+0xf8>)
   12ae6:	0018      	movs	r0, r3
   12ae8:	4b23      	ldr	r3, [pc, #140]	; (12b78 <spi_data_rsp+0xf0>)
   12aea:	4798      	blx	r3
		result = N_FAIL;
   12aec:	230e      	movs	r3, #14
   12aee:	18fb      	adds	r3, r7, r3
   12af0:	2200      	movs	r2, #0
   12af2:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   12af4:	e030      	b.n	12b58 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   12af6:	230f      	movs	r3, #15
   12af8:	18fb      	adds	r3, r7, r3
   12afa:	781b      	ldrb	r3, [r3, #0]
   12afc:	3b01      	subs	r3, #1
   12afe:	2208      	movs	r2, #8
   12b00:	18ba      	adds	r2, r7, r2
   12b02:	5cd3      	ldrb	r3, [r2, r3]
   12b04:	2b00      	cmp	r3, #0
   12b06:	d108      	bne.n	12b1a <spi_data_rsp+0x92>
   12b08:	230f      	movs	r3, #15
   12b0a:	18fb      	adds	r3, r7, r3
   12b0c:	781b      	ldrb	r3, [r3, #0]
   12b0e:	3b02      	subs	r3, #2
   12b10:	2208      	movs	r2, #8
   12b12:	18ba      	adds	r2, r7, r2
   12b14:	5cd3      	ldrb	r3, [r2, r3]
   12b16:	2bc3      	cmp	r3, #195	; 0xc3
   12b18:	d01e      	beq.n	12b58 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   12b1a:	233c      	movs	r3, #60	; 0x3c
   12b1c:	33ff      	adds	r3, #255	; 0xff
   12b1e:	001a      	movs	r2, r3
   12b20:	4913      	ldr	r1, [pc, #76]	; (12b70 <spi_data_rsp+0xe8>)
   12b22:	4b14      	ldr	r3, [pc, #80]	; (12b74 <spi_data_rsp+0xec>)
   12b24:	0018      	movs	r0, r3
   12b26:	4b14      	ldr	r3, [pc, #80]	; (12b78 <spi_data_rsp+0xf0>)
   12b28:	4798      	blx	r3
   12b2a:	2308      	movs	r3, #8
   12b2c:	18fb      	adds	r3, r7, r3
   12b2e:	781b      	ldrb	r3, [r3, #0]
   12b30:	0019      	movs	r1, r3
   12b32:	2308      	movs	r3, #8
   12b34:	18fb      	adds	r3, r7, r3
   12b36:	785b      	ldrb	r3, [r3, #1]
   12b38:	001a      	movs	r2, r3
   12b3a:	2308      	movs	r3, #8
   12b3c:	18fb      	adds	r3, r7, r3
   12b3e:	789b      	ldrb	r3, [r3, #2]
   12b40:	4810      	ldr	r0, [pc, #64]	; (12b84 <spi_data_rsp+0xfc>)
   12b42:	4c0d      	ldr	r4, [pc, #52]	; (12b78 <spi_data_rsp+0xf0>)
   12b44:	47a0      	blx	r4
   12b46:	4b0e      	ldr	r3, [pc, #56]	; (12b80 <spi_data_rsp+0xf8>)
   12b48:	0018      	movs	r0, r3
   12b4a:	4b0b      	ldr	r3, [pc, #44]	; (12b78 <spi_data_rsp+0xf0>)
   12b4c:	4798      	blx	r3
		result = N_FAIL;
   12b4e:	230e      	movs	r3, #14
   12b50:	18fb      	adds	r3, r7, r3
   12b52:	2200      	movs	r2, #0
   12b54:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   12b56:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   12b58:	230e      	movs	r3, #14
   12b5a:	18fb      	adds	r3, r7, r3
   12b5c:	781b      	ldrb	r3, [r3, #0]
   12b5e:	b25b      	sxtb	r3, r3
}
   12b60:	0018      	movs	r0, r3
   12b62:	46bd      	mov	sp, r7
   12b64:	b005      	add	sp, #20
   12b66:	bd90      	pop	{r4, r7, pc}
   12b68:	20003ee8 	.word	0x20003ee8
   12b6c:	000125fd 	.word	0x000125fd
   12b70:	000291bc 	.word	0x000291bc
   12b74:	00028bc4 	.word	0x00028bc4
   12b78:	0000d14d 	.word	0x0000d14d
   12b7c:	00028c08 	.word	0x00028c08
   12b80:	00028c04 	.word	0x00028c04
   12b84:	00028c28 	.word	0x00028c28

00012b88 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   12b88:	b580      	push	{r7, lr}
   12b8a:	b084      	sub	sp, #16
   12b8c:	af00      	add	r7, sp, #0
   12b8e:	0002      	movs	r2, r0
   12b90:	1dfb      	adds	r3, r7, #7
   12b92:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   12b94:	230f      	movs	r3, #15
   12b96:	18fb      	adds	r3, r7, r3
   12b98:	2201      	movs	r2, #1
   12b9a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   12b9c:	1dfb      	adds	r3, r7, #7
   12b9e:	781b      	ldrb	r3, [r3, #0]
   12ba0:	2bcf      	cmp	r3, #207	; 0xcf
   12ba2:	d007      	beq.n	12bb4 <spi_cmd_rsp+0x2c>
   12ba4:	1dfb      	adds	r3, r7, #7
   12ba6:	781b      	ldrb	r3, [r3, #0]
   12ba8:	2bc5      	cmp	r3, #197	; 0xc5
   12baa:	d003      	beq.n	12bb4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   12bac:	1dfb      	adds	r3, r7, #7
   12bae:	781b      	ldrb	r3, [r3, #0]
   12bb0:	2bc6      	cmp	r3, #198	; 0xc6
   12bb2:	d10c      	bne.n	12bce <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   12bb4:	230d      	movs	r3, #13
   12bb6:	18fb      	adds	r3, r7, r3
   12bb8:	2101      	movs	r1, #1
   12bba:	0018      	movs	r0, r3
   12bbc:	4b3b      	ldr	r3, [pc, #236]	; (12cac <spi_cmd_rsp+0x124>)
   12bbe:	4798      	blx	r3
   12bc0:	1e03      	subs	r3, r0, #0
   12bc2:	d004      	beq.n	12bce <spi_cmd_rsp+0x46>
			result = N_FAIL;
   12bc4:	230f      	movs	r3, #15
   12bc6:	18fb      	adds	r3, r7, r3
   12bc8:	2200      	movs	r2, #0
   12bca:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   12bcc:	e065      	b.n	12c9a <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   12bce:	230e      	movs	r3, #14
   12bd0:	18fb      	adds	r3, r7, r3
   12bd2:	220a      	movs	r2, #10
   12bd4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   12bd6:	230d      	movs	r3, #13
   12bd8:	18fb      	adds	r3, r7, r3
   12bda:	2101      	movs	r1, #1
   12bdc:	0018      	movs	r0, r3
   12bde:	4b33      	ldr	r3, [pc, #204]	; (12cac <spi_cmd_rsp+0x124>)
   12be0:	4798      	blx	r3
   12be2:	1e03      	subs	r3, r0, #0
   12be4:	d014      	beq.n	12c10 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   12be6:	235c      	movs	r3, #92	; 0x5c
   12be8:	33ff      	adds	r3, #255	; 0xff
   12bea:	001a      	movs	r2, r3
   12bec:	4930      	ldr	r1, [pc, #192]	; (12cb0 <spi_cmd_rsp+0x128>)
   12bee:	4b31      	ldr	r3, [pc, #196]	; (12cb4 <spi_cmd_rsp+0x12c>)
   12bf0:	0018      	movs	r0, r3
   12bf2:	4b31      	ldr	r3, [pc, #196]	; (12cb8 <spi_cmd_rsp+0x130>)
   12bf4:	4798      	blx	r3
   12bf6:	4b31      	ldr	r3, [pc, #196]	; (12cbc <spi_cmd_rsp+0x134>)
   12bf8:	0018      	movs	r0, r3
   12bfa:	4b2f      	ldr	r3, [pc, #188]	; (12cb8 <spi_cmd_rsp+0x130>)
   12bfc:	4798      	blx	r3
   12bfe:	4b30      	ldr	r3, [pc, #192]	; (12cc0 <spi_cmd_rsp+0x138>)
   12c00:	0018      	movs	r0, r3
   12c02:	4b2d      	ldr	r3, [pc, #180]	; (12cb8 <spi_cmd_rsp+0x130>)
   12c04:	4798      	blx	r3
			result = N_FAIL;
   12c06:	230f      	movs	r3, #15
   12c08:	18fb      	adds	r3, r7, r3
   12c0a:	2200      	movs	r2, #0
   12c0c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   12c0e:	e044      	b.n	12c9a <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   12c10:	230d      	movs	r3, #13
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	781b      	ldrb	r3, [r3, #0]
   12c16:	1dfa      	adds	r2, r7, #7
   12c18:	7812      	ldrb	r2, [r2, #0]
   12c1a:	429a      	cmp	r2, r3
   12c1c:	d00b      	beq.n	12c36 <spi_cmd_rsp+0xae>
   12c1e:	230e      	movs	r3, #14
   12c20:	18fb      	adds	r3, r7, r3
   12c22:	781b      	ldrb	r3, [r3, #0]
   12c24:	b25b      	sxtb	r3, r3
   12c26:	b2da      	uxtb	r2, r3
   12c28:	3a01      	subs	r2, #1
   12c2a:	b2d1      	uxtb	r1, r2
   12c2c:	220e      	movs	r2, #14
   12c2e:	18ba      	adds	r2, r7, r2
   12c30:	7011      	strb	r1, [r2, #0]
   12c32:	2b00      	cmp	r3, #0
   12c34:	dccf      	bgt.n	12bd6 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   12c36:	230e      	movs	r3, #14
   12c38:	18fb      	adds	r3, r7, r3
   12c3a:	220a      	movs	r2, #10
   12c3c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   12c3e:	230d      	movs	r3, #13
   12c40:	18fb      	adds	r3, r7, r3
   12c42:	2101      	movs	r1, #1
   12c44:	0018      	movs	r0, r3
   12c46:	4b19      	ldr	r3, [pc, #100]	; (12cac <spi_cmd_rsp+0x124>)
   12c48:	4798      	blx	r3
   12c4a:	1e03      	subs	r3, r0, #0
   12c4c:	d014      	beq.n	12c78 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   12c4e:	236a      	movs	r3, #106	; 0x6a
   12c50:	33ff      	adds	r3, #255	; 0xff
   12c52:	001a      	movs	r2, r3
   12c54:	4916      	ldr	r1, [pc, #88]	; (12cb0 <spi_cmd_rsp+0x128>)
   12c56:	4b17      	ldr	r3, [pc, #92]	; (12cb4 <spi_cmd_rsp+0x12c>)
   12c58:	0018      	movs	r0, r3
   12c5a:	4b17      	ldr	r3, [pc, #92]	; (12cb8 <spi_cmd_rsp+0x130>)
   12c5c:	4798      	blx	r3
   12c5e:	4b17      	ldr	r3, [pc, #92]	; (12cbc <spi_cmd_rsp+0x134>)
   12c60:	0018      	movs	r0, r3
   12c62:	4b15      	ldr	r3, [pc, #84]	; (12cb8 <spi_cmd_rsp+0x130>)
   12c64:	4798      	blx	r3
   12c66:	4b16      	ldr	r3, [pc, #88]	; (12cc0 <spi_cmd_rsp+0x138>)
   12c68:	0018      	movs	r0, r3
   12c6a:	4b13      	ldr	r3, [pc, #76]	; (12cb8 <spi_cmd_rsp+0x130>)
   12c6c:	4798      	blx	r3
			result = N_FAIL;
   12c6e:	230f      	movs	r3, #15
   12c70:	18fb      	adds	r3, r7, r3
   12c72:	2200      	movs	r2, #0
   12c74:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   12c76:	e010      	b.n	12c9a <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   12c78:	230d      	movs	r3, #13
   12c7a:	18fb      	adds	r3, r7, r3
   12c7c:	781b      	ldrb	r3, [r3, #0]
   12c7e:	2b00      	cmp	r3, #0
   12c80:	d00b      	beq.n	12c9a <spi_cmd_rsp+0x112>
   12c82:	230e      	movs	r3, #14
   12c84:	18fb      	adds	r3, r7, r3
   12c86:	781b      	ldrb	r3, [r3, #0]
   12c88:	b25b      	sxtb	r3, r3
   12c8a:	b2da      	uxtb	r2, r3
   12c8c:	3a01      	subs	r2, #1
   12c8e:	b2d1      	uxtb	r1, r2
   12c90:	220e      	movs	r2, #14
   12c92:	18ba      	adds	r2, r7, r2
   12c94:	7011      	strb	r1, [r2, #0]
   12c96:	2b00      	cmp	r3, #0
   12c98:	dcd1      	bgt.n	12c3e <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   12c9a:	230f      	movs	r3, #15
   12c9c:	18fb      	adds	r3, r7, r3
   12c9e:	781b      	ldrb	r3, [r3, #0]
   12ca0:	b25b      	sxtb	r3, r3
}
   12ca2:	0018      	movs	r0, r3
   12ca4:	46bd      	mov	sp, r7
   12ca6:	b004      	add	sp, #16
   12ca8:	bd80      	pop	{r7, pc}
   12caa:	46c0      	nop			; (mov r8, r8)
   12cac:	000125fd 	.word	0x000125fd
   12cb0:	000291cc 	.word	0x000291cc
   12cb4:	00028bc4 	.word	0x00028bc4
   12cb8:	0000d14d 	.word	0x0000d14d
   12cbc:	00028c58 	.word	0x00028c58
   12cc0:	00028c04 	.word	0x00028c04

00012cc4 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   12cc4:	b590      	push	{r4, r7, lr}
   12cc6:	b09f      	sub	sp, #124	; 0x7c
   12cc8:	af00      	add	r7, sp, #0
   12cca:	60b9      	str	r1, [r7, #8]
   12ccc:	607a      	str	r2, [r7, #4]
   12cce:	603b      	str	r3, [r7, #0]
   12cd0:	230f      	movs	r3, #15
   12cd2:	18fb      	adds	r3, r7, r3
   12cd4:	1c02      	adds	r2, r0, #0
   12cd6:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   12cd8:	2300      	movs	r3, #0
   12cda:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   12cdc:	2301      	movs	r3, #1
   12cde:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   12ce0:	2338      	movs	r3, #56	; 0x38
   12ce2:	18fb      	adds	r3, r7, r3
   12ce4:	220f      	movs	r2, #15
   12ce6:	18ba      	adds	r2, r7, r2
   12ce8:	7812      	ldrb	r2, [r2, #0]
   12cea:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   12cec:	230f      	movs	r3, #15
   12cee:	18fb      	adds	r3, r7, r3
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	3bc1      	subs	r3, #193	; 0xc1
   12cf4:	2b0e      	cmp	r3, #14
   12cf6:	d900      	bls.n	12cfa <spi_cmd_complete+0x36>
   12cf8:	e103      	b.n	12f02 <spi_cmd_complete+0x23e>
   12cfa:	009a      	lsls	r2, r3, #2
   12cfc:	4bd1      	ldr	r3, [pc, #836]	; (13044 <spi_cmd_complete+0x380>)
   12cfe:	18d3      	adds	r3, r2, r3
   12d00:	681b      	ldr	r3, [r3, #0]
   12d02:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   12d04:	68bb      	ldr	r3, [r7, #8]
   12d06:	0c1b      	lsrs	r3, r3, #16
   12d08:	b2da      	uxtb	r2, r3
   12d0a:	2338      	movs	r3, #56	; 0x38
   12d0c:	18fb      	adds	r3, r7, r3
   12d0e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   12d10:	68bb      	ldr	r3, [r7, #8]
   12d12:	0a1b      	lsrs	r3, r3, #8
   12d14:	b2da      	uxtb	r2, r3
   12d16:	2338      	movs	r3, #56	; 0x38
   12d18:	18fb      	adds	r3, r7, r3
   12d1a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   12d1c:	68bb      	ldr	r3, [r7, #8]
   12d1e:	b2da      	uxtb	r2, r3
   12d20:	2338      	movs	r3, #56	; 0x38
   12d22:	18fb      	adds	r3, r7, r3
   12d24:	70da      	strb	r2, [r3, #3]
		len = 5;
   12d26:	2305      	movs	r3, #5
   12d28:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   12d2a:	e0ed      	b.n	12f08 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	0a1b      	lsrs	r3, r3, #8
   12d30:	b2da      	uxtb	r2, r3
   12d32:	2338      	movs	r3, #56	; 0x38
   12d34:	18fb      	adds	r3, r7, r3
   12d36:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   12d38:	2388      	movs	r3, #136	; 0x88
   12d3a:	18fb      	adds	r3, r7, r3
   12d3c:	781b      	ldrb	r3, [r3, #0]
   12d3e:	2b01      	cmp	r3, #1
   12d40:	d109      	bne.n	12d56 <spi_cmd_complete+0x92>
   12d42:	2338      	movs	r3, #56	; 0x38
   12d44:	18fb      	adds	r3, r7, r3
   12d46:	785b      	ldrb	r3, [r3, #1]
   12d48:	2280      	movs	r2, #128	; 0x80
   12d4a:	4252      	negs	r2, r2
   12d4c:	4313      	orrs	r3, r2
   12d4e:	b2da      	uxtb	r2, r3
   12d50:	2338      	movs	r3, #56	; 0x38
   12d52:	18fb      	adds	r3, r7, r3
   12d54:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	b2da      	uxtb	r2, r3
   12d5a:	2338      	movs	r3, #56	; 0x38
   12d5c:	18fb      	adds	r3, r7, r3
   12d5e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   12d60:	2338      	movs	r3, #56	; 0x38
   12d62:	18fb      	adds	r3, r7, r3
   12d64:	2200      	movs	r2, #0
   12d66:	70da      	strb	r2, [r3, #3]
		len = 5;
   12d68:	2305      	movs	r3, #5
   12d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   12d6c:	e0cc      	b.n	12f08 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   12d6e:	2338      	movs	r3, #56	; 0x38
   12d70:	18fb      	adds	r3, r7, r3
   12d72:	2200      	movs	r2, #0
   12d74:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   12d76:	2338      	movs	r3, #56	; 0x38
   12d78:	18fb      	adds	r3, r7, r3
   12d7a:	2200      	movs	r2, #0
   12d7c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   12d7e:	2338      	movs	r3, #56	; 0x38
   12d80:	18fb      	adds	r3, r7, r3
   12d82:	2200      	movs	r2, #0
   12d84:	70da      	strb	r2, [r3, #3]
		len = 5;
   12d86:	2305      	movs	r3, #5
   12d88:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   12d8a:	e0bd      	b.n	12f08 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   12d8c:	2338      	movs	r3, #56	; 0x38
   12d8e:	18fb      	adds	r3, r7, r3
   12d90:	2200      	movs	r2, #0
   12d92:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   12d94:	2338      	movs	r3, #56	; 0x38
   12d96:	18fb      	adds	r3, r7, r3
   12d98:	2200      	movs	r2, #0
   12d9a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   12d9c:	2338      	movs	r3, #56	; 0x38
   12d9e:	18fb      	adds	r3, r7, r3
   12da0:	2200      	movs	r2, #0
   12da2:	70da      	strb	r2, [r3, #3]
		len = 5;
   12da4:	2305      	movs	r3, #5
   12da6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   12da8:	e0ae      	b.n	12f08 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   12daa:	2338      	movs	r3, #56	; 0x38
   12dac:	18fb      	adds	r3, r7, r3
   12dae:	22ff      	movs	r2, #255	; 0xff
   12db0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   12db2:	2338      	movs	r3, #56	; 0x38
   12db4:	18fb      	adds	r3, r7, r3
   12db6:	22ff      	movs	r2, #255	; 0xff
   12db8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   12dba:	2338      	movs	r3, #56	; 0x38
   12dbc:	18fb      	adds	r3, r7, r3
   12dbe:	22ff      	movs	r2, #255	; 0xff
   12dc0:	70da      	strb	r2, [r3, #3]
		len = 5;
   12dc2:	2305      	movs	r3, #5
   12dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   12dc6:	e09f      	b.n	12f08 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   12dc8:	68bb      	ldr	r3, [r7, #8]
   12dca:	0c1b      	lsrs	r3, r3, #16
   12dcc:	b2da      	uxtb	r2, r3
   12dce:	2338      	movs	r3, #56	; 0x38
   12dd0:	18fb      	adds	r3, r7, r3
   12dd2:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   12dd4:	68bb      	ldr	r3, [r7, #8]
   12dd6:	0a1b      	lsrs	r3, r3, #8
   12dd8:	b2da      	uxtb	r2, r3
   12dda:	2338      	movs	r3, #56	; 0x38
   12ddc:	18fb      	adds	r3, r7, r3
   12dde:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   12de0:	68bb      	ldr	r3, [r7, #8]
   12de2:	b2da      	uxtb	r2, r3
   12de4:	2338      	movs	r3, #56	; 0x38
   12de6:	18fb      	adds	r3, r7, r3
   12de8:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   12dea:	683b      	ldr	r3, [r7, #0]
   12dec:	0a1b      	lsrs	r3, r3, #8
   12dee:	b2da      	uxtb	r2, r3
   12df0:	2338      	movs	r3, #56	; 0x38
   12df2:	18fb      	adds	r3, r7, r3
   12df4:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   12df6:	683b      	ldr	r3, [r7, #0]
   12df8:	b2da      	uxtb	r2, r3
   12dfa:	2338      	movs	r3, #56	; 0x38
   12dfc:	18fb      	adds	r3, r7, r3
   12dfe:	715a      	strb	r2, [r3, #5]
		len = 7;
   12e00:	2307      	movs	r3, #7
   12e02:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   12e04:	e080      	b.n	12f08 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   12e06:	68bb      	ldr	r3, [r7, #8]
   12e08:	0c1b      	lsrs	r3, r3, #16
   12e0a:	b2da      	uxtb	r2, r3
   12e0c:	2338      	movs	r3, #56	; 0x38
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   12e12:	68bb      	ldr	r3, [r7, #8]
   12e14:	0a1b      	lsrs	r3, r3, #8
   12e16:	b2da      	uxtb	r2, r3
   12e18:	2338      	movs	r3, #56	; 0x38
   12e1a:	18fb      	adds	r3, r7, r3
   12e1c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   12e1e:	68bb      	ldr	r3, [r7, #8]
   12e20:	b2da      	uxtb	r2, r3
   12e22:	2338      	movs	r3, #56	; 0x38
   12e24:	18fb      	adds	r3, r7, r3
   12e26:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   12e28:	683b      	ldr	r3, [r7, #0]
   12e2a:	0c1b      	lsrs	r3, r3, #16
   12e2c:	b2da      	uxtb	r2, r3
   12e2e:	2338      	movs	r3, #56	; 0x38
   12e30:	18fb      	adds	r3, r7, r3
   12e32:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   12e34:	683b      	ldr	r3, [r7, #0]
   12e36:	0a1b      	lsrs	r3, r3, #8
   12e38:	b2da      	uxtb	r2, r3
   12e3a:	2338      	movs	r3, #56	; 0x38
   12e3c:	18fb      	adds	r3, r7, r3
   12e3e:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   12e40:	683b      	ldr	r3, [r7, #0]
   12e42:	b2da      	uxtb	r2, r3
   12e44:	2338      	movs	r3, #56	; 0x38
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	719a      	strb	r2, [r3, #6]
		len = 8;
   12e4a:	2308      	movs	r3, #8
   12e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   12e4e:	e05b      	b.n	12f08 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   12e50:	68bb      	ldr	r3, [r7, #8]
   12e52:	0a1b      	lsrs	r3, r3, #8
   12e54:	b2da      	uxtb	r2, r3
   12e56:	2338      	movs	r3, #56	; 0x38
   12e58:	18fb      	adds	r3, r7, r3
   12e5a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   12e5c:	2388      	movs	r3, #136	; 0x88
   12e5e:	18fb      	adds	r3, r7, r3
   12e60:	781b      	ldrb	r3, [r3, #0]
   12e62:	2b01      	cmp	r3, #1
   12e64:	d109      	bne.n	12e7a <spi_cmd_complete+0x1b6>
   12e66:	2338      	movs	r3, #56	; 0x38
   12e68:	18fb      	adds	r3, r7, r3
   12e6a:	785b      	ldrb	r3, [r3, #1]
   12e6c:	2280      	movs	r2, #128	; 0x80
   12e6e:	4252      	negs	r2, r2
   12e70:	4313      	orrs	r3, r2
   12e72:	b2da      	uxtb	r2, r3
   12e74:	2338      	movs	r3, #56	; 0x38
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   12e7a:	68bb      	ldr	r3, [r7, #8]
   12e7c:	b2da      	uxtb	r2, r3
   12e7e:	2338      	movs	r3, #56	; 0x38
   12e80:	18fb      	adds	r3, r7, r3
   12e82:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   12e84:	687b      	ldr	r3, [r7, #4]
   12e86:	78da      	ldrb	r2, [r3, #3]
   12e88:	2338      	movs	r3, #56	; 0x38
   12e8a:	18fb      	adds	r3, r7, r3
   12e8c:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   12e8e:	687b      	ldr	r3, [r7, #4]
   12e90:	789a      	ldrb	r2, [r3, #2]
   12e92:	2338      	movs	r3, #56	; 0x38
   12e94:	18fb      	adds	r3, r7, r3
   12e96:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   12e98:	687b      	ldr	r3, [r7, #4]
   12e9a:	785a      	ldrb	r2, [r3, #1]
   12e9c:	2338      	movs	r3, #56	; 0x38
   12e9e:	18fb      	adds	r3, r7, r3
   12ea0:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   12ea2:	687b      	ldr	r3, [r7, #4]
   12ea4:	781a      	ldrb	r2, [r3, #0]
   12ea6:	2338      	movs	r3, #56	; 0x38
   12ea8:	18fb      	adds	r3, r7, r3
   12eaa:	719a      	strb	r2, [r3, #6]
		len = 8;
   12eac:	2308      	movs	r3, #8
   12eae:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   12eb0:	e02a      	b.n	12f08 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   12eb2:	68bb      	ldr	r3, [r7, #8]
   12eb4:	0c1b      	lsrs	r3, r3, #16
   12eb6:	b2da      	uxtb	r2, r3
   12eb8:	2338      	movs	r3, #56	; 0x38
   12eba:	18fb      	adds	r3, r7, r3
   12ebc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   12ebe:	68bb      	ldr	r3, [r7, #8]
   12ec0:	0a1b      	lsrs	r3, r3, #8
   12ec2:	b2da      	uxtb	r2, r3
   12ec4:	2338      	movs	r3, #56	; 0x38
   12ec6:	18fb      	adds	r3, r7, r3
   12ec8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   12eca:	68bb      	ldr	r3, [r7, #8]
   12ecc:	b2da      	uxtb	r2, r3
   12ece:	2338      	movs	r3, #56	; 0x38
   12ed0:	18fb      	adds	r3, r7, r3
   12ed2:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   12ed4:	687b      	ldr	r3, [r7, #4]
   12ed6:	78da      	ldrb	r2, [r3, #3]
   12ed8:	2338      	movs	r3, #56	; 0x38
   12eda:	18fb      	adds	r3, r7, r3
   12edc:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   12ede:	687b      	ldr	r3, [r7, #4]
   12ee0:	789a      	ldrb	r2, [r3, #2]
   12ee2:	2338      	movs	r3, #56	; 0x38
   12ee4:	18fb      	adds	r3, r7, r3
   12ee6:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   12ee8:	687b      	ldr	r3, [r7, #4]
   12eea:	785a      	ldrb	r2, [r3, #1]
   12eec:	2338      	movs	r3, #56	; 0x38
   12eee:	18fb      	adds	r3, r7, r3
   12ef0:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   12ef2:	687b      	ldr	r3, [r7, #4]
   12ef4:	781a      	ldrb	r2, [r3, #0]
   12ef6:	2338      	movs	r3, #56	; 0x38
   12ef8:	18fb      	adds	r3, r7, r3
   12efa:	71da      	strb	r2, [r3, #7]
		len = 9;
   12efc:	2309      	movs	r3, #9
   12efe:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   12f00:	e002      	b.n	12f08 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   12f02:	2300      	movs	r3, #0
   12f04:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   12f06:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   12f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12f0a:	2b01      	cmp	r3, #1
   12f0c:	d001      	beq.n	12f12 <spi_cmd_complete+0x24e>
		return result;
   12f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12f10:	e33a      	b.n	13588 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   12f12:	4b4d      	ldr	r3, [pc, #308]	; (13048 <spi_cmd_complete+0x384>)
   12f14:	781b      	ldrb	r3, [r3, #0]
   12f16:	2b00      	cmp	r3, #0
   12f18:	d111      	bne.n	12f3e <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   12f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12f1c:	1e5c      	subs	r4, r3, #1
   12f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12f20:	3b01      	subs	r3, #1
   12f22:	001a      	movs	r2, r3
   12f24:	2338      	movs	r3, #56	; 0x38
   12f26:	18fb      	adds	r3, r7, r3
   12f28:	0019      	movs	r1, r3
   12f2a:	207f      	movs	r0, #127	; 0x7f
   12f2c:	4b47      	ldr	r3, [pc, #284]	; (1304c <spi_cmd_complete+0x388>)
   12f2e:	4798      	blx	r3
   12f30:	0003      	movs	r3, r0
   12f32:	18db      	adds	r3, r3, r3
   12f34:	b2da      	uxtb	r2, r3
   12f36:	2338      	movs	r3, #56	; 0x38
   12f38:	18fb      	adds	r3, r7, r3
   12f3a:	551a      	strb	r2, [r3, r4]
   12f3c:	e002      	b.n	12f44 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   12f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12f40:	3b01      	subs	r3, #1
   12f42:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   12f44:	230f      	movs	r3, #15
   12f46:	18fb      	adds	r3, r7, r3
   12f48:	781b      	ldrb	r3, [r3, #0]
   12f4a:	2bcf      	cmp	r3, #207	; 0xcf
   12f4c:	d009      	beq.n	12f62 <spi_cmd_complete+0x29e>
   12f4e:	230f      	movs	r3, #15
   12f50:	18fb      	adds	r3, r7, r3
   12f52:	781b      	ldrb	r3, [r3, #0]
   12f54:	2bc5      	cmp	r3, #197	; 0xc5
   12f56:	d004      	beq.n	12f62 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   12f58:	230f      	movs	r3, #15
   12f5a:	18fb      	adds	r3, r7, r3
   12f5c:	781b      	ldrb	r3, [r3, #0]
   12f5e:	2bc6      	cmp	r3, #198	; 0xc6
   12f60:	d103      	bne.n	12f6a <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   12f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12f64:	3306      	adds	r3, #6
   12f66:	673b      	str	r3, [r7, #112]	; 0x70
   12f68:	e018      	b.n	12f9c <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   12f6a:	230f      	movs	r3, #15
   12f6c:	18fb      	adds	r3, r7, r3
   12f6e:	781b      	ldrb	r3, [r3, #0]
   12f70:	2bc4      	cmp	r3, #196	; 0xc4
   12f72:	d004      	beq.n	12f7e <spi_cmd_complete+0x2ba>
   12f74:	230f      	movs	r3, #15
   12f76:	18fb      	adds	r3, r7, r3
   12f78:	781b      	ldrb	r3, [r3, #0]
   12f7a:	2bca      	cmp	r3, #202	; 0xca
   12f7c:	d10b      	bne.n	12f96 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   12f7e:	4b32      	ldr	r3, [pc, #200]	; (13048 <spi_cmd_complete+0x384>)
   12f80:	781b      	ldrb	r3, [r3, #0]
   12f82:	2b00      	cmp	r3, #0
   12f84:	d103      	bne.n	12f8e <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   12f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12f88:	330c      	adds	r3, #12
   12f8a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   12f8c:	e006      	b.n	12f9c <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   12f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12f90:	330a      	adds	r3, #10
   12f92:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   12f94:	e002      	b.n	12f9c <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   12f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12f98:	3305      	adds	r3, #5
   12f9a:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   12f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12f9e:	2b20      	cmp	r3, #32
   12fa0:	d914      	bls.n	12fcc <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   12fa2:	23f7      	movs	r3, #247	; 0xf7
   12fa4:	005a      	lsls	r2, r3, #1
   12fa6:	492a      	ldr	r1, [pc, #168]	; (13050 <spi_cmd_complete+0x38c>)
   12fa8:	4b2a      	ldr	r3, [pc, #168]	; (13054 <spi_cmd_complete+0x390>)
   12faa:	0018      	movs	r0, r3
   12fac:	4b2a      	ldr	r3, [pc, #168]	; (13058 <spi_cmd_complete+0x394>)
   12fae:	4798      	blx	r3
   12fb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   12fb2:	4b2a      	ldr	r3, [pc, #168]	; (1305c <spi_cmd_complete+0x398>)
   12fb4:	2220      	movs	r2, #32
   12fb6:	0018      	movs	r0, r3
   12fb8:	4b27      	ldr	r3, [pc, #156]	; (13058 <spi_cmd_complete+0x394>)
   12fba:	4798      	blx	r3
   12fbc:	4b28      	ldr	r3, [pc, #160]	; (13060 <spi_cmd_complete+0x39c>)
   12fbe:	0018      	movs	r0, r3
   12fc0:	4b25      	ldr	r3, [pc, #148]	; (13058 <spi_cmd_complete+0x394>)
   12fc2:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   12fc4:	2300      	movs	r3, #0
   12fc6:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   12fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12fca:	e2dd      	b.n	13588 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   12fcc:	2377      	movs	r3, #119	; 0x77
   12fce:	18fb      	adds	r3, r7, r3
   12fd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   12fd2:	701a      	strb	r2, [r3, #0]
   12fd4:	e00d      	b.n	12ff2 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   12fd6:	2377      	movs	r3, #119	; 0x77
   12fd8:	18fb      	adds	r3, r7, r3
   12fda:	781b      	ldrb	r3, [r3, #0]
   12fdc:	2238      	movs	r2, #56	; 0x38
   12fde:	18ba      	adds	r2, r7, r2
   12fe0:	2100      	movs	r1, #0
   12fe2:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   12fe4:	2377      	movs	r3, #119	; 0x77
   12fe6:	18fb      	adds	r3, r7, r3
   12fe8:	781a      	ldrb	r2, [r3, #0]
   12fea:	2377      	movs	r3, #119	; 0x77
   12fec:	18fb      	adds	r3, r7, r3
   12fee:	3201      	adds	r2, #1
   12ff0:	701a      	strb	r2, [r3, #0]
   12ff2:	2377      	movs	r3, #119	; 0x77
   12ff4:	18fb      	adds	r3, r7, r3
   12ff6:	781a      	ldrb	r2, [r3, #0]
   12ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12ffa:	429a      	cmp	r2, r3
   12ffc:	d3eb      	bcc.n	12fd6 <spi_cmd_complete+0x312>
	}
	rix = len;
   12ffe:	2376      	movs	r3, #118	; 0x76
   13000:	18fb      	adds	r3, r7, r3
   13002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   13004:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   13006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   13008:	b29a      	uxth	r2, r3
   1300a:	2318      	movs	r3, #24
   1300c:	18f9      	adds	r1, r7, r3
   1300e:	2338      	movs	r3, #56	; 0x38
   13010:	18fb      	adds	r3, r7, r3
   13012:	0018      	movs	r0, r3
   13014:	4b13      	ldr	r3, [pc, #76]	; (13064 <spi_cmd_complete+0x3a0>)
   13016:	4798      	blx	r3
   13018:	1e03      	subs	r3, r0, #0
   1301a:	d027      	beq.n	1306c <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1301c:	23fa      	movs	r3, #250	; 0xfa
   1301e:	33ff      	adds	r3, #255	; 0xff
   13020:	001a      	movs	r2, r3
   13022:	490b      	ldr	r1, [pc, #44]	; (13050 <spi_cmd_complete+0x38c>)
   13024:	4b0b      	ldr	r3, [pc, #44]	; (13054 <spi_cmd_complete+0x390>)
   13026:	0018      	movs	r0, r3
   13028:	4b0b      	ldr	r3, [pc, #44]	; (13058 <spi_cmd_complete+0x394>)
   1302a:	4798      	blx	r3
   1302c:	4b0e      	ldr	r3, [pc, #56]	; (13068 <spi_cmd_complete+0x3a4>)
   1302e:	0018      	movs	r0, r3
   13030:	4b09      	ldr	r3, [pc, #36]	; (13058 <spi_cmd_complete+0x394>)
   13032:	4798      	blx	r3
   13034:	4b0a      	ldr	r3, [pc, #40]	; (13060 <spi_cmd_complete+0x39c>)
   13036:	0018      	movs	r0, r3
   13038:	4b07      	ldr	r3, [pc, #28]	; (13058 <spi_cmd_complete+0x394>)
   1303a:	4798      	blx	r3
		result = N_FAIL;
   1303c:	2300      	movs	r3, #0
   1303e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   13040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13042:	e2a1      	b.n	13588 <spi_cmd_complete+0x8c4>
   13044:	00029178 	.word	0x00029178
   13048:	20003ee8 	.word	0x20003ee8
   1304c:	000126f9 	.word	0x000126f9
   13050:	000291d8 	.word	0x000291d8
   13054:	00028bc4 	.word	0x00028bc4
   13058:	0000d14d 	.word	0x0000d14d
   1305c:	00028c8c 	.word	0x00028c8c
   13060:	00028c04 	.word	0x00028c04
   13064:	00012685 	.word	0x00012685
   13068:	00028bd8 	.word	0x00028bd8
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1306c:	230f      	movs	r3, #15
   1306e:	18fb      	adds	r3, r7, r3
   13070:	781b      	ldrb	r3, [r3, #0]
   13072:	2bcf      	cmp	r3, #207	; 0xcf
   13074:	d009      	beq.n	1308a <spi_cmd_complete+0x3c6>
   13076:	230f      	movs	r3, #15
   13078:	18fb      	adds	r3, r7, r3
   1307a:	781b      	ldrb	r3, [r3, #0]
   1307c:	2bc5      	cmp	r3, #197	; 0xc5
   1307e:	d004      	beq.n	1308a <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   13080:	230f      	movs	r3, #15
   13082:	18fb      	adds	r3, r7, r3
   13084:	781b      	ldrb	r3, [r3, #0]
   13086:	2bc6      	cmp	r3, #198	; 0xc6
   13088:	d106      	bne.n	13098 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   1308a:	2376      	movs	r3, #118	; 0x76
   1308c:	18fb      	adds	r3, r7, r3
   1308e:	781a      	ldrb	r2, [r3, #0]
   13090:	2376      	movs	r3, #118	; 0x76
   13092:	18fb      	adds	r3, r7, r3
   13094:	3201      	adds	r2, #1
   13096:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   13098:	2376      	movs	r3, #118	; 0x76
   1309a:	18fb      	adds	r3, r7, r3
   1309c:	781b      	ldrb	r3, [r3, #0]
   1309e:	2276      	movs	r2, #118	; 0x76
   130a0:	18ba      	adds	r2, r7, r2
   130a2:	1c59      	adds	r1, r3, #1
   130a4:	7011      	strb	r1, [r2, #0]
   130a6:	001a      	movs	r2, r3
   130a8:	2318      	movs	r3, #24
   130aa:	18fb      	adds	r3, r7, r3
   130ac:	5c9a      	ldrb	r2, [r3, r2]
   130ae:	2317      	movs	r3, #23
   130b0:	18fb      	adds	r3, r7, r3
   130b2:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   130b4:	2317      	movs	r3, #23
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	781b      	ldrb	r3, [r3, #0]
   130ba:	220f      	movs	r2, #15
   130bc:	18ba      	adds	r2, r7, r2
   130be:	7812      	ldrb	r2, [r2, #0]
   130c0:	429a      	cmp	r2, r3
   130c2:	d018      	beq.n	130f6 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   130c4:	4add      	ldr	r2, [pc, #884]	; (1343c <spi_cmd_complete+0x778>)
   130c6:	49de      	ldr	r1, [pc, #888]	; (13440 <spi_cmd_complete+0x77c>)
   130c8:	4bde      	ldr	r3, [pc, #888]	; (13444 <spi_cmd_complete+0x780>)
   130ca:	0018      	movs	r0, r3
   130cc:	4bde      	ldr	r3, [pc, #888]	; (13448 <spi_cmd_complete+0x784>)
   130ce:	4798      	blx	r3
   130d0:	230f      	movs	r3, #15
   130d2:	18fb      	adds	r3, r7, r3
   130d4:	7819      	ldrb	r1, [r3, #0]
   130d6:	2317      	movs	r3, #23
   130d8:	18fb      	adds	r3, r7, r3
   130da:	781b      	ldrb	r3, [r3, #0]
   130dc:	001a      	movs	r2, r3
   130de:	4bdb      	ldr	r3, [pc, #876]	; (1344c <spi_cmd_complete+0x788>)
   130e0:	0018      	movs	r0, r3
   130e2:	4bd9      	ldr	r3, [pc, #868]	; (13448 <spi_cmd_complete+0x784>)
   130e4:	4798      	blx	r3
   130e6:	4bda      	ldr	r3, [pc, #872]	; (13450 <spi_cmd_complete+0x78c>)
   130e8:	0018      	movs	r0, r3
   130ea:	4bd7      	ldr	r3, [pc, #860]	; (13448 <spi_cmd_complete+0x784>)
   130ec:	4798      	blx	r3
		result = N_FAIL;
   130ee:	2300      	movs	r3, #0
   130f0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   130f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   130f4:	e248      	b.n	13588 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   130f6:	2376      	movs	r3, #118	; 0x76
   130f8:	18fb      	adds	r3, r7, r3
   130fa:	781b      	ldrb	r3, [r3, #0]
   130fc:	2276      	movs	r2, #118	; 0x76
   130fe:	18ba      	adds	r2, r7, r2
   13100:	1c59      	adds	r1, r3, #1
   13102:	7011      	strb	r1, [r2, #0]
   13104:	001a      	movs	r2, r3
   13106:	2318      	movs	r3, #24
   13108:	18fb      	adds	r3, r7, r3
   1310a:	5c9a      	ldrb	r2, [r3, r2]
   1310c:	2317      	movs	r3, #23
   1310e:	18fb      	adds	r3, r7, r3
   13110:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   13112:	2317      	movs	r3, #23
   13114:	18fb      	adds	r3, r7, r3
   13116:	781b      	ldrb	r3, [r3, #0]
   13118:	2b00      	cmp	r3, #0
   1311a:	d016      	beq.n	1314a <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   1311c:	4acd      	ldr	r2, [pc, #820]	; (13454 <spi_cmd_complete+0x790>)
   1311e:	49c8      	ldr	r1, [pc, #800]	; (13440 <spi_cmd_complete+0x77c>)
   13120:	4bc8      	ldr	r3, [pc, #800]	; (13444 <spi_cmd_complete+0x780>)
   13122:	0018      	movs	r0, r3
   13124:	4bc8      	ldr	r3, [pc, #800]	; (13448 <spi_cmd_complete+0x784>)
   13126:	4798      	blx	r3
   13128:	2317      	movs	r3, #23
   1312a:	18fb      	adds	r3, r7, r3
   1312c:	781b      	ldrb	r3, [r3, #0]
   1312e:	001a      	movs	r2, r3
   13130:	4bc9      	ldr	r3, [pc, #804]	; (13458 <spi_cmd_complete+0x794>)
   13132:	0011      	movs	r1, r2
   13134:	0018      	movs	r0, r3
   13136:	4bc4      	ldr	r3, [pc, #784]	; (13448 <spi_cmd_complete+0x784>)
   13138:	4798      	blx	r3
   1313a:	4bc5      	ldr	r3, [pc, #788]	; (13450 <spi_cmd_complete+0x78c>)
   1313c:	0018      	movs	r0, r3
   1313e:	4bc2      	ldr	r3, [pc, #776]	; (13448 <spi_cmd_complete+0x784>)
   13140:	4798      	blx	r3
		result = N_FAIL;
   13142:	2300      	movs	r3, #0
   13144:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   13146:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13148:	e21e      	b.n	13588 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   1314a:	230f      	movs	r3, #15
   1314c:	18fb      	adds	r3, r7, r3
   1314e:	781b      	ldrb	r3, [r3, #0]
   13150:	2bc4      	cmp	r3, #196	; 0xc4
   13152:	d00f      	beq.n	13174 <spi_cmd_complete+0x4b0>
   13154:	230f      	movs	r3, #15
   13156:	18fb      	adds	r3, r7, r3
   13158:	781b      	ldrb	r3, [r3, #0]
   1315a:	2bca      	cmp	r3, #202	; 0xca
   1315c:	d00a      	beq.n	13174 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1315e:	230f      	movs	r3, #15
   13160:	18fb      	adds	r3, r7, r3
   13162:	781b      	ldrb	r3, [r3, #0]
   13164:	2bc2      	cmp	r3, #194	; 0xc2
   13166:	d005      	beq.n	13174 <spi_cmd_complete+0x4b0>
   13168:	230f      	movs	r3, #15
   1316a:	18fb      	adds	r3, r7, r3
   1316c:	781b      	ldrb	r3, [r3, #0]
   1316e:	2bc8      	cmp	r3, #200	; 0xc8
   13170:	d000      	beq.n	13174 <spi_cmd_complete+0x4b0>
   13172:	e208      	b.n	13586 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   13174:	230a      	movs	r3, #10
   13176:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   13178:	2376      	movs	r3, #118	; 0x76
   1317a:	18fb      	adds	r3, r7, r3
   1317c:	781a      	ldrb	r2, [r3, #0]
   1317e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   13180:	429a      	cmp	r2, r3
   13182:	d218      	bcs.n	131b6 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   13184:	2376      	movs	r3, #118	; 0x76
   13186:	18fb      	adds	r3, r7, r3
   13188:	781b      	ldrb	r3, [r3, #0]
   1318a:	2276      	movs	r2, #118	; 0x76
   1318c:	18ba      	adds	r2, r7, r2
   1318e:	1c59      	adds	r1, r3, #1
   13190:	7011      	strb	r1, [r2, #0]
   13192:	001a      	movs	r2, r3
   13194:	2318      	movs	r3, #24
   13196:	18fb      	adds	r3, r7, r3
   13198:	5c9a      	ldrb	r2, [r3, r2]
   1319a:	2317      	movs	r3, #23
   1319c:	18fb      	adds	r3, r7, r3
   1319e:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   131a0:	2317      	movs	r3, #23
   131a2:	18fb      	adds	r3, r7, r3
   131a4:	781b      	ldrb	r3, [r3, #0]
   131a6:	091b      	lsrs	r3, r3, #4
   131a8:	b2db      	uxtb	r3, r3
   131aa:	001a      	movs	r2, r3
   131ac:	230f      	movs	r3, #15
   131ae:	4013      	ands	r3, r2
   131b0:	2b0f      	cmp	r3, #15
   131b2:	d103      	bne.n	131bc <spi_cmd_complete+0x4f8>
					break;
   131b4:	e007      	b.n	131c6 <spi_cmd_complete+0x502>
					retry = 0;
   131b6:	2300      	movs	r3, #0
   131b8:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   131ba:	e004      	b.n	131c6 <spi_cmd_complete+0x502>
			} while (retry--);
   131bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   131be:	1e5a      	subs	r2, r3, #1
   131c0:	667a      	str	r2, [r7, #100]	; 0x64
   131c2:	2b00      	cmp	r3, #0
   131c4:	d1d8      	bne.n	13178 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   131c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   131c8:	2b00      	cmp	r3, #0
   131ca:	dc18      	bgt.n	131fe <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   131cc:	2395      	movs	r3, #149	; 0x95
   131ce:	009a      	lsls	r2, r3, #2
   131d0:	499b      	ldr	r1, [pc, #620]	; (13440 <spi_cmd_complete+0x77c>)
   131d2:	4b9c      	ldr	r3, [pc, #624]	; (13444 <spi_cmd_complete+0x780>)
   131d4:	0018      	movs	r0, r3
   131d6:	4b9c      	ldr	r3, [pc, #624]	; (13448 <spi_cmd_complete+0x784>)
   131d8:	4798      	blx	r3
   131da:	2317      	movs	r3, #23
   131dc:	18fb      	adds	r3, r7, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	001a      	movs	r2, r3
   131e2:	4b9e      	ldr	r3, [pc, #632]	; (1345c <spi_cmd_complete+0x798>)
   131e4:	0011      	movs	r1, r2
   131e6:	0018      	movs	r0, r3
   131e8:	4b97      	ldr	r3, [pc, #604]	; (13448 <spi_cmd_complete+0x784>)
   131ea:	4798      	blx	r3
   131ec:	4b98      	ldr	r3, [pc, #608]	; (13450 <spi_cmd_complete+0x78c>)
   131ee:	0018      	movs	r0, r3
   131f0:	4b95      	ldr	r3, [pc, #596]	; (13448 <spi_cmd_complete+0x784>)
   131f2:	4798      	blx	r3
				result = N_RESET;
   131f4:	2301      	movs	r3, #1
   131f6:	425b      	negs	r3, r3
   131f8:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   131fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   131fc:	e1c4      	b.n	13588 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   131fe:	230f      	movs	r3, #15
   13200:	18fb      	adds	r3, r7, r3
   13202:	781b      	ldrb	r3, [r3, #0]
   13204:	2bc4      	cmp	r3, #196	; 0xc4
   13206:	d005      	beq.n	13214 <spi_cmd_complete+0x550>
   13208:	230f      	movs	r3, #15
   1320a:	18fb      	adds	r3, r7, r3
   1320c:	781b      	ldrb	r3, [r3, #0]
   1320e:	2bca      	cmp	r3, #202	; 0xca
   13210:	d000      	beq.n	13214 <spi_cmd_complete+0x550>
   13212:	e08e      	b.n	13332 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   13214:	2376      	movs	r3, #118	; 0x76
   13216:	18fb      	adds	r3, r7, r3
   13218:	781b      	ldrb	r3, [r3, #0]
   1321a:	3303      	adds	r3, #3
   1321c:	001a      	movs	r2, r3
   1321e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   13220:	429a      	cmp	r2, r3
   13222:	d23c      	bcs.n	1329e <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   13224:	2376      	movs	r3, #118	; 0x76
   13226:	18fb      	adds	r3, r7, r3
   13228:	781b      	ldrb	r3, [r3, #0]
   1322a:	2276      	movs	r2, #118	; 0x76
   1322c:	18ba      	adds	r2, r7, r2
   1322e:	1c59      	adds	r1, r3, #1
   13230:	7011      	strb	r1, [r2, #0]
   13232:	001a      	movs	r2, r3
   13234:	2318      	movs	r3, #24
   13236:	18fb      	adds	r3, r7, r3
   13238:	5c9a      	ldrb	r2, [r3, r2]
   1323a:	687b      	ldr	r3, [r7, #4]
   1323c:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   1323e:	687b      	ldr	r3, [r7, #4]
   13240:	1c5a      	adds	r2, r3, #1
   13242:	2376      	movs	r3, #118	; 0x76
   13244:	18fb      	adds	r3, r7, r3
   13246:	781b      	ldrb	r3, [r3, #0]
   13248:	2176      	movs	r1, #118	; 0x76
   1324a:	1879      	adds	r1, r7, r1
   1324c:	1c58      	adds	r0, r3, #1
   1324e:	7008      	strb	r0, [r1, #0]
   13250:	0019      	movs	r1, r3
   13252:	2318      	movs	r3, #24
   13254:	18fb      	adds	r3, r7, r3
   13256:	5c5b      	ldrb	r3, [r3, r1]
   13258:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   1325a:	687b      	ldr	r3, [r7, #4]
   1325c:	1c9a      	adds	r2, r3, #2
   1325e:	2376      	movs	r3, #118	; 0x76
   13260:	18fb      	adds	r3, r7, r3
   13262:	781b      	ldrb	r3, [r3, #0]
   13264:	2176      	movs	r1, #118	; 0x76
   13266:	1879      	adds	r1, r7, r1
   13268:	1c58      	adds	r0, r3, #1
   1326a:	7008      	strb	r0, [r1, #0]
   1326c:	0019      	movs	r1, r3
   1326e:	2318      	movs	r3, #24
   13270:	18fb      	adds	r3, r7, r3
   13272:	5c5b      	ldrb	r3, [r3, r1]
   13274:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   13276:	687b      	ldr	r3, [r7, #4]
   13278:	1cda      	adds	r2, r3, #3
   1327a:	2376      	movs	r3, #118	; 0x76
   1327c:	18fb      	adds	r3, r7, r3
   1327e:	781b      	ldrb	r3, [r3, #0]
   13280:	2176      	movs	r1, #118	; 0x76
   13282:	1879      	adds	r1, r7, r1
   13284:	1c58      	adds	r0, r3, #1
   13286:	7008      	strb	r0, [r1, #0]
   13288:	0019      	movs	r1, r3
   1328a:	2318      	movs	r3, #24
   1328c:	18fb      	adds	r3, r7, r3
   1328e:	5c5b      	ldrb	r3, [r3, r1]
   13290:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   13292:	4b73      	ldr	r3, [pc, #460]	; (13460 <spi_cmd_complete+0x79c>)
   13294:	781b      	ldrb	r3, [r3, #0]
   13296:	2b00      	cmp	r3, #0
   13298:	d000      	beq.n	1329c <spi_cmd_complete+0x5d8>
   1329a:	e174      	b.n	13586 <spi_cmd_complete+0x8c2>
   1329c:	e011      	b.n	132c2 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   1329e:	4a71      	ldr	r2, [pc, #452]	; (13464 <spi_cmd_complete+0x7a0>)
   132a0:	4967      	ldr	r1, [pc, #412]	; (13440 <spi_cmd_complete+0x77c>)
   132a2:	4b68      	ldr	r3, [pc, #416]	; (13444 <spi_cmd_complete+0x780>)
   132a4:	0018      	movs	r0, r3
   132a6:	4b68      	ldr	r3, [pc, #416]	; (13448 <spi_cmd_complete+0x784>)
   132a8:	4798      	blx	r3
   132aa:	4b6f      	ldr	r3, [pc, #444]	; (13468 <spi_cmd_complete+0x7a4>)
   132ac:	0018      	movs	r0, r3
   132ae:	4b66      	ldr	r3, [pc, #408]	; (13448 <spi_cmd_complete+0x784>)
   132b0:	4798      	blx	r3
   132b2:	4b67      	ldr	r3, [pc, #412]	; (13450 <spi_cmd_complete+0x78c>)
   132b4:	0018      	movs	r0, r3
   132b6:	4b64      	ldr	r3, [pc, #400]	; (13448 <spi_cmd_complete+0x784>)
   132b8:	4798      	blx	r3
					result = N_FAIL;
   132ba:	2300      	movs	r3, #0
   132bc:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   132be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   132c0:	e162      	b.n	13588 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   132c2:	2376      	movs	r3, #118	; 0x76
   132c4:	18fb      	adds	r3, r7, r3
   132c6:	781b      	ldrb	r3, [r3, #0]
   132c8:	3301      	adds	r3, #1
   132ca:	001a      	movs	r2, r3
   132cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   132ce:	429a      	cmp	r2, r3
   132d0:	d21c      	bcs.n	1330c <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   132d2:	2376      	movs	r3, #118	; 0x76
   132d4:	18fb      	adds	r3, r7, r3
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	2276      	movs	r2, #118	; 0x76
   132da:	18ba      	adds	r2, r7, r2
   132dc:	1c59      	adds	r1, r3, #1
   132de:	7011      	strb	r1, [r2, #0]
   132e0:	001a      	movs	r2, r3
   132e2:	2318      	movs	r3, #24
   132e4:	18fb      	adds	r3, r7, r3
   132e6:	5c9a      	ldrb	r2, [r3, r2]
   132e8:	2314      	movs	r3, #20
   132ea:	18fb      	adds	r3, r7, r3
   132ec:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   132ee:	2376      	movs	r3, #118	; 0x76
   132f0:	18fb      	adds	r3, r7, r3
   132f2:	781b      	ldrb	r3, [r3, #0]
   132f4:	2276      	movs	r2, #118	; 0x76
   132f6:	18ba      	adds	r2, r7, r2
   132f8:	1c59      	adds	r1, r3, #1
   132fa:	7011      	strb	r1, [r2, #0]
   132fc:	001a      	movs	r2, r3
   132fe:	2318      	movs	r3, #24
   13300:	18fb      	adds	r3, r7, r3
   13302:	5c9a      	ldrb	r2, [r3, r2]
   13304:	2314      	movs	r3, #20
   13306:	18fb      	adds	r3, r7, r3
   13308:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   1330a:	e13c      	b.n	13586 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   1330c:	239c      	movs	r3, #156	; 0x9c
   1330e:	009a      	lsls	r2, r3, #2
   13310:	494b      	ldr	r1, [pc, #300]	; (13440 <spi_cmd_complete+0x77c>)
   13312:	4b4c      	ldr	r3, [pc, #304]	; (13444 <spi_cmd_complete+0x780>)
   13314:	0018      	movs	r0, r3
   13316:	4b4c      	ldr	r3, [pc, #304]	; (13448 <spi_cmd_complete+0x784>)
   13318:	4798      	blx	r3
   1331a:	4b54      	ldr	r3, [pc, #336]	; (1346c <spi_cmd_complete+0x7a8>)
   1331c:	0018      	movs	r0, r3
   1331e:	4b4a      	ldr	r3, [pc, #296]	; (13448 <spi_cmd_complete+0x784>)
   13320:	4798      	blx	r3
   13322:	4b4b      	ldr	r3, [pc, #300]	; (13450 <spi_cmd_complete+0x78c>)
   13324:	0018      	movs	r0, r3
   13326:	4b48      	ldr	r3, [pc, #288]	; (13448 <spi_cmd_complete+0x784>)
   13328:	4798      	blx	r3
						result = N_FAIL;
   1332a:	2300      	movs	r3, #0
   1332c:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   1332e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13330:	e12a      	b.n	13588 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   13332:	230f      	movs	r3, #15
   13334:	18fb      	adds	r3, r7, r3
   13336:	781b      	ldrb	r3, [r3, #0]
   13338:	2bc2      	cmp	r3, #194	; 0xc2
   1333a:	d005      	beq.n	13348 <spi_cmd_complete+0x684>
   1333c:	230f      	movs	r3, #15
   1333e:	18fb      	adds	r3, r7, r3
   13340:	781b      	ldrb	r3, [r3, #0]
   13342:	2bc8      	cmp	r3, #200	; 0xc8
   13344:	d000      	beq.n	13348 <spi_cmd_complete+0x684>
   13346:	e11e      	b.n	13586 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   13348:	2300      	movs	r3, #0
   1334a:	663b      	str	r3, [r7, #96]	; 0x60
   1334c:	e011      	b.n	13372 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   1334e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   13350:	1c5a      	adds	r2, r3, #1
   13352:	663a      	str	r2, [r7, #96]	; 0x60
   13354:	001a      	movs	r2, r3
   13356:	687b      	ldr	r3, [r7, #4]
   13358:	189a      	adds	r2, r3, r2
   1335a:	2376      	movs	r3, #118	; 0x76
   1335c:	18fb      	adds	r3, r7, r3
   1335e:	781b      	ldrb	r3, [r3, #0]
   13360:	2176      	movs	r1, #118	; 0x76
   13362:	1879      	adds	r1, r7, r1
   13364:	1c58      	adds	r0, r3, #1
   13366:	7008      	strb	r0, [r1, #0]
   13368:	0019      	movs	r1, r3
   1336a:	2318      	movs	r3, #24
   1336c:	18fb      	adds	r3, r7, r3
   1336e:	5c5b      	ldrb	r3, [r3, r1]
   13370:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   13372:	2376      	movs	r3, #118	; 0x76
   13374:	18fb      	adds	r3, r7, r3
   13376:	781a      	ldrb	r2, [r3, #0]
   13378:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1337a:	429a      	cmp	r2, r3
   1337c:	d203      	bcs.n	13386 <spi_cmd_complete+0x6c2>
   1337e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   13380:	683b      	ldr	r3, [r7, #0]
   13382:	429a      	cmp	r2, r3
   13384:	d3e3      	bcc.n	1334e <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   13386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   13388:	683a      	ldr	r2, [r7, #0]
   1338a:	1ad3      	subs	r3, r2, r3
   1338c:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   1338e:	683b      	ldr	r3, [r7, #0]
   13390:	2b00      	cmp	r3, #0
   13392:	d100      	bne.n	13396 <spi_cmd_complete+0x6d2>
   13394:	e0f1      	b.n	1357a <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   13396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   13398:	2280      	movs	r2, #128	; 0x80
   1339a:	0192      	lsls	r2, r2, #6
   1339c:	1ad3      	subs	r3, r2, r3
   1339e:	001a      	movs	r2, r3
   133a0:	683b      	ldr	r3, [r7, #0]
   133a2:	429a      	cmp	r2, r3
   133a4:	d302      	bcc.n	133ac <spi_cmd_complete+0x6e8>
						nbytes = sz;
   133a6:	683b      	ldr	r3, [r7, #0]
   133a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   133aa:	e004      	b.n	133b6 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   133ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   133ae:	2280      	movs	r2, #128	; 0x80
   133b0:	0192      	lsls	r2, r2, #6
   133b2:	1ad3      	subs	r3, r2, r3
   133b4:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   133b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   133b8:	687a      	ldr	r2, [r7, #4]
   133ba:	18d3      	adds	r3, r2, r3
   133bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   133be:	b292      	uxth	r2, r2
   133c0:	0011      	movs	r1, r2
   133c2:	0018      	movs	r0, r3
   133c4:	4b2a      	ldr	r3, [pc, #168]	; (13470 <spi_cmd_complete+0x7ac>)
   133c6:	4798      	blx	r3
   133c8:	1e03      	subs	r3, r0, #0
   133ca:	d010      	beq.n	133ee <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   133cc:	4a29      	ldr	r2, [pc, #164]	; (13474 <spi_cmd_complete+0x7b0>)
   133ce:	491c      	ldr	r1, [pc, #112]	; (13440 <spi_cmd_complete+0x77c>)
   133d0:	4b1c      	ldr	r3, [pc, #112]	; (13444 <spi_cmd_complete+0x780>)
   133d2:	0018      	movs	r0, r3
   133d4:	4b1c      	ldr	r3, [pc, #112]	; (13448 <spi_cmd_complete+0x784>)
   133d6:	4798      	blx	r3
   133d8:	4b27      	ldr	r3, [pc, #156]	; (13478 <spi_cmd_complete+0x7b4>)
   133da:	0018      	movs	r0, r3
   133dc:	4b1a      	ldr	r3, [pc, #104]	; (13448 <spi_cmd_complete+0x784>)
   133de:	4798      	blx	r3
   133e0:	4b1b      	ldr	r3, [pc, #108]	; (13450 <spi_cmd_complete+0x78c>)
   133e2:	0018      	movs	r0, r3
   133e4:	4b18      	ldr	r3, [pc, #96]	; (13448 <spi_cmd_complete+0x784>)
   133e6:	4798      	blx	r3
						result = N_FAIL;
   133e8:	2300      	movs	r3, #0
   133ea:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   133ec:	e0cb      	b.n	13586 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   133ee:	4b1c      	ldr	r3, [pc, #112]	; (13460 <spi_cmd_complete+0x79c>)
   133f0:	781b      	ldrb	r3, [r3, #0]
   133f2:	2b00      	cmp	r3, #0
   133f4:	d119      	bne.n	1342a <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   133f6:	2314      	movs	r3, #20
   133f8:	18fb      	adds	r3, r7, r3
   133fa:	2102      	movs	r1, #2
   133fc:	0018      	movs	r0, r3
   133fe:	4b1c      	ldr	r3, [pc, #112]	; (13470 <spi_cmd_complete+0x7ac>)
   13400:	4798      	blx	r3
   13402:	1e03      	subs	r3, r0, #0
   13404:	d011      	beq.n	1342a <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   13406:	23a6      	movs	r3, #166	; 0xa6
   13408:	009a      	lsls	r2, r3, #2
   1340a:	490d      	ldr	r1, [pc, #52]	; (13440 <spi_cmd_complete+0x77c>)
   1340c:	4b0d      	ldr	r3, [pc, #52]	; (13444 <spi_cmd_complete+0x780>)
   1340e:	0018      	movs	r0, r3
   13410:	4b0d      	ldr	r3, [pc, #52]	; (13448 <spi_cmd_complete+0x784>)
   13412:	4798      	blx	r3
   13414:	4b19      	ldr	r3, [pc, #100]	; (1347c <spi_cmd_complete+0x7b8>)
   13416:	0018      	movs	r0, r3
   13418:	4b0b      	ldr	r3, [pc, #44]	; (13448 <spi_cmd_complete+0x784>)
   1341a:	4798      	blx	r3
   1341c:	4b0c      	ldr	r3, [pc, #48]	; (13450 <spi_cmd_complete+0x78c>)
   1341e:	0018      	movs	r0, r3
   13420:	4b09      	ldr	r3, [pc, #36]	; (13448 <spi_cmd_complete+0x784>)
   13422:	4798      	blx	r3
							result = N_FAIL;
   13424:	2300      	movs	r3, #0
   13426:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   13428:	e0ad      	b.n	13586 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   1342a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1342c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1342e:	18d3      	adds	r3, r2, r3
   13430:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   13432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   13434:	683a      	ldr	r2, [r7, #0]
   13436:	1ad3      	subs	r3, r2, r3
   13438:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   1343a:	e09e      	b.n	1357a <spi_cmd_complete+0x8b6>
   1343c:	0000022f 	.word	0x0000022f
   13440:	000291d8 	.word	0x000291d8
   13444:	00028bc4 	.word	0x00028bc4
   13448:	0000d14d 	.word	0x0000d14d
   1344c:	00028cbc 	.word	0x00028cbc
   13450:	00028c04 	.word	0x00028c04
   13454:	00000239 	.word	0x00000239
   13458:	00028cf8 	.word	0x00028cf8
   1345c:	00028d2c 	.word	0x00028d2c
   13460:	20003ee8 	.word	0x20003ee8
   13464:	00000263 	.word	0x00000263
   13468:	00028d5c 	.word	0x00028d5c
   1346c:	00028d8c 	.word	0x00028d8c
   13470:	000125fd 	.word	0x000125fd
   13474:	0000028e 	.word	0x0000028e
   13478:	00028dbc 	.word	0x00028dbc
   1347c:	00028df0 	.word	0x00028df0
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   13480:	683a      	ldr	r2, [r7, #0]
   13482:	2380      	movs	r3, #128	; 0x80
   13484:	019b      	lsls	r3, r3, #6
   13486:	429a      	cmp	r2, r3
   13488:	d802      	bhi.n	13490 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   1348a:	683b      	ldr	r3, [r7, #0]
   1348c:	65bb      	str	r3, [r7, #88]	; 0x58
   1348e:	e002      	b.n	13496 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   13490:	2380      	movs	r3, #128	; 0x80
   13492:	019b      	lsls	r3, r3, #6
   13494:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   13496:	230a      	movs	r3, #10
   13498:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1349a:	2317      	movs	r3, #23
   1349c:	18fb      	adds	r3, r7, r3
   1349e:	2101      	movs	r1, #1
   134a0:	0018      	movs	r0, r3
   134a2:	4b3b      	ldr	r3, [pc, #236]	; (13590 <spi_cmd_complete+0x8cc>)
   134a4:	4798      	blx	r3
   134a6:	1e03      	subs	r3, r0, #0
   134a8:	d011      	beq.n	134ce <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   134aa:	23ae      	movs	r3, #174	; 0xae
   134ac:	009a      	lsls	r2, r3, #2
   134ae:	4939      	ldr	r1, [pc, #228]	; (13594 <spi_cmd_complete+0x8d0>)
   134b0:	4b39      	ldr	r3, [pc, #228]	; (13598 <spi_cmd_complete+0x8d4>)
   134b2:	0018      	movs	r0, r3
   134b4:	4b39      	ldr	r3, [pc, #228]	; (1359c <spi_cmd_complete+0x8d8>)
   134b6:	4798      	blx	r3
   134b8:	4b39      	ldr	r3, [pc, #228]	; (135a0 <spi_cmd_complete+0x8dc>)
   134ba:	0018      	movs	r0, r3
   134bc:	4b37      	ldr	r3, [pc, #220]	; (1359c <spi_cmd_complete+0x8d8>)
   134be:	4798      	blx	r3
   134c0:	4b38      	ldr	r3, [pc, #224]	; (135a4 <spi_cmd_complete+0x8e0>)
   134c2:	0018      	movs	r0, r3
   134c4:	4b35      	ldr	r3, [pc, #212]	; (1359c <spi_cmd_complete+0x8d8>)
   134c6:	4798      	blx	r3
							result = N_FAIL;
   134c8:	2300      	movs	r3, #0
   134ca:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   134cc:	e010      	b.n	134f0 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   134ce:	2317      	movs	r3, #23
   134d0:	18fb      	adds	r3, r7, r3
   134d2:	781b      	ldrb	r3, [r3, #0]
   134d4:	091b      	lsrs	r3, r3, #4
   134d6:	b2db      	uxtb	r3, r3
   134d8:	001a      	movs	r2, r3
   134da:	230f      	movs	r3, #15
   134dc:	4013      	ands	r3, r2
   134de:	2b0f      	cmp	r3, #15
   134e0:	d005      	beq.n	134ee <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   134e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   134e4:	1e5a      	subs	r2, r3, #1
   134e6:	667a      	str	r2, [r7, #100]	; 0x64
   134e8:	2b00      	cmp	r3, #0
   134ea:	d1d6      	bne.n	1349a <spi_cmd_complete+0x7d6>
   134ec:	e000      	b.n	134f0 <spi_cmd_complete+0x82c>
							break;
   134ee:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   134f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   134f2:	2b00      	cmp	r3, #0
   134f4:	d046      	beq.n	13584 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   134f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   134f8:	687a      	ldr	r2, [r7, #4]
   134fa:	18d3      	adds	r3, r2, r3
   134fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
   134fe:	b292      	uxth	r2, r2
   13500:	0011      	movs	r1, r2
   13502:	0018      	movs	r0, r3
   13504:	4b22      	ldr	r3, [pc, #136]	; (13590 <spi_cmd_complete+0x8cc>)
   13506:	4798      	blx	r3
   13508:	1e03      	subs	r3, r0, #0
   1350a:	d011      	beq.n	13530 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1350c:	23b2      	movs	r3, #178	; 0xb2
   1350e:	009a      	lsls	r2, r3, #2
   13510:	4920      	ldr	r1, [pc, #128]	; (13594 <spi_cmd_complete+0x8d0>)
   13512:	4b21      	ldr	r3, [pc, #132]	; (13598 <spi_cmd_complete+0x8d4>)
   13514:	0018      	movs	r0, r3
   13516:	4b21      	ldr	r3, [pc, #132]	; (1359c <spi_cmd_complete+0x8d8>)
   13518:	4798      	blx	r3
   1351a:	4b23      	ldr	r3, [pc, #140]	; (135a8 <spi_cmd_complete+0x8e4>)
   1351c:	0018      	movs	r0, r3
   1351e:	4b1f      	ldr	r3, [pc, #124]	; (1359c <spi_cmd_complete+0x8d8>)
   13520:	4798      	blx	r3
   13522:	4b20      	ldr	r3, [pc, #128]	; (135a4 <spi_cmd_complete+0x8e0>)
   13524:	0018      	movs	r0, r3
   13526:	4b1d      	ldr	r3, [pc, #116]	; (1359c <spi_cmd_complete+0x8d8>)
   13528:	4798      	blx	r3
						result = N_FAIL;
   1352a:	2300      	movs	r3, #0
   1352c:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   1352e:	e02a      	b.n	13586 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   13530:	4b1e      	ldr	r3, [pc, #120]	; (135ac <spi_cmd_complete+0x8e8>)
   13532:	781b      	ldrb	r3, [r3, #0]
   13534:	2b00      	cmp	r3, #0
   13536:	d118      	bne.n	1356a <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   13538:	2314      	movs	r3, #20
   1353a:	18fb      	adds	r3, r7, r3
   1353c:	2102      	movs	r1, #2
   1353e:	0018      	movs	r0, r3
   13540:	4b13      	ldr	r3, [pc, #76]	; (13590 <spi_cmd_complete+0x8cc>)
   13542:	4798      	blx	r3
   13544:	1e03      	subs	r3, r0, #0
   13546:	d010      	beq.n	1356a <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   13548:	4a19      	ldr	r2, [pc, #100]	; (135b0 <spi_cmd_complete+0x8ec>)
   1354a:	4912      	ldr	r1, [pc, #72]	; (13594 <spi_cmd_complete+0x8d0>)
   1354c:	4b12      	ldr	r3, [pc, #72]	; (13598 <spi_cmd_complete+0x8d4>)
   1354e:	0018      	movs	r0, r3
   13550:	4b12      	ldr	r3, [pc, #72]	; (1359c <spi_cmd_complete+0x8d8>)
   13552:	4798      	blx	r3
   13554:	4b17      	ldr	r3, [pc, #92]	; (135b4 <spi_cmd_complete+0x8f0>)
   13556:	0018      	movs	r0, r3
   13558:	4b10      	ldr	r3, [pc, #64]	; (1359c <spi_cmd_complete+0x8d8>)
   1355a:	4798      	blx	r3
   1355c:	4b11      	ldr	r3, [pc, #68]	; (135a4 <spi_cmd_complete+0x8e0>)
   1355e:	0018      	movs	r0, r3
   13560:	4b0e      	ldr	r3, [pc, #56]	; (1359c <spi_cmd_complete+0x8d8>)
   13562:	4798      	blx	r3
							result = N_FAIL;
   13564:	2300      	movs	r3, #0
   13566:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   13568:	e00d      	b.n	13586 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   1356a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1356c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1356e:	18d3      	adds	r3, r2, r3
   13570:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   13572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13574:	683a      	ldr	r2, [r7, #0]
   13576:	1ad3      	subs	r3, r2, r3
   13578:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   1357a:	683b      	ldr	r3, [r7, #0]
   1357c:	2b00      	cmp	r3, #0
   1357e:	d000      	beq.n	13582 <spi_cmd_complete+0x8be>
   13580:	e77e      	b.n	13480 <spi_cmd_complete+0x7bc>
   13582:	e000      	b.n	13586 <spi_cmd_complete+0x8c2>
						break;
   13584:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   13586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   13588:	0018      	movs	r0, r3
   1358a:	46bd      	mov	sp, r7
   1358c:	b01f      	add	sp, #124	; 0x7c
   1358e:	bd90      	pop	{r4, r7, pc}
   13590:	000125fd 	.word	0x000125fd
   13594:	000291d8 	.word	0x000291d8
   13598:	00028bc4 	.word	0x00028bc4
   1359c:	0000d14d 	.word	0x0000d14d
   135a0:	00028e28 	.word	0x00028e28
   135a4:	00028c04 	.word	0x00028c04
   135a8:	00028dbc 	.word	0x00028dbc
   135ac:	20003ee8 	.word	0x20003ee8
   135b0:	000002d2 	.word	0x000002d2
   135b4:	00028df0 	.word	0x00028df0

000135b8 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   135b8:	b580      	push	{r7, lr}
   135ba:	b086      	sub	sp, #24
   135bc:	af00      	add	r7, sp, #0
   135be:	6078      	str	r0, [r7, #4]
   135c0:	000a      	movs	r2, r1
   135c2:	1cbb      	adds	r3, r7, #2
   135c4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   135c6:	2313      	movs	r3, #19
   135c8:	18fb      	adds	r3, r7, r3
   135ca:	2201      	movs	r2, #1
   135cc:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   135ce:	230c      	movs	r3, #12
   135d0:	18fb      	adds	r3, r7, r3
   135d2:	2200      	movs	r2, #0
   135d4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   135d6:	2316      	movs	r3, #22
   135d8:	18fb      	adds	r3, r7, r3
   135da:	2200      	movs	r2, #0
   135dc:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   135de:	1cbb      	adds	r3, r7, #2
   135e0:	881a      	ldrh	r2, [r3, #0]
   135e2:	2380      	movs	r3, #128	; 0x80
   135e4:	019b      	lsls	r3, r3, #6
   135e6:	429a      	cmp	r2, r3
   135e8:	d805      	bhi.n	135f6 <spi_data_write+0x3e>
			nbytes = sz;
   135ea:	2314      	movs	r3, #20
   135ec:	18fb      	adds	r3, r7, r3
   135ee:	1cba      	adds	r2, r7, #2
   135f0:	8812      	ldrh	r2, [r2, #0]
   135f2:	801a      	strh	r2, [r3, #0]
   135f4:	e004      	b.n	13600 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   135f6:	2314      	movs	r3, #20
   135f8:	18fb      	adds	r3, r7, r3
   135fa:	2280      	movs	r2, #128	; 0x80
   135fc:	0192      	lsls	r2, r2, #6
   135fe:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   13600:	2311      	movs	r3, #17
   13602:	18fb      	adds	r3, r7, r3
   13604:	22f0      	movs	r2, #240	; 0xf0
   13606:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   13608:	2316      	movs	r3, #22
   1360a:	18fb      	adds	r3, r7, r3
   1360c:	2200      	movs	r2, #0
   1360e:	5e9b      	ldrsh	r3, [r3, r2]
   13610:	2b00      	cmp	r3, #0
   13612:	d10f      	bne.n	13634 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   13614:	1cbb      	adds	r3, r7, #2
   13616:	881a      	ldrh	r2, [r3, #0]
   13618:	2380      	movs	r3, #128	; 0x80
   1361a:	019b      	lsls	r3, r3, #6
   1361c:	429a      	cmp	r2, r3
   1361e:	d804      	bhi.n	1362a <spi_data_write+0x72>
				order = 0x3;
   13620:	2312      	movs	r3, #18
   13622:	18fb      	adds	r3, r7, r3
   13624:	2203      	movs	r2, #3
   13626:	701a      	strb	r2, [r3, #0]
   13628:	e013      	b.n	13652 <spi_data_write+0x9a>
			else
				order = 0x1;
   1362a:	2312      	movs	r3, #18
   1362c:	18fb      	adds	r3, r7, r3
   1362e:	2201      	movs	r2, #1
   13630:	701a      	strb	r2, [r3, #0]
   13632:	e00e      	b.n	13652 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   13634:	1cbb      	adds	r3, r7, #2
   13636:	881a      	ldrh	r2, [r3, #0]
   13638:	2380      	movs	r3, #128	; 0x80
   1363a:	019b      	lsls	r3, r3, #6
   1363c:	429a      	cmp	r2, r3
   1363e:	d804      	bhi.n	1364a <spi_data_write+0x92>
				order = 0x3;
   13640:	2312      	movs	r3, #18
   13642:	18fb      	adds	r3, r7, r3
   13644:	2203      	movs	r2, #3
   13646:	701a      	strb	r2, [r3, #0]
   13648:	e003      	b.n	13652 <spi_data_write+0x9a>
			else
				order = 0x2;
   1364a:	2312      	movs	r3, #18
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	2202      	movs	r2, #2
   13650:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   13652:	2311      	movs	r3, #17
   13654:	18fb      	adds	r3, r7, r3
   13656:	781a      	ldrb	r2, [r3, #0]
   13658:	2312      	movs	r3, #18
   1365a:	18fb      	adds	r3, r7, r3
   1365c:	781b      	ldrb	r3, [r3, #0]
   1365e:	4313      	orrs	r3, r2
   13660:	b2da      	uxtb	r2, r3
   13662:	2311      	movs	r3, #17
   13664:	18fb      	adds	r3, r7, r3
   13666:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   13668:	2311      	movs	r3, #17
   1366a:	18fb      	adds	r3, r7, r3
   1366c:	2101      	movs	r1, #1
   1366e:	0018      	movs	r0, r3
   13670:	4b3c      	ldr	r3, [pc, #240]	; (13764 <spi_data_write+0x1ac>)
   13672:	4798      	blx	r3
   13674:	1e03      	subs	r3, r0, #0
   13676:	d012      	beq.n	1369e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   13678:	4a3b      	ldr	r2, [pc, #236]	; (13768 <spi_data_write+0x1b0>)
   1367a:	493c      	ldr	r1, [pc, #240]	; (1376c <spi_data_write+0x1b4>)
   1367c:	4b3c      	ldr	r3, [pc, #240]	; (13770 <spi_data_write+0x1b8>)
   1367e:	0018      	movs	r0, r3
   13680:	4b3c      	ldr	r3, [pc, #240]	; (13774 <spi_data_write+0x1bc>)
   13682:	4798      	blx	r3
   13684:	4b3c      	ldr	r3, [pc, #240]	; (13778 <spi_data_write+0x1c0>)
   13686:	0018      	movs	r0, r3
   13688:	4b3a      	ldr	r3, [pc, #232]	; (13774 <spi_data_write+0x1bc>)
   1368a:	4798      	blx	r3
   1368c:	4b3b      	ldr	r3, [pc, #236]	; (1377c <spi_data_write+0x1c4>)
   1368e:	0018      	movs	r0, r3
   13690:	4b38      	ldr	r3, [pc, #224]	; (13774 <spi_data_write+0x1bc>)
   13692:	4798      	blx	r3
			result = N_FAIL;
   13694:	2313      	movs	r3, #19
   13696:	18fb      	adds	r3, r7, r3
   13698:	2200      	movs	r2, #0
   1369a:	701a      	strb	r2, [r3, #0]
			break;
   1369c:	e059      	b.n	13752 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   1369e:	2316      	movs	r3, #22
   136a0:	18fb      	adds	r3, r7, r3
   136a2:	2200      	movs	r2, #0
   136a4:	5e9b      	ldrsh	r3, [r3, r2]
   136a6:	687a      	ldr	r2, [r7, #4]
   136a8:	18d2      	adds	r2, r2, r3
   136aa:	2314      	movs	r3, #20
   136ac:	18fb      	adds	r3, r7, r3
   136ae:	881b      	ldrh	r3, [r3, #0]
   136b0:	0019      	movs	r1, r3
   136b2:	0010      	movs	r0, r2
   136b4:	4b2b      	ldr	r3, [pc, #172]	; (13764 <spi_data_write+0x1ac>)
   136b6:	4798      	blx	r3
   136b8:	1e03      	subs	r3, r0, #0
   136ba:	d012      	beq.n	136e2 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   136bc:	4a30      	ldr	r2, [pc, #192]	; (13780 <spi_data_write+0x1c8>)
   136be:	492b      	ldr	r1, [pc, #172]	; (1376c <spi_data_write+0x1b4>)
   136c0:	4b2b      	ldr	r3, [pc, #172]	; (13770 <spi_data_write+0x1b8>)
   136c2:	0018      	movs	r0, r3
   136c4:	4b2b      	ldr	r3, [pc, #172]	; (13774 <spi_data_write+0x1bc>)
   136c6:	4798      	blx	r3
   136c8:	4b2e      	ldr	r3, [pc, #184]	; (13784 <spi_data_write+0x1cc>)
   136ca:	0018      	movs	r0, r3
   136cc:	4b29      	ldr	r3, [pc, #164]	; (13774 <spi_data_write+0x1bc>)
   136ce:	4798      	blx	r3
   136d0:	4b2a      	ldr	r3, [pc, #168]	; (1377c <spi_data_write+0x1c4>)
   136d2:	0018      	movs	r0, r3
   136d4:	4b27      	ldr	r3, [pc, #156]	; (13774 <spi_data_write+0x1bc>)
   136d6:	4798      	blx	r3
			result = N_FAIL;
   136d8:	2313      	movs	r3, #19
   136da:	18fb      	adds	r3, r7, r3
   136dc:	2200      	movs	r2, #0
   136de:	701a      	strb	r2, [r3, #0]
			break;
   136e0:	e037      	b.n	13752 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   136e2:	4b29      	ldr	r3, [pc, #164]	; (13788 <spi_data_write+0x1d0>)
   136e4:	781b      	ldrb	r3, [r3, #0]
   136e6:	2b00      	cmp	r3, #0
   136e8:	d11b      	bne.n	13722 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   136ea:	230c      	movs	r3, #12
   136ec:	18fb      	adds	r3, r7, r3
   136ee:	2102      	movs	r1, #2
   136f0:	0018      	movs	r0, r3
   136f2:	4b1c      	ldr	r3, [pc, #112]	; (13764 <spi_data_write+0x1ac>)
   136f4:	4798      	blx	r3
   136f6:	1e03      	subs	r3, r0, #0
   136f8:	d013      	beq.n	13722 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   136fa:	23d7      	movs	r3, #215	; 0xd7
   136fc:	009a      	lsls	r2, r3, #2
   136fe:	491b      	ldr	r1, [pc, #108]	; (1376c <spi_data_write+0x1b4>)
   13700:	4b1b      	ldr	r3, [pc, #108]	; (13770 <spi_data_write+0x1b8>)
   13702:	0018      	movs	r0, r3
   13704:	4b1b      	ldr	r3, [pc, #108]	; (13774 <spi_data_write+0x1bc>)
   13706:	4798      	blx	r3
   13708:	4b20      	ldr	r3, [pc, #128]	; (1378c <spi_data_write+0x1d4>)
   1370a:	0018      	movs	r0, r3
   1370c:	4b19      	ldr	r3, [pc, #100]	; (13774 <spi_data_write+0x1bc>)
   1370e:	4798      	blx	r3
   13710:	4b1a      	ldr	r3, [pc, #104]	; (1377c <spi_data_write+0x1c4>)
   13712:	0018      	movs	r0, r3
   13714:	4b17      	ldr	r3, [pc, #92]	; (13774 <spi_data_write+0x1bc>)
   13716:	4798      	blx	r3
				result = N_FAIL;
   13718:	2313      	movs	r3, #19
   1371a:	18fb      	adds	r3, r7, r3
   1371c:	2200      	movs	r2, #0
   1371e:	701a      	strb	r2, [r3, #0]
				break;
   13720:	e017      	b.n	13752 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   13722:	2316      	movs	r3, #22
   13724:	18fb      	adds	r3, r7, r3
   13726:	881a      	ldrh	r2, [r3, #0]
   13728:	2314      	movs	r3, #20
   1372a:	18fb      	adds	r3, r7, r3
   1372c:	881b      	ldrh	r3, [r3, #0]
   1372e:	18d3      	adds	r3, r2, r3
   13730:	b29a      	uxth	r2, r3
   13732:	2316      	movs	r3, #22
   13734:	18fb      	adds	r3, r7, r3
   13736:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   13738:	1cbb      	adds	r3, r7, #2
   1373a:	1cb9      	adds	r1, r7, #2
   1373c:	2214      	movs	r2, #20
   1373e:	18ba      	adds	r2, r7, r2
   13740:	8809      	ldrh	r1, [r1, #0]
   13742:	8812      	ldrh	r2, [r2, #0]
   13744:	1a8a      	subs	r2, r1, r2
   13746:	801a      	strh	r2, [r3, #0]
	} while (sz);
   13748:	1cbb      	adds	r3, r7, #2
   1374a:	881b      	ldrh	r3, [r3, #0]
   1374c:	2b00      	cmp	r3, #0
   1374e:	d000      	beq.n	13752 <spi_data_write+0x19a>
   13750:	e745      	b.n	135de <spi_data_write+0x26>


	return result;
   13752:	2313      	movs	r3, #19
   13754:	18fb      	adds	r3, r7, r3
   13756:	781b      	ldrb	r3, [r3, #0]
   13758:	b25b      	sxtb	r3, r3
}
   1375a:	0018      	movs	r0, r3
   1375c:	46bd      	mov	sp, r7
   1375e:	b006      	add	sp, #24
   13760:	bd80      	pop	{r7, pc}
   13762:	46c0      	nop			; (mov r8, r8)
   13764:	00012641 	.word	0x00012641
   13768:	00000349 	.word	0x00000349
   1376c:	000291ec 	.word	0x000291ec
   13770:	00028bc4 	.word	0x00028bc4
   13774:	0000d14d 	.word	0x0000d14d
   13778:	00028e8c 	.word	0x00028e8c
   1377c:	00028c04 	.word	0x00028c04
   13780:	00000352 	.word	0x00000352
   13784:	00028ec4 	.word	0x00028ec4
   13788:	20003ee8 	.word	0x20003ee8
   1378c:	00028ef8 	.word	0x00028ef8

00013790 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   13790:	b590      	push	{r4, r7, lr}
   13792:	b087      	sub	sp, #28
   13794:	af02      	add	r7, sp, #8
   13796:	6078      	str	r0, [r7, #4]
   13798:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   1379a:	230f      	movs	r3, #15
   1379c:	18fb      	adds	r3, r7, r3
   1379e:	220a      	movs	r2, #10
   137a0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   137a2:	230c      	movs	r3, #12
   137a4:	18fb      	adds	r3, r7, r3
   137a6:	2201      	movs	r2, #1
   137a8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   137aa:	230e      	movs	r3, #14
   137ac:	18fb      	adds	r3, r7, r3
   137ae:	22c9      	movs	r2, #201	; 0xc9
   137b0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   137b2:	230d      	movs	r3, #13
   137b4:	18fb      	adds	r3, r7, r3
   137b6:	2200      	movs	r2, #0
   137b8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   137ba:	687b      	ldr	r3, [r7, #4]
   137bc:	2b30      	cmp	r3, #48	; 0x30
   137be:	d808      	bhi.n	137d2 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   137c0:	230e      	movs	r3, #14
   137c2:	18fb      	adds	r3, r7, r3
   137c4:	22c3      	movs	r2, #195	; 0xc3
   137c6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   137c8:	230d      	movs	r3, #13
   137ca:	18fb      	adds	r3, r7, r3
   137cc:	2201      	movs	r2, #1
   137ce:	701a      	strb	r2, [r3, #0]
   137d0:	e007      	b.n	137e2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   137d2:	230e      	movs	r3, #14
   137d4:	18fb      	adds	r3, r7, r3
   137d6:	22c9      	movs	r2, #201	; 0xc9
   137d8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   137da:	230d      	movs	r3, #13
   137dc:	18fb      	adds	r3, r7, r3
   137de:	2200      	movs	r2, #0
   137e0:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   137e2:	003a      	movs	r2, r7
   137e4:	6879      	ldr	r1, [r7, #4]
   137e6:	230e      	movs	r3, #14
   137e8:	18fb      	adds	r3, r7, r3
   137ea:	7818      	ldrb	r0, [r3, #0]
   137ec:	230d      	movs	r3, #13
   137ee:	18fb      	adds	r3, r7, r3
   137f0:	781b      	ldrb	r3, [r3, #0]
   137f2:	9300      	str	r3, [sp, #0]
   137f4:	2304      	movs	r3, #4
   137f6:	4c2e      	ldr	r4, [pc, #184]	; (138b0 <spi_write_reg+0x120>)
   137f8:	47a0      	blx	r4
   137fa:	0002      	movs	r2, r0
   137fc:	230c      	movs	r3, #12
   137fe:	18fb      	adds	r3, r7, r3
   13800:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   13802:	230c      	movs	r3, #12
   13804:	18fb      	adds	r3, r7, r3
   13806:	781b      	ldrb	r3, [r3, #0]
   13808:	b25b      	sxtb	r3, r3
   1380a:	2b01      	cmp	r3, #1
   1380c:	d010      	beq.n	13830 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   1380e:	4a29      	ldr	r2, [pc, #164]	; (138b4 <spi_write_reg+0x124>)
   13810:	4929      	ldr	r1, [pc, #164]	; (138b8 <spi_write_reg+0x128>)
   13812:	4b2a      	ldr	r3, [pc, #168]	; (138bc <spi_write_reg+0x12c>)
   13814:	0018      	movs	r0, r3
   13816:	4b2a      	ldr	r3, [pc, #168]	; (138c0 <spi_write_reg+0x130>)
   13818:	4798      	blx	r3
   1381a:	687a      	ldr	r2, [r7, #4]
   1381c:	4b29      	ldr	r3, [pc, #164]	; (138c4 <spi_write_reg+0x134>)
   1381e:	0011      	movs	r1, r2
   13820:	0018      	movs	r0, r3
   13822:	4b27      	ldr	r3, [pc, #156]	; (138c0 <spi_write_reg+0x130>)
   13824:	4798      	blx	r3
   13826:	4b28      	ldr	r3, [pc, #160]	; (138c8 <spi_write_reg+0x138>)
   13828:	0018      	movs	r0, r3
   1382a:	4b25      	ldr	r3, [pc, #148]	; (138c0 <spi_write_reg+0x130>)
   1382c:	4798      	blx	r3
		goto _FAIL_;
   1382e:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   13830:	230c      	movs	r3, #12
   13832:	18fb      	adds	r3, r7, r3
   13834:	781b      	ldrb	r3, [r3, #0]
   13836:	b25b      	sxtb	r3, r3
   13838:	2b01      	cmp	r3, #1
   1383a:	d030      	beq.n	1389e <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   1383c:	2001      	movs	r0, #1
   1383e:	4b23      	ldr	r3, [pc, #140]	; (138cc <spi_write_reg+0x13c>)
   13840:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   13842:	2300      	movs	r3, #0
   13844:	9300      	str	r3, [sp, #0]
   13846:	2300      	movs	r3, #0
   13848:	2200      	movs	r2, #0
   1384a:	2100      	movs	r1, #0
   1384c:	20cf      	movs	r0, #207	; 0xcf
   1384e:	4c20      	ldr	r4, [pc, #128]	; (138d0 <spi_write_reg+0x140>)
   13850:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   13852:	20cf      	movs	r0, #207	; 0xcf
   13854:	4b1f      	ldr	r3, [pc, #124]	; (138d4 <spi_write_reg+0x144>)
   13856:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   13858:	23ea      	movs	r3, #234	; 0xea
   1385a:	009a      	lsls	r2, r3, #2
   1385c:	4916      	ldr	r1, [pc, #88]	; (138b8 <spi_write_reg+0x128>)
   1385e:	4b17      	ldr	r3, [pc, #92]	; (138bc <spi_write_reg+0x12c>)
   13860:	0018      	movs	r0, r3
   13862:	4b17      	ldr	r3, [pc, #92]	; (138c0 <spi_write_reg+0x130>)
   13864:	4798      	blx	r3
   13866:	230f      	movs	r3, #15
   13868:	18fb      	adds	r3, r7, r3
   1386a:	7819      	ldrb	r1, [r3, #0]
   1386c:	683b      	ldr	r3, [r7, #0]
   1386e:	687a      	ldr	r2, [r7, #4]
   13870:	4819      	ldr	r0, [pc, #100]	; (138d8 <spi_write_reg+0x148>)
   13872:	4c13      	ldr	r4, [pc, #76]	; (138c0 <spi_write_reg+0x130>)
   13874:	47a0      	blx	r4
   13876:	4b14      	ldr	r3, [pc, #80]	; (138c8 <spi_write_reg+0x138>)
   13878:	0018      	movs	r0, r3
   1387a:	4b11      	ldr	r3, [pc, #68]	; (138c0 <spi_write_reg+0x130>)
   1387c:	4798      	blx	r3
		nm_bsp_sleep(1);
   1387e:	2001      	movs	r0, #1
   13880:	4b12      	ldr	r3, [pc, #72]	; (138cc <spi_write_reg+0x13c>)
   13882:	4798      	blx	r3
		retry--;
   13884:	230f      	movs	r3, #15
   13886:	18fb      	adds	r3, r7, r3
   13888:	781a      	ldrb	r2, [r3, #0]
   1388a:	230f      	movs	r3, #15
   1388c:	18fb      	adds	r3, r7, r3
   1388e:	3a01      	subs	r2, #1
   13890:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   13892:	230f      	movs	r3, #15
   13894:	18fb      	adds	r3, r7, r3
   13896:	781b      	ldrb	r3, [r3, #0]
   13898:	2b00      	cmp	r3, #0
   1389a:	d000      	beq.n	1389e <spi_write_reg+0x10e>
   1389c:	e78d      	b.n	137ba <spi_write_reg+0x2a>
	}

	return result;
   1389e:	230c      	movs	r3, #12
   138a0:	18fb      	adds	r3, r7, r3
   138a2:	781b      	ldrb	r3, [r3, #0]
   138a4:	b25b      	sxtb	r3, r3
}
   138a6:	0018      	movs	r0, r3
   138a8:	46bd      	mov	sp, r7
   138aa:	b005      	add	sp, #20
   138ac:	bd90      	pop	{r4, r7, pc}
   138ae:	46c0      	nop			; (mov r8, r8)
   138b0:	00012cc5 	.word	0x00012cc5
   138b4:	0000039d 	.word	0x0000039d
   138b8:	000291fc 	.word	0x000291fc
   138bc:	00028bc4 	.word	0x00028bc4
   138c0:	0000d14d 	.word	0x0000d14d
   138c4:	00028f30 	.word	0x00028f30
   138c8:	00028c04 	.word	0x00028c04
   138cc:	0000f605 	.word	0x0000f605
   138d0:	00012749 	.word	0x00012749
   138d4:	00012b89 	.word	0x00012b89
   138d8:	00028f5c 	.word	0x00028f5c

000138dc <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   138dc:	b590      	push	{r4, r7, lr}
   138de:	b089      	sub	sp, #36	; 0x24
   138e0:	af02      	add	r7, sp, #8
   138e2:	60f8      	str	r0, [r7, #12]
   138e4:	60b9      	str	r1, [r7, #8]
   138e6:	1dbb      	adds	r3, r7, #6
   138e8:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   138ea:	2316      	movs	r3, #22
   138ec:	18fb      	adds	r3, r7, r3
   138ee:	220a      	movs	r2, #10
   138f0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   138f2:	2315      	movs	r3, #21
   138f4:	18fb      	adds	r3, r7, r3
   138f6:	22c7      	movs	r2, #199	; 0xc7
   138f8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   138fa:	1dbb      	adds	r3, r7, #6
   138fc:	881a      	ldrh	r2, [r3, #0]
   138fe:	68f9      	ldr	r1, [r7, #12]
   13900:	2315      	movs	r3, #21
   13902:	18fb      	adds	r3, r7, r3
   13904:	7818      	ldrb	r0, [r3, #0]
   13906:	2300      	movs	r3, #0
   13908:	9300      	str	r3, [sp, #0]
   1390a:	0013      	movs	r3, r2
   1390c:	2200      	movs	r2, #0
   1390e:	4c4d      	ldr	r4, [pc, #308]	; (13a44 <nm_spi_write+0x168>)
   13910:	47a0      	blx	r4
   13912:	0002      	movs	r2, r0
   13914:	2317      	movs	r3, #23
   13916:	18fb      	adds	r3, r7, r3
   13918:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   1391a:	2317      	movs	r3, #23
   1391c:	18fb      	adds	r3, r7, r3
   1391e:	781b      	ldrb	r3, [r3, #0]
   13920:	b25b      	sxtb	r3, r3
   13922:	2b01      	cmp	r3, #1
   13924:	d010      	beq.n	13948 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   13926:	4a48      	ldr	r2, [pc, #288]	; (13a48 <nm_spi_write+0x16c>)
   13928:	4948      	ldr	r1, [pc, #288]	; (13a4c <nm_spi_write+0x170>)
   1392a:	4b49      	ldr	r3, [pc, #292]	; (13a50 <nm_spi_write+0x174>)
   1392c:	0018      	movs	r0, r3
   1392e:	4b49      	ldr	r3, [pc, #292]	; (13a54 <nm_spi_write+0x178>)
   13930:	4798      	blx	r3
   13932:	68fa      	ldr	r2, [r7, #12]
   13934:	4b48      	ldr	r3, [pc, #288]	; (13a58 <nm_spi_write+0x17c>)
   13936:	0011      	movs	r1, r2
   13938:	0018      	movs	r0, r3
   1393a:	4b46      	ldr	r3, [pc, #280]	; (13a54 <nm_spi_write+0x178>)
   1393c:	4798      	blx	r3
   1393e:	4b47      	ldr	r3, [pc, #284]	; (13a5c <nm_spi_write+0x180>)
   13940:	0018      	movs	r0, r3
   13942:	4b44      	ldr	r3, [pc, #272]	; (13a54 <nm_spi_write+0x178>)
   13944:	4798      	blx	r3
		goto _FAIL_;
   13946:	e03e      	b.n	139c6 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   13948:	2317      	movs	r3, #23
   1394a:	18fc      	adds	r4, r7, r3
   1394c:	1dbb      	adds	r3, r7, #6
   1394e:	881a      	ldrh	r2, [r3, #0]
   13950:	68bb      	ldr	r3, [r7, #8]
   13952:	0011      	movs	r1, r2
   13954:	0018      	movs	r0, r3
   13956:	4b42      	ldr	r3, [pc, #264]	; (13a60 <nm_spi_write+0x184>)
   13958:	4798      	blx	r3
   1395a:	0003      	movs	r3, r0
   1395c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   1395e:	2317      	movs	r3, #23
   13960:	18fb      	adds	r3, r7, r3
   13962:	781b      	ldrb	r3, [r3, #0]
   13964:	b25b      	sxtb	r3, r3
   13966:	2b01      	cmp	r3, #1
   13968:	d00e      	beq.n	13988 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1396a:	4a3e      	ldr	r2, [pc, #248]	; (13a64 <nm_spi_write+0x188>)
   1396c:	4937      	ldr	r1, [pc, #220]	; (13a4c <nm_spi_write+0x170>)
   1396e:	4b38      	ldr	r3, [pc, #224]	; (13a50 <nm_spi_write+0x174>)
   13970:	0018      	movs	r0, r3
   13972:	4b38      	ldr	r3, [pc, #224]	; (13a54 <nm_spi_write+0x178>)
   13974:	4798      	blx	r3
   13976:	4b3c      	ldr	r3, [pc, #240]	; (13a68 <nm_spi_write+0x18c>)
   13978:	0018      	movs	r0, r3
   1397a:	4b36      	ldr	r3, [pc, #216]	; (13a54 <nm_spi_write+0x178>)
   1397c:	4798      	blx	r3
   1397e:	4b37      	ldr	r3, [pc, #220]	; (13a5c <nm_spi_write+0x180>)
   13980:	0018      	movs	r0, r3
   13982:	4b34      	ldr	r3, [pc, #208]	; (13a54 <nm_spi_write+0x178>)
   13984:	4798      	blx	r3
		goto _FAIL_;
   13986:	e01e      	b.n	139c6 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   13988:	2317      	movs	r3, #23
   1398a:	18fc      	adds	r4, r7, r3
   1398c:	2315      	movs	r3, #21
   1398e:	18fb      	adds	r3, r7, r3
   13990:	781b      	ldrb	r3, [r3, #0]
   13992:	0018      	movs	r0, r3
   13994:	4b35      	ldr	r3, [pc, #212]	; (13a6c <nm_spi_write+0x190>)
   13996:	4798      	blx	r3
   13998:	0003      	movs	r3, r0
   1399a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   1399c:	2317      	movs	r3, #23
   1399e:	18fb      	adds	r3, r7, r3
   139a0:	781b      	ldrb	r3, [r3, #0]
   139a2:	b25b      	sxtb	r3, r3
   139a4:	2b01      	cmp	r3, #1
   139a6:	d00e      	beq.n	139c6 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   139a8:	4a31      	ldr	r2, [pc, #196]	; (13a70 <nm_spi_write+0x194>)
   139aa:	4928      	ldr	r1, [pc, #160]	; (13a4c <nm_spi_write+0x170>)
   139ac:	4b28      	ldr	r3, [pc, #160]	; (13a50 <nm_spi_write+0x174>)
   139ae:	0018      	movs	r0, r3
   139b0:	4b28      	ldr	r3, [pc, #160]	; (13a54 <nm_spi_write+0x178>)
   139b2:	4798      	blx	r3
   139b4:	4b2c      	ldr	r3, [pc, #176]	; (13a68 <nm_spi_write+0x18c>)
   139b6:	0018      	movs	r0, r3
   139b8:	4b26      	ldr	r3, [pc, #152]	; (13a54 <nm_spi_write+0x178>)
   139ba:	4798      	blx	r3
   139bc:	4b27      	ldr	r3, [pc, #156]	; (13a5c <nm_spi_write+0x180>)
   139be:	0018      	movs	r0, r3
   139c0:	4b24      	ldr	r3, [pc, #144]	; (13a54 <nm_spi_write+0x178>)
   139c2:	4798      	blx	r3
		goto _FAIL_;
   139c4:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   139c6:	2317      	movs	r3, #23
   139c8:	18fb      	adds	r3, r7, r3
   139ca:	781b      	ldrb	r3, [r3, #0]
   139cc:	b25b      	sxtb	r3, r3
   139ce:	2b01      	cmp	r3, #1
   139d0:	d030      	beq.n	13a34 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   139d2:	2001      	movs	r0, #1
   139d4:	4b27      	ldr	r3, [pc, #156]	; (13a74 <nm_spi_write+0x198>)
   139d6:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   139d8:	2300      	movs	r3, #0
   139da:	9300      	str	r3, [sp, #0]
   139dc:	2300      	movs	r3, #0
   139de:	2200      	movs	r2, #0
   139e0:	2100      	movs	r1, #0
   139e2:	20cf      	movs	r0, #207	; 0xcf
   139e4:	4c24      	ldr	r4, [pc, #144]	; (13a78 <nm_spi_write+0x19c>)
   139e6:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   139e8:	20cf      	movs	r0, #207	; 0xcf
   139ea:	4b24      	ldr	r3, [pc, #144]	; (13a7c <nm_spi_write+0x1a0>)
   139ec:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   139ee:	4a24      	ldr	r2, [pc, #144]	; (13a80 <nm_spi_write+0x1a4>)
   139f0:	4916      	ldr	r1, [pc, #88]	; (13a4c <nm_spi_write+0x170>)
   139f2:	4b17      	ldr	r3, [pc, #92]	; (13a50 <nm_spi_write+0x174>)
   139f4:	0018      	movs	r0, r3
   139f6:	4b17      	ldr	r3, [pc, #92]	; (13a54 <nm_spi_write+0x178>)
   139f8:	4798      	blx	r3
   139fa:	2316      	movs	r3, #22
   139fc:	18fb      	adds	r3, r7, r3
   139fe:	7819      	ldrb	r1, [r3, #0]
   13a00:	1dbb      	adds	r3, r7, #6
   13a02:	881b      	ldrh	r3, [r3, #0]
   13a04:	68fa      	ldr	r2, [r7, #12]
   13a06:	481f      	ldr	r0, [pc, #124]	; (13a84 <nm_spi_write+0x1a8>)
   13a08:	4c12      	ldr	r4, [pc, #72]	; (13a54 <nm_spi_write+0x178>)
   13a0a:	47a0      	blx	r4
   13a0c:	4b13      	ldr	r3, [pc, #76]	; (13a5c <nm_spi_write+0x180>)
   13a0e:	0018      	movs	r0, r3
   13a10:	4b10      	ldr	r3, [pc, #64]	; (13a54 <nm_spi_write+0x178>)
   13a12:	4798      	blx	r3
		nm_bsp_sleep(1);
   13a14:	2001      	movs	r0, #1
   13a16:	4b17      	ldr	r3, [pc, #92]	; (13a74 <nm_spi_write+0x198>)
   13a18:	4798      	blx	r3
		retry--;
   13a1a:	2316      	movs	r3, #22
   13a1c:	18fb      	adds	r3, r7, r3
   13a1e:	781a      	ldrb	r2, [r3, #0]
   13a20:	2316      	movs	r3, #22
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	3a01      	subs	r2, #1
   13a26:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   13a28:	2316      	movs	r3, #22
   13a2a:	18fb      	adds	r3, r7, r3
   13a2c:	781b      	ldrb	r3, [r3, #0]
   13a2e:	2b00      	cmp	r3, #0
   13a30:	d000      	beq.n	13a34 <nm_spi_write+0x158>
   13a32:	e762      	b.n	138fa <nm_spi_write+0x1e>
	}


	return result;
   13a34:	2317      	movs	r3, #23
   13a36:	18fb      	adds	r3, r7, r3
   13a38:	781b      	ldrb	r3, [r3, #0]
   13a3a:	b25b      	sxtb	r3, r3
}
   13a3c:	0018      	movs	r0, r3
   13a3e:	46bd      	mov	sp, r7
   13a40:	b007      	add	sp, #28
   13a42:	bd90      	pop	{r4, r7, pc}
   13a44:	00012cc5 	.word	0x00012cc5
   13a48:	000003cf 	.word	0x000003cf
   13a4c:	0002920c 	.word	0x0002920c
   13a50:	00028bc4 	.word	0x00028bc4
   13a54:	0000d14d 	.word	0x0000d14d
   13a58:	00028f78 	.word	0x00028f78
   13a5c:	00028c04 	.word	0x00028c04
   13a60:	000135b9 	.word	0x000135b9
   13a64:	000003d9 	.word	0x000003d9
   13a68:	00028fa8 	.word	0x00028fa8
   13a6c:	00012a89 	.word	0x00012a89
   13a70:	000003e1 	.word	0x000003e1
   13a74:	0000f605 	.word	0x0000f605
   13a78:	00012749 	.word	0x00012749
   13a7c:	00012b89 	.word	0x00012b89
   13a80:	000003eb 	.word	0x000003eb
   13a84:	00028fd0 	.word	0x00028fd0

00013a88 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   13a88:	b590      	push	{r4, r7, lr}
   13a8a:	b087      	sub	sp, #28
   13a8c:	af02      	add	r7, sp, #8
   13a8e:	6078      	str	r0, [r7, #4]
   13a90:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   13a92:	230f      	movs	r3, #15
   13a94:	18fb      	adds	r3, r7, r3
   13a96:	220a      	movs	r2, #10
   13a98:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   13a9a:	230c      	movs	r3, #12
   13a9c:	18fb      	adds	r3, r7, r3
   13a9e:	2201      	movs	r2, #1
   13aa0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   13aa2:	230e      	movs	r3, #14
   13aa4:	18fb      	adds	r3, r7, r3
   13aa6:	22ca      	movs	r2, #202	; 0xca
   13aa8:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   13aaa:	230d      	movs	r3, #13
   13aac:	18fb      	adds	r3, r7, r3
   13aae:	2200      	movs	r2, #0
   13ab0:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   13ab2:	687b      	ldr	r3, [r7, #4]
   13ab4:	2bff      	cmp	r3, #255	; 0xff
   13ab6:	d808      	bhi.n	13aca <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   13ab8:	230e      	movs	r3, #14
   13aba:	18fb      	adds	r3, r7, r3
   13abc:	22c4      	movs	r2, #196	; 0xc4
   13abe:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   13ac0:	230d      	movs	r3, #13
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	2201      	movs	r2, #1
   13ac6:	701a      	strb	r2, [r3, #0]
   13ac8:	e007      	b.n	13ada <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   13aca:	230e      	movs	r3, #14
   13acc:	18fb      	adds	r3, r7, r3
   13ace:	22ca      	movs	r2, #202	; 0xca
   13ad0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   13ad2:	230d      	movs	r3, #13
   13ad4:	18fb      	adds	r3, r7, r3
   13ad6:	2200      	movs	r2, #0
   13ad8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   13ada:	2308      	movs	r3, #8
   13adc:	18fa      	adds	r2, r7, r3
   13ade:	6879      	ldr	r1, [r7, #4]
   13ae0:	230e      	movs	r3, #14
   13ae2:	18fb      	adds	r3, r7, r3
   13ae4:	7818      	ldrb	r0, [r3, #0]
   13ae6:	230d      	movs	r3, #13
   13ae8:	18fb      	adds	r3, r7, r3
   13aea:	781b      	ldrb	r3, [r3, #0]
   13aec:	9300      	str	r3, [sp, #0]
   13aee:	2304      	movs	r3, #4
   13af0:	4c37      	ldr	r4, [pc, #220]	; (13bd0 <spi_read_reg+0x148>)
   13af2:	47a0      	blx	r4
   13af4:	0002      	movs	r2, r0
   13af6:	230c      	movs	r3, #12
   13af8:	18fb      	adds	r3, r7, r3
   13afa:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   13afc:	230c      	movs	r3, #12
   13afe:	18fb      	adds	r3, r7, r3
   13b00:	781b      	ldrb	r3, [r3, #0]
   13b02:	b25b      	sxtb	r3, r3
   13b04:	2b01      	cmp	r3, #1
   13b06:	d010      	beq.n	13b2a <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   13b08:	4a32      	ldr	r2, [pc, #200]	; (13bd4 <spi_read_reg+0x14c>)
   13b0a:	4933      	ldr	r1, [pc, #204]	; (13bd8 <spi_read_reg+0x150>)
   13b0c:	4b33      	ldr	r3, [pc, #204]	; (13bdc <spi_read_reg+0x154>)
   13b0e:	0018      	movs	r0, r3
   13b10:	4b33      	ldr	r3, [pc, #204]	; (13be0 <spi_read_reg+0x158>)
   13b12:	4798      	blx	r3
   13b14:	687a      	ldr	r2, [r7, #4]
   13b16:	4b33      	ldr	r3, [pc, #204]	; (13be4 <spi_read_reg+0x15c>)
   13b18:	0011      	movs	r1, r2
   13b1a:	0018      	movs	r0, r3
   13b1c:	4b30      	ldr	r3, [pc, #192]	; (13be0 <spi_read_reg+0x158>)
   13b1e:	4798      	blx	r3
   13b20:	4b31      	ldr	r3, [pc, #196]	; (13be8 <spi_read_reg+0x160>)
   13b22:	0018      	movs	r0, r3
   13b24:	4b2e      	ldr	r3, [pc, #184]	; (13be0 <spi_read_reg+0x158>)
   13b26:	4798      	blx	r3
		goto _FAIL_;
   13b28:	e014      	b.n	13b54 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   13b2a:	2308      	movs	r3, #8
   13b2c:	18fb      	adds	r3, r7, r3
   13b2e:	781b      	ldrb	r3, [r3, #0]
   13b30:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   13b32:	2308      	movs	r3, #8
   13b34:	18fb      	adds	r3, r7, r3
   13b36:	785b      	ldrb	r3, [r3, #1]
   13b38:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   13b3a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   13b3c:	2308      	movs	r3, #8
   13b3e:	18fb      	adds	r3, r7, r3
   13b40:	789b      	ldrb	r3, [r3, #2]
   13b42:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   13b44:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   13b46:	2308      	movs	r3, #8
   13b48:	18fb      	adds	r3, r7, r3
   13b4a:	78db      	ldrb	r3, [r3, #3]
   13b4c:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   13b4e:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   13b50:	683b      	ldr	r3, [r7, #0]
   13b52:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   13b54:	230c      	movs	r3, #12
   13b56:	18fb      	adds	r3, r7, r3
   13b58:	781b      	ldrb	r3, [r3, #0]
   13b5a:	b25b      	sxtb	r3, r3
   13b5c:	2b01      	cmp	r3, #1
   13b5e:	d02f      	beq.n	13bc0 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   13b60:	2001      	movs	r0, #1
   13b62:	4b22      	ldr	r3, [pc, #136]	; (13bec <spi_read_reg+0x164>)
   13b64:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   13b66:	2300      	movs	r3, #0
   13b68:	9300      	str	r3, [sp, #0]
   13b6a:	2300      	movs	r3, #0
   13b6c:	2200      	movs	r2, #0
   13b6e:	2100      	movs	r1, #0
   13b70:	20cf      	movs	r0, #207	; 0xcf
   13b72:	4c1f      	ldr	r4, [pc, #124]	; (13bf0 <spi_read_reg+0x168>)
   13b74:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   13b76:	20cf      	movs	r0, #207	; 0xcf
   13b78:	4b1e      	ldr	r3, [pc, #120]	; (13bf4 <spi_read_reg+0x16c>)
   13b7a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   13b7c:	4a1e      	ldr	r2, [pc, #120]	; (13bf8 <spi_read_reg+0x170>)
   13b7e:	4916      	ldr	r1, [pc, #88]	; (13bd8 <spi_read_reg+0x150>)
   13b80:	4b16      	ldr	r3, [pc, #88]	; (13bdc <spi_read_reg+0x154>)
   13b82:	0018      	movs	r0, r3
   13b84:	4b16      	ldr	r3, [pc, #88]	; (13be0 <spi_read_reg+0x158>)
   13b86:	4798      	blx	r3
   13b88:	230f      	movs	r3, #15
   13b8a:	18fb      	adds	r3, r7, r3
   13b8c:	7819      	ldrb	r1, [r3, #0]
   13b8e:	687a      	ldr	r2, [r7, #4]
   13b90:	4b1a      	ldr	r3, [pc, #104]	; (13bfc <spi_read_reg+0x174>)
   13b92:	0018      	movs	r0, r3
   13b94:	4b12      	ldr	r3, [pc, #72]	; (13be0 <spi_read_reg+0x158>)
   13b96:	4798      	blx	r3
   13b98:	4b13      	ldr	r3, [pc, #76]	; (13be8 <spi_read_reg+0x160>)
   13b9a:	0018      	movs	r0, r3
   13b9c:	4b10      	ldr	r3, [pc, #64]	; (13be0 <spi_read_reg+0x158>)
   13b9e:	4798      	blx	r3
		nm_bsp_sleep(1);
   13ba0:	2001      	movs	r0, #1
   13ba2:	4b12      	ldr	r3, [pc, #72]	; (13bec <spi_read_reg+0x164>)
   13ba4:	4798      	blx	r3
		retry--;
   13ba6:	230f      	movs	r3, #15
   13ba8:	18fb      	adds	r3, r7, r3
   13baa:	781a      	ldrb	r2, [r3, #0]
   13bac:	230f      	movs	r3, #15
   13bae:	18fb      	adds	r3, r7, r3
   13bb0:	3a01      	subs	r2, #1
   13bb2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   13bb4:	230f      	movs	r3, #15
   13bb6:	18fb      	adds	r3, r7, r3
   13bb8:	781b      	ldrb	r3, [r3, #0]
   13bba:	2b00      	cmp	r3, #0
   13bbc:	d000      	beq.n	13bc0 <spi_read_reg+0x138>
   13bbe:	e778      	b.n	13ab2 <spi_read_reg+0x2a>
	}
		
	return result;
   13bc0:	230c      	movs	r3, #12
   13bc2:	18fb      	adds	r3, r7, r3
   13bc4:	781b      	ldrb	r3, [r3, #0]
   13bc6:	b25b      	sxtb	r3, r3
}
   13bc8:	0018      	movs	r0, r3
   13bca:	46bd      	mov	sp, r7
   13bcc:	b005      	add	sp, #20
   13bce:	bd90      	pop	{r4, r7, pc}
   13bd0:	00012cc5 	.word	0x00012cc5
   13bd4:	00000423 	.word	0x00000423
   13bd8:	0002921c 	.word	0x0002921c
   13bdc:	00028bc4 	.word	0x00028bc4
   13be0:	0000d14d 	.word	0x0000d14d
   13be4:	00028fec 	.word	0x00028fec
   13be8:	00028c04 	.word	0x00028c04
   13bec:	0000f605 	.word	0x0000f605
   13bf0:	00012749 	.word	0x00012749
   13bf4:	00012b89 	.word	0x00012b89
   13bf8:	00000435 	.word	0x00000435
   13bfc:	00029018 	.word	0x00029018

00013c00 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   13c00:	b590      	push	{r4, r7, lr}
   13c02:	b089      	sub	sp, #36	; 0x24
   13c04:	af02      	add	r7, sp, #8
   13c06:	60f8      	str	r0, [r7, #12]
   13c08:	60b9      	str	r1, [r7, #8]
   13c0a:	1dbb      	adds	r3, r7, #6
   13c0c:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   13c0e:	2316      	movs	r3, #22
   13c10:	18fb      	adds	r3, r7, r3
   13c12:	22c8      	movs	r2, #200	; 0xc8
   13c14:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   13c16:	2317      	movs	r3, #23
   13c18:	18fb      	adds	r3, r7, r3
   13c1a:	220a      	movs	r2, #10
   13c1c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   13c1e:	1dbb      	adds	r3, r7, #6
   13c20:	881c      	ldrh	r4, [r3, #0]
   13c22:	68ba      	ldr	r2, [r7, #8]
   13c24:	68f9      	ldr	r1, [r7, #12]
   13c26:	2316      	movs	r3, #22
   13c28:	18fb      	adds	r3, r7, r3
   13c2a:	7818      	ldrb	r0, [r3, #0]
   13c2c:	2300      	movs	r3, #0
   13c2e:	9300      	str	r3, [sp, #0]
   13c30:	0023      	movs	r3, r4
   13c32:	4c2e      	ldr	r4, [pc, #184]	; (13cec <nm_spi_read+0xec>)
   13c34:	47a0      	blx	r4
   13c36:	0002      	movs	r2, r0
   13c38:	2315      	movs	r3, #21
   13c3a:	18fb      	adds	r3, r7, r3
   13c3c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   13c3e:	2315      	movs	r3, #21
   13c40:	18fb      	adds	r3, r7, r3
   13c42:	781b      	ldrb	r3, [r3, #0]
   13c44:	b25b      	sxtb	r3, r3
   13c46:	2b01      	cmp	r3, #1
   13c48:	d010      	beq.n	13c6c <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   13c4a:	4a29      	ldr	r2, [pc, #164]	; (13cf0 <nm_spi_read+0xf0>)
   13c4c:	4929      	ldr	r1, [pc, #164]	; (13cf4 <nm_spi_read+0xf4>)
   13c4e:	4b2a      	ldr	r3, [pc, #168]	; (13cf8 <nm_spi_read+0xf8>)
   13c50:	0018      	movs	r0, r3
   13c52:	4b2a      	ldr	r3, [pc, #168]	; (13cfc <nm_spi_read+0xfc>)
   13c54:	4798      	blx	r3
   13c56:	68fa      	ldr	r2, [r7, #12]
   13c58:	4b29      	ldr	r3, [pc, #164]	; (13d00 <nm_spi_read+0x100>)
   13c5a:	0011      	movs	r1, r2
   13c5c:	0018      	movs	r0, r3
   13c5e:	4b27      	ldr	r3, [pc, #156]	; (13cfc <nm_spi_read+0xfc>)
   13c60:	4798      	blx	r3
   13c62:	4b28      	ldr	r3, [pc, #160]	; (13d04 <nm_spi_read+0x104>)
   13c64:	0018      	movs	r0, r3
   13c66:	4b25      	ldr	r3, [pc, #148]	; (13cfc <nm_spi_read+0xfc>)
   13c68:	4798      	blx	r3
		goto _FAIL_;
   13c6a:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   13c6c:	2315      	movs	r3, #21
   13c6e:	18fb      	adds	r3, r7, r3
   13c70:	781b      	ldrb	r3, [r3, #0]
   13c72:	b25b      	sxtb	r3, r3
   13c74:	2b01      	cmp	r3, #1
   13c76:	d030      	beq.n	13cda <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   13c78:	2001      	movs	r0, #1
   13c7a:	4b23      	ldr	r3, [pc, #140]	; (13d08 <nm_spi_read+0x108>)
   13c7c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   13c7e:	2300      	movs	r3, #0
   13c80:	9300      	str	r3, [sp, #0]
   13c82:	2300      	movs	r3, #0
   13c84:	2200      	movs	r2, #0
   13c86:	2100      	movs	r1, #0
   13c88:	20cf      	movs	r0, #207	; 0xcf
   13c8a:	4c20      	ldr	r4, [pc, #128]	; (13d0c <nm_spi_read+0x10c>)
   13c8c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   13c8e:	20cf      	movs	r0, #207	; 0xcf
   13c90:	4b1f      	ldr	r3, [pc, #124]	; (13d10 <nm_spi_read+0x110>)
   13c92:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   13c94:	4a1f      	ldr	r2, [pc, #124]	; (13d14 <nm_spi_read+0x114>)
   13c96:	4917      	ldr	r1, [pc, #92]	; (13cf4 <nm_spi_read+0xf4>)
   13c98:	4b17      	ldr	r3, [pc, #92]	; (13cf8 <nm_spi_read+0xf8>)
   13c9a:	0018      	movs	r0, r3
   13c9c:	4b17      	ldr	r3, [pc, #92]	; (13cfc <nm_spi_read+0xfc>)
   13c9e:	4798      	blx	r3
   13ca0:	2317      	movs	r3, #23
   13ca2:	18fb      	adds	r3, r7, r3
   13ca4:	7819      	ldrb	r1, [r3, #0]
   13ca6:	1dbb      	adds	r3, r7, #6
   13ca8:	881b      	ldrh	r3, [r3, #0]
   13caa:	68fa      	ldr	r2, [r7, #12]
   13cac:	481a      	ldr	r0, [pc, #104]	; (13d18 <nm_spi_read+0x118>)
   13cae:	4c13      	ldr	r4, [pc, #76]	; (13cfc <nm_spi_read+0xfc>)
   13cb0:	47a0      	blx	r4
   13cb2:	4b14      	ldr	r3, [pc, #80]	; (13d04 <nm_spi_read+0x104>)
   13cb4:	0018      	movs	r0, r3
   13cb6:	4b11      	ldr	r3, [pc, #68]	; (13cfc <nm_spi_read+0xfc>)
   13cb8:	4798      	blx	r3
		nm_bsp_sleep(1);
   13cba:	2001      	movs	r0, #1
   13cbc:	4b12      	ldr	r3, [pc, #72]	; (13d08 <nm_spi_read+0x108>)
   13cbe:	4798      	blx	r3
		retry--;
   13cc0:	2317      	movs	r3, #23
   13cc2:	18fb      	adds	r3, r7, r3
   13cc4:	781a      	ldrb	r2, [r3, #0]
   13cc6:	2317      	movs	r3, #23
   13cc8:	18fb      	adds	r3, r7, r3
   13cca:	3a01      	subs	r2, #1
   13ccc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   13cce:	2317      	movs	r3, #23
   13cd0:	18fb      	adds	r3, r7, r3
   13cd2:	781b      	ldrb	r3, [r3, #0]
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d000      	beq.n	13cda <nm_spi_read+0xda>
   13cd8:	e7a1      	b.n	13c1e <nm_spi_read+0x1e>
	}

	return result;
   13cda:	2315      	movs	r3, #21
   13cdc:	18fb      	adds	r3, r7, r3
   13cde:	781b      	ldrb	r3, [r3, #0]
   13ce0:	b25b      	sxtb	r3, r3
}
   13ce2:	0018      	movs	r0, r3
   13ce4:	46bd      	mov	sp, r7
   13ce6:	b007      	add	sp, #28
   13ce8:	bd90      	pop	{r4, r7, pc}
   13cea:	46c0      	nop			; (mov r8, r8)
   13cec:	00012cc5 	.word	0x00012cc5
   13cf0:	00000472 	.word	0x00000472
   13cf4:	0002922c 	.word	0x0002922c
   13cf8:	00028bc4 	.word	0x00028bc4
   13cfc:	0000d14d 	.word	0x0000d14d
   13d00:	00029030 	.word	0x00029030
   13d04:	00028c04 	.word	0x00028c04
   13d08:	0000f605 	.word	0x0000f605
   13d0c:	00012749 	.word	0x00012749
   13d10:	00012b89 	.word	0x00012b89
   13d14:	0000047d 	.word	0x0000047d
   13d18:	00028fd0 	.word	0x00028fd0

00013d1c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b082      	sub	sp, #8
   13d20:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   13d22:	4b0c      	ldr	r3, [pc, #48]	; (13d54 <spi_init_pkt_sz+0x38>)
   13d24:	0018      	movs	r0, r3
   13d26:	4b0c      	ldr	r3, [pc, #48]	; (13d58 <spi_init_pkt_sz+0x3c>)
   13d28:	4798      	blx	r3
   13d2a:	0003      	movs	r3, r0
   13d2c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   13d2e:	687b      	ldr	r3, [r7, #4]
   13d30:	2270      	movs	r2, #112	; 0x70
   13d32:	4393      	bics	r3, r2
   13d34:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   13d36:	687b      	ldr	r3, [r7, #4]
   13d38:	2250      	movs	r2, #80	; 0x50
   13d3a:	4313      	orrs	r3, r2
   13d3c:	607b      	str	r3, [r7, #4]
   13d3e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   13d40:	687b      	ldr	r3, [r7, #4]
   13d42:	4a04      	ldr	r2, [pc, #16]	; (13d54 <spi_init_pkt_sz+0x38>)
   13d44:	0019      	movs	r1, r3
   13d46:	0010      	movs	r0, r2
   13d48:	4b04      	ldr	r3, [pc, #16]	; (13d5c <spi_init_pkt_sz+0x40>)
   13d4a:	4798      	blx	r3
}
   13d4c:	46c0      	nop			; (mov r8, r8)
   13d4e:	46bd      	mov	sp, r7
   13d50:	b002      	add	sp, #8
   13d52:	bd80      	pop	{r7, pc}
   13d54:	0000e824 	.word	0x0000e824
   13d58:	00013ef5 	.word	0x00013ef5
   13d5c:	00013f69 	.word	0x00013f69

00013d60 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   13d60:	b590      	push	{r4, r7, lr}
   13d62:	b083      	sub	sp, #12
   13d64:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   13d66:	2300      	movs	r3, #0
   13d68:	9300      	str	r3, [sp, #0]
   13d6a:	2300      	movs	r3, #0
   13d6c:	2200      	movs	r2, #0
   13d6e:	2100      	movs	r1, #0
   13d70:	20cf      	movs	r0, #207	; 0xcf
   13d72:	4c05      	ldr	r4, [pc, #20]	; (13d88 <nm_spi_reset+0x28>)
   13d74:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   13d76:	20cf      	movs	r0, #207	; 0xcf
   13d78:	4b04      	ldr	r3, [pc, #16]	; (13d8c <nm_spi_reset+0x2c>)
   13d7a:	4798      	blx	r3
	return M2M_SUCCESS;
   13d7c:	2300      	movs	r3, #0
}
   13d7e:	0018      	movs	r0, r3
   13d80:	46bd      	mov	sp, r7
   13d82:	b001      	add	sp, #4
   13d84:	bd90      	pop	{r4, r7, pc}
   13d86:	46c0      	nop			; (mov r8, r8)
   13d88:	00012749 	.word	0x00012749
   13d8c:	00012b89 	.word	0x00012b89

00013d90 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   13d90:	b580      	push	{r7, lr}
   13d92:	b082      	sub	sp, #8
   13d94:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   13d96:	2300      	movs	r3, #0
   13d98:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   13d9a:	4b40      	ldr	r3, [pc, #256]	; (13e9c <nm_spi_init+0x10c>)
   13d9c:	2200      	movs	r2, #0
   13d9e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   13da0:	003b      	movs	r3, r7
   13da2:	4a3f      	ldr	r2, [pc, #252]	; (13ea0 <nm_spi_init+0x110>)
   13da4:	0019      	movs	r1, r3
   13da6:	0010      	movs	r0, r2
   13da8:	4b3e      	ldr	r3, [pc, #248]	; (13ea4 <nm_spi_init+0x114>)
   13daa:	4798      	blx	r3
   13dac:	1e03      	subs	r3, r0, #0
   13dae:	d129      	bne.n	13e04 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   13db0:	4b3a      	ldr	r3, [pc, #232]	; (13e9c <nm_spi_init+0x10c>)
   13db2:	2201      	movs	r2, #1
   13db4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   13db6:	2398      	movs	r3, #152	; 0x98
   13db8:	00da      	lsls	r2, r3, #3
   13dba:	493b      	ldr	r1, [pc, #236]	; (13ea8 <nm_spi_init+0x118>)
   13dbc:	4b3b      	ldr	r3, [pc, #236]	; (13eac <nm_spi_init+0x11c>)
   13dbe:	0018      	movs	r0, r3
   13dc0:	4b3b      	ldr	r3, [pc, #236]	; (13eb0 <nm_spi_init+0x120>)
   13dc2:	4798      	blx	r3
   13dc4:	4b3b      	ldr	r3, [pc, #236]	; (13eb4 <nm_spi_init+0x124>)
   13dc6:	0018      	movs	r0, r3
   13dc8:	4b39      	ldr	r3, [pc, #228]	; (13eb0 <nm_spi_init+0x120>)
   13dca:	4798      	blx	r3
   13dcc:	4b3a      	ldr	r3, [pc, #232]	; (13eb8 <nm_spi_init+0x128>)
   13dce:	0018      	movs	r0, r3
   13dd0:	4b37      	ldr	r3, [pc, #220]	; (13eb0 <nm_spi_init+0x120>)
   13dd2:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   13dd4:	003b      	movs	r3, r7
   13dd6:	4a32      	ldr	r2, [pc, #200]	; (13ea0 <nm_spi_init+0x110>)
   13dd8:	0019      	movs	r1, r3
   13dda:	0010      	movs	r0, r2
   13ddc:	4b31      	ldr	r3, [pc, #196]	; (13ea4 <nm_spi_init+0x114>)
   13dde:	4798      	blx	r3
   13de0:	1e03      	subs	r3, r0, #0
   13de2:	d10f      	bne.n	13e04 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   13de4:	4a35      	ldr	r2, [pc, #212]	; (13ebc <nm_spi_init+0x12c>)
   13de6:	4930      	ldr	r1, [pc, #192]	; (13ea8 <nm_spi_init+0x118>)
   13de8:	4b30      	ldr	r3, [pc, #192]	; (13eac <nm_spi_init+0x11c>)
   13dea:	0018      	movs	r0, r3
   13dec:	4b30      	ldr	r3, [pc, #192]	; (13eb0 <nm_spi_init+0x120>)
   13dee:	4798      	blx	r3
   13df0:	4b33      	ldr	r3, [pc, #204]	; (13ec0 <nm_spi_init+0x130>)
   13df2:	0018      	movs	r0, r3
   13df4:	4b2e      	ldr	r3, [pc, #184]	; (13eb0 <nm_spi_init+0x120>)
   13df6:	4798      	blx	r3
   13df8:	4b2f      	ldr	r3, [pc, #188]	; (13eb8 <nm_spi_init+0x128>)
   13dfa:	0018      	movs	r0, r3
   13dfc:	4b2c      	ldr	r3, [pc, #176]	; (13eb0 <nm_spi_init+0x120>)
   13dfe:	4798      	blx	r3
			return 0;
   13e00:	2300      	movs	r3, #0
   13e02:	e047      	b.n	13e94 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   13e04:	4b25      	ldr	r3, [pc, #148]	; (13e9c <nm_spi_init+0x10c>)
   13e06:	781b      	ldrb	r3, [r3, #0]
   13e08:	2b00      	cmp	r3, #0
   13e0a:	d126      	bne.n	13e5a <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   13e0c:	683b      	ldr	r3, [r7, #0]
   13e0e:	220c      	movs	r2, #12
   13e10:	4393      	bics	r3, r2
   13e12:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   13e14:	683b      	ldr	r3, [r7, #0]
   13e16:	2270      	movs	r2, #112	; 0x70
   13e18:	4393      	bics	r3, r2
   13e1a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   13e1c:	683b      	ldr	r3, [r7, #0]
   13e1e:	2250      	movs	r2, #80	; 0x50
   13e20:	4313      	orrs	r3, r2
   13e22:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   13e24:	683b      	ldr	r3, [r7, #0]
   13e26:	4a1e      	ldr	r2, [pc, #120]	; (13ea0 <nm_spi_init+0x110>)
   13e28:	0019      	movs	r1, r3
   13e2a:	0010      	movs	r0, r2
   13e2c:	4b25      	ldr	r3, [pc, #148]	; (13ec4 <nm_spi_init+0x134>)
   13e2e:	4798      	blx	r3
   13e30:	1e03      	subs	r3, r0, #0
   13e32:	d10f      	bne.n	13e54 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   13e34:	4a24      	ldr	r2, [pc, #144]	; (13ec8 <nm_spi_init+0x138>)
   13e36:	491c      	ldr	r1, [pc, #112]	; (13ea8 <nm_spi_init+0x118>)
   13e38:	4b1c      	ldr	r3, [pc, #112]	; (13eac <nm_spi_init+0x11c>)
   13e3a:	0018      	movs	r0, r3
   13e3c:	4b1c      	ldr	r3, [pc, #112]	; (13eb0 <nm_spi_init+0x120>)
   13e3e:	4798      	blx	r3
   13e40:	4b22      	ldr	r3, [pc, #136]	; (13ecc <nm_spi_init+0x13c>)
   13e42:	0018      	movs	r0, r3
   13e44:	4b1a      	ldr	r3, [pc, #104]	; (13eb0 <nm_spi_init+0x120>)
   13e46:	4798      	blx	r3
   13e48:	4b1b      	ldr	r3, [pc, #108]	; (13eb8 <nm_spi_init+0x128>)
   13e4a:	0018      	movs	r0, r3
   13e4c:	4b18      	ldr	r3, [pc, #96]	; (13eb0 <nm_spi_init+0x120>)
   13e4e:	4798      	blx	r3
			return 0;
   13e50:	2300      	movs	r3, #0
   13e52:	e01f      	b.n	13e94 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   13e54:	4b11      	ldr	r3, [pc, #68]	; (13e9c <nm_spi_init+0x10c>)
   13e56:	2201      	movs	r2, #1
   13e58:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   13e5a:	1d3a      	adds	r2, r7, #4
   13e5c:	2380      	movs	r3, #128	; 0x80
   13e5e:	015b      	lsls	r3, r3, #5
   13e60:	0011      	movs	r1, r2
   13e62:	0018      	movs	r0, r3
   13e64:	4b0f      	ldr	r3, [pc, #60]	; (13ea4 <nm_spi_init+0x114>)
   13e66:	4798      	blx	r3
   13e68:	1e03      	subs	r3, r0, #0
   13e6a:	d110      	bne.n	13e8e <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   13e6c:	4a18      	ldr	r2, [pc, #96]	; (13ed0 <nm_spi_init+0x140>)
   13e6e:	490e      	ldr	r1, [pc, #56]	; (13ea8 <nm_spi_init+0x118>)
   13e70:	4b0e      	ldr	r3, [pc, #56]	; (13eac <nm_spi_init+0x11c>)
   13e72:	0018      	movs	r0, r3
   13e74:	4b0e      	ldr	r3, [pc, #56]	; (13eb0 <nm_spi_init+0x120>)
   13e76:	4798      	blx	r3
   13e78:	4b16      	ldr	r3, [pc, #88]	; (13ed4 <nm_spi_init+0x144>)
   13e7a:	0018      	movs	r0, r3
   13e7c:	4b0c      	ldr	r3, [pc, #48]	; (13eb0 <nm_spi_init+0x120>)
   13e7e:	4798      	blx	r3
   13e80:	4b0d      	ldr	r3, [pc, #52]	; (13eb8 <nm_spi_init+0x128>)
   13e82:	0018      	movs	r0, r3
   13e84:	4b0a      	ldr	r3, [pc, #40]	; (13eb0 <nm_spi_init+0x120>)
   13e86:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   13e88:	2306      	movs	r3, #6
   13e8a:	425b      	negs	r3, r3
   13e8c:	e002      	b.n	13e94 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   13e8e:	4b12      	ldr	r3, [pc, #72]	; (13ed8 <nm_spi_init+0x148>)
   13e90:	4798      	blx	r3


	return M2M_SUCCESS;
   13e92:	2300      	movs	r3, #0
}
   13e94:	0018      	movs	r0, r3
   13e96:	46bd      	mov	sp, r7
   13e98:	b002      	add	sp, #8
   13e9a:	bd80      	pop	{r7, pc}
   13e9c:	20003ee8 	.word	0x20003ee8
   13ea0:	0000e824 	.word	0x0000e824
   13ea4:	00013a89 	.word	0x00013a89
   13ea8:	00029238 	.word	0x00029238
   13eac:	00028bc4 	.word	0x00028bc4
   13eb0:	0000d14d 	.word	0x0000d14d
   13eb4:	00029060 	.word	0x00029060
   13eb8:	00028c04 	.word	0x00028c04
   13ebc:	000004c3 	.word	0x000004c3
   13ec0:	000290b0 	.word	0x000290b0
   13ec4:	00013791 	.word	0x00013791
   13ec8:	000004cd 	.word	0x000004cd
   13ecc:	000290e0 	.word	0x000290e0
   13ed0:	000004d7 	.word	0x000004d7
   13ed4:	00029114 	.word	0x00029114
   13ed8:	00013d1d 	.word	0x00013d1d

00013edc <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   13edc:	b580      	push	{r7, lr}
   13ede:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   13ee0:	4b03      	ldr	r3, [pc, #12]	; (13ef0 <nm_spi_deinit+0x14>)
   13ee2:	2200      	movs	r2, #0
   13ee4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   13ee6:	2300      	movs	r3, #0
}
   13ee8:	0018      	movs	r0, r3
   13eea:	46bd      	mov	sp, r7
   13eec:	bd80      	pop	{r7, pc}
   13eee:	46c0      	nop			; (mov r8, r8)
   13ef0:	20003ee8 	.word	0x20003ee8

00013ef4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   13ef4:	b580      	push	{r7, lr}
   13ef6:	b084      	sub	sp, #16
   13ef8:	af00      	add	r7, sp, #0
   13efa:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   13efc:	230c      	movs	r3, #12
   13efe:	18fa      	adds	r2, r7, r3
   13f00:	687b      	ldr	r3, [r7, #4]
   13f02:	0011      	movs	r1, r2
   13f04:	0018      	movs	r0, r3
   13f06:	4b03      	ldr	r3, [pc, #12]	; (13f14 <nm_spi_read_reg+0x20>)
   13f08:	4798      	blx	r3

	return u32Val;
   13f0a:	68fb      	ldr	r3, [r7, #12]
}
   13f0c:	0018      	movs	r0, r3
   13f0e:	46bd      	mov	sp, r7
   13f10:	b004      	add	sp, #16
   13f12:	bd80      	pop	{r7, pc}
   13f14:	00013a89 	.word	0x00013a89

00013f18 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   13f18:	b590      	push	{r4, r7, lr}
   13f1a:	b085      	sub	sp, #20
   13f1c:	af00      	add	r7, sp, #0
   13f1e:	6078      	str	r0, [r7, #4]
   13f20:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   13f22:	230f      	movs	r3, #15
   13f24:	18fc      	adds	r4, r7, r3
   13f26:	683a      	ldr	r2, [r7, #0]
   13f28:	687b      	ldr	r3, [r7, #4]
   13f2a:	0011      	movs	r1, r2
   13f2c:	0018      	movs	r0, r3
   13f2e:	4b0d      	ldr	r3, [pc, #52]	; (13f64 <nm_spi_read_reg_with_ret+0x4c>)
   13f30:	4798      	blx	r3
   13f32:	0003      	movs	r3, r0
   13f34:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   13f36:	230f      	movs	r3, #15
   13f38:	18fb      	adds	r3, r7, r3
   13f3a:	781b      	ldrb	r3, [r3, #0]
   13f3c:	b25b      	sxtb	r3, r3
   13f3e:	2b01      	cmp	r3, #1
   13f40:	d104      	bne.n	13f4c <nm_spi_read_reg_with_ret+0x34>
   13f42:	230f      	movs	r3, #15
   13f44:	18fb      	adds	r3, r7, r3
   13f46:	2200      	movs	r2, #0
   13f48:	701a      	strb	r2, [r3, #0]
   13f4a:	e003      	b.n	13f54 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   13f4c:	230f      	movs	r3, #15
   13f4e:	18fb      	adds	r3, r7, r3
   13f50:	22fa      	movs	r2, #250	; 0xfa
   13f52:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   13f54:	230f      	movs	r3, #15
   13f56:	18fb      	adds	r3, r7, r3
   13f58:	781b      	ldrb	r3, [r3, #0]
   13f5a:	b25b      	sxtb	r3, r3
}
   13f5c:	0018      	movs	r0, r3
   13f5e:	46bd      	mov	sp, r7
   13f60:	b005      	add	sp, #20
   13f62:	bd90      	pop	{r4, r7, pc}
   13f64:	00013a89 	.word	0x00013a89

00013f68 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   13f68:	b590      	push	{r4, r7, lr}
   13f6a:	b085      	sub	sp, #20
   13f6c:	af00      	add	r7, sp, #0
   13f6e:	6078      	str	r0, [r7, #4]
   13f70:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   13f72:	230f      	movs	r3, #15
   13f74:	18fc      	adds	r4, r7, r3
   13f76:	683a      	ldr	r2, [r7, #0]
   13f78:	687b      	ldr	r3, [r7, #4]
   13f7a:	0011      	movs	r1, r2
   13f7c:	0018      	movs	r0, r3
   13f7e:	4b0d      	ldr	r3, [pc, #52]	; (13fb4 <nm_spi_write_reg+0x4c>)
   13f80:	4798      	blx	r3
   13f82:	0003      	movs	r3, r0
   13f84:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   13f86:	230f      	movs	r3, #15
   13f88:	18fb      	adds	r3, r7, r3
   13f8a:	781b      	ldrb	r3, [r3, #0]
   13f8c:	b25b      	sxtb	r3, r3
   13f8e:	2b01      	cmp	r3, #1
   13f90:	d104      	bne.n	13f9c <nm_spi_write_reg+0x34>
   13f92:	230f      	movs	r3, #15
   13f94:	18fb      	adds	r3, r7, r3
   13f96:	2200      	movs	r2, #0
   13f98:	701a      	strb	r2, [r3, #0]
   13f9a:	e003      	b.n	13fa4 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   13f9c:	230f      	movs	r3, #15
   13f9e:	18fb      	adds	r3, r7, r3
   13fa0:	22fa      	movs	r2, #250	; 0xfa
   13fa2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   13fa4:	230f      	movs	r3, #15
   13fa6:	18fb      	adds	r3, r7, r3
   13fa8:	781b      	ldrb	r3, [r3, #0]
   13faa:	b25b      	sxtb	r3, r3
}
   13fac:	0018      	movs	r0, r3
   13fae:	46bd      	mov	sp, r7
   13fb0:	b005      	add	sp, #20
   13fb2:	bd90      	pop	{r4, r7, pc}
   13fb4:	00013791 	.word	0x00013791

00013fb8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   13fb8:	b590      	push	{r4, r7, lr}
   13fba:	b087      	sub	sp, #28
   13fbc:	af00      	add	r7, sp, #0
   13fbe:	60f8      	str	r0, [r7, #12]
   13fc0:	60b9      	str	r1, [r7, #8]
   13fc2:	1dbb      	adds	r3, r7, #6
   13fc4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   13fc6:	2317      	movs	r3, #23
   13fc8:	18fc      	adds	r4, r7, r3
   13fca:	1dbb      	adds	r3, r7, #6
   13fcc:	881a      	ldrh	r2, [r3, #0]
   13fce:	68b9      	ldr	r1, [r7, #8]
   13fd0:	68fb      	ldr	r3, [r7, #12]
   13fd2:	0018      	movs	r0, r3
   13fd4:	4b0d      	ldr	r3, [pc, #52]	; (1400c <nm_spi_read_block+0x54>)
   13fd6:	4798      	blx	r3
   13fd8:	0003      	movs	r3, r0
   13fda:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   13fdc:	2317      	movs	r3, #23
   13fde:	18fb      	adds	r3, r7, r3
   13fe0:	781b      	ldrb	r3, [r3, #0]
   13fe2:	b25b      	sxtb	r3, r3
   13fe4:	2b01      	cmp	r3, #1
   13fe6:	d104      	bne.n	13ff2 <nm_spi_read_block+0x3a>
   13fe8:	2317      	movs	r3, #23
   13fea:	18fb      	adds	r3, r7, r3
   13fec:	2200      	movs	r2, #0
   13fee:	701a      	strb	r2, [r3, #0]
   13ff0:	e003      	b.n	13ffa <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   13ff2:	2317      	movs	r3, #23
   13ff4:	18fb      	adds	r3, r7, r3
   13ff6:	22fa      	movs	r2, #250	; 0xfa
   13ff8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   13ffa:	2317      	movs	r3, #23
   13ffc:	18fb      	adds	r3, r7, r3
   13ffe:	781b      	ldrb	r3, [r3, #0]
   14000:	b25b      	sxtb	r3, r3
}
   14002:	0018      	movs	r0, r3
   14004:	46bd      	mov	sp, r7
   14006:	b007      	add	sp, #28
   14008:	bd90      	pop	{r4, r7, pc}
   1400a:	46c0      	nop			; (mov r8, r8)
   1400c:	00013c01 	.word	0x00013c01

00014010 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   14010:	b590      	push	{r4, r7, lr}
   14012:	b087      	sub	sp, #28
   14014:	af00      	add	r7, sp, #0
   14016:	60f8      	str	r0, [r7, #12]
   14018:	60b9      	str	r1, [r7, #8]
   1401a:	1dbb      	adds	r3, r7, #6
   1401c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   1401e:	2317      	movs	r3, #23
   14020:	18fc      	adds	r4, r7, r3
   14022:	1dbb      	adds	r3, r7, #6
   14024:	881a      	ldrh	r2, [r3, #0]
   14026:	68b9      	ldr	r1, [r7, #8]
   14028:	68fb      	ldr	r3, [r7, #12]
   1402a:	0018      	movs	r0, r3
   1402c:	4b0d      	ldr	r3, [pc, #52]	; (14064 <nm_spi_write_block+0x54>)
   1402e:	4798      	blx	r3
   14030:	0003      	movs	r3, r0
   14032:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   14034:	2317      	movs	r3, #23
   14036:	18fb      	adds	r3, r7, r3
   14038:	781b      	ldrb	r3, [r3, #0]
   1403a:	b25b      	sxtb	r3, r3
   1403c:	2b01      	cmp	r3, #1
   1403e:	d104      	bne.n	1404a <nm_spi_write_block+0x3a>
   14040:	2317      	movs	r3, #23
   14042:	18fb      	adds	r3, r7, r3
   14044:	2200      	movs	r2, #0
   14046:	701a      	strb	r2, [r3, #0]
   14048:	e003      	b.n	14052 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   1404a:	2317      	movs	r3, #23
   1404c:	18fb      	adds	r3, r7, r3
   1404e:	22fa      	movs	r2, #250	; 0xfa
   14050:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   14052:	2317      	movs	r3, #23
   14054:	18fb      	adds	r3, r7, r3
   14056:	781b      	ldrb	r3, [r3, #0]
   14058:	b25b      	sxtb	r3, r3
}
   1405a:	0018      	movs	r0, r3
   1405c:	46bd      	mov	sp, r7
   1405e:	b007      	add	sp, #28
   14060:	bd90      	pop	{r4, r7, pc}
   14062:	46c0      	nop			; (mov r8, r8)
   14064:	000138dd 	.word	0x000138dd

00014068 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   14068:	b590      	push	{r4, r7, lr}
   1406a:	b089      	sub	sp, #36	; 0x24
   1406c:	af00      	add	r7, sp, #0
   1406e:	60b9      	str	r1, [r7, #8]
   14070:	0011      	movs	r1, r2
   14072:	607b      	str	r3, [r7, #4]
   14074:	230f      	movs	r3, #15
   14076:	18fb      	adds	r3, r7, r3
   14078:	1c02      	adds	r2, r0, #0
   1407a:	701a      	strb	r2, [r3, #0]
   1407c:	230e      	movs	r3, #14
   1407e:	18fb      	adds	r3, r7, r3
   14080:	1c0a      	adds	r2, r1, #0
   14082:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   14084:	2330      	movs	r3, #48	; 0x30
   14086:	18fb      	adds	r3, r7, r3
   14088:	881b      	ldrh	r3, [r3, #0]
   1408a:	2b00      	cmp	r3, #0
   1408c:	d100      	bne.n	14090 <Socket_ReadSocketData+0x28>
   1408e:	e0d7      	b.n	14240 <Socket_ReadSocketData+0x1d8>
   14090:	230f      	movs	r3, #15
   14092:	18fb      	adds	r3, r7, r3
   14094:	2200      	movs	r2, #0
   14096:	569a      	ldrsb	r2, [r3, r2]
   14098:	4b6b      	ldr	r3, [pc, #428]	; (14248 <Socket_ReadSocketData+0x1e0>)
   1409a:	0112      	lsls	r2, r2, #4
   1409c:	58d3      	ldr	r3, [r2, r3]
   1409e:	2b00      	cmp	r3, #0
   140a0:	d100      	bne.n	140a4 <Socket_ReadSocketData+0x3c>
   140a2:	e0cd      	b.n	14240 <Socket_ReadSocketData+0x1d8>
   140a4:	230f      	movs	r3, #15
   140a6:	18fb      	adds	r3, r7, r3
   140a8:	781b      	ldrb	r3, [r3, #0]
   140aa:	b25b      	sxtb	r3, r3
   140ac:	4a66      	ldr	r2, [pc, #408]	; (14248 <Socket_ReadSocketData+0x1e0>)
   140ae:	011b      	lsls	r3, r3, #4
   140b0:	18d3      	adds	r3, r2, r3
   140b2:	3304      	adds	r3, #4
   140b4:	881b      	ldrh	r3, [r3, #0]
   140b6:	b29b      	uxth	r3, r3
   140b8:	2b00      	cmp	r3, #0
   140ba:	d100      	bne.n	140be <Socket_ReadSocketData+0x56>
   140bc:	e0c0      	b.n	14240 <Socket_ReadSocketData+0x1d8>
   140be:	230f      	movs	r3, #15
   140c0:	18fb      	adds	r3, r7, r3
   140c2:	781b      	ldrb	r3, [r3, #0]
   140c4:	b25b      	sxtb	r3, r3
   140c6:	4a60      	ldr	r2, [pc, #384]	; (14248 <Socket_ReadSocketData+0x1e0>)
   140c8:	011b      	lsls	r3, r3, #4
   140ca:	18d3      	adds	r3, r2, r3
   140cc:	330a      	adds	r3, #10
   140ce:	781b      	ldrb	r3, [r3, #0]
   140d0:	b2db      	uxtb	r3, r3
   140d2:	2b01      	cmp	r3, #1
   140d4:	d000      	beq.n	140d8 <Socket_ReadSocketData+0x70>
   140d6:	e0b3      	b.n	14240 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   140d8:	687b      	ldr	r3, [r7, #4]
   140da:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   140dc:	68bb      	ldr	r3, [r7, #8]
   140de:	2230      	movs	r2, #48	; 0x30
   140e0:	18ba      	adds	r2, r7, r2
   140e2:	8812      	ldrh	r2, [r2, #0]
   140e4:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   140e6:	2319      	movs	r3, #25
   140e8:	18fb      	adds	r3, r7, r3
   140ea:	2201      	movs	r2, #1
   140ec:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   140ee:	231a      	movs	r3, #26
   140f0:	18fb      	adds	r3, r7, r3
   140f2:	2230      	movs	r2, #48	; 0x30
   140f4:	18ba      	adds	r2, r7, r2
   140f6:	8812      	ldrh	r2, [r2, #0]
   140f8:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   140fa:	230f      	movs	r3, #15
   140fc:	18fb      	adds	r3, r7, r3
   140fe:	781b      	ldrb	r3, [r3, #0]
   14100:	b25b      	sxtb	r3, r3
   14102:	4a51      	ldr	r2, [pc, #324]	; (14248 <Socket_ReadSocketData+0x1e0>)
   14104:	011b      	lsls	r3, r3, #4
   14106:	18d3      	adds	r3, r2, r3
   14108:	3304      	adds	r3, #4
   1410a:	881b      	ldrh	r3, [r3, #0]
   1410c:	b29b      	uxth	r3, r3
   1410e:	221a      	movs	r2, #26
   14110:	18ba      	adds	r2, r7, r2
   14112:	8812      	ldrh	r2, [r2, #0]
   14114:	1ad3      	subs	r3, r2, r3
   14116:	b29a      	uxth	r2, r3
   14118:	2316      	movs	r3, #22
   1411a:	18fb      	adds	r3, r7, r3
   1411c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   1411e:	2316      	movs	r3, #22
   14120:	18fb      	adds	r3, r7, r3
   14122:	2200      	movs	r2, #0
   14124:	5e9b      	ldrsh	r3, [r3, r2]
   14126:	2b00      	cmp	r3, #0
   14128:	dd0f      	ble.n	1414a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   1412a:	2319      	movs	r3, #25
   1412c:	18fb      	adds	r3, r7, r3
   1412e:	2200      	movs	r2, #0
   14130:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   14132:	230f      	movs	r3, #15
   14134:	18fb      	adds	r3, r7, r3
   14136:	2200      	movs	r2, #0
   14138:	569a      	ldrsb	r2, [r3, r2]
   1413a:	231a      	movs	r3, #26
   1413c:	18fb      	adds	r3, r7, r3
   1413e:	4942      	ldr	r1, [pc, #264]	; (14248 <Socket_ReadSocketData+0x1e0>)
   14140:	0112      	lsls	r2, r2, #4
   14142:	188a      	adds	r2, r1, r2
   14144:	3204      	adds	r2, #4
   14146:	8812      	ldrh	r2, [r2, #0]
   14148:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   1414a:	230f      	movs	r3, #15
   1414c:	18fb      	adds	r3, r7, r3
   1414e:	2200      	movs	r2, #0
   14150:	569a      	ldrsb	r2, [r3, r2]
   14152:	4b3d      	ldr	r3, [pc, #244]	; (14248 <Socket_ReadSocketData+0x1e0>)
   14154:	0112      	lsls	r2, r2, #4
   14156:	58d1      	ldr	r1, [r2, r3]
   14158:	2319      	movs	r3, #25
   1415a:	18fb      	adds	r3, r7, r3
   1415c:	781c      	ldrb	r4, [r3, #0]
   1415e:	231a      	movs	r3, #26
   14160:	18fb      	adds	r3, r7, r3
   14162:	881a      	ldrh	r2, [r3, #0]
   14164:	69f8      	ldr	r0, [r7, #28]
   14166:	0023      	movs	r3, r4
   14168:	4c38      	ldr	r4, [pc, #224]	; (1424c <Socket_ReadSocketData+0x1e4>)
   1416a:	47a0      	blx	r4
   1416c:	1e03      	subs	r3, r0, #0
   1416e:	d14f      	bne.n	14210 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   14170:	230f      	movs	r3, #15
   14172:	18fb      	adds	r3, r7, r3
   14174:	2200      	movs	r2, #0
   14176:	569a      	ldrsb	r2, [r3, r2]
   14178:	4b33      	ldr	r3, [pc, #204]	; (14248 <Socket_ReadSocketData+0x1e0>)
   1417a:	0112      	lsls	r2, r2, #4
   1417c:	58d2      	ldr	r2, [r2, r3]
   1417e:	68bb      	ldr	r3, [r7, #8]
   14180:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   14182:	231a      	movs	r3, #26
   14184:	18fb      	adds	r3, r7, r3
   14186:	2200      	movs	r2, #0
   14188:	5e9a      	ldrsh	r2, [r3, r2]
   1418a:	68bb      	ldr	r3, [r7, #8]
   1418c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   1418e:	68bb      	ldr	r3, [r7, #8]
   14190:	88da      	ldrh	r2, [r3, #6]
   14192:	231a      	movs	r3, #26
   14194:	18fb      	adds	r3, r7, r3
   14196:	881b      	ldrh	r3, [r3, #0]
   14198:	1ad3      	subs	r3, r2, r3
   1419a:	b29a      	uxth	r2, r3
   1419c:	68bb      	ldr	r3, [r7, #8]
   1419e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   141a0:	4b2b      	ldr	r3, [pc, #172]	; (14250 <Socket_ReadSocketData+0x1e8>)
   141a2:	681b      	ldr	r3, [r3, #0]
   141a4:	2b00      	cmp	r3, #0
   141a6:	d00b      	beq.n	141c0 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   141a8:	4b29      	ldr	r3, [pc, #164]	; (14250 <Socket_ReadSocketData+0x1e8>)
   141aa:	681b      	ldr	r3, [r3, #0]
   141ac:	68bc      	ldr	r4, [r7, #8]
   141ae:	220e      	movs	r2, #14
   141b0:	18ba      	adds	r2, r7, r2
   141b2:	7811      	ldrb	r1, [r2, #0]
   141b4:	220f      	movs	r2, #15
   141b6:	18ba      	adds	r2, r7, r2
   141b8:	2000      	movs	r0, #0
   141ba:	5610      	ldrsb	r0, [r2, r0]
   141bc:	0022      	movs	r2, r4
   141be:	4798      	blx	r3

				u16ReadCount -= u16Read;
   141c0:	2330      	movs	r3, #48	; 0x30
   141c2:	18f9      	adds	r1, r7, r3
   141c4:	2330      	movs	r3, #48	; 0x30
   141c6:	18fa      	adds	r2, r7, r3
   141c8:	231a      	movs	r3, #26
   141ca:	18fb      	adds	r3, r7, r3
   141cc:	8812      	ldrh	r2, [r2, #0]
   141ce:	881b      	ldrh	r3, [r3, #0]
   141d0:	1ad3      	subs	r3, r2, r3
   141d2:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   141d4:	231a      	movs	r3, #26
   141d6:	18fb      	adds	r3, r7, r3
   141d8:	881b      	ldrh	r3, [r3, #0]
   141da:	69fa      	ldr	r2, [r7, #28]
   141dc:	18d3      	adds	r3, r2, r3
   141de:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   141e0:	230f      	movs	r3, #15
   141e2:	18fb      	adds	r3, r7, r3
   141e4:	781b      	ldrb	r3, [r3, #0]
   141e6:	b25b      	sxtb	r3, r3
   141e8:	4a17      	ldr	r2, [pc, #92]	; (14248 <Socket_ReadSocketData+0x1e0>)
   141ea:	011b      	lsls	r3, r3, #4
   141ec:	18d3      	adds	r3, r2, r3
   141ee:	330a      	adds	r3, #10
   141f0:	781b      	ldrb	r3, [r3, #0]
   141f2:	b2db      	uxtb	r3, r3
   141f4:	2b00      	cmp	r3, #0
   141f6:	d11c      	bne.n	14232 <Socket_ReadSocketData+0x1ca>
   141f8:	2330      	movs	r3, #48	; 0x30
   141fa:	18fb      	adds	r3, r7, r3
   141fc:	881b      	ldrh	r3, [r3, #0]
   141fe:	2b00      	cmp	r3, #0
   14200:	d017      	beq.n	14232 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   14202:	2301      	movs	r3, #1
   14204:	2200      	movs	r2, #0
   14206:	2100      	movs	r1, #0
   14208:	2000      	movs	r0, #0
   1420a:	4c10      	ldr	r4, [pc, #64]	; (1424c <Socket_ReadSocketData+0x1e4>)
   1420c:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   1420e:	e017      	b.n	14240 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   14210:	4b10      	ldr	r3, [pc, #64]	; (14254 <Socket_ReadSocketData+0x1ec>)
   14212:	0018      	movs	r0, r3
   14214:	4b10      	ldr	r3, [pc, #64]	; (14258 <Socket_ReadSocketData+0x1f0>)
   14216:	4798      	blx	r3
   14218:	2330      	movs	r3, #48	; 0x30
   1421a:	18fb      	adds	r3, r7, r3
   1421c:	881a      	ldrh	r2, [r3, #0]
   1421e:	4b0f      	ldr	r3, [pc, #60]	; (1425c <Socket_ReadSocketData+0x1f4>)
   14220:	0011      	movs	r1, r2
   14222:	0018      	movs	r0, r3
   14224:	4b0c      	ldr	r3, [pc, #48]	; (14258 <Socket_ReadSocketData+0x1f0>)
   14226:	4798      	blx	r3
   14228:	4b0d      	ldr	r3, [pc, #52]	; (14260 <Socket_ReadSocketData+0x1f8>)
   1422a:	0018      	movs	r0, r3
   1422c:	4b0a      	ldr	r3, [pc, #40]	; (14258 <Socket_ReadSocketData+0x1f0>)
   1422e:	4798      	blx	r3
				break;
   14230:	e006      	b.n	14240 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   14232:	2330      	movs	r3, #48	; 0x30
   14234:	18fb      	adds	r3, r7, r3
   14236:	881b      	ldrh	r3, [r3, #0]
   14238:	2b00      	cmp	r3, #0
   1423a:	d000      	beq.n	1423e <Socket_ReadSocketData+0x1d6>
   1423c:	e753      	b.n	140e6 <Socket_ReadSocketData+0x7e>
	}
}
   1423e:	e7ff      	b.n	14240 <Socket_ReadSocketData+0x1d8>
   14240:	46c0      	nop			; (mov r8, r8)
   14242:	46bd      	mov	sp, r7
   14244:	b009      	add	sp, #36	; 0x24
   14246:	bd90      	pop	{r4, r7, pc}
   14248:	20005784 	.word	0x20005784
   1424c:	00010a61 	.word	0x00010a61
   14250:	20005834 	.word	0x20005834
   14254:	00029244 	.word	0x00029244
   14258:	0000d14d 	.word	0x0000d14d
   1425c:	00029250 	.word	0x00029250
   14260:	00029264 	.word	0x00029264

00014264 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   14264:	b590      	push	{r4, r7, lr}
   14266:	b0bb      	sub	sp, #236	; 0xec
   14268:	af02      	add	r7, sp, #8
   1426a:	603a      	str	r2, [r7, #0]
   1426c:	1dfb      	adds	r3, r7, #7
   1426e:	1c02      	adds	r2, r0, #0
   14270:	701a      	strb	r2, [r3, #0]
   14272:	1d3b      	adds	r3, r7, #4
   14274:	1c0a      	adds	r2, r1, #0
   14276:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   14278:	1dfb      	adds	r3, r7, #7
   1427a:	781b      	ldrb	r3, [r3, #0]
   1427c:	2b41      	cmp	r3, #65	; 0x41
   1427e:	d003      	beq.n	14288 <m2m_ip_cb+0x24>
   14280:	1dfb      	adds	r3, r7, #7
   14282:	781b      	ldrb	r3, [r3, #0]
   14284:	2b54      	cmp	r3, #84	; 0x54
   14286:	d120      	bne.n	142ca <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   14288:	23cc      	movs	r3, #204	; 0xcc
   1428a:	18f9      	adds	r1, r7, r3
   1428c:	6838      	ldr	r0, [r7, #0]
   1428e:	2300      	movs	r3, #0
   14290:	2204      	movs	r2, #4
   14292:	4c98      	ldr	r4, [pc, #608]	; (144f4 <m2m_ip_cb+0x290>)
   14294:	47a0      	blx	r4
   14296:	1e03      	subs	r3, r0, #0
   14298:	d000      	beq.n	1429c <m2m_ip_cb+0x38>
   1429a:	e275      	b.n	14788 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   1429c:	23cc      	movs	r3, #204	; 0xcc
   1429e:	18fb      	adds	r3, r7, r3
   142a0:	2201      	movs	r2, #1
   142a2:	569a      	ldrsb	r2, [r3, r2]
   142a4:	23c8      	movs	r3, #200	; 0xc8
   142a6:	18fb      	adds	r3, r7, r3
   142a8:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   142aa:	4b93      	ldr	r3, [pc, #588]	; (144f8 <m2m_ip_cb+0x294>)
   142ac:	681b      	ldr	r3, [r3, #0]
   142ae:	2b00      	cmp	r3, #0
   142b0:	d100      	bne.n	142b4 <m2m_ip_cb+0x50>
   142b2:	e269      	b.n	14788 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   142b4:	4b90      	ldr	r3, [pc, #576]	; (144f8 <m2m_ip_cb+0x294>)
   142b6:	681b      	ldr	r3, [r3, #0]
   142b8:	22cc      	movs	r2, #204	; 0xcc
   142ba:	18ba      	adds	r2, r7, r2
   142bc:	2000      	movs	r0, #0
   142be:	5610      	ldrsb	r0, [r2, r0]
   142c0:	22c8      	movs	r2, #200	; 0xc8
   142c2:	18ba      	adds	r2, r7, r2
   142c4:	2101      	movs	r1, #1
   142c6:	4798      	blx	r3
	{
   142c8:	e25e      	b.n	14788 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   142ca:	1dfb      	adds	r3, r7, #7
   142cc:	781b      	ldrb	r3, [r3, #0]
   142ce:	2b42      	cmp	r3, #66	; 0x42
   142d0:	d120      	bne.n	14314 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   142d2:	23c4      	movs	r3, #196	; 0xc4
   142d4:	18f9      	adds	r1, r7, r3
   142d6:	6838      	ldr	r0, [r7, #0]
   142d8:	2300      	movs	r3, #0
   142da:	2204      	movs	r2, #4
   142dc:	4c85      	ldr	r4, [pc, #532]	; (144f4 <m2m_ip_cb+0x290>)
   142de:	47a0      	blx	r4
   142e0:	1e03      	subs	r3, r0, #0
   142e2:	d000      	beq.n	142e6 <m2m_ip_cb+0x82>
   142e4:	e257      	b.n	14796 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   142e6:	23c4      	movs	r3, #196	; 0xc4
   142e8:	18fb      	adds	r3, r7, r3
   142ea:	2201      	movs	r2, #1
   142ec:	569a      	ldrsb	r2, [r3, r2]
   142ee:	23c0      	movs	r3, #192	; 0xc0
   142f0:	18fb      	adds	r3, r7, r3
   142f2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   142f4:	4b80      	ldr	r3, [pc, #512]	; (144f8 <m2m_ip_cb+0x294>)
   142f6:	681b      	ldr	r3, [r3, #0]
   142f8:	2b00      	cmp	r3, #0
   142fa:	d100      	bne.n	142fe <m2m_ip_cb+0x9a>
   142fc:	e24b      	b.n	14796 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   142fe:	4b7e      	ldr	r3, [pc, #504]	; (144f8 <m2m_ip_cb+0x294>)
   14300:	681b      	ldr	r3, [r3, #0]
   14302:	22c4      	movs	r2, #196	; 0xc4
   14304:	18ba      	adds	r2, r7, r2
   14306:	2000      	movs	r0, #0
   14308:	5610      	ldrsb	r0, [r2, r0]
   1430a:	22c0      	movs	r2, #192	; 0xc0
   1430c:	18ba      	adds	r2, r7, r2
   1430e:	2102      	movs	r1, #2
   14310:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   14312:	e240      	b.n	14796 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   14314:	1dfb      	adds	r3, r7, #7
   14316:	781b      	ldrb	r3, [r3, #0]
   14318:	2b43      	cmp	r3, #67	; 0x43
   1431a:	d000      	beq.n	1431e <m2m_ip_cb+0xba>
   1431c:	e086      	b.n	1442c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   1431e:	23b4      	movs	r3, #180	; 0xb4
   14320:	18f9      	adds	r1, r7, r3
   14322:	6838      	ldr	r0, [r7, #0]
   14324:	2300      	movs	r3, #0
   14326:	220c      	movs	r2, #12
   14328:	4c72      	ldr	r4, [pc, #456]	; (144f4 <m2m_ip_cb+0x290>)
   1432a:	47a0      	blx	r4
   1432c:	1e03      	subs	r3, r0, #0
   1432e:	d000      	beq.n	14332 <m2m_ip_cb+0xce>
   14330:	e231      	b.n	14796 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   14332:	23b4      	movs	r3, #180	; 0xb4
   14334:	18fb      	adds	r3, r7, r3
   14336:	7a5b      	ldrb	r3, [r3, #9]
   14338:	b25b      	sxtb	r3, r3
   1433a:	2b00      	cmp	r3, #0
   1433c:	db4f      	blt.n	143de <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   1433e:	23b4      	movs	r3, #180	; 0xb4
   14340:	18fb      	adds	r3, r7, r3
   14342:	7a5b      	ldrb	r3, [r3, #9]
   14344:	b25b      	sxtb	r3, r3
   14346:	0018      	movs	r0, r3
   14348:	23b4      	movs	r3, #180	; 0xb4
   1434a:	18fb      	adds	r3, r7, r3
   1434c:	7a1b      	ldrb	r3, [r3, #8]
   1434e:	b25b      	sxtb	r3, r3
   14350:	4a6a      	ldr	r2, [pc, #424]	; (144fc <m2m_ip_cb+0x298>)
   14352:	011b      	lsls	r3, r3, #4
   14354:	18d3      	adds	r3, r2, r3
   14356:	330b      	adds	r3, #11
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	b2d9      	uxtb	r1, r3
   1435c:	4a67      	ldr	r2, [pc, #412]	; (144fc <m2m_ip_cb+0x298>)
   1435e:	0103      	lsls	r3, r0, #4
   14360:	18d3      	adds	r3, r2, r3
   14362:	330b      	adds	r3, #11
   14364:	1c0a      	adds	r2, r1, #0
   14366:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   14368:	23b4      	movs	r3, #180	; 0xb4
   1436a:	18fb      	adds	r3, r7, r3
   1436c:	7a5b      	ldrb	r3, [r3, #9]
   1436e:	b25b      	sxtb	r3, r3
   14370:	4a62      	ldr	r2, [pc, #392]	; (144fc <m2m_ip_cb+0x298>)
   14372:	011b      	lsls	r3, r3, #4
   14374:	18d3      	adds	r3, r2, r3
   14376:	330a      	adds	r3, #10
   14378:	2201      	movs	r2, #1
   1437a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1437c:	23b4      	movs	r3, #180	; 0xb4
   1437e:	18fb      	adds	r3, r7, r3
   14380:	7a5b      	ldrb	r3, [r3, #9]
   14382:	b25b      	sxtb	r3, r3
   14384:	0018      	movs	r0, r3
   14386:	23b4      	movs	r3, #180	; 0xb4
   14388:	18fb      	adds	r3, r7, r3
   1438a:	895b      	ldrh	r3, [r3, #10]
   1438c:	3b08      	subs	r3, #8
   1438e:	b299      	uxth	r1, r3
   14390:	4a5a      	ldr	r2, [pc, #360]	; (144fc <m2m_ip_cb+0x298>)
   14392:	0103      	lsls	r3, r0, #4
   14394:	18d3      	adds	r3, r2, r3
   14396:	3308      	adds	r3, #8
   14398:	1c0a      	adds	r2, r1, #0
   1439a:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   1439c:	4b58      	ldr	r3, [pc, #352]	; (14500 <m2m_ip_cb+0x29c>)
   1439e:	881b      	ldrh	r3, [r3, #0]
   143a0:	b29b      	uxth	r3, r3
   143a2:	3301      	adds	r3, #1
   143a4:	b29a      	uxth	r2, r3
   143a6:	4b56      	ldr	r3, [pc, #344]	; (14500 <m2m_ip_cb+0x29c>)
   143a8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   143aa:	4b55      	ldr	r3, [pc, #340]	; (14500 <m2m_ip_cb+0x29c>)
   143ac:	881b      	ldrh	r3, [r3, #0]
   143ae:	b29b      	uxth	r3, r3
   143b0:	2b00      	cmp	r3, #0
   143b2:	d106      	bne.n	143c2 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   143b4:	4b52      	ldr	r3, [pc, #328]	; (14500 <m2m_ip_cb+0x29c>)
   143b6:	881b      	ldrh	r3, [r3, #0]
   143b8:	b29b      	uxth	r3, r3
   143ba:	3301      	adds	r3, #1
   143bc:	b29a      	uxth	r2, r3
   143be:	4b50      	ldr	r3, [pc, #320]	; (14500 <m2m_ip_cb+0x29c>)
   143c0:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   143c2:	23b4      	movs	r3, #180	; 0xb4
   143c4:	18fb      	adds	r3, r7, r3
   143c6:	7a5b      	ldrb	r3, [r3, #9]
   143c8:	b25b      	sxtb	r3, r3
   143ca:	0018      	movs	r0, r3
   143cc:	4b4c      	ldr	r3, [pc, #304]	; (14500 <m2m_ip_cb+0x29c>)
   143ce:	881b      	ldrh	r3, [r3, #0]
   143d0:	b299      	uxth	r1, r3
   143d2:	4a4a      	ldr	r2, [pc, #296]	; (144fc <m2m_ip_cb+0x298>)
   143d4:	0103      	lsls	r3, r0, #4
   143d6:	18d3      	adds	r3, r2, r3
   143d8:	3306      	adds	r3, #6
   143da:	1c0a      	adds	r2, r1, #0
   143dc:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   143de:	23b4      	movs	r3, #180	; 0xb4
   143e0:	18fb      	adds	r3, r7, r3
   143e2:	2209      	movs	r2, #9
   143e4:	569a      	ldrsb	r2, [r3, r2]
   143e6:	23a0      	movs	r3, #160	; 0xa0
   143e8:	18fb      	adds	r3, r7, r3
   143ea:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   143ec:	23a0      	movs	r3, #160	; 0xa0
   143ee:	18fb      	adds	r3, r7, r3
   143f0:	2202      	movs	r2, #2
   143f2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   143f4:	23b4      	movs	r3, #180	; 0xb4
   143f6:	18fb      	adds	r3, r7, r3
   143f8:	885a      	ldrh	r2, [r3, #2]
   143fa:	23a0      	movs	r3, #160	; 0xa0
   143fc:	18fb      	adds	r3, r7, r3
   143fe:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   14400:	23b4      	movs	r3, #180	; 0xb4
   14402:	18fb      	adds	r3, r7, r3
   14404:	685a      	ldr	r2, [r3, #4]
   14406:	23a0      	movs	r3, #160	; 0xa0
   14408:	18fb      	adds	r3, r7, r3
   1440a:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   1440c:	4b3a      	ldr	r3, [pc, #232]	; (144f8 <m2m_ip_cb+0x294>)
   1440e:	681b      	ldr	r3, [r3, #0]
   14410:	2b00      	cmp	r3, #0
   14412:	d100      	bne.n	14416 <m2m_ip_cb+0x1b2>
   14414:	e1bf      	b.n	14796 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   14416:	4b38      	ldr	r3, [pc, #224]	; (144f8 <m2m_ip_cb+0x294>)
   14418:	681b      	ldr	r3, [r3, #0]
   1441a:	22b4      	movs	r2, #180	; 0xb4
   1441c:	18ba      	adds	r2, r7, r2
   1441e:	2008      	movs	r0, #8
   14420:	5610      	ldrsb	r0, [r2, r0]
   14422:	22a0      	movs	r2, #160	; 0xa0
   14424:	18ba      	adds	r2, r7, r2
   14426:	2104      	movs	r1, #4
   14428:	4798      	blx	r3
}
   1442a:	e1b4      	b.n	14796 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   1442c:	1dfb      	adds	r3, r7, #7
   1442e:	781b      	ldrb	r3, [r3, #0]
   14430:	2b44      	cmp	r3, #68	; 0x44
   14432:	d003      	beq.n	1443c <m2m_ip_cb+0x1d8>
   14434:	1dfb      	adds	r3, r7, #7
   14436:	781b      	ldrb	r3, [r3, #0]
   14438:	2b4b      	cmp	r3, #75	; 0x4b
   1443a:	d13d      	bne.n	144b8 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   1443c:	239c      	movs	r3, #156	; 0x9c
   1443e:	18f9      	adds	r1, r7, r3
   14440:	6838      	ldr	r0, [r7, #0]
   14442:	2300      	movs	r3, #0
   14444:	2204      	movs	r2, #4
   14446:	4c2b      	ldr	r4, [pc, #172]	; (144f4 <m2m_ip_cb+0x290>)
   14448:	47a0      	blx	r4
   1444a:	1e03      	subs	r3, r0, #0
   1444c:	d000      	beq.n	14450 <m2m_ip_cb+0x1ec>
   1444e:	e19d      	b.n	1478c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   14450:	239c      	movs	r3, #156	; 0x9c
   14452:	18fb      	adds	r3, r7, r3
   14454:	2200      	movs	r2, #0
   14456:	569a      	ldrsb	r2, [r3, r2]
   14458:	2398      	movs	r3, #152	; 0x98
   1445a:	18fb      	adds	r3, r7, r3
   1445c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   1445e:	239c      	movs	r3, #156	; 0x9c
   14460:	18fb      	adds	r3, r7, r3
   14462:	2201      	movs	r2, #1
   14464:	569a      	ldrsb	r2, [r3, r2]
   14466:	2398      	movs	r3, #152	; 0x98
   14468:	18fb      	adds	r3, r7, r3
   1446a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   1446c:	239c      	movs	r3, #156	; 0x9c
   1446e:	18fb      	adds	r3, r7, r3
   14470:	785b      	ldrb	r3, [r3, #1]
   14472:	b25b      	sxtb	r3, r3
   14474:	2b00      	cmp	r3, #0
   14476:	d10f      	bne.n	14498 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   14478:	239c      	movs	r3, #156	; 0x9c
   1447a:	18fb      	adds	r3, r7, r3
   1447c:	781b      	ldrb	r3, [r3, #0]
   1447e:	b25b      	sxtb	r3, r3
   14480:	0018      	movs	r0, r3
   14482:	239c      	movs	r3, #156	; 0x9c
   14484:	18fb      	adds	r3, r7, r3
   14486:	885b      	ldrh	r3, [r3, #2]
   14488:	3b08      	subs	r3, #8
   1448a:	b299      	uxth	r1, r3
   1448c:	4a1b      	ldr	r2, [pc, #108]	; (144fc <m2m_ip_cb+0x298>)
   1448e:	0103      	lsls	r3, r0, #4
   14490:	18d3      	adds	r3, r2, r3
   14492:	3308      	adds	r3, #8
   14494:	1c0a      	adds	r2, r1, #0
   14496:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   14498:	4b17      	ldr	r3, [pc, #92]	; (144f8 <m2m_ip_cb+0x294>)
   1449a:	681b      	ldr	r3, [r3, #0]
   1449c:	2b00      	cmp	r3, #0
   1449e:	d100      	bne.n	144a2 <m2m_ip_cb+0x23e>
   144a0:	e174      	b.n	1478c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   144a2:	4b15      	ldr	r3, [pc, #84]	; (144f8 <m2m_ip_cb+0x294>)
   144a4:	681b      	ldr	r3, [r3, #0]
   144a6:	229c      	movs	r2, #156	; 0x9c
   144a8:	18ba      	adds	r2, r7, r2
   144aa:	2000      	movs	r0, #0
   144ac:	5610      	ldrsb	r0, [r2, r0]
   144ae:	2298      	movs	r2, #152	; 0x98
   144b0:	18ba      	adds	r2, r7, r2
   144b2:	2105      	movs	r1, #5
   144b4:	4798      	blx	r3
	{
   144b6:	e169      	b.n	1478c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   144b8:	1dfb      	adds	r3, r7, #7
   144ba:	781b      	ldrb	r3, [r3, #0]
   144bc:	2b4a      	cmp	r3, #74	; 0x4a
   144be:	d123      	bne.n	14508 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   144c0:	230c      	movs	r3, #12
   144c2:	18f9      	adds	r1, r7, r3
   144c4:	6838      	ldr	r0, [r7, #0]
   144c6:	2300      	movs	r3, #0
   144c8:	2244      	movs	r2, #68	; 0x44
   144ca:	4c0a      	ldr	r4, [pc, #40]	; (144f4 <m2m_ip_cb+0x290>)
   144cc:	47a0      	blx	r4
   144ce:	1e03      	subs	r3, r0, #0
   144d0:	d000      	beq.n	144d4 <m2m_ip_cb+0x270>
   144d2:	e160      	b.n	14796 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   144d4:	4b0b      	ldr	r3, [pc, #44]	; (14504 <m2m_ip_cb+0x2a0>)
   144d6:	681b      	ldr	r3, [r3, #0]
   144d8:	2b00      	cmp	r3, #0
   144da:	d100      	bne.n	144de <m2m_ip_cb+0x27a>
   144dc:	e15b      	b.n	14796 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   144de:	4b09      	ldr	r3, [pc, #36]	; (14504 <m2m_ip_cb+0x2a0>)
   144e0:	681a      	ldr	r2, [r3, #0]
   144e2:	230c      	movs	r3, #12
   144e4:	18fb      	adds	r3, r7, r3
   144e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   144e8:	230c      	movs	r3, #12
   144ea:	18fb      	adds	r3, r7, r3
   144ec:	0018      	movs	r0, r3
   144ee:	4790      	blx	r2
}
   144f0:	e151      	b.n	14796 <m2m_ip_cb+0x532>
   144f2:	46c0      	nop			; (mov r8, r8)
   144f4:	00010a61 	.word	0x00010a61
   144f8:	20005834 	.word	0x20005834
   144fc:	20005784 	.word	0x20005784
   14500:	20003eea 	.word	0x20003eea
   14504:	2000583c 	.word	0x2000583c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   14508:	1dfb      	adds	r3, r7, #7
   1450a:	781b      	ldrb	r3, [r3, #0]
   1450c:	2b46      	cmp	r3, #70	; 0x46
   1450e:	d008      	beq.n	14522 <m2m_ip_cb+0x2be>
   14510:	1dfb      	adds	r3, r7, #7
   14512:	781b      	ldrb	r3, [r3, #0]
   14514:	2b48      	cmp	r3, #72	; 0x48
   14516:	d004      	beq.n	14522 <m2m_ip_cb+0x2be>
   14518:	1dfb      	adds	r3, r7, #7
   1451a:	781b      	ldrb	r3, [r3, #0]
   1451c:	2b4d      	cmp	r3, #77	; 0x4d
   1451e:	d000      	beq.n	14522 <m2m_ip_cb+0x2be>
   14520:	e0b4      	b.n	1468c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   14522:	23df      	movs	r3, #223	; 0xdf
   14524:	18fb      	adds	r3, r7, r3
   14526:	2206      	movs	r2, #6
   14528:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   1452a:	1dfb      	adds	r3, r7, #7
   1452c:	781b      	ldrb	r3, [r3, #0]
   1452e:	2b48      	cmp	r3, #72	; 0x48
   14530:	d103      	bne.n	1453a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   14532:	23df      	movs	r3, #223	; 0xdf
   14534:	18fb      	adds	r3, r7, r3
   14536:	2209      	movs	r2, #9
   14538:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   1453a:	23d8      	movs	r3, #216	; 0xd8
   1453c:	18fb      	adds	r3, r7, r3
   1453e:	2210      	movs	r2, #16
   14540:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   14542:	23d8      	movs	r3, #216	; 0xd8
   14544:	18fb      	adds	r3, r7, r3
   14546:	881a      	ldrh	r2, [r3, #0]
   14548:	2388      	movs	r3, #136	; 0x88
   1454a:	18f9      	adds	r1, r7, r3
   1454c:	6838      	ldr	r0, [r7, #0]
   1454e:	2300      	movs	r3, #0
   14550:	4c93      	ldr	r4, [pc, #588]	; (147a0 <m2m_ip_cb+0x53c>)
   14552:	47a0      	blx	r4
   14554:	1e03      	subs	r3, r0, #0
   14556:	d000      	beq.n	1455a <m2m_ip_cb+0x2f6>
   14558:	e11a      	b.n	14790 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   1455a:	23d6      	movs	r3, #214	; 0xd6
   1455c:	18fb      	adds	r3, r7, r3
   1455e:	2200      	movs	r2, #0
   14560:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   14562:	23d5      	movs	r3, #213	; 0xd5
   14564:	18fb      	adds	r3, r7, r3
   14566:	2288      	movs	r2, #136	; 0x88
   14568:	18ba      	adds	r2, r7, r2
   1456a:	7b12      	ldrb	r2, [r2, #12]
   1456c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   1456e:	23d6      	movs	r3, #214	; 0xd6
   14570:	18fb      	adds	r3, r7, r3
   14572:	2288      	movs	r2, #136	; 0x88
   14574:	18ba      	adds	r2, r7, r2
   14576:	89d2      	ldrh	r2, [r2, #14]
   14578:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   1457a:	23d5      	movs	r3, #213	; 0xd5
   1457c:	18fb      	adds	r3, r7, r3
   1457e:	781b      	ldrb	r3, [r3, #0]
   14580:	b25b      	sxtb	r3, r3
   14582:	4a88      	ldr	r2, [pc, #544]	; (147a4 <m2m_ip_cb+0x540>)
   14584:	011b      	lsls	r3, r3, #4
   14586:	18d3      	adds	r3, r2, r3
   14588:	330c      	adds	r3, #12
   1458a:	2200      	movs	r2, #0
   1458c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   1458e:	23d2      	movs	r3, #210	; 0xd2
   14590:	18fb      	adds	r3, r7, r3
   14592:	2288      	movs	r2, #136	; 0x88
   14594:	18ba      	adds	r2, r7, r2
   14596:	8912      	ldrh	r2, [r2, #8]
   14598:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   1459a:	23d0      	movs	r3, #208	; 0xd0
   1459c:	18fb      	adds	r3, r7, r3
   1459e:	2288      	movs	r2, #136	; 0x88
   145a0:	18ba      	adds	r2, r7, r2
   145a2:	8952      	ldrh	r2, [r2, #10]
   145a4:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   145a6:	2388      	movs	r3, #136	; 0x88
   145a8:	18fb      	adds	r3, r7, r3
   145aa:	885a      	ldrh	r2, [r3, #2]
   145ac:	2370      	movs	r3, #112	; 0x70
   145ae:	18fb      	adds	r3, r7, r3
   145b0:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   145b2:	2388      	movs	r3, #136	; 0x88
   145b4:	18fb      	adds	r3, r7, r3
   145b6:	685a      	ldr	r2, [r3, #4]
   145b8:	2370      	movs	r3, #112	; 0x70
   145ba:	18fb      	adds	r3, r7, r3
   145bc:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   145be:	23d5      	movs	r3, #213	; 0xd5
   145c0:	18fb      	adds	r3, r7, r3
   145c2:	781b      	ldrb	r3, [r3, #0]
   145c4:	b25b      	sxtb	r3, r3
   145c6:	4a77      	ldr	r2, [pc, #476]	; (147a4 <m2m_ip_cb+0x540>)
   145c8:	011b      	lsls	r3, r3, #4
   145ca:	18d3      	adds	r3, r2, r3
   145cc:	3306      	adds	r3, #6
   145ce:	881b      	ldrh	r3, [r3, #0]
   145d0:	b29b      	uxth	r3, r3
   145d2:	22d6      	movs	r2, #214	; 0xd6
   145d4:	18ba      	adds	r2, r7, r2
   145d6:	8812      	ldrh	r2, [r2, #0]
   145d8:	429a      	cmp	r2, r3
   145da:	d148      	bne.n	1466e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   145dc:	23d2      	movs	r3, #210	; 0xd2
   145de:	18fb      	adds	r3, r7, r3
   145e0:	2200      	movs	r2, #0
   145e2:	5e9b      	ldrsh	r3, [r3, r2]
   145e4:	2b00      	cmp	r3, #0
   145e6:	dd25      	ble.n	14634 <m2m_ip_cb+0x3d0>
   145e8:	23d2      	movs	r3, #210	; 0xd2
   145ea:	18fb      	adds	r3, r7, r3
   145ec:	2200      	movs	r2, #0
   145ee:	5e9a      	ldrsh	r2, [r3, r2]
   145f0:	1d3b      	adds	r3, r7, #4
   145f2:	881b      	ldrh	r3, [r3, #0]
   145f4:	429a      	cmp	r2, r3
   145f6:	da1d      	bge.n	14634 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   145f8:	23d0      	movs	r3, #208	; 0xd0
   145fa:	18fb      	adds	r3, r7, r3
   145fc:	881b      	ldrh	r3, [r3, #0]
   145fe:	683a      	ldr	r2, [r7, #0]
   14600:	18d3      	adds	r3, r2, r3
   14602:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   14604:	23d8      	movs	r3, #216	; 0xd8
   14606:	18fb      	adds	r3, r7, r3
   14608:	22d2      	movs	r2, #210	; 0xd2
   1460a:	18ba      	adds	r2, r7, r2
   1460c:	8812      	ldrh	r2, [r2, #0]
   1460e:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   14610:	683c      	ldr	r4, [r7, #0]
   14612:	23df      	movs	r3, #223	; 0xdf
   14614:	18fb      	adds	r3, r7, r3
   14616:	781a      	ldrb	r2, [r3, #0]
   14618:	2370      	movs	r3, #112	; 0x70
   1461a:	18f9      	adds	r1, r7, r3
   1461c:	23d5      	movs	r3, #213	; 0xd5
   1461e:	18fb      	adds	r3, r7, r3
   14620:	2000      	movs	r0, #0
   14622:	5618      	ldrsb	r0, [r3, r0]
   14624:	23d8      	movs	r3, #216	; 0xd8
   14626:	18fb      	adds	r3, r7, r3
   14628:	881b      	ldrh	r3, [r3, #0]
   1462a:	9300      	str	r3, [sp, #0]
   1462c:	0023      	movs	r3, r4
   1462e:	4c5e      	ldr	r4, [pc, #376]	; (147a8 <m2m_ip_cb+0x544>)
   14630:	47a0      	blx	r4
	{
   14632:	e0ad      	b.n	14790 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   14634:	2370      	movs	r3, #112	; 0x70
   14636:	18fb      	adds	r3, r7, r3
   14638:	22d2      	movs	r2, #210	; 0xd2
   1463a:	18ba      	adds	r2, r7, r2
   1463c:	8812      	ldrh	r2, [r2, #0]
   1463e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   14640:	2370      	movs	r3, #112	; 0x70
   14642:	18fb      	adds	r3, r7, r3
   14644:	2200      	movs	r2, #0
   14646:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   14648:	4b58      	ldr	r3, [pc, #352]	; (147ac <m2m_ip_cb+0x548>)
   1464a:	681b      	ldr	r3, [r3, #0]
   1464c:	2b00      	cmp	r3, #0
   1464e:	d100      	bne.n	14652 <m2m_ip_cb+0x3ee>
   14650:	e09e      	b.n	14790 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   14652:	4b56      	ldr	r3, [pc, #344]	; (147ac <m2m_ip_cb+0x548>)
   14654:	681b      	ldr	r3, [r3, #0]
   14656:	2270      	movs	r2, #112	; 0x70
   14658:	18bc      	adds	r4, r7, r2
   1465a:	22df      	movs	r2, #223	; 0xdf
   1465c:	18ba      	adds	r2, r7, r2
   1465e:	7811      	ldrb	r1, [r2, #0]
   14660:	22d5      	movs	r2, #213	; 0xd5
   14662:	18ba      	adds	r2, r7, r2
   14664:	2000      	movs	r0, #0
   14666:	5610      	ldrsb	r0, [r2, r0]
   14668:	0022      	movs	r2, r4
   1466a:	4798      	blx	r3
	{
   1466c:	e090      	b.n	14790 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   1466e:	23d8      	movs	r3, #216	; 0xd8
   14670:	18fa      	adds	r2, r7, r3
   14672:	1d3b      	adds	r3, r7, #4
   14674:	8812      	ldrh	r2, [r2, #0]
   14676:	881b      	ldrh	r3, [r3, #0]
   14678:	429a      	cmp	r2, r3
   1467a:	d300      	bcc.n	1467e <m2m_ip_cb+0x41a>
   1467c:	e088      	b.n	14790 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1467e:	2301      	movs	r3, #1
   14680:	2200      	movs	r2, #0
   14682:	2100      	movs	r1, #0
   14684:	2000      	movs	r0, #0
   14686:	4c46      	ldr	r4, [pc, #280]	; (147a0 <m2m_ip_cb+0x53c>)
   14688:	47a0      	blx	r4
	{
   1468a:	e081      	b.n	14790 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1468c:	1dfb      	adds	r3, r7, #7
   1468e:	781b      	ldrb	r3, [r3, #0]
   14690:	2b45      	cmp	r3, #69	; 0x45
   14692:	d007      	beq.n	146a4 <m2m_ip_cb+0x440>
   14694:	1dfb      	adds	r3, r7, #7
   14696:	781b      	ldrb	r3, [r3, #0]
   14698:	2b47      	cmp	r3, #71	; 0x47
   1469a:	d003      	beq.n	146a4 <m2m_ip_cb+0x440>
   1469c:	1dfb      	adds	r3, r7, #7
   1469e:	781b      	ldrb	r3, [r3, #0]
   146a0:	2b4c      	cmp	r3, #76	; 0x4c
   146a2:	d14c      	bne.n	1473e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   146a4:	23de      	movs	r3, #222	; 0xde
   146a6:	18fb      	adds	r3, r7, r3
   146a8:	2207      	movs	r2, #7
   146aa:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   146ac:	1dfb      	adds	r3, r7, #7
   146ae:	781b      	ldrb	r3, [r3, #0]
   146b0:	2b47      	cmp	r3, #71	; 0x47
   146b2:	d103      	bne.n	146bc <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   146b4:	23de      	movs	r3, #222	; 0xde
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	2208      	movs	r2, #8
   146ba:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   146bc:	2364      	movs	r3, #100	; 0x64
   146be:	18f9      	adds	r1, r7, r3
   146c0:	6838      	ldr	r0, [r7, #0]
   146c2:	2300      	movs	r3, #0
   146c4:	2208      	movs	r2, #8
   146c6:	4c36      	ldr	r4, [pc, #216]	; (147a0 <m2m_ip_cb+0x53c>)
   146c8:	47a0      	blx	r4
   146ca:	1e03      	subs	r3, r0, #0
   146cc:	d162      	bne.n	14794 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   146ce:	23dc      	movs	r3, #220	; 0xdc
   146d0:	18fb      	adds	r3, r7, r3
   146d2:	2200      	movs	r2, #0
   146d4:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   146d6:	23db      	movs	r3, #219	; 0xdb
   146d8:	18fb      	adds	r3, r7, r3
   146da:	2264      	movs	r2, #100	; 0x64
   146dc:	18ba      	adds	r2, r7, r2
   146de:	7812      	ldrb	r2, [r2, #0]
   146e0:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   146e2:	23dc      	movs	r3, #220	; 0xdc
   146e4:	18fb      	adds	r3, r7, r3
   146e6:	2264      	movs	r2, #100	; 0x64
   146e8:	18ba      	adds	r2, r7, r2
   146ea:	8892      	ldrh	r2, [r2, #4]
   146ec:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   146ee:	2364      	movs	r3, #100	; 0x64
   146f0:	18fb      	adds	r3, r7, r3
   146f2:	2202      	movs	r2, #2
   146f4:	5e9a      	ldrsh	r2, [r3, r2]
   146f6:	236e      	movs	r3, #110	; 0x6e
   146f8:	18fb      	adds	r3, r7, r3
   146fa:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   146fc:	23db      	movs	r3, #219	; 0xdb
   146fe:	18fb      	adds	r3, r7, r3
   14700:	781b      	ldrb	r3, [r3, #0]
   14702:	b25b      	sxtb	r3, r3
   14704:	4a27      	ldr	r2, [pc, #156]	; (147a4 <m2m_ip_cb+0x540>)
   14706:	011b      	lsls	r3, r3, #4
   14708:	18d3      	adds	r3, r2, r3
   1470a:	3306      	adds	r3, #6
   1470c:	881b      	ldrh	r3, [r3, #0]
   1470e:	b29b      	uxth	r3, r3
   14710:	22dc      	movs	r2, #220	; 0xdc
   14712:	18ba      	adds	r2, r7, r2
   14714:	8812      	ldrh	r2, [r2, #0]
   14716:	429a      	cmp	r2, r3
   14718:	d13c      	bne.n	14794 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   1471a:	4b24      	ldr	r3, [pc, #144]	; (147ac <m2m_ip_cb+0x548>)
   1471c:	681b      	ldr	r3, [r3, #0]
   1471e:	2b00      	cmp	r3, #0
   14720:	d038      	beq.n	14794 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   14722:	4b22      	ldr	r3, [pc, #136]	; (147ac <m2m_ip_cb+0x548>)
   14724:	681b      	ldr	r3, [r3, #0]
   14726:	226e      	movs	r2, #110	; 0x6e
   14728:	18bc      	adds	r4, r7, r2
   1472a:	22de      	movs	r2, #222	; 0xde
   1472c:	18ba      	adds	r2, r7, r2
   1472e:	7811      	ldrb	r1, [r2, #0]
   14730:	22db      	movs	r2, #219	; 0xdb
   14732:	18ba      	adds	r2, r7, r2
   14734:	2000      	movs	r0, #0
   14736:	5610      	ldrsb	r0, [r2, r0]
   14738:	0022      	movs	r2, r4
   1473a:	4798      	blx	r3
	{
   1473c:	e02a      	b.n	14794 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   1473e:	1dfb      	adds	r3, r7, #7
   14740:	781b      	ldrb	r3, [r3, #0]
   14742:	2b52      	cmp	r3, #82	; 0x52
   14744:	d127      	bne.n	14796 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   14746:	2350      	movs	r3, #80	; 0x50
   14748:	18f9      	adds	r1, r7, r3
   1474a:	6838      	ldr	r0, [r7, #0]
   1474c:	2301      	movs	r3, #1
   1474e:	2214      	movs	r2, #20
   14750:	4c13      	ldr	r4, [pc, #76]	; (147a0 <m2m_ip_cb+0x53c>)
   14752:	47a0      	blx	r4
   14754:	1e03      	subs	r3, r0, #0
   14756:	d11e      	bne.n	14796 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   14758:	2350      	movs	r3, #80	; 0x50
   1475a:	18fb      	adds	r3, r7, r3
   1475c:	685b      	ldr	r3, [r3, #4]
   1475e:	001a      	movs	r2, r3
   14760:	4b13      	ldr	r3, [pc, #76]	; (147b0 <m2m_ip_cb+0x54c>)
   14762:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   14764:	4b12      	ldr	r3, [pc, #72]	; (147b0 <m2m_ip_cb+0x54c>)
   14766:	681b      	ldr	r3, [r3, #0]
   14768:	2b00      	cmp	r3, #0
   1476a:	d014      	beq.n	14796 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   1476c:	4b10      	ldr	r3, [pc, #64]	; (147b0 <m2m_ip_cb+0x54c>)
   1476e:	681c      	ldr	r4, [r3, #0]
   14770:	2350      	movs	r3, #80	; 0x50
   14772:	18fb      	adds	r3, r7, r3
   14774:	6818      	ldr	r0, [r3, #0]
   14776:	2350      	movs	r3, #80	; 0x50
   14778:	18fb      	adds	r3, r7, r3
   1477a:	6899      	ldr	r1, [r3, #8]
   1477c:	2350      	movs	r3, #80	; 0x50
   1477e:	18fb      	adds	r3, r7, r3
   14780:	7c1b      	ldrb	r3, [r3, #16]
   14782:	001a      	movs	r2, r3
   14784:	47a0      	blx	r4
}
   14786:	e006      	b.n	14796 <m2m_ip_cb+0x532>
	{
   14788:	46c0      	nop			; (mov r8, r8)
   1478a:	e004      	b.n	14796 <m2m_ip_cb+0x532>
	{
   1478c:	46c0      	nop			; (mov r8, r8)
   1478e:	e002      	b.n	14796 <m2m_ip_cb+0x532>
	{
   14790:	46c0      	nop			; (mov r8, r8)
   14792:	e000      	b.n	14796 <m2m_ip_cb+0x532>
	{
   14794:	46c0      	nop			; (mov r8, r8)
}
   14796:	46c0      	nop			; (mov r8, r8)
   14798:	46bd      	mov	sp, r7
   1479a:	b039      	add	sp, #228	; 0xe4
   1479c:	bd90      	pop	{r4, r7, pc}
   1479e:	46c0      	nop			; (mov r8, r8)
   147a0:	00010a61 	.word	0x00010a61
   147a4:	20005784 	.word	0x20005784
   147a8:	00014069 	.word	0x00014069
   147ac:	20005834 	.word	0x20005834
   147b0:	20005838 	.word	0x20005838

000147b4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   147b4:	b580      	push	{r7, lr}
   147b6:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   147b8:	4b0c      	ldr	r3, [pc, #48]	; (147ec <socketInit+0x38>)
   147ba:	781b      	ldrb	r3, [r3, #0]
   147bc:	b2db      	uxtb	r3, r3
   147be:	2b00      	cmp	r3, #0
   147c0:	d110      	bne.n	147e4 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   147c2:	4b0b      	ldr	r3, [pc, #44]	; (147f0 <socketInit+0x3c>)
   147c4:	22b0      	movs	r2, #176	; 0xb0
   147c6:	2100      	movs	r1, #0
   147c8:	0018      	movs	r0, r3
   147ca:	4b0a      	ldr	r3, [pc, #40]	; (147f4 <socketInit+0x40>)
   147cc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   147ce:	4b0a      	ldr	r3, [pc, #40]	; (147f8 <socketInit+0x44>)
   147d0:	0019      	movs	r1, r3
   147d2:	2002      	movs	r0, #2
   147d4:	4b09      	ldr	r3, [pc, #36]	; (147fc <socketInit+0x48>)
   147d6:	4798      	blx	r3
		gbSocketInit	= 1;
   147d8:	4b04      	ldr	r3, [pc, #16]	; (147ec <socketInit+0x38>)
   147da:	2201      	movs	r2, #1
   147dc:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   147de:	4b08      	ldr	r3, [pc, #32]	; (14800 <socketInit+0x4c>)
   147e0:	2200      	movs	r2, #0
   147e2:	801a      	strh	r2, [r3, #0]
	}
}
   147e4:	46c0      	nop			; (mov r8, r8)
   147e6:	46bd      	mov	sp, r7
   147e8:	bd80      	pop	{r7, pc}
   147ea:	46c0      	nop			; (mov r8, r8)
   147ec:	20003eec 	.word	0x20003eec
   147f0:	20005784 	.word	0x20005784
   147f4:	0000fee5 	.word	0x0000fee5
   147f8:	00014265 	.word	0x00014265
   147fc:	00010be1 	.word	0x00010be1
   14800:	20003eea 	.word	0x20003eea

00014804 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   14804:	b580      	push	{r7, lr}
   14806:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   14808:	4b0a      	ldr	r3, [pc, #40]	; (14834 <socketDeinit+0x30>)
   1480a:	22b0      	movs	r2, #176	; 0xb0
   1480c:	2100      	movs	r1, #0
   1480e:	0018      	movs	r0, r3
   14810:	4b09      	ldr	r3, [pc, #36]	; (14838 <socketDeinit+0x34>)
   14812:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   14814:	2100      	movs	r1, #0
   14816:	2002      	movs	r0, #2
   14818:	4b08      	ldr	r3, [pc, #32]	; (1483c <socketDeinit+0x38>)
   1481a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   1481c:	4b08      	ldr	r3, [pc, #32]	; (14840 <socketDeinit+0x3c>)
   1481e:	2200      	movs	r2, #0
   14820:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   14822:	4b08      	ldr	r3, [pc, #32]	; (14844 <socketDeinit+0x40>)
   14824:	2200      	movs	r2, #0
   14826:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   14828:	4b07      	ldr	r3, [pc, #28]	; (14848 <socketDeinit+0x44>)
   1482a:	2200      	movs	r2, #0
   1482c:	701a      	strb	r2, [r3, #0]
}
   1482e:	46c0      	nop			; (mov r8, r8)
   14830:	46bd      	mov	sp, r7
   14832:	bd80      	pop	{r7, pc}
   14834:	20005784 	.word	0x20005784
   14838:	0000fee5 	.word	0x0000fee5
   1483c:	00010be1 	.word	0x00010be1
   14840:	20005834 	.word	0x20005834
   14844:	2000583c 	.word	0x2000583c
   14848:	20003eec 	.word	0x20003eec

0001484c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   1484c:	b580      	push	{r7, lr}
   1484e:	b082      	sub	sp, #8
   14850:	af00      	add	r7, sp, #0
   14852:	6078      	str	r0, [r7, #4]
   14854:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   14856:	4b05      	ldr	r3, [pc, #20]	; (1486c <registerSocketCallback+0x20>)
   14858:	687a      	ldr	r2, [r7, #4]
   1485a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   1485c:	4b04      	ldr	r3, [pc, #16]	; (14870 <registerSocketCallback+0x24>)
   1485e:	683a      	ldr	r2, [r7, #0]
   14860:	601a      	str	r2, [r3, #0]
}
   14862:	46c0      	nop			; (mov r8, r8)
   14864:	46bd      	mov	sp, r7
   14866:	b002      	add	sp, #8
   14868:	bd80      	pop	{r7, pc}
   1486a:	46c0      	nop			; (mov r8, r8)
   1486c:	20005834 	.word	0x20005834
   14870:	2000583c 	.word	0x2000583c

00014874 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   14874:	b590      	push	{r4, r7, lr}
   14876:	b08d      	sub	sp, #52	; 0x34
   14878:	af04      	add	r7, sp, #16
   1487a:	0004      	movs	r4, r0
   1487c:	0008      	movs	r0, r1
   1487e:	0011      	movs	r1, r2
   14880:	1dbb      	adds	r3, r7, #6
   14882:	1c22      	adds	r2, r4, #0
   14884:	801a      	strh	r2, [r3, #0]
   14886:	1d7b      	adds	r3, r7, #5
   14888:	1c02      	adds	r2, r0, #0
   1488a:	701a      	strb	r2, [r3, #0]
   1488c:	1d3b      	adds	r3, r7, #4
   1488e:	1c0a      	adds	r2, r1, #0
   14890:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   14892:	231f      	movs	r3, #31
   14894:	18fb      	adds	r3, r7, r3
   14896:	22ff      	movs	r2, #255	; 0xff
   14898:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   1489a:	1dbb      	adds	r3, r7, #6
   1489c:	881b      	ldrh	r3, [r3, #0]
   1489e:	2b02      	cmp	r3, #2
   148a0:	d000      	beq.n	148a4 <socket+0x30>
   148a2:	e0ce      	b.n	14a42 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   148a4:	1d7b      	adds	r3, r7, #5
   148a6:	781b      	ldrb	r3, [r3, #0]
   148a8:	2b01      	cmp	r3, #1
   148aa:	d135      	bne.n	14918 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   148ac:	231e      	movs	r3, #30
   148ae:	18fb      	adds	r3, r7, r3
   148b0:	2200      	movs	r2, #0
   148b2:	701a      	strb	r2, [r3, #0]
   148b4:	e02a      	b.n	1490c <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   148b6:	2317      	movs	r3, #23
   148b8:	18fb      	adds	r3, r7, r3
   148ba:	4a66      	ldr	r2, [pc, #408]	; (14a54 <socket+0x1e0>)
   148bc:	7812      	ldrb	r2, [r2, #0]
   148be:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   148c0:	4b64      	ldr	r3, [pc, #400]	; (14a54 <socket+0x1e0>)
   148c2:	781b      	ldrb	r3, [r3, #0]
   148c4:	b2db      	uxtb	r3, r3
   148c6:	011a      	lsls	r2, r3, #4
   148c8:	4b63      	ldr	r3, [pc, #396]	; (14a58 <socket+0x1e4>)
   148ca:	18d3      	adds	r3, r2, r3
   148cc:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   148ce:	4b61      	ldr	r3, [pc, #388]	; (14a54 <socket+0x1e0>)
   148d0:	781b      	ldrb	r3, [r3, #0]
   148d2:	b2db      	uxtb	r3, r3
   148d4:	1c5a      	adds	r2, r3, #1
   148d6:	4b61      	ldr	r3, [pc, #388]	; (14a5c <socket+0x1e8>)
   148d8:	2107      	movs	r1, #7
   148da:	0010      	movs	r0, r2
   148dc:	4798      	blx	r3
   148de:	000b      	movs	r3, r1
   148e0:	b2da      	uxtb	r2, r3
   148e2:	4b5c      	ldr	r3, [pc, #368]	; (14a54 <socket+0x1e0>)
   148e4:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   148e6:	69bb      	ldr	r3, [r7, #24]
   148e8:	7a9b      	ldrb	r3, [r3, #10]
   148ea:	b2db      	uxtb	r3, r3
   148ec:	2b00      	cmp	r3, #0
   148ee:	d106      	bne.n	148fe <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   148f0:	231f      	movs	r3, #31
   148f2:	18fb      	adds	r3, r7, r3
   148f4:	2217      	movs	r2, #23
   148f6:	18ba      	adds	r2, r7, r2
   148f8:	7812      	ldrb	r2, [r2, #0]
   148fa:	701a      	strb	r2, [r3, #0]
					break;
   148fc:	e04c      	b.n	14998 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   148fe:	231e      	movs	r3, #30
   14900:	18fb      	adds	r3, r7, r3
   14902:	781a      	ldrb	r2, [r3, #0]
   14904:	231e      	movs	r3, #30
   14906:	18fb      	adds	r3, r7, r3
   14908:	3201      	adds	r2, #1
   1490a:	701a      	strb	r2, [r3, #0]
   1490c:	231e      	movs	r3, #30
   1490e:	18fb      	adds	r3, r7, r3
   14910:	781b      	ldrb	r3, [r3, #0]
   14912:	2b06      	cmp	r3, #6
   14914:	d9cf      	bls.n	148b6 <socket+0x42>
   14916:	e03f      	b.n	14998 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   14918:	1d7b      	adds	r3, r7, #5
   1491a:	781b      	ldrb	r3, [r3, #0]
   1491c:	2b02      	cmp	r3, #2
   1491e:	d13b      	bne.n	14998 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   14920:	4b4f      	ldr	r3, [pc, #316]	; (14a60 <socket+0x1ec>)
   14922:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   14924:	231e      	movs	r3, #30
   14926:	18fb      	adds	r3, r7, r3
   14928:	2200      	movs	r2, #0
   1492a:	701a      	strb	r2, [r3, #0]
   1492c:	e02f      	b.n	1498e <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   1492e:	2317      	movs	r3, #23
   14930:	18fb      	adds	r3, r7, r3
   14932:	4a4c      	ldr	r2, [pc, #304]	; (14a64 <socket+0x1f0>)
   14934:	7812      	ldrb	r2, [r2, #0]
   14936:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   14938:	4b4a      	ldr	r3, [pc, #296]	; (14a64 <socket+0x1f0>)
   1493a:	781b      	ldrb	r3, [r3, #0]
   1493c:	b2db      	uxtb	r3, r3
   1493e:	011b      	lsls	r3, r3, #4
   14940:	693a      	ldr	r2, [r7, #16]
   14942:	18d3      	adds	r3, r2, r3
   14944:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   14946:	4b47      	ldr	r3, [pc, #284]	; (14a64 <socket+0x1f0>)
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	b2db      	uxtb	r3, r3
   1494c:	3301      	adds	r3, #1
   1494e:	4a46      	ldr	r2, [pc, #280]	; (14a68 <socket+0x1f4>)
   14950:	4013      	ands	r3, r2
   14952:	d504      	bpl.n	1495e <socket+0xea>
   14954:	3b01      	subs	r3, #1
   14956:	2204      	movs	r2, #4
   14958:	4252      	negs	r2, r2
   1495a:	4313      	orrs	r3, r2
   1495c:	3301      	adds	r3, #1
   1495e:	b2da      	uxtb	r2, r3
   14960:	4b40      	ldr	r3, [pc, #256]	; (14a64 <socket+0x1f0>)
   14962:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   14964:	69bb      	ldr	r3, [r7, #24]
   14966:	7a9b      	ldrb	r3, [r3, #10]
   14968:	b2db      	uxtb	r3, r3
   1496a:	2b00      	cmp	r3, #0
   1496c:	d108      	bne.n	14980 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   1496e:	2317      	movs	r3, #23
   14970:	18fb      	adds	r3, r7, r3
   14972:	781b      	ldrb	r3, [r3, #0]
   14974:	3307      	adds	r3, #7
   14976:	b2da      	uxtb	r2, r3
   14978:	231f      	movs	r3, #31
   1497a:	18fb      	adds	r3, r7, r3
   1497c:	701a      	strb	r2, [r3, #0]
					break;
   1497e:	e00b      	b.n	14998 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   14980:	231e      	movs	r3, #30
   14982:	18fb      	adds	r3, r7, r3
   14984:	781a      	ldrb	r2, [r3, #0]
   14986:	231e      	movs	r3, #30
   14988:	18fb      	adds	r3, r7, r3
   1498a:	3201      	adds	r2, #1
   1498c:	701a      	strb	r2, [r3, #0]
   1498e:	231e      	movs	r3, #30
   14990:	18fb      	adds	r3, r7, r3
   14992:	781b      	ldrb	r3, [r3, #0]
   14994:	2b03      	cmp	r3, #3
   14996:	d9ca      	bls.n	1492e <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   14998:	231f      	movs	r3, #31
   1499a:	18fb      	adds	r3, r7, r3
   1499c:	781b      	ldrb	r3, [r3, #0]
   1499e:	2b7f      	cmp	r3, #127	; 0x7f
   149a0:	d84f      	bhi.n	14a42 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   149a2:	69bb      	ldr	r3, [r7, #24]
   149a4:	2210      	movs	r2, #16
   149a6:	2100      	movs	r1, #0
   149a8:	0018      	movs	r0, r3
   149aa:	4b30      	ldr	r3, [pc, #192]	; (14a6c <socket+0x1f8>)
   149ac:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   149ae:	69bb      	ldr	r3, [r7, #24]
   149b0:	2201      	movs	r2, #1
   149b2:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   149b4:	4b2e      	ldr	r3, [pc, #184]	; (14a70 <socket+0x1fc>)
   149b6:	881b      	ldrh	r3, [r3, #0]
   149b8:	b29b      	uxth	r3, r3
   149ba:	3301      	adds	r3, #1
   149bc:	b29a      	uxth	r2, r3
   149be:	4b2c      	ldr	r3, [pc, #176]	; (14a70 <socket+0x1fc>)
   149c0:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   149c2:	4b2b      	ldr	r3, [pc, #172]	; (14a70 <socket+0x1fc>)
   149c4:	881b      	ldrh	r3, [r3, #0]
   149c6:	b29b      	uxth	r3, r3
   149c8:	2b00      	cmp	r3, #0
   149ca:	d106      	bne.n	149da <socket+0x166>
				++gu16SessionID;
   149cc:	4b28      	ldr	r3, [pc, #160]	; (14a70 <socket+0x1fc>)
   149ce:	881b      	ldrh	r3, [r3, #0]
   149d0:	b29b      	uxth	r3, r3
   149d2:	3301      	adds	r3, #1
   149d4:	b29a      	uxth	r2, r3
   149d6:	4b26      	ldr	r3, [pc, #152]	; (14a70 <socket+0x1fc>)
   149d8:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   149da:	4b25      	ldr	r3, [pc, #148]	; (14a70 <socket+0x1fc>)
   149dc:	881b      	ldrh	r3, [r3, #0]
   149de:	b29a      	uxth	r2, r3
   149e0:	69bb      	ldr	r3, [r7, #24]
   149e2:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   149e4:	4b23      	ldr	r3, [pc, #140]	; (14a74 <socket+0x200>)
   149e6:	0018      	movs	r0, r3
   149e8:	4b23      	ldr	r3, [pc, #140]	; (14a78 <socket+0x204>)
   149ea:	4798      	blx	r3
   149ec:	231f      	movs	r3, #31
   149ee:	18fb      	adds	r3, r7, r3
   149f0:	2100      	movs	r1, #0
   149f2:	5659      	ldrsb	r1, [r3, r1]
   149f4:	4b1e      	ldr	r3, [pc, #120]	; (14a70 <socket+0x1fc>)
   149f6:	881b      	ldrh	r3, [r3, #0]
   149f8:	b29b      	uxth	r3, r3
   149fa:	001a      	movs	r2, r3
   149fc:	4b1f      	ldr	r3, [pc, #124]	; (14a7c <socket+0x208>)
   149fe:	0018      	movs	r0, r3
   14a00:	4b1d      	ldr	r3, [pc, #116]	; (14a78 <socket+0x204>)
   14a02:	4798      	blx	r3
   14a04:	4b1e      	ldr	r3, [pc, #120]	; (14a80 <socket+0x20c>)
   14a06:	0018      	movs	r0, r3
   14a08:	4b1b      	ldr	r3, [pc, #108]	; (14a78 <socket+0x204>)
   14a0a:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   14a0c:	1d3b      	adds	r3, r7, #4
   14a0e:	781b      	ldrb	r3, [r3, #0]
   14a10:	2201      	movs	r2, #1
   14a12:	4013      	ands	r3, r2
   14a14:	d015      	beq.n	14a42 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   14a16:	230c      	movs	r3, #12
   14a18:	18fb      	adds	r3, r7, r3
   14a1a:	221f      	movs	r2, #31
   14a1c:	18ba      	adds	r2, r7, r2
   14a1e:	7812      	ldrb	r2, [r2, #0]
   14a20:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   14a22:	69bb      	ldr	r3, [r7, #24]
   14a24:	2221      	movs	r2, #33	; 0x21
   14a26:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   14a28:	230c      	movs	r3, #12
   14a2a:	18fa      	adds	r2, r7, r3
   14a2c:	2300      	movs	r3, #0
   14a2e:	9302      	str	r3, [sp, #8]
   14a30:	2300      	movs	r3, #0
   14a32:	9301      	str	r3, [sp, #4]
   14a34:	2300      	movs	r3, #0
   14a36:	9300      	str	r3, [sp, #0]
   14a38:	2304      	movs	r3, #4
   14a3a:	2150      	movs	r1, #80	; 0x50
   14a3c:	2002      	movs	r0, #2
   14a3e:	4c11      	ldr	r4, [pc, #68]	; (14a84 <socket+0x210>)
   14a40:	47a0      	blx	r4
			}
		}
	}
	return sock;
   14a42:	231f      	movs	r3, #31
   14a44:	18fb      	adds	r3, r7, r3
   14a46:	781b      	ldrb	r3, [r3, #0]
   14a48:	b25b      	sxtb	r3, r3
}
   14a4a:	0018      	movs	r0, r3
   14a4c:	46bd      	mov	sp, r7
   14a4e:	b009      	add	sp, #36	; 0x24
   14a50:	bd90      	pop	{r4, r7, pc}
   14a52:	46c0      	nop			; (mov r8, r8)
   14a54:	20003eed 	.word	0x20003eed
   14a58:	20005784 	.word	0x20005784
   14a5c:	00021fdd 	.word	0x00021fdd
   14a60:	200057f4 	.word	0x200057f4
   14a64:	20003eee 	.word	0x20003eee
   14a68:	80000003 	.word	0x80000003
   14a6c:	0000fee5 	.word	0x0000fee5
   14a70:	20003eea 	.word	0x20003eea
   14a74:	00029244 	.word	0x00029244
   14a78:	0000d14d 	.word	0x0000d14d
   14a7c:	00029268 	.word	0x00029268
   14a80:	00029264 	.word	0x00029264
   14a84:	00010145 	.word	0x00010145

00014a88 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   14a88:	b5b0      	push	{r4, r5, r7, lr}
   14a8a:	b08a      	sub	sp, #40	; 0x28
   14a8c:	af04      	add	r7, sp, #16
   14a8e:	6039      	str	r1, [r7, #0]
   14a90:	0011      	movs	r1, r2
   14a92:	1dfb      	adds	r3, r7, #7
   14a94:	1c02      	adds	r2, r0, #0
   14a96:	701a      	strb	r2, [r3, #0]
   14a98:	1dbb      	adds	r3, r7, #6
   14a9a:	1c0a      	adds	r2, r1, #0
   14a9c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   14a9e:	2317      	movs	r3, #23
   14aa0:	18fb      	adds	r3, r7, r3
   14aa2:	22fa      	movs	r2, #250	; 0xfa
   14aa4:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   14aa6:	1dfb      	adds	r3, r7, #7
   14aa8:	781b      	ldrb	r3, [r3, #0]
   14aaa:	2b7f      	cmp	r3, #127	; 0x7f
   14aac:	d867      	bhi.n	14b7e <connect+0xf6>
   14aae:	683b      	ldr	r3, [r7, #0]
   14ab0:	2b00      	cmp	r3, #0
   14ab2:	d064      	beq.n	14b7e <connect+0xf6>
   14ab4:	1dfb      	adds	r3, r7, #7
   14ab6:	781b      	ldrb	r3, [r3, #0]
   14ab8:	b25b      	sxtb	r3, r3
   14aba:	4a35      	ldr	r2, [pc, #212]	; (14b90 <connect+0x108>)
   14abc:	011b      	lsls	r3, r3, #4
   14abe:	18d3      	adds	r3, r2, r3
   14ac0:	330a      	adds	r3, #10
   14ac2:	781b      	ldrb	r3, [r3, #0]
   14ac4:	b2db      	uxtb	r3, r3
   14ac6:	2b01      	cmp	r3, #1
   14ac8:	d159      	bne.n	14b7e <connect+0xf6>
   14aca:	1dbb      	adds	r3, r7, #6
   14acc:	781b      	ldrb	r3, [r3, #0]
   14ace:	2b00      	cmp	r3, #0
   14ad0:	d055      	beq.n	14b7e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   14ad2:	2316      	movs	r3, #22
   14ad4:	18fb      	adds	r3, r7, r3
   14ad6:	2244      	movs	r2, #68	; 0x44
   14ad8:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   14ada:	1dfb      	adds	r3, r7, #7
   14adc:	781b      	ldrb	r3, [r3, #0]
   14ade:	b25b      	sxtb	r3, r3
   14ae0:	4a2b      	ldr	r2, [pc, #172]	; (14b90 <connect+0x108>)
   14ae2:	011b      	lsls	r3, r3, #4
   14ae4:	18d3      	adds	r3, r2, r3
   14ae6:	330b      	adds	r3, #11
   14ae8:	781b      	ldrb	r3, [r3, #0]
   14aea:	b2db      	uxtb	r3, r3
   14aec:	001a      	movs	r2, r3
   14aee:	2301      	movs	r3, #1
   14af0:	4013      	ands	r3, r2
   14af2:	d00f      	beq.n	14b14 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   14af4:	2316      	movs	r3, #22
   14af6:	18fb      	adds	r3, r7, r3
   14af8:	224b      	movs	r2, #75	; 0x4b
   14afa:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   14afc:	1dfb      	adds	r3, r7, #7
   14afe:	781b      	ldrb	r3, [r3, #0]
   14b00:	b25b      	sxtb	r3, r3
   14b02:	4a23      	ldr	r2, [pc, #140]	; (14b90 <connect+0x108>)
   14b04:	011b      	lsls	r3, r3, #4
   14b06:	18d3      	adds	r3, r2, r3
   14b08:	330b      	adds	r3, #11
   14b0a:	781b      	ldrb	r3, [r3, #0]
   14b0c:	b2da      	uxtb	r2, r3
   14b0e:	2308      	movs	r3, #8
   14b10:	18fb      	adds	r3, r7, r3
   14b12:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   14b14:	2308      	movs	r3, #8
   14b16:	18fb      	adds	r3, r7, r3
   14b18:	1dfa      	adds	r2, r7, #7
   14b1a:	7812      	ldrb	r2, [r2, #0]
   14b1c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   14b1e:	6839      	ldr	r1, [r7, #0]
   14b20:	2308      	movs	r3, #8
   14b22:	18fb      	adds	r3, r7, r3
   14b24:	2208      	movs	r2, #8
   14b26:	0018      	movs	r0, r3
   14b28:	4b1a      	ldr	r3, [pc, #104]	; (14b94 <connect+0x10c>)
   14b2a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   14b2c:	1dfb      	adds	r3, r7, #7
   14b2e:	781b      	ldrb	r3, [r3, #0]
   14b30:	b25b      	sxtb	r3, r3
   14b32:	4a17      	ldr	r2, [pc, #92]	; (14b90 <connect+0x108>)
   14b34:	011b      	lsls	r3, r3, #4
   14b36:	18d3      	adds	r3, r2, r3
   14b38:	3306      	adds	r3, #6
   14b3a:	881b      	ldrh	r3, [r3, #0]
   14b3c:	b29a      	uxth	r2, r3
   14b3e:	2308      	movs	r3, #8
   14b40:	18fb      	adds	r3, r7, r3
   14b42:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   14b44:	2317      	movs	r3, #23
   14b46:	18fc      	adds	r4, r7, r3
   14b48:	2308      	movs	r3, #8
   14b4a:	18fa      	adds	r2, r7, r3
   14b4c:	2316      	movs	r3, #22
   14b4e:	18fb      	adds	r3, r7, r3
   14b50:	7819      	ldrb	r1, [r3, #0]
   14b52:	2300      	movs	r3, #0
   14b54:	9302      	str	r3, [sp, #8]
   14b56:	2300      	movs	r3, #0
   14b58:	9301      	str	r3, [sp, #4]
   14b5a:	2300      	movs	r3, #0
   14b5c:	9300      	str	r3, [sp, #0]
   14b5e:	230c      	movs	r3, #12
   14b60:	2002      	movs	r0, #2
   14b62:	4d0d      	ldr	r5, [pc, #52]	; (14b98 <connect+0x110>)
   14b64:	47a8      	blx	r5
   14b66:	0003      	movs	r3, r0
   14b68:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   14b6a:	2317      	movs	r3, #23
   14b6c:	18fb      	adds	r3, r7, r3
   14b6e:	781b      	ldrb	r3, [r3, #0]
   14b70:	b25b      	sxtb	r3, r3
   14b72:	2b00      	cmp	r3, #0
   14b74:	d003      	beq.n	14b7e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   14b76:	2317      	movs	r3, #23
   14b78:	18fb      	adds	r3, r7, r3
   14b7a:	22f7      	movs	r2, #247	; 0xf7
   14b7c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   14b7e:	2317      	movs	r3, #23
   14b80:	18fb      	adds	r3, r7, r3
   14b82:	781b      	ldrb	r3, [r3, #0]
   14b84:	b25b      	sxtb	r3, r3
}
   14b86:	0018      	movs	r0, r3
   14b88:	46bd      	mov	sp, r7
   14b8a:	b006      	add	sp, #24
   14b8c:	bdb0      	pop	{r4, r5, r7, pc}
   14b8e:	46c0      	nop			; (mov r8, r8)
   14b90:	20005784 	.word	0x20005784
   14b94:	0000fea9 	.word	0x0000fea9
   14b98:	00010145 	.word	0x00010145

00014b9c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   14b9c:	b590      	push	{r4, r7, lr}
   14b9e:	b08f      	sub	sp, #60	; 0x3c
   14ba0:	af04      	add	r7, sp, #16
   14ba2:	0004      	movs	r4, r0
   14ba4:	60b9      	str	r1, [r7, #8]
   14ba6:	0010      	movs	r0, r2
   14ba8:	0019      	movs	r1, r3
   14baa:	230f      	movs	r3, #15
   14bac:	18fb      	adds	r3, r7, r3
   14bae:	1c22      	adds	r2, r4, #0
   14bb0:	701a      	strb	r2, [r3, #0]
   14bb2:	230c      	movs	r3, #12
   14bb4:	18fb      	adds	r3, r7, r3
   14bb6:	1c02      	adds	r2, r0, #0
   14bb8:	801a      	strh	r2, [r3, #0]
   14bba:	1dbb      	adds	r3, r7, #6
   14bbc:	1c0a      	adds	r2, r1, #0
   14bbe:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   14bc0:	2326      	movs	r3, #38	; 0x26
   14bc2:	18fb      	adds	r3, r7, r3
   14bc4:	2206      	movs	r2, #6
   14bc6:	4252      	negs	r2, r2
   14bc8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   14bca:	230f      	movs	r3, #15
   14bcc:	18fb      	adds	r3, r7, r3
   14bce:	781b      	ldrb	r3, [r3, #0]
   14bd0:	2b7f      	cmp	r3, #127	; 0x7f
   14bd2:	d900      	bls.n	14bd6 <send+0x3a>
   14bd4:	e087      	b.n	14ce6 <send+0x14a>
   14bd6:	68bb      	ldr	r3, [r7, #8]
   14bd8:	2b00      	cmp	r3, #0
   14bda:	d100      	bne.n	14bde <send+0x42>
   14bdc:	e083      	b.n	14ce6 <send+0x14a>
   14bde:	230c      	movs	r3, #12
   14be0:	18fb      	adds	r3, r7, r3
   14be2:	881a      	ldrh	r2, [r3, #0]
   14be4:	23af      	movs	r3, #175	; 0xaf
   14be6:	00db      	lsls	r3, r3, #3
   14be8:	429a      	cmp	r2, r3
   14bea:	d900      	bls.n	14bee <send+0x52>
   14bec:	e07b      	b.n	14ce6 <send+0x14a>
   14bee:	230f      	movs	r3, #15
   14bf0:	18fb      	adds	r3, r7, r3
   14bf2:	781b      	ldrb	r3, [r3, #0]
   14bf4:	b25b      	sxtb	r3, r3
   14bf6:	4a40      	ldr	r2, [pc, #256]	; (14cf8 <send+0x15c>)
   14bf8:	011b      	lsls	r3, r3, #4
   14bfa:	18d3      	adds	r3, r2, r3
   14bfc:	330a      	adds	r3, #10
   14bfe:	781b      	ldrb	r3, [r3, #0]
   14c00:	b2db      	uxtb	r3, r3
   14c02:	2b01      	cmp	r3, #1
   14c04:	d16f      	bne.n	14ce6 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   14c06:	2323      	movs	r3, #35	; 0x23
   14c08:	18fb      	adds	r3, r7, r3
   14c0a:	2245      	movs	r2, #69	; 0x45
   14c0c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   14c0e:	2324      	movs	r3, #36	; 0x24
   14c10:	18fb      	adds	r3, r7, r3
   14c12:	2250      	movs	r2, #80	; 0x50
   14c14:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   14c16:	2310      	movs	r3, #16
   14c18:	18fb      	adds	r3, r7, r3
   14c1a:	220f      	movs	r2, #15
   14c1c:	18ba      	adds	r2, r7, r2
   14c1e:	7812      	ldrb	r2, [r2, #0]
   14c20:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   14c22:	2310      	movs	r3, #16
   14c24:	18fb      	adds	r3, r7, r3
   14c26:	220c      	movs	r2, #12
   14c28:	18ba      	adds	r2, r7, r2
   14c2a:	8812      	ldrh	r2, [r2, #0]
   14c2c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   14c2e:	230f      	movs	r3, #15
   14c30:	18fb      	adds	r3, r7, r3
   14c32:	781b      	ldrb	r3, [r3, #0]
   14c34:	b25b      	sxtb	r3, r3
   14c36:	4a30      	ldr	r2, [pc, #192]	; (14cf8 <send+0x15c>)
   14c38:	011b      	lsls	r3, r3, #4
   14c3a:	18d3      	adds	r3, r2, r3
   14c3c:	3306      	adds	r3, #6
   14c3e:	881b      	ldrh	r3, [r3, #0]
   14c40:	b29a      	uxth	r2, r3
   14c42:	2310      	movs	r3, #16
   14c44:	18fb      	adds	r3, r7, r3
   14c46:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   14c48:	230f      	movs	r3, #15
   14c4a:	18fb      	adds	r3, r7, r3
   14c4c:	781b      	ldrb	r3, [r3, #0]
   14c4e:	b25b      	sxtb	r3, r3
   14c50:	2b06      	cmp	r3, #6
   14c52:	dd03      	ble.n	14c5c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   14c54:	2324      	movs	r3, #36	; 0x24
   14c56:	18fb      	adds	r3, r7, r3
   14c58:	2244      	movs	r2, #68	; 0x44
   14c5a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   14c5c:	230f      	movs	r3, #15
   14c5e:	18fb      	adds	r3, r7, r3
   14c60:	781b      	ldrb	r3, [r3, #0]
   14c62:	b25b      	sxtb	r3, r3
   14c64:	4a24      	ldr	r2, [pc, #144]	; (14cf8 <send+0x15c>)
   14c66:	011b      	lsls	r3, r3, #4
   14c68:	18d3      	adds	r3, r2, r3
   14c6a:	330b      	adds	r3, #11
   14c6c:	781b      	ldrb	r3, [r3, #0]
   14c6e:	b2db      	uxtb	r3, r3
   14c70:	001a      	movs	r2, r3
   14c72:	2301      	movs	r3, #1
   14c74:	4013      	ands	r3, r2
   14c76:	d00f      	beq.n	14c98 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   14c78:	2323      	movs	r3, #35	; 0x23
   14c7a:	18fb      	adds	r3, r7, r3
   14c7c:	224c      	movs	r2, #76	; 0x4c
   14c7e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   14c80:	230f      	movs	r3, #15
   14c82:	18fb      	adds	r3, r7, r3
   14c84:	2200      	movs	r2, #0
   14c86:	569a      	ldrsb	r2, [r3, r2]
   14c88:	2324      	movs	r3, #36	; 0x24
   14c8a:	18fb      	adds	r3, r7, r3
   14c8c:	491a      	ldr	r1, [pc, #104]	; (14cf8 <send+0x15c>)
   14c8e:	0112      	lsls	r2, r2, #4
   14c90:	188a      	adds	r2, r1, r2
   14c92:	3208      	adds	r2, #8
   14c94:	8812      	ldrh	r2, [r2, #0]
   14c96:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   14c98:	2323      	movs	r3, #35	; 0x23
   14c9a:	18fb      	adds	r3, r7, r3
   14c9c:	781b      	ldrb	r3, [r3, #0]
   14c9e:	2280      	movs	r2, #128	; 0x80
   14ca0:	4252      	negs	r2, r2
   14ca2:	4313      	orrs	r3, r2
   14ca4:	b2d9      	uxtb	r1, r3
   14ca6:	2310      	movs	r3, #16
   14ca8:	18fa      	adds	r2, r7, r3
   14caa:	2324      	movs	r3, #36	; 0x24
   14cac:	18fb      	adds	r3, r7, r3
   14cae:	881b      	ldrh	r3, [r3, #0]
   14cb0:	9302      	str	r3, [sp, #8]
   14cb2:	230c      	movs	r3, #12
   14cb4:	18fb      	adds	r3, r7, r3
   14cb6:	881b      	ldrh	r3, [r3, #0]
   14cb8:	9301      	str	r3, [sp, #4]
   14cba:	68bb      	ldr	r3, [r7, #8]
   14cbc:	9300      	str	r3, [sp, #0]
   14cbe:	2310      	movs	r3, #16
   14cc0:	2002      	movs	r0, #2
   14cc2:	4c0e      	ldr	r4, [pc, #56]	; (14cfc <send+0x160>)
   14cc4:	47a0      	blx	r4
   14cc6:	0003      	movs	r3, r0
   14cc8:	001a      	movs	r2, r3
   14cca:	2326      	movs	r3, #38	; 0x26
   14ccc:	18fb      	adds	r3, r7, r3
   14cce:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   14cd0:	2326      	movs	r3, #38	; 0x26
   14cd2:	18fb      	adds	r3, r7, r3
   14cd4:	2200      	movs	r2, #0
   14cd6:	5e9b      	ldrsh	r3, [r3, r2]
   14cd8:	2b00      	cmp	r3, #0
   14cda:	d004      	beq.n	14ce6 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   14cdc:	2326      	movs	r3, #38	; 0x26
   14cde:	18fb      	adds	r3, r7, r3
   14ce0:	220e      	movs	r2, #14
   14ce2:	4252      	negs	r2, r2
   14ce4:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   14ce6:	2326      	movs	r3, #38	; 0x26
   14ce8:	18fb      	adds	r3, r7, r3
   14cea:	2200      	movs	r2, #0
   14cec:	5e9b      	ldrsh	r3, [r3, r2]
}
   14cee:	0018      	movs	r0, r3
   14cf0:	46bd      	mov	sp, r7
   14cf2:	b00b      	add	sp, #44	; 0x2c
   14cf4:	bd90      	pop	{r4, r7, pc}
   14cf6:	46c0      	nop			; (mov r8, r8)
   14cf8:	20005784 	.word	0x20005784
   14cfc:	00010145 	.word	0x00010145

00014d00 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   14d00:	b590      	push	{r4, r7, lr}
   14d02:	b08d      	sub	sp, #52	; 0x34
   14d04:	af04      	add	r7, sp, #16
   14d06:	60b9      	str	r1, [r7, #8]
   14d08:	0011      	movs	r1, r2
   14d0a:	607b      	str	r3, [r7, #4]
   14d0c:	230f      	movs	r3, #15
   14d0e:	18fb      	adds	r3, r7, r3
   14d10:	1c02      	adds	r2, r0, #0
   14d12:	701a      	strb	r2, [r3, #0]
   14d14:	230c      	movs	r3, #12
   14d16:	18fb      	adds	r3, r7, r3
   14d18:	1c0a      	adds	r2, r1, #0
   14d1a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   14d1c:	231e      	movs	r3, #30
   14d1e:	18fb      	adds	r3, r7, r3
   14d20:	2206      	movs	r2, #6
   14d22:	4252      	negs	r2, r2
   14d24:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   14d26:	230f      	movs	r3, #15
   14d28:	18fb      	adds	r3, r7, r3
   14d2a:	781b      	ldrb	r3, [r3, #0]
   14d2c:	2b7f      	cmp	r3, #127	; 0x7f
   14d2e:	d900      	bls.n	14d32 <recv+0x32>
   14d30:	e099      	b.n	14e66 <recv+0x166>
   14d32:	68bb      	ldr	r3, [r7, #8]
   14d34:	2b00      	cmp	r3, #0
   14d36:	d100      	bne.n	14d3a <recv+0x3a>
   14d38:	e095      	b.n	14e66 <recv+0x166>
   14d3a:	230c      	movs	r3, #12
   14d3c:	18fb      	adds	r3, r7, r3
   14d3e:	881b      	ldrh	r3, [r3, #0]
   14d40:	2b00      	cmp	r3, #0
   14d42:	d100      	bne.n	14d46 <recv+0x46>
   14d44:	e08f      	b.n	14e66 <recv+0x166>
   14d46:	230f      	movs	r3, #15
   14d48:	18fb      	adds	r3, r7, r3
   14d4a:	781b      	ldrb	r3, [r3, #0]
   14d4c:	b25b      	sxtb	r3, r3
   14d4e:	4a4a      	ldr	r2, [pc, #296]	; (14e78 <recv+0x178>)
   14d50:	011b      	lsls	r3, r3, #4
   14d52:	18d3      	adds	r3, r2, r3
   14d54:	330a      	adds	r3, #10
   14d56:	781b      	ldrb	r3, [r3, #0]
   14d58:	b2db      	uxtb	r3, r3
   14d5a:	2b01      	cmp	r3, #1
   14d5c:	d000      	beq.n	14d60 <recv+0x60>
   14d5e:	e082      	b.n	14e66 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   14d60:	231e      	movs	r3, #30
   14d62:	18fb      	adds	r3, r7, r3
   14d64:	2200      	movs	r2, #0
   14d66:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   14d68:	230f      	movs	r3, #15
   14d6a:	18fb      	adds	r3, r7, r3
   14d6c:	2200      	movs	r2, #0
   14d6e:	569a      	ldrsb	r2, [r3, r2]
   14d70:	4b41      	ldr	r3, [pc, #260]	; (14e78 <recv+0x178>)
   14d72:	0112      	lsls	r2, r2, #4
   14d74:	68b9      	ldr	r1, [r7, #8]
   14d76:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   14d78:	230f      	movs	r3, #15
   14d7a:	18fb      	adds	r3, r7, r3
   14d7c:	781b      	ldrb	r3, [r3, #0]
   14d7e:	b25b      	sxtb	r3, r3
   14d80:	4a3d      	ldr	r2, [pc, #244]	; (14e78 <recv+0x178>)
   14d82:	011b      	lsls	r3, r3, #4
   14d84:	18d3      	adds	r3, r2, r3
   14d86:	3304      	adds	r3, #4
   14d88:	220c      	movs	r2, #12
   14d8a:	18ba      	adds	r2, r7, r2
   14d8c:	8812      	ldrh	r2, [r2, #0]
   14d8e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   14d90:	230f      	movs	r3, #15
   14d92:	18fb      	adds	r3, r7, r3
   14d94:	781b      	ldrb	r3, [r3, #0]
   14d96:	b25b      	sxtb	r3, r3
   14d98:	4a37      	ldr	r2, [pc, #220]	; (14e78 <recv+0x178>)
   14d9a:	011b      	lsls	r3, r3, #4
   14d9c:	18d3      	adds	r3, r2, r3
   14d9e:	330c      	adds	r3, #12
   14da0:	781b      	ldrb	r3, [r3, #0]
   14da2:	b2db      	uxtb	r3, r3
   14da4:	2b00      	cmp	r3, #0
   14da6:	d15e      	bne.n	14e66 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   14da8:	231d      	movs	r3, #29
   14daa:	18fb      	adds	r3, r7, r3
   14dac:	2246      	movs	r2, #70	; 0x46
   14dae:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   14db0:	230f      	movs	r3, #15
   14db2:	18fb      	adds	r3, r7, r3
   14db4:	781b      	ldrb	r3, [r3, #0]
   14db6:	b25b      	sxtb	r3, r3
   14db8:	4a2f      	ldr	r2, [pc, #188]	; (14e78 <recv+0x178>)
   14dba:	011b      	lsls	r3, r3, #4
   14dbc:	18d3      	adds	r3, r2, r3
   14dbe:	330c      	adds	r3, #12
   14dc0:	2201      	movs	r2, #1
   14dc2:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   14dc4:	230f      	movs	r3, #15
   14dc6:	18fb      	adds	r3, r7, r3
   14dc8:	781b      	ldrb	r3, [r3, #0]
   14dca:	b25b      	sxtb	r3, r3
   14dcc:	4a2a      	ldr	r2, [pc, #168]	; (14e78 <recv+0x178>)
   14dce:	011b      	lsls	r3, r3, #4
   14dd0:	18d3      	adds	r3, r2, r3
   14dd2:	330b      	adds	r3, #11
   14dd4:	781b      	ldrb	r3, [r3, #0]
   14dd6:	b2db      	uxtb	r3, r3
   14dd8:	001a      	movs	r2, r3
   14dda:	2301      	movs	r3, #1
   14ddc:	4013      	ands	r3, r2
   14dde:	d003      	beq.n	14de8 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   14de0:	231d      	movs	r3, #29
   14de2:	18fb      	adds	r3, r7, r3
   14de4:	224d      	movs	r2, #77	; 0x4d
   14de6:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   14de8:	687b      	ldr	r3, [r7, #4]
   14dea:	2b00      	cmp	r3, #0
   14dec:	d105      	bne.n	14dfa <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   14dee:	2314      	movs	r3, #20
   14df0:	18fb      	adds	r3, r7, r3
   14df2:	2201      	movs	r2, #1
   14df4:	4252      	negs	r2, r2
   14df6:	601a      	str	r2, [r3, #0]
   14df8:	e003      	b.n	14e02 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   14dfa:	2314      	movs	r3, #20
   14dfc:	18fb      	adds	r3, r7, r3
   14dfe:	687a      	ldr	r2, [r7, #4]
   14e00:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   14e02:	2314      	movs	r3, #20
   14e04:	18fb      	adds	r3, r7, r3
   14e06:	220f      	movs	r2, #15
   14e08:	18ba      	adds	r2, r7, r2
   14e0a:	7812      	ldrb	r2, [r2, #0]
   14e0c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   14e0e:	230f      	movs	r3, #15
   14e10:	18fb      	adds	r3, r7, r3
   14e12:	781b      	ldrb	r3, [r3, #0]
   14e14:	b25b      	sxtb	r3, r3
   14e16:	4a18      	ldr	r2, [pc, #96]	; (14e78 <recv+0x178>)
   14e18:	011b      	lsls	r3, r3, #4
   14e1a:	18d3      	adds	r3, r2, r3
   14e1c:	3306      	adds	r3, #6
   14e1e:	881b      	ldrh	r3, [r3, #0]
   14e20:	b29a      	uxth	r2, r3
   14e22:	2314      	movs	r3, #20
   14e24:	18fb      	adds	r3, r7, r3
   14e26:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   14e28:	2314      	movs	r3, #20
   14e2a:	18fa      	adds	r2, r7, r3
   14e2c:	231d      	movs	r3, #29
   14e2e:	18fb      	adds	r3, r7, r3
   14e30:	7819      	ldrb	r1, [r3, #0]
   14e32:	2300      	movs	r3, #0
   14e34:	9302      	str	r3, [sp, #8]
   14e36:	2300      	movs	r3, #0
   14e38:	9301      	str	r3, [sp, #4]
   14e3a:	2300      	movs	r3, #0
   14e3c:	9300      	str	r3, [sp, #0]
   14e3e:	2308      	movs	r3, #8
   14e40:	2002      	movs	r0, #2
   14e42:	4c0e      	ldr	r4, [pc, #56]	; (14e7c <recv+0x17c>)
   14e44:	47a0      	blx	r4
   14e46:	0003      	movs	r3, r0
   14e48:	001a      	movs	r2, r3
   14e4a:	231e      	movs	r3, #30
   14e4c:	18fb      	adds	r3, r7, r3
   14e4e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   14e50:	231e      	movs	r3, #30
   14e52:	18fb      	adds	r3, r7, r3
   14e54:	2200      	movs	r2, #0
   14e56:	5e9b      	ldrsh	r3, [r3, r2]
   14e58:	2b00      	cmp	r3, #0
   14e5a:	d004      	beq.n	14e66 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   14e5c:	231e      	movs	r3, #30
   14e5e:	18fb      	adds	r3, r7, r3
   14e60:	220e      	movs	r2, #14
   14e62:	4252      	negs	r2, r2
   14e64:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   14e66:	231e      	movs	r3, #30
   14e68:	18fb      	adds	r3, r7, r3
   14e6a:	2200      	movs	r2, #0
   14e6c:	5e9b      	ldrsh	r3, [r3, r2]
}
   14e6e:	0018      	movs	r0, r3
   14e70:	46bd      	mov	sp, r7
   14e72:	b009      	add	sp, #36	; 0x24
   14e74:	bd90      	pop	{r4, r7, pc}
   14e76:	46c0      	nop			; (mov r8, r8)
   14e78:	20005784 	.word	0x20005784
   14e7c:	00010145 	.word	0x00010145

00014e80 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   14e80:	b5b0      	push	{r4, r5, r7, lr}
   14e82:	b088      	sub	sp, #32
   14e84:	af04      	add	r7, sp, #16
   14e86:	0002      	movs	r2, r0
   14e88:	1dfb      	adds	r3, r7, #7
   14e8a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   14e8c:	230f      	movs	r3, #15
   14e8e:	18fb      	adds	r3, r7, r3
   14e90:	22fa      	movs	r2, #250	; 0xfa
   14e92:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   14e94:	4b43      	ldr	r3, [pc, #268]	; (14fa4 <close+0x124>)
   14e96:	0018      	movs	r0, r3
   14e98:	4b43      	ldr	r3, [pc, #268]	; (14fa8 <close+0x128>)
   14e9a:	4798      	blx	r3
   14e9c:	1dfb      	adds	r3, r7, #7
   14e9e:	2200      	movs	r2, #0
   14ea0:	569a      	ldrsb	r2, [r3, r2]
   14ea2:	4b42      	ldr	r3, [pc, #264]	; (14fac <close+0x12c>)
   14ea4:	0011      	movs	r1, r2
   14ea6:	0018      	movs	r0, r3
   14ea8:	4b3f      	ldr	r3, [pc, #252]	; (14fa8 <close+0x128>)
   14eaa:	4798      	blx	r3
   14eac:	4b40      	ldr	r3, [pc, #256]	; (14fb0 <close+0x130>)
   14eae:	0018      	movs	r0, r3
   14eb0:	4b3d      	ldr	r3, [pc, #244]	; (14fa8 <close+0x128>)
   14eb2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   14eb4:	1dfb      	adds	r3, r7, #7
   14eb6:	781b      	ldrb	r3, [r3, #0]
   14eb8:	2b7f      	cmp	r3, #127	; 0x7f
   14eba:	d86a      	bhi.n	14f92 <close+0x112>
   14ebc:	1dfb      	adds	r3, r7, #7
   14ebe:	781b      	ldrb	r3, [r3, #0]
   14ec0:	b25b      	sxtb	r3, r3
   14ec2:	4a3c      	ldr	r2, [pc, #240]	; (14fb4 <close+0x134>)
   14ec4:	011b      	lsls	r3, r3, #4
   14ec6:	18d3      	adds	r3, r2, r3
   14ec8:	330a      	adds	r3, #10
   14eca:	781b      	ldrb	r3, [r3, #0]
   14ecc:	b2db      	uxtb	r3, r3
   14ece:	2b01      	cmp	r3, #1
   14ed0:	d15f      	bne.n	14f92 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   14ed2:	230e      	movs	r3, #14
   14ed4:	18fb      	adds	r3, r7, r3
   14ed6:	2249      	movs	r2, #73	; 0x49
   14ed8:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   14eda:	2308      	movs	r3, #8
   14edc:	18fb      	adds	r3, r7, r3
   14ede:	1dfa      	adds	r2, r7, #7
   14ee0:	7812      	ldrb	r2, [r2, #0]
   14ee2:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   14ee4:	1dfb      	adds	r3, r7, #7
   14ee6:	781b      	ldrb	r3, [r3, #0]
   14ee8:	b25b      	sxtb	r3, r3
   14eea:	4a32      	ldr	r2, [pc, #200]	; (14fb4 <close+0x134>)
   14eec:	011b      	lsls	r3, r3, #4
   14eee:	18d3      	adds	r3, r2, r3
   14ef0:	3306      	adds	r3, #6
   14ef2:	881b      	ldrh	r3, [r3, #0]
   14ef4:	b29a      	uxth	r2, r3
   14ef6:	2308      	movs	r3, #8
   14ef8:	18fb      	adds	r3, r7, r3
   14efa:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   14efc:	1dfb      	adds	r3, r7, #7
   14efe:	781b      	ldrb	r3, [r3, #0]
   14f00:	b25b      	sxtb	r3, r3
   14f02:	4a2c      	ldr	r2, [pc, #176]	; (14fb4 <close+0x134>)
   14f04:	011b      	lsls	r3, r3, #4
   14f06:	18d3      	adds	r3, r2, r3
   14f08:	330a      	adds	r3, #10
   14f0a:	2200      	movs	r2, #0
   14f0c:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   14f0e:	1dfb      	adds	r3, r7, #7
   14f10:	781b      	ldrb	r3, [r3, #0]
   14f12:	b25b      	sxtb	r3, r3
   14f14:	4a27      	ldr	r2, [pc, #156]	; (14fb4 <close+0x134>)
   14f16:	011b      	lsls	r3, r3, #4
   14f18:	18d3      	adds	r3, r2, r3
   14f1a:	3306      	adds	r3, #6
   14f1c:	2200      	movs	r2, #0
   14f1e:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   14f20:	1dfb      	adds	r3, r7, #7
   14f22:	781b      	ldrb	r3, [r3, #0]
   14f24:	b25b      	sxtb	r3, r3
   14f26:	4a23      	ldr	r2, [pc, #140]	; (14fb4 <close+0x134>)
   14f28:	011b      	lsls	r3, r3, #4
   14f2a:	18d3      	adds	r3, r2, r3
   14f2c:	330b      	adds	r3, #11
   14f2e:	781b      	ldrb	r3, [r3, #0]
   14f30:	b2db      	uxtb	r3, r3
   14f32:	001a      	movs	r2, r3
   14f34:	2301      	movs	r3, #1
   14f36:	4013      	ands	r3, r2
   14f38:	d003      	beq.n	14f42 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   14f3a:	230e      	movs	r3, #14
   14f3c:	18fb      	adds	r3, r7, r3
   14f3e:	224e      	movs	r2, #78	; 0x4e
   14f40:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   14f42:	230f      	movs	r3, #15
   14f44:	18fc      	adds	r4, r7, r3
   14f46:	2308      	movs	r3, #8
   14f48:	18fa      	adds	r2, r7, r3
   14f4a:	230e      	movs	r3, #14
   14f4c:	18fb      	adds	r3, r7, r3
   14f4e:	7819      	ldrb	r1, [r3, #0]
   14f50:	2300      	movs	r3, #0
   14f52:	9302      	str	r3, [sp, #8]
   14f54:	2300      	movs	r3, #0
   14f56:	9301      	str	r3, [sp, #4]
   14f58:	2300      	movs	r3, #0
   14f5a:	9300      	str	r3, [sp, #0]
   14f5c:	2304      	movs	r3, #4
   14f5e:	2002      	movs	r0, #2
   14f60:	4d15      	ldr	r5, [pc, #84]	; (14fb8 <close+0x138>)
   14f62:	47a8      	blx	r5
   14f64:	0003      	movs	r3, r0
   14f66:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   14f68:	230f      	movs	r3, #15
   14f6a:	18fb      	adds	r3, r7, r3
   14f6c:	781b      	ldrb	r3, [r3, #0]
   14f6e:	b25b      	sxtb	r3, r3
   14f70:	2b00      	cmp	r3, #0
   14f72:	d003      	beq.n	14f7c <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   14f74:	230f      	movs	r3, #15
   14f76:	18fb      	adds	r3, r7, r3
   14f78:	22f7      	movs	r2, #247	; 0xf7
   14f7a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   14f7c:	1dfb      	adds	r3, r7, #7
   14f7e:	781b      	ldrb	r3, [r3, #0]
   14f80:	b25b      	sxtb	r3, r3
   14f82:	011a      	lsls	r2, r3, #4
   14f84:	4b0b      	ldr	r3, [pc, #44]	; (14fb4 <close+0x134>)
   14f86:	18d3      	adds	r3, r2, r3
   14f88:	2210      	movs	r2, #16
   14f8a:	2100      	movs	r1, #0
   14f8c:	0018      	movs	r0, r3
   14f8e:	4b0b      	ldr	r3, [pc, #44]	; (14fbc <close+0x13c>)
   14f90:	4798      	blx	r3
	}
	return s8Ret;
   14f92:	230f      	movs	r3, #15
   14f94:	18fb      	adds	r3, r7, r3
   14f96:	781b      	ldrb	r3, [r3, #0]
   14f98:	b25b      	sxtb	r3, r3
}
   14f9a:	0018      	movs	r0, r3
   14f9c:	46bd      	mov	sp, r7
   14f9e:	b004      	add	sp, #16
   14fa0:	bdb0      	pop	{r4, r5, r7, pc}
   14fa2:	46c0      	nop			; (mov r8, r8)
   14fa4:	00029244 	.word	0x00029244
   14fa8:	0000d14d 	.word	0x0000d14d
   14fac:	00029284 	.word	0x00029284
   14fb0:	00029264 	.word	0x00029264
   14fb4:	20005784 	.word	0x20005784
   14fb8:	00010145 	.word	0x00010145
   14fbc:	0000fee5 	.word	0x0000fee5

00014fc0 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   14fc0:	b580      	push	{r7, lr}
   14fc2:	b086      	sub	sp, #24
   14fc4:	af00      	add	r7, sp, #0
   14fc6:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   14fc8:	2300      	movs	r3, #0
   14fca:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   14fcc:	2317      	movs	r3, #23
   14fce:	18fb      	adds	r3, r7, r3
   14fd0:	2200      	movs	r2, #0
   14fd2:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   14fd4:	2316      	movs	r3, #22
   14fd6:	18fb      	adds	r3, r7, r3
   14fd8:	2200      	movs	r2, #0
   14fda:	701a      	strb	r2, [r3, #0]
   14fdc:	e060      	b.n	150a0 <nmi_inet_addr+0xe0>
	{
		j = 0;
   14fde:	2315      	movs	r3, #21
   14fe0:	18fb      	adds	r3, r7, r3
   14fe2:	2200      	movs	r2, #0
   14fe4:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   14fe6:	2314      	movs	r3, #20
   14fe8:	18fb      	adds	r3, r7, r3
   14fea:	687a      	ldr	r2, [r7, #4]
   14fec:	7812      	ldrb	r2, [r2, #0]
   14fee:	701a      	strb	r2, [r3, #0]
			++j;
   14ff0:	2315      	movs	r3, #21
   14ff2:	18fb      	adds	r3, r7, r3
   14ff4:	2215      	movs	r2, #21
   14ff6:	18ba      	adds	r2, r7, r2
   14ff8:	7812      	ldrb	r2, [r2, #0]
   14ffa:	3201      	adds	r2, #1
   14ffc:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   14ffe:	2315      	movs	r3, #21
   15000:	18fb      	adds	r3, r7, r3
   15002:	781b      	ldrb	r3, [r3, #0]
   15004:	2b04      	cmp	r3, #4
   15006:	d901      	bls.n	1500c <nmi_inet_addr+0x4c>
			{
				return 0;
   15008:	2300      	movs	r3, #0
   1500a:	e057      	b.n	150bc <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   1500c:	2314      	movs	r3, #20
   1500e:	18fb      	adds	r3, r7, r3
   15010:	781b      	ldrb	r3, [r3, #0]
   15012:	2b2e      	cmp	r3, #46	; 0x2e
   15014:	d004      	beq.n	15020 <nmi_inet_addr+0x60>
   15016:	2314      	movs	r3, #20
   15018:	18fb      	adds	r3, r7, r3
   1501a:	781b      	ldrb	r3, [r3, #0]
   1501c:	2b00      	cmp	r3, #0
   1501e:	d10d      	bne.n	1503c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   15020:	2316      	movs	r3, #22
   15022:	18fb      	adds	r3, r7, r3
   15024:	781b      	ldrb	r3, [r3, #0]
   15026:	220c      	movs	r2, #12
   15028:	18ba      	adds	r2, r7, r2
   1502a:	2117      	movs	r1, #23
   1502c:	1879      	adds	r1, r7, r1
   1502e:	7809      	ldrb	r1, [r1, #0]
   15030:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   15032:	2317      	movs	r3, #23
   15034:	18fb      	adds	r3, r7, r3
   15036:	2200      	movs	r2, #0
   15038:	701a      	strb	r2, [r3, #0]
   1503a:	e01d      	b.n	15078 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   1503c:	2314      	movs	r3, #20
   1503e:	18fb      	adds	r3, r7, r3
   15040:	781b      	ldrb	r3, [r3, #0]
   15042:	2b2f      	cmp	r3, #47	; 0x2f
   15044:	d916      	bls.n	15074 <nmi_inet_addr+0xb4>
   15046:	2314      	movs	r3, #20
   15048:	18fb      	adds	r3, r7, r3
   1504a:	781b      	ldrb	r3, [r3, #0]
   1504c:	2b39      	cmp	r3, #57	; 0x39
   1504e:	d811      	bhi.n	15074 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   15050:	2317      	movs	r3, #23
   15052:	18fb      	adds	r3, r7, r3
   15054:	781b      	ldrb	r3, [r3, #0]
   15056:	1c1a      	adds	r2, r3, #0
   15058:	0092      	lsls	r2, r2, #2
   1505a:	18d3      	adds	r3, r2, r3
   1505c:	18db      	adds	r3, r3, r3
   1505e:	b2da      	uxtb	r2, r3
   15060:	2314      	movs	r3, #20
   15062:	18fb      	adds	r3, r7, r3
   15064:	781b      	ldrb	r3, [r3, #0]
   15066:	18d3      	adds	r3, r2, r3
   15068:	b2da      	uxtb	r2, r3
   1506a:	2317      	movs	r3, #23
   1506c:	18fb      	adds	r3, r7, r3
   1506e:	3a30      	subs	r2, #48	; 0x30
   15070:	701a      	strb	r2, [r3, #0]
   15072:	e001      	b.n	15078 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   15074:	2300      	movs	r3, #0
   15076:	e021      	b.n	150bc <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   15078:	687b      	ldr	r3, [r7, #4]
   1507a:	3301      	adds	r3, #1
   1507c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   1507e:	2314      	movs	r3, #20
   15080:	18fb      	adds	r3, r7, r3
   15082:	781b      	ldrb	r3, [r3, #0]
   15084:	2b2e      	cmp	r3, #46	; 0x2e
   15086:	d004      	beq.n	15092 <nmi_inet_addr+0xd2>
   15088:	2314      	movs	r3, #20
   1508a:	18fb      	adds	r3, r7, r3
   1508c:	781b      	ldrb	r3, [r3, #0]
   1508e:	2b00      	cmp	r3, #0
   15090:	d1a9      	bne.n	14fe6 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   15092:	2316      	movs	r3, #22
   15094:	18fb      	adds	r3, r7, r3
   15096:	2216      	movs	r2, #22
   15098:	18ba      	adds	r2, r7, r2
   1509a:	7812      	ldrb	r2, [r2, #0]
   1509c:	3201      	adds	r2, #1
   1509e:	701a      	strb	r2, [r3, #0]
   150a0:	2316      	movs	r3, #22
   150a2:	18fb      	adds	r3, r7, r3
   150a4:	781b      	ldrb	r3, [r3, #0]
   150a6:	2b03      	cmp	r3, #3
   150a8:	d999      	bls.n	14fde <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   150aa:	230c      	movs	r3, #12
   150ac:	18f9      	adds	r1, r7, r3
   150ae:	2310      	movs	r3, #16
   150b0:	18fb      	adds	r3, r7, r3
   150b2:	2204      	movs	r2, #4
   150b4:	0018      	movs	r0, r3
   150b6:	4b03      	ldr	r3, [pc, #12]	; (150c4 <nmi_inet_addr+0x104>)
   150b8:	4798      	blx	r3
	return u32IP;
   150ba:	693b      	ldr	r3, [r7, #16]
}
   150bc:	0018      	movs	r0, r3
   150be:	46bd      	mov	sp, r7
   150c0:	b006      	add	sp, #24
   150c2:	bd80      	pop	{r7, pc}
   150c4:	0000fea9 	.word	0x0000fea9

000150c8 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   150c8:	b5b0      	push	{r4, r5, r7, lr}
   150ca:	b088      	sub	sp, #32
   150cc:	af04      	add	r7, sp, #16
   150ce:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   150d0:	230f      	movs	r3, #15
   150d2:	18fb      	adds	r3, r7, r3
   150d4:	22fa      	movs	r2, #250	; 0xfa
   150d6:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   150d8:	687b      	ldr	r3, [r7, #4]
   150da:	0018      	movs	r0, r3
   150dc:	4b14      	ldr	r3, [pc, #80]	; (15130 <gethostbyname+0x68>)
   150de:	4798      	blx	r3
   150e0:	0003      	movs	r3, r0
   150e2:	001a      	movs	r2, r3
   150e4:	230e      	movs	r3, #14
   150e6:	18fb      	adds	r3, r7, r3
   150e8:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   150ea:	230e      	movs	r3, #14
   150ec:	18fb      	adds	r3, r7, r3
   150ee:	781b      	ldrb	r3, [r3, #0]
   150f0:	2b40      	cmp	r3, #64	; 0x40
   150f2:	d815      	bhi.n	15120 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   150f4:	230e      	movs	r3, #14
   150f6:	18fb      	adds	r3, r7, r3
   150f8:	781b      	ldrb	r3, [r3, #0]
   150fa:	b29b      	uxth	r3, r3
   150fc:	3301      	adds	r3, #1
   150fe:	b299      	uxth	r1, r3
   15100:	230f      	movs	r3, #15
   15102:	18fc      	adds	r4, r7, r3
   15104:	687a      	ldr	r2, [r7, #4]
   15106:	2300      	movs	r3, #0
   15108:	9302      	str	r3, [sp, #8]
   1510a:	2300      	movs	r3, #0
   1510c:	9301      	str	r3, [sp, #4]
   1510e:	2300      	movs	r3, #0
   15110:	9300      	str	r3, [sp, #0]
   15112:	000b      	movs	r3, r1
   15114:	214a      	movs	r1, #74	; 0x4a
   15116:	2002      	movs	r0, #2
   15118:	4d06      	ldr	r5, [pc, #24]	; (15134 <gethostbyname+0x6c>)
   1511a:	47a8      	blx	r5
   1511c:	0003      	movs	r3, r0
   1511e:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   15120:	230f      	movs	r3, #15
   15122:	18fb      	adds	r3, r7, r3
   15124:	781b      	ldrb	r3, [r3, #0]
   15126:	b25b      	sxtb	r3, r3
}
   15128:	0018      	movs	r0, r3
   1512a:	46bd      	mov	sp, r7
   1512c:	b004      	add	sp, #16
   1512e:	bdb0      	pop	{r4, r5, r7, pc}
   15130:	0000ff23 	.word	0x0000ff23
   15134:	00010145 	.word	0x00010145

00015138 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   15138:	b580      	push	{r7, lr}
   1513a:	b082      	sub	sp, #8
   1513c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   1513e:	003b      	movs	r3, r7
   15140:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   15142:	687b      	ldr	r3, [r7, #4]
   15144:	22b9      	movs	r2, #185	; 0xb9
   15146:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   15148:	4b13      	ldr	r3, [pc, #76]	; (15198 <spi_flash_enter_low_power_mode+0x60>)
   1514a:	2100      	movs	r1, #0
   1514c:	0018      	movs	r0, r3
   1514e:	4b13      	ldr	r3, [pc, #76]	; (1519c <spi_flash_enter_low_power_mode+0x64>)
   15150:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   15152:	687b      	ldr	r3, [r7, #4]
   15154:	781b      	ldrb	r3, [r3, #0]
   15156:	001a      	movs	r2, r3
   15158:	4b11      	ldr	r3, [pc, #68]	; (151a0 <spi_flash_enter_low_power_mode+0x68>)
   1515a:	0011      	movs	r1, r2
   1515c:	0018      	movs	r0, r3
   1515e:	4b0f      	ldr	r3, [pc, #60]	; (1519c <spi_flash_enter_low_power_mode+0x64>)
   15160:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   15162:	4b10      	ldr	r3, [pc, #64]	; (151a4 <spi_flash_enter_low_power_mode+0x6c>)
   15164:	2101      	movs	r1, #1
   15166:	0018      	movs	r0, r3
   15168:	4b0c      	ldr	r3, [pc, #48]	; (1519c <spi_flash_enter_low_power_mode+0x64>)
   1516a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1516c:	4b0e      	ldr	r3, [pc, #56]	; (151a8 <spi_flash_enter_low_power_mode+0x70>)
   1516e:	2100      	movs	r1, #0
   15170:	0018      	movs	r0, r3
   15172:	4b0a      	ldr	r3, [pc, #40]	; (1519c <spi_flash_enter_low_power_mode+0x64>)
   15174:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   15176:	4b0d      	ldr	r3, [pc, #52]	; (151ac <spi_flash_enter_low_power_mode+0x74>)
   15178:	2181      	movs	r1, #129	; 0x81
   1517a:	0018      	movs	r0, r3
   1517c:	4b07      	ldr	r3, [pc, #28]	; (1519c <spi_flash_enter_low_power_mode+0x64>)
   1517e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   15180:	46c0      	nop			; (mov r8, r8)
   15182:	4b0b      	ldr	r3, [pc, #44]	; (151b0 <spi_flash_enter_low_power_mode+0x78>)
   15184:	0018      	movs	r0, r3
   15186:	4b0b      	ldr	r3, [pc, #44]	; (151b4 <spi_flash_enter_low_power_mode+0x7c>)
   15188:	4798      	blx	r3
   1518a:	0003      	movs	r3, r0
   1518c:	2b01      	cmp	r3, #1
   1518e:	d1f8      	bne.n	15182 <spi_flash_enter_low_power_mode+0x4a>
}
   15190:	46c0      	nop			; (mov r8, r8)
   15192:	46bd      	mov	sp, r7
   15194:	b002      	add	sp, #8
   15196:	bd80      	pop	{r7, pc}
   15198:	00010208 	.word	0x00010208
   1519c:	00011f99 	.word	0x00011f99
   151a0:	0001020c 	.word	0x0001020c
   151a4:	00010214 	.word	0x00010214
   151a8:	0001021c 	.word	0x0001021c
   151ac:	00010204 	.word	0x00010204
   151b0:	00010218 	.word	0x00010218
   151b4:	00011f55 	.word	0x00011f55

000151b8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   151b8:	b580      	push	{r7, lr}
   151ba:	b082      	sub	sp, #8
   151bc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   151be:	003b      	movs	r3, r7
   151c0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   151c2:	687b      	ldr	r3, [r7, #4]
   151c4:	22ab      	movs	r2, #171	; 0xab
   151c6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   151c8:	4b13      	ldr	r3, [pc, #76]	; (15218 <spi_flash_leave_low_power_mode+0x60>)
   151ca:	2100      	movs	r1, #0
   151cc:	0018      	movs	r0, r3
   151ce:	4b13      	ldr	r3, [pc, #76]	; (1521c <spi_flash_leave_low_power_mode+0x64>)
   151d0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   151d2:	687b      	ldr	r3, [r7, #4]
   151d4:	781b      	ldrb	r3, [r3, #0]
   151d6:	001a      	movs	r2, r3
   151d8:	4b11      	ldr	r3, [pc, #68]	; (15220 <spi_flash_leave_low_power_mode+0x68>)
   151da:	0011      	movs	r1, r2
   151dc:	0018      	movs	r0, r3
   151de:	4b0f      	ldr	r3, [pc, #60]	; (1521c <spi_flash_leave_low_power_mode+0x64>)
   151e0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   151e2:	4b10      	ldr	r3, [pc, #64]	; (15224 <spi_flash_leave_low_power_mode+0x6c>)
   151e4:	2101      	movs	r1, #1
   151e6:	0018      	movs	r0, r3
   151e8:	4b0c      	ldr	r3, [pc, #48]	; (1521c <spi_flash_leave_low_power_mode+0x64>)
   151ea:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   151ec:	4b0e      	ldr	r3, [pc, #56]	; (15228 <spi_flash_leave_low_power_mode+0x70>)
   151ee:	2100      	movs	r1, #0
   151f0:	0018      	movs	r0, r3
   151f2:	4b0a      	ldr	r3, [pc, #40]	; (1521c <spi_flash_leave_low_power_mode+0x64>)
   151f4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   151f6:	4b0d      	ldr	r3, [pc, #52]	; (1522c <spi_flash_leave_low_power_mode+0x74>)
   151f8:	2181      	movs	r1, #129	; 0x81
   151fa:	0018      	movs	r0, r3
   151fc:	4b07      	ldr	r3, [pc, #28]	; (1521c <spi_flash_leave_low_power_mode+0x64>)
   151fe:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   15200:	46c0      	nop			; (mov r8, r8)
   15202:	4b0b      	ldr	r3, [pc, #44]	; (15230 <spi_flash_leave_low_power_mode+0x78>)
   15204:	0018      	movs	r0, r3
   15206:	4b0b      	ldr	r3, [pc, #44]	; (15234 <spi_flash_leave_low_power_mode+0x7c>)
   15208:	4798      	blx	r3
   1520a:	0003      	movs	r3, r0
   1520c:	2b01      	cmp	r3, #1
   1520e:	d1f8      	bne.n	15202 <spi_flash_leave_low_power_mode+0x4a>
}
   15210:	46c0      	nop			; (mov r8, r8)
   15212:	46bd      	mov	sp, r7
   15214:	b002      	add	sp, #8
   15216:	bd80      	pop	{r7, pc}
   15218:	00010208 	.word	0x00010208
   1521c:	00011f99 	.word	0x00011f99
   15220:	0001020c 	.word	0x0001020c
   15224:	00010214 	.word	0x00010214
   15228:	0001021c 	.word	0x0001021c
   1522c:	00010204 	.word	0x00010204
   15230:	00010218 	.word	0x00010218
   15234:	00011f55 	.word	0x00011f55

00015238 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   15238:	b590      	push	{r4, r7, lr}
   1523a:	b085      	sub	sp, #20
   1523c:	af00      	add	r7, sp, #0
   1523e:	0002      	movs	r2, r0
   15240:	1dfb      	adds	r3, r7, #7
   15242:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   15244:	230f      	movs	r3, #15
   15246:	18fb      	adds	r3, r7, r3
   15248:	2200      	movs	r2, #0
   1524a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1524c:	4b24      	ldr	r3, [pc, #144]	; (152e0 <spi_flash_enable+0xa8>)
   1524e:	4798      	blx	r3
   15250:	0003      	movs	r3, r0
   15252:	051b      	lsls	r3, r3, #20
   15254:	0d1b      	lsrs	r3, r3, #20
   15256:	4a23      	ldr	r2, [pc, #140]	; (152e4 <spi_flash_enable+0xac>)
   15258:	4293      	cmp	r3, r2
   1525a:	d938      	bls.n	152ce <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   1525c:	230f      	movs	r3, #15
   1525e:	18fc      	adds	r4, r7, r3
   15260:	2308      	movs	r3, #8
   15262:	18fb      	adds	r3, r7, r3
   15264:	4a20      	ldr	r2, [pc, #128]	; (152e8 <spi_flash_enable+0xb0>)
   15266:	0019      	movs	r1, r3
   15268:	0010      	movs	r0, r2
   1526a:	4b20      	ldr	r3, [pc, #128]	; (152ec <spi_flash_enable+0xb4>)
   1526c:	4798      	blx	r3
   1526e:	0003      	movs	r3, r0
   15270:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   15272:	230f      	movs	r3, #15
   15274:	18fb      	adds	r3, r7, r3
   15276:	781b      	ldrb	r3, [r3, #0]
   15278:	b25b      	sxtb	r3, r3
   1527a:	2b00      	cmp	r3, #0
   1527c:	d126      	bne.n	152cc <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   1527e:	68bb      	ldr	r3, [r7, #8]
   15280:	4a1b      	ldr	r2, [pc, #108]	; (152f0 <spi_flash_enable+0xb8>)
   15282:	4013      	ands	r3, r2
   15284:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   15286:	68bb      	ldr	r3, [r7, #8]
   15288:	4a1a      	ldr	r2, [pc, #104]	; (152f4 <spi_flash_enable+0xbc>)
   1528a:	4313      	orrs	r3, r2
   1528c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   1528e:	68bb      	ldr	r3, [r7, #8]
   15290:	4a15      	ldr	r2, [pc, #84]	; (152e8 <spi_flash_enable+0xb0>)
   15292:	0019      	movs	r1, r3
   15294:	0010      	movs	r0, r2
   15296:	4b18      	ldr	r3, [pc, #96]	; (152f8 <spi_flash_enable+0xc0>)
   15298:	4798      	blx	r3
		if(enable) {
   1529a:	1dfb      	adds	r3, r7, #7
   1529c:	781b      	ldrb	r3, [r3, #0]
   1529e:	2b00      	cmp	r3, #0
   152a0:	d002      	beq.n	152a8 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   152a2:	4b16      	ldr	r3, [pc, #88]	; (152fc <spi_flash_enable+0xc4>)
   152a4:	4798      	blx	r3
   152a6:	e001      	b.n	152ac <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   152a8:	4b15      	ldr	r3, [pc, #84]	; (15300 <spi_flash_enable+0xc8>)
   152aa:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   152ac:	68bb      	ldr	r3, [r7, #8]
   152ae:	4a10      	ldr	r2, [pc, #64]	; (152f0 <spi_flash_enable+0xb8>)
   152b0:	4013      	ands	r3, r2
   152b2:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   152b4:	68bb      	ldr	r3, [r7, #8]
   152b6:	2280      	movs	r2, #128	; 0x80
   152b8:	0252      	lsls	r2, r2, #9
   152ba:	4313      	orrs	r3, r2
   152bc:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   152be:	68bb      	ldr	r3, [r7, #8]
   152c0:	4a09      	ldr	r2, [pc, #36]	; (152e8 <spi_flash_enable+0xb0>)
   152c2:	0019      	movs	r1, r3
   152c4:	0010      	movs	r0, r2
   152c6:	4b0c      	ldr	r3, [pc, #48]	; (152f8 <spi_flash_enable+0xc0>)
   152c8:	4798      	blx	r3
   152ca:	e000      	b.n	152ce <spi_flash_enable+0x96>
			goto ERR1;
   152cc:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   152ce:	230f      	movs	r3, #15
   152d0:	18fb      	adds	r3, r7, r3
   152d2:	781b      	ldrb	r3, [r3, #0]
   152d4:	b25b      	sxtb	r3, r3
}
   152d6:	0018      	movs	r0, r3
   152d8:	46bd      	mov	sp, r7
   152da:	b005      	add	sp, #20
   152dc:	bd90      	pop	{r4, r7, pc}
   152de:	46c0      	nop			; (mov r8, r8)
   152e0:	00011875 	.word	0x00011875
   152e4:	0000039f 	.word	0x0000039f
   152e8:	00001410 	.word	0x00001410
   152ec:	00011f75 	.word	0x00011f75
   152f0:	f8888fff 	.word	0xf8888fff
   152f4:	01111000 	.word	0x01111000
   152f8:	00011f99 	.word	0x00011f99
   152fc:	000151b9 	.word	0x000151b9
   15300:	00015139 	.word	0x00015139

00015304 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   15304:	b580      	push	{r7, lr}
   15306:	b084      	sub	sp, #16
   15308:	af00      	add	r7, sp, #0
   1530a:	0002      	movs	r2, r0
   1530c:	1dfb      	adds	r3, r7, #7
   1530e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   15310:	1dfb      	adds	r3, r7, #7
   15312:	781b      	ldrb	r3, [r3, #0]
   15314:	2b00      	cmp	r3, #0
   15316:	d108      	bne.n	1532a <mem_test_unit_ready+0x26>
   15318:	1dfb      	adds	r3, r7, #7
   1531a:	781a      	ldrb	r2, [r3, #0]
   1531c:	4b08      	ldr	r3, [pc, #32]	; (15340 <mem_test_unit_ready+0x3c>)
   1531e:	0152      	lsls	r2, r2, #5
   15320:	58d3      	ldr	r3, [r2, r3]
   15322:	4798      	blx	r3
   15324:	0003      	movs	r3, r0
   15326:	001a      	movs	r2, r3
   15328:	e000      	b.n	1532c <mem_test_unit_ready+0x28>
   1532a:	2201      	movs	r2, #1
  status =
   1532c:	230f      	movs	r3, #15
   1532e:	18fb      	adds	r3, r7, r3
   15330:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   15332:	230f      	movs	r3, #15
   15334:	18fb      	adds	r3, r7, r3
   15336:	781b      	ldrb	r3, [r3, #0]
}
   15338:	0018      	movs	r0, r3
   1533a:	46bd      	mov	sp, r7
   1533c:	b004      	add	sp, #16
   1533e:	bd80      	pop	{r7, pc}
   15340:	00029310 	.word	0x00029310

00015344 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   15344:	b580      	push	{r7, lr}
   15346:	b084      	sub	sp, #16
   15348:	af00      	add	r7, sp, #0
   1534a:	0002      	movs	r2, r0
   1534c:	6039      	str	r1, [r7, #0]
   1534e:	1dfb      	adds	r3, r7, #7
   15350:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   15352:	1dfb      	adds	r3, r7, #7
   15354:	781b      	ldrb	r3, [r3, #0]
   15356:	2b00      	cmp	r3, #0
   15358:	d10c      	bne.n	15374 <mem_read_capacity+0x30>
   1535a:	1dfb      	adds	r3, r7, #7
   1535c:	781b      	ldrb	r3, [r3, #0]
   1535e:	4a0b      	ldr	r2, [pc, #44]	; (1538c <mem_read_capacity+0x48>)
   15360:	015b      	lsls	r3, r3, #5
   15362:	18d3      	adds	r3, r2, r3
   15364:	3304      	adds	r3, #4
   15366:	681b      	ldr	r3, [r3, #0]
   15368:	683a      	ldr	r2, [r7, #0]
   1536a:	0010      	movs	r0, r2
   1536c:	4798      	blx	r3
   1536e:	0003      	movs	r3, r0
   15370:	001a      	movs	r2, r3
   15372:	e000      	b.n	15376 <mem_read_capacity+0x32>
   15374:	2201      	movs	r2, #1
  status =
   15376:	230f      	movs	r3, #15
   15378:	18fb      	adds	r3, r7, r3
   1537a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   1537c:	230f      	movs	r3, #15
   1537e:	18fb      	adds	r3, r7, r3
   15380:	781b      	ldrb	r3, [r3, #0]
}
   15382:	0018      	movs	r0, r3
   15384:	46bd      	mov	sp, r7
   15386:	b004      	add	sp, #16
   15388:	bd80      	pop	{r7, pc}
   1538a:	46c0      	nop			; (mov r8, r8)
   1538c:	00029310 	.word	0x00029310

00015390 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   15390:	b580      	push	{r7, lr}
   15392:	b084      	sub	sp, #16
   15394:	af00      	add	r7, sp, #0
   15396:	0002      	movs	r2, r0
   15398:	1dfb      	adds	r3, r7, #7
   1539a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   1539c:	1dfb      	adds	r3, r7, #7
   1539e:	781b      	ldrb	r3, [r3, #0]
   153a0:	425a      	negs	r2, r3
   153a2:	4153      	adcs	r3, r2
   153a4:	b2da      	uxtb	r2, r3
  sector_size =
   153a6:	230f      	movs	r3, #15
   153a8:	18fb      	adds	r3, r7, r3
   153aa:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   153ac:	230f      	movs	r3, #15
   153ae:	18fb      	adds	r3, r7, r3
   153b0:	781b      	ldrb	r3, [r3, #0]
}
   153b2:	0018      	movs	r0, r3
   153b4:	46bd      	mov	sp, r7
   153b6:	b004      	add	sp, #16
   153b8:	bd80      	pop	{r7, pc}
	...

000153bc <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   153bc:	b580      	push	{r7, lr}
   153be:	b084      	sub	sp, #16
   153c0:	af00      	add	r7, sp, #0
   153c2:	0002      	movs	r2, r0
   153c4:	1dfb      	adds	r3, r7, #7
   153c6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   153c8:	1dfb      	adds	r3, r7, #7
   153ca:	781b      	ldrb	r3, [r3, #0]
   153cc:	2b00      	cmp	r3, #0
   153ce:	d109      	bne.n	153e4 <mem_wr_protect+0x28>
   153d0:	1dfb      	adds	r3, r7, #7
   153d2:	781b      	ldrb	r3, [r3, #0]
   153d4:	4a0a      	ldr	r2, [pc, #40]	; (15400 <mem_wr_protect+0x44>)
   153d6:	015b      	lsls	r3, r3, #5
   153d8:	18d3      	adds	r3, r2, r3
   153da:	330c      	adds	r3, #12
   153dc:	681b      	ldr	r3, [r3, #0]
   153de:	4798      	blx	r3
   153e0:	1e03      	subs	r3, r0, #0
   153e2:	d001      	beq.n	153e8 <mem_wr_protect+0x2c>
   153e4:	2201      	movs	r2, #1
   153e6:	e000      	b.n	153ea <mem_wr_protect+0x2e>
   153e8:	2200      	movs	r2, #0
  wr_protect =
   153ea:	230f      	movs	r3, #15
   153ec:	18fb      	adds	r3, r7, r3
   153ee:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   153f0:	230f      	movs	r3, #15
   153f2:	18fb      	adds	r3, r7, r3
   153f4:	781b      	ldrb	r3, [r3, #0]
}
   153f6:	0018      	movs	r0, r3
   153f8:	46bd      	mov	sp, r7
   153fa:	b004      	add	sp, #16
   153fc:	bd80      	pop	{r7, pc}
   153fe:	46c0      	nop			; (mov r8, r8)
   15400:	00029310 	.word	0x00029310

00015404 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   15404:	b580      	push	{r7, lr}
   15406:	b086      	sub	sp, #24
   15408:	af00      	add	r7, sp, #0
   1540a:	60b9      	str	r1, [r7, #8]
   1540c:	607a      	str	r2, [r7, #4]
   1540e:	230f      	movs	r3, #15
   15410:	18fb      	adds	r3, r7, r3
   15412:	1c02      	adds	r2, r0, #0
   15414:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   15416:	230f      	movs	r3, #15
   15418:	18fb      	adds	r3, r7, r3
   1541a:	781b      	ldrb	r3, [r3, #0]
   1541c:	2b00      	cmp	r3, #0
   1541e:	d10e      	bne.n	1543e <memory_2_ram+0x3a>
   15420:	230f      	movs	r3, #15
   15422:	18fb      	adds	r3, r7, r3
   15424:	781b      	ldrb	r3, [r3, #0]
   15426:	4a0b      	ldr	r2, [pc, #44]	; (15454 <memory_2_ram+0x50>)
   15428:	015b      	lsls	r3, r3, #5
   1542a:	18d3      	adds	r3, r2, r3
   1542c:	3314      	adds	r3, #20
   1542e:	681b      	ldr	r3, [r3, #0]
   15430:	6879      	ldr	r1, [r7, #4]
   15432:	68ba      	ldr	r2, [r7, #8]
   15434:	0010      	movs	r0, r2
   15436:	4798      	blx	r3
   15438:	0003      	movs	r3, r0
   1543a:	001a      	movs	r2, r3
   1543c:	e000      	b.n	15440 <memory_2_ram+0x3c>
   1543e:	2201      	movs	r2, #1
  status =
   15440:	2317      	movs	r3, #23
   15442:	18fb      	adds	r3, r7, r3
   15444:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   15446:	2317      	movs	r3, #23
   15448:	18fb      	adds	r3, r7, r3
   1544a:	781b      	ldrb	r3, [r3, #0]
}
   1544c:	0018      	movs	r0, r3
   1544e:	46bd      	mov	sp, r7
   15450:	b006      	add	sp, #24
   15452:	bd80      	pop	{r7, pc}
   15454:	00029310 	.word	0x00029310

00015458 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   15458:	b580      	push	{r7, lr}
   1545a:	b086      	sub	sp, #24
   1545c:	af00      	add	r7, sp, #0
   1545e:	60b9      	str	r1, [r7, #8]
   15460:	607a      	str	r2, [r7, #4]
   15462:	230f      	movs	r3, #15
   15464:	18fb      	adds	r3, r7, r3
   15466:	1c02      	adds	r2, r0, #0
   15468:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1546a:	230f      	movs	r3, #15
   1546c:	18fb      	adds	r3, r7, r3
   1546e:	781b      	ldrb	r3, [r3, #0]
   15470:	2b00      	cmp	r3, #0
   15472:	d10e      	bne.n	15492 <ram_2_memory+0x3a>
   15474:	230f      	movs	r3, #15
   15476:	18fb      	adds	r3, r7, r3
   15478:	781b      	ldrb	r3, [r3, #0]
   1547a:	4a0b      	ldr	r2, [pc, #44]	; (154a8 <ram_2_memory+0x50>)
   1547c:	015b      	lsls	r3, r3, #5
   1547e:	18d3      	adds	r3, r2, r3
   15480:	3318      	adds	r3, #24
   15482:	681b      	ldr	r3, [r3, #0]
   15484:	6879      	ldr	r1, [r7, #4]
   15486:	68ba      	ldr	r2, [r7, #8]
   15488:	0010      	movs	r0, r2
   1548a:	4798      	blx	r3
   1548c:	0003      	movs	r3, r0
   1548e:	001a      	movs	r2, r3
   15490:	e000      	b.n	15494 <ram_2_memory+0x3c>
   15492:	2201      	movs	r2, #1
  status =
   15494:	2317      	movs	r3, #23
   15496:	18fb      	adds	r3, r7, r3
   15498:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   1549a:	2317      	movs	r3, #23
   1549c:	18fb      	adds	r3, r7, r3
   1549e:	781b      	ldrb	r3, [r3, #0]
}
   154a0:	0018      	movs	r0, r3
   154a2:	46bd      	mov	sp, r7
   154a4:	b006      	add	sp, #24
   154a6:	bd80      	pop	{r7, pc}
   154a8:	00029310 	.word	0x00029310

000154ac <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   154ac:	b580      	push	{r7, lr}
   154ae:	b082      	sub	sp, #8
   154b0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   154b2:	4b10      	ldr	r3, [pc, #64]	; (154f4 <cpu_irq_enter_critical+0x48>)
   154b4:	681b      	ldr	r3, [r3, #0]
   154b6:	2b00      	cmp	r3, #0
   154b8:	d112      	bne.n	154e0 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   154ba:	f3ef 8310 	mrs	r3, PRIMASK
   154be:	607b      	str	r3, [r7, #4]
  return(result);
   154c0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   154c2:	2b00      	cmp	r3, #0
   154c4:	d109      	bne.n	154da <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   154c6:	b672      	cpsid	i
   154c8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   154cc:	4b0a      	ldr	r3, [pc, #40]	; (154f8 <cpu_irq_enter_critical+0x4c>)
   154ce:	2200      	movs	r2, #0
   154d0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   154d2:	4b0a      	ldr	r3, [pc, #40]	; (154fc <cpu_irq_enter_critical+0x50>)
   154d4:	2201      	movs	r2, #1
   154d6:	701a      	strb	r2, [r3, #0]
   154d8:	e002      	b.n	154e0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   154da:	4b08      	ldr	r3, [pc, #32]	; (154fc <cpu_irq_enter_critical+0x50>)
   154dc:	2200      	movs	r2, #0
   154de:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   154e0:	4b04      	ldr	r3, [pc, #16]	; (154f4 <cpu_irq_enter_critical+0x48>)
   154e2:	681b      	ldr	r3, [r3, #0]
   154e4:	1c5a      	adds	r2, r3, #1
   154e6:	4b03      	ldr	r3, [pc, #12]	; (154f4 <cpu_irq_enter_critical+0x48>)
   154e8:	601a      	str	r2, [r3, #0]
}
   154ea:	46c0      	nop			; (mov r8, r8)
   154ec:	46bd      	mov	sp, r7
   154ee:	b002      	add	sp, #8
   154f0:	bd80      	pop	{r7, pc}
   154f2:	46c0      	nop			; (mov r8, r8)
   154f4:	20003ef0 	.word	0x20003ef0
   154f8:	2000011a 	.word	0x2000011a
   154fc:	20003ef4 	.word	0x20003ef4

00015500 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   15500:	b580      	push	{r7, lr}
   15502:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   15504:	4b0b      	ldr	r3, [pc, #44]	; (15534 <cpu_irq_leave_critical+0x34>)
   15506:	681b      	ldr	r3, [r3, #0]
   15508:	1e5a      	subs	r2, r3, #1
   1550a:	4b0a      	ldr	r3, [pc, #40]	; (15534 <cpu_irq_leave_critical+0x34>)
   1550c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1550e:	4b09      	ldr	r3, [pc, #36]	; (15534 <cpu_irq_leave_critical+0x34>)
   15510:	681b      	ldr	r3, [r3, #0]
   15512:	2b00      	cmp	r3, #0
   15514:	d10a      	bne.n	1552c <cpu_irq_leave_critical+0x2c>
   15516:	4b08      	ldr	r3, [pc, #32]	; (15538 <cpu_irq_leave_critical+0x38>)
   15518:	781b      	ldrb	r3, [r3, #0]
   1551a:	b2db      	uxtb	r3, r3
   1551c:	2b00      	cmp	r3, #0
   1551e:	d005      	beq.n	1552c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   15520:	4b06      	ldr	r3, [pc, #24]	; (1553c <cpu_irq_leave_critical+0x3c>)
   15522:	2201      	movs	r2, #1
   15524:	701a      	strb	r2, [r3, #0]
   15526:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1552a:	b662      	cpsie	i
	}
}
   1552c:	46c0      	nop			; (mov r8, r8)
   1552e:	46bd      	mov	sp, r7
   15530:	bd80      	pop	{r7, pc}
   15532:	46c0      	nop			; (mov r8, r8)
   15534:	20003ef0 	.word	0x20003ef0
   15538:	20003ef4 	.word	0x20003ef4
   1553c:	2000011a 	.word	0x2000011a

00015540 <system_pinmux_get_group_from_gpio_pin>:
{
   15540:	b580      	push	{r7, lr}
   15542:	b084      	sub	sp, #16
   15544:	af00      	add	r7, sp, #0
   15546:	0002      	movs	r2, r0
   15548:	1dfb      	adds	r3, r7, #7
   1554a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1554c:	230f      	movs	r3, #15
   1554e:	18fb      	adds	r3, r7, r3
   15550:	1dfa      	adds	r2, r7, #7
   15552:	7812      	ldrb	r2, [r2, #0]
   15554:	09d2      	lsrs	r2, r2, #7
   15556:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15558:	230e      	movs	r3, #14
   1555a:	18fb      	adds	r3, r7, r3
   1555c:	1dfa      	adds	r2, r7, #7
   1555e:	7812      	ldrb	r2, [r2, #0]
   15560:	0952      	lsrs	r2, r2, #5
   15562:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15564:	4b0d      	ldr	r3, [pc, #52]	; (1559c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15566:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   15568:	230f      	movs	r3, #15
   1556a:	18fb      	adds	r3, r7, r3
   1556c:	781b      	ldrb	r3, [r3, #0]
   1556e:	2b00      	cmp	r3, #0
   15570:	d10f      	bne.n	15592 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   15572:	230f      	movs	r3, #15
   15574:	18fb      	adds	r3, r7, r3
   15576:	781b      	ldrb	r3, [r3, #0]
   15578:	009b      	lsls	r3, r3, #2
   1557a:	2210      	movs	r2, #16
   1557c:	4694      	mov	ip, r2
   1557e:	44bc      	add	ip, r7
   15580:	4463      	add	r3, ip
   15582:	3b08      	subs	r3, #8
   15584:	681a      	ldr	r2, [r3, #0]
   15586:	230e      	movs	r3, #14
   15588:	18fb      	adds	r3, r7, r3
   1558a:	781b      	ldrb	r3, [r3, #0]
   1558c:	01db      	lsls	r3, r3, #7
   1558e:	18d3      	adds	r3, r2, r3
   15590:	e000      	b.n	15594 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   15592:	2300      	movs	r3, #0
}
   15594:	0018      	movs	r0, r3
   15596:	46bd      	mov	sp, r7
   15598:	b004      	add	sp, #16
   1559a:	bd80      	pop	{r7, pc}
   1559c:	41004400 	.word	0x41004400

000155a0 <port_get_group_from_gpio_pin>:
{
   155a0:	b580      	push	{r7, lr}
   155a2:	b082      	sub	sp, #8
   155a4:	af00      	add	r7, sp, #0
   155a6:	0002      	movs	r2, r0
   155a8:	1dfb      	adds	r3, r7, #7
   155aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   155ac:	1dfb      	adds	r3, r7, #7
   155ae:	781b      	ldrb	r3, [r3, #0]
   155b0:	0018      	movs	r0, r3
   155b2:	4b03      	ldr	r3, [pc, #12]	; (155c0 <port_get_group_from_gpio_pin+0x20>)
   155b4:	4798      	blx	r3
   155b6:	0003      	movs	r3, r0
}
   155b8:	0018      	movs	r0, r3
   155ba:	46bd      	mov	sp, r7
   155bc:	b002      	add	sp, #8
   155be:	bd80      	pop	{r7, pc}
   155c0:	00015541 	.word	0x00015541

000155c4 <port_get_config_defaults>:
{
   155c4:	b580      	push	{r7, lr}
   155c6:	b082      	sub	sp, #8
   155c8:	af00      	add	r7, sp, #0
   155ca:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   155cc:	687b      	ldr	r3, [r7, #4]
   155ce:	2200      	movs	r2, #0
   155d0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   155d2:	687b      	ldr	r3, [r7, #4]
   155d4:	2201      	movs	r2, #1
   155d6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   155d8:	687b      	ldr	r3, [r7, #4]
   155da:	2200      	movs	r2, #0
   155dc:	709a      	strb	r2, [r3, #2]
}
   155de:	46c0      	nop			; (mov r8, r8)
   155e0:	46bd      	mov	sp, r7
   155e2:	b002      	add	sp, #8
   155e4:	bd80      	pop	{r7, pc}
	...

000155e8 <port_pin_set_output_level>:
{
   155e8:	b580      	push	{r7, lr}
   155ea:	b084      	sub	sp, #16
   155ec:	af00      	add	r7, sp, #0
   155ee:	0002      	movs	r2, r0
   155f0:	1dfb      	adds	r3, r7, #7
   155f2:	701a      	strb	r2, [r3, #0]
   155f4:	1dbb      	adds	r3, r7, #6
   155f6:	1c0a      	adds	r2, r1, #0
   155f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   155fa:	1dfb      	adds	r3, r7, #7
   155fc:	781b      	ldrb	r3, [r3, #0]
   155fe:	0018      	movs	r0, r3
   15600:	4b0d      	ldr	r3, [pc, #52]	; (15638 <port_pin_set_output_level+0x50>)
   15602:	4798      	blx	r3
   15604:	0003      	movs	r3, r0
   15606:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15608:	1dfb      	adds	r3, r7, #7
   1560a:	781b      	ldrb	r3, [r3, #0]
   1560c:	221f      	movs	r2, #31
   1560e:	4013      	ands	r3, r2
   15610:	2201      	movs	r2, #1
   15612:	409a      	lsls	r2, r3
   15614:	0013      	movs	r3, r2
   15616:	60bb      	str	r3, [r7, #8]
	if (level) {
   15618:	1dbb      	adds	r3, r7, #6
   1561a:	781b      	ldrb	r3, [r3, #0]
   1561c:	2b00      	cmp	r3, #0
   1561e:	d003      	beq.n	15628 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15620:	68fb      	ldr	r3, [r7, #12]
   15622:	68ba      	ldr	r2, [r7, #8]
   15624:	619a      	str	r2, [r3, #24]
}
   15626:	e002      	b.n	1562e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15628:	68fb      	ldr	r3, [r7, #12]
   1562a:	68ba      	ldr	r2, [r7, #8]
   1562c:	615a      	str	r2, [r3, #20]
}
   1562e:	46c0      	nop			; (mov r8, r8)
   15630:	46bd      	mov	sp, r7
   15632:	b004      	add	sp, #16
   15634:	bd80      	pop	{r7, pc}
   15636:	46c0      	nop			; (mov r8, r8)
   15638:	000155a1 	.word	0x000155a1

0001563c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   1563c:	b580      	push	{r7, lr}
   1563e:	b082      	sub	sp, #8
   15640:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   15642:	1d3b      	adds	r3, r7, #4
   15644:	0018      	movs	r0, r3
   15646:	4b0e      	ldr	r3, [pc, #56]	; (15680 <system_board_init+0x44>)
   15648:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1564a:	1d3b      	adds	r3, r7, #4
   1564c:	2201      	movs	r2, #1
   1564e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   15650:	1d3b      	adds	r3, r7, #4
   15652:	0019      	movs	r1, r3
   15654:	2017      	movs	r0, #23
   15656:	4b0b      	ldr	r3, [pc, #44]	; (15684 <system_board_init+0x48>)
   15658:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   1565a:	2101      	movs	r1, #1
   1565c:	2017      	movs	r0, #23
   1565e:	4b0a      	ldr	r3, [pc, #40]	; (15688 <system_board_init+0x4c>)
   15660:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   15662:	1d3b      	adds	r3, r7, #4
   15664:	2200      	movs	r2, #0
   15666:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   15668:	1d3b      	adds	r3, r7, #4
   1566a:	2201      	movs	r2, #1
   1566c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1566e:	1d3b      	adds	r3, r7, #4
   15670:	0019      	movs	r1, r3
   15672:	2037      	movs	r0, #55	; 0x37
   15674:	4b03      	ldr	r3, [pc, #12]	; (15684 <system_board_init+0x48>)
   15676:	4798      	blx	r3
}
   15678:	46c0      	nop			; (mov r8, r8)
   1567a:	46bd      	mov	sp, r7
   1567c:	b002      	add	sp, #8
   1567e:	bd80      	pop	{r7, pc}
   15680:	000155c5 	.word	0x000155c5
   15684:	00015cb1 	.word	0x00015cb1
   15688:	000155e9 	.word	0x000155e9

0001568c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   1568c:	b580      	push	{r7, lr}
   1568e:	b084      	sub	sp, #16
   15690:	af00      	add	r7, sp, #0
   15692:	0002      	movs	r2, r0
   15694:	1dfb      	adds	r3, r7, #7
   15696:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   15698:	230f      	movs	r3, #15
   1569a:	18fb      	adds	r3, r7, r3
   1569c:	1dfa      	adds	r2, r7, #7
   1569e:	7812      	ldrb	r2, [r2, #0]
   156a0:	0952      	lsrs	r2, r2, #5
   156a2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   156a4:	230f      	movs	r3, #15
   156a6:	18fb      	adds	r3, r7, r3
   156a8:	781b      	ldrb	r3, [r3, #0]
   156aa:	2b00      	cmp	r3, #0
   156ac:	d10c      	bne.n	156c8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   156ae:	4b09      	ldr	r3, [pc, #36]	; (156d4 <_extint_get_eic_from_channel+0x48>)
   156b0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   156b2:	230f      	movs	r3, #15
   156b4:	18fb      	adds	r3, r7, r3
   156b6:	781b      	ldrb	r3, [r3, #0]
   156b8:	009b      	lsls	r3, r3, #2
   156ba:	2210      	movs	r2, #16
   156bc:	4694      	mov	ip, r2
   156be:	44bc      	add	ip, r7
   156c0:	4463      	add	r3, ip
   156c2:	3b08      	subs	r3, #8
   156c4:	681b      	ldr	r3, [r3, #0]
   156c6:	e000      	b.n	156ca <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   156c8:	2300      	movs	r3, #0
	}
}
   156ca:	0018      	movs	r0, r3
   156cc:	46bd      	mov	sp, r7
   156ce:	b004      	add	sp, #16
   156d0:	bd80      	pop	{r7, pc}
   156d2:	46c0      	nop			; (mov r8, r8)
   156d4:	40001800 	.word	0x40001800

000156d8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   156d8:	b580      	push	{r7, lr}
   156da:	b084      	sub	sp, #16
   156dc:	af00      	add	r7, sp, #0
   156de:	0002      	movs	r2, r0
   156e0:	1dfb      	adds	r3, r7, #7
   156e2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   156e4:	1dfb      	adds	r3, r7, #7
   156e6:	781b      	ldrb	r3, [r3, #0]
   156e8:	0018      	movs	r0, r3
   156ea:	4b0b      	ldr	r3, [pc, #44]	; (15718 <extint_chan_is_detected+0x40>)
   156ec:	4798      	blx	r3
   156ee:	0003      	movs	r3, r0
   156f0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   156f2:	1dfb      	adds	r3, r7, #7
   156f4:	781b      	ldrb	r3, [r3, #0]
   156f6:	221f      	movs	r2, #31
   156f8:	4013      	ands	r3, r2
   156fa:	2201      	movs	r2, #1
   156fc:	409a      	lsls	r2, r3
   156fe:	0013      	movs	r3, r2
   15700:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   15702:	68fb      	ldr	r3, [r7, #12]
   15704:	691b      	ldr	r3, [r3, #16]
   15706:	68ba      	ldr	r2, [r7, #8]
   15708:	4013      	ands	r3, r2
   1570a:	1e5a      	subs	r2, r3, #1
   1570c:	4193      	sbcs	r3, r2
   1570e:	b2db      	uxtb	r3, r3
}
   15710:	0018      	movs	r0, r3
   15712:	46bd      	mov	sp, r7
   15714:	b004      	add	sp, #16
   15716:	bd80      	pop	{r7, pc}
   15718:	0001568d 	.word	0x0001568d

0001571c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   1571c:	b580      	push	{r7, lr}
   1571e:	b084      	sub	sp, #16
   15720:	af00      	add	r7, sp, #0
   15722:	0002      	movs	r2, r0
   15724:	1dfb      	adds	r3, r7, #7
   15726:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   15728:	1dfb      	adds	r3, r7, #7
   1572a:	781b      	ldrb	r3, [r3, #0]
   1572c:	0018      	movs	r0, r3
   1572e:	4b09      	ldr	r3, [pc, #36]	; (15754 <extint_chan_clear_detected+0x38>)
   15730:	4798      	blx	r3
   15732:	0003      	movs	r3, r0
   15734:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   15736:	1dfb      	adds	r3, r7, #7
   15738:	781b      	ldrb	r3, [r3, #0]
   1573a:	221f      	movs	r2, #31
   1573c:	4013      	ands	r3, r2
   1573e:	2201      	movs	r2, #1
   15740:	409a      	lsls	r2, r3
   15742:	0013      	movs	r3, r2
   15744:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   15746:	68fb      	ldr	r3, [r7, #12]
   15748:	68ba      	ldr	r2, [r7, #8]
   1574a:	611a      	str	r2, [r3, #16]
}
   1574c:	46c0      	nop			; (mov r8, r8)
   1574e:	46bd      	mov	sp, r7
   15750:	b004      	add	sp, #16
   15752:	bd80      	pop	{r7, pc}
   15754:	0001568d 	.word	0x0001568d

00015758 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   15758:	b580      	push	{r7, lr}
   1575a:	b082      	sub	sp, #8
   1575c:	af00      	add	r7, sp, #0
   1575e:	6078      	str	r0, [r7, #4]
   15760:	0008      	movs	r0, r1
   15762:	0011      	movs	r1, r2
   15764:	1cfb      	adds	r3, r7, #3
   15766:	1c02      	adds	r2, r0, #0
   15768:	701a      	strb	r2, [r3, #0]
   1576a:	1cbb      	adds	r3, r7, #2
   1576c:	1c0a      	adds	r2, r1, #0
   1576e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   15770:	1cbb      	adds	r3, r7, #2
   15772:	781b      	ldrb	r3, [r3, #0]
   15774:	2b00      	cmp	r3, #0
   15776:	d001      	beq.n	1577c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   15778:	2317      	movs	r3, #23
   1577a:	e019      	b.n	157b0 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   1577c:	1cfb      	adds	r3, r7, #3
   1577e:	781a      	ldrb	r2, [r3, #0]
   15780:	4b0d      	ldr	r3, [pc, #52]	; (157b8 <extint_register_callback+0x60>)
   15782:	0092      	lsls	r2, r2, #2
   15784:	58d3      	ldr	r3, [r2, r3]
   15786:	2b00      	cmp	r3, #0
   15788:	d107      	bne.n	1579a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   1578a:	1cfb      	adds	r3, r7, #3
   1578c:	781a      	ldrb	r2, [r3, #0]
   1578e:	4b0a      	ldr	r3, [pc, #40]	; (157b8 <extint_register_callback+0x60>)
   15790:	0092      	lsls	r2, r2, #2
   15792:	6879      	ldr	r1, [r7, #4]
   15794:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   15796:	2300      	movs	r3, #0
   15798:	e00a      	b.n	157b0 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   1579a:	1cfb      	adds	r3, r7, #3
   1579c:	781a      	ldrb	r2, [r3, #0]
   1579e:	4b06      	ldr	r3, [pc, #24]	; (157b8 <extint_register_callback+0x60>)
   157a0:	0092      	lsls	r2, r2, #2
   157a2:	58d2      	ldr	r2, [r2, r3]
   157a4:	687b      	ldr	r3, [r7, #4]
   157a6:	429a      	cmp	r2, r3
   157a8:	d101      	bne.n	157ae <extint_register_callback+0x56>
		return STATUS_OK;
   157aa:	2300      	movs	r3, #0
   157ac:	e000      	b.n	157b0 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   157ae:	231d      	movs	r3, #29
}
   157b0:	0018      	movs	r0, r3
   157b2:	46bd      	mov	sp, r7
   157b4:	b002      	add	sp, #8
   157b6:	bd80      	pop	{r7, pc}
   157b8:	20005844 	.word	0x20005844

000157bc <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   157bc:	b580      	push	{r7, lr}
   157be:	b084      	sub	sp, #16
   157c0:	af00      	add	r7, sp, #0
   157c2:	0002      	movs	r2, r0
   157c4:	1dfb      	adds	r3, r7, #7
   157c6:	701a      	strb	r2, [r3, #0]
   157c8:	1dbb      	adds	r3, r7, #6
   157ca:	1c0a      	adds	r2, r1, #0
   157cc:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   157ce:	1dbb      	adds	r3, r7, #6
   157d0:	781b      	ldrb	r3, [r3, #0]
   157d2:	2b00      	cmp	r3, #0
   157d4:	d10e      	bne.n	157f4 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   157d6:	1dfb      	adds	r3, r7, #7
   157d8:	781b      	ldrb	r3, [r3, #0]
   157da:	0018      	movs	r0, r3
   157dc:	4b08      	ldr	r3, [pc, #32]	; (15800 <extint_chan_enable_callback+0x44>)
   157de:	4798      	blx	r3
   157e0:	0003      	movs	r3, r0
   157e2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   157e4:	1dfb      	adds	r3, r7, #7
   157e6:	781b      	ldrb	r3, [r3, #0]
   157e8:	2201      	movs	r2, #1
   157ea:	409a      	lsls	r2, r3
   157ec:	68fb      	ldr	r3, [r7, #12]
   157ee:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   157f0:	2300      	movs	r3, #0
   157f2:	e000      	b.n	157f6 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   157f4:	2317      	movs	r3, #23
}
   157f6:	0018      	movs	r0, r3
   157f8:	46bd      	mov	sp, r7
   157fa:	b004      	add	sp, #16
   157fc:	bd80      	pop	{r7, pc}
   157fe:	46c0      	nop			; (mov r8, r8)
   15800:	0001568d 	.word	0x0001568d

00015804 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   15804:	b580      	push	{r7, lr}
   15806:	b084      	sub	sp, #16
   15808:	af00      	add	r7, sp, #0
   1580a:	0002      	movs	r2, r0
   1580c:	1dfb      	adds	r3, r7, #7
   1580e:	701a      	strb	r2, [r3, #0]
   15810:	1dbb      	adds	r3, r7, #6
   15812:	1c0a      	adds	r2, r1, #0
   15814:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   15816:	1dbb      	adds	r3, r7, #6
   15818:	781b      	ldrb	r3, [r3, #0]
   1581a:	2b00      	cmp	r3, #0
   1581c:	d10e      	bne.n	1583c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   1581e:	1dfb      	adds	r3, r7, #7
   15820:	781b      	ldrb	r3, [r3, #0]
   15822:	0018      	movs	r0, r3
   15824:	4b08      	ldr	r3, [pc, #32]	; (15848 <extint_chan_disable_callback+0x44>)
   15826:	4798      	blx	r3
   15828:	0003      	movs	r3, r0
   1582a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   1582c:	1dfb      	adds	r3, r7, #7
   1582e:	781b      	ldrb	r3, [r3, #0]
   15830:	2201      	movs	r2, #1
   15832:	409a      	lsls	r2, r3
   15834:	68fb      	ldr	r3, [r7, #12]
   15836:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   15838:	2300      	movs	r3, #0
   1583a:	e000      	b.n	1583e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   1583c:	2317      	movs	r3, #23
}
   1583e:	0018      	movs	r0, r3
   15840:	46bd      	mov	sp, r7
   15842:	b004      	add	sp, #16
   15844:	bd80      	pop	{r7, pc}
   15846:	46c0      	nop			; (mov r8, r8)
   15848:	0001568d 	.word	0x0001568d

0001584c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   1584c:	b580      	push	{r7, lr}
   1584e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   15850:	4b15      	ldr	r3, [pc, #84]	; (158a8 <EIC_Handler+0x5c>)
   15852:	2200      	movs	r2, #0
   15854:	701a      	strb	r2, [r3, #0]
   15856:	e020      	b.n	1589a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   15858:	4b13      	ldr	r3, [pc, #76]	; (158a8 <EIC_Handler+0x5c>)
   1585a:	781b      	ldrb	r3, [r3, #0]
   1585c:	0018      	movs	r0, r3
   1585e:	4b13      	ldr	r3, [pc, #76]	; (158ac <EIC_Handler+0x60>)
   15860:	4798      	blx	r3
   15862:	1e03      	subs	r3, r0, #0
   15864:	d013      	beq.n	1588e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   15866:	4b10      	ldr	r3, [pc, #64]	; (158a8 <EIC_Handler+0x5c>)
   15868:	781b      	ldrb	r3, [r3, #0]
   1586a:	0018      	movs	r0, r3
   1586c:	4b10      	ldr	r3, [pc, #64]	; (158b0 <EIC_Handler+0x64>)
   1586e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   15870:	4b0d      	ldr	r3, [pc, #52]	; (158a8 <EIC_Handler+0x5c>)
   15872:	781b      	ldrb	r3, [r3, #0]
   15874:	001a      	movs	r2, r3
   15876:	4b0f      	ldr	r3, [pc, #60]	; (158b4 <EIC_Handler+0x68>)
   15878:	0092      	lsls	r2, r2, #2
   1587a:	58d3      	ldr	r3, [r2, r3]
   1587c:	2b00      	cmp	r3, #0
   1587e:	d006      	beq.n	1588e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   15880:	4b09      	ldr	r3, [pc, #36]	; (158a8 <EIC_Handler+0x5c>)
   15882:	781b      	ldrb	r3, [r3, #0]
   15884:	001a      	movs	r2, r3
   15886:	4b0b      	ldr	r3, [pc, #44]	; (158b4 <EIC_Handler+0x68>)
   15888:	0092      	lsls	r2, r2, #2
   1588a:	58d3      	ldr	r3, [r2, r3]
   1588c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1588e:	4b06      	ldr	r3, [pc, #24]	; (158a8 <EIC_Handler+0x5c>)
   15890:	781b      	ldrb	r3, [r3, #0]
   15892:	3301      	adds	r3, #1
   15894:	b2da      	uxtb	r2, r3
   15896:	4b04      	ldr	r3, [pc, #16]	; (158a8 <EIC_Handler+0x5c>)
   15898:	701a      	strb	r2, [r3, #0]
   1589a:	4b03      	ldr	r3, [pc, #12]	; (158a8 <EIC_Handler+0x5c>)
   1589c:	781b      	ldrb	r3, [r3, #0]
   1589e:	2b0f      	cmp	r3, #15
   158a0:	d9da      	bls.n	15858 <EIC_Handler+0xc>
			}
		}
	}
}
   158a2:	46c0      	nop			; (mov r8, r8)
   158a4:	46bd      	mov	sp, r7
   158a6:	bd80      	pop	{r7, pc}
   158a8:	20005840 	.word	0x20005840
   158ac:	000156d9 	.word	0x000156d9
   158b0:	0001571d 	.word	0x0001571d
   158b4:	20005844 	.word	0x20005844

000158b8 <system_gclk_chan_get_config_defaults>:
{
   158b8:	b580      	push	{r7, lr}
   158ba:	b082      	sub	sp, #8
   158bc:	af00      	add	r7, sp, #0
   158be:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   158c0:	687b      	ldr	r3, [r7, #4]
   158c2:	2200      	movs	r2, #0
   158c4:	701a      	strb	r2, [r3, #0]
}
   158c6:	46c0      	nop			; (mov r8, r8)
   158c8:	46bd      	mov	sp, r7
   158ca:	b002      	add	sp, #8
   158cc:	bd80      	pop	{r7, pc}
	...

000158d0 <system_apb_clock_set_mask>:
{
   158d0:	b580      	push	{r7, lr}
   158d2:	b082      	sub	sp, #8
   158d4:	af00      	add	r7, sp, #0
   158d6:	0002      	movs	r2, r0
   158d8:	6039      	str	r1, [r7, #0]
   158da:	1dfb      	adds	r3, r7, #7
   158dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   158de:	1dfb      	adds	r3, r7, #7
   158e0:	781b      	ldrb	r3, [r3, #0]
   158e2:	2b01      	cmp	r3, #1
   158e4:	d00a      	beq.n	158fc <system_apb_clock_set_mask+0x2c>
   158e6:	2b02      	cmp	r3, #2
   158e8:	d00f      	beq.n	1590a <system_apb_clock_set_mask+0x3a>
   158ea:	2b00      	cmp	r3, #0
   158ec:	d114      	bne.n	15918 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   158ee:	4b0e      	ldr	r3, [pc, #56]	; (15928 <system_apb_clock_set_mask+0x58>)
   158f0:	4a0d      	ldr	r2, [pc, #52]	; (15928 <system_apb_clock_set_mask+0x58>)
   158f2:	6991      	ldr	r1, [r2, #24]
   158f4:	683a      	ldr	r2, [r7, #0]
   158f6:	430a      	orrs	r2, r1
   158f8:	619a      	str	r2, [r3, #24]
			break;
   158fa:	e00f      	b.n	1591c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   158fc:	4b0a      	ldr	r3, [pc, #40]	; (15928 <system_apb_clock_set_mask+0x58>)
   158fe:	4a0a      	ldr	r2, [pc, #40]	; (15928 <system_apb_clock_set_mask+0x58>)
   15900:	69d1      	ldr	r1, [r2, #28]
   15902:	683a      	ldr	r2, [r7, #0]
   15904:	430a      	orrs	r2, r1
   15906:	61da      	str	r2, [r3, #28]
			break;
   15908:	e008      	b.n	1591c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1590a:	4b07      	ldr	r3, [pc, #28]	; (15928 <system_apb_clock_set_mask+0x58>)
   1590c:	4a06      	ldr	r2, [pc, #24]	; (15928 <system_apb_clock_set_mask+0x58>)
   1590e:	6a11      	ldr	r1, [r2, #32]
   15910:	683a      	ldr	r2, [r7, #0]
   15912:	430a      	orrs	r2, r1
   15914:	621a      	str	r2, [r3, #32]
			break;
   15916:	e001      	b.n	1591c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15918:	2317      	movs	r3, #23
   1591a:	e000      	b.n	1591e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1591c:	2300      	movs	r3, #0
}
   1591e:	0018      	movs	r0, r3
   15920:	46bd      	mov	sp, r7
   15922:	b002      	add	sp, #8
   15924:	bd80      	pop	{r7, pc}
   15926:	46c0      	nop			; (mov r8, r8)
   15928:	40000400 	.word	0x40000400

0001592c <system_pinmux_get_config_defaults>:
{
   1592c:	b580      	push	{r7, lr}
   1592e:	b082      	sub	sp, #8
   15930:	af00      	add	r7, sp, #0
   15932:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   15934:	687b      	ldr	r3, [r7, #4]
   15936:	2280      	movs	r2, #128	; 0x80
   15938:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1593a:	687b      	ldr	r3, [r7, #4]
   1593c:	2200      	movs	r2, #0
   1593e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15940:	687b      	ldr	r3, [r7, #4]
   15942:	2201      	movs	r2, #1
   15944:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   15946:	687b      	ldr	r3, [r7, #4]
   15948:	2200      	movs	r2, #0
   1594a:	70da      	strb	r2, [r3, #3]
}
   1594c:	46c0      	nop			; (mov r8, r8)
   1594e:	46bd      	mov	sp, r7
   15950:	b002      	add	sp, #8
   15952:	bd80      	pop	{r7, pc}

00015954 <system_interrupt_enable>:
{
   15954:	b580      	push	{r7, lr}
   15956:	b082      	sub	sp, #8
   15958:	af00      	add	r7, sp, #0
   1595a:	0002      	movs	r2, r0
   1595c:	1dfb      	adds	r3, r7, #7
   1595e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15960:	4b06      	ldr	r3, [pc, #24]	; (1597c <system_interrupt_enable+0x28>)
   15962:	1dfa      	adds	r2, r7, #7
   15964:	7812      	ldrb	r2, [r2, #0]
   15966:	0011      	movs	r1, r2
   15968:	221f      	movs	r2, #31
   1596a:	400a      	ands	r2, r1
   1596c:	2101      	movs	r1, #1
   1596e:	4091      	lsls	r1, r2
   15970:	000a      	movs	r2, r1
   15972:	601a      	str	r2, [r3, #0]
}
   15974:	46c0      	nop			; (mov r8, r8)
   15976:	46bd      	mov	sp, r7
   15978:	b002      	add	sp, #8
   1597a:	bd80      	pop	{r7, pc}
   1597c:	e000e100 	.word	0xe000e100

00015980 <_extint_get_eic_from_channel>:
{
   15980:	b580      	push	{r7, lr}
   15982:	b084      	sub	sp, #16
   15984:	af00      	add	r7, sp, #0
   15986:	0002      	movs	r2, r0
   15988:	1dfb      	adds	r3, r7, #7
   1598a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1598c:	230f      	movs	r3, #15
   1598e:	18fb      	adds	r3, r7, r3
   15990:	1dfa      	adds	r2, r7, #7
   15992:	7812      	ldrb	r2, [r2, #0]
   15994:	0952      	lsrs	r2, r2, #5
   15996:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   15998:	230f      	movs	r3, #15
   1599a:	18fb      	adds	r3, r7, r3
   1599c:	781b      	ldrb	r3, [r3, #0]
   1599e:	2b00      	cmp	r3, #0
   159a0:	d10c      	bne.n	159bc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   159a2:	4b09      	ldr	r3, [pc, #36]	; (159c8 <_extint_get_eic_from_channel+0x48>)
   159a4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   159a6:	230f      	movs	r3, #15
   159a8:	18fb      	adds	r3, r7, r3
   159aa:	781b      	ldrb	r3, [r3, #0]
   159ac:	009b      	lsls	r3, r3, #2
   159ae:	2210      	movs	r2, #16
   159b0:	4694      	mov	ip, r2
   159b2:	44bc      	add	ip, r7
   159b4:	4463      	add	r3, ip
   159b6:	3b08      	subs	r3, #8
   159b8:	681b      	ldr	r3, [r3, #0]
   159ba:	e000      	b.n	159be <_extint_get_eic_from_channel+0x3e>
		return NULL;
   159bc:	2300      	movs	r3, #0
}
   159be:	0018      	movs	r0, r3
   159c0:	46bd      	mov	sp, r7
   159c2:	b004      	add	sp, #16
   159c4:	bd80      	pop	{r7, pc}
   159c6:	46c0      	nop			; (mov r8, r8)
   159c8:	40001800 	.word	0x40001800

000159cc <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   159cc:	b580      	push	{r7, lr}
   159ce:	b082      	sub	sp, #8
   159d0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   159d2:	4b0f      	ldr	r3, [pc, #60]	; (15a10 <extint_is_syncing+0x44>)
   159d4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   159d6:	2300      	movs	r3, #0
   159d8:	607b      	str	r3, [r7, #4]
   159da:	e011      	b.n	15a00 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   159dc:	687b      	ldr	r3, [r7, #4]
   159de:	009b      	lsls	r3, r3, #2
   159e0:	2208      	movs	r2, #8
   159e2:	4694      	mov	ip, r2
   159e4:	44bc      	add	ip, r7
   159e6:	4463      	add	r3, ip
   159e8:	3b08      	subs	r3, #8
   159ea:	681b      	ldr	r3, [r3, #0]
   159ec:	785b      	ldrb	r3, [r3, #1]
   159ee:	b2db      	uxtb	r3, r3
   159f0:	b25b      	sxtb	r3, r3
   159f2:	2b00      	cmp	r3, #0
   159f4:	da01      	bge.n	159fa <extint_is_syncing+0x2e>
			return true;
   159f6:	2301      	movs	r3, #1
   159f8:	e006      	b.n	15a08 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   159fa:	687b      	ldr	r3, [r7, #4]
   159fc:	3301      	adds	r3, #1
   159fe:	607b      	str	r3, [r7, #4]
   15a00:	687b      	ldr	r3, [r7, #4]
   15a02:	2b00      	cmp	r3, #0
   15a04:	d0ea      	beq.n	159dc <extint_is_syncing+0x10>
		}
	}
	return false;
   15a06:	2300      	movs	r3, #0
}
   15a08:	0018      	movs	r0, r3
   15a0a:	46bd      	mov	sp, r7
   15a0c:	b002      	add	sp, #8
   15a0e:	bd80      	pop	{r7, pc}
   15a10:	40001800 	.word	0x40001800

00015a14 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   15a14:	b580      	push	{r7, lr}
   15a16:	b084      	sub	sp, #16
   15a18:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   15a1a:	4b2d      	ldr	r3, [pc, #180]	; (15ad0 <_system_extint_init+0xbc>)
   15a1c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   15a1e:	2140      	movs	r1, #64	; 0x40
   15a20:	2000      	movs	r0, #0
   15a22:	4b2c      	ldr	r3, [pc, #176]	; (15ad4 <_system_extint_init+0xc0>)
   15a24:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   15a26:	003b      	movs	r3, r7
   15a28:	0018      	movs	r0, r3
   15a2a:	4b2b      	ldr	r3, [pc, #172]	; (15ad8 <_system_extint_init+0xc4>)
   15a2c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   15a2e:	003b      	movs	r3, r7
   15a30:	2200      	movs	r2, #0
   15a32:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   15a34:	003b      	movs	r3, r7
   15a36:	0019      	movs	r1, r3
   15a38:	2005      	movs	r0, #5
   15a3a:	4b28      	ldr	r3, [pc, #160]	; (15adc <_system_extint_init+0xc8>)
   15a3c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   15a3e:	2005      	movs	r0, #5
   15a40:	4b27      	ldr	r3, [pc, #156]	; (15ae0 <_system_extint_init+0xcc>)
   15a42:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   15a44:	2300      	movs	r3, #0
   15a46:	60fb      	str	r3, [r7, #12]
   15a48:	e018      	b.n	15a7c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   15a4a:	68fb      	ldr	r3, [r7, #12]
   15a4c:	009b      	lsls	r3, r3, #2
   15a4e:	2210      	movs	r2, #16
   15a50:	4694      	mov	ip, r2
   15a52:	44bc      	add	ip, r7
   15a54:	4463      	add	r3, ip
   15a56:	3b0c      	subs	r3, #12
   15a58:	681a      	ldr	r2, [r3, #0]
   15a5a:	68fb      	ldr	r3, [r7, #12]
   15a5c:	009b      	lsls	r3, r3, #2
   15a5e:	2110      	movs	r1, #16
   15a60:	468c      	mov	ip, r1
   15a62:	44bc      	add	ip, r7
   15a64:	4463      	add	r3, ip
   15a66:	3b0c      	subs	r3, #12
   15a68:	681b      	ldr	r3, [r3, #0]
   15a6a:	781b      	ldrb	r3, [r3, #0]
   15a6c:	b2db      	uxtb	r3, r3
   15a6e:	2101      	movs	r1, #1
   15a70:	430b      	orrs	r3, r1
   15a72:	b2db      	uxtb	r3, r3
   15a74:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   15a76:	68fb      	ldr	r3, [r7, #12]
   15a78:	3301      	adds	r3, #1
   15a7a:	60fb      	str	r3, [r7, #12]
   15a7c:	68fb      	ldr	r3, [r7, #12]
   15a7e:	2b00      	cmp	r3, #0
   15a80:	d0e3      	beq.n	15a4a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   15a82:	46c0      	nop			; (mov r8, r8)
   15a84:	4b17      	ldr	r3, [pc, #92]	; (15ae4 <_system_extint_init+0xd0>)
   15a86:	4798      	blx	r3
   15a88:	1e03      	subs	r3, r0, #0
   15a8a:	d1fb      	bne.n	15a84 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   15a8c:	230b      	movs	r3, #11
   15a8e:	18fb      	adds	r3, r7, r3
   15a90:	2200      	movs	r2, #0
   15a92:	701a      	strb	r2, [r3, #0]
   15a94:	e00d      	b.n	15ab2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   15a96:	230b      	movs	r3, #11
   15a98:	18fb      	adds	r3, r7, r3
   15a9a:	781a      	ldrb	r2, [r3, #0]
   15a9c:	4b12      	ldr	r3, [pc, #72]	; (15ae8 <_system_extint_init+0xd4>)
   15a9e:	0092      	lsls	r2, r2, #2
   15aa0:	2100      	movs	r1, #0
   15aa2:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   15aa4:	230b      	movs	r3, #11
   15aa6:	18fb      	adds	r3, r7, r3
   15aa8:	781a      	ldrb	r2, [r3, #0]
   15aaa:	230b      	movs	r3, #11
   15aac:	18fb      	adds	r3, r7, r3
   15aae:	3201      	adds	r2, #1
   15ab0:	701a      	strb	r2, [r3, #0]
   15ab2:	230b      	movs	r3, #11
   15ab4:	18fb      	adds	r3, r7, r3
   15ab6:	781b      	ldrb	r3, [r3, #0]
   15ab8:	2b0f      	cmp	r3, #15
   15aba:	d9ec      	bls.n	15a96 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   15abc:	2004      	movs	r0, #4
   15abe:	4b0b      	ldr	r3, [pc, #44]	; (15aec <_system_extint_init+0xd8>)
   15ac0:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   15ac2:	4b0b      	ldr	r3, [pc, #44]	; (15af0 <_system_extint_init+0xdc>)
   15ac4:	4798      	blx	r3
}
   15ac6:	46c0      	nop			; (mov r8, r8)
   15ac8:	46bd      	mov	sp, r7
   15aca:	b004      	add	sp, #16
   15acc:	bd80      	pop	{r7, pc}
   15ace:	46c0      	nop			; (mov r8, r8)
   15ad0:	40001800 	.word	0x40001800
   15ad4:	000158d1 	.word	0x000158d1
   15ad8:	000158b9 	.word	0x000158b9
   15adc:	00019141 	.word	0x00019141
   15ae0:	00019185 	.word	0x00019185
   15ae4:	000159cd 	.word	0x000159cd
   15ae8:	20005844 	.word	0x20005844
   15aec:	00015955 	.word	0x00015955
   15af0:	00015af5 	.word	0x00015af5

00015af4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   15af4:	b580      	push	{r7, lr}
   15af6:	b082      	sub	sp, #8
   15af8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   15afa:	4b15      	ldr	r3, [pc, #84]	; (15b50 <_extint_enable+0x5c>)
   15afc:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   15afe:	2300      	movs	r3, #0
   15b00:	607b      	str	r3, [r7, #4]
   15b02:	e018      	b.n	15b36 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   15b04:	687b      	ldr	r3, [r7, #4]
   15b06:	009b      	lsls	r3, r3, #2
   15b08:	2208      	movs	r2, #8
   15b0a:	4694      	mov	ip, r2
   15b0c:	44bc      	add	ip, r7
   15b0e:	4463      	add	r3, ip
   15b10:	3b08      	subs	r3, #8
   15b12:	681a      	ldr	r2, [r3, #0]
   15b14:	687b      	ldr	r3, [r7, #4]
   15b16:	009b      	lsls	r3, r3, #2
   15b18:	2108      	movs	r1, #8
   15b1a:	468c      	mov	ip, r1
   15b1c:	44bc      	add	ip, r7
   15b1e:	4463      	add	r3, ip
   15b20:	3b08      	subs	r3, #8
   15b22:	681b      	ldr	r3, [r3, #0]
   15b24:	781b      	ldrb	r3, [r3, #0]
   15b26:	b2db      	uxtb	r3, r3
   15b28:	2102      	movs	r1, #2
   15b2a:	430b      	orrs	r3, r1
   15b2c:	b2db      	uxtb	r3, r3
   15b2e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   15b30:	687b      	ldr	r3, [r7, #4]
   15b32:	3301      	adds	r3, #1
   15b34:	607b      	str	r3, [r7, #4]
   15b36:	687b      	ldr	r3, [r7, #4]
   15b38:	2b00      	cmp	r3, #0
   15b3a:	d0e3      	beq.n	15b04 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   15b3c:	46c0      	nop			; (mov r8, r8)
   15b3e:	4b05      	ldr	r3, [pc, #20]	; (15b54 <_extint_enable+0x60>)
   15b40:	4798      	blx	r3
   15b42:	1e03      	subs	r3, r0, #0
   15b44:	d1fb      	bne.n	15b3e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   15b46:	46c0      	nop			; (mov r8, r8)
   15b48:	46bd      	mov	sp, r7
   15b4a:	b002      	add	sp, #8
   15b4c:	bd80      	pop	{r7, pc}
   15b4e:	46c0      	nop			; (mov r8, r8)
   15b50:	40001800 	.word	0x40001800
   15b54:	000159cd 	.word	0x000159cd

00015b58 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   15b58:	b580      	push	{r7, lr}
   15b5a:	b082      	sub	sp, #8
   15b5c:	af00      	add	r7, sp, #0
   15b5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   15b60:	687b      	ldr	r3, [r7, #4]
   15b62:	2200      	movs	r2, #0
   15b64:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   15b66:	687b      	ldr	r3, [r7, #4]
   15b68:	2200      	movs	r2, #0
   15b6a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   15b6c:	687b      	ldr	r3, [r7, #4]
   15b6e:	2201      	movs	r2, #1
   15b70:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   15b72:	687b      	ldr	r3, [r7, #4]
   15b74:	2201      	movs	r2, #1
   15b76:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   15b78:	687b      	ldr	r3, [r7, #4]
   15b7a:	2200      	movs	r2, #0
   15b7c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   15b7e:	687b      	ldr	r3, [r7, #4]
   15b80:	2202      	movs	r2, #2
   15b82:	72da      	strb	r2, [r3, #11]
}
   15b84:	46c0      	nop			; (mov r8, r8)
   15b86:	46bd      	mov	sp, r7
   15b88:	b002      	add	sp, #8
   15b8a:	bd80      	pop	{r7, pc}

00015b8c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   15b8c:	b580      	push	{r7, lr}
   15b8e:	b086      	sub	sp, #24
   15b90:	af00      	add	r7, sp, #0
   15b92:	0002      	movs	r2, r0
   15b94:	6039      	str	r1, [r7, #0]
   15b96:	1dfb      	adds	r3, r7, #7
   15b98:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   15b9a:	2308      	movs	r3, #8
   15b9c:	18fb      	adds	r3, r7, r3
   15b9e:	0018      	movs	r0, r3
   15ba0:	4b36      	ldr	r3, [pc, #216]	; (15c7c <extint_chan_set_config+0xf0>)
   15ba2:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   15ba4:	683b      	ldr	r3, [r7, #0]
   15ba6:	685b      	ldr	r3, [r3, #4]
   15ba8:	b2da      	uxtb	r2, r3
   15baa:	2308      	movs	r3, #8
   15bac:	18fb      	adds	r3, r7, r3
   15bae:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15bb0:	2308      	movs	r3, #8
   15bb2:	18fb      	adds	r3, r7, r3
   15bb4:	2200      	movs	r2, #0
   15bb6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   15bb8:	683b      	ldr	r3, [r7, #0]
   15bba:	7a1a      	ldrb	r2, [r3, #8]
   15bbc:	2308      	movs	r3, #8
   15bbe:	18fb      	adds	r3, r7, r3
   15bc0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   15bc2:	683b      	ldr	r3, [r7, #0]
   15bc4:	681b      	ldr	r3, [r3, #0]
   15bc6:	b2db      	uxtb	r3, r3
   15bc8:	2208      	movs	r2, #8
   15bca:	18ba      	adds	r2, r7, r2
   15bcc:	0011      	movs	r1, r2
   15bce:	0018      	movs	r0, r3
   15bd0:	4b2b      	ldr	r3, [pc, #172]	; (15c80 <extint_chan_set_config+0xf4>)
   15bd2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   15bd4:	1dfb      	adds	r3, r7, #7
   15bd6:	781b      	ldrb	r3, [r3, #0]
   15bd8:	0018      	movs	r0, r3
   15bda:	4b2a      	ldr	r3, [pc, #168]	; (15c84 <extint_chan_set_config+0xf8>)
   15bdc:	4798      	blx	r3
   15bde:	0003      	movs	r3, r0
   15be0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   15be2:	1dfb      	adds	r3, r7, #7
   15be4:	781b      	ldrb	r3, [r3, #0]
   15be6:	2207      	movs	r2, #7
   15be8:	4013      	ands	r3, r2
   15bea:	009b      	lsls	r3, r3, #2
   15bec:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   15bee:	683b      	ldr	r3, [r7, #0]
   15bf0:	7adb      	ldrb	r3, [r3, #11]
   15bf2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   15bf4:	683b      	ldr	r3, [r7, #0]
   15bf6:	7a9b      	ldrb	r3, [r3, #10]
   15bf8:	2b00      	cmp	r3, #0
   15bfa:	d003      	beq.n	15c04 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   15bfc:	697b      	ldr	r3, [r7, #20]
   15bfe:	2208      	movs	r2, #8
   15c00:	4313      	orrs	r3, r2
   15c02:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   15c04:	1dfb      	adds	r3, r7, #7
   15c06:	781b      	ldrb	r3, [r3, #0]
   15c08:	08db      	lsrs	r3, r3, #3
   15c0a:	b2db      	uxtb	r3, r3
   15c0c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   15c0e:	1dfb      	adds	r3, r7, #7
   15c10:	781b      	ldrb	r3, [r3, #0]
   15c12:	08db      	lsrs	r3, r3, #3
   15c14:	b2db      	uxtb	r3, r3
   15c16:	001a      	movs	r2, r3
   15c18:	693b      	ldr	r3, [r7, #16]
   15c1a:	3206      	adds	r2, #6
   15c1c:	0092      	lsls	r2, r2, #2
   15c1e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   15c20:	210f      	movs	r1, #15
   15c22:	68fa      	ldr	r2, [r7, #12]
   15c24:	4091      	lsls	r1, r2
   15c26:	000a      	movs	r2, r1
   15c28:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   15c2a:	401a      	ands	r2, r3
			(new_config << config_pos);
   15c2c:	6979      	ldr	r1, [r7, #20]
   15c2e:	68fb      	ldr	r3, [r7, #12]
   15c30:	4099      	lsls	r1, r3
   15c32:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   15c34:	431a      	orrs	r2, r3
   15c36:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   15c38:	693b      	ldr	r3, [r7, #16]
   15c3a:	1d82      	adds	r2, r0, #6
   15c3c:	0092      	lsls	r2, r2, #2
   15c3e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   15c40:	683b      	ldr	r3, [r7, #0]
   15c42:	7a5b      	ldrb	r3, [r3, #9]
   15c44:	2b00      	cmp	r3, #0
   15c46:	d00a      	beq.n	15c5e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   15c48:	693b      	ldr	r3, [r7, #16]
   15c4a:	695a      	ldr	r2, [r3, #20]
   15c4c:	1dfb      	adds	r3, r7, #7
   15c4e:	781b      	ldrb	r3, [r3, #0]
   15c50:	2101      	movs	r1, #1
   15c52:	4099      	lsls	r1, r3
   15c54:	000b      	movs	r3, r1
   15c56:	431a      	orrs	r2, r3
   15c58:	693b      	ldr	r3, [r7, #16]
   15c5a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   15c5c:	e00a      	b.n	15c74 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   15c5e:	693b      	ldr	r3, [r7, #16]
   15c60:	695b      	ldr	r3, [r3, #20]
   15c62:	1dfa      	adds	r2, r7, #7
   15c64:	7812      	ldrb	r2, [r2, #0]
   15c66:	2101      	movs	r1, #1
   15c68:	4091      	lsls	r1, r2
   15c6a:	000a      	movs	r2, r1
   15c6c:	43d2      	mvns	r2, r2
   15c6e:	401a      	ands	r2, r3
   15c70:	693b      	ldr	r3, [r7, #16]
   15c72:	615a      	str	r2, [r3, #20]
}
   15c74:	46c0      	nop			; (mov r8, r8)
   15c76:	46bd      	mov	sp, r7
   15c78:	b006      	add	sp, #24
   15c7a:	bd80      	pop	{r7, pc}
   15c7c:	0001592d 	.word	0x0001592d
   15c80:	000194a1 	.word	0x000194a1
   15c84:	00015981 	.word	0x00015981

00015c88 <system_pinmux_get_config_defaults>:
{
   15c88:	b580      	push	{r7, lr}
   15c8a:	b082      	sub	sp, #8
   15c8c:	af00      	add	r7, sp, #0
   15c8e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   15c90:	687b      	ldr	r3, [r7, #4]
   15c92:	2280      	movs	r2, #128	; 0x80
   15c94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15c96:	687b      	ldr	r3, [r7, #4]
   15c98:	2200      	movs	r2, #0
   15c9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15c9c:	687b      	ldr	r3, [r7, #4]
   15c9e:	2201      	movs	r2, #1
   15ca0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   15ca2:	687b      	ldr	r3, [r7, #4]
   15ca4:	2200      	movs	r2, #0
   15ca6:	70da      	strb	r2, [r3, #3]
}
   15ca8:	46c0      	nop			; (mov r8, r8)
   15caa:	46bd      	mov	sp, r7
   15cac:	b002      	add	sp, #8
   15cae:	bd80      	pop	{r7, pc}

00015cb0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   15cb0:	b580      	push	{r7, lr}
   15cb2:	b084      	sub	sp, #16
   15cb4:	af00      	add	r7, sp, #0
   15cb6:	0002      	movs	r2, r0
   15cb8:	6039      	str	r1, [r7, #0]
   15cba:	1dfb      	adds	r3, r7, #7
   15cbc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   15cbe:	230c      	movs	r3, #12
   15cc0:	18fb      	adds	r3, r7, r3
   15cc2:	0018      	movs	r0, r3
   15cc4:	4b10      	ldr	r3, [pc, #64]	; (15d08 <port_pin_set_config+0x58>)
   15cc6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   15cc8:	230c      	movs	r3, #12
   15cca:	18fb      	adds	r3, r7, r3
   15ccc:	2280      	movs	r2, #128	; 0x80
   15cce:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   15cd0:	683b      	ldr	r3, [r7, #0]
   15cd2:	781a      	ldrb	r2, [r3, #0]
   15cd4:	230c      	movs	r3, #12
   15cd6:	18fb      	adds	r3, r7, r3
   15cd8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   15cda:	683b      	ldr	r3, [r7, #0]
   15cdc:	785a      	ldrb	r2, [r3, #1]
   15cde:	230c      	movs	r3, #12
   15ce0:	18fb      	adds	r3, r7, r3
   15ce2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   15ce4:	683b      	ldr	r3, [r7, #0]
   15ce6:	789a      	ldrb	r2, [r3, #2]
   15ce8:	230c      	movs	r3, #12
   15cea:	18fb      	adds	r3, r7, r3
   15cec:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   15cee:	230c      	movs	r3, #12
   15cf0:	18fa      	adds	r2, r7, r3
   15cf2:	1dfb      	adds	r3, r7, #7
   15cf4:	781b      	ldrb	r3, [r3, #0]
   15cf6:	0011      	movs	r1, r2
   15cf8:	0018      	movs	r0, r3
   15cfa:	4b04      	ldr	r3, [pc, #16]	; (15d0c <port_pin_set_config+0x5c>)
   15cfc:	4798      	blx	r3
}
   15cfe:	46c0      	nop			; (mov r8, r8)
   15d00:	46bd      	mov	sp, r7
   15d02:	b004      	add	sp, #16
   15d04:	bd80      	pop	{r7, pc}
   15d06:	46c0      	nop			; (mov r8, r8)
   15d08:	00015c89 	.word	0x00015c89
   15d0c:	000194a1 	.word	0x000194a1

00015d10 <system_gclk_chan_get_config_defaults>:
{
   15d10:	b580      	push	{r7, lr}
   15d12:	b082      	sub	sp, #8
   15d14:	af00      	add	r7, sp, #0
   15d16:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   15d18:	687b      	ldr	r3, [r7, #4]
   15d1a:	2200      	movs	r2, #0
   15d1c:	701a      	strb	r2, [r3, #0]
}
   15d1e:	46c0      	nop			; (mov r8, r8)
   15d20:	46bd      	mov	sp, r7
   15d22:	b002      	add	sp, #8
   15d24:	bd80      	pop	{r7, pc}
	...

00015d28 <system_apb_clock_set_mask>:
{
   15d28:	b580      	push	{r7, lr}
   15d2a:	b082      	sub	sp, #8
   15d2c:	af00      	add	r7, sp, #0
   15d2e:	0002      	movs	r2, r0
   15d30:	6039      	str	r1, [r7, #0]
   15d32:	1dfb      	adds	r3, r7, #7
   15d34:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   15d36:	1dfb      	adds	r3, r7, #7
   15d38:	781b      	ldrb	r3, [r3, #0]
   15d3a:	2b01      	cmp	r3, #1
   15d3c:	d00a      	beq.n	15d54 <system_apb_clock_set_mask+0x2c>
   15d3e:	2b02      	cmp	r3, #2
   15d40:	d00f      	beq.n	15d62 <system_apb_clock_set_mask+0x3a>
   15d42:	2b00      	cmp	r3, #0
   15d44:	d114      	bne.n	15d70 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   15d46:	4b0e      	ldr	r3, [pc, #56]	; (15d80 <system_apb_clock_set_mask+0x58>)
   15d48:	4a0d      	ldr	r2, [pc, #52]	; (15d80 <system_apb_clock_set_mask+0x58>)
   15d4a:	6991      	ldr	r1, [r2, #24]
   15d4c:	683a      	ldr	r2, [r7, #0]
   15d4e:	430a      	orrs	r2, r1
   15d50:	619a      	str	r2, [r3, #24]
			break;
   15d52:	e00f      	b.n	15d74 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   15d54:	4b0a      	ldr	r3, [pc, #40]	; (15d80 <system_apb_clock_set_mask+0x58>)
   15d56:	4a0a      	ldr	r2, [pc, #40]	; (15d80 <system_apb_clock_set_mask+0x58>)
   15d58:	69d1      	ldr	r1, [r2, #28]
   15d5a:	683a      	ldr	r2, [r7, #0]
   15d5c:	430a      	orrs	r2, r1
   15d5e:	61da      	str	r2, [r3, #28]
			break;
   15d60:	e008      	b.n	15d74 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   15d62:	4b07      	ldr	r3, [pc, #28]	; (15d80 <system_apb_clock_set_mask+0x58>)
   15d64:	4a06      	ldr	r2, [pc, #24]	; (15d80 <system_apb_clock_set_mask+0x58>)
   15d66:	6a11      	ldr	r1, [r2, #32]
   15d68:	683a      	ldr	r2, [r7, #0]
   15d6a:	430a      	orrs	r2, r1
   15d6c:	621a      	str	r2, [r3, #32]
			break;
   15d6e:	e001      	b.n	15d74 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15d70:	2317      	movs	r3, #23
   15d72:	e000      	b.n	15d76 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   15d74:	2300      	movs	r3, #0
}
   15d76:	0018      	movs	r0, r3
   15d78:	46bd      	mov	sp, r7
   15d7a:	b002      	add	sp, #8
   15d7c:	bd80      	pop	{r7, pc}
   15d7e:	46c0      	nop			; (mov r8, r8)
   15d80:	40000400 	.word	0x40000400

00015d84 <system_interrupt_enable>:
{
   15d84:	b580      	push	{r7, lr}
   15d86:	b082      	sub	sp, #8
   15d88:	af00      	add	r7, sp, #0
   15d8a:	0002      	movs	r2, r0
   15d8c:	1dfb      	adds	r3, r7, #7
   15d8e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15d90:	4b06      	ldr	r3, [pc, #24]	; (15dac <system_interrupt_enable+0x28>)
   15d92:	1dfa      	adds	r2, r7, #7
   15d94:	7812      	ldrb	r2, [r2, #0]
   15d96:	0011      	movs	r1, r2
   15d98:	221f      	movs	r2, #31
   15d9a:	400a      	ands	r2, r1
   15d9c:	2101      	movs	r1, #1
   15d9e:	4091      	lsls	r1, r2
   15da0:	000a      	movs	r2, r1
   15da2:	601a      	str	r2, [r3, #0]
}
   15da4:	46c0      	nop			; (mov r8, r8)
   15da6:	46bd      	mov	sp, r7
   15da8:	b002      	add	sp, #8
   15daa:	bd80      	pop	{r7, pc}
   15dac:	e000e100 	.word	0xe000e100

00015db0 <system_interrupt_disable>:
{
   15db0:	b580      	push	{r7, lr}
   15db2:	b082      	sub	sp, #8
   15db4:	af00      	add	r7, sp, #0
   15db6:	0002      	movs	r2, r0
   15db8:	1dfb      	adds	r3, r7, #7
   15dba:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15dbc:	4a07      	ldr	r2, [pc, #28]	; (15ddc <system_interrupt_disable+0x2c>)
   15dbe:	1dfb      	adds	r3, r7, #7
   15dc0:	781b      	ldrb	r3, [r3, #0]
   15dc2:	0019      	movs	r1, r3
   15dc4:	231f      	movs	r3, #31
   15dc6:	400b      	ands	r3, r1
   15dc8:	2101      	movs	r1, #1
   15dca:	4099      	lsls	r1, r3
   15dcc:	000b      	movs	r3, r1
   15dce:	0019      	movs	r1, r3
   15dd0:	2380      	movs	r3, #128	; 0x80
   15dd2:	50d1      	str	r1, [r2, r3]
}
   15dd4:	46c0      	nop			; (mov r8, r8)
   15dd6:	46bd      	mov	sp, r7
   15dd8:	b002      	add	sp, #8
   15dda:	bd80      	pop	{r7, pc}
   15ddc:	e000e100 	.word	0xe000e100

00015de0 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   15de0:	b580      	push	{r7, lr}
   15de2:	b084      	sub	sp, #16
   15de4:	af00      	add	r7, sp, #0
   15de6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   15de8:	687b      	ldr	r3, [r7, #4]
   15dea:	681b      	ldr	r3, [r3, #0]
   15dec:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   15dee:	68fb      	ldr	r3, [r7, #12]
   15df0:	7a9b      	ldrb	r3, [r3, #10]
   15df2:	b2db      	uxtb	r3, r3
   15df4:	b25b      	sxtb	r3, r3
   15df6:	2b00      	cmp	r3, #0
   15df8:	da01      	bge.n	15dfe <rtc_calendar_is_syncing+0x1e>
                return true;
   15dfa:	2301      	movs	r3, #1
   15dfc:	e000      	b.n	15e00 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   15dfe:	2300      	movs	r3, #0
}
   15e00:	0018      	movs	r0, r3
   15e02:	46bd      	mov	sp, r7
   15e04:	b004      	add	sp, #16
   15e06:	bd80      	pop	{r7, pc}

00015e08 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   15e08:	b580      	push	{r7, lr}
   15e0a:	b084      	sub	sp, #16
   15e0c:	af00      	add	r7, sp, #0
   15e0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   15e10:	687b      	ldr	r3, [r7, #4]
   15e12:	681b      	ldr	r3, [r3, #0]
   15e14:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   15e16:	2003      	movs	r0, #3
   15e18:	4b0a      	ldr	r3, [pc, #40]	; (15e44 <rtc_calendar_enable+0x3c>)
   15e1a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   15e1c:	46c0      	nop			; (mov r8, r8)
   15e1e:	687b      	ldr	r3, [r7, #4]
   15e20:	0018      	movs	r0, r3
   15e22:	4b09      	ldr	r3, [pc, #36]	; (15e48 <rtc_calendar_enable+0x40>)
   15e24:	4798      	blx	r3
   15e26:	1e03      	subs	r3, r0, #0
   15e28:	d1f9      	bne.n	15e1e <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   15e2a:	68fb      	ldr	r3, [r7, #12]
   15e2c:	881b      	ldrh	r3, [r3, #0]
   15e2e:	b29b      	uxth	r3, r3
   15e30:	2202      	movs	r2, #2
   15e32:	4313      	orrs	r3, r2
   15e34:	b29a      	uxth	r2, r3
   15e36:	68fb      	ldr	r3, [r7, #12]
   15e38:	801a      	strh	r2, [r3, #0]
}
   15e3a:	46c0      	nop			; (mov r8, r8)
   15e3c:	46bd      	mov	sp, r7
   15e3e:	b004      	add	sp, #16
   15e40:	bd80      	pop	{r7, pc}
   15e42:	46c0      	nop			; (mov r8, r8)
   15e44:	00015d85 	.word	0x00015d85
   15e48:	00015de1 	.word	0x00015de1

00015e4c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   15e4c:	b580      	push	{r7, lr}
   15e4e:	b084      	sub	sp, #16
   15e50:	af00      	add	r7, sp, #0
   15e52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   15e54:	687b      	ldr	r3, [r7, #4]
   15e56:	681b      	ldr	r3, [r3, #0]
   15e58:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   15e5a:	2003      	movs	r0, #3
   15e5c:	4b0d      	ldr	r3, [pc, #52]	; (15e94 <rtc_calendar_disable+0x48>)
   15e5e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   15e60:	46c0      	nop			; (mov r8, r8)
   15e62:	687b      	ldr	r3, [r7, #4]
   15e64:	0018      	movs	r0, r3
   15e66:	4b0c      	ldr	r3, [pc, #48]	; (15e98 <rtc_calendar_disable+0x4c>)
   15e68:	4798      	blx	r3
   15e6a:	1e03      	subs	r3, r0, #0
   15e6c:	d1f9      	bne.n	15e62 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   15e6e:	68fb      	ldr	r3, [r7, #12]
   15e70:	22c1      	movs	r2, #193	; 0xc1
   15e72:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   15e74:	68fb      	ldr	r3, [r7, #12]
   15e76:	22c1      	movs	r2, #193	; 0xc1
   15e78:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   15e7a:	68fb      	ldr	r3, [r7, #12]
   15e7c:	881b      	ldrh	r3, [r3, #0]
   15e7e:	b29b      	uxth	r3, r3
   15e80:	2202      	movs	r2, #2
   15e82:	4393      	bics	r3, r2
   15e84:	b29a      	uxth	r2, r3
   15e86:	68fb      	ldr	r3, [r7, #12]
   15e88:	801a      	strh	r2, [r3, #0]
}
   15e8a:	46c0      	nop			; (mov r8, r8)
   15e8c:	46bd      	mov	sp, r7
   15e8e:	b004      	add	sp, #16
   15e90:	bd80      	pop	{r7, pc}
   15e92:	46c0      	nop			; (mov r8, r8)
   15e94:	00015db1 	.word	0x00015db1
   15e98:	00015de1 	.word	0x00015de1

00015e9c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   15e9c:	b580      	push	{r7, lr}
   15e9e:	b084      	sub	sp, #16
   15ea0:	af00      	add	r7, sp, #0
   15ea2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   15ea4:	687b      	ldr	r3, [r7, #4]
   15ea6:	681b      	ldr	r3, [r3, #0]
   15ea8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   15eaa:	687b      	ldr	r3, [r7, #4]
   15eac:	0018      	movs	r0, r3
   15eae:	4b0d      	ldr	r3, [pc, #52]	; (15ee4 <rtc_calendar_reset+0x48>)
   15eb0:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   15eb2:	687b      	ldr	r3, [r7, #4]
   15eb4:	2200      	movs	r2, #0
   15eb6:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   15eb8:	687b      	ldr	r3, [r7, #4]
   15eba:	2200      	movs	r2, #0
   15ebc:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   15ebe:	46c0      	nop			; (mov r8, r8)
   15ec0:	687b      	ldr	r3, [r7, #4]
   15ec2:	0018      	movs	r0, r3
   15ec4:	4b08      	ldr	r3, [pc, #32]	; (15ee8 <rtc_calendar_reset+0x4c>)
   15ec6:	4798      	blx	r3
   15ec8:	1e03      	subs	r3, r0, #0
   15eca:	d1f9      	bne.n	15ec0 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   15ecc:	68fb      	ldr	r3, [r7, #12]
   15ece:	881b      	ldrh	r3, [r3, #0]
   15ed0:	b29b      	uxth	r3, r3
   15ed2:	2201      	movs	r2, #1
   15ed4:	4313      	orrs	r3, r2
   15ed6:	b29a      	uxth	r2, r3
   15ed8:	68fb      	ldr	r3, [r7, #12]
   15eda:	801a      	strh	r2, [r3, #0]
}
   15edc:	46c0      	nop			; (mov r8, r8)
   15ede:	46bd      	mov	sp, r7
   15ee0:	b004      	add	sp, #16
   15ee2:	bd80      	pop	{r7, pc}
   15ee4:	00015e4d 	.word	0x00015e4d
   15ee8:	00015de1 	.word	0x00015de1

00015eec <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   15eec:	b580      	push	{r7, lr}
   15eee:	b084      	sub	sp, #16
   15ef0:	af00      	add	r7, sp, #0
   15ef2:	6078      	str	r0, [r7, #4]
   15ef4:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   15ef6:	683b      	ldr	r3, [r7, #0]
   15ef8:	88db      	ldrh	r3, [r3, #6]
   15efa:	001a      	movs	r2, r3
   15efc:	687b      	ldr	r3, [r7, #4]
   15efe:	88db      	ldrh	r3, [r3, #6]
   15f00:	1ad3      	subs	r3, r2, r3
   15f02:	069b      	lsls	r3, r3, #26
   15f04:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   15f06:	683b      	ldr	r3, [r7, #0]
   15f08:	795b      	ldrb	r3, [r3, #5]
   15f0a:	059b      	lsls	r3, r3, #22
   15f0c:	001a      	movs	r2, r3
   15f0e:	68fb      	ldr	r3, [r7, #12]
   15f10:	4313      	orrs	r3, r2
   15f12:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   15f14:	683b      	ldr	r3, [r7, #0]
   15f16:	791b      	ldrb	r3, [r3, #4]
   15f18:	045b      	lsls	r3, r3, #17
   15f1a:	001a      	movs	r2, r3
   15f1c:	68fb      	ldr	r3, [r7, #12]
   15f1e:	4313      	orrs	r3, r2
   15f20:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   15f22:	683b      	ldr	r3, [r7, #0]
   15f24:	789b      	ldrb	r3, [r3, #2]
   15f26:	031b      	lsls	r3, r3, #12
   15f28:	001a      	movs	r2, r3
   15f2a:	68fb      	ldr	r3, [r7, #12]
   15f2c:	4313      	orrs	r3, r2
   15f2e:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   15f30:	687b      	ldr	r3, [r7, #4]
   15f32:	791b      	ldrb	r3, [r3, #4]
   15f34:	2201      	movs	r2, #1
   15f36:	4053      	eors	r3, r2
   15f38:	b2db      	uxtb	r3, r3
   15f3a:	2b00      	cmp	r3, #0
   15f3c:	d008      	beq.n	15f50 <rtc_calendar_time_to_register_value+0x64>
   15f3e:	683b      	ldr	r3, [r7, #0]
   15f40:	78db      	ldrb	r3, [r3, #3]
   15f42:	2b00      	cmp	r3, #0
   15f44:	d004      	beq.n	15f50 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   15f46:	68fb      	ldr	r3, [r7, #12]
   15f48:	2280      	movs	r2, #128	; 0x80
   15f4a:	0252      	lsls	r2, r2, #9
   15f4c:	4313      	orrs	r3, r2
   15f4e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   15f50:	683b      	ldr	r3, [r7, #0]
   15f52:	785b      	ldrb	r3, [r3, #1]
   15f54:	019b      	lsls	r3, r3, #6
   15f56:	001a      	movs	r2, r3
   15f58:	68fb      	ldr	r3, [r7, #12]
   15f5a:	4313      	orrs	r3, r2
   15f5c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   15f5e:	683b      	ldr	r3, [r7, #0]
   15f60:	781b      	ldrb	r3, [r3, #0]
   15f62:	001a      	movs	r2, r3
   15f64:	68fb      	ldr	r3, [r7, #12]
   15f66:	4313      	orrs	r3, r2
   15f68:	60fb      	str	r3, [r7, #12]

	return register_value;
   15f6a:	68fb      	ldr	r3, [r7, #12]
}
   15f6c:	0018      	movs	r0, r3
   15f6e:	46bd      	mov	sp, r7
   15f70:	b004      	add	sp, #16
   15f72:	bd80      	pop	{r7, pc}

00015f74 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   15f74:	b580      	push	{r7, lr}
   15f76:	b084      	sub	sp, #16
   15f78:	af00      	add	r7, sp, #0
   15f7a:	60f8      	str	r0, [r7, #12]
   15f7c:	60b9      	str	r1, [r7, #8]
   15f7e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   15f80:	68bb      	ldr	r3, [r7, #8]
   15f82:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   15f84:	b29a      	uxth	r2, r3
   15f86:	68fb      	ldr	r3, [r7, #12]
   15f88:	88db      	ldrh	r3, [r3, #6]
   15f8a:	18d3      	adds	r3, r2, r3
   15f8c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   15f8e:	687b      	ldr	r3, [r7, #4]
   15f90:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   15f92:	68bb      	ldr	r3, [r7, #8]
   15f94:	0d9b      	lsrs	r3, r3, #22
   15f96:	b2db      	uxtb	r3, r3
   15f98:	220f      	movs	r2, #15
   15f9a:	4013      	ands	r3, r2
   15f9c:	b2da      	uxtb	r2, r3
   15f9e:	687b      	ldr	r3, [r7, #4]
   15fa0:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   15fa2:	68bb      	ldr	r3, [r7, #8]
   15fa4:	0c5b      	lsrs	r3, r3, #17
   15fa6:	b2db      	uxtb	r3, r3
   15fa8:	221f      	movs	r2, #31
   15faa:	4013      	ands	r3, r2
   15fac:	b2da      	uxtb	r2, r3
   15fae:	687b      	ldr	r3, [r7, #4]
   15fb0:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   15fb2:	68fb      	ldr	r3, [r7, #12]
   15fb4:	791b      	ldrb	r3, [r3, #4]
   15fb6:	2b00      	cmp	r3, #0
   15fb8:	d008      	beq.n	15fcc <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   15fba:	68bb      	ldr	r3, [r7, #8]
   15fbc:	0b1b      	lsrs	r3, r3, #12
   15fbe:	b2db      	uxtb	r3, r3
   15fc0:	221f      	movs	r2, #31
   15fc2:	4013      	ands	r3, r2
   15fc4:	b2da      	uxtb	r2, r3
   15fc6:	687b      	ldr	r3, [r7, #4]
   15fc8:	709a      	strb	r2, [r3, #2]
   15fca:	e010      	b.n	15fee <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   15fcc:	68bb      	ldr	r3, [r7, #8]
   15fce:	0b1b      	lsrs	r3, r3, #12
   15fd0:	b2db      	uxtb	r3, r3
   15fd2:	220f      	movs	r2, #15
   15fd4:	4013      	ands	r3, r2
   15fd6:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   15fd8:	687b      	ldr	r3, [r7, #4]
   15fda:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   15fdc:	68ba      	ldr	r2, [r7, #8]
   15fde:	2380      	movs	r3, #128	; 0x80
   15fe0:	025b      	lsls	r3, r3, #9
   15fe2:	4013      	ands	r3, r2
   15fe4:	1e5a      	subs	r2, r3, #1
   15fe6:	4193      	sbcs	r3, r2
   15fe8:	b2da      	uxtb	r2, r3
   15fea:	687b      	ldr	r3, [r7, #4]
   15fec:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   15fee:	68bb      	ldr	r3, [r7, #8]
   15ff0:	099b      	lsrs	r3, r3, #6
   15ff2:	b2db      	uxtb	r3, r3
   15ff4:	223f      	movs	r2, #63	; 0x3f
   15ff6:	4013      	ands	r3, r2
   15ff8:	b2da      	uxtb	r2, r3
   15ffa:	687b      	ldr	r3, [r7, #4]
   15ffc:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   15ffe:	68bb      	ldr	r3, [r7, #8]
   16000:	b2db      	uxtb	r3, r3
   16002:	223f      	movs	r2, #63	; 0x3f
   16004:	4013      	ands	r3, r2
   16006:	b2da      	uxtb	r2, r3
   16008:	687b      	ldr	r3, [r7, #4]
   1600a:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   1600c:	46c0      	nop			; (mov r8, r8)
   1600e:	46bd      	mov	sp, r7
   16010:	b004      	add	sp, #16
   16012:	bd80      	pop	{r7, pc}

00016014 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   16014:	b580      	push	{r7, lr}
   16016:	b084      	sub	sp, #16
   16018:	af00      	add	r7, sp, #0
   1601a:	6078      	str	r0, [r7, #4]
   1601c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1601e:	687b      	ldr	r3, [r7, #4]
   16020:	681b      	ldr	r3, [r3, #0]
   16022:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   16024:	683b      	ldr	r3, [r7, #0]
   16026:	881a      	ldrh	r2, [r3, #0]
   16028:	230e      	movs	r3, #14
   1602a:	18fb      	adds	r3, r7, r3
   1602c:	2108      	movs	r1, #8
   1602e:	430a      	orrs	r2, r1
   16030:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   16032:	683b      	ldr	r3, [r7, #0]
   16034:	791b      	ldrb	r3, [r3, #4]
   16036:	2201      	movs	r2, #1
   16038:	4053      	eors	r3, r2
   1603a:	b2db      	uxtb	r3, r3
   1603c:	2b00      	cmp	r3, #0
   1603e:	d007      	beq.n	16050 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   16040:	230e      	movs	r3, #14
   16042:	18fb      	adds	r3, r7, r3
   16044:	220e      	movs	r2, #14
   16046:	18ba      	adds	r2, r7, r2
   16048:	8812      	ldrh	r2, [r2, #0]
   1604a:	2140      	movs	r1, #64	; 0x40
   1604c:	430a      	orrs	r2, r1
   1604e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   16050:	683b      	ldr	r3, [r7, #0]
   16052:	789b      	ldrb	r3, [r3, #2]
   16054:	2b00      	cmp	r3, #0
   16056:	d007      	beq.n	16068 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   16058:	230e      	movs	r3, #14
   1605a:	18fb      	adds	r3, r7, r3
   1605c:	220e      	movs	r2, #14
   1605e:	18ba      	adds	r2, r7, r2
   16060:	8812      	ldrh	r2, [r2, #0]
   16062:	2180      	movs	r1, #128	; 0x80
   16064:	430a      	orrs	r2, r1
   16066:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   16068:	68bb      	ldr	r3, [r7, #8]
   1606a:	220e      	movs	r2, #14
   1606c:	18ba      	adds	r2, r7, r2
   1606e:	8812      	ldrh	r2, [r2, #0]
   16070:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   16072:	683b      	ldr	r3, [r7, #0]
   16074:	78db      	ldrb	r3, [r3, #3]
   16076:	2b00      	cmp	r3, #0
   16078:	d008      	beq.n	1608c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   1607a:	68bb      	ldr	r3, [r7, #8]
   1607c:	885b      	ldrh	r3, [r3, #2]
   1607e:	b29b      	uxth	r3, r3
   16080:	2280      	movs	r2, #128	; 0x80
   16082:	01d2      	lsls	r2, r2, #7
   16084:	4313      	orrs	r3, r2
   16086:	b29a      	uxth	r2, r3
   16088:	68bb      	ldr	r3, [r7, #8]
   1608a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   1608c:	230d      	movs	r3, #13
   1608e:	18fb      	adds	r3, r7, r3
   16090:	2200      	movs	r2, #0
   16092:	701a      	strb	r2, [r3, #0]
   16094:	e017      	b.n	160c6 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   16096:	230d      	movs	r3, #13
   16098:	18fb      	adds	r3, r7, r3
   1609a:	781a      	ldrb	r2, [r3, #0]
   1609c:	0013      	movs	r3, r2
   1609e:	009b      	lsls	r3, r3, #2
   160a0:	189b      	adds	r3, r3, r2
   160a2:	005b      	lsls	r3, r3, #1
   160a4:	3308      	adds	r3, #8
   160a6:	683a      	ldr	r2, [r7, #0]
   160a8:	18d1      	adds	r1, r2, r3
   160aa:	230d      	movs	r3, #13
   160ac:	18fb      	adds	r3, r7, r3
   160ae:	781a      	ldrb	r2, [r3, #0]
   160b0:	687b      	ldr	r3, [r7, #4]
   160b2:	0018      	movs	r0, r3
   160b4:	4b08      	ldr	r3, [pc, #32]	; (160d8 <_rtc_calendar_set_config+0xc4>)
   160b6:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   160b8:	230d      	movs	r3, #13
   160ba:	18fb      	adds	r3, r7, r3
   160bc:	781a      	ldrb	r2, [r3, #0]
   160be:	230d      	movs	r3, #13
   160c0:	18fb      	adds	r3, r7, r3
   160c2:	3201      	adds	r2, #1
   160c4:	701a      	strb	r2, [r3, #0]
   160c6:	230d      	movs	r3, #13
   160c8:	18fb      	adds	r3, r7, r3
   160ca:	781b      	ldrb	r3, [r3, #0]
   160cc:	2b00      	cmp	r3, #0
   160ce:	d0e2      	beq.n	16096 <_rtc_calendar_set_config+0x82>
	}
}
   160d0:	46c0      	nop			; (mov r8, r8)
   160d2:	46bd      	mov	sp, r7
   160d4:	b004      	add	sp, #16
   160d6:	bd80      	pop	{r7, pc}
   160d8:	000161fd 	.word	0x000161fd

000160dc <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   160dc:	b580      	push	{r7, lr}
   160de:	b086      	sub	sp, #24
   160e0:	af00      	add	r7, sp, #0
   160e2:	60f8      	str	r0, [r7, #12]
   160e4:	60b9      	str	r1, [r7, #8]
   160e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   160e8:	68fb      	ldr	r3, [r7, #12]
   160ea:	68ba      	ldr	r2, [r7, #8]
   160ec:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   160ee:	2120      	movs	r1, #32
   160f0:	2000      	movs	r0, #0
   160f2:	4b18      	ldr	r3, [pc, #96]	; (16154 <rtc_calendar_init+0x78>)
   160f4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   160f6:	2314      	movs	r3, #20
   160f8:	18fb      	adds	r3, r7, r3
   160fa:	0018      	movs	r0, r3
   160fc:	4b16      	ldr	r3, [pc, #88]	; (16158 <rtc_calendar_init+0x7c>)
   160fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   16100:	2314      	movs	r3, #20
   16102:	18fb      	adds	r3, r7, r3
   16104:	2202      	movs	r2, #2
   16106:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   16108:	2314      	movs	r3, #20
   1610a:	18fb      	adds	r3, r7, r3
   1610c:	0019      	movs	r1, r3
   1610e:	2004      	movs	r0, #4
   16110:	4b12      	ldr	r3, [pc, #72]	; (1615c <rtc_calendar_init+0x80>)
   16112:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   16114:	2004      	movs	r0, #4
   16116:	4b12      	ldr	r3, [pc, #72]	; (16160 <rtc_calendar_init+0x84>)
   16118:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   1611a:	68fb      	ldr	r3, [r7, #12]
   1611c:	0018      	movs	r0, r3
   1611e:	4b11      	ldr	r3, [pc, #68]	; (16164 <rtc_calendar_init+0x88>)
   16120:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   16122:	687b      	ldr	r3, [r7, #4]
   16124:	791a      	ldrb	r2, [r3, #4]
   16126:	68fb      	ldr	r3, [r7, #12]
   16128:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   1612a:	687b      	ldr	r3, [r7, #4]
   1612c:	78da      	ldrb	r2, [r3, #3]
   1612e:	68fb      	ldr	r3, [r7, #12]
   16130:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   16132:	687b      	ldr	r3, [r7, #4]
   16134:	88da      	ldrh	r2, [r3, #6]
   16136:	68fb      	ldr	r3, [r7, #12]
   16138:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   1613a:	4b0b      	ldr	r3, [pc, #44]	; (16168 <rtc_calendar_init+0x8c>)
   1613c:	68fa      	ldr	r2, [r7, #12]
   1613e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   16140:	687a      	ldr	r2, [r7, #4]
   16142:	68fb      	ldr	r3, [r7, #12]
   16144:	0011      	movs	r1, r2
   16146:	0018      	movs	r0, r3
   16148:	4b08      	ldr	r3, [pc, #32]	; (1616c <rtc_calendar_init+0x90>)
   1614a:	4798      	blx	r3
}
   1614c:	46c0      	nop			; (mov r8, r8)
   1614e:	46bd      	mov	sp, r7
   16150:	b006      	add	sp, #24
   16152:	bd80      	pop	{r7, pc}
   16154:	00015d29 	.word	0x00015d29
   16158:	00015d11 	.word	0x00015d11
   1615c:	00019141 	.word	0x00019141
   16160:	00019185 	.word	0x00019185
   16164:	00015e9d 	.word	0x00015e9d
   16168:	20005884 	.word	0x20005884
   1616c:	00016015 	.word	0x00016015

00016170 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   16170:	b580      	push	{r7, lr}
   16172:	b084      	sub	sp, #16
   16174:	af00      	add	r7, sp, #0
   16176:	6078      	str	r0, [r7, #4]
   16178:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1617a:	687b      	ldr	r3, [r7, #4]
   1617c:	681b      	ldr	r3, [r3, #0]
   1617e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   16180:	687b      	ldr	r3, [r7, #4]
   16182:	795b      	ldrb	r3, [r3, #5]
   16184:	2201      	movs	r2, #1
   16186:	4053      	eors	r3, r2
   16188:	b2db      	uxtb	r3, r3
   1618a:	2b00      	cmp	r3, #0
   1618c:	d00a      	beq.n	161a4 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   1618e:	68fb      	ldr	r3, [r7, #12]
   16190:	4a16      	ldr	r2, [pc, #88]	; (161ec <rtc_calendar_get_time+0x7c>)
   16192:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   16194:	46c0      	nop			; (mov r8, r8)
   16196:	687b      	ldr	r3, [r7, #4]
   16198:	0018      	movs	r0, r3
   1619a:	4b15      	ldr	r3, [pc, #84]	; (161f0 <rtc_calendar_get_time+0x80>)
   1619c:	4798      	blx	r3
   1619e:	1e03      	subs	r3, r0, #0
   161a0:	d1f9      	bne.n	16196 <rtc_calendar_get_time+0x26>
   161a2:	e016      	b.n	161d2 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   161a4:	68fb      	ldr	r3, [r7, #12]
   161a6:	885b      	ldrh	r3, [r3, #2]
   161a8:	b29b      	uxth	r3, r3
   161aa:	001a      	movs	r2, r3
   161ac:	2380      	movs	r3, #128	; 0x80
   161ae:	01db      	lsls	r3, r3, #7
   161b0:	4013      	ands	r3, r2
   161b2:	d10e      	bne.n	161d2 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   161b4:	68fb      	ldr	r3, [r7, #12]
   161b6:	885b      	ldrh	r3, [r3, #2]
   161b8:	b29b      	uxth	r3, r3
   161ba:	4a0e      	ldr	r2, [pc, #56]	; (161f4 <rtc_calendar_get_time+0x84>)
   161bc:	4313      	orrs	r3, r2
   161be:	b29a      	uxth	r2, r3
   161c0:	68fb      	ldr	r3, [r7, #12]
   161c2:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   161c4:	46c0      	nop			; (mov r8, r8)
   161c6:	687b      	ldr	r3, [r7, #4]
   161c8:	0018      	movs	r0, r3
   161ca:	4b09      	ldr	r3, [pc, #36]	; (161f0 <rtc_calendar_get_time+0x80>)
   161cc:	4798      	blx	r3
   161ce:	1e03      	subs	r3, r0, #0
   161d0:	d1f9      	bne.n	161c6 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   161d2:	68fb      	ldr	r3, [r7, #12]
   161d4:	691b      	ldr	r3, [r3, #16]
   161d6:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   161d8:	683a      	ldr	r2, [r7, #0]
   161da:	68b9      	ldr	r1, [r7, #8]
   161dc:	687b      	ldr	r3, [r7, #4]
   161de:	0018      	movs	r0, r3
   161e0:	4b05      	ldr	r3, [pc, #20]	; (161f8 <rtc_calendar_get_time+0x88>)
   161e2:	4798      	blx	r3
}
   161e4:	46c0      	nop			; (mov r8, r8)
   161e6:	46bd      	mov	sp, r7
   161e8:	b004      	add	sp, #16
   161ea:	bd80      	pop	{r7, pc}
   161ec:	ffff8000 	.word	0xffff8000
   161f0:	00015de1 	.word	0x00015de1
   161f4:	ffffc000 	.word	0xffffc000
   161f8:	00015f75 	.word	0x00015f75

000161fc <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   161fc:	b580      	push	{r7, lr}
   161fe:	b086      	sub	sp, #24
   16200:	af00      	add	r7, sp, #0
   16202:	60f8      	str	r0, [r7, #12]
   16204:	60b9      	str	r1, [r7, #8]
   16206:	1dfb      	adds	r3, r7, #7
   16208:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1620a:	68fb      	ldr	r3, [r7, #12]
   1620c:	681b      	ldr	r3, [r3, #0]
   1620e:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   16210:	1dfb      	adds	r3, r7, #7
   16212:	781b      	ldrb	r3, [r3, #0]
   16214:	2b01      	cmp	r3, #1
   16216:	d901      	bls.n	1621c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   16218:	2317      	movs	r3, #23
   1621a:	e021      	b.n	16260 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   1621c:	68ba      	ldr	r2, [r7, #8]
   1621e:	68fb      	ldr	r3, [r7, #12]
   16220:	0011      	movs	r1, r2
   16222:	0018      	movs	r0, r3
   16224:	4b10      	ldr	r3, [pc, #64]	; (16268 <rtc_calendar_set_alarm+0x6c>)
   16226:	4798      	blx	r3
   16228:	0003      	movs	r3, r0
   1622a:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   1622c:	46c0      	nop			; (mov r8, r8)
   1622e:	68fb      	ldr	r3, [r7, #12]
   16230:	0018      	movs	r0, r3
   16232:	4b0e      	ldr	r3, [pc, #56]	; (1626c <rtc_calendar_set_alarm+0x70>)
   16234:	4798      	blx	r3
   16236:	1e03      	subs	r3, r0, #0
   16238:	d1f9      	bne.n	1622e <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   1623a:	1dfb      	adds	r3, r7, #7
   1623c:	781a      	ldrb	r2, [r3, #0]
   1623e:	697b      	ldr	r3, [r7, #20]
   16240:	3203      	adds	r2, #3
   16242:	00d2      	lsls	r2, r2, #3
   16244:	6939      	ldr	r1, [r7, #16]
   16246:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   16248:	1dfb      	adds	r3, r7, #7
   1624a:	781b      	ldrb	r3, [r3, #0]
   1624c:	68ba      	ldr	r2, [r7, #8]
   1624e:	7a11      	ldrb	r1, [r2, #8]
   16250:	697a      	ldr	r2, [r7, #20]
   16252:	3303      	adds	r3, #3
   16254:	00db      	lsls	r3, r3, #3
   16256:	18d3      	adds	r3, r2, r3
   16258:	3304      	adds	r3, #4
   1625a:	1c0a      	adds	r2, r1, #0
   1625c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1625e:	2300      	movs	r3, #0
}
   16260:	0018      	movs	r0, r3
   16262:	46bd      	mov	sp, r7
   16264:	b006      	add	sp, #24
   16266:	bd80      	pop	{r7, pc}
   16268:	00015eed 	.word	0x00015eed
   1626c:	00015de1 	.word	0x00015de1

00016270 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   16270:	b580      	push	{r7, lr}
   16272:	b086      	sub	sp, #24
   16274:	af00      	add	r7, sp, #0
   16276:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   16278:	4b28      	ldr	r3, [pc, #160]	; (1631c <_rtc_interrupt_handler+0xac>)
   1627a:	687a      	ldr	r2, [r7, #4]
   1627c:	0092      	lsls	r2, r2, #2
   1627e:	58d3      	ldr	r3, [r2, r3]
   16280:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   16282:	697b      	ldr	r3, [r7, #20]
   16284:	681b      	ldr	r3, [r3, #0]
   16286:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   16288:	230e      	movs	r3, #14
   1628a:	18fb      	adds	r3, r7, r3
   1628c:	697a      	ldr	r2, [r7, #20]
   1628e:	8a52      	ldrh	r2, [r2, #18]
   16290:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   16292:	697b      	ldr	r3, [r7, #20]
   16294:	8a1b      	ldrh	r3, [r3, #16]
   16296:	b29a      	uxth	r2, r3
   16298:	230e      	movs	r3, #14
   1629a:	18fb      	adds	r3, r7, r3
   1629c:	210e      	movs	r1, #14
   1629e:	1879      	adds	r1, r7, r1
   162a0:	8809      	ldrh	r1, [r1, #0]
   162a2:	400a      	ands	r2, r1
   162a4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   162a6:	693b      	ldr	r3, [r7, #16]
   162a8:	7a1b      	ldrb	r3, [r3, #8]
   162aa:	b2da      	uxtb	r2, r3
   162ac:	230c      	movs	r3, #12
   162ae:	18fb      	adds	r3, r7, r3
   162b0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   162b2:	693b      	ldr	r3, [r7, #16]
   162b4:	79db      	ldrb	r3, [r3, #7]
   162b6:	b2db      	uxtb	r3, r3
   162b8:	b29a      	uxth	r2, r3
   162ba:	230c      	movs	r3, #12
   162bc:	18fb      	adds	r3, r7, r3
   162be:	210c      	movs	r1, #12
   162c0:	1879      	adds	r1, r7, r1
   162c2:	8809      	ldrh	r1, [r1, #0]
   162c4:	400a      	ands	r2, r1
   162c6:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   162c8:	230c      	movs	r3, #12
   162ca:	18fb      	adds	r3, r7, r3
   162cc:	881b      	ldrh	r3, [r3, #0]
   162ce:	2280      	movs	r2, #128	; 0x80
   162d0:	4013      	ands	r3, r2
   162d2:	d00c      	beq.n	162ee <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   162d4:	230e      	movs	r3, #14
   162d6:	18fb      	adds	r3, r7, r3
   162d8:	881b      	ldrh	r3, [r3, #0]
   162da:	2202      	movs	r2, #2
   162dc:	4013      	ands	r3, r2
   162de:	d002      	beq.n	162e6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   162e0:	697b      	ldr	r3, [r7, #20]
   162e2:	68db      	ldr	r3, [r3, #12]
   162e4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   162e6:	693b      	ldr	r3, [r7, #16]
   162e8:	2280      	movs	r2, #128	; 0x80
   162ea:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   162ec:	e011      	b.n	16312 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   162ee:	230c      	movs	r3, #12
   162f0:	18fb      	adds	r3, r7, r3
   162f2:	881b      	ldrh	r3, [r3, #0]
   162f4:	2201      	movs	r2, #1
   162f6:	4013      	ands	r3, r2
   162f8:	d00b      	beq.n	16312 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   162fa:	230e      	movs	r3, #14
   162fc:	18fb      	adds	r3, r7, r3
   162fe:	881b      	ldrh	r3, [r3, #0]
   16300:	2201      	movs	r2, #1
   16302:	4013      	ands	r3, r2
   16304:	d002      	beq.n	1630c <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   16306:	697b      	ldr	r3, [r7, #20]
   16308:	689b      	ldr	r3, [r3, #8]
   1630a:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   1630c:	693b      	ldr	r3, [r7, #16]
   1630e:	2201      	movs	r2, #1
   16310:	721a      	strb	r2, [r3, #8]
}
   16312:	46c0      	nop			; (mov r8, r8)
   16314:	46bd      	mov	sp, r7
   16316:	b006      	add	sp, #24
   16318:	bd80      	pop	{r7, pc}
   1631a:	46c0      	nop			; (mov r8, r8)
   1631c:	20005884 	.word	0x20005884

00016320 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   16320:	b580      	push	{r7, lr}
   16322:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   16324:	2000      	movs	r0, #0
   16326:	4b02      	ldr	r3, [pc, #8]	; (16330 <RTC_Handler+0x10>)
   16328:	4798      	blx	r3
}
   1632a:	46c0      	nop			; (mov r8, r8)
   1632c:	46bd      	mov	sp, r7
   1632e:	bd80      	pop	{r7, pc}
   16330:	00016271 	.word	0x00016271

00016334 <system_gclk_chan_get_config_defaults>:
{
   16334:	b580      	push	{r7, lr}
   16336:	b082      	sub	sp, #8
   16338:	af00      	add	r7, sp, #0
   1633a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1633c:	687b      	ldr	r3, [r7, #4]
   1633e:	2200      	movs	r2, #0
   16340:	701a      	strb	r2, [r3, #0]
}
   16342:	46c0      	nop			; (mov r8, r8)
   16344:	46bd      	mov	sp, r7
   16346:	b002      	add	sp, #8
   16348:	bd80      	pop	{r7, pc}

0001634a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1634a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1634c:	b08d      	sub	sp, #52	; 0x34
   1634e:	af00      	add	r7, sp, #0
   16350:	60b8      	str	r0, [r7, #8]
   16352:	60f9      	str	r1, [r7, #12]
   16354:	603a      	str	r2, [r7, #0]
   16356:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   16358:	2300      	movs	r3, #0
   1635a:	2400      	movs	r4, #0
   1635c:	623b      	str	r3, [r7, #32]
   1635e:	627c      	str	r4, [r7, #36]	; 0x24
   16360:	2300      	movs	r3, #0
   16362:	2400      	movs	r4, #0
   16364:	61bb      	str	r3, [r7, #24]
   16366:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   16368:	233f      	movs	r3, #63	; 0x3f
   1636a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1636c:	e053      	b.n	16416 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16370:	3b20      	subs	r3, #32
   16372:	2b00      	cmp	r3, #0
   16374:	db04      	blt.n	16380 <long_division+0x36>
   16376:	2201      	movs	r2, #1
   16378:	409a      	lsls	r2, r3
   1637a:	0013      	movs	r3, r2
   1637c:	617b      	str	r3, [r7, #20]
   1637e:	e00b      	b.n	16398 <long_division+0x4e>
   16380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16382:	2220      	movs	r2, #32
   16384:	1ad3      	subs	r3, r2, r3
   16386:	2201      	movs	r2, #1
   16388:	40da      	lsrs	r2, r3
   1638a:	0013      	movs	r3, r2
   1638c:	2100      	movs	r1, #0
   1638e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16390:	4091      	lsls	r1, r2
   16392:	000a      	movs	r2, r1
   16394:	4313      	orrs	r3, r2
   16396:	617b      	str	r3, [r7, #20]
   16398:	2201      	movs	r2, #1
   1639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1639c:	409a      	lsls	r2, r3
   1639e:	0013      	movs	r3, r2
   163a0:	613b      	str	r3, [r7, #16]

		r = r << 1;
   163a2:	69bb      	ldr	r3, [r7, #24]
   163a4:	69fc      	ldr	r4, [r7, #28]
   163a6:	18db      	adds	r3, r3, r3
   163a8:	4164      	adcs	r4, r4
   163aa:	61bb      	str	r3, [r7, #24]
   163ac:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   163ae:	68bb      	ldr	r3, [r7, #8]
   163b0:	693a      	ldr	r2, [r7, #16]
   163b2:	401a      	ands	r2, r3
   163b4:	0015      	movs	r5, r2
   163b6:	68fb      	ldr	r3, [r7, #12]
   163b8:	697a      	ldr	r2, [r7, #20]
   163ba:	401a      	ands	r2, r3
   163bc:	0016      	movs	r6, r2
   163be:	002b      	movs	r3, r5
   163c0:	4333      	orrs	r3, r6
   163c2:	d007      	beq.n	163d4 <long_division+0x8a>
			r |= 0x01;
   163c4:	69bb      	ldr	r3, [r7, #24]
   163c6:	2201      	movs	r2, #1
   163c8:	4313      	orrs	r3, r2
   163ca:	61bb      	str	r3, [r7, #24]
   163cc:	69fb      	ldr	r3, [r7, #28]
   163ce:	2200      	movs	r2, #0
   163d0:	4313      	orrs	r3, r2
   163d2:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   163d4:	687a      	ldr	r2, [r7, #4]
   163d6:	69fb      	ldr	r3, [r7, #28]
   163d8:	429a      	cmp	r2, r3
   163da:	d819      	bhi.n	16410 <long_division+0xc6>
   163dc:	687a      	ldr	r2, [r7, #4]
   163de:	69fb      	ldr	r3, [r7, #28]
   163e0:	429a      	cmp	r2, r3
   163e2:	d103      	bne.n	163ec <long_division+0xa2>
   163e4:	683a      	ldr	r2, [r7, #0]
   163e6:	69bb      	ldr	r3, [r7, #24]
   163e8:	429a      	cmp	r2, r3
   163ea:	d811      	bhi.n	16410 <long_division+0xc6>
			r = r - d;
   163ec:	69b9      	ldr	r1, [r7, #24]
   163ee:	69fa      	ldr	r2, [r7, #28]
   163f0:	683b      	ldr	r3, [r7, #0]
   163f2:	687c      	ldr	r4, [r7, #4]
   163f4:	1ac9      	subs	r1, r1, r3
   163f6:	41a2      	sbcs	r2, r4
   163f8:	000b      	movs	r3, r1
   163fa:	0014      	movs	r4, r2
   163fc:	61bb      	str	r3, [r7, #24]
   163fe:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   16400:	6a3a      	ldr	r2, [r7, #32]
   16402:	693b      	ldr	r3, [r7, #16]
   16404:	4313      	orrs	r3, r2
   16406:	623b      	str	r3, [r7, #32]
   16408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1640a:	697b      	ldr	r3, [r7, #20]
   1640c:	4313      	orrs	r3, r2
   1640e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   16410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16412:	3b01      	subs	r3, #1
   16414:	62fb      	str	r3, [r7, #44]	; 0x2c
   16416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16418:	2b00      	cmp	r3, #0
   1641a:	daa8      	bge.n	1636e <long_division+0x24>
		}
	}

	return q;
   1641c:	6a3b      	ldr	r3, [r7, #32]
   1641e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   16420:	0018      	movs	r0, r3
   16422:	0021      	movs	r1, r4
   16424:	46bd      	mov	sp, r7
   16426:	b00d      	add	sp, #52	; 0x34
   16428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001642a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1642a:	b580      	push	{r7, lr}
   1642c:	b086      	sub	sp, #24
   1642e:	af00      	add	r7, sp, #0
   16430:	60f8      	str	r0, [r7, #12]
   16432:	60b9      	str	r1, [r7, #8]
   16434:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   16436:	2316      	movs	r3, #22
   16438:	18fb      	adds	r3, r7, r3
   1643a:	2200      	movs	r2, #0
   1643c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1643e:	68bb      	ldr	r3, [r7, #8]
   16440:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   16442:	68bb      	ldr	r3, [r7, #8]
   16444:	085a      	lsrs	r2, r3, #1
   16446:	68fb      	ldr	r3, [r7, #12]
   16448:	429a      	cmp	r2, r3
   1644a:	d201      	bcs.n	16450 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1644c:	2340      	movs	r3, #64	; 0x40
   1644e:	e026      	b.n	1649e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   16450:	68bb      	ldr	r3, [r7, #8]
   16452:	085b      	lsrs	r3, r3, #1
   16454:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   16456:	e00a      	b.n	1646e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   16458:	693a      	ldr	r2, [r7, #16]
   1645a:	68fb      	ldr	r3, [r7, #12]
   1645c:	1ad3      	subs	r3, r2, r3
   1645e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   16460:	2316      	movs	r3, #22
   16462:	18fb      	adds	r3, r7, r3
   16464:	881a      	ldrh	r2, [r3, #0]
   16466:	2316      	movs	r3, #22
   16468:	18fb      	adds	r3, r7, r3
   1646a:	3201      	adds	r2, #1
   1646c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1646e:	693a      	ldr	r2, [r7, #16]
   16470:	68fb      	ldr	r3, [r7, #12]
   16472:	429a      	cmp	r2, r3
   16474:	d2f0      	bcs.n	16458 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   16476:	2316      	movs	r3, #22
   16478:	18fb      	adds	r3, r7, r3
   1647a:	2216      	movs	r2, #22
   1647c:	18ba      	adds	r2, r7, r2
   1647e:	8812      	ldrh	r2, [r2, #0]
   16480:	3a01      	subs	r2, #1
   16482:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   16484:	2316      	movs	r3, #22
   16486:	18fb      	adds	r3, r7, r3
   16488:	881b      	ldrh	r3, [r3, #0]
   1648a:	2bff      	cmp	r3, #255	; 0xff
   1648c:	d901      	bls.n	16492 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1648e:	2340      	movs	r3, #64	; 0x40
   16490:	e005      	b.n	1649e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   16492:	687b      	ldr	r3, [r7, #4]
   16494:	2216      	movs	r2, #22
   16496:	18ba      	adds	r2, r7, r2
   16498:	8812      	ldrh	r2, [r2, #0]
   1649a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1649c:	2300      	movs	r3, #0
	}
}
   1649e:	0018      	movs	r0, r3
   164a0:	46bd      	mov	sp, r7
   164a2:	b006      	add	sp, #24
   164a4:	bd80      	pop	{r7, pc}
	...

000164a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   164a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   164aa:	b0a1      	sub	sp, #132	; 0x84
   164ac:	af00      	add	r7, sp, #0
   164ae:	64f8      	str	r0, [r7, #76]	; 0x4c
   164b0:	64b9      	str	r1, [r7, #72]	; 0x48
   164b2:	647a      	str	r2, [r7, #68]	; 0x44
   164b4:	2243      	movs	r2, #67	; 0x43
   164b6:	18ba      	adds	r2, r7, r2
   164b8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   164ba:	2300      	movs	r3, #0
   164bc:	2400      	movs	r4, #0
   164be:	673b      	str	r3, [r7, #112]	; 0x70
   164c0:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   164c2:	2300      	movs	r3, #0
   164c4:	2400      	movs	r4, #0
   164c6:	66bb      	str	r3, [r7, #104]	; 0x68
   164c8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   164ca:	2300      	movs	r3, #0
   164cc:	2400      	movs	r4, #0
   164ce:	67bb      	str	r3, [r7, #120]	; 0x78
   164d0:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   164d2:	2300      	movs	r3, #0
   164d4:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   164d6:	2358      	movs	r3, #88	; 0x58
   164d8:	2240      	movs	r2, #64	; 0x40
   164da:	4694      	mov	ip, r2
   164dc:	44bc      	add	ip, r7
   164de:	4463      	add	r3, ip
   164e0:	781a      	ldrb	r2, [r3, #0]
   164e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   164e4:	435a      	muls	r2, r3
   164e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   164e8:	429a      	cmp	r2, r3
   164ea:	d901      	bls.n	164f0 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   164ec:	2340      	movs	r3, #64	; 0x40
   164ee:	e0b3      	b.n	16658 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   164f0:	2343      	movs	r3, #67	; 0x43
   164f2:	18fb      	adds	r3, r7, r3
   164f4:	781b      	ldrb	r3, [r3, #0]
   164f6:	2b00      	cmp	r3, #0
   164f8:	d13d      	bne.n	16576 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   164fa:	2358      	movs	r3, #88	; 0x58
   164fc:	2240      	movs	r2, #64	; 0x40
   164fe:	4694      	mov	ip, r2
   16500:	44bc      	add	ip, r7
   16502:	4463      	add	r3, ip
   16504:	781b      	ldrb	r3, [r3, #0]
   16506:	b2db      	uxtb	r3, r3
   16508:	613b      	str	r3, [r7, #16]
   1650a:	2300      	movs	r3, #0
   1650c:	617b      	str	r3, [r7, #20]
   1650e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16510:	60bb      	str	r3, [r7, #8]
   16512:	2300      	movs	r3, #0
   16514:	60fb      	str	r3, [r7, #12]
   16516:	4c52      	ldr	r4, [pc, #328]	; (16660 <_sercom_get_async_baud_val+0x1b8>)
   16518:	68ba      	ldr	r2, [r7, #8]
   1651a:	68fb      	ldr	r3, [r7, #12]
   1651c:	6938      	ldr	r0, [r7, #16]
   1651e:	6979      	ldr	r1, [r7, #20]
   16520:	47a0      	blx	r4
   16522:	0003      	movs	r3, r0
   16524:	000c      	movs	r4, r1
   16526:	001b      	movs	r3, r3
   16528:	65fb      	str	r3, [r7, #92]	; 0x5c
   1652a:	2300      	movs	r3, #0
   1652c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16530:	603b      	str	r3, [r7, #0]
   16532:	2300      	movs	r3, #0
   16534:	607b      	str	r3, [r7, #4]
   16536:	6db8      	ldr	r0, [r7, #88]	; 0x58
   16538:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1653a:	683a      	ldr	r2, [r7, #0]
   1653c:	687b      	ldr	r3, [r7, #4]
   1653e:	4c49      	ldr	r4, [pc, #292]	; (16664 <_sercom_get_async_baud_val+0x1bc>)
   16540:	47a0      	blx	r4
   16542:	0003      	movs	r3, r0
   16544:	000c      	movs	r4, r1
   16546:	673b      	str	r3, [r7, #112]	; 0x70
   16548:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1654a:	2100      	movs	r1, #0
   1654c:	2201      	movs	r2, #1
   1654e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   16550:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   16552:	1ac9      	subs	r1, r1, r3
   16554:	41a2      	sbcs	r2, r4
   16556:	000b      	movs	r3, r1
   16558:	0014      	movs	r4, r2
   1655a:	66bb      	str	r3, [r7, #104]	; 0x68
   1655c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1655e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16560:	0c1b      	lsrs	r3, r3, #16
   16562:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   16564:	0416      	lsls	r6, r2, #16
   16566:	431e      	orrs	r6, r3
   16568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1656a:	041d      	lsls	r5, r3, #16
   1656c:	0033      	movs	r3, r6
   1656e:	67bb      	str	r3, [r7, #120]	; 0x78
   16570:	2300      	movs	r3, #0
   16572:	67fb      	str	r3, [r7, #124]	; 0x7c
   16574:	e06a      	b.n	1664c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   16576:	2343      	movs	r3, #67	; 0x43
   16578:	18fb      	adds	r3, r7, r3
   1657a:	781b      	ldrb	r3, [r3, #0]
   1657c:	2b01      	cmp	r3, #1
   1657e:	d165      	bne.n	1664c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   16580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16582:	633b      	str	r3, [r7, #48]	; 0x30
   16584:	2300      	movs	r3, #0
   16586:	637b      	str	r3, [r7, #52]	; 0x34
   16588:	2358      	movs	r3, #88	; 0x58
   1658a:	2240      	movs	r2, #64	; 0x40
   1658c:	4694      	mov	ip, r2
   1658e:	44bc      	add	ip, r7
   16590:	4463      	add	r3, ip
   16592:	781b      	ldrb	r3, [r3, #0]
   16594:	b2db      	uxtb	r3, r3
   16596:	62bb      	str	r3, [r7, #40]	; 0x28
   16598:	2300      	movs	r3, #0
   1659a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1659c:	4c30      	ldr	r4, [pc, #192]	; (16660 <_sercom_get_async_baud_val+0x1b8>)
   1659e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   165a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   165a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   165a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
   165a6:	47a0      	blx	r4
   165a8:	0003      	movs	r3, r0
   165aa:	000c      	movs	r4, r1
   165ac:	65bb      	str	r3, [r7, #88]	; 0x58
   165ae:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   165b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   165b2:	623b      	str	r3, [r7, #32]
   165b4:	2300      	movs	r3, #0
   165b6:	627b      	str	r3, [r7, #36]	; 0x24
   165b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   165ba:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   165bc:	001a      	movs	r2, r3
   165be:	0023      	movs	r3, r4
   165c0:	6a38      	ldr	r0, [r7, #32]
   165c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   165c4:	4c27      	ldr	r4, [pc, #156]	; (16664 <_sercom_get_async_baud_val+0x1bc>)
   165c6:	47a0      	blx	r4
   165c8:	0003      	movs	r3, r0
   165ca:	000c      	movs	r4, r1
   165cc:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   165ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   165d0:	2380      	movs	r3, #128	; 0x80
   165d2:	019b      	lsls	r3, r3, #6
   165d4:	429a      	cmp	r2, r3
   165d6:	d901      	bls.n	165dc <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   165d8:	2340      	movs	r3, #64	; 0x40
   165da:	e03d      	b.n	16658 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   165dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   165de:	61bb      	str	r3, [r7, #24]
   165e0:	2300      	movs	r3, #0
   165e2:	61fb      	str	r3, [r7, #28]
   165e4:	69b9      	ldr	r1, [r7, #24]
   165e6:	69fa      	ldr	r2, [r7, #28]
   165e8:	000b      	movs	r3, r1
   165ea:	0f5b      	lsrs	r3, r3, #29
   165ec:	0010      	movs	r0, r2
   165ee:	00c0      	lsls	r0, r0, #3
   165f0:	63f8      	str	r0, [r7, #60]	; 0x3c
   165f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   165f4:	4318      	orrs	r0, r3
   165f6:	63f8      	str	r0, [r7, #60]	; 0x3c
   165f8:	000b      	movs	r3, r1
   165fa:	00db      	lsls	r3, r3, #3
   165fc:	63bb      	str	r3, [r7, #56]	; 0x38
   165fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16600:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   16602:	001a      	movs	r2, r3
   16604:	0023      	movs	r3, r4
   16606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   16608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1660a:	4c16      	ldr	r4, [pc, #88]	; (16664 <_sercom_get_async_baud_val+0x1bc>)
   1660c:	47a0      	blx	r4
   1660e:	0003      	movs	r3, r0
   16610:	000c      	movs	r4, r1
   16612:	65bb      	str	r3, [r7, #88]	; 0x58
   16614:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   16616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16618:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1661a:	b2d9      	uxtb	r1, r3
   1661c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1661e:	b2db      	uxtb	r3, r3
   16620:	00db      	lsls	r3, r3, #3
   16622:	b2da      	uxtb	r2, r3
   16624:	2317      	movs	r3, #23
   16626:	2040      	movs	r0, #64	; 0x40
   16628:	4684      	mov	ip, r0
   1662a:	44bc      	add	ip, r7
   1662c:	4463      	add	r3, ip
   1662e:	1a8a      	subs	r2, r1, r2
   16630:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   16632:	2317      	movs	r3, #23
   16634:	2240      	movs	r2, #64	; 0x40
   16636:	4694      	mov	ip, r2
   16638:	44bc      	add	ip, r7
   1663a:	4463      	add	r3, ip
   1663c:	781b      	ldrb	r3, [r3, #0]
   1663e:	035b      	lsls	r3, r3, #13
   16640:	001a      	movs	r2, r3
   16642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   16644:	4313      	orrs	r3, r2
   16646:	67bb      	str	r3, [r7, #120]	; 0x78
   16648:	2300      	movs	r3, #0
   1664a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1664c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1664e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   16650:	b29a      	uxth	r2, r3
   16652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16654:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   16656:	2300      	movs	r3, #0
}
   16658:	0018      	movs	r0, r3
   1665a:	46bd      	mov	sp, r7
   1665c:	b021      	add	sp, #132	; 0x84
   1665e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16660:	00021fe9 	.word	0x00021fe9
   16664:	0001634b 	.word	0x0001634b

00016668 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   16668:	b580      	push	{r7, lr}
   1666a:	b084      	sub	sp, #16
   1666c:	af00      	add	r7, sp, #0
   1666e:	0002      	movs	r2, r0
   16670:	1dfb      	adds	r3, r7, #7
   16672:	701a      	strb	r2, [r3, #0]
   16674:	1dbb      	adds	r3, r7, #6
   16676:	1c0a      	adds	r2, r1, #0
   16678:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1667a:	4b1a      	ldr	r3, [pc, #104]	; (166e4 <sercom_set_gclk_generator+0x7c>)
   1667c:	781b      	ldrb	r3, [r3, #0]
   1667e:	2201      	movs	r2, #1
   16680:	4053      	eors	r3, r2
   16682:	b2db      	uxtb	r3, r3
   16684:	2b00      	cmp	r3, #0
   16686:	d103      	bne.n	16690 <sercom_set_gclk_generator+0x28>
   16688:	1dbb      	adds	r3, r7, #6
   1668a:	781b      	ldrb	r3, [r3, #0]
   1668c:	2b00      	cmp	r3, #0
   1668e:	d01b      	beq.n	166c8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   16690:	230c      	movs	r3, #12
   16692:	18fb      	adds	r3, r7, r3
   16694:	0018      	movs	r0, r3
   16696:	4b14      	ldr	r3, [pc, #80]	; (166e8 <sercom_set_gclk_generator+0x80>)
   16698:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1669a:	230c      	movs	r3, #12
   1669c:	18fb      	adds	r3, r7, r3
   1669e:	1dfa      	adds	r2, r7, #7
   166a0:	7812      	ldrb	r2, [r2, #0]
   166a2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   166a4:	230c      	movs	r3, #12
   166a6:	18fb      	adds	r3, r7, r3
   166a8:	0019      	movs	r1, r3
   166aa:	2013      	movs	r0, #19
   166ac:	4b0f      	ldr	r3, [pc, #60]	; (166ec <sercom_set_gclk_generator+0x84>)
   166ae:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   166b0:	2013      	movs	r0, #19
   166b2:	4b0f      	ldr	r3, [pc, #60]	; (166f0 <sercom_set_gclk_generator+0x88>)
   166b4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   166b6:	4b0b      	ldr	r3, [pc, #44]	; (166e4 <sercom_set_gclk_generator+0x7c>)
   166b8:	1dfa      	adds	r2, r7, #7
   166ba:	7812      	ldrb	r2, [r2, #0]
   166bc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   166be:	4b09      	ldr	r3, [pc, #36]	; (166e4 <sercom_set_gclk_generator+0x7c>)
   166c0:	2201      	movs	r2, #1
   166c2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   166c4:	2300      	movs	r3, #0
   166c6:	e008      	b.n	166da <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   166c8:	4b06      	ldr	r3, [pc, #24]	; (166e4 <sercom_set_gclk_generator+0x7c>)
   166ca:	785b      	ldrb	r3, [r3, #1]
   166cc:	1dfa      	adds	r2, r7, #7
   166ce:	7812      	ldrb	r2, [r2, #0]
   166d0:	429a      	cmp	r2, r3
   166d2:	d101      	bne.n	166d8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   166d4:	2300      	movs	r3, #0
   166d6:	e000      	b.n	166da <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   166d8:	231d      	movs	r3, #29
}
   166da:	0018      	movs	r0, r3
   166dc:	46bd      	mov	sp, r7
   166de:	b004      	add	sp, #16
   166e0:	bd80      	pop	{r7, pc}
   166e2:	46c0      	nop			; (mov r8, r8)
   166e4:	20003ef8 	.word	0x20003ef8
   166e8:	00016335 	.word	0x00016335
   166ec:	00019141 	.word	0x00019141
   166f0:	00019185 	.word	0x00019185

000166f4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   166f4:	b580      	push	{r7, lr}
   166f6:	b082      	sub	sp, #8
   166f8:	af00      	add	r7, sp, #0
   166fa:	6078      	str	r0, [r7, #4]
   166fc:	000a      	movs	r2, r1
   166fe:	1cfb      	adds	r3, r7, #3
   16700:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   16702:	687b      	ldr	r3, [r7, #4]
   16704:	4a4d      	ldr	r2, [pc, #308]	; (1683c <_sercom_get_default_pad+0x148>)
   16706:	4293      	cmp	r3, r2
   16708:	d03f      	beq.n	1678a <_sercom_get_default_pad+0x96>
   1670a:	4a4c      	ldr	r2, [pc, #304]	; (1683c <_sercom_get_default_pad+0x148>)
   1670c:	4293      	cmp	r3, r2
   1670e:	d806      	bhi.n	1671e <_sercom_get_default_pad+0x2a>
   16710:	4a4b      	ldr	r2, [pc, #300]	; (16840 <_sercom_get_default_pad+0x14c>)
   16712:	4293      	cmp	r3, r2
   16714:	d00f      	beq.n	16736 <_sercom_get_default_pad+0x42>
   16716:	4a4b      	ldr	r2, [pc, #300]	; (16844 <_sercom_get_default_pad+0x150>)
   16718:	4293      	cmp	r3, r2
   1671a:	d021      	beq.n	16760 <_sercom_get_default_pad+0x6c>
   1671c:	e089      	b.n	16832 <_sercom_get_default_pad+0x13e>
   1671e:	4a4a      	ldr	r2, [pc, #296]	; (16848 <_sercom_get_default_pad+0x154>)
   16720:	4293      	cmp	r3, r2
   16722:	d100      	bne.n	16726 <_sercom_get_default_pad+0x32>
   16724:	e05b      	b.n	167de <_sercom_get_default_pad+0xea>
   16726:	4a49      	ldr	r2, [pc, #292]	; (1684c <_sercom_get_default_pad+0x158>)
   16728:	4293      	cmp	r3, r2
   1672a:	d100      	bne.n	1672e <_sercom_get_default_pad+0x3a>
   1672c:	e06c      	b.n	16808 <_sercom_get_default_pad+0x114>
   1672e:	4a48      	ldr	r2, [pc, #288]	; (16850 <_sercom_get_default_pad+0x15c>)
   16730:	4293      	cmp	r3, r2
   16732:	d03f      	beq.n	167b4 <_sercom_get_default_pad+0xc0>
   16734:	e07d      	b.n	16832 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   16736:	1cfb      	adds	r3, r7, #3
   16738:	781b      	ldrb	r3, [r3, #0]
   1673a:	2b01      	cmp	r3, #1
   1673c:	d00a      	beq.n	16754 <_sercom_get_default_pad+0x60>
   1673e:	dc02      	bgt.n	16746 <_sercom_get_default_pad+0x52>
   16740:	2b00      	cmp	r3, #0
   16742:	d005      	beq.n	16750 <_sercom_get_default_pad+0x5c>
   16744:	e075      	b.n	16832 <_sercom_get_default_pad+0x13e>
   16746:	2b02      	cmp	r3, #2
   16748:	d006      	beq.n	16758 <_sercom_get_default_pad+0x64>
   1674a:	2b03      	cmp	r3, #3
   1674c:	d006      	beq.n	1675c <_sercom_get_default_pad+0x68>
   1674e:	e070      	b.n	16832 <_sercom_get_default_pad+0x13e>
   16750:	4b40      	ldr	r3, [pc, #256]	; (16854 <_sercom_get_default_pad+0x160>)
   16752:	e06f      	b.n	16834 <_sercom_get_default_pad+0x140>
   16754:	4b40      	ldr	r3, [pc, #256]	; (16858 <_sercom_get_default_pad+0x164>)
   16756:	e06d      	b.n	16834 <_sercom_get_default_pad+0x140>
   16758:	4b40      	ldr	r3, [pc, #256]	; (1685c <_sercom_get_default_pad+0x168>)
   1675a:	e06b      	b.n	16834 <_sercom_get_default_pad+0x140>
   1675c:	4b40      	ldr	r3, [pc, #256]	; (16860 <_sercom_get_default_pad+0x16c>)
   1675e:	e069      	b.n	16834 <_sercom_get_default_pad+0x140>
   16760:	1cfb      	adds	r3, r7, #3
   16762:	781b      	ldrb	r3, [r3, #0]
   16764:	2b01      	cmp	r3, #1
   16766:	d00a      	beq.n	1677e <_sercom_get_default_pad+0x8a>
   16768:	dc02      	bgt.n	16770 <_sercom_get_default_pad+0x7c>
   1676a:	2b00      	cmp	r3, #0
   1676c:	d005      	beq.n	1677a <_sercom_get_default_pad+0x86>
   1676e:	e060      	b.n	16832 <_sercom_get_default_pad+0x13e>
   16770:	2b02      	cmp	r3, #2
   16772:	d006      	beq.n	16782 <_sercom_get_default_pad+0x8e>
   16774:	2b03      	cmp	r3, #3
   16776:	d006      	beq.n	16786 <_sercom_get_default_pad+0x92>
   16778:	e05b      	b.n	16832 <_sercom_get_default_pad+0x13e>
   1677a:	2303      	movs	r3, #3
   1677c:	e05a      	b.n	16834 <_sercom_get_default_pad+0x140>
   1677e:	4b39      	ldr	r3, [pc, #228]	; (16864 <_sercom_get_default_pad+0x170>)
   16780:	e058      	b.n	16834 <_sercom_get_default_pad+0x140>
   16782:	4b39      	ldr	r3, [pc, #228]	; (16868 <_sercom_get_default_pad+0x174>)
   16784:	e056      	b.n	16834 <_sercom_get_default_pad+0x140>
   16786:	4b39      	ldr	r3, [pc, #228]	; (1686c <_sercom_get_default_pad+0x178>)
   16788:	e054      	b.n	16834 <_sercom_get_default_pad+0x140>
   1678a:	1cfb      	adds	r3, r7, #3
   1678c:	781b      	ldrb	r3, [r3, #0]
   1678e:	2b01      	cmp	r3, #1
   16790:	d00a      	beq.n	167a8 <_sercom_get_default_pad+0xb4>
   16792:	dc02      	bgt.n	1679a <_sercom_get_default_pad+0xa6>
   16794:	2b00      	cmp	r3, #0
   16796:	d005      	beq.n	167a4 <_sercom_get_default_pad+0xb0>
   16798:	e04b      	b.n	16832 <_sercom_get_default_pad+0x13e>
   1679a:	2b02      	cmp	r3, #2
   1679c:	d006      	beq.n	167ac <_sercom_get_default_pad+0xb8>
   1679e:	2b03      	cmp	r3, #3
   167a0:	d006      	beq.n	167b0 <_sercom_get_default_pad+0xbc>
   167a2:	e046      	b.n	16832 <_sercom_get_default_pad+0x13e>
   167a4:	4b32      	ldr	r3, [pc, #200]	; (16870 <_sercom_get_default_pad+0x17c>)
   167a6:	e045      	b.n	16834 <_sercom_get_default_pad+0x140>
   167a8:	4b32      	ldr	r3, [pc, #200]	; (16874 <_sercom_get_default_pad+0x180>)
   167aa:	e043      	b.n	16834 <_sercom_get_default_pad+0x140>
   167ac:	4b32      	ldr	r3, [pc, #200]	; (16878 <_sercom_get_default_pad+0x184>)
   167ae:	e041      	b.n	16834 <_sercom_get_default_pad+0x140>
   167b0:	4b32      	ldr	r3, [pc, #200]	; (1687c <_sercom_get_default_pad+0x188>)
   167b2:	e03f      	b.n	16834 <_sercom_get_default_pad+0x140>
   167b4:	1cfb      	adds	r3, r7, #3
   167b6:	781b      	ldrb	r3, [r3, #0]
   167b8:	2b01      	cmp	r3, #1
   167ba:	d00a      	beq.n	167d2 <_sercom_get_default_pad+0xde>
   167bc:	dc02      	bgt.n	167c4 <_sercom_get_default_pad+0xd0>
   167be:	2b00      	cmp	r3, #0
   167c0:	d005      	beq.n	167ce <_sercom_get_default_pad+0xda>
   167c2:	e036      	b.n	16832 <_sercom_get_default_pad+0x13e>
   167c4:	2b02      	cmp	r3, #2
   167c6:	d006      	beq.n	167d6 <_sercom_get_default_pad+0xe2>
   167c8:	2b03      	cmp	r3, #3
   167ca:	d006      	beq.n	167da <_sercom_get_default_pad+0xe6>
   167cc:	e031      	b.n	16832 <_sercom_get_default_pad+0x13e>
   167ce:	4b2c      	ldr	r3, [pc, #176]	; (16880 <_sercom_get_default_pad+0x18c>)
   167d0:	e030      	b.n	16834 <_sercom_get_default_pad+0x140>
   167d2:	4b2c      	ldr	r3, [pc, #176]	; (16884 <_sercom_get_default_pad+0x190>)
   167d4:	e02e      	b.n	16834 <_sercom_get_default_pad+0x140>
   167d6:	4b2c      	ldr	r3, [pc, #176]	; (16888 <_sercom_get_default_pad+0x194>)
   167d8:	e02c      	b.n	16834 <_sercom_get_default_pad+0x140>
   167da:	4b2c      	ldr	r3, [pc, #176]	; (1688c <_sercom_get_default_pad+0x198>)
   167dc:	e02a      	b.n	16834 <_sercom_get_default_pad+0x140>
   167de:	1cfb      	adds	r3, r7, #3
   167e0:	781b      	ldrb	r3, [r3, #0]
   167e2:	2b01      	cmp	r3, #1
   167e4:	d00a      	beq.n	167fc <_sercom_get_default_pad+0x108>
   167e6:	dc02      	bgt.n	167ee <_sercom_get_default_pad+0xfa>
   167e8:	2b00      	cmp	r3, #0
   167ea:	d005      	beq.n	167f8 <_sercom_get_default_pad+0x104>
   167ec:	e021      	b.n	16832 <_sercom_get_default_pad+0x13e>
   167ee:	2b02      	cmp	r3, #2
   167f0:	d006      	beq.n	16800 <_sercom_get_default_pad+0x10c>
   167f2:	2b03      	cmp	r3, #3
   167f4:	d006      	beq.n	16804 <_sercom_get_default_pad+0x110>
   167f6:	e01c      	b.n	16832 <_sercom_get_default_pad+0x13e>
   167f8:	4b25      	ldr	r3, [pc, #148]	; (16890 <_sercom_get_default_pad+0x19c>)
   167fa:	e01b      	b.n	16834 <_sercom_get_default_pad+0x140>
   167fc:	4b25      	ldr	r3, [pc, #148]	; (16894 <_sercom_get_default_pad+0x1a0>)
   167fe:	e019      	b.n	16834 <_sercom_get_default_pad+0x140>
   16800:	4b25      	ldr	r3, [pc, #148]	; (16898 <_sercom_get_default_pad+0x1a4>)
   16802:	e017      	b.n	16834 <_sercom_get_default_pad+0x140>
   16804:	4b25      	ldr	r3, [pc, #148]	; (1689c <_sercom_get_default_pad+0x1a8>)
   16806:	e015      	b.n	16834 <_sercom_get_default_pad+0x140>
   16808:	1cfb      	adds	r3, r7, #3
   1680a:	781b      	ldrb	r3, [r3, #0]
   1680c:	2b01      	cmp	r3, #1
   1680e:	d00a      	beq.n	16826 <_sercom_get_default_pad+0x132>
   16810:	dc02      	bgt.n	16818 <_sercom_get_default_pad+0x124>
   16812:	2b00      	cmp	r3, #0
   16814:	d005      	beq.n	16822 <_sercom_get_default_pad+0x12e>
   16816:	e00c      	b.n	16832 <_sercom_get_default_pad+0x13e>
   16818:	2b02      	cmp	r3, #2
   1681a:	d006      	beq.n	1682a <_sercom_get_default_pad+0x136>
   1681c:	2b03      	cmp	r3, #3
   1681e:	d006      	beq.n	1682e <_sercom_get_default_pad+0x13a>
   16820:	e007      	b.n	16832 <_sercom_get_default_pad+0x13e>
   16822:	4b1f      	ldr	r3, [pc, #124]	; (168a0 <_sercom_get_default_pad+0x1ac>)
   16824:	e006      	b.n	16834 <_sercom_get_default_pad+0x140>
   16826:	4b1f      	ldr	r3, [pc, #124]	; (168a4 <_sercom_get_default_pad+0x1b0>)
   16828:	e004      	b.n	16834 <_sercom_get_default_pad+0x140>
   1682a:	4b1f      	ldr	r3, [pc, #124]	; (168a8 <_sercom_get_default_pad+0x1b4>)
   1682c:	e002      	b.n	16834 <_sercom_get_default_pad+0x140>
   1682e:	4b1f      	ldr	r3, [pc, #124]	; (168ac <_sercom_get_default_pad+0x1b8>)
   16830:	e000      	b.n	16834 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   16832:	2300      	movs	r3, #0
}
   16834:	0018      	movs	r0, r3
   16836:	46bd      	mov	sp, r7
   16838:	b002      	add	sp, #8
   1683a:	bd80      	pop	{r7, pc}
   1683c:	42001000 	.word	0x42001000
   16840:	42000800 	.word	0x42000800
   16844:	42000c00 	.word	0x42000c00
   16848:	42001800 	.word	0x42001800
   1684c:	42001c00 	.word	0x42001c00
   16850:	42001400 	.word	0x42001400
   16854:	00040003 	.word	0x00040003
   16858:	00050003 	.word	0x00050003
   1685c:	00060003 	.word	0x00060003
   16860:	00070003 	.word	0x00070003
   16864:	00010003 	.word	0x00010003
   16868:	001e0003 	.word	0x001e0003
   1686c:	001f0003 	.word	0x001f0003
   16870:	00080003 	.word	0x00080003
   16874:	00090003 	.word	0x00090003
   16878:	000a0003 	.word	0x000a0003
   1687c:	000b0003 	.word	0x000b0003
   16880:	00100003 	.word	0x00100003
   16884:	00110003 	.word	0x00110003
   16888:	00120003 	.word	0x00120003
   1688c:	00130003 	.word	0x00130003
   16890:	000c0003 	.word	0x000c0003
   16894:	000d0003 	.word	0x000d0003
   16898:	000e0003 	.word	0x000e0003
   1689c:	000f0003 	.word	0x000f0003
   168a0:	00160003 	.word	0x00160003
   168a4:	00170003 	.word	0x00170003
   168a8:	00180003 	.word	0x00180003
   168ac:	00190003 	.word	0x00190003

000168b0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   168b0:	b590      	push	{r4, r7, lr}
   168b2:	b08b      	sub	sp, #44	; 0x2c
   168b4:	af00      	add	r7, sp, #0
   168b6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   168b8:	230c      	movs	r3, #12
   168ba:	18fb      	adds	r3, r7, r3
   168bc:	4a0f      	ldr	r2, [pc, #60]	; (168fc <_sercom_get_sercom_inst_index+0x4c>)
   168be:	ca13      	ldmia	r2!, {r0, r1, r4}
   168c0:	c313      	stmia	r3!, {r0, r1, r4}
   168c2:	ca13      	ldmia	r2!, {r0, r1, r4}
   168c4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   168c6:	2300      	movs	r3, #0
   168c8:	627b      	str	r3, [r7, #36]	; 0x24
   168ca:	e00e      	b.n	168ea <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   168cc:	230c      	movs	r3, #12
   168ce:	18fb      	adds	r3, r7, r3
   168d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   168d2:	0092      	lsls	r2, r2, #2
   168d4:	58d3      	ldr	r3, [r2, r3]
   168d6:	001a      	movs	r2, r3
   168d8:	687b      	ldr	r3, [r7, #4]
   168da:	429a      	cmp	r2, r3
   168dc:	d102      	bne.n	168e4 <_sercom_get_sercom_inst_index+0x34>
			return i;
   168de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   168e0:	b2db      	uxtb	r3, r3
   168e2:	e006      	b.n	168f2 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   168e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   168e6:	3301      	adds	r3, #1
   168e8:	627b      	str	r3, [r7, #36]	; 0x24
   168ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   168ec:	2b05      	cmp	r3, #5
   168ee:	d9ed      	bls.n	168cc <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   168f0:	2300      	movs	r3, #0
}
   168f2:	0018      	movs	r0, r3
   168f4:	46bd      	mov	sp, r7
   168f6:	b00b      	add	sp, #44	; 0x2c
   168f8:	bd90      	pop	{r4, r7, pc}
   168fa:	46c0      	nop			; (mov r8, r8)
   168fc:	00029330 	.word	0x00029330

00016900 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   16900:	b580      	push	{r7, lr}
   16902:	b082      	sub	sp, #8
   16904:	af00      	add	r7, sp, #0
   16906:	0002      	movs	r2, r0
   16908:	1dfb      	adds	r3, r7, #7
   1690a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   1690c:	46c0      	nop			; (mov r8, r8)
   1690e:	46bd      	mov	sp, r7
   16910:	b002      	add	sp, #8
   16912:	bd80      	pop	{r7, pc}

00016914 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   16914:	b580      	push	{r7, lr}
   16916:	b084      	sub	sp, #16
   16918:	af00      	add	r7, sp, #0
   1691a:	0002      	movs	r2, r0
   1691c:	6039      	str	r1, [r7, #0]
   1691e:	1dfb      	adds	r3, r7, #7
   16920:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   16922:	4b13      	ldr	r3, [pc, #76]	; (16970 <_sercom_set_handler+0x5c>)
   16924:	781b      	ldrb	r3, [r3, #0]
   16926:	2201      	movs	r2, #1
   16928:	4053      	eors	r3, r2
   1692a:	b2db      	uxtb	r3, r3
   1692c:	2b00      	cmp	r3, #0
   1692e:	d015      	beq.n	1695c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   16930:	2300      	movs	r3, #0
   16932:	60fb      	str	r3, [r7, #12]
   16934:	e00c      	b.n	16950 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   16936:	4b0f      	ldr	r3, [pc, #60]	; (16974 <_sercom_set_handler+0x60>)
   16938:	68fa      	ldr	r2, [r7, #12]
   1693a:	0092      	lsls	r2, r2, #2
   1693c:	490e      	ldr	r1, [pc, #56]	; (16978 <_sercom_set_handler+0x64>)
   1693e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   16940:	4b0e      	ldr	r3, [pc, #56]	; (1697c <_sercom_set_handler+0x68>)
   16942:	68fa      	ldr	r2, [r7, #12]
   16944:	0092      	lsls	r2, r2, #2
   16946:	2100      	movs	r1, #0
   16948:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1694a:	68fb      	ldr	r3, [r7, #12]
   1694c:	3301      	adds	r3, #1
   1694e:	60fb      	str	r3, [r7, #12]
   16950:	68fb      	ldr	r3, [r7, #12]
   16952:	2b05      	cmp	r3, #5
   16954:	d9ef      	bls.n	16936 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   16956:	4b06      	ldr	r3, [pc, #24]	; (16970 <_sercom_set_handler+0x5c>)
   16958:	2201      	movs	r2, #1
   1695a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   1695c:	1dfb      	adds	r3, r7, #7
   1695e:	781a      	ldrb	r2, [r3, #0]
   16960:	4b04      	ldr	r3, [pc, #16]	; (16974 <_sercom_set_handler+0x60>)
   16962:	0092      	lsls	r2, r2, #2
   16964:	6839      	ldr	r1, [r7, #0]
   16966:	50d1      	str	r1, [r2, r3]
}
   16968:	46c0      	nop			; (mov r8, r8)
   1696a:	46bd      	mov	sp, r7
   1696c:	b004      	add	sp, #16
   1696e:	bd80      	pop	{r7, pc}
   16970:	20003efa 	.word	0x20003efa
   16974:	20003efc 	.word	0x20003efc
   16978:	00016901 	.word	0x00016901
   1697c:	20005888 	.word	0x20005888

00016980 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   16980:	b590      	push	{r4, r7, lr}
   16982:	b085      	sub	sp, #20
   16984:	af00      	add	r7, sp, #0
   16986:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   16988:	2308      	movs	r3, #8
   1698a:	18fb      	adds	r3, r7, r3
   1698c:	4a0b      	ldr	r2, [pc, #44]	; (169bc <_sercom_get_interrupt_vector+0x3c>)
   1698e:	6811      	ldr	r1, [r2, #0]
   16990:	6019      	str	r1, [r3, #0]
   16992:	8892      	ldrh	r2, [r2, #4]
   16994:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   16996:	230f      	movs	r3, #15
   16998:	18fc      	adds	r4, r7, r3
   1699a:	687b      	ldr	r3, [r7, #4]
   1699c:	0018      	movs	r0, r3
   1699e:	4b08      	ldr	r3, [pc, #32]	; (169c0 <_sercom_get_interrupt_vector+0x40>)
   169a0:	4798      	blx	r3
   169a2:	0003      	movs	r3, r0
   169a4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   169a6:	230f      	movs	r3, #15
   169a8:	18fb      	adds	r3, r7, r3
   169aa:	781b      	ldrb	r3, [r3, #0]
   169ac:	2208      	movs	r2, #8
   169ae:	18ba      	adds	r2, r7, r2
   169b0:	5cd3      	ldrb	r3, [r2, r3]
   169b2:	b25b      	sxtb	r3, r3
}
   169b4:	0018      	movs	r0, r3
   169b6:	46bd      	mov	sp, r7
   169b8:	b005      	add	sp, #20
   169ba:	bd90      	pop	{r4, r7, pc}
   169bc:	00029348 	.word	0x00029348
   169c0:	000168b1 	.word	0x000168b1

000169c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   169c4:	b580      	push	{r7, lr}
   169c6:	af00      	add	r7, sp, #0
   169c8:	4b03      	ldr	r3, [pc, #12]	; (169d8 <SERCOM0_Handler+0x14>)
   169ca:	681b      	ldr	r3, [r3, #0]
   169cc:	2000      	movs	r0, #0
   169ce:	4798      	blx	r3
   169d0:	46c0      	nop			; (mov r8, r8)
   169d2:	46bd      	mov	sp, r7
   169d4:	bd80      	pop	{r7, pc}
   169d6:	46c0      	nop			; (mov r8, r8)
   169d8:	20003efc 	.word	0x20003efc

000169dc <SERCOM1_Handler>:
   169dc:	b580      	push	{r7, lr}
   169de:	af00      	add	r7, sp, #0
   169e0:	4b03      	ldr	r3, [pc, #12]	; (169f0 <SERCOM1_Handler+0x14>)
   169e2:	685b      	ldr	r3, [r3, #4]
   169e4:	2001      	movs	r0, #1
   169e6:	4798      	blx	r3
   169e8:	46c0      	nop			; (mov r8, r8)
   169ea:	46bd      	mov	sp, r7
   169ec:	bd80      	pop	{r7, pc}
   169ee:	46c0      	nop			; (mov r8, r8)
   169f0:	20003efc 	.word	0x20003efc

000169f4 <SERCOM2_Handler>:
   169f4:	b580      	push	{r7, lr}
   169f6:	af00      	add	r7, sp, #0
   169f8:	4b03      	ldr	r3, [pc, #12]	; (16a08 <SERCOM2_Handler+0x14>)
   169fa:	689b      	ldr	r3, [r3, #8]
   169fc:	2002      	movs	r0, #2
   169fe:	4798      	blx	r3
   16a00:	46c0      	nop			; (mov r8, r8)
   16a02:	46bd      	mov	sp, r7
   16a04:	bd80      	pop	{r7, pc}
   16a06:	46c0      	nop			; (mov r8, r8)
   16a08:	20003efc 	.word	0x20003efc

00016a0c <SERCOM3_Handler>:
   16a0c:	b580      	push	{r7, lr}
   16a0e:	af00      	add	r7, sp, #0
   16a10:	4b03      	ldr	r3, [pc, #12]	; (16a20 <SERCOM3_Handler+0x14>)
   16a12:	68db      	ldr	r3, [r3, #12]
   16a14:	2003      	movs	r0, #3
   16a16:	4798      	blx	r3
   16a18:	46c0      	nop			; (mov r8, r8)
   16a1a:	46bd      	mov	sp, r7
   16a1c:	bd80      	pop	{r7, pc}
   16a1e:	46c0      	nop			; (mov r8, r8)
   16a20:	20003efc 	.word	0x20003efc

00016a24 <SERCOM4_Handler>:
   16a24:	b580      	push	{r7, lr}
   16a26:	af00      	add	r7, sp, #0
   16a28:	4b03      	ldr	r3, [pc, #12]	; (16a38 <SERCOM4_Handler+0x14>)
   16a2a:	691b      	ldr	r3, [r3, #16]
   16a2c:	2004      	movs	r0, #4
   16a2e:	4798      	blx	r3
   16a30:	46c0      	nop			; (mov r8, r8)
   16a32:	46bd      	mov	sp, r7
   16a34:	bd80      	pop	{r7, pc}
   16a36:	46c0      	nop			; (mov r8, r8)
   16a38:	20003efc 	.word	0x20003efc

00016a3c <SERCOM5_Handler>:
   16a3c:	b580      	push	{r7, lr}
   16a3e:	af00      	add	r7, sp, #0
   16a40:	4b03      	ldr	r3, [pc, #12]	; (16a50 <SERCOM5_Handler+0x14>)
   16a42:	695b      	ldr	r3, [r3, #20]
   16a44:	2005      	movs	r0, #5
   16a46:	4798      	blx	r3
   16a48:	46c0      	nop			; (mov r8, r8)
   16a4a:	46bd      	mov	sp, r7
   16a4c:	bd80      	pop	{r7, pc}
   16a4e:	46c0      	nop			; (mov r8, r8)
   16a50:	20003efc 	.word	0x20003efc

00016a54 <system_pinmux_get_config_defaults>:
{
   16a54:	b580      	push	{r7, lr}
   16a56:	b082      	sub	sp, #8
   16a58:	af00      	add	r7, sp, #0
   16a5a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16a5c:	687b      	ldr	r3, [r7, #4]
   16a5e:	2280      	movs	r2, #128	; 0x80
   16a60:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16a62:	687b      	ldr	r3, [r7, #4]
   16a64:	2200      	movs	r2, #0
   16a66:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16a68:	687b      	ldr	r3, [r7, #4]
   16a6a:	2201      	movs	r2, #1
   16a6c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   16a6e:	687b      	ldr	r3, [r7, #4]
   16a70:	2200      	movs	r2, #0
   16a72:	70da      	strb	r2, [r3, #3]
}
   16a74:	46c0      	nop			; (mov r8, r8)
   16a76:	46bd      	mov	sp, r7
   16a78:	b002      	add	sp, #8
   16a7a:	bd80      	pop	{r7, pc}

00016a7c <system_pinmux_get_group_from_gpio_pin>:
{
   16a7c:	b580      	push	{r7, lr}
   16a7e:	b084      	sub	sp, #16
   16a80:	af00      	add	r7, sp, #0
   16a82:	0002      	movs	r2, r0
   16a84:	1dfb      	adds	r3, r7, #7
   16a86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16a88:	230f      	movs	r3, #15
   16a8a:	18fb      	adds	r3, r7, r3
   16a8c:	1dfa      	adds	r2, r7, #7
   16a8e:	7812      	ldrb	r2, [r2, #0]
   16a90:	09d2      	lsrs	r2, r2, #7
   16a92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16a94:	230e      	movs	r3, #14
   16a96:	18fb      	adds	r3, r7, r3
   16a98:	1dfa      	adds	r2, r7, #7
   16a9a:	7812      	ldrb	r2, [r2, #0]
   16a9c:	0952      	lsrs	r2, r2, #5
   16a9e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16aa0:	4b0d      	ldr	r3, [pc, #52]	; (16ad8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16aa2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16aa4:	230f      	movs	r3, #15
   16aa6:	18fb      	adds	r3, r7, r3
   16aa8:	781b      	ldrb	r3, [r3, #0]
   16aaa:	2b00      	cmp	r3, #0
   16aac:	d10f      	bne.n	16ace <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16aae:	230f      	movs	r3, #15
   16ab0:	18fb      	adds	r3, r7, r3
   16ab2:	781b      	ldrb	r3, [r3, #0]
   16ab4:	009b      	lsls	r3, r3, #2
   16ab6:	2210      	movs	r2, #16
   16ab8:	4694      	mov	ip, r2
   16aba:	44bc      	add	ip, r7
   16abc:	4463      	add	r3, ip
   16abe:	3b08      	subs	r3, #8
   16ac0:	681a      	ldr	r2, [r3, #0]
   16ac2:	230e      	movs	r3, #14
   16ac4:	18fb      	adds	r3, r7, r3
   16ac6:	781b      	ldrb	r3, [r3, #0]
   16ac8:	01db      	lsls	r3, r3, #7
   16aca:	18d3      	adds	r3, r2, r3
   16acc:	e000      	b.n	16ad0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   16ace:	2300      	movs	r3, #0
}
   16ad0:	0018      	movs	r0, r3
   16ad2:	46bd      	mov	sp, r7
   16ad4:	b004      	add	sp, #16
   16ad6:	bd80      	pop	{r7, pc}
   16ad8:	41004400 	.word	0x41004400

00016adc <port_get_group_from_gpio_pin>:
{
   16adc:	b580      	push	{r7, lr}
   16ade:	b082      	sub	sp, #8
   16ae0:	af00      	add	r7, sp, #0
   16ae2:	0002      	movs	r2, r0
   16ae4:	1dfb      	adds	r3, r7, #7
   16ae6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16ae8:	1dfb      	adds	r3, r7, #7
   16aea:	781b      	ldrb	r3, [r3, #0]
   16aec:	0018      	movs	r0, r3
   16aee:	4b03      	ldr	r3, [pc, #12]	; (16afc <port_get_group_from_gpio_pin+0x20>)
   16af0:	4798      	blx	r3
   16af2:	0003      	movs	r3, r0
}
   16af4:	0018      	movs	r0, r3
   16af6:	46bd      	mov	sp, r7
   16af8:	b002      	add	sp, #8
   16afa:	bd80      	pop	{r7, pc}
   16afc:	00016a7d 	.word	0x00016a7d

00016b00 <port_pin_set_output_level>:
{
   16b00:	b580      	push	{r7, lr}
   16b02:	b084      	sub	sp, #16
   16b04:	af00      	add	r7, sp, #0
   16b06:	0002      	movs	r2, r0
   16b08:	1dfb      	adds	r3, r7, #7
   16b0a:	701a      	strb	r2, [r3, #0]
   16b0c:	1dbb      	adds	r3, r7, #6
   16b0e:	1c0a      	adds	r2, r1, #0
   16b10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16b12:	1dfb      	adds	r3, r7, #7
   16b14:	781b      	ldrb	r3, [r3, #0]
   16b16:	0018      	movs	r0, r3
   16b18:	4b0d      	ldr	r3, [pc, #52]	; (16b50 <port_pin_set_output_level+0x50>)
   16b1a:	4798      	blx	r3
   16b1c:	0003      	movs	r3, r0
   16b1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16b20:	1dfb      	adds	r3, r7, #7
   16b22:	781b      	ldrb	r3, [r3, #0]
   16b24:	221f      	movs	r2, #31
   16b26:	4013      	ands	r3, r2
   16b28:	2201      	movs	r2, #1
   16b2a:	409a      	lsls	r2, r3
   16b2c:	0013      	movs	r3, r2
   16b2e:	60bb      	str	r3, [r7, #8]
	if (level) {
   16b30:	1dbb      	adds	r3, r7, #6
   16b32:	781b      	ldrb	r3, [r3, #0]
   16b34:	2b00      	cmp	r3, #0
   16b36:	d003      	beq.n	16b40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16b38:	68fb      	ldr	r3, [r7, #12]
   16b3a:	68ba      	ldr	r2, [r7, #8]
   16b3c:	619a      	str	r2, [r3, #24]
}
   16b3e:	e002      	b.n	16b46 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16b40:	68fb      	ldr	r3, [r7, #12]
   16b42:	68ba      	ldr	r2, [r7, #8]
   16b44:	615a      	str	r2, [r3, #20]
}
   16b46:	46c0      	nop			; (mov r8, r8)
   16b48:	46bd      	mov	sp, r7
   16b4a:	b004      	add	sp, #16
   16b4c:	bd80      	pop	{r7, pc}
   16b4e:	46c0      	nop			; (mov r8, r8)
   16b50:	00016add 	.word	0x00016add

00016b54 <system_gclk_chan_get_config_defaults>:
{
   16b54:	b580      	push	{r7, lr}
   16b56:	b082      	sub	sp, #8
   16b58:	af00      	add	r7, sp, #0
   16b5a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   16b5c:	687b      	ldr	r3, [r7, #4]
   16b5e:	2200      	movs	r2, #0
   16b60:	701a      	strb	r2, [r3, #0]
}
   16b62:	46c0      	nop			; (mov r8, r8)
   16b64:	46bd      	mov	sp, r7
   16b66:	b002      	add	sp, #8
   16b68:	bd80      	pop	{r7, pc}
	...

00016b6c <system_apb_clock_set_mask>:
{
   16b6c:	b580      	push	{r7, lr}
   16b6e:	b082      	sub	sp, #8
   16b70:	af00      	add	r7, sp, #0
   16b72:	0002      	movs	r2, r0
   16b74:	6039      	str	r1, [r7, #0]
   16b76:	1dfb      	adds	r3, r7, #7
   16b78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   16b7a:	1dfb      	adds	r3, r7, #7
   16b7c:	781b      	ldrb	r3, [r3, #0]
   16b7e:	2b01      	cmp	r3, #1
   16b80:	d00a      	beq.n	16b98 <system_apb_clock_set_mask+0x2c>
   16b82:	2b02      	cmp	r3, #2
   16b84:	d00f      	beq.n	16ba6 <system_apb_clock_set_mask+0x3a>
   16b86:	2b00      	cmp	r3, #0
   16b88:	d114      	bne.n	16bb4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   16b8a:	4b0e      	ldr	r3, [pc, #56]	; (16bc4 <system_apb_clock_set_mask+0x58>)
   16b8c:	4a0d      	ldr	r2, [pc, #52]	; (16bc4 <system_apb_clock_set_mask+0x58>)
   16b8e:	6991      	ldr	r1, [r2, #24]
   16b90:	683a      	ldr	r2, [r7, #0]
   16b92:	430a      	orrs	r2, r1
   16b94:	619a      	str	r2, [r3, #24]
			break;
   16b96:	e00f      	b.n	16bb8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   16b98:	4b0a      	ldr	r3, [pc, #40]	; (16bc4 <system_apb_clock_set_mask+0x58>)
   16b9a:	4a0a      	ldr	r2, [pc, #40]	; (16bc4 <system_apb_clock_set_mask+0x58>)
   16b9c:	69d1      	ldr	r1, [r2, #28]
   16b9e:	683a      	ldr	r2, [r7, #0]
   16ba0:	430a      	orrs	r2, r1
   16ba2:	61da      	str	r2, [r3, #28]
			break;
   16ba4:	e008      	b.n	16bb8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   16ba6:	4b07      	ldr	r3, [pc, #28]	; (16bc4 <system_apb_clock_set_mask+0x58>)
   16ba8:	4a06      	ldr	r2, [pc, #24]	; (16bc4 <system_apb_clock_set_mask+0x58>)
   16baa:	6a11      	ldr	r1, [r2, #32]
   16bac:	683a      	ldr	r2, [r7, #0]
   16bae:	430a      	orrs	r2, r1
   16bb0:	621a      	str	r2, [r3, #32]
			break;
   16bb2:	e001      	b.n	16bb8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16bb4:	2317      	movs	r3, #23
   16bb6:	e000      	b.n	16bba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   16bb8:	2300      	movs	r3, #0
}
   16bba:	0018      	movs	r0, r3
   16bbc:	46bd      	mov	sp, r7
   16bbe:	b002      	add	sp, #8
   16bc0:	bd80      	pop	{r7, pc}
   16bc2:	46c0      	nop			; (mov r8, r8)
   16bc4:	40000400 	.word	0x40000400

00016bc8 <system_is_debugger_present>:
{
   16bc8:	b580      	push	{r7, lr}
   16bca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   16bcc:	4b05      	ldr	r3, [pc, #20]	; (16be4 <system_is_debugger_present+0x1c>)
   16bce:	789b      	ldrb	r3, [r3, #2]
   16bd0:	b2db      	uxtb	r3, r3
   16bd2:	001a      	movs	r2, r3
   16bd4:	2302      	movs	r3, #2
   16bd6:	4013      	ands	r3, r2
   16bd8:	1e5a      	subs	r2, r3, #1
   16bda:	4193      	sbcs	r3, r2
   16bdc:	b2db      	uxtb	r3, r3
}
   16bde:	0018      	movs	r0, r3
   16be0:	46bd      	mov	sp, r7
   16be2:	bd80      	pop	{r7, pc}
   16be4:	41002000 	.word	0x41002000

00016be8 <system_interrupt_enable>:
{
   16be8:	b580      	push	{r7, lr}
   16bea:	b082      	sub	sp, #8
   16bec:	af00      	add	r7, sp, #0
   16bee:	0002      	movs	r2, r0
   16bf0:	1dfb      	adds	r3, r7, #7
   16bf2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16bf4:	4b06      	ldr	r3, [pc, #24]	; (16c10 <system_interrupt_enable+0x28>)
   16bf6:	1dfa      	adds	r2, r7, #7
   16bf8:	7812      	ldrb	r2, [r2, #0]
   16bfa:	0011      	movs	r1, r2
   16bfc:	221f      	movs	r2, #31
   16bfe:	400a      	ands	r2, r1
   16c00:	2101      	movs	r1, #1
   16c02:	4091      	lsls	r1, r2
   16c04:	000a      	movs	r2, r1
   16c06:	601a      	str	r2, [r3, #0]
}
   16c08:	46c0      	nop			; (mov r8, r8)
   16c0a:	46bd      	mov	sp, r7
   16c0c:	b002      	add	sp, #8
   16c0e:	bd80      	pop	{r7, pc}
   16c10:	e000e100 	.word	0xe000e100

00016c14 <system_interrupt_disable>:
{
   16c14:	b580      	push	{r7, lr}
   16c16:	b082      	sub	sp, #8
   16c18:	af00      	add	r7, sp, #0
   16c1a:	0002      	movs	r2, r0
   16c1c:	1dfb      	adds	r3, r7, #7
   16c1e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16c20:	4a07      	ldr	r2, [pc, #28]	; (16c40 <system_interrupt_disable+0x2c>)
   16c22:	1dfb      	adds	r3, r7, #7
   16c24:	781b      	ldrb	r3, [r3, #0]
   16c26:	0019      	movs	r1, r3
   16c28:	231f      	movs	r3, #31
   16c2a:	400b      	ands	r3, r1
   16c2c:	2101      	movs	r1, #1
   16c2e:	4099      	lsls	r1, r3
   16c30:	000b      	movs	r3, r1
   16c32:	0019      	movs	r1, r3
   16c34:	2380      	movs	r3, #128	; 0x80
   16c36:	50d1      	str	r1, [r2, r3]
}
   16c38:	46c0      	nop			; (mov r8, r8)
   16c3a:	46bd      	mov	sp, r7
   16c3c:	b002      	add	sp, #8
   16c3e:	bd80      	pop	{r7, pc}
   16c40:	e000e100 	.word	0xe000e100

00016c44 <spi_is_syncing>:
{
   16c44:	b580      	push	{r7, lr}
   16c46:	b084      	sub	sp, #16
   16c48:	af00      	add	r7, sp, #0
   16c4a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16c4c:	687b      	ldr	r3, [r7, #4]
   16c4e:	681b      	ldr	r3, [r3, #0]
   16c50:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   16c52:	68fb      	ldr	r3, [r7, #12]
   16c54:	69db      	ldr	r3, [r3, #28]
   16c56:	1e5a      	subs	r2, r3, #1
   16c58:	4193      	sbcs	r3, r2
   16c5a:	b2db      	uxtb	r3, r3
}
   16c5c:	0018      	movs	r0, r3
   16c5e:	46bd      	mov	sp, r7
   16c60:	b004      	add	sp, #16
   16c62:	bd80      	pop	{r7, pc}

00016c64 <spi_enable>:
{
   16c64:	b580      	push	{r7, lr}
   16c66:	b084      	sub	sp, #16
   16c68:	af00      	add	r7, sp, #0
   16c6a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16c6c:	687b      	ldr	r3, [r7, #4]
   16c6e:	681b      	ldr	r3, [r3, #0]
   16c70:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   16c72:	687b      	ldr	r3, [r7, #4]
   16c74:	681b      	ldr	r3, [r3, #0]
   16c76:	0018      	movs	r0, r3
   16c78:	4b0b      	ldr	r3, [pc, #44]	; (16ca8 <spi_enable+0x44>)
   16c7a:	4798      	blx	r3
   16c7c:	0003      	movs	r3, r0
   16c7e:	0018      	movs	r0, r3
   16c80:	4b0a      	ldr	r3, [pc, #40]	; (16cac <spi_enable+0x48>)
   16c82:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   16c84:	46c0      	nop			; (mov r8, r8)
   16c86:	687b      	ldr	r3, [r7, #4]
   16c88:	0018      	movs	r0, r3
   16c8a:	4b09      	ldr	r3, [pc, #36]	; (16cb0 <spi_enable+0x4c>)
   16c8c:	4798      	blx	r3
   16c8e:	1e03      	subs	r3, r0, #0
   16c90:	d1f9      	bne.n	16c86 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   16c92:	68fb      	ldr	r3, [r7, #12]
   16c94:	681b      	ldr	r3, [r3, #0]
   16c96:	2202      	movs	r2, #2
   16c98:	431a      	orrs	r2, r3
   16c9a:	68fb      	ldr	r3, [r7, #12]
   16c9c:	601a      	str	r2, [r3, #0]
}
   16c9e:	46c0      	nop			; (mov r8, r8)
   16ca0:	46bd      	mov	sp, r7
   16ca2:	b004      	add	sp, #16
   16ca4:	bd80      	pop	{r7, pc}
   16ca6:	46c0      	nop			; (mov r8, r8)
   16ca8:	00016981 	.word	0x00016981
   16cac:	00016be9 	.word	0x00016be9
   16cb0:	00016c45 	.word	0x00016c45

00016cb4 <spi_disable>:
{
   16cb4:	b580      	push	{r7, lr}
   16cb6:	b084      	sub	sp, #16
   16cb8:	af00      	add	r7, sp, #0
   16cba:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16cbc:	687b      	ldr	r3, [r7, #4]
   16cbe:	681b      	ldr	r3, [r3, #0]
   16cc0:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   16cc2:	687b      	ldr	r3, [r7, #4]
   16cc4:	681b      	ldr	r3, [r3, #0]
   16cc6:	0018      	movs	r0, r3
   16cc8:	4b0e      	ldr	r3, [pc, #56]	; (16d04 <spi_disable+0x50>)
   16cca:	4798      	blx	r3
   16ccc:	0003      	movs	r3, r0
   16cce:	0018      	movs	r0, r3
   16cd0:	4b0d      	ldr	r3, [pc, #52]	; (16d08 <spi_disable+0x54>)
   16cd2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   16cd4:	46c0      	nop			; (mov r8, r8)
   16cd6:	687b      	ldr	r3, [r7, #4]
   16cd8:	0018      	movs	r0, r3
   16cda:	4b0c      	ldr	r3, [pc, #48]	; (16d0c <spi_disable+0x58>)
   16cdc:	4798      	blx	r3
   16cde:	1e03      	subs	r3, r0, #0
   16ce0:	d1f9      	bne.n	16cd6 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   16ce2:	68fb      	ldr	r3, [r7, #12]
   16ce4:	228f      	movs	r2, #143	; 0x8f
   16ce6:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   16ce8:	68fb      	ldr	r3, [r7, #12]
   16cea:	228f      	movs	r2, #143	; 0x8f
   16cec:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   16cee:	68fb      	ldr	r3, [r7, #12]
   16cf0:	681b      	ldr	r3, [r3, #0]
   16cf2:	2202      	movs	r2, #2
   16cf4:	4393      	bics	r3, r2
   16cf6:	001a      	movs	r2, r3
   16cf8:	68fb      	ldr	r3, [r7, #12]
   16cfa:	601a      	str	r2, [r3, #0]
}
   16cfc:	46c0      	nop			; (mov r8, r8)
   16cfe:	46bd      	mov	sp, r7
   16d00:	b004      	add	sp, #16
   16d02:	bd80      	pop	{r7, pc}
   16d04:	00016981 	.word	0x00016981
   16d08:	00016c15 	.word	0x00016c15
   16d0c:	00016c45 	.word	0x00016c45

00016d10 <spi_is_write_complete>:
{
   16d10:	b580      	push	{r7, lr}
   16d12:	b084      	sub	sp, #16
   16d14:	af00      	add	r7, sp, #0
   16d16:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16d18:	687b      	ldr	r3, [r7, #4]
   16d1a:	681b      	ldr	r3, [r3, #0]
   16d1c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   16d1e:	68fb      	ldr	r3, [r7, #12]
   16d20:	7e1b      	ldrb	r3, [r3, #24]
   16d22:	b2db      	uxtb	r3, r3
   16d24:	001a      	movs	r2, r3
   16d26:	2302      	movs	r3, #2
   16d28:	4013      	ands	r3, r2
   16d2a:	1e5a      	subs	r2, r3, #1
   16d2c:	4193      	sbcs	r3, r2
   16d2e:	b2db      	uxtb	r3, r3
}
   16d30:	0018      	movs	r0, r3
   16d32:	46bd      	mov	sp, r7
   16d34:	b004      	add	sp, #16
   16d36:	bd80      	pop	{r7, pc}

00016d38 <spi_is_ready_to_write>:
{
   16d38:	b580      	push	{r7, lr}
   16d3a:	b084      	sub	sp, #16
   16d3c:	af00      	add	r7, sp, #0
   16d3e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16d40:	687b      	ldr	r3, [r7, #4]
   16d42:	681b      	ldr	r3, [r3, #0]
   16d44:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   16d46:	68fb      	ldr	r3, [r7, #12]
   16d48:	7e1b      	ldrb	r3, [r3, #24]
   16d4a:	b2db      	uxtb	r3, r3
   16d4c:	001a      	movs	r2, r3
   16d4e:	2301      	movs	r3, #1
   16d50:	4013      	ands	r3, r2
   16d52:	1e5a      	subs	r2, r3, #1
   16d54:	4193      	sbcs	r3, r2
   16d56:	b2db      	uxtb	r3, r3
}
   16d58:	0018      	movs	r0, r3
   16d5a:	46bd      	mov	sp, r7
   16d5c:	b004      	add	sp, #16
   16d5e:	bd80      	pop	{r7, pc}

00016d60 <spi_is_ready_to_read>:
{
   16d60:	b580      	push	{r7, lr}
   16d62:	b084      	sub	sp, #16
   16d64:	af00      	add	r7, sp, #0
   16d66:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16d68:	687b      	ldr	r3, [r7, #4]
   16d6a:	681b      	ldr	r3, [r3, #0]
   16d6c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   16d6e:	68fb      	ldr	r3, [r7, #12]
   16d70:	7e1b      	ldrb	r3, [r3, #24]
   16d72:	b2db      	uxtb	r3, r3
   16d74:	001a      	movs	r2, r3
   16d76:	2304      	movs	r3, #4
   16d78:	4013      	ands	r3, r2
   16d7a:	1e5a      	subs	r2, r3, #1
   16d7c:	4193      	sbcs	r3, r2
   16d7e:	b2db      	uxtb	r3, r3
}
   16d80:	0018      	movs	r0, r3
   16d82:	46bd      	mov	sp, r7
   16d84:	b004      	add	sp, #16
   16d86:	bd80      	pop	{r7, pc}

00016d88 <spi_write>:
{
   16d88:	b580      	push	{r7, lr}
   16d8a:	b084      	sub	sp, #16
   16d8c:	af00      	add	r7, sp, #0
   16d8e:	6078      	str	r0, [r7, #4]
   16d90:	000a      	movs	r2, r1
   16d92:	1cbb      	adds	r3, r7, #2
   16d94:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16d96:	687b      	ldr	r3, [r7, #4]
   16d98:	681b      	ldr	r3, [r3, #0]
   16d9a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   16d9c:	687b      	ldr	r3, [r7, #4]
   16d9e:	0018      	movs	r0, r3
   16da0:	4b0a      	ldr	r3, [pc, #40]	; (16dcc <spi_write+0x44>)
   16da2:	4798      	blx	r3
   16da4:	0003      	movs	r3, r0
   16da6:	001a      	movs	r2, r3
   16da8:	2301      	movs	r3, #1
   16daa:	4053      	eors	r3, r2
   16dac:	b2db      	uxtb	r3, r3
   16dae:	2b00      	cmp	r3, #0
   16db0:	d001      	beq.n	16db6 <spi_write+0x2e>
		return STATUS_BUSY;
   16db2:	2305      	movs	r3, #5
   16db4:	e006      	b.n	16dc4 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   16db6:	1cbb      	adds	r3, r7, #2
   16db8:	881b      	ldrh	r3, [r3, #0]
   16dba:	05db      	lsls	r3, r3, #23
   16dbc:	0dda      	lsrs	r2, r3, #23
   16dbe:	68fb      	ldr	r3, [r7, #12]
   16dc0:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   16dc2:	2300      	movs	r3, #0
}
   16dc4:	0018      	movs	r0, r3
   16dc6:	46bd      	mov	sp, r7
   16dc8:	b004      	add	sp, #16
   16dca:	bd80      	pop	{r7, pc}
   16dcc:	00016d39 	.word	0x00016d39

00016dd0 <spi_read>:
{
   16dd0:	b580      	push	{r7, lr}
   16dd2:	b084      	sub	sp, #16
   16dd4:	af00      	add	r7, sp, #0
   16dd6:	6078      	str	r0, [r7, #4]
   16dd8:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   16dda:	687b      	ldr	r3, [r7, #4]
   16ddc:	681b      	ldr	r3, [r3, #0]
   16dde:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   16de0:	687b      	ldr	r3, [r7, #4]
   16de2:	0018      	movs	r0, r3
   16de4:	4b1b      	ldr	r3, [pc, #108]	; (16e54 <spi_read+0x84>)
   16de6:	4798      	blx	r3
   16de8:	0003      	movs	r3, r0
   16dea:	001a      	movs	r2, r3
   16dec:	2301      	movs	r3, #1
   16dee:	4053      	eors	r3, r2
   16df0:	b2db      	uxtb	r3, r3
   16df2:	2b00      	cmp	r3, #0
   16df4:	d001      	beq.n	16dfa <spi_read+0x2a>
		return STATUS_ERR_IO;
   16df6:	2310      	movs	r3, #16
   16df8:	e027      	b.n	16e4a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   16dfa:	230f      	movs	r3, #15
   16dfc:	18fb      	adds	r3, r7, r3
   16dfe:	2200      	movs	r2, #0
   16e00:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   16e02:	68bb      	ldr	r3, [r7, #8]
   16e04:	8b5b      	ldrh	r3, [r3, #26]
   16e06:	b29b      	uxth	r3, r3
   16e08:	001a      	movs	r2, r3
   16e0a:	2304      	movs	r3, #4
   16e0c:	4013      	ands	r3, r2
   16e0e:	d006      	beq.n	16e1e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   16e10:	230f      	movs	r3, #15
   16e12:	18fb      	adds	r3, r7, r3
   16e14:	221e      	movs	r2, #30
   16e16:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   16e18:	68bb      	ldr	r3, [r7, #8]
   16e1a:	2204      	movs	r2, #4
   16e1c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   16e1e:	687b      	ldr	r3, [r7, #4]
   16e20:	799b      	ldrb	r3, [r3, #6]
   16e22:	2b01      	cmp	r3, #1
   16e24:	d108      	bne.n	16e38 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   16e26:	68bb      	ldr	r3, [r7, #8]
   16e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16e2a:	b29b      	uxth	r3, r3
   16e2c:	05db      	lsls	r3, r3, #23
   16e2e:	0ddb      	lsrs	r3, r3, #23
   16e30:	b29a      	uxth	r2, r3
   16e32:	683b      	ldr	r3, [r7, #0]
   16e34:	801a      	strh	r2, [r3, #0]
   16e36:	e005      	b.n	16e44 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   16e38:	68bb      	ldr	r3, [r7, #8]
   16e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16e3c:	b2db      	uxtb	r3, r3
   16e3e:	b29a      	uxth	r2, r3
   16e40:	683b      	ldr	r3, [r7, #0]
   16e42:	801a      	strh	r2, [r3, #0]
	return retval;
   16e44:	230f      	movs	r3, #15
   16e46:	18fb      	adds	r3, r7, r3
   16e48:	781b      	ldrb	r3, [r3, #0]
}
   16e4a:	0018      	movs	r0, r3
   16e4c:	46bd      	mov	sp, r7
   16e4e:	b004      	add	sp, #16
   16e50:	bd80      	pop	{r7, pc}
   16e52:	46c0      	nop			; (mov r8, r8)
   16e54:	00016d61 	.word	0x00016d61

00016e58 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   16e58:	b590      	push	{r4, r7, lr}
   16e5a:	b089      	sub	sp, #36	; 0x24
   16e5c:	af00      	add	r7, sp, #0
   16e5e:	6078      	str	r0, [r7, #4]
   16e60:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   16e62:	230c      	movs	r3, #12
   16e64:	18fb      	adds	r3, r7, r3
   16e66:	2200      	movs	r2, #0
   16e68:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   16e6a:	687b      	ldr	r3, [r7, #4]
   16e6c:	681b      	ldr	r3, [r3, #0]
   16e6e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   16e70:	687b      	ldr	r3, [r7, #4]
   16e72:	0018      	movs	r0, r3
   16e74:	4b24      	ldr	r3, [pc, #144]	; (16f08 <spi_set_baudrate+0xb0>)
   16e76:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   16e78:	46c0      	nop			; (mov r8, r8)
   16e7a:	687b      	ldr	r3, [r7, #4]
   16e7c:	0018      	movs	r0, r3
   16e7e:	4b23      	ldr	r3, [pc, #140]	; (16f0c <spi_set_baudrate+0xb4>)
   16e80:	4798      	blx	r3
   16e82:	1e03      	subs	r3, r0, #0
   16e84:	d1f9      	bne.n	16e7a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16e86:	687b      	ldr	r3, [r7, #4]
   16e88:	681b      	ldr	r3, [r3, #0]
   16e8a:	0018      	movs	r0, r3
   16e8c:	4b20      	ldr	r3, [pc, #128]	; (16f10 <spi_set_baudrate+0xb8>)
   16e8e:	4798      	blx	r3
   16e90:	0003      	movs	r3, r0
   16e92:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16e94:	69bb      	ldr	r3, [r7, #24]
   16e96:	3314      	adds	r3, #20
   16e98:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   16e9a:	697b      	ldr	r3, [r7, #20]
   16e9c:	b2db      	uxtb	r3, r3
   16e9e:	0018      	movs	r0, r3
   16ea0:	4b1c      	ldr	r3, [pc, #112]	; (16f14 <spi_set_baudrate+0xbc>)
   16ea2:	4798      	blx	r3
   16ea4:	0003      	movs	r3, r0
   16ea6:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   16ea8:	230f      	movs	r3, #15
   16eaa:	18fc      	adds	r4, r7, r3
   16eac:	230c      	movs	r3, #12
   16eae:	18fa      	adds	r2, r7, r3
   16eb0:	6939      	ldr	r1, [r7, #16]
   16eb2:	683b      	ldr	r3, [r7, #0]
   16eb4:	0018      	movs	r0, r3
   16eb6:	4b18      	ldr	r3, [pc, #96]	; (16f18 <spi_set_baudrate+0xc0>)
   16eb8:	4798      	blx	r3
   16eba:	0003      	movs	r3, r0
   16ebc:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   16ebe:	230f      	movs	r3, #15
   16ec0:	18fb      	adds	r3, r7, r3
   16ec2:	781b      	ldrb	r3, [r3, #0]
   16ec4:	2b00      	cmp	r3, #0
   16ec6:	d001      	beq.n	16ecc <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   16ec8:	2317      	movs	r3, #23
   16eca:	e018      	b.n	16efe <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   16ecc:	230c      	movs	r3, #12
   16ece:	18fb      	adds	r3, r7, r3
   16ed0:	881b      	ldrh	r3, [r3, #0]
   16ed2:	b2da      	uxtb	r2, r3
   16ed4:	69fb      	ldr	r3, [r7, #28]
   16ed6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   16ed8:	46c0      	nop			; (mov r8, r8)
   16eda:	687b      	ldr	r3, [r7, #4]
   16edc:	0018      	movs	r0, r3
   16ede:	4b0b      	ldr	r3, [pc, #44]	; (16f0c <spi_set_baudrate+0xb4>)
   16ee0:	4798      	blx	r3
   16ee2:	1e03      	subs	r3, r0, #0
   16ee4:	d1f9      	bne.n	16eda <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   16ee6:	687b      	ldr	r3, [r7, #4]
   16ee8:	0018      	movs	r0, r3
   16eea:	4b0c      	ldr	r3, [pc, #48]	; (16f1c <spi_set_baudrate+0xc4>)
   16eec:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   16eee:	46c0      	nop			; (mov r8, r8)
   16ef0:	687b      	ldr	r3, [r7, #4]
   16ef2:	0018      	movs	r0, r3
   16ef4:	4b05      	ldr	r3, [pc, #20]	; (16f0c <spi_set_baudrate+0xb4>)
   16ef6:	4798      	blx	r3
   16ef8:	1e03      	subs	r3, r0, #0
   16efa:	d1f9      	bne.n	16ef0 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   16efc:	2300      	movs	r3, #0
}
   16efe:	0018      	movs	r0, r3
   16f00:	46bd      	mov	sp, r7
   16f02:	b009      	add	sp, #36	; 0x24
   16f04:	bd90      	pop	{r4, r7, pc}
   16f06:	46c0      	nop			; (mov r8, r8)
   16f08:	00016cb5 	.word	0x00016cb5
   16f0c:	00016c45 	.word	0x00016c45
   16f10:	000168b1 	.word	0x000168b1
   16f14:	00019265 	.word	0x00019265
   16f18:	0001642b 	.word	0x0001642b
   16f1c:	00016c65 	.word	0x00016c65

00016f20 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   16f20:	b590      	push	{r4, r7, lr}
   16f22:	b093      	sub	sp, #76	; 0x4c
   16f24:	af00      	add	r7, sp, #0
   16f26:	6078      	str	r0, [r7, #4]
   16f28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   16f2a:	687b      	ldr	r3, [r7, #4]
   16f2c:	681b      	ldr	r3, [r3, #0]
   16f2e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   16f30:	687b      	ldr	r3, [r7, #4]
   16f32:	681b      	ldr	r3, [r3, #0]
   16f34:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   16f36:	231c      	movs	r3, #28
   16f38:	18fb      	adds	r3, r7, r3
   16f3a:	0018      	movs	r0, r3
   16f3c:	4b75      	ldr	r3, [pc, #468]	; (17114 <_spi_set_config+0x1f4>)
   16f3e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16f40:	231c      	movs	r3, #28
   16f42:	18fb      	adds	r3, r7, r3
   16f44:	2200      	movs	r2, #0
   16f46:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   16f48:	683b      	ldr	r3, [r7, #0]
   16f4a:	781b      	ldrb	r3, [r3, #0]
   16f4c:	2b00      	cmp	r3, #0
   16f4e:	d103      	bne.n	16f58 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   16f50:	231c      	movs	r3, #28
   16f52:	18fb      	adds	r3, r7, r3
   16f54:	2200      	movs	r2, #0
   16f56:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   16f58:	683b      	ldr	r3, [r7, #0]
   16f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   16f5c:	230c      	movs	r3, #12
   16f5e:	18fb      	adds	r3, r7, r3
   16f60:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   16f62:	683b      	ldr	r3, [r7, #0]
   16f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   16f66:	230c      	movs	r3, #12
   16f68:	18fb      	adds	r3, r7, r3
   16f6a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   16f6c:	683b      	ldr	r3, [r7, #0]
   16f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   16f70:	230c      	movs	r3, #12
   16f72:	18fb      	adds	r3, r7, r3
   16f74:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   16f76:	683b      	ldr	r3, [r7, #0]
   16f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   16f7a:	230c      	movs	r3, #12
   16f7c:	18fb      	adds	r3, r7, r3
   16f7e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   16f80:	2347      	movs	r3, #71	; 0x47
   16f82:	18fb      	adds	r3, r7, r3
   16f84:	2200      	movs	r2, #0
   16f86:	701a      	strb	r2, [r3, #0]
   16f88:	e02c      	b.n	16fe4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   16f8a:	2347      	movs	r3, #71	; 0x47
   16f8c:	18fb      	adds	r3, r7, r3
   16f8e:	781a      	ldrb	r2, [r3, #0]
   16f90:	230c      	movs	r3, #12
   16f92:	18fb      	adds	r3, r7, r3
   16f94:	0092      	lsls	r2, r2, #2
   16f96:	58d3      	ldr	r3, [r2, r3]
   16f98:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   16f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16f9c:	2b00      	cmp	r3, #0
   16f9e:	d109      	bne.n	16fb4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   16fa0:	2347      	movs	r3, #71	; 0x47
   16fa2:	18fb      	adds	r3, r7, r3
   16fa4:	781a      	ldrb	r2, [r3, #0]
   16fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16fa8:	0011      	movs	r1, r2
   16faa:	0018      	movs	r0, r3
   16fac:	4b5a      	ldr	r3, [pc, #360]	; (17118 <_spi_set_config+0x1f8>)
   16fae:	4798      	blx	r3
   16fb0:	0003      	movs	r3, r0
   16fb2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   16fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16fb6:	3301      	adds	r3, #1
   16fb8:	d00d      	beq.n	16fd6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   16fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16fbc:	b2da      	uxtb	r2, r3
   16fbe:	231c      	movs	r3, #28
   16fc0:	18fb      	adds	r3, r7, r3
   16fc2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   16fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16fc6:	0c1b      	lsrs	r3, r3, #16
   16fc8:	b2db      	uxtb	r3, r3
   16fca:	221c      	movs	r2, #28
   16fcc:	18ba      	adds	r2, r7, r2
   16fce:	0011      	movs	r1, r2
   16fd0:	0018      	movs	r0, r3
   16fd2:	4b52      	ldr	r3, [pc, #328]	; (1711c <_spi_set_config+0x1fc>)
   16fd4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   16fd6:	2347      	movs	r3, #71	; 0x47
   16fd8:	18fb      	adds	r3, r7, r3
   16fda:	781a      	ldrb	r2, [r3, #0]
   16fdc:	2347      	movs	r3, #71	; 0x47
   16fde:	18fb      	adds	r3, r7, r3
   16fe0:	3201      	adds	r2, #1
   16fe2:	701a      	strb	r2, [r3, #0]
   16fe4:	2347      	movs	r3, #71	; 0x47
   16fe6:	18fb      	adds	r3, r7, r3
   16fe8:	781b      	ldrb	r3, [r3, #0]
   16fea:	2b03      	cmp	r3, #3
   16fec:	d9cd      	bls.n	16f8a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   16fee:	683b      	ldr	r3, [r7, #0]
   16ff0:	781a      	ldrb	r2, [r3, #0]
   16ff2:	687b      	ldr	r3, [r7, #4]
   16ff4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   16ff6:	683b      	ldr	r3, [r7, #0]
   16ff8:	7c1a      	ldrb	r2, [r3, #16]
   16ffa:	687b      	ldr	r3, [r7, #4]
   16ffc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   16ffe:	683b      	ldr	r3, [r7, #0]
   17000:	7c9a      	ldrb	r2, [r3, #18]
   17002:	687b      	ldr	r3, [r7, #4]
   17004:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   17006:	683b      	ldr	r3, [r7, #0]
   17008:	7d1a      	ldrb	r2, [r3, #20]
   1700a:	687b      	ldr	r3, [r7, #4]
   1700c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1700e:	230a      	movs	r3, #10
   17010:	18fb      	adds	r3, r7, r3
   17012:	2200      	movs	r2, #0
   17014:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   17016:	2300      	movs	r3, #0
   17018:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   1701a:	2300      	movs	r3, #0
   1701c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   1701e:	683b      	ldr	r3, [r7, #0]
   17020:	781b      	ldrb	r3, [r3, #0]
   17022:	2b01      	cmp	r3, #1
   17024:	d129      	bne.n	1707a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17026:	687b      	ldr	r3, [r7, #4]
   17028:	681b      	ldr	r3, [r3, #0]
   1702a:	0018      	movs	r0, r3
   1702c:	4b3c      	ldr	r3, [pc, #240]	; (17120 <_spi_set_config+0x200>)
   1702e:	4798      	blx	r3
   17030:	0003      	movs	r3, r0
   17032:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17036:	3314      	adds	r3, #20
   17038:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1703c:	b2db      	uxtb	r3, r3
   1703e:	0018      	movs	r0, r3
   17040:	4b38      	ldr	r3, [pc, #224]	; (17124 <_spi_set_config+0x204>)
   17042:	4798      	blx	r3
   17044:	0003      	movs	r3, r0
   17046:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   17048:	683b      	ldr	r3, [r7, #0]
   1704a:	699b      	ldr	r3, [r3, #24]
   1704c:	2223      	movs	r2, #35	; 0x23
   1704e:	18bc      	adds	r4, r7, r2
   17050:	220a      	movs	r2, #10
   17052:	18ba      	adds	r2, r7, r2
   17054:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17056:	0018      	movs	r0, r3
   17058:	4b33      	ldr	r3, [pc, #204]	; (17128 <_spi_set_config+0x208>)
   1705a:	4798      	blx	r3
   1705c:	0003      	movs	r3, r0
   1705e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   17060:	2323      	movs	r3, #35	; 0x23
   17062:	18fb      	adds	r3, r7, r3
   17064:	781b      	ldrb	r3, [r3, #0]
   17066:	2b00      	cmp	r3, #0
   17068:	d001      	beq.n	1706e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   1706a:	2317      	movs	r3, #23
   1706c:	e04e      	b.n	1710c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   1706e:	230a      	movs	r3, #10
   17070:	18fb      	adds	r3, r7, r3
   17072:	881b      	ldrh	r3, [r3, #0]
   17074:	b2da      	uxtb	r2, r3
   17076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17078:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   1707a:	683b      	ldr	r3, [r7, #0]
   1707c:	685b      	ldr	r3, [r3, #4]
   1707e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17080:	4313      	orrs	r3, r2
   17082:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   17084:	683b      	ldr	r3, [r7, #0]
   17086:	689b      	ldr	r3, [r3, #8]
   17088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1708a:	4313      	orrs	r3, r2
   1708c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   1708e:	683b      	ldr	r3, [r7, #0]
   17090:	68db      	ldr	r3, [r3, #12]
   17092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17094:	4313      	orrs	r3, r2
   17096:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   17098:	683b      	ldr	r3, [r7, #0]
   1709a:	7c1b      	ldrb	r3, [r3, #16]
   1709c:	001a      	movs	r2, r3
   1709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   170a0:	4313      	orrs	r3, r2
   170a2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   170a4:	683b      	ldr	r3, [r7, #0]
   170a6:	7c5b      	ldrb	r3, [r3, #17]
   170a8:	2b00      	cmp	r3, #0
   170aa:	d103      	bne.n	170b4 <_spi_set_config+0x194>
   170ac:	4b1f      	ldr	r3, [pc, #124]	; (1712c <_spi_set_config+0x20c>)
   170ae:	4798      	blx	r3
   170b0:	1e03      	subs	r3, r0, #0
   170b2:	d003      	beq.n	170bc <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   170b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   170b6:	2280      	movs	r2, #128	; 0x80
   170b8:	4313      	orrs	r3, r2
   170ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   170bc:	683b      	ldr	r3, [r7, #0]
   170be:	7c9b      	ldrb	r3, [r3, #18]
   170c0:	2b00      	cmp	r3, #0
   170c2:	d004      	beq.n	170ce <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   170c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   170c6:	2280      	movs	r2, #128	; 0x80
   170c8:	0292      	lsls	r2, r2, #10
   170ca:	4313      	orrs	r3, r2
   170cc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   170ce:	683b      	ldr	r3, [r7, #0]
   170d0:	7cdb      	ldrb	r3, [r3, #19]
   170d2:	2b00      	cmp	r3, #0
   170d4:	d004      	beq.n	170e0 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   170d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   170d8:	2280      	movs	r2, #128	; 0x80
   170da:	0092      	lsls	r2, r2, #2
   170dc:	4313      	orrs	r3, r2
   170de:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   170e0:	683b      	ldr	r3, [r7, #0]
   170e2:	7d1b      	ldrb	r3, [r3, #20]
   170e4:	2b00      	cmp	r3, #0
   170e6:	d004      	beq.n	170f2 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   170e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   170ea:	2280      	movs	r2, #128	; 0x80
   170ec:	0192      	lsls	r2, r2, #6
   170ee:	4313      	orrs	r3, r2
   170f0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   170f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170f4:	681a      	ldr	r2, [r3, #0]
   170f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   170f8:	431a      	orrs	r2, r3
   170fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170fc:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   170fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17100:	685a      	ldr	r2, [r3, #4]
   17102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17104:	431a      	orrs	r2, r3
   17106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17108:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   1710a:	2300      	movs	r3, #0
}
   1710c:	0018      	movs	r0, r3
   1710e:	46bd      	mov	sp, r7
   17110:	b013      	add	sp, #76	; 0x4c
   17112:	bd90      	pop	{r4, r7, pc}
   17114:	00016a55 	.word	0x00016a55
   17118:	000166f5 	.word	0x000166f5
   1711c:	000194a1 	.word	0x000194a1
   17120:	000168b1 	.word	0x000168b1
   17124:	00019265 	.word	0x00019265
   17128:	0001642b 	.word	0x0001642b
   1712c:	00016bc9 	.word	0x00016bc9

00017130 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   17130:	b590      	push	{r4, r7, lr}
   17132:	b08b      	sub	sp, #44	; 0x2c
   17134:	af00      	add	r7, sp, #0
   17136:	60f8      	str	r0, [r7, #12]
   17138:	60b9      	str	r1, [r7, #8]
   1713a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1713c:	68fb      	ldr	r3, [r7, #12]
   1713e:	68ba      	ldr	r2, [r7, #8]
   17140:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   17142:	68fb      	ldr	r3, [r7, #12]
   17144:	681b      	ldr	r3, [r3, #0]
   17146:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   17148:	6a3b      	ldr	r3, [r7, #32]
   1714a:	681b      	ldr	r3, [r3, #0]
   1714c:	2202      	movs	r2, #2
   1714e:	4013      	ands	r3, r2
   17150:	d001      	beq.n	17156 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   17152:	231c      	movs	r3, #28
   17154:	e09c      	b.n	17290 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   17156:	6a3b      	ldr	r3, [r7, #32]
   17158:	681b      	ldr	r3, [r3, #0]
   1715a:	2201      	movs	r2, #1
   1715c:	4013      	ands	r3, r2
   1715e:	d001      	beq.n	17164 <spi_init+0x34>
		return STATUS_BUSY;
   17160:	2305      	movs	r3, #5
   17162:	e095      	b.n	17290 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17164:	68fb      	ldr	r3, [r7, #12]
   17166:	681b      	ldr	r3, [r3, #0]
   17168:	0018      	movs	r0, r3
   1716a:	4b4b      	ldr	r3, [pc, #300]	; (17298 <spi_init+0x168>)
   1716c:	4798      	blx	r3
   1716e:	0003      	movs	r3, r0
   17170:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17172:	69fb      	ldr	r3, [r7, #28]
   17174:	3302      	adds	r3, #2
   17176:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17178:	69fb      	ldr	r3, [r7, #28]
   1717a:	3314      	adds	r3, #20
   1717c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1717e:	2201      	movs	r2, #1
   17180:	69bb      	ldr	r3, [r7, #24]
   17182:	409a      	lsls	r2, r3
   17184:	0013      	movs	r3, r2
   17186:	0019      	movs	r1, r3
   17188:	2002      	movs	r0, #2
   1718a:	4b44      	ldr	r3, [pc, #272]	; (1729c <spi_init+0x16c>)
   1718c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1718e:	2310      	movs	r3, #16
   17190:	18fb      	adds	r3, r7, r3
   17192:	0018      	movs	r0, r3
   17194:	4b42      	ldr	r3, [pc, #264]	; (172a0 <spi_init+0x170>)
   17196:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17198:	687b      	ldr	r3, [r7, #4]
   1719a:	2224      	movs	r2, #36	; 0x24
   1719c:	5c9a      	ldrb	r2, [r3, r2]
   1719e:	2310      	movs	r3, #16
   171a0:	18fb      	adds	r3, r7, r3
   171a2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   171a4:	697b      	ldr	r3, [r7, #20]
   171a6:	b2db      	uxtb	r3, r3
   171a8:	2210      	movs	r2, #16
   171aa:	18ba      	adds	r2, r7, r2
   171ac:	0011      	movs	r1, r2
   171ae:	0018      	movs	r0, r3
   171b0:	4b3c      	ldr	r3, [pc, #240]	; (172a4 <spi_init+0x174>)
   171b2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   171b4:	697b      	ldr	r3, [r7, #20]
   171b6:	b2db      	uxtb	r3, r3
   171b8:	0018      	movs	r0, r3
   171ba:	4b3b      	ldr	r3, [pc, #236]	; (172a8 <spi_init+0x178>)
   171bc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   171be:	687b      	ldr	r3, [r7, #4]
   171c0:	2224      	movs	r2, #36	; 0x24
   171c2:	5c9b      	ldrb	r3, [r3, r2]
   171c4:	2100      	movs	r1, #0
   171c6:	0018      	movs	r0, r3
   171c8:	4b38      	ldr	r3, [pc, #224]	; (172ac <spi_init+0x17c>)
   171ca:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   171cc:	687b      	ldr	r3, [r7, #4]
   171ce:	781b      	ldrb	r3, [r3, #0]
   171d0:	2b01      	cmp	r3, #1
   171d2:	d105      	bne.n	171e0 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   171d4:	6a3b      	ldr	r3, [r7, #32]
   171d6:	681b      	ldr	r3, [r3, #0]
   171d8:	220c      	movs	r2, #12
   171da:	431a      	orrs	r2, r3
   171dc:	6a3b      	ldr	r3, [r7, #32]
   171de:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   171e0:	2327      	movs	r3, #39	; 0x27
   171e2:	18fb      	adds	r3, r7, r3
   171e4:	2200      	movs	r2, #0
   171e6:	701a      	strb	r2, [r3, #0]
   171e8:	e010      	b.n	1720c <spi_init+0xdc>
		module->callback[i]        = NULL;
   171ea:	2327      	movs	r3, #39	; 0x27
   171ec:	18fb      	adds	r3, r7, r3
   171ee:	781b      	ldrb	r3, [r3, #0]
   171f0:	68fa      	ldr	r2, [r7, #12]
   171f2:	3302      	adds	r3, #2
   171f4:	009b      	lsls	r3, r3, #2
   171f6:	18d3      	adds	r3, r2, r3
   171f8:	3304      	adds	r3, #4
   171fa:	2200      	movs	r2, #0
   171fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   171fe:	2327      	movs	r3, #39	; 0x27
   17200:	18fb      	adds	r3, r7, r3
   17202:	781a      	ldrb	r2, [r3, #0]
   17204:	2327      	movs	r3, #39	; 0x27
   17206:	18fb      	adds	r3, r7, r3
   17208:	3201      	adds	r2, #1
   1720a:	701a      	strb	r2, [r3, #0]
   1720c:	2327      	movs	r3, #39	; 0x27
   1720e:	18fb      	adds	r3, r7, r3
   17210:	781b      	ldrb	r3, [r3, #0]
   17212:	2b06      	cmp	r3, #6
   17214:	d9e9      	bls.n	171ea <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   17216:	68fb      	ldr	r3, [r7, #12]
   17218:	2200      	movs	r2, #0
   1721a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   1721c:	68fb      	ldr	r3, [r7, #12]
   1721e:	2200      	movs	r2, #0
   17220:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   17222:	68fb      	ldr	r3, [r7, #12]
   17224:	2200      	movs	r2, #0
   17226:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   17228:	68fb      	ldr	r3, [r7, #12]
   1722a:	2200      	movs	r2, #0
   1722c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   1722e:	68fb      	ldr	r3, [r7, #12]
   17230:	2236      	movs	r2, #54	; 0x36
   17232:	2100      	movs	r1, #0
   17234:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   17236:	68fb      	ldr	r3, [r7, #12]
   17238:	2237      	movs	r2, #55	; 0x37
   1723a:	2100      	movs	r1, #0
   1723c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   1723e:	68fb      	ldr	r3, [r7, #12]
   17240:	2238      	movs	r2, #56	; 0x38
   17242:	2100      	movs	r1, #0
   17244:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   17246:	68fb      	ldr	r3, [r7, #12]
   17248:	2203      	movs	r2, #3
   1724a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   1724c:	68fb      	ldr	r3, [r7, #12]
   1724e:	2200      	movs	r2, #0
   17250:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   17252:	68fb      	ldr	r3, [r7, #12]
   17254:	681b      	ldr	r3, [r3, #0]
   17256:	2213      	movs	r2, #19
   17258:	18bc      	adds	r4, r7, r2
   1725a:	0018      	movs	r0, r3
   1725c:	4b0e      	ldr	r3, [pc, #56]	; (17298 <spi_init+0x168>)
   1725e:	4798      	blx	r3
   17260:	0003      	movs	r3, r0
   17262:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   17264:	4a12      	ldr	r2, [pc, #72]	; (172b0 <spi_init+0x180>)
   17266:	2313      	movs	r3, #19
   17268:	18fb      	adds	r3, r7, r3
   1726a:	781b      	ldrb	r3, [r3, #0]
   1726c:	0011      	movs	r1, r2
   1726e:	0018      	movs	r0, r3
   17270:	4b10      	ldr	r3, [pc, #64]	; (172b4 <spi_init+0x184>)
   17272:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   17274:	2313      	movs	r3, #19
   17276:	18fb      	adds	r3, r7, r3
   17278:	781a      	ldrb	r2, [r3, #0]
   1727a:	4b0f      	ldr	r3, [pc, #60]	; (172b8 <spi_init+0x188>)
   1727c:	0092      	lsls	r2, r2, #2
   1727e:	68f9      	ldr	r1, [r7, #12]
   17280:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   17282:	687a      	ldr	r2, [r7, #4]
   17284:	68fb      	ldr	r3, [r7, #12]
   17286:	0011      	movs	r1, r2
   17288:	0018      	movs	r0, r3
   1728a:	4b0c      	ldr	r3, [pc, #48]	; (172bc <spi_init+0x18c>)
   1728c:	4798      	blx	r3
   1728e:	0003      	movs	r3, r0
}
   17290:	0018      	movs	r0, r3
   17292:	46bd      	mov	sp, r7
   17294:	b00b      	add	sp, #44	; 0x2c
   17296:	bd90      	pop	{r4, r7, pc}
   17298:	000168b1 	.word	0x000168b1
   1729c:	00016b6d 	.word	0x00016b6d
   172a0:	00016b55 	.word	0x00016b55
   172a4:	00019141 	.word	0x00019141
   172a8:	00019185 	.word	0x00019185
   172ac:	00016669 	.word	0x00016669
   172b0:	00017789 	.word	0x00017789
   172b4:	00016915 	.word	0x00016915
   172b8:	20005888 	.word	0x20005888
   172bc:	00016f21 	.word	0x00016f21

000172c0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   172c0:	b590      	push	{r4, r7, lr}
   172c2:	b087      	sub	sp, #28
   172c4:	af00      	add	r7, sp, #0
   172c6:	60f8      	str	r0, [r7, #12]
   172c8:	60b9      	str	r1, [r7, #8]
   172ca:	0019      	movs	r1, r3
   172cc:	1dbb      	adds	r3, r7, #6
   172ce:	801a      	strh	r2, [r3, #0]
   172d0:	1d3b      	adds	r3, r7, #4
   172d2:	1c0a      	adds	r2, r1, #0
   172d4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   172d6:	68fb      	ldr	r3, [r7, #12]
   172d8:	2238      	movs	r2, #56	; 0x38
   172da:	5c9b      	ldrb	r3, [r3, r2]
   172dc:	b2db      	uxtb	r3, r3
   172de:	2b05      	cmp	r3, #5
   172e0:	d101      	bne.n	172e6 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   172e2:	2305      	movs	r3, #5
   172e4:	e07a      	b.n	173dc <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   172e6:	1dbb      	adds	r3, r7, #6
   172e8:	881b      	ldrh	r3, [r3, #0]
   172ea:	2b00      	cmp	r3, #0
   172ec:	d101      	bne.n	172f2 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   172ee:	2317      	movs	r3, #23
   172f0:	e074      	b.n	173dc <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   172f2:	68fb      	ldr	r3, [r7, #12]
   172f4:	79db      	ldrb	r3, [r3, #7]
   172f6:	2201      	movs	r2, #1
   172f8:	4053      	eors	r3, r2
   172fa:	b2db      	uxtb	r3, r3
   172fc:	2b00      	cmp	r3, #0
   172fe:	d001      	beq.n	17304 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   17300:	231c      	movs	r3, #28
   17302:	e06b      	b.n	173dc <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   17304:	2316      	movs	r3, #22
   17306:	18fb      	adds	r3, r7, r3
   17308:	2200      	movs	r2, #0
   1730a:	801a      	strh	r2, [r3, #0]

	while (length--) {
   1730c:	e05e      	b.n	173cc <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   1730e:	68fb      	ldr	r3, [r7, #12]
   17310:	795b      	ldrb	r3, [r3, #5]
   17312:	2b01      	cmp	r3, #1
   17314:	d112      	bne.n	1733c <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   17316:	46c0      	nop			; (mov r8, r8)
   17318:	68fb      	ldr	r3, [r7, #12]
   1731a:	0018      	movs	r0, r3
   1731c:	4b31      	ldr	r3, [pc, #196]	; (173e4 <spi_read_buffer_wait+0x124>)
   1731e:	4798      	blx	r3
   17320:	0003      	movs	r3, r0
   17322:	001a      	movs	r2, r3
   17324:	2301      	movs	r3, #1
   17326:	4053      	eors	r3, r2
   17328:	b2db      	uxtb	r3, r3
   1732a:	2b00      	cmp	r3, #0
   1732c:	d1f4      	bne.n	17318 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   1732e:	1d3b      	adds	r3, r7, #4
   17330:	881a      	ldrh	r2, [r3, #0]
   17332:	68fb      	ldr	r3, [r7, #12]
   17334:	0011      	movs	r1, r2
   17336:	0018      	movs	r0, r3
   17338:	4b2b      	ldr	r3, [pc, #172]	; (173e8 <spi_read_buffer_wait+0x128>)
   1733a:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   1733c:	46c0      	nop			; (mov r8, r8)
   1733e:	68fb      	ldr	r3, [r7, #12]
   17340:	0018      	movs	r0, r3
   17342:	4b2a      	ldr	r3, [pc, #168]	; (173ec <spi_read_buffer_wait+0x12c>)
   17344:	4798      	blx	r3
   17346:	0003      	movs	r3, r0
   17348:	001a      	movs	r2, r3
   1734a:	2301      	movs	r3, #1
   1734c:	4053      	eors	r3, r2
   1734e:	b2db      	uxtb	r3, r3
   17350:	2b00      	cmp	r3, #0
   17352:	d1f4      	bne.n	1733e <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   17354:	2312      	movs	r3, #18
   17356:	18fb      	adds	r3, r7, r3
   17358:	2200      	movs	r2, #0
   1735a:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   1735c:	2315      	movs	r3, #21
   1735e:	18fc      	adds	r4, r7, r3
   17360:	2312      	movs	r3, #18
   17362:	18fa      	adds	r2, r7, r3
   17364:	68fb      	ldr	r3, [r7, #12]
   17366:	0011      	movs	r1, r2
   17368:	0018      	movs	r0, r3
   1736a:	4b21      	ldr	r3, [pc, #132]	; (173f0 <spi_read_buffer_wait+0x130>)
   1736c:	4798      	blx	r3
   1736e:	0003      	movs	r3, r0
   17370:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   17372:	2315      	movs	r3, #21
   17374:	18fb      	adds	r3, r7, r3
   17376:	781b      	ldrb	r3, [r3, #0]
   17378:	2b00      	cmp	r3, #0
   1737a:	d003      	beq.n	17384 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   1737c:	2315      	movs	r3, #21
   1737e:	18fb      	adds	r3, r7, r3
   17380:	781b      	ldrb	r3, [r3, #0]
   17382:	e02b      	b.n	173dc <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   17384:	2316      	movs	r3, #22
   17386:	18fb      	adds	r3, r7, r3
   17388:	881b      	ldrh	r3, [r3, #0]
   1738a:	2216      	movs	r2, #22
   1738c:	18ba      	adds	r2, r7, r2
   1738e:	1c59      	adds	r1, r3, #1
   17390:	8011      	strh	r1, [r2, #0]
   17392:	001a      	movs	r2, r3
   17394:	68bb      	ldr	r3, [r7, #8]
   17396:	189b      	adds	r3, r3, r2
   17398:	2212      	movs	r2, #18
   1739a:	18ba      	adds	r2, r7, r2
   1739c:	8812      	ldrh	r2, [r2, #0]
   1739e:	b2d2      	uxtb	r2, r2
   173a0:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   173a2:	68fb      	ldr	r3, [r7, #12]
   173a4:	799b      	ldrb	r3, [r3, #6]
   173a6:	2b01      	cmp	r3, #1
   173a8:	d110      	bne.n	173cc <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   173aa:	2316      	movs	r3, #22
   173ac:	18fb      	adds	r3, r7, r3
   173ae:	881b      	ldrh	r3, [r3, #0]
   173b0:	2216      	movs	r2, #22
   173b2:	18ba      	adds	r2, r7, r2
   173b4:	1c59      	adds	r1, r3, #1
   173b6:	8011      	strh	r1, [r2, #0]
   173b8:	001a      	movs	r2, r3
   173ba:	68bb      	ldr	r3, [r7, #8]
   173bc:	189b      	adds	r3, r3, r2
   173be:	2212      	movs	r2, #18
   173c0:	18ba      	adds	r2, r7, r2
   173c2:	8812      	ldrh	r2, [r2, #0]
   173c4:	0a12      	lsrs	r2, r2, #8
   173c6:	b292      	uxth	r2, r2
   173c8:	b2d2      	uxtb	r2, r2
   173ca:	701a      	strb	r2, [r3, #0]
	while (length--) {
   173cc:	1dbb      	adds	r3, r7, #6
   173ce:	881b      	ldrh	r3, [r3, #0]
   173d0:	1dba      	adds	r2, r7, #6
   173d2:	1e59      	subs	r1, r3, #1
   173d4:	8011      	strh	r1, [r2, #0]
   173d6:	2b00      	cmp	r3, #0
   173d8:	d199      	bne.n	1730e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   173da:	2300      	movs	r3, #0
}
   173dc:	0018      	movs	r0, r3
   173de:	46bd      	mov	sp, r7
   173e0:	b007      	add	sp, #28
   173e2:	bd90      	pop	{r4, r7, pc}
   173e4:	00016d39 	.word	0x00016d39
   173e8:	00016d89 	.word	0x00016d89
   173ec:	00016d61 	.word	0x00016d61
   173f0:	00016dd1 	.word	0x00016dd1

000173f4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   173f4:	b580      	push	{r7, lr}
   173f6:	b086      	sub	sp, #24
   173f8:	af00      	add	r7, sp, #0
   173fa:	60f8      	str	r0, [r7, #12]
   173fc:	60b9      	str	r1, [r7, #8]
   173fe:	1dfb      	adds	r3, r7, #7
   17400:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   17402:	68fb      	ldr	r3, [r7, #12]
   17404:	795b      	ldrb	r3, [r3, #5]
   17406:	2b01      	cmp	r3, #1
   17408:	d001      	beq.n	1740e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   1740a:	2315      	movs	r3, #21
   1740c:	e05c      	b.n	174c8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   1740e:	68fb      	ldr	r3, [r7, #12]
   17410:	7a1b      	ldrb	r3, [r3, #8]
   17412:	2201      	movs	r2, #1
   17414:	4053      	eors	r3, r2
   17416:	b2db      	uxtb	r3, r3
   17418:	2b00      	cmp	r3, #0
   1741a:	d054      	beq.n	174c6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   1741c:	1dfb      	adds	r3, r7, #7
   1741e:	781b      	ldrb	r3, [r3, #0]
   17420:	2b00      	cmp	r3, #0
   17422:	d04a      	beq.n	174ba <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   17424:	68bb      	ldr	r3, [r7, #8]
   17426:	785b      	ldrb	r3, [r3, #1]
   17428:	2b00      	cmp	r3, #0
   1742a:	d03f      	beq.n	174ac <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   1742c:	68fb      	ldr	r3, [r7, #12]
   1742e:	0018      	movs	r0, r3
   17430:	4b27      	ldr	r3, [pc, #156]	; (174d0 <spi_select_slave+0xdc>)
   17432:	4798      	blx	r3
   17434:	0003      	movs	r3, r0
   17436:	001a      	movs	r2, r3
   17438:	2301      	movs	r3, #1
   1743a:	4053      	eors	r3, r2
   1743c:	b2db      	uxtb	r3, r3
   1743e:	2b00      	cmp	r3, #0
   17440:	d007      	beq.n	17452 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   17442:	68bb      	ldr	r3, [r7, #8]
   17444:	781b      	ldrb	r3, [r3, #0]
   17446:	2101      	movs	r1, #1
   17448:	0018      	movs	r0, r3
   1744a:	4b22      	ldr	r3, [pc, #136]	; (174d4 <spi_select_slave+0xe0>)
   1744c:	4798      	blx	r3
					return STATUS_BUSY;
   1744e:	2305      	movs	r3, #5
   17450:	e03a      	b.n	174c8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   17452:	68bb      	ldr	r3, [r7, #8]
   17454:	781b      	ldrb	r3, [r3, #0]
   17456:	2100      	movs	r1, #0
   17458:	0018      	movs	r0, r3
   1745a:	4b1e      	ldr	r3, [pc, #120]	; (174d4 <spi_select_slave+0xe0>)
   1745c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   1745e:	68bb      	ldr	r3, [r7, #8]
   17460:	789b      	ldrb	r3, [r3, #2]
   17462:	b29a      	uxth	r2, r3
   17464:	68fb      	ldr	r3, [r7, #12]
   17466:	0011      	movs	r1, r2
   17468:	0018      	movs	r0, r3
   1746a:	4b1b      	ldr	r3, [pc, #108]	; (174d8 <spi_select_slave+0xe4>)
   1746c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   1746e:	68fb      	ldr	r3, [r7, #12]
   17470:	79db      	ldrb	r3, [r3, #7]
   17472:	2201      	movs	r2, #1
   17474:	4053      	eors	r3, r2
   17476:	b2db      	uxtb	r3, r3
   17478:	2b00      	cmp	r3, #0
   1747a:	d024      	beq.n	174c6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   1747c:	46c0      	nop			; (mov r8, r8)
   1747e:	68fb      	ldr	r3, [r7, #12]
   17480:	0018      	movs	r0, r3
   17482:	4b16      	ldr	r3, [pc, #88]	; (174dc <spi_select_slave+0xe8>)
   17484:	4798      	blx	r3
   17486:	0003      	movs	r3, r0
   17488:	001a      	movs	r2, r3
   1748a:	2301      	movs	r3, #1
   1748c:	4053      	eors	r3, r2
   1748e:	b2db      	uxtb	r3, r3
   17490:	2b00      	cmp	r3, #0
   17492:	d1f4      	bne.n	1747e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   17494:	2316      	movs	r3, #22
   17496:	18fb      	adds	r3, r7, r3
   17498:	2200      	movs	r2, #0
   1749a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   1749c:	2316      	movs	r3, #22
   1749e:	18fa      	adds	r2, r7, r3
   174a0:	68fb      	ldr	r3, [r7, #12]
   174a2:	0011      	movs	r1, r2
   174a4:	0018      	movs	r0, r3
   174a6:	4b0e      	ldr	r3, [pc, #56]	; (174e0 <spi_select_slave+0xec>)
   174a8:	4798      	blx	r3
   174aa:	e00c      	b.n	174c6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   174ac:	68bb      	ldr	r3, [r7, #8]
   174ae:	781b      	ldrb	r3, [r3, #0]
   174b0:	2100      	movs	r1, #0
   174b2:	0018      	movs	r0, r3
   174b4:	4b07      	ldr	r3, [pc, #28]	; (174d4 <spi_select_slave+0xe0>)
   174b6:	4798      	blx	r3
   174b8:	e005      	b.n	174c6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   174ba:	68bb      	ldr	r3, [r7, #8]
   174bc:	781b      	ldrb	r3, [r3, #0]
   174be:	2101      	movs	r1, #1
   174c0:	0018      	movs	r0, r3
   174c2:	4b04      	ldr	r3, [pc, #16]	; (174d4 <spi_select_slave+0xe0>)
   174c4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   174c6:	2300      	movs	r3, #0
}
   174c8:	0018      	movs	r0, r3
   174ca:	46bd      	mov	sp, r7
   174cc:	b006      	add	sp, #24
   174ce:	bd80      	pop	{r7, pc}
   174d0:	00016d39 	.word	0x00016d39
   174d4:	00016b01 	.word	0x00016b01
   174d8:	00016d89 	.word	0x00016d89
   174dc:	00016d61 	.word	0x00016d61
   174e0:	00016dd1 	.word	0x00016dd1

000174e4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   174e4:	b580      	push	{r7, lr}
   174e6:	b086      	sub	sp, #24
   174e8:	af00      	add	r7, sp, #0
   174ea:	60f8      	str	r0, [r7, #12]
   174ec:	60b9      	str	r1, [r7, #8]
   174ee:	1dbb      	adds	r3, r7, #6
   174f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   174f2:	68fb      	ldr	r3, [r7, #12]
   174f4:	2238      	movs	r2, #56	; 0x38
   174f6:	5c9b      	ldrb	r3, [r3, r2]
   174f8:	b2db      	uxtb	r3, r3
   174fa:	2b05      	cmp	r3, #5
   174fc:	d101      	bne.n	17502 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   174fe:	2305      	movs	r3, #5
   17500:	e087      	b.n	17612 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   17502:	1dbb      	adds	r3, r7, #6
   17504:	881b      	ldrh	r3, [r3, #0]
   17506:	2b00      	cmp	r3, #0
   17508:	d101      	bne.n	1750e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   1750a:	2317      	movs	r3, #23
   1750c:	e081      	b.n	17612 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   1750e:	2316      	movs	r3, #22
   17510:	18fb      	adds	r3, r7, r3
   17512:	2200      	movs	r2, #0
   17514:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   17516:	2314      	movs	r3, #20
   17518:	18fb      	adds	r3, r7, r3
   1751a:	1dba      	adds	r2, r7, #6
   1751c:	8812      	ldrh	r2, [r2, #0]
   1751e:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   17520:	e05f      	b.n	175e2 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   17522:	46c0      	nop			; (mov r8, r8)
   17524:	68fb      	ldr	r3, [r7, #12]
   17526:	0018      	movs	r0, r3
   17528:	4b3c      	ldr	r3, [pc, #240]	; (1761c <spi_write_buffer_wait+0x138>)
   1752a:	4798      	blx	r3
   1752c:	0003      	movs	r3, r0
   1752e:	001a      	movs	r2, r3
   17530:	2301      	movs	r3, #1
   17532:	4053      	eors	r3, r2
   17534:	b2db      	uxtb	r3, r3
   17536:	2b00      	cmp	r3, #0
   17538:	d1f4      	bne.n	17524 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   1753a:	2316      	movs	r3, #22
   1753c:	18fb      	adds	r3, r7, r3
   1753e:	881b      	ldrh	r3, [r3, #0]
   17540:	2216      	movs	r2, #22
   17542:	18ba      	adds	r2, r7, r2
   17544:	1c59      	adds	r1, r3, #1
   17546:	8011      	strh	r1, [r2, #0]
   17548:	001a      	movs	r2, r3
   1754a:	68bb      	ldr	r3, [r7, #8]
   1754c:	189b      	adds	r3, r3, r2
   1754e:	781a      	ldrb	r2, [r3, #0]
   17550:	2312      	movs	r3, #18
   17552:	18fb      	adds	r3, r7, r3
   17554:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   17556:	68fb      	ldr	r3, [r7, #12]
   17558:	799b      	ldrb	r3, [r3, #6]
   1755a:	2b01      	cmp	r3, #1
   1755c:	d115      	bne.n	1758a <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   1755e:	2316      	movs	r3, #22
   17560:	18fb      	adds	r3, r7, r3
   17562:	881b      	ldrh	r3, [r3, #0]
   17564:	2216      	movs	r2, #22
   17566:	18ba      	adds	r2, r7, r2
   17568:	1c59      	adds	r1, r3, #1
   1756a:	8011      	strh	r1, [r2, #0]
   1756c:	001a      	movs	r2, r3
   1756e:	68bb      	ldr	r3, [r7, #8]
   17570:	189b      	adds	r3, r3, r2
   17572:	781b      	ldrb	r3, [r3, #0]
   17574:	021b      	lsls	r3, r3, #8
   17576:	b21a      	sxth	r2, r3
   17578:	2312      	movs	r3, #18
   1757a:	18fb      	adds	r3, r7, r3
   1757c:	2100      	movs	r1, #0
   1757e:	5e5b      	ldrsh	r3, [r3, r1]
   17580:	4313      	orrs	r3, r2
   17582:	b21a      	sxth	r2, r3
   17584:	2312      	movs	r3, #18
   17586:	18fb      	adds	r3, r7, r3
   17588:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   1758a:	2312      	movs	r3, #18
   1758c:	18fb      	adds	r3, r7, r3
   1758e:	881a      	ldrh	r2, [r3, #0]
   17590:	68fb      	ldr	r3, [r7, #12]
   17592:	0011      	movs	r1, r2
   17594:	0018      	movs	r0, r3
   17596:	4b22      	ldr	r3, [pc, #136]	; (17620 <spi_write_buffer_wait+0x13c>)
   17598:	4798      	blx	r3

		if (module->receiver_enabled) {
   1759a:	68fb      	ldr	r3, [r7, #12]
   1759c:	79db      	ldrb	r3, [r3, #7]
   1759e:	2214      	movs	r2, #20
   175a0:	18ba      	adds	r2, r7, r2
   175a2:	2114      	movs	r1, #20
   175a4:	1879      	adds	r1, r7, r1
   175a6:	8809      	ldrh	r1, [r1, #0]
   175a8:	8011      	strh	r1, [r2, #0]
   175aa:	2b00      	cmp	r3, #0
   175ac:	d019      	beq.n	175e2 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   175ae:	46c0      	nop			; (mov r8, r8)
   175b0:	68fb      	ldr	r3, [r7, #12]
   175b2:	0018      	movs	r0, r3
   175b4:	4b1b      	ldr	r3, [pc, #108]	; (17624 <spi_write_buffer_wait+0x140>)
   175b6:	4798      	blx	r3
   175b8:	0003      	movs	r3, r0
   175ba:	001a      	movs	r2, r3
   175bc:	2301      	movs	r3, #1
   175be:	4053      	eors	r3, r2
   175c0:	b2db      	uxtb	r3, r3
   175c2:	2b00      	cmp	r3, #0
   175c4:	d1f4      	bne.n	175b0 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   175c6:	2310      	movs	r3, #16
   175c8:	18fa      	adds	r2, r7, r3
   175ca:	68fb      	ldr	r3, [r7, #12]
   175cc:	0011      	movs	r1, r2
   175ce:	0018      	movs	r0, r3
   175d0:	4b15      	ldr	r3, [pc, #84]	; (17628 <spi_write_buffer_wait+0x144>)
   175d2:	4798      	blx	r3
			flush_length--;
   175d4:	2314      	movs	r3, #20
   175d6:	18fb      	adds	r3, r7, r3
   175d8:	881a      	ldrh	r2, [r3, #0]
   175da:	2314      	movs	r3, #20
   175dc:	18fb      	adds	r3, r7, r3
   175de:	3a01      	subs	r2, #1
   175e0:	801a      	strh	r2, [r3, #0]
	while (length--) {
   175e2:	1dbb      	adds	r3, r7, #6
   175e4:	881b      	ldrh	r3, [r3, #0]
   175e6:	1dba      	adds	r2, r7, #6
   175e8:	1e59      	subs	r1, r3, #1
   175ea:	8011      	strh	r1, [r2, #0]
   175ec:	2b00      	cmp	r3, #0
   175ee:	d198      	bne.n	17522 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   175f0:	68fb      	ldr	r3, [r7, #12]
   175f2:	795b      	ldrb	r3, [r3, #5]
   175f4:	2b01      	cmp	r3, #1
   175f6:	d10b      	bne.n	17610 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   175f8:	46c0      	nop			; (mov r8, r8)
   175fa:	68fb      	ldr	r3, [r7, #12]
   175fc:	0018      	movs	r0, r3
   175fe:	4b0b      	ldr	r3, [pc, #44]	; (1762c <spi_write_buffer_wait+0x148>)
   17600:	4798      	blx	r3
   17602:	0003      	movs	r3, r0
   17604:	001a      	movs	r2, r3
   17606:	2301      	movs	r3, #1
   17608:	4053      	eors	r3, r2
   1760a:	b2db      	uxtb	r3, r3
   1760c:	2b00      	cmp	r3, #0
   1760e:	d1f4      	bne.n	175fa <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   17610:	2300      	movs	r3, #0
}
   17612:	0018      	movs	r0, r3
   17614:	46bd      	mov	sp, r7
   17616:	b006      	add	sp, #24
   17618:	bd80      	pop	{r7, pc}
   1761a:	46c0      	nop			; (mov r8, r8)
   1761c:	00016d39 	.word	0x00016d39
   17620:	00016d89 	.word	0x00016d89
   17624:	00016d61 	.word	0x00016d61
   17628:	00016dd1 	.word	0x00016dd1
   1762c:	00016d11 	.word	0x00016d11

00017630 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   17630:	b580      	push	{r7, lr}
   17632:	b084      	sub	sp, #16
   17634:	af00      	add	r7, sp, #0
   17636:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   17638:	687b      	ldr	r3, [r7, #4]
   1763a:	681b      	ldr	r3, [r3, #0]
   1763c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1763e:	687b      	ldr	r3, [r7, #4]
   17640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17642:	781b      	ldrb	r3, [r3, #0]
   17644:	b2da      	uxtb	r2, r3
   17646:	230e      	movs	r3, #14
   17648:	18fb      	adds	r3, r7, r3
   1764a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   1764c:	687b      	ldr	r3, [r7, #4]
   1764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17650:	1c5a      	adds	r2, r3, #1
   17652:	687b      	ldr	r3, [r7, #4]
   17654:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   17656:	687b      	ldr	r3, [r7, #4]
   17658:	799b      	ldrb	r3, [r3, #6]
   1765a:	2b01      	cmp	r3, #1
   1765c:	d113      	bne.n	17686 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1765e:	687b      	ldr	r3, [r7, #4]
   17660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17662:	781b      	ldrb	r3, [r3, #0]
   17664:	b2db      	uxtb	r3, r3
   17666:	021b      	lsls	r3, r3, #8
   17668:	b21a      	sxth	r2, r3
   1766a:	230e      	movs	r3, #14
   1766c:	18fb      	adds	r3, r7, r3
   1766e:	2100      	movs	r1, #0
   17670:	5e5b      	ldrsh	r3, [r3, r1]
   17672:	4313      	orrs	r3, r2
   17674:	b21a      	sxth	r2, r3
   17676:	230e      	movs	r3, #14
   17678:	18fb      	adds	r3, r7, r3
   1767a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   1767c:	687b      	ldr	r3, [r7, #4]
   1767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17680:	1c5a      	adds	r2, r3, #1
   17682:	687b      	ldr	r3, [r7, #4]
   17684:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   17686:	230e      	movs	r3, #14
   17688:	18fb      	adds	r3, r7, r3
   1768a:	881b      	ldrh	r3, [r3, #0]
   1768c:	05db      	lsls	r3, r3, #23
   1768e:	0dda      	lsrs	r2, r3, #23
   17690:	68bb      	ldr	r3, [r7, #8]
   17692:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   17694:	687b      	ldr	r3, [r7, #4]
   17696:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   17698:	b29b      	uxth	r3, r3
   1769a:	3b01      	subs	r3, #1
   1769c:	b29a      	uxth	r2, r3
   1769e:	687b      	ldr	r3, [r7, #4]
   176a0:	869a      	strh	r2, [r3, #52]	; 0x34
}
   176a2:	46c0      	nop			; (mov r8, r8)
   176a4:	46bd      	mov	sp, r7
   176a6:	b004      	add	sp, #16
   176a8:	bd80      	pop	{r7, pc}
	...

000176ac <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   176ac:	b580      	push	{r7, lr}
   176ae:	b084      	sub	sp, #16
   176b0:	af00      	add	r7, sp, #0
   176b2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   176b4:	687b      	ldr	r3, [r7, #4]
   176b6:	681b      	ldr	r3, [r3, #0]
   176b8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   176ba:	4b08      	ldr	r3, [pc, #32]	; (176dc <_spi_write_dummy+0x30>)
   176bc:	881b      	ldrh	r3, [r3, #0]
   176be:	001a      	movs	r2, r3
   176c0:	68fb      	ldr	r3, [r7, #12]
   176c2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   176c4:	687b      	ldr	r3, [r7, #4]
   176c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   176c8:	b29b      	uxth	r3, r3
   176ca:	3b01      	subs	r3, #1
   176cc:	b29a      	uxth	r2, r3
   176ce:	687b      	ldr	r3, [r7, #4]
   176d0:	865a      	strh	r2, [r3, #50]	; 0x32
}
   176d2:	46c0      	nop			; (mov r8, r8)
   176d4:	46bd      	mov	sp, r7
   176d6:	b004      	add	sp, #16
   176d8:	bd80      	pop	{r7, pc}
   176da:	46c0      	nop			; (mov r8, r8)
   176dc:	200058a0 	.word	0x200058a0

000176e0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   176e0:	b580      	push	{r7, lr}
   176e2:	b084      	sub	sp, #16
   176e4:	af00      	add	r7, sp, #0
   176e6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   176e8:	687b      	ldr	r3, [r7, #4]
   176ea:	681b      	ldr	r3, [r3, #0]
   176ec:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   176ee:	230a      	movs	r3, #10
   176f0:	18fb      	adds	r3, r7, r3
   176f2:	2200      	movs	r2, #0
   176f4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   176f6:	68fb      	ldr	r3, [r7, #12]
   176f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   176fa:	230a      	movs	r3, #10
   176fc:	18fb      	adds	r3, r7, r3
   176fe:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   17700:	687b      	ldr	r3, [r7, #4]
   17702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   17704:	b29b      	uxth	r3, r3
   17706:	3b01      	subs	r3, #1
   17708:	b29a      	uxth	r2, r3
   1770a:	687b      	ldr	r3, [r7, #4]
   1770c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   1770e:	46c0      	nop			; (mov r8, r8)
   17710:	46bd      	mov	sp, r7
   17712:	b004      	add	sp, #16
   17714:	bd80      	pop	{r7, pc}

00017716 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   17716:	b580      	push	{r7, lr}
   17718:	b084      	sub	sp, #16
   1771a:	af00      	add	r7, sp, #0
   1771c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1771e:	687b      	ldr	r3, [r7, #4]
   17720:	681b      	ldr	r3, [r3, #0]
   17722:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   17724:	68fb      	ldr	r3, [r7, #12]
   17726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17728:	b29a      	uxth	r2, r3
   1772a:	230a      	movs	r3, #10
   1772c:	18fb      	adds	r3, r7, r3
   1772e:	05d2      	lsls	r2, r2, #23
   17730:	0dd2      	lsrs	r2, r2, #23
   17732:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   17734:	687b      	ldr	r3, [r7, #4]
   17736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17738:	220a      	movs	r2, #10
   1773a:	18ba      	adds	r2, r7, r2
   1773c:	8812      	ldrh	r2, [r2, #0]
   1773e:	b2d2      	uxtb	r2, r2
   17740:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   17742:	687b      	ldr	r3, [r7, #4]
   17744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17746:	1c5a      	adds	r2, r3, #1
   17748:	687b      	ldr	r3, [r7, #4]
   1774a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1774c:	687b      	ldr	r3, [r7, #4]
   1774e:	799b      	ldrb	r3, [r3, #6]
   17750:	2b01      	cmp	r3, #1
   17752:	d10d      	bne.n	17770 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   17754:	687b      	ldr	r3, [r7, #4]
   17756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17758:	220a      	movs	r2, #10
   1775a:	18ba      	adds	r2, r7, r2
   1775c:	8812      	ldrh	r2, [r2, #0]
   1775e:	0a12      	lsrs	r2, r2, #8
   17760:	b292      	uxth	r2, r2
   17762:	b2d2      	uxtb	r2, r2
   17764:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   17766:	687b      	ldr	r3, [r7, #4]
   17768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1776a:	1c5a      	adds	r2, r3, #1
   1776c:	687b      	ldr	r3, [r7, #4]
   1776e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   17770:	687b      	ldr	r3, [r7, #4]
   17772:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17774:	b29b      	uxth	r3, r3
   17776:	3b01      	subs	r3, #1
   17778:	b29a      	uxth	r2, r3
   1777a:	687b      	ldr	r3, [r7, #4]
   1777c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1777e:	46c0      	nop			; (mov r8, r8)
   17780:	46bd      	mov	sp, r7
   17782:	b004      	add	sp, #16
   17784:	bd80      	pop	{r7, pc}
	...

00017788 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   17788:	b580      	push	{r7, lr}
   1778a:	b086      	sub	sp, #24
   1778c:	af00      	add	r7, sp, #0
   1778e:	0002      	movs	r2, r0
   17790:	1dfb      	adds	r3, r7, #7
   17792:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   17794:	1dfb      	adds	r3, r7, #7
   17796:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   17798:	4b96      	ldr	r3, [pc, #600]	; (179f4 <_spi_interrupt_handler+0x26c>)
   1779a:	0092      	lsls	r2, r2, #2
   1779c:	58d3      	ldr	r3, [r2, r3]
   1779e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   177a0:	697b      	ldr	r3, [r7, #20]
   177a2:	681b      	ldr	r3, [r3, #0]
   177a4:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   177a6:	697b      	ldr	r3, [r7, #20]
   177a8:	2237      	movs	r2, #55	; 0x37
   177aa:	5c9a      	ldrb	r2, [r3, r2]
   177ac:	697b      	ldr	r3, [r7, #20]
   177ae:	2136      	movs	r1, #54	; 0x36
   177b0:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   177b2:	230f      	movs	r3, #15
   177b4:	18fb      	adds	r3, r7, r3
   177b6:	400a      	ands	r2, r1
   177b8:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   177ba:	693b      	ldr	r3, [r7, #16]
   177bc:	7e1b      	ldrb	r3, [r3, #24]
   177be:	b2da      	uxtb	r2, r3
   177c0:	230c      	movs	r3, #12
   177c2:	18fb      	adds	r3, r7, r3
   177c4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   177c6:	693b      	ldr	r3, [r7, #16]
   177c8:	7d9b      	ldrb	r3, [r3, #22]
   177ca:	b2db      	uxtb	r3, r3
   177cc:	b29a      	uxth	r2, r3
   177ce:	230c      	movs	r3, #12
   177d0:	18fb      	adds	r3, r7, r3
   177d2:	210c      	movs	r1, #12
   177d4:	1879      	adds	r1, r7, r1
   177d6:	8809      	ldrh	r1, [r1, #0]
   177d8:	400a      	ands	r2, r1
   177da:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   177dc:	230c      	movs	r3, #12
   177de:	18fb      	adds	r3, r7, r3
   177e0:	881b      	ldrh	r3, [r3, #0]
   177e2:	2201      	movs	r2, #1
   177e4:	4013      	ands	r3, r2
   177e6:	d038      	beq.n	1785a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   177e8:	697b      	ldr	r3, [r7, #20]
   177ea:	795b      	ldrb	r3, [r3, #5]
   177ec:	2b01      	cmp	r3, #1
   177ee:	d110      	bne.n	17812 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   177f0:	697b      	ldr	r3, [r7, #20]
   177f2:	7a5b      	ldrb	r3, [r3, #9]
   177f4:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   177f6:	2b00      	cmp	r3, #0
   177f8:	d10b      	bne.n	17812 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   177fa:	697b      	ldr	r3, [r7, #20]
   177fc:	0018      	movs	r0, r3
   177fe:	4b7e      	ldr	r3, [pc, #504]	; (179f8 <_spi_interrupt_handler+0x270>)
   17800:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   17802:	697b      	ldr	r3, [r7, #20]
   17804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   17806:	b29b      	uxth	r3, r3
   17808:	2b00      	cmp	r3, #0
   1780a:	d102      	bne.n	17812 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1780c:	693b      	ldr	r3, [r7, #16]
   1780e:	2201      	movs	r2, #1
   17810:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   17812:	697b      	ldr	r3, [r7, #20]
   17814:	795b      	ldrb	r3, [r3, #5]
		if (0
   17816:	2b01      	cmp	r3, #1
   17818:	d11f      	bne.n	1785a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   1781a:	697b      	ldr	r3, [r7, #20]
   1781c:	7a5b      	ldrb	r3, [r3, #9]
   1781e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   17820:	2b00      	cmp	r3, #0
   17822:	d01a      	beq.n	1785a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   17824:	697b      	ldr	r3, [r7, #20]
   17826:	0018      	movs	r0, r3
   17828:	4b74      	ldr	r3, [pc, #464]	; (179fc <_spi_interrupt_handler+0x274>)
   1782a:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   1782c:	697b      	ldr	r3, [r7, #20]
   1782e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   17830:	b29b      	uxth	r3, r3
   17832:	2b00      	cmp	r3, #0
   17834:	d111      	bne.n	1785a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   17836:	693b      	ldr	r3, [r7, #16]
   17838:	2201      	movs	r2, #1
   1783a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   1783c:	697b      	ldr	r3, [r7, #20]
   1783e:	7a5b      	ldrb	r3, [r3, #9]
   17840:	b2db      	uxtb	r3, r3
   17842:	2b01      	cmp	r3, #1
   17844:	d109      	bne.n	1785a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   17846:	697b      	ldr	r3, [r7, #20]
   17848:	79db      	ldrb	r3, [r3, #7]
   1784a:	2201      	movs	r2, #1
   1784c:	4053      	eors	r3, r2
   1784e:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   17850:	2b00      	cmp	r3, #0
   17852:	d002      	beq.n	1785a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   17854:	693b      	ldr	r3, [r7, #16]
   17856:	2202      	movs	r2, #2
   17858:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   1785a:	230c      	movs	r3, #12
   1785c:	18fb      	adds	r3, r7, r3
   1785e:	881b      	ldrh	r3, [r3, #0]
   17860:	2204      	movs	r2, #4
   17862:	4013      	ands	r3, r2
   17864:	d100      	bne.n	17868 <_spi_interrupt_handler+0xe0>
   17866:	e07e      	b.n	17966 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   17868:	693b      	ldr	r3, [r7, #16]
   1786a:	8b5b      	ldrh	r3, [r3, #26]
   1786c:	b29b      	uxth	r3, r3
   1786e:	001a      	movs	r2, r3
   17870:	2304      	movs	r3, #4
   17872:	4013      	ands	r3, r2
   17874:	d022      	beq.n	178bc <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   17876:	697b      	ldr	r3, [r7, #20]
   17878:	7a5b      	ldrb	r3, [r3, #9]
   1787a:	b2db      	uxtb	r3, r3
   1787c:	2b01      	cmp	r3, #1
   1787e:	d014      	beq.n	178aa <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   17880:	697b      	ldr	r3, [r7, #20]
   17882:	2238      	movs	r2, #56	; 0x38
   17884:	211e      	movs	r1, #30
   17886:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   17888:	697b      	ldr	r3, [r7, #20]
   1788a:	2203      	movs	r2, #3
   1788c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   1788e:	693b      	ldr	r3, [r7, #16]
   17890:	2205      	movs	r2, #5
   17892:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   17894:	230f      	movs	r3, #15
   17896:	18fb      	adds	r3, r7, r3
   17898:	781b      	ldrb	r3, [r3, #0]
   1789a:	2208      	movs	r2, #8
   1789c:	4013      	ands	r3, r2
   1789e:	d004      	beq.n	178aa <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   178a0:	697b      	ldr	r3, [r7, #20]
   178a2:	699b      	ldr	r3, [r3, #24]
   178a4:	697a      	ldr	r2, [r7, #20]
   178a6:	0010      	movs	r0, r2
   178a8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   178aa:	693b      	ldr	r3, [r7, #16]
   178ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   178ae:	230a      	movs	r3, #10
   178b0:	18fb      	adds	r3, r7, r3
   178b2:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   178b4:	693b      	ldr	r3, [r7, #16]
   178b6:	2204      	movs	r2, #4
   178b8:	835a      	strh	r2, [r3, #26]
   178ba:	e054      	b.n	17966 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   178bc:	697b      	ldr	r3, [r7, #20]
   178be:	7a5b      	ldrb	r3, [r3, #9]
   178c0:	b2db      	uxtb	r3, r3
   178c2:	2b01      	cmp	r3, #1
   178c4:	d11e      	bne.n	17904 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   178c6:	697b      	ldr	r3, [r7, #20]
   178c8:	0018      	movs	r0, r3
   178ca:	4b4d      	ldr	r3, [pc, #308]	; (17a00 <_spi_interrupt_handler+0x278>)
   178cc:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   178ce:	697b      	ldr	r3, [r7, #20]
   178d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   178d2:	b29b      	uxth	r3, r3
   178d4:	2b00      	cmp	r3, #0
   178d6:	d146      	bne.n	17966 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   178d8:	693b      	ldr	r3, [r7, #16]
   178da:	2204      	movs	r2, #4
   178dc:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   178de:	697b      	ldr	r3, [r7, #20]
   178e0:	2238      	movs	r2, #56	; 0x38
   178e2:	2100      	movs	r1, #0
   178e4:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   178e6:	697b      	ldr	r3, [r7, #20]
   178e8:	2203      	movs	r2, #3
   178ea:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   178ec:	230f      	movs	r3, #15
   178ee:	18fb      	adds	r3, r7, r3
   178f0:	781b      	ldrb	r3, [r3, #0]
   178f2:	2201      	movs	r2, #1
   178f4:	4013      	ands	r3, r2
   178f6:	d036      	beq.n	17966 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   178f8:	697b      	ldr	r3, [r7, #20]
   178fa:	68db      	ldr	r3, [r3, #12]
   178fc:	697a      	ldr	r2, [r7, #20]
   178fe:	0010      	movs	r0, r2
   17900:	4798      	blx	r3
   17902:	e030      	b.n	17966 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   17904:	697b      	ldr	r3, [r7, #20]
   17906:	0018      	movs	r0, r3
   17908:	4b3e      	ldr	r3, [pc, #248]	; (17a04 <_spi_interrupt_handler+0x27c>)
   1790a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   1790c:	697b      	ldr	r3, [r7, #20]
   1790e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17910:	b29b      	uxth	r3, r3
   17912:	2b00      	cmp	r3, #0
   17914:	d127      	bne.n	17966 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   17916:	697b      	ldr	r3, [r7, #20]
   17918:	2238      	movs	r2, #56	; 0x38
   1791a:	2100      	movs	r1, #0
   1791c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1791e:	693b      	ldr	r3, [r7, #16]
   17920:	2204      	movs	r2, #4
   17922:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   17924:	697b      	ldr	r3, [r7, #20]
   17926:	7a5b      	ldrb	r3, [r3, #9]
   17928:	b2db      	uxtb	r3, r3
   1792a:	2b02      	cmp	r3, #2
   1792c:	d10b      	bne.n	17946 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   1792e:	230f      	movs	r3, #15
   17930:	18fb      	adds	r3, r7, r3
   17932:	781b      	ldrb	r3, [r3, #0]
   17934:	2204      	movs	r2, #4
   17936:	4013      	ands	r3, r2
   17938:	d015      	beq.n	17966 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   1793a:	697b      	ldr	r3, [r7, #20]
   1793c:	695b      	ldr	r3, [r3, #20]
   1793e:	697a      	ldr	r2, [r7, #20]
   17940:	0010      	movs	r0, r2
   17942:	4798      	blx	r3
   17944:	e00f      	b.n	17966 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   17946:	697b      	ldr	r3, [r7, #20]
   17948:	7a5b      	ldrb	r3, [r3, #9]
   1794a:	b2db      	uxtb	r3, r3
   1794c:	2b00      	cmp	r3, #0
   1794e:	d10a      	bne.n	17966 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   17950:	230f      	movs	r3, #15
   17952:	18fb      	adds	r3, r7, r3
   17954:	781b      	ldrb	r3, [r3, #0]
   17956:	2202      	movs	r2, #2
   17958:	4013      	ands	r3, r2
   1795a:	d004      	beq.n	17966 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   1795c:	697b      	ldr	r3, [r7, #20]
   1795e:	691b      	ldr	r3, [r3, #16]
   17960:	697a      	ldr	r2, [r7, #20]
   17962:	0010      	movs	r0, r2
   17964:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   17966:	230c      	movs	r3, #12
   17968:	18fb      	adds	r3, r7, r3
   1796a:	881b      	ldrh	r3, [r3, #0]
   1796c:	2202      	movs	r2, #2
   1796e:	4013      	ands	r3, r2
   17970:	d024      	beq.n	179bc <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   17972:	697b      	ldr	r3, [r7, #20]
   17974:	795b      	ldrb	r3, [r3, #5]
   17976:	2b01      	cmp	r3, #1
   17978:	d120      	bne.n	179bc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1797a:	697b      	ldr	r3, [r7, #20]
   1797c:	7a5b      	ldrb	r3, [r3, #9]
   1797e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   17980:	2b01      	cmp	r3, #1
   17982:	d11b      	bne.n	179bc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   17984:	697b      	ldr	r3, [r7, #20]
   17986:	79db      	ldrb	r3, [r3, #7]
   17988:	2201      	movs	r2, #1
   1798a:	4053      	eors	r3, r2
   1798c:	b2db      	uxtb	r3, r3
   1798e:	2b00      	cmp	r3, #0
   17990:	d014      	beq.n	179bc <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   17992:	693b      	ldr	r3, [r7, #16]
   17994:	2202      	movs	r2, #2
   17996:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   17998:	697b      	ldr	r3, [r7, #20]
   1799a:	2203      	movs	r2, #3
   1799c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   1799e:	697b      	ldr	r3, [r7, #20]
   179a0:	2238      	movs	r2, #56	; 0x38
   179a2:	2100      	movs	r1, #0
   179a4:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   179a6:	230f      	movs	r3, #15
   179a8:	18fb      	adds	r3, r7, r3
   179aa:	781b      	ldrb	r3, [r3, #0]
   179ac:	2201      	movs	r2, #1
   179ae:	4013      	ands	r3, r2
   179b0:	d004      	beq.n	179bc <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   179b2:	697b      	ldr	r3, [r7, #20]
   179b4:	68db      	ldr	r3, [r3, #12]
   179b6:	697a      	ldr	r2, [r7, #20]
   179b8:	0010      	movs	r0, r2
   179ba:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   179bc:	230c      	movs	r3, #12
   179be:	18fb      	adds	r3, r7, r3
   179c0:	881b      	ldrh	r3, [r3, #0]
   179c2:	2280      	movs	r2, #128	; 0x80
   179c4:	4013      	ands	r3, r2
   179c6:	d010      	beq.n	179ea <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   179c8:	693b      	ldr	r3, [r7, #16]
   179ca:	2280      	movs	r2, #128	; 0x80
   179cc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   179ce:	693b      	ldr	r3, [r7, #16]
   179d0:	2280      	movs	r2, #128	; 0x80
   179d2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   179d4:	230f      	movs	r3, #15
   179d6:	18fb      	adds	r3, r7, r3
   179d8:	781b      	ldrb	r3, [r3, #0]
   179da:	2240      	movs	r2, #64	; 0x40
   179dc:	4013      	ands	r3, r2
   179de:	d004      	beq.n	179ea <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   179e0:	697b      	ldr	r3, [r7, #20]
   179e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   179e4:	697a      	ldr	r2, [r7, #20]
   179e6:	0010      	movs	r0, r2
   179e8:	4798      	blx	r3
		}
	}
#  endif
}
   179ea:	46c0      	nop			; (mov r8, r8)
   179ec:	46bd      	mov	sp, r7
   179ee:	b006      	add	sp, #24
   179f0:	bd80      	pop	{r7, pc}
   179f2:	46c0      	nop			; (mov r8, r8)
   179f4:	20005888 	.word	0x20005888
   179f8:	000176ad 	.word	0x000176ad
   179fc:	00017631 	.word	0x00017631
   17a00:	000176e1 	.word	0x000176e1
   17a04:	00017717 	.word	0x00017717

00017a08 <system_gclk_chan_get_config_defaults>:
{
   17a08:	b580      	push	{r7, lr}
   17a0a:	b082      	sub	sp, #8
   17a0c:	af00      	add	r7, sp, #0
   17a0e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   17a10:	687b      	ldr	r3, [r7, #4]
   17a12:	2200      	movs	r2, #0
   17a14:	701a      	strb	r2, [r3, #0]
}
   17a16:	46c0      	nop			; (mov r8, r8)
   17a18:	46bd      	mov	sp, r7
   17a1a:	b002      	add	sp, #8
   17a1c:	bd80      	pop	{r7, pc}
	...

00017a20 <system_apb_clock_set_mask>:
{
   17a20:	b580      	push	{r7, lr}
   17a22:	b082      	sub	sp, #8
   17a24:	af00      	add	r7, sp, #0
   17a26:	0002      	movs	r2, r0
   17a28:	6039      	str	r1, [r7, #0]
   17a2a:	1dfb      	adds	r3, r7, #7
   17a2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17a2e:	1dfb      	adds	r3, r7, #7
   17a30:	781b      	ldrb	r3, [r3, #0]
   17a32:	2b01      	cmp	r3, #1
   17a34:	d00a      	beq.n	17a4c <system_apb_clock_set_mask+0x2c>
   17a36:	2b02      	cmp	r3, #2
   17a38:	d00f      	beq.n	17a5a <system_apb_clock_set_mask+0x3a>
   17a3a:	2b00      	cmp	r3, #0
   17a3c:	d114      	bne.n	17a68 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17a3e:	4b0e      	ldr	r3, [pc, #56]	; (17a78 <system_apb_clock_set_mask+0x58>)
   17a40:	4a0d      	ldr	r2, [pc, #52]	; (17a78 <system_apb_clock_set_mask+0x58>)
   17a42:	6991      	ldr	r1, [r2, #24]
   17a44:	683a      	ldr	r2, [r7, #0]
   17a46:	430a      	orrs	r2, r1
   17a48:	619a      	str	r2, [r3, #24]
			break;
   17a4a:	e00f      	b.n	17a6c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17a4c:	4b0a      	ldr	r3, [pc, #40]	; (17a78 <system_apb_clock_set_mask+0x58>)
   17a4e:	4a0a      	ldr	r2, [pc, #40]	; (17a78 <system_apb_clock_set_mask+0x58>)
   17a50:	69d1      	ldr	r1, [r2, #28]
   17a52:	683a      	ldr	r2, [r7, #0]
   17a54:	430a      	orrs	r2, r1
   17a56:	61da      	str	r2, [r3, #28]
			break;
   17a58:	e008      	b.n	17a6c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17a5a:	4b07      	ldr	r3, [pc, #28]	; (17a78 <system_apb_clock_set_mask+0x58>)
   17a5c:	4a06      	ldr	r2, [pc, #24]	; (17a78 <system_apb_clock_set_mask+0x58>)
   17a5e:	6a11      	ldr	r1, [r2, #32]
   17a60:	683a      	ldr	r2, [r7, #0]
   17a62:	430a      	orrs	r2, r1
   17a64:	621a      	str	r2, [r3, #32]
			break;
   17a66:	e001      	b.n	17a6c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17a68:	2317      	movs	r3, #23
   17a6a:	e000      	b.n	17a6e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   17a6c:	2300      	movs	r3, #0
}
   17a6e:	0018      	movs	r0, r3
   17a70:	46bd      	mov	sp, r7
   17a72:	b002      	add	sp, #8
   17a74:	bd80      	pop	{r7, pc}
   17a76:	46c0      	nop			; (mov r8, r8)
   17a78:	40000400 	.word	0x40000400

00017a7c <system_pinmux_get_config_defaults>:
{
   17a7c:	b580      	push	{r7, lr}
   17a7e:	b082      	sub	sp, #8
   17a80:	af00      	add	r7, sp, #0
   17a82:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17a84:	687b      	ldr	r3, [r7, #4]
   17a86:	2280      	movs	r2, #128	; 0x80
   17a88:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17a8a:	687b      	ldr	r3, [r7, #4]
   17a8c:	2200      	movs	r2, #0
   17a8e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17a90:	687b      	ldr	r3, [r7, #4]
   17a92:	2201      	movs	r2, #1
   17a94:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17a96:	687b      	ldr	r3, [r7, #4]
   17a98:	2200      	movs	r2, #0
   17a9a:	70da      	strb	r2, [r3, #3]
}
   17a9c:	46c0      	nop			; (mov r8, r8)
   17a9e:	46bd      	mov	sp, r7
   17aa0:	b002      	add	sp, #8
   17aa2:	bd80      	pop	{r7, pc}

00017aa4 <system_is_debugger_present>:
{
   17aa4:	b580      	push	{r7, lr}
   17aa6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17aa8:	4b05      	ldr	r3, [pc, #20]	; (17ac0 <system_is_debugger_present+0x1c>)
   17aaa:	789b      	ldrb	r3, [r3, #2]
   17aac:	b2db      	uxtb	r3, r3
   17aae:	001a      	movs	r2, r3
   17ab0:	2302      	movs	r3, #2
   17ab2:	4013      	ands	r3, r2
   17ab4:	1e5a      	subs	r2, r3, #1
   17ab6:	4193      	sbcs	r3, r2
   17ab8:	b2db      	uxtb	r3, r3
}
   17aba:	0018      	movs	r0, r3
   17abc:	46bd      	mov	sp, r7
   17abe:	bd80      	pop	{r7, pc}
   17ac0:	41002000 	.word	0x41002000

00017ac4 <usart_is_syncing>:
{
   17ac4:	b580      	push	{r7, lr}
   17ac6:	b084      	sub	sp, #16
   17ac8:	af00      	add	r7, sp, #0
   17aca:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   17acc:	687b      	ldr	r3, [r7, #4]
   17ace:	681b      	ldr	r3, [r3, #0]
   17ad0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   17ad2:	68fb      	ldr	r3, [r7, #12]
   17ad4:	69db      	ldr	r3, [r3, #28]
   17ad6:	1e5a      	subs	r2, r3, #1
   17ad8:	4193      	sbcs	r3, r2
   17ada:	b2db      	uxtb	r3, r3
}
   17adc:	0018      	movs	r0, r3
   17ade:	46bd      	mov	sp, r7
   17ae0:	b004      	add	sp, #16
   17ae2:	bd80      	pop	{r7, pc}

00017ae4 <_usart_wait_for_sync>:
{
   17ae4:	b580      	push	{r7, lr}
   17ae6:	b082      	sub	sp, #8
   17ae8:	af00      	add	r7, sp, #0
   17aea:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   17aec:	46c0      	nop			; (mov r8, r8)
   17aee:	687b      	ldr	r3, [r7, #4]
   17af0:	0018      	movs	r0, r3
   17af2:	4b04      	ldr	r3, [pc, #16]	; (17b04 <_usart_wait_for_sync+0x20>)
   17af4:	4798      	blx	r3
   17af6:	1e03      	subs	r3, r0, #0
   17af8:	d1f9      	bne.n	17aee <_usart_wait_for_sync+0xa>
}
   17afa:	46c0      	nop			; (mov r8, r8)
   17afc:	46bd      	mov	sp, r7
   17afe:	b002      	add	sp, #8
   17b00:	bd80      	pop	{r7, pc}
   17b02:	46c0      	nop			; (mov r8, r8)
   17b04:	00017ac5 	.word	0x00017ac5

00017b08 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   17b08:	b5b0      	push	{r4, r5, r7, lr}
   17b0a:	b08c      	sub	sp, #48	; 0x30
   17b0c:	af02      	add	r7, sp, #8
   17b0e:	6078      	str	r0, [r7, #4]
   17b10:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   17b12:	687b      	ldr	r3, [r7, #4]
   17b14:	681b      	ldr	r3, [r3, #0]
   17b16:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17b18:	687b      	ldr	r3, [r7, #4]
   17b1a:	681b      	ldr	r3, [r3, #0]
   17b1c:	0018      	movs	r0, r3
   17b1e:	4bab      	ldr	r3, [pc, #684]	; (17dcc <_usart_set_config+0x2c4>)
   17b20:	4798      	blx	r3
   17b22:	0003      	movs	r3, r0
   17b24:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17b26:	697b      	ldr	r3, [r7, #20]
   17b28:	3314      	adds	r3, #20
   17b2a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   17b2c:	2300      	movs	r3, #0
   17b2e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   17b30:	2300      	movs	r3, #0
   17b32:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   17b34:	230a      	movs	r3, #10
   17b36:	18fb      	adds	r3, r7, r3
   17b38:	2200      	movs	r2, #0
   17b3a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17b3c:	231f      	movs	r3, #31
   17b3e:	18fb      	adds	r3, r7, r3
   17b40:	2200      	movs	r2, #0
   17b42:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   17b44:	231e      	movs	r3, #30
   17b46:	18fb      	adds	r3, r7, r3
   17b48:	2210      	movs	r2, #16
   17b4a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   17b4c:	683b      	ldr	r3, [r7, #0]
   17b4e:	8a1b      	ldrh	r3, [r3, #16]
   17b50:	2280      	movs	r2, #128	; 0x80
   17b52:	01d2      	lsls	r2, r2, #7
   17b54:	4293      	cmp	r3, r2
   17b56:	d01c      	beq.n	17b92 <_usart_set_config+0x8a>
   17b58:	2280      	movs	r2, #128	; 0x80
   17b5a:	01d2      	lsls	r2, r2, #7
   17b5c:	4293      	cmp	r3, r2
   17b5e:	dc06      	bgt.n	17b6e <_usart_set_config+0x66>
   17b60:	2b00      	cmp	r3, #0
   17b62:	d00d      	beq.n	17b80 <_usart_set_config+0x78>
   17b64:	2280      	movs	r2, #128	; 0x80
   17b66:	0192      	lsls	r2, r2, #6
   17b68:	4293      	cmp	r3, r2
   17b6a:	d024      	beq.n	17bb6 <_usart_set_config+0xae>
   17b6c:	e035      	b.n	17bda <_usart_set_config+0xd2>
   17b6e:	22c0      	movs	r2, #192	; 0xc0
   17b70:	01d2      	lsls	r2, r2, #7
   17b72:	4293      	cmp	r3, r2
   17b74:	d028      	beq.n	17bc8 <_usart_set_config+0xc0>
   17b76:	2280      	movs	r2, #128	; 0x80
   17b78:	0212      	lsls	r2, r2, #8
   17b7a:	4293      	cmp	r3, r2
   17b7c:	d012      	beq.n	17ba4 <_usart_set_config+0x9c>
   17b7e:	e02c      	b.n	17bda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17b80:	231f      	movs	r3, #31
   17b82:	18fb      	adds	r3, r7, r3
   17b84:	2200      	movs	r2, #0
   17b86:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   17b88:	231e      	movs	r3, #30
   17b8a:	18fb      	adds	r3, r7, r3
   17b8c:	2210      	movs	r2, #16
   17b8e:	701a      	strb	r2, [r3, #0]
			break;
   17b90:	e023      	b.n	17bda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17b92:	231f      	movs	r3, #31
   17b94:	18fb      	adds	r3, r7, r3
   17b96:	2200      	movs	r2, #0
   17b98:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   17b9a:	231e      	movs	r3, #30
   17b9c:	18fb      	adds	r3, r7, r3
   17b9e:	2208      	movs	r2, #8
   17ba0:	701a      	strb	r2, [r3, #0]
			break;
   17ba2:	e01a      	b.n	17bda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17ba4:	231f      	movs	r3, #31
   17ba6:	18fb      	adds	r3, r7, r3
   17ba8:	2200      	movs	r2, #0
   17baa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   17bac:	231e      	movs	r3, #30
   17bae:	18fb      	adds	r3, r7, r3
   17bb0:	2203      	movs	r2, #3
   17bb2:	701a      	strb	r2, [r3, #0]
			break;
   17bb4:	e011      	b.n	17bda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   17bb6:	231f      	movs	r3, #31
   17bb8:	18fb      	adds	r3, r7, r3
   17bba:	2201      	movs	r2, #1
   17bbc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   17bbe:	231e      	movs	r3, #30
   17bc0:	18fb      	adds	r3, r7, r3
   17bc2:	2210      	movs	r2, #16
   17bc4:	701a      	strb	r2, [r3, #0]
			break;
   17bc6:	e008      	b.n	17bda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   17bc8:	231f      	movs	r3, #31
   17bca:	18fb      	adds	r3, r7, r3
   17bcc:	2201      	movs	r2, #1
   17bce:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   17bd0:	231e      	movs	r3, #30
   17bd2:	18fb      	adds	r3, r7, r3
   17bd4:	2208      	movs	r2, #8
   17bd6:	701a      	strb	r2, [r3, #0]
			break;
   17bd8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   17bda:	683b      	ldr	r3, [r7, #0]
   17bdc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   17bde:	683b      	ldr	r3, [r7, #0]
   17be0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   17be2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   17be4:	683b      	ldr	r3, [r7, #0]
   17be6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   17be8:	4313      	orrs	r3, r2
		config->sample_rate |
   17bea:	683a      	ldr	r2, [r7, #0]
   17bec:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   17bee:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   17bf0:	683a      	ldr	r2, [r7, #0]
   17bf2:	7e12      	ldrb	r2, [r2, #24]
   17bf4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   17bf6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   17bf8:	683a      	ldr	r2, [r7, #0]
   17bfa:	2126      	movs	r1, #38	; 0x26
   17bfc:	5c52      	ldrb	r2, [r2, r1]
   17bfe:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   17c00:	4313      	orrs	r3, r2
   17c02:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   17c04:	231d      	movs	r3, #29
   17c06:	18fb      	adds	r3, r7, r3
   17c08:	2200      	movs	r2, #0
   17c0a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   17c0c:	683b      	ldr	r3, [r7, #0]
   17c0e:	685b      	ldr	r3, [r3, #4]
   17c10:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   17c12:	68fb      	ldr	r3, [r7, #12]
   17c14:	2b00      	cmp	r3, #0
   17c16:	d01e      	beq.n	17c56 <_usart_set_config+0x14e>
   17c18:	2280      	movs	r2, #128	; 0x80
   17c1a:	0552      	lsls	r2, r2, #21
   17c1c:	4293      	cmp	r3, r2
   17c1e:	d14f      	bne.n	17cc0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   17c20:	683b      	ldr	r3, [r7, #0]
   17c22:	2227      	movs	r2, #39	; 0x27
   17c24:	5c9b      	ldrb	r3, [r3, r2]
   17c26:	2201      	movs	r2, #1
   17c28:	4053      	eors	r3, r2
   17c2a:	b2db      	uxtb	r3, r3
   17c2c:	2b00      	cmp	r3, #0
   17c2e:	d046      	beq.n	17cbe <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   17c30:	683b      	ldr	r3, [r7, #0]
   17c32:	6a1d      	ldr	r5, [r3, #32]
   17c34:	693b      	ldr	r3, [r7, #16]
   17c36:	b2db      	uxtb	r3, r3
   17c38:	0018      	movs	r0, r3
   17c3a:	4b65      	ldr	r3, [pc, #404]	; (17dd0 <_usart_set_config+0x2c8>)
   17c3c:	4798      	blx	r3
   17c3e:	0001      	movs	r1, r0
   17c40:	231d      	movs	r3, #29
   17c42:	18fc      	adds	r4, r7, r3
   17c44:	230a      	movs	r3, #10
   17c46:	18fb      	adds	r3, r7, r3
   17c48:	001a      	movs	r2, r3
   17c4a:	0028      	movs	r0, r5
   17c4c:	4b61      	ldr	r3, [pc, #388]	; (17dd4 <_usart_set_config+0x2cc>)
   17c4e:	4798      	blx	r3
   17c50:	0003      	movs	r3, r0
   17c52:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   17c54:	e033      	b.n	17cbe <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   17c56:	683b      	ldr	r3, [r7, #0]
   17c58:	2227      	movs	r2, #39	; 0x27
   17c5a:	5c9b      	ldrb	r3, [r3, r2]
   17c5c:	2b00      	cmp	r3, #0
   17c5e:	d014      	beq.n	17c8a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   17c60:	683b      	ldr	r3, [r7, #0]
   17c62:	6a18      	ldr	r0, [r3, #32]
   17c64:	683b      	ldr	r3, [r7, #0]
   17c66:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   17c68:	231d      	movs	r3, #29
   17c6a:	18fc      	adds	r4, r7, r3
   17c6c:	231f      	movs	r3, #31
   17c6e:	18fb      	adds	r3, r7, r3
   17c70:	781d      	ldrb	r5, [r3, #0]
   17c72:	230a      	movs	r3, #10
   17c74:	18fa      	adds	r2, r7, r3
   17c76:	231e      	movs	r3, #30
   17c78:	18fb      	adds	r3, r7, r3
   17c7a:	781b      	ldrb	r3, [r3, #0]
   17c7c:	9300      	str	r3, [sp, #0]
   17c7e:	002b      	movs	r3, r5
   17c80:	4d55      	ldr	r5, [pc, #340]	; (17dd8 <_usart_set_config+0x2d0>)
   17c82:	47a8      	blx	r5
   17c84:	0003      	movs	r3, r0
   17c86:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   17c88:	e01a      	b.n	17cc0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   17c8a:	683b      	ldr	r3, [r7, #0]
   17c8c:	6a1d      	ldr	r5, [r3, #32]
   17c8e:	693b      	ldr	r3, [r7, #16]
   17c90:	b2db      	uxtb	r3, r3
   17c92:	0018      	movs	r0, r3
   17c94:	4b4e      	ldr	r3, [pc, #312]	; (17dd0 <_usart_set_config+0x2c8>)
   17c96:	4798      	blx	r3
				status_code =
   17c98:	231d      	movs	r3, #29
   17c9a:	18fc      	adds	r4, r7, r3
   17c9c:	231f      	movs	r3, #31
   17c9e:	18fb      	adds	r3, r7, r3
   17ca0:	7819      	ldrb	r1, [r3, #0]
   17ca2:	230a      	movs	r3, #10
   17ca4:	18fa      	adds	r2, r7, r3
   17ca6:	231e      	movs	r3, #30
   17ca8:	18fb      	adds	r3, r7, r3
   17caa:	781b      	ldrb	r3, [r3, #0]
   17cac:	9300      	str	r3, [sp, #0]
   17cae:	000b      	movs	r3, r1
   17cb0:	0001      	movs	r1, r0
   17cb2:	0028      	movs	r0, r5
   17cb4:	4d48      	ldr	r5, [pc, #288]	; (17dd8 <_usart_set_config+0x2d0>)
   17cb6:	47a8      	blx	r5
   17cb8:	0003      	movs	r3, r0
   17cba:	7023      	strb	r3, [r4, #0]
			break;
   17cbc:	e000      	b.n	17cc0 <_usart_set_config+0x1b8>
			break;
   17cbe:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   17cc0:	231d      	movs	r3, #29
   17cc2:	18fb      	adds	r3, r7, r3
   17cc4:	781b      	ldrb	r3, [r3, #0]
   17cc6:	2b00      	cmp	r3, #0
   17cc8:	d003      	beq.n	17cd2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   17cca:	231d      	movs	r3, #29
   17ccc:	18fb      	adds	r3, r7, r3
   17cce:	781b      	ldrb	r3, [r3, #0]
   17cd0:	e077      	b.n	17dc2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   17cd2:	683b      	ldr	r3, [r7, #0]
   17cd4:	7e5b      	ldrb	r3, [r3, #25]
   17cd6:	2b00      	cmp	r3, #0
   17cd8:	d003      	beq.n	17ce2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   17cda:	683b      	ldr	r3, [r7, #0]
   17cdc:	7e9a      	ldrb	r2, [r3, #26]
   17cde:	69bb      	ldr	r3, [r7, #24]
   17ce0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17ce2:	687b      	ldr	r3, [r7, #4]
   17ce4:	0018      	movs	r0, r3
   17ce6:	4b3d      	ldr	r3, [pc, #244]	; (17ddc <_usart_set_config+0x2d4>)
   17ce8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   17cea:	230a      	movs	r3, #10
   17cec:	18fb      	adds	r3, r7, r3
   17cee:	881a      	ldrh	r2, [r3, #0]
   17cf0:	69bb      	ldr	r3, [r7, #24]
   17cf2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   17cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17cf6:	68fb      	ldr	r3, [r7, #12]
   17cf8:	4313      	orrs	r3, r2
   17cfa:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   17cfc:	683b      	ldr	r3, [r7, #0]
   17cfe:	2227      	movs	r2, #39	; 0x27
   17d00:	5c9b      	ldrb	r3, [r3, r2]
   17d02:	2201      	movs	r2, #1
   17d04:	4053      	eors	r3, r2
   17d06:	b2db      	uxtb	r3, r3
   17d08:	2b00      	cmp	r3, #0
   17d0a:	d003      	beq.n	17d14 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   17d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17d0e:	2204      	movs	r2, #4
   17d10:	4313      	orrs	r3, r2
   17d12:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   17d14:	683b      	ldr	r3, [r7, #0]
   17d16:	7e5b      	ldrb	r3, [r3, #25]
   17d18:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   17d1a:	683b      	ldr	r3, [r7, #0]
   17d1c:	7f1b      	ldrb	r3, [r3, #28]
   17d1e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   17d20:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   17d22:	683b      	ldr	r3, [r7, #0]
   17d24:	7f5b      	ldrb	r3, [r3, #29]
   17d26:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   17d28:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   17d2a:	683b      	ldr	r3, [r7, #0]
   17d2c:	2124      	movs	r1, #36	; 0x24
   17d2e:	5c5b      	ldrb	r3, [r3, r1]
   17d30:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   17d32:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   17d34:	683b      	ldr	r3, [r7, #0]
   17d36:	2125      	movs	r1, #37	; 0x25
   17d38:	5c5b      	ldrb	r3, [r3, r1]
   17d3a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   17d3c:	4313      	orrs	r3, r2
	ctrlb =  
   17d3e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   17d40:	683b      	ldr	r3, [r7, #0]
   17d42:	7a9b      	ldrb	r3, [r3, #10]
   17d44:	001a      	movs	r2, r3
   17d46:	6a3b      	ldr	r3, [r7, #32]
   17d48:	4313      	orrs	r3, r2
   17d4a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   17d4c:	683b      	ldr	r3, [r7, #0]
   17d4e:	7adb      	ldrb	r3, [r3, #11]
   17d50:	001a      	movs	r2, r3
   17d52:	6a3b      	ldr	r3, [r7, #32]
   17d54:	4313      	orrs	r3, r2
   17d56:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   17d58:	683b      	ldr	r3, [r7, #0]
   17d5a:	891b      	ldrh	r3, [r3, #8]
   17d5c:	2bff      	cmp	r3, #255	; 0xff
   17d5e:	d00b      	beq.n	17d78 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   17d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17d62:	2280      	movs	r2, #128	; 0x80
   17d64:	0452      	lsls	r2, r2, #17
   17d66:	4313      	orrs	r3, r2
   17d68:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   17d6a:	683b      	ldr	r3, [r7, #0]
   17d6c:	891b      	ldrh	r3, [r3, #8]
   17d6e:	001a      	movs	r2, r3
   17d70:	6a3b      	ldr	r3, [r7, #32]
   17d72:	4313      	orrs	r3, r2
   17d74:	623b      	str	r3, [r7, #32]
   17d76:	e008      	b.n	17d8a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   17d78:	683b      	ldr	r3, [r7, #0]
   17d7a:	7edb      	ldrb	r3, [r3, #27]
   17d7c:	2b00      	cmp	r3, #0
   17d7e:	d004      	beq.n	17d8a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   17d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17d82:	2280      	movs	r2, #128	; 0x80
   17d84:	04d2      	lsls	r2, r2, #19
   17d86:	4313      	orrs	r3, r2
   17d88:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17d8a:	683b      	ldr	r3, [r7, #0]
   17d8c:	222c      	movs	r2, #44	; 0x2c
   17d8e:	5c9b      	ldrb	r3, [r3, r2]
   17d90:	2b00      	cmp	r3, #0
   17d92:	d103      	bne.n	17d9c <_usart_set_config+0x294>
   17d94:	4b12      	ldr	r3, [pc, #72]	; (17de0 <_usart_set_config+0x2d8>)
   17d96:	4798      	blx	r3
   17d98:	1e03      	subs	r3, r0, #0
   17d9a:	d003      	beq.n	17da4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   17d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17d9e:	2280      	movs	r2, #128	; 0x80
   17da0:	4313      	orrs	r3, r2
   17da2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17da4:	687b      	ldr	r3, [r7, #4]
   17da6:	0018      	movs	r0, r3
   17da8:	4b0c      	ldr	r3, [pc, #48]	; (17ddc <_usart_set_config+0x2d4>)
   17daa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   17dac:	69bb      	ldr	r3, [r7, #24]
   17dae:	6a3a      	ldr	r2, [r7, #32]
   17db0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17db2:	687b      	ldr	r3, [r7, #4]
   17db4:	0018      	movs	r0, r3
   17db6:	4b09      	ldr	r3, [pc, #36]	; (17ddc <_usart_set_config+0x2d4>)
   17db8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   17dba:	69bb      	ldr	r3, [r7, #24]
   17dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17dbe:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   17dc0:	2300      	movs	r3, #0
}
   17dc2:	0018      	movs	r0, r3
   17dc4:	46bd      	mov	sp, r7
   17dc6:	b00a      	add	sp, #40	; 0x28
   17dc8:	bdb0      	pop	{r4, r5, r7, pc}
   17dca:	46c0      	nop			; (mov r8, r8)
   17dcc:	000168b1 	.word	0x000168b1
   17dd0:	00019265 	.word	0x00019265
   17dd4:	0001642b 	.word	0x0001642b
   17dd8:	000164a9 	.word	0x000164a9
   17ddc:	00017ae5 	.word	0x00017ae5
   17de0:	00017aa5 	.word	0x00017aa5

00017de4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   17de4:	b590      	push	{r4, r7, lr}
   17de6:	b093      	sub	sp, #76	; 0x4c
   17de8:	af00      	add	r7, sp, #0
   17dea:	60f8      	str	r0, [r7, #12]
   17dec:	60b9      	str	r1, [r7, #8]
   17dee:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   17df0:	233b      	movs	r3, #59	; 0x3b
   17df2:	18fb      	adds	r3, r7, r3
   17df4:	2200      	movs	r2, #0
   17df6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   17df8:	68fb      	ldr	r3, [r7, #12]
   17dfa:	68ba      	ldr	r2, [r7, #8]
   17dfc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   17dfe:	68fb      	ldr	r3, [r7, #12]
   17e00:	681b      	ldr	r3, [r3, #0]
   17e02:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17e04:	68fb      	ldr	r3, [r7, #12]
   17e06:	681b      	ldr	r3, [r3, #0]
   17e08:	0018      	movs	r0, r3
   17e0a:	4b86      	ldr	r3, [pc, #536]	; (18024 <usart_init+0x240>)
   17e0c:	4798      	blx	r3
   17e0e:	0003      	movs	r3, r0
   17e10:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17e14:	3302      	adds	r3, #2
   17e16:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17e1a:	3314      	adds	r3, #20
   17e1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   17e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17e20:	681b      	ldr	r3, [r3, #0]
   17e22:	2201      	movs	r2, #1
   17e24:	4013      	ands	r3, r2
   17e26:	d001      	beq.n	17e2c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   17e28:	2305      	movs	r3, #5
   17e2a:	e0f6      	b.n	1801a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   17e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17e2e:	681b      	ldr	r3, [r3, #0]
   17e30:	2202      	movs	r2, #2
   17e32:	4013      	ands	r3, r2
   17e34:	d001      	beq.n	17e3a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   17e36:	231c      	movs	r3, #28
   17e38:	e0ef      	b.n	1801a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   17e3a:	2201      	movs	r2, #1
   17e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17e3e:	409a      	lsls	r2, r3
   17e40:	0013      	movs	r3, r2
   17e42:	0019      	movs	r1, r3
   17e44:	2002      	movs	r0, #2
   17e46:	4b78      	ldr	r3, [pc, #480]	; (18028 <usart_init+0x244>)
   17e48:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17e4a:	2324      	movs	r3, #36	; 0x24
   17e4c:	18fb      	adds	r3, r7, r3
   17e4e:	0018      	movs	r0, r3
   17e50:	4b76      	ldr	r3, [pc, #472]	; (1802c <usart_init+0x248>)
   17e52:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17e54:	687b      	ldr	r3, [r7, #4]
   17e56:	222d      	movs	r2, #45	; 0x2d
   17e58:	5c9a      	ldrb	r2, [r3, r2]
   17e5a:	2324      	movs	r3, #36	; 0x24
   17e5c:	18fb      	adds	r3, r7, r3
   17e5e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e62:	b2db      	uxtb	r3, r3
   17e64:	2224      	movs	r2, #36	; 0x24
   17e66:	18ba      	adds	r2, r7, r2
   17e68:	0011      	movs	r1, r2
   17e6a:	0018      	movs	r0, r3
   17e6c:	4b70      	ldr	r3, [pc, #448]	; (18030 <usart_init+0x24c>)
   17e6e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e72:	b2db      	uxtb	r3, r3
   17e74:	0018      	movs	r0, r3
   17e76:	4b6f      	ldr	r3, [pc, #444]	; (18034 <usart_init+0x250>)
   17e78:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17e7a:	687b      	ldr	r3, [r7, #4]
   17e7c:	222d      	movs	r2, #45	; 0x2d
   17e7e:	5c9b      	ldrb	r3, [r3, r2]
   17e80:	2100      	movs	r1, #0
   17e82:	0018      	movs	r0, r3
   17e84:	4b6c      	ldr	r3, [pc, #432]	; (18038 <usart_init+0x254>)
   17e86:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   17e88:	687b      	ldr	r3, [r7, #4]
   17e8a:	7ada      	ldrb	r2, [r3, #11]
   17e8c:	68fb      	ldr	r3, [r7, #12]
   17e8e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   17e90:	687b      	ldr	r3, [r7, #4]
   17e92:	2224      	movs	r2, #36	; 0x24
   17e94:	5c9a      	ldrb	r2, [r3, r2]
   17e96:	68fb      	ldr	r3, [r7, #12]
   17e98:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   17e9a:	687b      	ldr	r3, [r7, #4]
   17e9c:	2225      	movs	r2, #37	; 0x25
   17e9e:	5c9a      	ldrb	r2, [r3, r2]
   17ea0:	68fb      	ldr	r3, [r7, #12]
   17ea2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   17ea4:	687b      	ldr	r3, [r7, #4]
   17ea6:	7eda      	ldrb	r2, [r3, #27]
   17ea8:	68fb      	ldr	r3, [r7, #12]
   17eaa:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   17eac:	687b      	ldr	r3, [r7, #4]
   17eae:	7f1a      	ldrb	r2, [r3, #28]
   17eb0:	68fb      	ldr	r3, [r7, #12]
   17eb2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   17eb4:	233b      	movs	r3, #59	; 0x3b
   17eb6:	18fc      	adds	r4, r7, r3
   17eb8:	687a      	ldr	r2, [r7, #4]
   17eba:	68fb      	ldr	r3, [r7, #12]
   17ebc:	0011      	movs	r1, r2
   17ebe:	0018      	movs	r0, r3
   17ec0:	4b5e      	ldr	r3, [pc, #376]	; (1803c <usart_init+0x258>)
   17ec2:	4798      	blx	r3
   17ec4:	0003      	movs	r3, r0
   17ec6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   17ec8:	233b      	movs	r3, #59	; 0x3b
   17eca:	18fb      	adds	r3, r7, r3
   17ecc:	781b      	ldrb	r3, [r3, #0]
   17ece:	2b00      	cmp	r3, #0
   17ed0:	d003      	beq.n	17eda <usart_init+0xf6>
		return status_code;
   17ed2:	233b      	movs	r3, #59	; 0x3b
   17ed4:	18fb      	adds	r3, r7, r3
   17ed6:	781b      	ldrb	r3, [r3, #0]
   17ed8:	e09f      	b.n	1801a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17eda:	2320      	movs	r3, #32
   17edc:	18fb      	adds	r3, r7, r3
   17ede:	0018      	movs	r0, r3
   17ee0:	4b57      	ldr	r3, [pc, #348]	; (18040 <usart_init+0x25c>)
   17ee2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17ee4:	2320      	movs	r3, #32
   17ee6:	18fb      	adds	r3, r7, r3
   17ee8:	2200      	movs	r2, #0
   17eea:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   17eec:	2320      	movs	r3, #32
   17eee:	18fb      	adds	r3, r7, r3
   17ef0:	2200      	movs	r2, #0
   17ef2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   17ef4:	687b      	ldr	r3, [r7, #4]
   17ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   17ef8:	2310      	movs	r3, #16
   17efa:	18fb      	adds	r3, r7, r3
   17efc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   17efe:	687b      	ldr	r3, [r7, #4]
   17f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   17f02:	2310      	movs	r3, #16
   17f04:	18fb      	adds	r3, r7, r3
   17f06:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   17f08:	687b      	ldr	r3, [r7, #4]
   17f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   17f0c:	2310      	movs	r3, #16
   17f0e:	18fb      	adds	r3, r7, r3
   17f10:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   17f12:	687b      	ldr	r3, [r7, #4]
   17f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   17f16:	2310      	movs	r3, #16
   17f18:	18fb      	adds	r3, r7, r3
   17f1a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   17f1c:	2347      	movs	r3, #71	; 0x47
   17f1e:	18fb      	adds	r3, r7, r3
   17f20:	2200      	movs	r2, #0
   17f22:	701a      	strb	r2, [r3, #0]
   17f24:	e02c      	b.n	17f80 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   17f26:	2347      	movs	r3, #71	; 0x47
   17f28:	18fb      	adds	r3, r7, r3
   17f2a:	781a      	ldrb	r2, [r3, #0]
   17f2c:	2310      	movs	r3, #16
   17f2e:	18fb      	adds	r3, r7, r3
   17f30:	0092      	lsls	r2, r2, #2
   17f32:	58d3      	ldr	r3, [r2, r3]
   17f34:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   17f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17f38:	2b00      	cmp	r3, #0
   17f3a:	d109      	bne.n	17f50 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   17f3c:	2347      	movs	r3, #71	; 0x47
   17f3e:	18fb      	adds	r3, r7, r3
   17f40:	781a      	ldrb	r2, [r3, #0]
   17f42:	68bb      	ldr	r3, [r7, #8]
   17f44:	0011      	movs	r1, r2
   17f46:	0018      	movs	r0, r3
   17f48:	4b3e      	ldr	r3, [pc, #248]	; (18044 <usart_init+0x260>)
   17f4a:	4798      	blx	r3
   17f4c:	0003      	movs	r3, r0
   17f4e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   17f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17f52:	3301      	adds	r3, #1
   17f54:	d00d      	beq.n	17f72 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   17f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17f58:	b2da      	uxtb	r2, r3
   17f5a:	2320      	movs	r3, #32
   17f5c:	18fb      	adds	r3, r7, r3
   17f5e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   17f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17f62:	0c1b      	lsrs	r3, r3, #16
   17f64:	b2db      	uxtb	r3, r3
   17f66:	2220      	movs	r2, #32
   17f68:	18ba      	adds	r2, r7, r2
   17f6a:	0011      	movs	r1, r2
   17f6c:	0018      	movs	r0, r3
   17f6e:	4b36      	ldr	r3, [pc, #216]	; (18048 <usart_init+0x264>)
   17f70:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   17f72:	2347      	movs	r3, #71	; 0x47
   17f74:	18fb      	adds	r3, r7, r3
   17f76:	781a      	ldrb	r2, [r3, #0]
   17f78:	2347      	movs	r3, #71	; 0x47
   17f7a:	18fb      	adds	r3, r7, r3
   17f7c:	3201      	adds	r2, #1
   17f7e:	701a      	strb	r2, [r3, #0]
   17f80:	2347      	movs	r3, #71	; 0x47
   17f82:	18fb      	adds	r3, r7, r3
   17f84:	781b      	ldrb	r3, [r3, #0]
   17f86:	2b03      	cmp	r3, #3
   17f88:	d9cd      	bls.n	17f26 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   17f8a:	2300      	movs	r3, #0
   17f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   17f8e:	e00a      	b.n	17fa6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   17f90:	68fa      	ldr	r2, [r7, #12]
   17f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17f94:	3302      	adds	r3, #2
   17f96:	009b      	lsls	r3, r3, #2
   17f98:	18d3      	adds	r3, r2, r3
   17f9a:	3304      	adds	r3, #4
   17f9c:	2200      	movs	r2, #0
   17f9e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   17fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17fa2:	3301      	adds	r3, #1
   17fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   17fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17fa8:	2b05      	cmp	r3, #5
   17faa:	d9f1      	bls.n	17f90 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   17fac:	68fb      	ldr	r3, [r7, #12]
   17fae:	2200      	movs	r2, #0
   17fb0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   17fb2:	68fb      	ldr	r3, [r7, #12]
   17fb4:	2200      	movs	r2, #0
   17fb6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   17fb8:	68fb      	ldr	r3, [r7, #12]
   17fba:	2200      	movs	r2, #0
   17fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   17fbe:	68fb      	ldr	r3, [r7, #12]
   17fc0:	2200      	movs	r2, #0
   17fc2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   17fc4:	68fb      	ldr	r3, [r7, #12]
   17fc6:	2230      	movs	r2, #48	; 0x30
   17fc8:	2100      	movs	r1, #0
   17fca:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   17fcc:	68fb      	ldr	r3, [r7, #12]
   17fce:	2231      	movs	r2, #49	; 0x31
   17fd0:	2100      	movs	r1, #0
   17fd2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   17fd4:	68fb      	ldr	r3, [r7, #12]
   17fd6:	2232      	movs	r2, #50	; 0x32
   17fd8:	2100      	movs	r1, #0
   17fda:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   17fdc:	68fb      	ldr	r3, [r7, #12]
   17fde:	2233      	movs	r2, #51	; 0x33
   17fe0:	2100      	movs	r1, #0
   17fe2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17fe4:	68fb      	ldr	r3, [r7, #12]
   17fe6:	681b      	ldr	r3, [r3, #0]
   17fe8:	2227      	movs	r2, #39	; 0x27
   17fea:	18bc      	adds	r4, r7, r2
   17fec:	0018      	movs	r0, r3
   17fee:	4b0d      	ldr	r3, [pc, #52]	; (18024 <usart_init+0x240>)
   17ff0:	4798      	blx	r3
   17ff2:	0003      	movs	r3, r0
   17ff4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   17ff6:	4a15      	ldr	r2, [pc, #84]	; (1804c <usart_init+0x268>)
   17ff8:	2327      	movs	r3, #39	; 0x27
   17ffa:	18fb      	adds	r3, r7, r3
   17ffc:	781b      	ldrb	r3, [r3, #0]
   17ffe:	0011      	movs	r1, r2
   18000:	0018      	movs	r0, r3
   18002:	4b13      	ldr	r3, [pc, #76]	; (18050 <usart_init+0x26c>)
   18004:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   18006:	2327      	movs	r3, #39	; 0x27
   18008:	18fb      	adds	r3, r7, r3
   1800a:	781a      	ldrb	r2, [r3, #0]
   1800c:	4b11      	ldr	r3, [pc, #68]	; (18054 <usart_init+0x270>)
   1800e:	0092      	lsls	r2, r2, #2
   18010:	68f9      	ldr	r1, [r7, #12]
   18012:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   18014:	233b      	movs	r3, #59	; 0x3b
   18016:	18fb      	adds	r3, r7, r3
   18018:	781b      	ldrb	r3, [r3, #0]
}
   1801a:	0018      	movs	r0, r3
   1801c:	46bd      	mov	sp, r7
   1801e:	b013      	add	sp, #76	; 0x4c
   18020:	bd90      	pop	{r4, r7, pc}
   18022:	46c0      	nop			; (mov r8, r8)
   18024:	000168b1 	.word	0x000168b1
   18028:	00017a21 	.word	0x00017a21
   1802c:	00017a09 	.word	0x00017a09
   18030:	00019141 	.word	0x00019141
   18034:	00019185 	.word	0x00019185
   18038:	00016669 	.word	0x00016669
   1803c:	00017b09 	.word	0x00017b09
   18040:	00017a7d 	.word	0x00017a7d
   18044:	000166f5 	.word	0x000166f5
   18048:	000194a1 	.word	0x000194a1
   1804c:	000182c1 	.word	0x000182c1
   18050:	00016915 	.word	0x00016915
   18054:	20005888 	.word	0x20005888

00018058 <system_interrupt_enter_critical_section>:
{
   18058:	b580      	push	{r7, lr}
   1805a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1805c:	4b02      	ldr	r3, [pc, #8]	; (18068 <system_interrupt_enter_critical_section+0x10>)
   1805e:	4798      	blx	r3
}
   18060:	46c0      	nop			; (mov r8, r8)
   18062:	46bd      	mov	sp, r7
   18064:	bd80      	pop	{r7, pc}
   18066:	46c0      	nop			; (mov r8, r8)
   18068:	000154ad 	.word	0x000154ad

0001806c <system_interrupt_leave_critical_section>:
{
   1806c:	b580      	push	{r7, lr}
   1806e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   18070:	4b02      	ldr	r3, [pc, #8]	; (1807c <system_interrupt_leave_critical_section+0x10>)
   18072:	4798      	blx	r3
}
   18074:	46c0      	nop			; (mov r8, r8)
   18076:	46bd      	mov	sp, r7
   18078:	bd80      	pop	{r7, pc}
   1807a:	46c0      	nop			; (mov r8, r8)
   1807c:	00015501 	.word	0x00015501

00018080 <usart_is_syncing>:
{
   18080:	b580      	push	{r7, lr}
   18082:	b084      	sub	sp, #16
   18084:	af00      	add	r7, sp, #0
   18086:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   18088:	687b      	ldr	r3, [r7, #4]
   1808a:	681b      	ldr	r3, [r3, #0]
   1808c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1808e:	68fb      	ldr	r3, [r7, #12]
   18090:	69db      	ldr	r3, [r3, #28]
   18092:	1e5a      	subs	r2, r3, #1
   18094:	4193      	sbcs	r3, r2
   18096:	b2db      	uxtb	r3, r3
}
   18098:	0018      	movs	r0, r3
   1809a:	46bd      	mov	sp, r7
   1809c:	b004      	add	sp, #16
   1809e:	bd80      	pop	{r7, pc}

000180a0 <_usart_wait_for_sync>:
{
   180a0:	b580      	push	{r7, lr}
   180a2:	b082      	sub	sp, #8
   180a4:	af00      	add	r7, sp, #0
   180a6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   180a8:	46c0      	nop			; (mov r8, r8)
   180aa:	687b      	ldr	r3, [r7, #4]
   180ac:	0018      	movs	r0, r3
   180ae:	4b04      	ldr	r3, [pc, #16]	; (180c0 <_usart_wait_for_sync+0x20>)
   180b0:	4798      	blx	r3
   180b2:	1e03      	subs	r3, r0, #0
   180b4:	d1f9      	bne.n	180aa <_usart_wait_for_sync+0xa>
}
   180b6:	46c0      	nop			; (mov r8, r8)
   180b8:	46bd      	mov	sp, r7
   180ba:	b002      	add	sp, #8
   180bc:	bd80      	pop	{r7, pc}
   180be:	46c0      	nop			; (mov r8, r8)
   180c0:	00018081 	.word	0x00018081

000180c4 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   180c4:	b580      	push	{r7, lr}
   180c6:	b086      	sub	sp, #24
   180c8:	af00      	add	r7, sp, #0
   180ca:	60f8      	str	r0, [r7, #12]
   180cc:	60b9      	str	r1, [r7, #8]
   180ce:	1dbb      	adds	r3, r7, #6
   180d0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   180d2:	68fb      	ldr	r3, [r7, #12]
   180d4:	681b      	ldr	r3, [r3, #0]
   180d6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   180d8:	4b0f      	ldr	r3, [pc, #60]	; (18118 <_usart_write_buffer+0x54>)
   180da:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   180dc:	68fb      	ldr	r3, [r7, #12]
   180de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   180e0:	b29b      	uxth	r3, r3
   180e2:	2b00      	cmp	r3, #0
   180e4:	d003      	beq.n	180ee <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   180e6:	4b0d      	ldr	r3, [pc, #52]	; (1811c <_usart_write_buffer+0x58>)
   180e8:	4798      	blx	r3
		return STATUS_BUSY;
   180ea:	2305      	movs	r3, #5
   180ec:	e010      	b.n	18110 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   180ee:	68fb      	ldr	r3, [r7, #12]
   180f0:	1dba      	adds	r2, r7, #6
   180f2:	8812      	ldrh	r2, [r2, #0]
   180f4:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   180f6:	4b09      	ldr	r3, [pc, #36]	; (1811c <_usart_write_buffer+0x58>)
   180f8:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   180fa:	68fb      	ldr	r3, [r7, #12]
   180fc:	68ba      	ldr	r2, [r7, #8]
   180fe:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   18100:	68fb      	ldr	r3, [r7, #12]
   18102:	2233      	movs	r2, #51	; 0x33
   18104:	2105      	movs	r1, #5
   18106:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   18108:	697b      	ldr	r3, [r7, #20]
   1810a:	2201      	movs	r2, #1
   1810c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   1810e:	2300      	movs	r3, #0
}
   18110:	0018      	movs	r0, r3
   18112:	46bd      	mov	sp, r7
   18114:	b006      	add	sp, #24
   18116:	bd80      	pop	{r7, pc}
   18118:	00018059 	.word	0x00018059
   1811c:	0001806d 	.word	0x0001806d

00018120 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   18120:	b580      	push	{r7, lr}
   18122:	b086      	sub	sp, #24
   18124:	af00      	add	r7, sp, #0
   18126:	60f8      	str	r0, [r7, #12]
   18128:	60b9      	str	r1, [r7, #8]
   1812a:	1dbb      	adds	r3, r7, #6
   1812c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1812e:	68fb      	ldr	r3, [r7, #12]
   18130:	681b      	ldr	r3, [r3, #0]
   18132:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   18134:	4b16      	ldr	r3, [pc, #88]	; (18190 <_usart_read_buffer+0x70>)
   18136:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   18138:	68fb      	ldr	r3, [r7, #12]
   1813a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1813c:	b29b      	uxth	r3, r3
   1813e:	2b00      	cmp	r3, #0
   18140:	d003      	beq.n	1814a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   18142:	4b14      	ldr	r3, [pc, #80]	; (18194 <_usart_read_buffer+0x74>)
   18144:	4798      	blx	r3
		return STATUS_BUSY;
   18146:	2305      	movs	r3, #5
   18148:	e01e      	b.n	18188 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   1814a:	68fb      	ldr	r3, [r7, #12]
   1814c:	1dba      	adds	r2, r7, #6
   1814e:	8812      	ldrh	r2, [r2, #0]
   18150:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   18152:	4b10      	ldr	r3, [pc, #64]	; (18194 <_usart_read_buffer+0x74>)
   18154:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   18156:	68fb      	ldr	r3, [r7, #12]
   18158:	68ba      	ldr	r2, [r7, #8]
   1815a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1815c:	68fb      	ldr	r3, [r7, #12]
   1815e:	2232      	movs	r2, #50	; 0x32
   18160:	2105      	movs	r1, #5
   18162:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   18164:	697b      	ldr	r3, [r7, #20]
   18166:	2204      	movs	r2, #4
   18168:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   1816a:	68fb      	ldr	r3, [r7, #12]
   1816c:	7a1b      	ldrb	r3, [r3, #8]
   1816e:	2b00      	cmp	r3, #0
   18170:	d002      	beq.n	18178 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   18172:	697b      	ldr	r3, [r7, #20]
   18174:	2220      	movs	r2, #32
   18176:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   18178:	68fb      	ldr	r3, [r7, #12]
   1817a:	7a5b      	ldrb	r3, [r3, #9]
   1817c:	2b00      	cmp	r3, #0
   1817e:	d002      	beq.n	18186 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   18180:	697b      	ldr	r3, [r7, #20]
   18182:	2208      	movs	r2, #8
   18184:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   18186:	2300      	movs	r3, #0
}
   18188:	0018      	movs	r0, r3
   1818a:	46bd      	mov	sp, r7
   1818c:	b006      	add	sp, #24
   1818e:	bd80      	pop	{r7, pc}
   18190:	00018059 	.word	0x00018059
   18194:	0001806d 	.word	0x0001806d

00018198 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   18198:	b580      	push	{r7, lr}
   1819a:	b084      	sub	sp, #16
   1819c:	af00      	add	r7, sp, #0
   1819e:	60f8      	str	r0, [r7, #12]
   181a0:	60b9      	str	r1, [r7, #8]
   181a2:	1dfb      	adds	r3, r7, #7
   181a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   181a6:	1dfb      	adds	r3, r7, #7
   181a8:	781b      	ldrb	r3, [r3, #0]
   181aa:	68fa      	ldr	r2, [r7, #12]
   181ac:	3302      	adds	r3, #2
   181ae:	009b      	lsls	r3, r3, #2
   181b0:	18d3      	adds	r3, r2, r3
   181b2:	3304      	adds	r3, #4
   181b4:	68ba      	ldr	r2, [r7, #8]
   181b6:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   181b8:	68fb      	ldr	r3, [r7, #12]
   181ba:	2230      	movs	r2, #48	; 0x30
   181bc:	5c9b      	ldrb	r3, [r3, r2]
   181be:	b25a      	sxtb	r2, r3
   181c0:	1dfb      	adds	r3, r7, #7
   181c2:	781b      	ldrb	r3, [r3, #0]
   181c4:	2101      	movs	r1, #1
   181c6:	4099      	lsls	r1, r3
   181c8:	000b      	movs	r3, r1
   181ca:	b25b      	sxtb	r3, r3
   181cc:	4313      	orrs	r3, r2
   181ce:	b25b      	sxtb	r3, r3
   181d0:	b2d9      	uxtb	r1, r3
   181d2:	68fb      	ldr	r3, [r7, #12]
   181d4:	2230      	movs	r2, #48	; 0x30
   181d6:	5499      	strb	r1, [r3, r2]
}
   181d8:	46c0      	nop			; (mov r8, r8)
   181da:	46bd      	mov	sp, r7
   181dc:	b004      	add	sp, #16
   181de:	bd80      	pop	{r7, pc}

000181e0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   181e0:	b580      	push	{r7, lr}
   181e2:	b084      	sub	sp, #16
   181e4:	af00      	add	r7, sp, #0
   181e6:	60f8      	str	r0, [r7, #12]
   181e8:	60b9      	str	r1, [r7, #8]
   181ea:	1dbb      	adds	r3, r7, #6
   181ec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   181ee:	1dbb      	adds	r3, r7, #6
   181f0:	881b      	ldrh	r3, [r3, #0]
   181f2:	2b00      	cmp	r3, #0
   181f4:	d101      	bne.n	181fa <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   181f6:	2317      	movs	r3, #23
   181f8:	e010      	b.n	1821c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   181fa:	68fb      	ldr	r3, [r7, #12]
   181fc:	79db      	ldrb	r3, [r3, #7]
   181fe:	2201      	movs	r2, #1
   18200:	4053      	eors	r3, r2
   18202:	b2db      	uxtb	r3, r3
   18204:	2b00      	cmp	r3, #0
   18206:	d001      	beq.n	1820c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   18208:	231c      	movs	r3, #28
   1820a:	e007      	b.n	1821c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   1820c:	1dbb      	adds	r3, r7, #6
   1820e:	881a      	ldrh	r2, [r3, #0]
   18210:	68b9      	ldr	r1, [r7, #8]
   18212:	68fb      	ldr	r3, [r7, #12]
   18214:	0018      	movs	r0, r3
   18216:	4b03      	ldr	r3, [pc, #12]	; (18224 <usart_write_buffer_job+0x44>)
   18218:	4798      	blx	r3
   1821a:	0003      	movs	r3, r0
}
   1821c:	0018      	movs	r0, r3
   1821e:	46bd      	mov	sp, r7
   18220:	b004      	add	sp, #16
   18222:	bd80      	pop	{r7, pc}
   18224:	000180c5 	.word	0x000180c5

00018228 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   18228:	b580      	push	{r7, lr}
   1822a:	b084      	sub	sp, #16
   1822c:	af00      	add	r7, sp, #0
   1822e:	60f8      	str	r0, [r7, #12]
   18230:	60b9      	str	r1, [r7, #8]
   18232:	1dbb      	adds	r3, r7, #6
   18234:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   18236:	1dbb      	adds	r3, r7, #6
   18238:	881b      	ldrh	r3, [r3, #0]
   1823a:	2b00      	cmp	r3, #0
   1823c:	d101      	bne.n	18242 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1823e:	2317      	movs	r3, #23
   18240:	e010      	b.n	18264 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   18242:	68fb      	ldr	r3, [r7, #12]
   18244:	799b      	ldrb	r3, [r3, #6]
   18246:	2201      	movs	r2, #1
   18248:	4053      	eors	r3, r2
   1824a:	b2db      	uxtb	r3, r3
   1824c:	2b00      	cmp	r3, #0
   1824e:	d001      	beq.n	18254 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   18250:	231c      	movs	r3, #28
   18252:	e007      	b.n	18264 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   18254:	1dbb      	adds	r3, r7, #6
   18256:	881a      	ldrh	r2, [r3, #0]
   18258:	68b9      	ldr	r1, [r7, #8]
   1825a:	68fb      	ldr	r3, [r7, #12]
   1825c:	0018      	movs	r0, r3
   1825e:	4b03      	ldr	r3, [pc, #12]	; (1826c <usart_read_buffer_job+0x44>)
   18260:	4798      	blx	r3
   18262:	0003      	movs	r3, r0
}
   18264:	0018      	movs	r0, r3
   18266:	46bd      	mov	sp, r7
   18268:	b004      	add	sp, #16
   1826a:	bd80      	pop	{r7, pc}
   1826c:	00018121 	.word	0x00018121

00018270 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   18270:	b580      	push	{r7, lr}
   18272:	b084      	sub	sp, #16
   18274:	af00      	add	r7, sp, #0
   18276:	6078      	str	r0, [r7, #4]
   18278:	000a      	movs	r2, r1
   1827a:	1cfb      	adds	r3, r7, #3
   1827c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1827e:	1cfb      	adds	r3, r7, #3
   18280:	781b      	ldrb	r3, [r3, #0]
   18282:	2b00      	cmp	r3, #0
   18284:	d002      	beq.n	1828c <usart_get_job_status+0x1c>
   18286:	2b01      	cmp	r3, #1
   18288:	d007      	beq.n	1829a <usart_get_job_status+0x2a>
   1828a:	e00d      	b.n	182a8 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   1828c:	230f      	movs	r3, #15
   1828e:	18fb      	adds	r3, r7, r3
   18290:	687a      	ldr	r2, [r7, #4]
   18292:	2132      	movs	r1, #50	; 0x32
   18294:	5c52      	ldrb	r2, [r2, r1]
   18296:	701a      	strb	r2, [r3, #0]
			break;
   18298:	e00b      	b.n	182b2 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   1829a:	230f      	movs	r3, #15
   1829c:	18fb      	adds	r3, r7, r3
   1829e:	687a      	ldr	r2, [r7, #4]
   182a0:	2133      	movs	r1, #51	; 0x33
   182a2:	5c52      	ldrb	r2, [r2, r1]
   182a4:	701a      	strb	r2, [r3, #0]
			break;
   182a6:	e004      	b.n	182b2 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   182a8:	230f      	movs	r3, #15
   182aa:	18fb      	adds	r3, r7, r3
   182ac:	2217      	movs	r2, #23
   182ae:	701a      	strb	r2, [r3, #0]
			break;
   182b0:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   182b2:	230f      	movs	r3, #15
   182b4:	18fb      	adds	r3, r7, r3
   182b6:	781b      	ldrb	r3, [r3, #0]
}
   182b8:	0018      	movs	r0, r3
   182ba:	46bd      	mov	sp, r7
   182bc:	b004      	add	sp, #16
   182be:	bd80      	pop	{r7, pc}

000182c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   182c0:	b580      	push	{r7, lr}
   182c2:	b088      	sub	sp, #32
   182c4:	af00      	add	r7, sp, #0
   182c6:	0002      	movs	r2, r0
   182c8:	1dfb      	adds	r3, r7, #7
   182ca:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   182cc:	1dfb      	adds	r3, r7, #7
   182ce:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   182d0:	4ba3      	ldr	r3, [pc, #652]	; (18560 <_usart_interrupt_handler+0x2a0>)
   182d2:	0092      	lsls	r2, r2, #2
   182d4:	58d3      	ldr	r3, [r2, r3]
   182d6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   182d8:	69bb      	ldr	r3, [r7, #24]
   182da:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   182dc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   182de:	69bb      	ldr	r3, [r7, #24]
   182e0:	0018      	movs	r0, r3
   182e2:	4ba0      	ldr	r3, [pc, #640]	; (18564 <_usart_interrupt_handler+0x2a4>)
   182e4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   182e6:	697b      	ldr	r3, [r7, #20]
   182e8:	7e1b      	ldrb	r3, [r3, #24]
   182ea:	b2da      	uxtb	r2, r3
   182ec:	2312      	movs	r3, #18
   182ee:	18fb      	adds	r3, r7, r3
   182f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   182f2:	697b      	ldr	r3, [r7, #20]
   182f4:	7d9b      	ldrb	r3, [r3, #22]
   182f6:	b2db      	uxtb	r3, r3
   182f8:	b29a      	uxth	r2, r3
   182fa:	2312      	movs	r3, #18
   182fc:	18fb      	adds	r3, r7, r3
   182fe:	2112      	movs	r1, #18
   18300:	1879      	adds	r1, r7, r1
   18302:	8809      	ldrh	r1, [r1, #0]
   18304:	400a      	ands	r2, r1
   18306:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   18308:	69bb      	ldr	r3, [r7, #24]
   1830a:	2230      	movs	r2, #48	; 0x30
   1830c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   1830e:	69ba      	ldr	r2, [r7, #24]
   18310:	2131      	movs	r1, #49	; 0x31
   18312:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   18314:	4013      	ands	r3, r2
   18316:	b2da      	uxtb	r2, r3
   18318:	2310      	movs	r3, #16
   1831a:	18fb      	adds	r3, r7, r3
   1831c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1831e:	2312      	movs	r3, #18
   18320:	18fb      	adds	r3, r7, r3
   18322:	881b      	ldrh	r3, [r3, #0]
   18324:	2201      	movs	r2, #1
   18326:	4013      	ands	r3, r2
   18328:	d044      	beq.n	183b4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   1832a:	69bb      	ldr	r3, [r7, #24]
   1832c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1832e:	b29b      	uxth	r3, r3
   18330:	2b00      	cmp	r3, #0
   18332:	d03c      	beq.n	183ae <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18334:	69bb      	ldr	r3, [r7, #24]
   18336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18338:	781b      	ldrb	r3, [r3, #0]
   1833a:	b2da      	uxtb	r2, r3
   1833c:	231c      	movs	r3, #28
   1833e:	18fb      	adds	r3, r7, r3
   18340:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   18342:	69bb      	ldr	r3, [r7, #24]
   18344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18346:	1c5a      	adds	r2, r3, #1
   18348:	69bb      	ldr	r3, [r7, #24]
   1834a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1834c:	69bb      	ldr	r3, [r7, #24]
   1834e:	795b      	ldrb	r3, [r3, #5]
   18350:	2b01      	cmp	r3, #1
   18352:	d113      	bne.n	1837c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   18354:	69bb      	ldr	r3, [r7, #24]
   18356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18358:	781b      	ldrb	r3, [r3, #0]
   1835a:	b2db      	uxtb	r3, r3
   1835c:	021b      	lsls	r3, r3, #8
   1835e:	b21a      	sxth	r2, r3
   18360:	231c      	movs	r3, #28
   18362:	18fb      	adds	r3, r7, r3
   18364:	2100      	movs	r1, #0
   18366:	5e5b      	ldrsh	r3, [r3, r1]
   18368:	4313      	orrs	r3, r2
   1836a:	b21a      	sxth	r2, r3
   1836c:	231c      	movs	r3, #28
   1836e:	18fb      	adds	r3, r7, r3
   18370:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   18372:	69bb      	ldr	r3, [r7, #24]
   18374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18376:	1c5a      	adds	r2, r3, #1
   18378:	69bb      	ldr	r3, [r7, #24]
   1837a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1837c:	231c      	movs	r3, #28
   1837e:	18fb      	adds	r3, r7, r3
   18380:	881b      	ldrh	r3, [r3, #0]
   18382:	05db      	lsls	r3, r3, #23
   18384:	0ddb      	lsrs	r3, r3, #23
   18386:	b29a      	uxth	r2, r3
   18388:	697b      	ldr	r3, [r7, #20]
   1838a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1838c:	69bb      	ldr	r3, [r7, #24]
   1838e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   18390:	b29b      	uxth	r3, r3
   18392:	3b01      	subs	r3, #1
   18394:	b29b      	uxth	r3, r3
   18396:	69ba      	ldr	r2, [r7, #24]
   18398:	1c19      	adds	r1, r3, #0
   1839a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   1839c:	2b00      	cmp	r3, #0
   1839e:	d109      	bne.n	183b4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   183a0:	697b      	ldr	r3, [r7, #20]
   183a2:	2201      	movs	r2, #1
   183a4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   183a6:	697b      	ldr	r3, [r7, #20]
   183a8:	2202      	movs	r2, #2
   183aa:	759a      	strb	r2, [r3, #22]
   183ac:	e002      	b.n	183b4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   183ae:	697b      	ldr	r3, [r7, #20]
   183b0:	2201      	movs	r2, #1
   183b2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   183b4:	2312      	movs	r3, #18
   183b6:	18fb      	adds	r3, r7, r3
   183b8:	881b      	ldrh	r3, [r3, #0]
   183ba:	2202      	movs	r2, #2
   183bc:	4013      	ands	r3, r2
   183be:	d011      	beq.n	183e4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   183c0:	697b      	ldr	r3, [r7, #20]
   183c2:	2202      	movs	r2, #2
   183c4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   183c6:	69bb      	ldr	r3, [r7, #24]
   183c8:	2233      	movs	r2, #51	; 0x33
   183ca:	2100      	movs	r1, #0
   183cc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   183ce:	2310      	movs	r3, #16
   183d0:	18fb      	adds	r3, r7, r3
   183d2:	881b      	ldrh	r3, [r3, #0]
   183d4:	2201      	movs	r2, #1
   183d6:	4013      	ands	r3, r2
   183d8:	d004      	beq.n	183e4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   183da:	69bb      	ldr	r3, [r7, #24]
   183dc:	68db      	ldr	r3, [r3, #12]
   183de:	69ba      	ldr	r2, [r7, #24]
   183e0:	0010      	movs	r0, r2
   183e2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   183e4:	2312      	movs	r3, #18
   183e6:	18fb      	adds	r3, r7, r3
   183e8:	881b      	ldrh	r3, [r3, #0]
   183ea:	2204      	movs	r2, #4
   183ec:	4013      	ands	r3, r2
   183ee:	d100      	bne.n	183f2 <_usart_interrupt_handler+0x132>
   183f0:	e0bd      	b.n	1856e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   183f2:	69bb      	ldr	r3, [r7, #24]
   183f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   183f6:	b29b      	uxth	r3, r3
   183f8:	2b00      	cmp	r3, #0
   183fa:	d100      	bne.n	183fe <_usart_interrupt_handler+0x13e>
   183fc:	e0b4      	b.n	18568 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   183fe:	697b      	ldr	r3, [r7, #20]
   18400:	8b5b      	ldrh	r3, [r3, #26]
   18402:	b29b      	uxth	r3, r3
   18404:	b2da      	uxtb	r2, r3
   18406:	231f      	movs	r3, #31
   18408:	18fb      	adds	r3, r7, r3
   1840a:	213f      	movs	r1, #63	; 0x3f
   1840c:	400a      	ands	r2, r1
   1840e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   18410:	231f      	movs	r3, #31
   18412:	18fb      	adds	r3, r7, r3
   18414:	781b      	ldrb	r3, [r3, #0]
   18416:	2208      	movs	r2, #8
   18418:	4013      	ands	r3, r2
   1841a:	d007      	beq.n	1842c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1841c:	231f      	movs	r3, #31
   1841e:	18fb      	adds	r3, r7, r3
   18420:	221f      	movs	r2, #31
   18422:	18ba      	adds	r2, r7, r2
   18424:	7812      	ldrb	r2, [r2, #0]
   18426:	2108      	movs	r1, #8
   18428:	438a      	bics	r2, r1
   1842a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   1842c:	231f      	movs	r3, #31
   1842e:	18fb      	adds	r3, r7, r3
   18430:	781b      	ldrb	r3, [r3, #0]
   18432:	2b00      	cmp	r3, #0
   18434:	d050      	beq.n	184d8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   18436:	231f      	movs	r3, #31
   18438:	18fb      	adds	r3, r7, r3
   1843a:	781b      	ldrb	r3, [r3, #0]
   1843c:	2202      	movs	r2, #2
   1843e:	4013      	ands	r3, r2
   18440:	d007      	beq.n	18452 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   18442:	69bb      	ldr	r3, [r7, #24]
   18444:	2232      	movs	r2, #50	; 0x32
   18446:	211a      	movs	r1, #26
   18448:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1844a:	697b      	ldr	r3, [r7, #20]
   1844c:	2202      	movs	r2, #2
   1844e:	835a      	strh	r2, [r3, #26]
   18450:	e036      	b.n	184c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   18452:	231f      	movs	r3, #31
   18454:	18fb      	adds	r3, r7, r3
   18456:	781b      	ldrb	r3, [r3, #0]
   18458:	2204      	movs	r2, #4
   1845a:	4013      	ands	r3, r2
   1845c:	d007      	beq.n	1846e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1845e:	69bb      	ldr	r3, [r7, #24]
   18460:	2232      	movs	r2, #50	; 0x32
   18462:	211e      	movs	r1, #30
   18464:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   18466:	697b      	ldr	r3, [r7, #20]
   18468:	2204      	movs	r2, #4
   1846a:	835a      	strh	r2, [r3, #26]
   1846c:	e028      	b.n	184c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1846e:	231f      	movs	r3, #31
   18470:	18fb      	adds	r3, r7, r3
   18472:	781b      	ldrb	r3, [r3, #0]
   18474:	2201      	movs	r2, #1
   18476:	4013      	ands	r3, r2
   18478:	d007      	beq.n	1848a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   1847a:	69bb      	ldr	r3, [r7, #24]
   1847c:	2232      	movs	r2, #50	; 0x32
   1847e:	2113      	movs	r1, #19
   18480:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   18482:	697b      	ldr	r3, [r7, #20]
   18484:	2201      	movs	r2, #1
   18486:	835a      	strh	r2, [r3, #26]
   18488:	e01a      	b.n	184c0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1848a:	231f      	movs	r3, #31
   1848c:	18fb      	adds	r3, r7, r3
   1848e:	781b      	ldrb	r3, [r3, #0]
   18490:	2210      	movs	r2, #16
   18492:	4013      	ands	r3, r2
   18494:	d007      	beq.n	184a6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   18496:	69bb      	ldr	r3, [r7, #24]
   18498:	2232      	movs	r2, #50	; 0x32
   1849a:	2142      	movs	r1, #66	; 0x42
   1849c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1849e:	697b      	ldr	r3, [r7, #20]
   184a0:	2210      	movs	r2, #16
   184a2:	835a      	strh	r2, [r3, #26]
   184a4:	e00c      	b.n	184c0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   184a6:	231f      	movs	r3, #31
   184a8:	18fb      	adds	r3, r7, r3
   184aa:	781b      	ldrb	r3, [r3, #0]
   184ac:	2220      	movs	r2, #32
   184ae:	4013      	ands	r3, r2
   184b0:	d006      	beq.n	184c0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   184b2:	69bb      	ldr	r3, [r7, #24]
   184b4:	2232      	movs	r2, #50	; 0x32
   184b6:	2141      	movs	r1, #65	; 0x41
   184b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   184ba:	697b      	ldr	r3, [r7, #20]
   184bc:	2220      	movs	r2, #32
   184be:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   184c0:	2310      	movs	r3, #16
   184c2:	18fb      	adds	r3, r7, r3
   184c4:	881b      	ldrh	r3, [r3, #0]
   184c6:	2204      	movs	r2, #4
   184c8:	4013      	ands	r3, r2
				if (callback_status
   184ca:	d050      	beq.n	1856e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   184cc:	69bb      	ldr	r3, [r7, #24]
   184ce:	695b      	ldr	r3, [r3, #20]
   184d0:	69ba      	ldr	r2, [r7, #24]
   184d2:	0010      	movs	r0, r2
   184d4:	4798      	blx	r3
   184d6:	e04a      	b.n	1856e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   184d8:	697b      	ldr	r3, [r7, #20]
   184da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   184dc:	b29a      	uxth	r2, r3
   184de:	230e      	movs	r3, #14
   184e0:	18fb      	adds	r3, r7, r3
   184e2:	05d2      	lsls	r2, r2, #23
   184e4:	0dd2      	lsrs	r2, r2, #23
   184e6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   184e8:	69bb      	ldr	r3, [r7, #24]
   184ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   184ec:	220e      	movs	r2, #14
   184ee:	18ba      	adds	r2, r7, r2
   184f0:	8812      	ldrh	r2, [r2, #0]
   184f2:	b2d2      	uxtb	r2, r2
   184f4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   184f6:	69bb      	ldr	r3, [r7, #24]
   184f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   184fa:	1c5a      	adds	r2, r3, #1
   184fc:	69bb      	ldr	r3, [r7, #24]
   184fe:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   18500:	69bb      	ldr	r3, [r7, #24]
   18502:	795b      	ldrb	r3, [r3, #5]
   18504:	2b01      	cmp	r3, #1
   18506:	d10d      	bne.n	18524 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   18508:	69bb      	ldr	r3, [r7, #24]
   1850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1850c:	220e      	movs	r2, #14
   1850e:	18ba      	adds	r2, r7, r2
   18510:	8812      	ldrh	r2, [r2, #0]
   18512:	0a12      	lsrs	r2, r2, #8
   18514:	b292      	uxth	r2, r2
   18516:	b2d2      	uxtb	r2, r2
   18518:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   1851a:	69bb      	ldr	r3, [r7, #24]
   1851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1851e:	1c5a      	adds	r2, r3, #1
   18520:	69bb      	ldr	r3, [r7, #24]
   18522:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   18524:	69bb      	ldr	r3, [r7, #24]
   18526:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   18528:	b29b      	uxth	r3, r3
   1852a:	3b01      	subs	r3, #1
   1852c:	b29b      	uxth	r3, r3
   1852e:	69ba      	ldr	r2, [r7, #24]
   18530:	1c19      	adds	r1, r3, #0
   18532:	8591      	strh	r1, [r2, #44]	; 0x2c
   18534:	2b00      	cmp	r3, #0
   18536:	d11a      	bne.n	1856e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   18538:	697b      	ldr	r3, [r7, #20]
   1853a:	2204      	movs	r2, #4
   1853c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1853e:	69bb      	ldr	r3, [r7, #24]
   18540:	2232      	movs	r2, #50	; 0x32
   18542:	2100      	movs	r1, #0
   18544:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   18546:	2310      	movs	r3, #16
   18548:	18fb      	adds	r3, r7, r3
   1854a:	881b      	ldrh	r3, [r3, #0]
   1854c:	2202      	movs	r2, #2
   1854e:	4013      	ands	r3, r2
					if (callback_status
   18550:	d00d      	beq.n	1856e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   18552:	69bb      	ldr	r3, [r7, #24]
   18554:	691b      	ldr	r3, [r3, #16]
   18556:	69ba      	ldr	r2, [r7, #24]
   18558:	0010      	movs	r0, r2
   1855a:	4798      	blx	r3
   1855c:	e007      	b.n	1856e <_usart_interrupt_handler+0x2ae>
   1855e:	46c0      	nop			; (mov r8, r8)
   18560:	20005888 	.word	0x20005888
   18564:	000180a1 	.word	0x000180a1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   18568:	697b      	ldr	r3, [r7, #20]
   1856a:	2204      	movs	r2, #4
   1856c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1856e:	2312      	movs	r3, #18
   18570:	18fb      	adds	r3, r7, r3
   18572:	881b      	ldrh	r3, [r3, #0]
   18574:	2210      	movs	r2, #16
   18576:	4013      	ands	r3, r2
   18578:	d010      	beq.n	1859c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1857a:	697b      	ldr	r3, [r7, #20]
   1857c:	2210      	movs	r2, #16
   1857e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   18580:	697b      	ldr	r3, [r7, #20]
   18582:	2210      	movs	r2, #16
   18584:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   18586:	2310      	movs	r3, #16
   18588:	18fb      	adds	r3, r7, r3
   1858a:	881b      	ldrh	r3, [r3, #0]
   1858c:	2210      	movs	r2, #16
   1858e:	4013      	ands	r3, r2
   18590:	d004      	beq.n	1859c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   18592:	69bb      	ldr	r3, [r7, #24]
   18594:	69db      	ldr	r3, [r3, #28]
   18596:	69ba      	ldr	r2, [r7, #24]
   18598:	0010      	movs	r0, r2
   1859a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1859c:	2312      	movs	r3, #18
   1859e:	18fb      	adds	r3, r7, r3
   185a0:	881b      	ldrh	r3, [r3, #0]
   185a2:	2220      	movs	r2, #32
   185a4:	4013      	ands	r3, r2
   185a6:	d010      	beq.n	185ca <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   185a8:	697b      	ldr	r3, [r7, #20]
   185aa:	2220      	movs	r2, #32
   185ac:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   185ae:	697b      	ldr	r3, [r7, #20]
   185b0:	2220      	movs	r2, #32
   185b2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   185b4:	2310      	movs	r3, #16
   185b6:	18fb      	adds	r3, r7, r3
   185b8:	881b      	ldrh	r3, [r3, #0]
   185ba:	2208      	movs	r2, #8
   185bc:	4013      	ands	r3, r2
   185be:	d004      	beq.n	185ca <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   185c0:	69bb      	ldr	r3, [r7, #24]
   185c2:	699b      	ldr	r3, [r3, #24]
   185c4:	69ba      	ldr	r2, [r7, #24]
   185c6:	0010      	movs	r0, r2
   185c8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   185ca:	2312      	movs	r3, #18
   185cc:	18fb      	adds	r3, r7, r3
   185ce:	881b      	ldrh	r3, [r3, #0]
   185d0:	2208      	movs	r2, #8
   185d2:	4013      	ands	r3, r2
   185d4:	d010      	beq.n	185f8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   185d6:	697b      	ldr	r3, [r7, #20]
   185d8:	2208      	movs	r2, #8
   185da:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   185dc:	697b      	ldr	r3, [r7, #20]
   185de:	2208      	movs	r2, #8
   185e0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   185e2:	2310      	movs	r3, #16
   185e4:	18fb      	adds	r3, r7, r3
   185e6:	881b      	ldrh	r3, [r3, #0]
   185e8:	2220      	movs	r2, #32
   185ea:	4013      	ands	r3, r2
   185ec:	d004      	beq.n	185f8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   185ee:	69bb      	ldr	r3, [r7, #24]
   185f0:	6a1b      	ldr	r3, [r3, #32]
   185f2:	69ba      	ldr	r2, [r7, #24]
   185f4:	0010      	movs	r0, r2
   185f6:	4798      	blx	r3
		}
	}
#endif
}
   185f8:	46c0      	nop			; (mov r8, r8)
   185fa:	46bd      	mov	sp, r7
   185fc:	b008      	add	sp, #32
   185fe:	bd80      	pop	{r7, pc}

00018600 <system_gclk_gen_get_config_defaults>:
{
   18600:	b580      	push	{r7, lr}
   18602:	b082      	sub	sp, #8
   18604:	af00      	add	r7, sp, #0
   18606:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   18608:	687b      	ldr	r3, [r7, #4]
   1860a:	2201      	movs	r2, #1
   1860c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1860e:	687b      	ldr	r3, [r7, #4]
   18610:	2200      	movs	r2, #0
   18612:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   18614:	687b      	ldr	r3, [r7, #4]
   18616:	2206      	movs	r2, #6
   18618:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   1861a:	687b      	ldr	r3, [r7, #4]
   1861c:	2200      	movs	r2, #0
   1861e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   18620:	687b      	ldr	r3, [r7, #4]
   18622:	2200      	movs	r2, #0
   18624:	725a      	strb	r2, [r3, #9]
}
   18626:	46c0      	nop			; (mov r8, r8)
   18628:	46bd      	mov	sp, r7
   1862a:	b002      	add	sp, #8
   1862c:	bd80      	pop	{r7, pc}

0001862e <system_gclk_chan_get_config_defaults>:
{
   1862e:	b580      	push	{r7, lr}
   18630:	b082      	sub	sp, #8
   18632:	af00      	add	r7, sp, #0
   18634:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   18636:	687b      	ldr	r3, [r7, #4]
   18638:	2200      	movs	r2, #0
   1863a:	701a      	strb	r2, [r3, #0]
}
   1863c:	46c0      	nop			; (mov r8, r8)
   1863e:	46bd      	mov	sp, r7
   18640:	b002      	add	sp, #8
   18642:	bd80      	pop	{r7, pc}

00018644 <system_clock_source_osc8m_get_config_defaults>:
{
   18644:	b580      	push	{r7, lr}
   18646:	b082      	sub	sp, #8
   18648:	af00      	add	r7, sp, #0
   1864a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   1864c:	687b      	ldr	r3, [r7, #4]
   1864e:	2203      	movs	r2, #3
   18650:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   18652:	687b      	ldr	r3, [r7, #4]
   18654:	2200      	movs	r2, #0
   18656:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   18658:	687b      	ldr	r3, [r7, #4]
   1865a:	2201      	movs	r2, #1
   1865c:	709a      	strb	r2, [r3, #2]
}
   1865e:	46c0      	nop			; (mov r8, r8)
   18660:	46bd      	mov	sp, r7
   18662:	b002      	add	sp, #8
   18664:	bd80      	pop	{r7, pc}
	...

00018668 <system_cpu_clock_set_divider>:
{
   18668:	b580      	push	{r7, lr}
   1866a:	b082      	sub	sp, #8
   1866c:	af00      	add	r7, sp, #0
   1866e:	0002      	movs	r2, r0
   18670:	1dfb      	adds	r3, r7, #7
   18672:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   18674:	4a03      	ldr	r2, [pc, #12]	; (18684 <system_cpu_clock_set_divider+0x1c>)
   18676:	1dfb      	adds	r3, r7, #7
   18678:	781b      	ldrb	r3, [r3, #0]
   1867a:	7213      	strb	r3, [r2, #8]
}
   1867c:	46c0      	nop			; (mov r8, r8)
   1867e:	46bd      	mov	sp, r7
   18680:	b002      	add	sp, #8
   18682:	bd80      	pop	{r7, pc}
   18684:	40000400 	.word	0x40000400

00018688 <system_apb_clock_set_divider>:
{
   18688:	b580      	push	{r7, lr}
   1868a:	b082      	sub	sp, #8
   1868c:	af00      	add	r7, sp, #0
   1868e:	0002      	movs	r2, r0
   18690:	1dfb      	adds	r3, r7, #7
   18692:	701a      	strb	r2, [r3, #0]
   18694:	1dbb      	adds	r3, r7, #6
   18696:	1c0a      	adds	r2, r1, #0
   18698:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1869a:	1dfb      	adds	r3, r7, #7
   1869c:	781b      	ldrb	r3, [r3, #0]
   1869e:	2b01      	cmp	r3, #1
   186a0:	d008      	beq.n	186b4 <system_apb_clock_set_divider+0x2c>
   186a2:	2b02      	cmp	r3, #2
   186a4:	d00b      	beq.n	186be <system_apb_clock_set_divider+0x36>
   186a6:	2b00      	cmp	r3, #0
   186a8:	d10e      	bne.n	186c8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   186aa:	4a0b      	ldr	r2, [pc, #44]	; (186d8 <system_apb_clock_set_divider+0x50>)
   186ac:	1dbb      	adds	r3, r7, #6
   186ae:	781b      	ldrb	r3, [r3, #0]
   186b0:	7253      	strb	r3, [r2, #9]
			break;
   186b2:	e00b      	b.n	186cc <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   186b4:	4a08      	ldr	r2, [pc, #32]	; (186d8 <system_apb_clock_set_divider+0x50>)
   186b6:	1dbb      	adds	r3, r7, #6
   186b8:	781b      	ldrb	r3, [r3, #0]
   186ba:	7293      	strb	r3, [r2, #10]
			break;
   186bc:	e006      	b.n	186cc <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   186be:	4a06      	ldr	r2, [pc, #24]	; (186d8 <system_apb_clock_set_divider+0x50>)
   186c0:	1dbb      	adds	r3, r7, #6
   186c2:	781b      	ldrb	r3, [r3, #0]
   186c4:	72d3      	strb	r3, [r2, #11]
			break;
   186c6:	e001      	b.n	186cc <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   186c8:	2317      	movs	r3, #23
   186ca:	e000      	b.n	186ce <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   186cc:	2300      	movs	r3, #0
}
   186ce:	0018      	movs	r0, r3
   186d0:	46bd      	mov	sp, r7
   186d2:	b002      	add	sp, #8
   186d4:	bd80      	pop	{r7, pc}
   186d6:	46c0      	nop			; (mov r8, r8)
   186d8:	40000400 	.word	0x40000400

000186dc <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   186dc:	b580      	push	{r7, lr}
   186de:	b082      	sub	sp, #8
   186e0:	af00      	add	r7, sp, #0
   186e2:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   186e4:	687b      	ldr	r3, [r7, #4]
   186e6:	2201      	movs	r2, #1
   186e8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   186ea:	687b      	ldr	r3, [r7, #4]
   186ec:	2200      	movs	r2, #0
   186ee:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   186f0:	687b      	ldr	r3, [r7, #4]
   186f2:	2200      	movs	r2, #0
   186f4:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   186f6:	687b      	ldr	r3, [r7, #4]
   186f8:	2200      	movs	r2, #0
   186fa:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   186fc:	687b      	ldr	r3, [r7, #4]
   186fe:	2200      	movs	r2, #0
   18700:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   18702:	687b      	ldr	r3, [r7, #4]
   18704:	4a0a      	ldr	r2, [pc, #40]	; (18730 <system_clock_source_dpll_get_config_defaults+0x54>)
   18706:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   18708:	687b      	ldr	r3, [r7, #4]
   1870a:	2280      	movs	r2, #128	; 0x80
   1870c:	0212      	lsls	r2, r2, #8
   1870e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   18710:	687b      	ldr	r3, [r7, #4]
   18712:	2201      	movs	r2, #1
   18714:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   18716:	687b      	ldr	r3, [r7, #4]
   18718:	2200      	movs	r2, #0
   1871a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   1871c:	687b      	ldr	r3, [r7, #4]
   1871e:	2200      	movs	r2, #0
   18720:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   18722:	687b      	ldr	r3, [r7, #4]
   18724:	2200      	movs	r2, #0
   18726:	749a      	strb	r2, [r3, #18]
};
   18728:	46c0      	nop			; (mov r8, r8)
   1872a:	46bd      	mov	sp, r7
   1872c:	b002      	add	sp, #8
   1872e:	bd80      	pop	{r7, pc}
   18730:	02dc6c00 	.word	0x02dc6c00

00018734 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   18734:	b580      	push	{r7, lr}
   18736:	b082      	sub	sp, #8
   18738:	af00      	add	r7, sp, #0
   1873a:	0002      	movs	r2, r0
   1873c:	1dfb      	adds	r3, r7, #7
   1873e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   18740:	4a08      	ldr	r2, [pc, #32]	; (18764 <system_flash_set_waitstates+0x30>)
   18742:	1dfb      	adds	r3, r7, #7
   18744:	781b      	ldrb	r3, [r3, #0]
   18746:	210f      	movs	r1, #15
   18748:	400b      	ands	r3, r1
   1874a:	b2d9      	uxtb	r1, r3
   1874c:	6853      	ldr	r3, [r2, #4]
   1874e:	200f      	movs	r0, #15
   18750:	4001      	ands	r1, r0
   18752:	0049      	lsls	r1, r1, #1
   18754:	201e      	movs	r0, #30
   18756:	4383      	bics	r3, r0
   18758:	430b      	orrs	r3, r1
   1875a:	6053      	str	r3, [r2, #4]
}
   1875c:	46c0      	nop			; (mov r8, r8)
   1875e:	46bd      	mov	sp, r7
   18760:	b002      	add	sp, #8
   18762:	bd80      	pop	{r7, pc}
   18764:	41004000 	.word	0x41004000

00018768 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   18768:	b580      	push	{r7, lr}
   1876a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1876c:	46c0      	nop			; (mov r8, r8)
   1876e:	4b04      	ldr	r3, [pc, #16]	; (18780 <_system_dfll_wait_for_sync+0x18>)
   18770:	68db      	ldr	r3, [r3, #12]
   18772:	2210      	movs	r2, #16
   18774:	4013      	ands	r3, r2
   18776:	d0fa      	beq.n	1876e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   18778:	46c0      	nop			; (mov r8, r8)
   1877a:	46bd      	mov	sp, r7
   1877c:	bd80      	pop	{r7, pc}
   1877e:	46c0      	nop			; (mov r8, r8)
   18780:	40000800 	.word	0x40000800

00018784 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   18784:	b580      	push	{r7, lr}
   18786:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   18788:	4b0c      	ldr	r3, [pc, #48]	; (187bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1878a:	2202      	movs	r2, #2
   1878c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1878e:	4b0c      	ldr	r3, [pc, #48]	; (187c0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   18790:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   18792:	4a0a      	ldr	r2, [pc, #40]	; (187bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   18794:	4b0b      	ldr	r3, [pc, #44]	; (187c4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   18796:	689b      	ldr	r3, [r3, #8]
   18798:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1879a:	4a08      	ldr	r2, [pc, #32]	; (187bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1879c:	4b09      	ldr	r3, [pc, #36]	; (187c4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1879e:	685b      	ldr	r3, [r3, #4]
   187a0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   187a2:	4b06      	ldr	r3, [pc, #24]	; (187bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   187a4:	2200      	movs	r2, #0
   187a6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   187a8:	4b05      	ldr	r3, [pc, #20]	; (187c0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   187aa:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   187ac:	4a03      	ldr	r2, [pc, #12]	; (187bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   187ae:	4b05      	ldr	r3, [pc, #20]	; (187c4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   187b0:	681b      	ldr	r3, [r3, #0]
   187b2:	b29b      	uxth	r3, r3
   187b4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   187b6:	46c0      	nop			; (mov r8, r8)
   187b8:	46bd      	mov	sp, r7
   187ba:	bd80      	pop	{r7, pc}
   187bc:	40000800 	.word	0x40000800
   187c0:	00018769 	.word	0x00018769
   187c4:	20003f14 	.word	0x20003f14

000187c8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   187c8:	b580      	push	{r7, lr}
   187ca:	b082      	sub	sp, #8
   187cc:	af00      	add	r7, sp, #0
   187ce:	0002      	movs	r2, r0
   187d0:	1dfb      	adds	r3, r7, #7
   187d2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   187d4:	1dfb      	adds	r3, r7, #7
   187d6:	781b      	ldrb	r3, [r3, #0]
   187d8:	2b08      	cmp	r3, #8
   187da:	d841      	bhi.n	18860 <system_clock_source_get_hz+0x98>
   187dc:	009a      	lsls	r2, r3, #2
   187de:	4b23      	ldr	r3, [pc, #140]	; (1886c <system_clock_source_get_hz+0xa4>)
   187e0:	18d3      	adds	r3, r2, r3
   187e2:	681b      	ldr	r3, [r3, #0]
   187e4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   187e6:	4b22      	ldr	r3, [pc, #136]	; (18870 <system_clock_source_get_hz+0xa8>)
   187e8:	691b      	ldr	r3, [r3, #16]
   187ea:	e03a      	b.n	18862 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   187ec:	4b21      	ldr	r3, [pc, #132]	; (18874 <system_clock_source_get_hz+0xac>)
   187ee:	6a1b      	ldr	r3, [r3, #32]
   187f0:	059b      	lsls	r3, r3, #22
   187f2:	0f9b      	lsrs	r3, r3, #30
   187f4:	b2db      	uxtb	r3, r3
   187f6:	001a      	movs	r2, r3
   187f8:	4b1f      	ldr	r3, [pc, #124]	; (18878 <system_clock_source_get_hz+0xb0>)
   187fa:	40d3      	lsrs	r3, r2
   187fc:	e031      	b.n	18862 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   187fe:	2380      	movs	r3, #128	; 0x80
   18800:	021b      	lsls	r3, r3, #8
   18802:	e02e      	b.n	18862 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   18804:	2380      	movs	r3, #128	; 0x80
   18806:	021b      	lsls	r3, r3, #8
   18808:	e02b      	b.n	18862 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   1880a:	4b19      	ldr	r3, [pc, #100]	; (18870 <system_clock_source_get_hz+0xa8>)
   1880c:	695b      	ldr	r3, [r3, #20]
   1880e:	e028      	b.n	18862 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   18810:	4b17      	ldr	r3, [pc, #92]	; (18870 <system_clock_source_get_hz+0xa8>)
   18812:	681b      	ldr	r3, [r3, #0]
   18814:	2202      	movs	r2, #2
   18816:	4013      	ands	r3, r2
   18818:	d101      	bne.n	1881e <system_clock_source_get_hz+0x56>
			return 0;
   1881a:	2300      	movs	r3, #0
   1881c:	e021      	b.n	18862 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   1881e:	4b17      	ldr	r3, [pc, #92]	; (1887c <system_clock_source_get_hz+0xb4>)
   18820:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   18822:	4b13      	ldr	r3, [pc, #76]	; (18870 <system_clock_source_get_hz+0xa8>)
   18824:	681b      	ldr	r3, [r3, #0]
   18826:	2224      	movs	r2, #36	; 0x24
   18828:	4013      	ands	r3, r2
   1882a:	2b04      	cmp	r3, #4
   1882c:	d109      	bne.n	18842 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1882e:	2000      	movs	r0, #0
   18830:	4b13      	ldr	r3, [pc, #76]	; (18880 <system_clock_source_get_hz+0xb8>)
   18832:	4798      	blx	r3
   18834:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   18836:	4b0e      	ldr	r3, [pc, #56]	; (18870 <system_clock_source_get_hz+0xa8>)
   18838:	689b      	ldr	r3, [r3, #8]
   1883a:	041b      	lsls	r3, r3, #16
   1883c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1883e:	4353      	muls	r3, r2
   18840:	e00f      	b.n	18862 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   18842:	4b10      	ldr	r3, [pc, #64]	; (18884 <system_clock_source_get_hz+0xbc>)
   18844:	e00d      	b.n	18862 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   18846:	4a0b      	ldr	r2, [pc, #44]	; (18874 <system_clock_source_get_hz+0xac>)
   18848:	2350      	movs	r3, #80	; 0x50
   1884a:	5cd3      	ldrb	r3, [r2, r3]
   1884c:	b2db      	uxtb	r3, r3
   1884e:	001a      	movs	r2, r3
   18850:	2304      	movs	r3, #4
   18852:	4013      	ands	r3, r2
   18854:	d101      	bne.n	1885a <system_clock_source_get_hz+0x92>
			return 0;
   18856:	2300      	movs	r3, #0
   18858:	e003      	b.n	18862 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   1885a:	4b05      	ldr	r3, [pc, #20]	; (18870 <system_clock_source_get_hz+0xa8>)
   1885c:	68db      	ldr	r3, [r3, #12]
   1885e:	e000      	b.n	18862 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   18860:	2300      	movs	r3, #0
	}
}
   18862:	0018      	movs	r0, r3
   18864:	46bd      	mov	sp, r7
   18866:	b002      	add	sp, #8
   18868:	bd80      	pop	{r7, pc}
   1886a:	46c0      	nop			; (mov r8, r8)
   1886c:	00029350 	.word	0x00029350
   18870:	20003f14 	.word	0x20003f14
   18874:	40000800 	.word	0x40000800
   18878:	007a1200 	.word	0x007a1200
   1887c:	00018769 	.word	0x00018769
   18880:	00019265 	.word	0x00019265
   18884:	02dc6c00 	.word	0x02dc6c00

00018888 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   18888:	b580      	push	{r7, lr}
   1888a:	b084      	sub	sp, #16
   1888c:	af00      	add	r7, sp, #0
   1888e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   18890:	4b1a      	ldr	r3, [pc, #104]	; (188fc <system_clock_source_osc8m_set_config+0x74>)
   18892:	6a1b      	ldr	r3, [r3, #32]
   18894:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   18896:	687b      	ldr	r3, [r7, #4]
   18898:	781b      	ldrb	r3, [r3, #0]
   1889a:	1c1a      	adds	r2, r3, #0
   1889c:	2303      	movs	r3, #3
   1889e:	4013      	ands	r3, r2
   188a0:	b2da      	uxtb	r2, r3
   188a2:	230d      	movs	r3, #13
   188a4:	18fb      	adds	r3, r7, r3
   188a6:	2103      	movs	r1, #3
   188a8:	400a      	ands	r2, r1
   188aa:	0010      	movs	r0, r2
   188ac:	781a      	ldrb	r2, [r3, #0]
   188ae:	2103      	movs	r1, #3
   188b0:	438a      	bics	r2, r1
   188b2:	1c11      	adds	r1, r2, #0
   188b4:	1c02      	adds	r2, r0, #0
   188b6:	430a      	orrs	r2, r1
   188b8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   188ba:	687b      	ldr	r3, [r7, #4]
   188bc:	789a      	ldrb	r2, [r3, #2]
   188be:	230c      	movs	r3, #12
   188c0:	18fb      	adds	r3, r7, r3
   188c2:	01d0      	lsls	r0, r2, #7
   188c4:	781a      	ldrb	r2, [r3, #0]
   188c6:	217f      	movs	r1, #127	; 0x7f
   188c8:	400a      	ands	r2, r1
   188ca:	1c11      	adds	r1, r2, #0
   188cc:	1c02      	adds	r2, r0, #0
   188ce:	430a      	orrs	r2, r1
   188d0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   188d2:	687b      	ldr	r3, [r7, #4]
   188d4:	785a      	ldrb	r2, [r3, #1]
   188d6:	230c      	movs	r3, #12
   188d8:	18fb      	adds	r3, r7, r3
   188da:	2101      	movs	r1, #1
   188dc:	400a      	ands	r2, r1
   188de:	0190      	lsls	r0, r2, #6
   188e0:	781a      	ldrb	r2, [r3, #0]
   188e2:	2140      	movs	r1, #64	; 0x40
   188e4:	438a      	bics	r2, r1
   188e6:	1c11      	adds	r1, r2, #0
   188e8:	1c02      	adds	r2, r0, #0
   188ea:	430a      	orrs	r2, r1
   188ec:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   188ee:	4b03      	ldr	r3, [pc, #12]	; (188fc <system_clock_source_osc8m_set_config+0x74>)
   188f0:	68fa      	ldr	r2, [r7, #12]
   188f2:	621a      	str	r2, [r3, #32]
}
   188f4:	46c0      	nop			; (mov r8, r8)
   188f6:	46bd      	mov	sp, r7
   188f8:	b004      	add	sp, #16
   188fa:	bd80      	pop	{r7, pc}
   188fc:	40000800 	.word	0x40000800

00018900 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   18900:	b580      	push	{r7, lr}
   18902:	b086      	sub	sp, #24
   18904:	af00      	add	r7, sp, #0
   18906:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   18908:	687b      	ldr	r3, [r7, #4]
   1890a:	68db      	ldr	r3, [r3, #12]
   1890c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1890e:	687b      	ldr	r3, [r7, #4]
   18910:	7d1b      	ldrb	r3, [r3, #20]
   18912:	2b01      	cmp	r3, #1
   18914:	d10a      	bne.n	1892c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   18916:	687b      	ldr	r3, [r7, #4]
   18918:	8a1b      	ldrh	r3, [r3, #16]
   1891a:	3301      	adds	r3, #1
   1891c:	005b      	lsls	r3, r3, #1
   1891e:	001a      	movs	r2, r3
   18920:	4b36      	ldr	r3, [pc, #216]	; (189fc <system_clock_source_dpll_set_config+0xfc>)
   18922:	0011      	movs	r1, r2
   18924:	6978      	ldr	r0, [r7, #20]
   18926:	4798      	blx	r3
   18928:	0003      	movs	r3, r0
   1892a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   1892c:	687b      	ldr	r3, [r7, #4]
   1892e:	689b      	ldr	r3, [r3, #8]
   18930:	011a      	lsls	r2, r3, #4
   18932:	4b32      	ldr	r3, [pc, #200]	; (189fc <system_clock_source_dpll_set_config+0xfc>)
   18934:	6979      	ldr	r1, [r7, #20]
   18936:	0010      	movs	r0, r2
   18938:	4798      	blx	r3
   1893a:	0003      	movs	r3, r0
   1893c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   1893e:	693b      	ldr	r3, [r7, #16]
   18940:	b2da      	uxtb	r2, r3
   18942:	230f      	movs	r3, #15
   18944:	18fb      	adds	r3, r7, r3
   18946:	210f      	movs	r1, #15
   18948:	400a      	ands	r2, r1
   1894a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   1894c:	693b      	ldr	r3, [r7, #16]
   1894e:	091b      	lsrs	r3, r3, #4
   18950:	3b01      	subs	r3, #1
   18952:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   18954:	492a      	ldr	r1, [pc, #168]	; (18a00 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   18956:	687b      	ldr	r3, [r7, #4]
   18958:	781b      	ldrb	r3, [r3, #0]
   1895a:	01db      	lsls	r3, r3, #7
   1895c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1895e:	687b      	ldr	r3, [r7, #4]
   18960:	785b      	ldrb	r3, [r3, #1]
   18962:	019b      	lsls	r3, r3, #6
   18964:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   18966:	4313      	orrs	r3, r2
   18968:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   1896a:	2344      	movs	r3, #68	; 0x44
   1896c:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   1896e:	4b24      	ldr	r3, [pc, #144]	; (18a00 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   18970:	220f      	movs	r2, #15
   18972:	18ba      	adds	r2, r7, r2
   18974:	7812      	ldrb	r2, [r2, #0]
   18976:	0412      	lsls	r2, r2, #16
   18978:	0011      	movs	r1, r2
   1897a:	22f0      	movs	r2, #240	; 0xf0
   1897c:	0312      	lsls	r2, r2, #12
   1897e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   18980:	693a      	ldr	r2, [r7, #16]
   18982:	0512      	lsls	r2, r2, #20
   18984:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   18986:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   18988:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   1898a:	4b1d      	ldr	r3, [pc, #116]	; (18a00 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1898c:	687a      	ldr	r2, [r7, #4]
   1898e:	8a12      	ldrh	r2, [r2, #16]
   18990:	0412      	lsls	r2, r2, #16
   18992:	0011      	movs	r1, r2
   18994:	4a1b      	ldr	r2, [pc, #108]	; (18a04 <system_clock_source_dpll_set_config+0x104>)
   18996:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   18998:	687a      	ldr	r2, [r7, #4]
   1899a:	7892      	ldrb	r2, [r2, #2]
   1899c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1899e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   189a0:	687a      	ldr	r2, [r7, #4]
   189a2:	7cd2      	ldrb	r2, [r2, #19]
   189a4:	0212      	lsls	r2, r2, #8
   189a6:	0010      	movs	r0, r2
   189a8:	22e0      	movs	r2, #224	; 0xe0
   189aa:	00d2      	lsls	r2, r2, #3
   189ac:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   189ae:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   189b0:	687a      	ldr	r2, [r7, #4]
   189b2:	7d12      	ldrb	r2, [r2, #20]
   189b4:	0112      	lsls	r2, r2, #4
   189b6:	0010      	movs	r0, r2
   189b8:	2230      	movs	r2, #48	; 0x30
   189ba:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   189bc:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   189be:	687a      	ldr	r2, [r7, #4]
   189c0:	78d2      	ldrb	r2, [r2, #3]
   189c2:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   189c4:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   189c6:	687a      	ldr	r2, [r7, #4]
   189c8:	7912      	ldrb	r2, [r2, #4]
   189ca:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   189cc:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   189ce:	687a      	ldr	r2, [r7, #4]
   189d0:	7c92      	ldrb	r2, [r2, #18]
   189d2:	0010      	movs	r0, r2
   189d4:	2203      	movs	r2, #3
   189d6:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   189d8:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   189da:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   189dc:	693b      	ldr	r3, [r7, #16]
   189de:	3301      	adds	r3, #1
   189e0:	011a      	lsls	r2, r3, #4
   189e2:	230f      	movs	r3, #15
   189e4:	18fb      	adds	r3, r7, r3
   189e6:	781b      	ldrb	r3, [r3, #0]
   189e8:	18d3      	adds	r3, r2, r3
   189ea:	697a      	ldr	r2, [r7, #20]
   189ec:	4353      	muls	r3, r2
   189ee:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   189f0:	4b05      	ldr	r3, [pc, #20]	; (18a08 <system_clock_source_dpll_set_config+0x108>)
   189f2:	60da      	str	r2, [r3, #12]
}
   189f4:	46c0      	nop			; (mov r8, r8)
   189f6:	46bd      	mov	sp, r7
   189f8:	b006      	add	sp, #24
   189fa:	bd80      	pop	{r7, pc}
   189fc:	00021cfd 	.word	0x00021cfd
   18a00:	40000800 	.word	0x40000800
   18a04:	07ff0000 	.word	0x07ff0000
   18a08:	20003f14 	.word	0x20003f14

00018a0c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   18a0c:	b580      	push	{r7, lr}
   18a0e:	b082      	sub	sp, #8
   18a10:	af00      	add	r7, sp, #0
   18a12:	0002      	movs	r2, r0
   18a14:	1dfb      	adds	r3, r7, #7
   18a16:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   18a18:	1dfb      	adds	r3, r7, #7
   18a1a:	781b      	ldrb	r3, [r3, #0]
   18a1c:	2b08      	cmp	r3, #8
   18a1e:	d83b      	bhi.n	18a98 <system_clock_source_enable+0x8c>
   18a20:	009a      	lsls	r2, r3, #2
   18a22:	4b21      	ldr	r3, [pc, #132]	; (18aa8 <system_clock_source_enable+0x9c>)
   18a24:	18d3      	adds	r3, r2, r3
   18a26:	681b      	ldr	r3, [r3, #0]
   18a28:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   18a2a:	4b20      	ldr	r3, [pc, #128]	; (18aac <system_clock_source_enable+0xa0>)
   18a2c:	4a1f      	ldr	r2, [pc, #124]	; (18aac <system_clock_source_enable+0xa0>)
   18a2e:	6a12      	ldr	r2, [r2, #32]
   18a30:	2102      	movs	r1, #2
   18a32:	430a      	orrs	r2, r1
   18a34:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   18a36:	2300      	movs	r3, #0
   18a38:	e031      	b.n	18a9e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   18a3a:	4b1c      	ldr	r3, [pc, #112]	; (18aac <system_clock_source_enable+0xa0>)
   18a3c:	4a1b      	ldr	r2, [pc, #108]	; (18aac <system_clock_source_enable+0xa0>)
   18a3e:	6992      	ldr	r2, [r2, #24]
   18a40:	2102      	movs	r1, #2
   18a42:	430a      	orrs	r2, r1
   18a44:	619a      	str	r2, [r3, #24]
		break;
   18a46:	e029      	b.n	18a9c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   18a48:	4a18      	ldr	r2, [pc, #96]	; (18aac <system_clock_source_enable+0xa0>)
   18a4a:	4b18      	ldr	r3, [pc, #96]	; (18aac <system_clock_source_enable+0xa0>)
   18a4c:	8a1b      	ldrh	r3, [r3, #16]
   18a4e:	b29b      	uxth	r3, r3
   18a50:	2102      	movs	r1, #2
   18a52:	430b      	orrs	r3, r1
   18a54:	b29b      	uxth	r3, r3
   18a56:	8213      	strh	r3, [r2, #16]
		break;
   18a58:	e020      	b.n	18a9c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   18a5a:	4a14      	ldr	r2, [pc, #80]	; (18aac <system_clock_source_enable+0xa0>)
   18a5c:	4b13      	ldr	r3, [pc, #76]	; (18aac <system_clock_source_enable+0xa0>)
   18a5e:	8a9b      	ldrh	r3, [r3, #20]
   18a60:	b29b      	uxth	r3, r3
   18a62:	2102      	movs	r1, #2
   18a64:	430b      	orrs	r3, r1
   18a66:	b29b      	uxth	r3, r3
   18a68:	8293      	strh	r3, [r2, #20]
		break;
   18a6a:	e017      	b.n	18a9c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   18a6c:	4b10      	ldr	r3, [pc, #64]	; (18ab0 <system_clock_source_enable+0xa4>)
   18a6e:	681b      	ldr	r3, [r3, #0]
   18a70:	2202      	movs	r2, #2
   18a72:	431a      	orrs	r2, r3
   18a74:	4b0e      	ldr	r3, [pc, #56]	; (18ab0 <system_clock_source_enable+0xa4>)
   18a76:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   18a78:	4b0e      	ldr	r3, [pc, #56]	; (18ab4 <system_clock_source_enable+0xa8>)
   18a7a:	4798      	blx	r3
		break;
   18a7c:	e00e      	b.n	18a9c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   18a7e:	4a0b      	ldr	r2, [pc, #44]	; (18aac <system_clock_source_enable+0xa0>)
   18a80:	490a      	ldr	r1, [pc, #40]	; (18aac <system_clock_source_enable+0xa0>)
   18a82:	2344      	movs	r3, #68	; 0x44
   18a84:	5ccb      	ldrb	r3, [r1, r3]
   18a86:	b2db      	uxtb	r3, r3
   18a88:	2102      	movs	r1, #2
   18a8a:	430b      	orrs	r3, r1
   18a8c:	b2d9      	uxtb	r1, r3
   18a8e:	2344      	movs	r3, #68	; 0x44
   18a90:	54d1      	strb	r1, [r2, r3]
		break;
   18a92:	e003      	b.n	18a9c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   18a94:	2300      	movs	r3, #0
   18a96:	e002      	b.n	18a9e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   18a98:	2317      	movs	r3, #23
   18a9a:	e000      	b.n	18a9e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   18a9c:	2300      	movs	r3, #0
}
   18a9e:	0018      	movs	r0, r3
   18aa0:	46bd      	mov	sp, r7
   18aa2:	b002      	add	sp, #8
   18aa4:	bd80      	pop	{r7, pc}
   18aa6:	46c0      	nop			; (mov r8, r8)
   18aa8:	00029374 	.word	0x00029374
   18aac:	40000800 	.word	0x40000800
   18ab0:	20003f14 	.word	0x20003f14
   18ab4:	00018785 	.word	0x00018785

00018ab8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   18ab8:	b580      	push	{r7, lr}
   18aba:	b084      	sub	sp, #16
   18abc:	af00      	add	r7, sp, #0
   18abe:	0002      	movs	r2, r0
   18ac0:	1dfb      	adds	r3, r7, #7
   18ac2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   18ac4:	2300      	movs	r3, #0
   18ac6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   18ac8:	1dfb      	adds	r3, r7, #7
   18aca:	781b      	ldrb	r3, [r3, #0]
   18acc:	2b08      	cmp	r3, #8
   18ace:	d821      	bhi.n	18b14 <system_clock_source_is_ready+0x5c>
   18ad0:	009a      	lsls	r2, r3, #2
   18ad2:	4b18      	ldr	r3, [pc, #96]	; (18b34 <system_clock_source_is_ready+0x7c>)
   18ad4:	18d3      	adds	r3, r2, r3
   18ad6:	681b      	ldr	r3, [r3, #0]
   18ad8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   18ada:	2308      	movs	r3, #8
   18adc:	60fb      	str	r3, [r7, #12]
		break;
   18ade:	e01b      	b.n	18b18 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   18ae0:	2304      	movs	r3, #4
   18ae2:	60fb      	str	r3, [r7, #12]
		break;
   18ae4:	e018      	b.n	18b18 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   18ae6:	2301      	movs	r3, #1
   18ae8:	60fb      	str	r3, [r7, #12]
		break;
   18aea:	e015      	b.n	18b18 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   18aec:	2302      	movs	r3, #2
   18aee:	60fb      	str	r3, [r7, #12]
		break;
   18af0:	e012      	b.n	18b18 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   18af2:	2310      	movs	r3, #16
   18af4:	60fb      	str	r3, [r7, #12]
		}
		break;
   18af6:	e00f      	b.n	18b18 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   18af8:	4a0f      	ldr	r2, [pc, #60]	; (18b38 <system_clock_source_is_ready+0x80>)
   18afa:	2350      	movs	r3, #80	; 0x50
   18afc:	5cd3      	ldrb	r3, [r2, r3]
   18afe:	b2db      	uxtb	r3, r3
   18b00:	001a      	movs	r2, r3
   18b02:	2303      	movs	r3, #3
   18b04:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   18b06:	3b03      	subs	r3, #3
   18b08:	425a      	negs	r2, r3
   18b0a:	4153      	adcs	r3, r2
   18b0c:	b2db      	uxtb	r3, r3
   18b0e:	e00c      	b.n	18b2a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   18b10:	2301      	movs	r3, #1
   18b12:	e00a      	b.n	18b2a <system_clock_source_is_ready+0x72>

	default:
		return false;
   18b14:	2300      	movs	r3, #0
   18b16:	e008      	b.n	18b2a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   18b18:	4b07      	ldr	r3, [pc, #28]	; (18b38 <system_clock_source_is_ready+0x80>)
   18b1a:	68db      	ldr	r3, [r3, #12]
   18b1c:	68fa      	ldr	r2, [r7, #12]
   18b1e:	401a      	ands	r2, r3
   18b20:	68fb      	ldr	r3, [r7, #12]
   18b22:	1ad3      	subs	r3, r2, r3
   18b24:	425a      	negs	r2, r3
   18b26:	4153      	adcs	r3, r2
   18b28:	b2db      	uxtb	r3, r3
}
   18b2a:	0018      	movs	r0, r3
   18b2c:	46bd      	mov	sp, r7
   18b2e:	b004      	add	sp, #16
   18b30:	bd80      	pop	{r7, pc}
   18b32:	46c0      	nop			; (mov r8, r8)
   18b34:	00029398 	.word	0x00029398
   18b38:	40000800 	.word	0x40000800

00018b3c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   18b3c:	b580      	push	{r7, lr}
   18b3e:	b082      	sub	sp, #8
   18b40:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   18b42:	003b      	movs	r3, r7
   18b44:	2203      	movs	r2, #3
   18b46:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   18b48:	2300      	movs	r3, #0
   18b4a:	607b      	str	r3, [r7, #4]
   18b4c:	e009      	b.n	18b62 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   18b4e:	687b      	ldr	r3, [r7, #4]
   18b50:	b2db      	uxtb	r3, r3
   18b52:	003a      	movs	r2, r7
   18b54:	0011      	movs	r1, r2
   18b56:	0018      	movs	r0, r3
   18b58:	4b05      	ldr	r3, [pc, #20]	; (18b70 <_switch_peripheral_gclk+0x34>)
   18b5a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   18b5c:	687b      	ldr	r3, [r7, #4]
   18b5e:	3301      	adds	r3, #1
   18b60:	607b      	str	r3, [r7, #4]
   18b62:	687b      	ldr	r3, [r7, #4]
   18b64:	2b24      	cmp	r3, #36	; 0x24
   18b66:	d9f2      	bls.n	18b4e <_switch_peripheral_gclk+0x12>
	}
}
   18b68:	46c0      	nop			; (mov r8, r8)
   18b6a:	46bd      	mov	sp, r7
   18b6c:	b002      	add	sp, #8
   18b6e:	bd80      	pop	{r7, pc}
   18b70:	00019141 	.word	0x00019141

00018b74 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   18b74:	b580      	push	{r7, lr}
   18b76:	b0a6      	sub	sp, #152	; 0x98
   18b78:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   18b7a:	4b92      	ldr	r3, [pc, #584]	; (18dc4 <system_clock_init+0x250>)
   18b7c:	22c2      	movs	r2, #194	; 0xc2
   18b7e:	00d2      	lsls	r2, r2, #3
   18b80:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   18b82:	2003      	movs	r0, #3
   18b84:	4b90      	ldr	r3, [pc, #576]	; (18dc8 <system_clock_init+0x254>)
   18b86:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   18b88:	4b90      	ldr	r3, [pc, #576]	; (18dcc <system_clock_init+0x258>)
   18b8a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   18b8c:	2394      	movs	r3, #148	; 0x94
   18b8e:	18fb      	adds	r3, r7, r3
   18b90:	0018      	movs	r0, r3
   18b92:	4b8f      	ldr	r3, [pc, #572]	; (18dd0 <system_clock_init+0x25c>)
   18b94:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   18b96:	2394      	movs	r3, #148	; 0x94
   18b98:	18fb      	adds	r3, r7, r3
   18b9a:	2200      	movs	r2, #0
   18b9c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   18b9e:	2394      	movs	r3, #148	; 0x94
   18ba0:	18fb      	adds	r3, r7, r3
   18ba2:	2201      	movs	r2, #1
   18ba4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   18ba6:	2394      	movs	r3, #148	; 0x94
   18ba8:	18fb      	adds	r3, r7, r3
   18baa:	2200      	movs	r2, #0
   18bac:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   18bae:	2394      	movs	r3, #148	; 0x94
   18bb0:	18fb      	adds	r3, r7, r3
   18bb2:	0018      	movs	r0, r3
   18bb4:	4b87      	ldr	r3, [pc, #540]	; (18dd4 <system_clock_init+0x260>)
   18bb6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   18bb8:	2006      	movs	r0, #6
   18bba:	4b87      	ldr	r3, [pc, #540]	; (18dd8 <system_clock_init+0x264>)
   18bbc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   18bbe:	4b87      	ldr	r3, [pc, #540]	; (18ddc <system_clock_init+0x268>)
   18bc0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   18bc2:	2360      	movs	r3, #96	; 0x60
   18bc4:	18fb      	adds	r3, r7, r3
   18bc6:	0018      	movs	r0, r3
   18bc8:	4b85      	ldr	r3, [pc, #532]	; (18de0 <system_clock_init+0x26c>)
   18bca:	4798      	blx	r3
   18bcc:	2360      	movs	r3, #96	; 0x60
   18bce:	18fb      	adds	r3, r7, r3
   18bd0:	2206      	movs	r2, #6
   18bd2:	701a      	strb	r2, [r3, #0]
   18bd4:	2360      	movs	r3, #96	; 0x60
   18bd6:	18fb      	adds	r3, r7, r3
   18bd8:	2208      	movs	r2, #8
   18bda:	605a      	str	r2, [r3, #4]
   18bdc:	2360      	movs	r3, #96	; 0x60
   18bde:	18fb      	adds	r3, r7, r3
   18be0:	2200      	movs	r2, #0
   18be2:	721a      	strb	r2, [r3, #8]
   18be4:	2360      	movs	r3, #96	; 0x60
   18be6:	18fb      	adds	r3, r7, r3
   18be8:	2200      	movs	r2, #0
   18bea:	725a      	strb	r2, [r3, #9]
   18bec:	2360      	movs	r3, #96	; 0x60
   18bee:	18fb      	adds	r3, r7, r3
   18bf0:	0019      	movs	r1, r3
   18bf2:	2001      	movs	r0, #1
   18bf4:	4b7b      	ldr	r3, [pc, #492]	; (18de4 <system_clock_init+0x270>)
   18bf6:	4798      	blx	r3
   18bf8:	2001      	movs	r0, #1
   18bfa:	4b7b      	ldr	r3, [pc, #492]	; (18de8 <system_clock_init+0x274>)
   18bfc:	4798      	blx	r3
   18bfe:	2354      	movs	r3, #84	; 0x54
   18c00:	18fb      	adds	r3, r7, r3
   18c02:	0018      	movs	r0, r3
   18c04:	4b76      	ldr	r3, [pc, #472]	; (18de0 <system_clock_init+0x26c>)
   18c06:	4798      	blx	r3
   18c08:	2354      	movs	r3, #84	; 0x54
   18c0a:	18fb      	adds	r3, r7, r3
   18c0c:	2203      	movs	r2, #3
   18c0e:	701a      	strb	r2, [r3, #0]
   18c10:	2354      	movs	r3, #84	; 0x54
   18c12:	18fb      	adds	r3, r7, r3
   18c14:	2201      	movs	r2, #1
   18c16:	605a      	str	r2, [r3, #4]
   18c18:	2354      	movs	r3, #84	; 0x54
   18c1a:	18fb      	adds	r3, r7, r3
   18c1c:	2201      	movs	r2, #1
   18c1e:	721a      	strb	r2, [r3, #8]
   18c20:	2354      	movs	r3, #84	; 0x54
   18c22:	18fb      	adds	r3, r7, r3
   18c24:	2200      	movs	r2, #0
   18c26:	725a      	strb	r2, [r3, #9]
   18c28:	2354      	movs	r3, #84	; 0x54
   18c2a:	18fb      	adds	r3, r7, r3
   18c2c:	0019      	movs	r1, r3
   18c2e:	2002      	movs	r0, #2
   18c30:	4b6c      	ldr	r3, [pc, #432]	; (18de4 <system_clock_init+0x270>)
   18c32:	4798      	blx	r3
   18c34:	2002      	movs	r0, #2
   18c36:	4b6c      	ldr	r3, [pc, #432]	; (18de8 <system_clock_init+0x274>)
   18c38:	4798      	blx	r3
   18c3a:	233c      	movs	r3, #60	; 0x3c
   18c3c:	18fb      	adds	r3, r7, r3
   18c3e:	0018      	movs	r0, r3
   18c40:	4b67      	ldr	r3, [pc, #412]	; (18de0 <system_clock_init+0x26c>)
   18c42:	4798      	blx	r3
   18c44:	233c      	movs	r3, #60	; 0x3c
   18c46:	18fb      	adds	r3, r7, r3
   18c48:	2203      	movs	r2, #3
   18c4a:	701a      	strb	r2, [r3, #0]
   18c4c:	233c      	movs	r3, #60	; 0x3c
   18c4e:	18fb      	adds	r3, r7, r3
   18c50:	2220      	movs	r2, #32
   18c52:	605a      	str	r2, [r3, #4]
   18c54:	233c      	movs	r3, #60	; 0x3c
   18c56:	18fb      	adds	r3, r7, r3
   18c58:	2200      	movs	r2, #0
   18c5a:	721a      	strb	r2, [r3, #8]
   18c5c:	233c      	movs	r3, #60	; 0x3c
   18c5e:	18fb      	adds	r3, r7, r3
   18c60:	2200      	movs	r2, #0
   18c62:	725a      	strb	r2, [r3, #9]
   18c64:	233c      	movs	r3, #60	; 0x3c
   18c66:	18fb      	adds	r3, r7, r3
   18c68:	0019      	movs	r1, r3
   18c6a:	2004      	movs	r0, #4
   18c6c:	4b5d      	ldr	r3, [pc, #372]	; (18de4 <system_clock_init+0x270>)
   18c6e:	4798      	blx	r3
   18c70:	2004      	movs	r0, #4
   18c72:	4b5d      	ldr	r3, [pc, #372]	; (18de8 <system_clock_init+0x274>)
   18c74:	4798      	blx	r3
   18c76:	2330      	movs	r3, #48	; 0x30
   18c78:	18fb      	adds	r3, r7, r3
   18c7a:	0018      	movs	r0, r3
   18c7c:	4b58      	ldr	r3, [pc, #352]	; (18de0 <system_clock_init+0x26c>)
   18c7e:	4798      	blx	r3
   18c80:	2330      	movs	r3, #48	; 0x30
   18c82:	18fb      	adds	r3, r7, r3
   18c84:	2206      	movs	r2, #6
   18c86:	701a      	strb	r2, [r3, #0]
   18c88:	2330      	movs	r3, #48	; 0x30
   18c8a:	18fb      	adds	r3, r7, r3
   18c8c:	2201      	movs	r2, #1
   18c8e:	605a      	str	r2, [r3, #4]
   18c90:	2330      	movs	r3, #48	; 0x30
   18c92:	18fb      	adds	r3, r7, r3
   18c94:	2200      	movs	r2, #0
   18c96:	721a      	strb	r2, [r3, #8]
   18c98:	2330      	movs	r3, #48	; 0x30
   18c9a:	18fb      	adds	r3, r7, r3
   18c9c:	2200      	movs	r2, #0
   18c9e:	725a      	strb	r2, [r3, #9]
   18ca0:	2330      	movs	r3, #48	; 0x30
   18ca2:	18fb      	adds	r3, r7, r3
   18ca4:	0019      	movs	r1, r3
   18ca6:	2005      	movs	r0, #5
   18ca8:	4b4e      	ldr	r3, [pc, #312]	; (18de4 <system_clock_init+0x270>)
   18caa:	4798      	blx	r3
   18cac:	2005      	movs	r0, #5
   18cae:	4b4e      	ldr	r3, [pc, #312]	; (18de8 <system_clock_init+0x274>)
   18cb0:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   18cb2:	2390      	movs	r3, #144	; 0x90
   18cb4:	18fb      	adds	r3, r7, r3
   18cb6:	0018      	movs	r0, r3
   18cb8:	4b4c      	ldr	r3, [pc, #304]	; (18dec <system_clock_init+0x278>)
   18cba:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   18cbc:	2390      	movs	r3, #144	; 0x90
   18cbe:	18fb      	adds	r3, r7, r3
   18cc0:	2201      	movs	r2, #1
   18cc2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   18cc4:	2390      	movs	r3, #144	; 0x90
   18cc6:	18fb      	adds	r3, r7, r3
   18cc8:	0019      	movs	r1, r3
   18cca:	2001      	movs	r0, #1
   18ccc:	4b48      	ldr	r3, [pc, #288]	; (18df0 <system_clock_init+0x27c>)
   18cce:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   18cd0:	2001      	movs	r0, #1
   18cd2:	4b48      	ldr	r3, [pc, #288]	; (18df4 <system_clock_init+0x280>)
   18cd4:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   18cd6:	2378      	movs	r3, #120	; 0x78
   18cd8:	18fb      	adds	r3, r7, r3
   18cda:	0018      	movs	r0, r3
   18cdc:	4b46      	ldr	r3, [pc, #280]	; (18df8 <system_clock_init+0x284>)
   18cde:	4798      	blx	r3

	dpll_config.on_demand        = false;
   18ce0:	2378      	movs	r3, #120	; 0x78
   18ce2:	18fb      	adds	r3, r7, r3
   18ce4:	2200      	movs	r2, #0
   18ce6:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   18ce8:	2378      	movs	r3, #120	; 0x78
   18cea:	18fb      	adds	r3, r7, r3
   18cec:	2200      	movs	r2, #0
   18cee:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   18cf0:	2378      	movs	r3, #120	; 0x78
   18cf2:	18fb      	adds	r3, r7, r3
   18cf4:	2200      	movs	r2, #0
   18cf6:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   18cf8:	2378      	movs	r3, #120	; 0x78
   18cfa:	18fb      	adds	r3, r7, r3
   18cfc:	2200      	movs	r2, #0
   18cfe:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   18d00:	2378      	movs	r3, #120	; 0x78
   18d02:	18fb      	adds	r3, r7, r3
   18d04:	2200      	movs	r2, #0
   18d06:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   18d08:	2378      	movs	r3, #120	; 0x78
   18d0a:	18fb      	adds	r3, r7, r3
   18d0c:	2200      	movs	r2, #0
   18d0e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   18d10:	2378      	movs	r3, #120	; 0x78
   18d12:	18fb      	adds	r3, r7, r3
   18d14:	2200      	movs	r2, #0
   18d16:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   18d18:	2378      	movs	r3, #120	; 0x78
   18d1a:	18fb      	adds	r3, r7, r3
   18d1c:	2202      	movs	r2, #2
   18d1e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   18d20:	2378      	movs	r3, #120	; 0x78
   18d22:	18fb      	adds	r3, r7, r3
   18d24:	4a35      	ldr	r2, [pc, #212]	; (18dfc <system_clock_init+0x288>)
   18d26:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   18d28:	2378      	movs	r3, #120	; 0x78
   18d2a:	18fb      	adds	r3, r7, r3
   18d2c:	2201      	movs	r2, #1
   18d2e:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   18d30:	2378      	movs	r3, #120	; 0x78
   18d32:	18fb      	adds	r3, r7, r3
   18d34:	4a32      	ldr	r2, [pc, #200]	; (18e00 <system_clock_init+0x28c>)
   18d36:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   18d38:	2378      	movs	r3, #120	; 0x78
   18d3a:	18fb      	adds	r3, r7, r3
   18d3c:	0018      	movs	r0, r3
   18d3e:	4b31      	ldr	r3, [pc, #196]	; (18e04 <system_clock_init+0x290>)
   18d40:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   18d42:	2008      	movs	r0, #8
   18d44:	4b24      	ldr	r3, [pc, #144]	; (18dd8 <system_clock_init+0x264>)
   18d46:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   18d48:	46c0      	nop			; (mov r8, r8)
   18d4a:	2008      	movs	r0, #8
   18d4c:	4b2e      	ldr	r3, [pc, #184]	; (18e08 <system_clock_init+0x294>)
   18d4e:	4798      	blx	r3
   18d50:	0003      	movs	r3, r0
   18d52:	001a      	movs	r2, r3
   18d54:	2301      	movs	r3, #1
   18d56:	4053      	eors	r3, r2
   18d58:	b2db      	uxtb	r3, r3
   18d5a:	2b00      	cmp	r3, #0
   18d5c:	d1f5      	bne.n	18d4a <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   18d5e:	4919      	ldr	r1, [pc, #100]	; (18dc4 <system_clock_init+0x250>)
   18d60:	2244      	movs	r2, #68	; 0x44
   18d62:	5c8b      	ldrb	r3, [r1, r2]
   18d64:	2080      	movs	r0, #128	; 0x80
   18d66:	4240      	negs	r0, r0
   18d68:	4303      	orrs	r3, r0
   18d6a:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   18d6c:	2000      	movs	r0, #0
   18d6e:	4b27      	ldr	r3, [pc, #156]	; (18e0c <system_clock_init+0x298>)
   18d70:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   18d72:	2100      	movs	r1, #0
   18d74:	2000      	movs	r0, #0
   18d76:	4b26      	ldr	r3, [pc, #152]	; (18e10 <system_clock_init+0x29c>)
   18d78:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   18d7a:	2100      	movs	r1, #0
   18d7c:	2001      	movs	r0, #1
   18d7e:	4b24      	ldr	r3, [pc, #144]	; (18e10 <system_clock_init+0x29c>)
   18d80:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   18d82:	2100      	movs	r1, #0
   18d84:	2002      	movs	r0, #2
   18d86:	4b22      	ldr	r3, [pc, #136]	; (18e10 <system_clock_init+0x29c>)
   18d88:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   18d8a:	003b      	movs	r3, r7
   18d8c:	0018      	movs	r0, r3
   18d8e:	4b14      	ldr	r3, [pc, #80]	; (18de0 <system_clock_init+0x26c>)
   18d90:	4798      	blx	r3
   18d92:	003b      	movs	r3, r7
   18d94:	2208      	movs	r2, #8
   18d96:	701a      	strb	r2, [r3, #0]
   18d98:	003b      	movs	r3, r7
   18d9a:	2201      	movs	r2, #1
   18d9c:	605a      	str	r2, [r3, #4]
   18d9e:	003b      	movs	r3, r7
   18da0:	2200      	movs	r2, #0
   18da2:	721a      	strb	r2, [r3, #8]
   18da4:	003b      	movs	r3, r7
   18da6:	2201      	movs	r2, #1
   18da8:	725a      	strb	r2, [r3, #9]
   18daa:	003b      	movs	r3, r7
   18dac:	0019      	movs	r1, r3
   18dae:	2000      	movs	r0, #0
   18db0:	4b0c      	ldr	r3, [pc, #48]	; (18de4 <system_clock_init+0x270>)
   18db2:	4798      	blx	r3
   18db4:	2000      	movs	r0, #0
   18db6:	4b0c      	ldr	r3, [pc, #48]	; (18de8 <system_clock_init+0x274>)
   18db8:	4798      	blx	r3
#endif
}
   18dba:	46c0      	nop			; (mov r8, r8)
   18dbc:	46bd      	mov	sp, r7
   18dbe:	b026      	add	sp, #152	; 0x98
   18dc0:	bd80      	pop	{r7, pc}
   18dc2:	46c0      	nop			; (mov r8, r8)
   18dc4:	40000800 	.word	0x40000800
   18dc8:	00018735 	.word	0x00018735
   18dcc:	00018b3d 	.word	0x00018b3d
   18dd0:	00018645 	.word	0x00018645
   18dd4:	00018889 	.word	0x00018889
   18dd8:	00018a0d 	.word	0x00018a0d
   18ddc:	00018eb9 	.word	0x00018eb9
   18de0:	00018601 	.word	0x00018601
   18de4:	00018ee9 	.word	0x00018ee9
   18de8:	0001900d 	.word	0x0001900d
   18dec:	0001862f 	.word	0x0001862f
   18df0:	00019141 	.word	0x00019141
   18df4:	00019185 	.word	0x00019185
   18df8:	000186dd 	.word	0x000186dd
   18dfc:	000f4240 	.word	0x000f4240
   18e00:	02dc6c00 	.word	0x02dc6c00
   18e04:	00018901 	.word	0x00018901
   18e08:	00018ab9 	.word	0x00018ab9
   18e0c:	00018669 	.word	0x00018669
   18e10:	00018689 	.word	0x00018689

00018e14 <system_apb_clock_set_mask>:
{
   18e14:	b580      	push	{r7, lr}
   18e16:	b082      	sub	sp, #8
   18e18:	af00      	add	r7, sp, #0
   18e1a:	0002      	movs	r2, r0
   18e1c:	6039      	str	r1, [r7, #0]
   18e1e:	1dfb      	adds	r3, r7, #7
   18e20:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   18e22:	1dfb      	adds	r3, r7, #7
   18e24:	781b      	ldrb	r3, [r3, #0]
   18e26:	2b01      	cmp	r3, #1
   18e28:	d00a      	beq.n	18e40 <system_apb_clock_set_mask+0x2c>
   18e2a:	2b02      	cmp	r3, #2
   18e2c:	d00f      	beq.n	18e4e <system_apb_clock_set_mask+0x3a>
   18e2e:	2b00      	cmp	r3, #0
   18e30:	d114      	bne.n	18e5c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   18e32:	4b0e      	ldr	r3, [pc, #56]	; (18e6c <system_apb_clock_set_mask+0x58>)
   18e34:	4a0d      	ldr	r2, [pc, #52]	; (18e6c <system_apb_clock_set_mask+0x58>)
   18e36:	6991      	ldr	r1, [r2, #24]
   18e38:	683a      	ldr	r2, [r7, #0]
   18e3a:	430a      	orrs	r2, r1
   18e3c:	619a      	str	r2, [r3, #24]
			break;
   18e3e:	e00f      	b.n	18e60 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   18e40:	4b0a      	ldr	r3, [pc, #40]	; (18e6c <system_apb_clock_set_mask+0x58>)
   18e42:	4a0a      	ldr	r2, [pc, #40]	; (18e6c <system_apb_clock_set_mask+0x58>)
   18e44:	69d1      	ldr	r1, [r2, #28]
   18e46:	683a      	ldr	r2, [r7, #0]
   18e48:	430a      	orrs	r2, r1
   18e4a:	61da      	str	r2, [r3, #28]
			break;
   18e4c:	e008      	b.n	18e60 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   18e4e:	4b07      	ldr	r3, [pc, #28]	; (18e6c <system_apb_clock_set_mask+0x58>)
   18e50:	4a06      	ldr	r2, [pc, #24]	; (18e6c <system_apb_clock_set_mask+0x58>)
   18e52:	6a11      	ldr	r1, [r2, #32]
   18e54:	683a      	ldr	r2, [r7, #0]
   18e56:	430a      	orrs	r2, r1
   18e58:	621a      	str	r2, [r3, #32]
			break;
   18e5a:	e001      	b.n	18e60 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   18e5c:	2317      	movs	r3, #23
   18e5e:	e000      	b.n	18e62 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   18e60:	2300      	movs	r3, #0
}
   18e62:	0018      	movs	r0, r3
   18e64:	46bd      	mov	sp, r7
   18e66:	b002      	add	sp, #8
   18e68:	bd80      	pop	{r7, pc}
   18e6a:	46c0      	nop			; (mov r8, r8)
   18e6c:	40000400 	.word	0x40000400

00018e70 <system_interrupt_enter_critical_section>:
{
   18e70:	b580      	push	{r7, lr}
   18e72:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   18e74:	4b02      	ldr	r3, [pc, #8]	; (18e80 <system_interrupt_enter_critical_section+0x10>)
   18e76:	4798      	blx	r3
}
   18e78:	46c0      	nop			; (mov r8, r8)
   18e7a:	46bd      	mov	sp, r7
   18e7c:	bd80      	pop	{r7, pc}
   18e7e:	46c0      	nop			; (mov r8, r8)
   18e80:	000154ad 	.word	0x000154ad

00018e84 <system_interrupt_leave_critical_section>:
{
   18e84:	b580      	push	{r7, lr}
   18e86:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   18e88:	4b02      	ldr	r3, [pc, #8]	; (18e94 <system_interrupt_leave_critical_section+0x10>)
   18e8a:	4798      	blx	r3
}
   18e8c:	46c0      	nop			; (mov r8, r8)
   18e8e:	46bd      	mov	sp, r7
   18e90:	bd80      	pop	{r7, pc}
   18e92:	46c0      	nop			; (mov r8, r8)
   18e94:	00015501 	.word	0x00015501

00018e98 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   18e98:	b580      	push	{r7, lr}
   18e9a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   18e9c:	4b05      	ldr	r3, [pc, #20]	; (18eb4 <system_gclk_is_syncing+0x1c>)
   18e9e:	785b      	ldrb	r3, [r3, #1]
   18ea0:	b2db      	uxtb	r3, r3
   18ea2:	b25b      	sxtb	r3, r3
   18ea4:	2b00      	cmp	r3, #0
   18ea6:	da01      	bge.n	18eac <system_gclk_is_syncing+0x14>
		return true;
   18ea8:	2301      	movs	r3, #1
   18eaa:	e000      	b.n	18eae <system_gclk_is_syncing+0x16>
	}

	return false;
   18eac:	2300      	movs	r3, #0
}
   18eae:	0018      	movs	r0, r3
   18eb0:	46bd      	mov	sp, r7
   18eb2:	bd80      	pop	{r7, pc}
   18eb4:	40000c00 	.word	0x40000c00

00018eb8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   18eb8:	b580      	push	{r7, lr}
   18eba:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   18ebc:	2108      	movs	r1, #8
   18ebe:	2000      	movs	r0, #0
   18ec0:	4b07      	ldr	r3, [pc, #28]	; (18ee0 <system_gclk_init+0x28>)
   18ec2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   18ec4:	4b07      	ldr	r3, [pc, #28]	; (18ee4 <system_gclk_init+0x2c>)
   18ec6:	2201      	movs	r2, #1
   18ec8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   18eca:	46c0      	nop			; (mov r8, r8)
   18ecc:	4b05      	ldr	r3, [pc, #20]	; (18ee4 <system_gclk_init+0x2c>)
   18ece:	781b      	ldrb	r3, [r3, #0]
   18ed0:	b2db      	uxtb	r3, r3
   18ed2:	001a      	movs	r2, r3
   18ed4:	2301      	movs	r3, #1
   18ed6:	4013      	ands	r3, r2
   18ed8:	d1f8      	bne.n	18ecc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   18eda:	46c0      	nop			; (mov r8, r8)
   18edc:	46bd      	mov	sp, r7
   18ede:	bd80      	pop	{r7, pc}
   18ee0:	00018e15 	.word	0x00018e15
   18ee4:	40000c00 	.word	0x40000c00

00018ee8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   18ee8:	b580      	push	{r7, lr}
   18eea:	b086      	sub	sp, #24
   18eec:	af00      	add	r7, sp, #0
   18eee:	0002      	movs	r2, r0
   18ef0:	6039      	str	r1, [r7, #0]
   18ef2:	1dfb      	adds	r3, r7, #7
   18ef4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   18ef6:	1dfb      	adds	r3, r7, #7
   18ef8:	781b      	ldrb	r3, [r3, #0]
   18efa:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   18efc:	1dfb      	adds	r3, r7, #7
   18efe:	781b      	ldrb	r3, [r3, #0]
   18f00:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   18f02:	683b      	ldr	r3, [r7, #0]
   18f04:	781b      	ldrb	r3, [r3, #0]
   18f06:	021b      	lsls	r3, r3, #8
   18f08:	001a      	movs	r2, r3
   18f0a:	697b      	ldr	r3, [r7, #20]
   18f0c:	4313      	orrs	r3, r2
   18f0e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   18f10:	683b      	ldr	r3, [r7, #0]
   18f12:	785b      	ldrb	r3, [r3, #1]
   18f14:	2b00      	cmp	r3, #0
   18f16:	d004      	beq.n	18f22 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   18f18:	697b      	ldr	r3, [r7, #20]
   18f1a:	2280      	movs	r2, #128	; 0x80
   18f1c:	02d2      	lsls	r2, r2, #11
   18f1e:	4313      	orrs	r3, r2
   18f20:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   18f22:	683b      	ldr	r3, [r7, #0]
   18f24:	7a5b      	ldrb	r3, [r3, #9]
   18f26:	2b00      	cmp	r3, #0
   18f28:	d004      	beq.n	18f34 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   18f2a:	697b      	ldr	r3, [r7, #20]
   18f2c:	2280      	movs	r2, #128	; 0x80
   18f2e:	0312      	lsls	r2, r2, #12
   18f30:	4313      	orrs	r3, r2
   18f32:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   18f34:	683b      	ldr	r3, [r7, #0]
   18f36:	685b      	ldr	r3, [r3, #4]
   18f38:	2b01      	cmp	r3, #1
   18f3a:	d92c      	bls.n	18f96 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   18f3c:	683b      	ldr	r3, [r7, #0]
   18f3e:	685a      	ldr	r2, [r3, #4]
   18f40:	683b      	ldr	r3, [r7, #0]
   18f42:	685b      	ldr	r3, [r3, #4]
   18f44:	3b01      	subs	r3, #1
   18f46:	4013      	ands	r3, r2
   18f48:	d11a      	bne.n	18f80 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   18f4a:	2300      	movs	r3, #0
   18f4c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   18f4e:	2302      	movs	r3, #2
   18f50:	60bb      	str	r3, [r7, #8]
   18f52:	e005      	b.n	18f60 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   18f54:	68fb      	ldr	r3, [r7, #12]
   18f56:	3301      	adds	r3, #1
   18f58:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   18f5a:	68bb      	ldr	r3, [r7, #8]
   18f5c:	005b      	lsls	r3, r3, #1
   18f5e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   18f60:	683b      	ldr	r3, [r7, #0]
   18f62:	685a      	ldr	r2, [r3, #4]
   18f64:	68bb      	ldr	r3, [r7, #8]
   18f66:	429a      	cmp	r2, r3
   18f68:	d8f4      	bhi.n	18f54 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   18f6a:	68fb      	ldr	r3, [r7, #12]
   18f6c:	021b      	lsls	r3, r3, #8
   18f6e:	693a      	ldr	r2, [r7, #16]
   18f70:	4313      	orrs	r3, r2
   18f72:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   18f74:	697b      	ldr	r3, [r7, #20]
   18f76:	2280      	movs	r2, #128	; 0x80
   18f78:	0352      	lsls	r2, r2, #13
   18f7a:	4313      	orrs	r3, r2
   18f7c:	617b      	str	r3, [r7, #20]
   18f7e:	e00a      	b.n	18f96 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   18f80:	683b      	ldr	r3, [r7, #0]
   18f82:	685b      	ldr	r3, [r3, #4]
   18f84:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   18f86:	693a      	ldr	r2, [r7, #16]
   18f88:	4313      	orrs	r3, r2
   18f8a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   18f8c:	697b      	ldr	r3, [r7, #20]
   18f8e:	2280      	movs	r2, #128	; 0x80
   18f90:	0292      	lsls	r2, r2, #10
   18f92:	4313      	orrs	r3, r2
   18f94:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   18f96:	683b      	ldr	r3, [r7, #0]
   18f98:	7a1b      	ldrb	r3, [r3, #8]
   18f9a:	2b00      	cmp	r3, #0
   18f9c:	d004      	beq.n	18fa8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   18f9e:	697b      	ldr	r3, [r7, #20]
   18fa0:	2280      	movs	r2, #128	; 0x80
   18fa2:	0392      	lsls	r2, r2, #14
   18fa4:	4313      	orrs	r3, r2
   18fa6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   18fa8:	46c0      	nop			; (mov r8, r8)
   18faa:	4b13      	ldr	r3, [pc, #76]	; (18ff8 <system_gclk_gen_set_config+0x110>)
   18fac:	4798      	blx	r3
   18fae:	1e03      	subs	r3, r0, #0
   18fb0:	d1fb      	bne.n	18faa <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   18fb2:	4b12      	ldr	r3, [pc, #72]	; (18ffc <system_gclk_gen_set_config+0x114>)
   18fb4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   18fb6:	4a12      	ldr	r2, [pc, #72]	; (19000 <system_gclk_gen_set_config+0x118>)
   18fb8:	1dfb      	adds	r3, r7, #7
   18fba:	781b      	ldrb	r3, [r3, #0]
   18fbc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   18fbe:	46c0      	nop			; (mov r8, r8)
   18fc0:	4b0d      	ldr	r3, [pc, #52]	; (18ff8 <system_gclk_gen_set_config+0x110>)
   18fc2:	4798      	blx	r3
   18fc4:	1e03      	subs	r3, r0, #0
   18fc6:	d1fb      	bne.n	18fc0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   18fc8:	4b0e      	ldr	r3, [pc, #56]	; (19004 <system_gclk_gen_set_config+0x11c>)
   18fca:	693a      	ldr	r2, [r7, #16]
   18fcc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   18fce:	46c0      	nop			; (mov r8, r8)
   18fd0:	4b09      	ldr	r3, [pc, #36]	; (18ff8 <system_gclk_gen_set_config+0x110>)
   18fd2:	4798      	blx	r3
   18fd4:	1e03      	subs	r3, r0, #0
   18fd6:	d1fb      	bne.n	18fd0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   18fd8:	4b0a      	ldr	r3, [pc, #40]	; (19004 <system_gclk_gen_set_config+0x11c>)
   18fda:	4a0a      	ldr	r2, [pc, #40]	; (19004 <system_gclk_gen_set_config+0x11c>)
   18fdc:	6851      	ldr	r1, [r2, #4]
   18fde:	2280      	movs	r2, #128	; 0x80
   18fe0:	0252      	lsls	r2, r2, #9
   18fe2:	4011      	ands	r1, r2
   18fe4:	697a      	ldr	r2, [r7, #20]
   18fe6:	430a      	orrs	r2, r1
   18fe8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   18fea:	4b07      	ldr	r3, [pc, #28]	; (19008 <system_gclk_gen_set_config+0x120>)
   18fec:	4798      	blx	r3
}
   18fee:	46c0      	nop			; (mov r8, r8)
   18ff0:	46bd      	mov	sp, r7
   18ff2:	b006      	add	sp, #24
   18ff4:	bd80      	pop	{r7, pc}
   18ff6:	46c0      	nop			; (mov r8, r8)
   18ff8:	00018e99 	.word	0x00018e99
   18ffc:	00018e71 	.word	0x00018e71
   19000:	40000c08 	.word	0x40000c08
   19004:	40000c00 	.word	0x40000c00
   19008:	00018e85 	.word	0x00018e85

0001900c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1900c:	b580      	push	{r7, lr}
   1900e:	b082      	sub	sp, #8
   19010:	af00      	add	r7, sp, #0
   19012:	0002      	movs	r2, r0
   19014:	1dfb      	adds	r3, r7, #7
   19016:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   19018:	46c0      	nop			; (mov r8, r8)
   1901a:	4b0e      	ldr	r3, [pc, #56]	; (19054 <system_gclk_gen_enable+0x48>)
   1901c:	4798      	blx	r3
   1901e:	1e03      	subs	r3, r0, #0
   19020:	d1fb      	bne.n	1901a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   19022:	4b0d      	ldr	r3, [pc, #52]	; (19058 <system_gclk_gen_enable+0x4c>)
   19024:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   19026:	4a0d      	ldr	r2, [pc, #52]	; (1905c <system_gclk_gen_enable+0x50>)
   19028:	1dfb      	adds	r3, r7, #7
   1902a:	781b      	ldrb	r3, [r3, #0]
   1902c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1902e:	46c0      	nop			; (mov r8, r8)
   19030:	4b08      	ldr	r3, [pc, #32]	; (19054 <system_gclk_gen_enable+0x48>)
   19032:	4798      	blx	r3
   19034:	1e03      	subs	r3, r0, #0
   19036:	d1fb      	bne.n	19030 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   19038:	4b09      	ldr	r3, [pc, #36]	; (19060 <system_gclk_gen_enable+0x54>)
   1903a:	4a09      	ldr	r2, [pc, #36]	; (19060 <system_gclk_gen_enable+0x54>)
   1903c:	6852      	ldr	r2, [r2, #4]
   1903e:	2180      	movs	r1, #128	; 0x80
   19040:	0249      	lsls	r1, r1, #9
   19042:	430a      	orrs	r2, r1
   19044:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   19046:	4b07      	ldr	r3, [pc, #28]	; (19064 <system_gclk_gen_enable+0x58>)
   19048:	4798      	blx	r3
}
   1904a:	46c0      	nop			; (mov r8, r8)
   1904c:	46bd      	mov	sp, r7
   1904e:	b002      	add	sp, #8
   19050:	bd80      	pop	{r7, pc}
   19052:	46c0      	nop			; (mov r8, r8)
   19054:	00018e99 	.word	0x00018e99
   19058:	00018e71 	.word	0x00018e71
   1905c:	40000c04 	.word	0x40000c04
   19060:	40000c00 	.word	0x40000c00
   19064:	00018e85 	.word	0x00018e85

00019068 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   19068:	b580      	push	{r7, lr}
   1906a:	b086      	sub	sp, #24
   1906c:	af00      	add	r7, sp, #0
   1906e:	0002      	movs	r2, r0
   19070:	1dfb      	adds	r3, r7, #7
   19072:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   19074:	46c0      	nop			; (mov r8, r8)
   19076:	4b2a      	ldr	r3, [pc, #168]	; (19120 <system_gclk_gen_get_hz+0xb8>)
   19078:	4798      	blx	r3
   1907a:	1e03      	subs	r3, r0, #0
   1907c:	d1fb      	bne.n	19076 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1907e:	4b29      	ldr	r3, [pc, #164]	; (19124 <system_gclk_gen_get_hz+0xbc>)
   19080:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   19082:	4a29      	ldr	r2, [pc, #164]	; (19128 <system_gclk_gen_get_hz+0xc0>)
   19084:	1dfb      	adds	r3, r7, #7
   19086:	781b      	ldrb	r3, [r3, #0]
   19088:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1908a:	46c0      	nop			; (mov r8, r8)
   1908c:	4b24      	ldr	r3, [pc, #144]	; (19120 <system_gclk_gen_get_hz+0xb8>)
   1908e:	4798      	blx	r3
   19090:	1e03      	subs	r3, r0, #0
   19092:	d1fb      	bne.n	1908c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   19094:	4b25      	ldr	r3, [pc, #148]	; (1912c <system_gclk_gen_get_hz+0xc4>)
   19096:	685b      	ldr	r3, [r3, #4]
   19098:	04db      	lsls	r3, r3, #19
   1909a:	0edb      	lsrs	r3, r3, #27
   1909c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1909e:	0018      	movs	r0, r3
   190a0:	4b23      	ldr	r3, [pc, #140]	; (19130 <system_gclk_gen_get_hz+0xc8>)
   190a2:	4798      	blx	r3
   190a4:	0003      	movs	r3, r0
   190a6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   190a8:	4a1f      	ldr	r2, [pc, #124]	; (19128 <system_gclk_gen_get_hz+0xc0>)
   190aa:	1dfb      	adds	r3, r7, #7
   190ac:	781b      	ldrb	r3, [r3, #0]
   190ae:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   190b0:	4b1e      	ldr	r3, [pc, #120]	; (1912c <system_gclk_gen_get_hz+0xc4>)
   190b2:	685b      	ldr	r3, [r3, #4]
   190b4:	02db      	lsls	r3, r3, #11
   190b6:	0fdb      	lsrs	r3, r3, #31
   190b8:	b2da      	uxtb	r2, r3
   190ba:	2313      	movs	r3, #19
   190bc:	18fb      	adds	r3, r7, r3
   190be:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   190c0:	4a1c      	ldr	r2, [pc, #112]	; (19134 <system_gclk_gen_get_hz+0xcc>)
   190c2:	1dfb      	adds	r3, r7, #7
   190c4:	781b      	ldrb	r3, [r3, #0]
   190c6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   190c8:	46c0      	nop			; (mov r8, r8)
   190ca:	4b15      	ldr	r3, [pc, #84]	; (19120 <system_gclk_gen_get_hz+0xb8>)
   190cc:	4798      	blx	r3
   190ce:	1e03      	subs	r3, r0, #0
   190d0:	d1fb      	bne.n	190ca <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   190d2:	4b16      	ldr	r3, [pc, #88]	; (1912c <system_gclk_gen_get_hz+0xc4>)
   190d4:	689b      	ldr	r3, [r3, #8]
   190d6:	021b      	lsls	r3, r3, #8
   190d8:	0c1b      	lsrs	r3, r3, #16
   190da:	b29b      	uxth	r3, r3
   190dc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   190de:	4b16      	ldr	r3, [pc, #88]	; (19138 <system_gclk_gen_get_hz+0xd0>)
   190e0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   190e2:	2313      	movs	r3, #19
   190e4:	18fb      	adds	r3, r7, r3
   190e6:	781b      	ldrb	r3, [r3, #0]
   190e8:	2b00      	cmp	r3, #0
   190ea:	d109      	bne.n	19100 <system_gclk_gen_get_hz+0x98>
   190ec:	68fb      	ldr	r3, [r7, #12]
   190ee:	2b01      	cmp	r3, #1
   190f0:	d906      	bls.n	19100 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   190f2:	4b12      	ldr	r3, [pc, #72]	; (1913c <system_gclk_gen_get_hz+0xd4>)
   190f4:	68f9      	ldr	r1, [r7, #12]
   190f6:	6978      	ldr	r0, [r7, #20]
   190f8:	4798      	blx	r3
   190fa:	0003      	movs	r3, r0
   190fc:	617b      	str	r3, [r7, #20]
   190fe:	e00a      	b.n	19116 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   19100:	2313      	movs	r3, #19
   19102:	18fb      	adds	r3, r7, r3
   19104:	781b      	ldrb	r3, [r3, #0]
   19106:	2b00      	cmp	r3, #0
   19108:	d005      	beq.n	19116 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   1910a:	68fb      	ldr	r3, [r7, #12]
   1910c:	3301      	adds	r3, #1
   1910e:	697a      	ldr	r2, [r7, #20]
   19110:	40da      	lsrs	r2, r3
   19112:	0013      	movs	r3, r2
   19114:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   19116:	697b      	ldr	r3, [r7, #20]
}
   19118:	0018      	movs	r0, r3
   1911a:	46bd      	mov	sp, r7
   1911c:	b006      	add	sp, #24
   1911e:	bd80      	pop	{r7, pc}
   19120:	00018e99 	.word	0x00018e99
   19124:	00018e71 	.word	0x00018e71
   19128:	40000c04 	.word	0x40000c04
   1912c:	40000c00 	.word	0x40000c00
   19130:	000187c9 	.word	0x000187c9
   19134:	40000c08 	.word	0x40000c08
   19138:	00018e85 	.word	0x00018e85
   1913c:	00021cfd 	.word	0x00021cfd

00019140 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   19140:	b580      	push	{r7, lr}
   19142:	b084      	sub	sp, #16
   19144:	af00      	add	r7, sp, #0
   19146:	0002      	movs	r2, r0
   19148:	6039      	str	r1, [r7, #0]
   1914a:	1dfb      	adds	r3, r7, #7
   1914c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1914e:	1dfb      	adds	r3, r7, #7
   19150:	781b      	ldrb	r3, [r3, #0]
   19152:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   19154:	683b      	ldr	r3, [r7, #0]
   19156:	781b      	ldrb	r3, [r3, #0]
   19158:	021b      	lsls	r3, r3, #8
   1915a:	001a      	movs	r2, r3
   1915c:	68fb      	ldr	r3, [r7, #12]
   1915e:	4313      	orrs	r3, r2
   19160:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   19162:	1dfb      	adds	r3, r7, #7
   19164:	781b      	ldrb	r3, [r3, #0]
   19166:	0018      	movs	r0, r3
   19168:	4b04      	ldr	r3, [pc, #16]	; (1917c <system_gclk_chan_set_config+0x3c>)
   1916a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1916c:	4b04      	ldr	r3, [pc, #16]	; (19180 <system_gclk_chan_set_config+0x40>)
   1916e:	68fa      	ldr	r2, [r7, #12]
   19170:	b292      	uxth	r2, r2
   19172:	805a      	strh	r2, [r3, #2]
}
   19174:	46c0      	nop			; (mov r8, r8)
   19176:	46bd      	mov	sp, r7
   19178:	b004      	add	sp, #16
   1917a:	bd80      	pop	{r7, pc}
   1917c:	000191cd 	.word	0x000191cd
   19180:	40000c00 	.word	0x40000c00

00019184 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   19184:	b580      	push	{r7, lr}
   19186:	b082      	sub	sp, #8
   19188:	af00      	add	r7, sp, #0
   1918a:	0002      	movs	r2, r0
   1918c:	1dfb      	adds	r3, r7, #7
   1918e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   19190:	4b0a      	ldr	r3, [pc, #40]	; (191bc <system_gclk_chan_enable+0x38>)
   19192:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   19194:	4a0a      	ldr	r2, [pc, #40]	; (191c0 <system_gclk_chan_enable+0x3c>)
   19196:	1dfb      	adds	r3, r7, #7
   19198:	781b      	ldrb	r3, [r3, #0]
   1919a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1919c:	4909      	ldr	r1, [pc, #36]	; (191c4 <system_gclk_chan_enable+0x40>)
   1919e:	4b09      	ldr	r3, [pc, #36]	; (191c4 <system_gclk_chan_enable+0x40>)
   191a0:	885b      	ldrh	r3, [r3, #2]
   191a2:	b29b      	uxth	r3, r3
   191a4:	2280      	movs	r2, #128	; 0x80
   191a6:	01d2      	lsls	r2, r2, #7
   191a8:	4313      	orrs	r3, r2
   191aa:	b29b      	uxth	r3, r3
   191ac:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   191ae:	4b06      	ldr	r3, [pc, #24]	; (191c8 <system_gclk_chan_enable+0x44>)
   191b0:	4798      	blx	r3
}
   191b2:	46c0      	nop			; (mov r8, r8)
   191b4:	46bd      	mov	sp, r7
   191b6:	b002      	add	sp, #8
   191b8:	bd80      	pop	{r7, pc}
   191ba:	46c0      	nop			; (mov r8, r8)
   191bc:	00018e71 	.word	0x00018e71
   191c0:	40000c02 	.word	0x40000c02
   191c4:	40000c00 	.word	0x40000c00
   191c8:	00018e85 	.word	0x00018e85

000191cc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   191cc:	b580      	push	{r7, lr}
   191ce:	b084      	sub	sp, #16
   191d0:	af00      	add	r7, sp, #0
   191d2:	0002      	movs	r2, r0
   191d4:	1dfb      	adds	r3, r7, #7
   191d6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   191d8:	4b1c      	ldr	r3, [pc, #112]	; (1924c <system_gclk_chan_disable+0x80>)
   191da:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   191dc:	4a1c      	ldr	r2, [pc, #112]	; (19250 <system_gclk_chan_disable+0x84>)
   191de:	1dfb      	adds	r3, r7, #7
   191e0:	781b      	ldrb	r3, [r3, #0]
   191e2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   191e4:	4b1b      	ldr	r3, [pc, #108]	; (19254 <system_gclk_chan_disable+0x88>)
   191e6:	885b      	ldrh	r3, [r3, #2]
   191e8:	051b      	lsls	r3, r3, #20
   191ea:	0f1b      	lsrs	r3, r3, #28
   191ec:	b2db      	uxtb	r3, r3
   191ee:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   191f0:	4a18      	ldr	r2, [pc, #96]	; (19254 <system_gclk_chan_disable+0x88>)
   191f2:	8853      	ldrh	r3, [r2, #2]
   191f4:	4918      	ldr	r1, [pc, #96]	; (19258 <system_gclk_chan_disable+0x8c>)
   191f6:	400b      	ands	r3, r1
   191f8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   191fa:	4a16      	ldr	r2, [pc, #88]	; (19254 <system_gclk_chan_disable+0x88>)
   191fc:	4b15      	ldr	r3, [pc, #84]	; (19254 <system_gclk_chan_disable+0x88>)
   191fe:	885b      	ldrh	r3, [r3, #2]
   19200:	b29b      	uxth	r3, r3
   19202:	4916      	ldr	r1, [pc, #88]	; (1925c <system_gclk_chan_disable+0x90>)
   19204:	400b      	ands	r3, r1
   19206:	b29b      	uxth	r3, r3
   19208:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1920a:	46c0      	nop			; (mov r8, r8)
   1920c:	4b11      	ldr	r3, [pc, #68]	; (19254 <system_gclk_chan_disable+0x88>)
   1920e:	885b      	ldrh	r3, [r3, #2]
   19210:	b29b      	uxth	r3, r3
   19212:	001a      	movs	r2, r3
   19214:	2380      	movs	r3, #128	; 0x80
   19216:	01db      	lsls	r3, r3, #7
   19218:	4013      	ands	r3, r2
   1921a:	d1f7      	bne.n	1920c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1921c:	4a0d      	ldr	r2, [pc, #52]	; (19254 <system_gclk_chan_disable+0x88>)
   1921e:	68fb      	ldr	r3, [r7, #12]
   19220:	b2db      	uxtb	r3, r3
   19222:	1c19      	adds	r1, r3, #0
   19224:	230f      	movs	r3, #15
   19226:	400b      	ands	r3, r1
   19228:	b2d9      	uxtb	r1, r3
   1922a:	8853      	ldrh	r3, [r2, #2]
   1922c:	1c08      	adds	r0, r1, #0
   1922e:	210f      	movs	r1, #15
   19230:	4001      	ands	r1, r0
   19232:	0208      	lsls	r0, r1, #8
   19234:	4908      	ldr	r1, [pc, #32]	; (19258 <system_gclk_chan_disable+0x8c>)
   19236:	400b      	ands	r3, r1
   19238:	1c19      	adds	r1, r3, #0
   1923a:	1c03      	adds	r3, r0, #0
   1923c:	430b      	orrs	r3, r1
   1923e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   19240:	4b07      	ldr	r3, [pc, #28]	; (19260 <system_gclk_chan_disable+0x94>)
   19242:	4798      	blx	r3
}
   19244:	46c0      	nop			; (mov r8, r8)
   19246:	46bd      	mov	sp, r7
   19248:	b004      	add	sp, #16
   1924a:	bd80      	pop	{r7, pc}
   1924c:	00018e71 	.word	0x00018e71
   19250:	40000c02 	.word	0x40000c02
   19254:	40000c00 	.word	0x40000c00
   19258:	fffff0ff 	.word	0xfffff0ff
   1925c:	ffffbfff 	.word	0xffffbfff
   19260:	00018e85 	.word	0x00018e85

00019264 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   19264:	b580      	push	{r7, lr}
   19266:	b084      	sub	sp, #16
   19268:	af00      	add	r7, sp, #0
   1926a:	0002      	movs	r2, r0
   1926c:	1dfb      	adds	r3, r7, #7
   1926e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   19270:	4b0d      	ldr	r3, [pc, #52]	; (192a8 <system_gclk_chan_get_hz+0x44>)
   19272:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   19274:	4a0d      	ldr	r2, [pc, #52]	; (192ac <system_gclk_chan_get_hz+0x48>)
   19276:	1dfb      	adds	r3, r7, #7
   19278:	781b      	ldrb	r3, [r3, #0]
   1927a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1927c:	4b0c      	ldr	r3, [pc, #48]	; (192b0 <system_gclk_chan_get_hz+0x4c>)
   1927e:	885b      	ldrh	r3, [r3, #2]
   19280:	051b      	lsls	r3, r3, #20
   19282:	0f1b      	lsrs	r3, r3, #28
   19284:	b2da      	uxtb	r2, r3
   19286:	230f      	movs	r3, #15
   19288:	18fb      	adds	r3, r7, r3
   1928a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   1928c:	4b09      	ldr	r3, [pc, #36]	; (192b4 <system_gclk_chan_get_hz+0x50>)
   1928e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   19290:	230f      	movs	r3, #15
   19292:	18fb      	adds	r3, r7, r3
   19294:	781b      	ldrb	r3, [r3, #0]
   19296:	0018      	movs	r0, r3
   19298:	4b07      	ldr	r3, [pc, #28]	; (192b8 <system_gclk_chan_get_hz+0x54>)
   1929a:	4798      	blx	r3
   1929c:	0003      	movs	r3, r0
}
   1929e:	0018      	movs	r0, r3
   192a0:	46bd      	mov	sp, r7
   192a2:	b004      	add	sp, #16
   192a4:	bd80      	pop	{r7, pc}
   192a6:	46c0      	nop			; (mov r8, r8)
   192a8:	00018e71 	.word	0x00018e71
   192ac:	40000c02 	.word	0x40000c02
   192b0:	40000c00 	.word	0x40000c00
   192b4:	00018e85 	.word	0x00018e85
   192b8:	00019069 	.word	0x00019069

000192bc <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   192bc:	b580      	push	{r7, lr}
   192be:	b084      	sub	sp, #16
   192c0:	af00      	add	r7, sp, #0
   192c2:	0002      	movs	r2, r0
   192c4:	1dfb      	adds	r3, r7, #7
   192c6:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   192c8:	230f      	movs	r3, #15
   192ca:	18fb      	adds	r3, r7, r3
   192cc:	2200      	movs	r2, #0
   192ce:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   192d0:	1dfb      	adds	r3, r7, #7
   192d2:	781b      	ldrb	r3, [r3, #0]
   192d4:	2b7f      	cmp	r3, #127	; 0x7f
   192d6:	d80b      	bhi.n	192f0 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   192d8:	4a13      	ldr	r2, [pc, #76]	; (19328 <system_interrupt_clear_pending+0x6c>)
   192da:	1dfb      	adds	r3, r7, #7
   192dc:	781b      	ldrb	r3, [r3, #0]
   192de:	b25b      	sxtb	r3, r3
   192e0:	2101      	movs	r1, #1
   192e2:	4099      	lsls	r1, r3
   192e4:	000b      	movs	r3, r1
   192e6:	0019      	movs	r1, r3
   192e8:	23c0      	movs	r3, #192	; 0xc0
   192ea:	005b      	lsls	r3, r3, #1
   192ec:	50d1      	str	r1, [r2, r3]
   192ee:	e014      	b.n	1931a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   192f0:	1dfb      	adds	r3, r7, #7
   192f2:	781b      	ldrb	r3, [r3, #0]
   192f4:	b25b      	sxtb	r3, r3
   192f6:	330e      	adds	r3, #14
   192f8:	d101      	bne.n	192fe <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   192fa:	2317      	movs	r3, #23
   192fc:	e010      	b.n	19320 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   192fe:	1dfb      	adds	r3, r7, #7
   19300:	781b      	ldrb	r3, [r3, #0]
   19302:	b25b      	sxtb	r3, r3
   19304:	3301      	adds	r3, #1
   19306:	d104      	bne.n	19312 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   19308:	4b08      	ldr	r3, [pc, #32]	; (1932c <system_interrupt_clear_pending+0x70>)
   1930a:	2280      	movs	r2, #128	; 0x80
   1930c:	0492      	lsls	r2, r2, #18
   1930e:	605a      	str	r2, [r3, #4]
   19310:	e003      	b.n	1931a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   19312:	230f      	movs	r3, #15
   19314:	18fb      	adds	r3, r7, r3
   19316:	2217      	movs	r2, #23
   19318:	701a      	strb	r2, [r3, #0]
	}

	return status;
   1931a:	230f      	movs	r3, #15
   1931c:	18fb      	adds	r3, r7, r3
   1931e:	781b      	ldrb	r3, [r3, #0]
}
   19320:	0018      	movs	r0, r3
   19322:	46bd      	mov	sp, r7
   19324:	b004      	add	sp, #16
   19326:	bd80      	pop	{r7, pc}
   19328:	e000e100 	.word	0xe000e100
   1932c:	e000ed00 	.word	0xe000ed00

00019330 <system_pinmux_get_group_from_gpio_pin>:
{
   19330:	b580      	push	{r7, lr}
   19332:	b084      	sub	sp, #16
   19334:	af00      	add	r7, sp, #0
   19336:	0002      	movs	r2, r0
   19338:	1dfb      	adds	r3, r7, #7
   1933a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1933c:	230f      	movs	r3, #15
   1933e:	18fb      	adds	r3, r7, r3
   19340:	1dfa      	adds	r2, r7, #7
   19342:	7812      	ldrb	r2, [r2, #0]
   19344:	09d2      	lsrs	r2, r2, #7
   19346:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   19348:	230e      	movs	r3, #14
   1934a:	18fb      	adds	r3, r7, r3
   1934c:	1dfa      	adds	r2, r7, #7
   1934e:	7812      	ldrb	r2, [r2, #0]
   19350:	0952      	lsrs	r2, r2, #5
   19352:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   19354:	4b0d      	ldr	r3, [pc, #52]	; (1938c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   19356:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   19358:	230f      	movs	r3, #15
   1935a:	18fb      	adds	r3, r7, r3
   1935c:	781b      	ldrb	r3, [r3, #0]
   1935e:	2b00      	cmp	r3, #0
   19360:	d10f      	bne.n	19382 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   19362:	230f      	movs	r3, #15
   19364:	18fb      	adds	r3, r7, r3
   19366:	781b      	ldrb	r3, [r3, #0]
   19368:	009b      	lsls	r3, r3, #2
   1936a:	2210      	movs	r2, #16
   1936c:	4694      	mov	ip, r2
   1936e:	44bc      	add	ip, r7
   19370:	4463      	add	r3, ip
   19372:	3b08      	subs	r3, #8
   19374:	681a      	ldr	r2, [r3, #0]
   19376:	230e      	movs	r3, #14
   19378:	18fb      	adds	r3, r7, r3
   1937a:	781b      	ldrb	r3, [r3, #0]
   1937c:	01db      	lsls	r3, r3, #7
   1937e:	18d3      	adds	r3, r2, r3
   19380:	e000      	b.n	19384 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   19382:	2300      	movs	r3, #0
}
   19384:	0018      	movs	r0, r3
   19386:	46bd      	mov	sp, r7
   19388:	b004      	add	sp, #16
   1938a:	bd80      	pop	{r7, pc}
   1938c:	41004400 	.word	0x41004400

00019390 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   19390:	b580      	push	{r7, lr}
   19392:	b088      	sub	sp, #32
   19394:	af00      	add	r7, sp, #0
   19396:	60f8      	str	r0, [r7, #12]
   19398:	60b9      	str	r1, [r7, #8]
   1939a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   1939c:	2300      	movs	r3, #0
   1939e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   193a0:	687b      	ldr	r3, [r7, #4]
   193a2:	78db      	ldrb	r3, [r3, #3]
   193a4:	2201      	movs	r2, #1
   193a6:	4053      	eors	r3, r2
   193a8:	b2db      	uxtb	r3, r3
   193aa:	2b00      	cmp	r3, #0
   193ac:	d035      	beq.n	1941a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   193ae:	687b      	ldr	r3, [r7, #4]
   193b0:	781b      	ldrb	r3, [r3, #0]
   193b2:	2b80      	cmp	r3, #128	; 0x80
   193b4:	d00b      	beq.n	193ce <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   193b6:	69fb      	ldr	r3, [r7, #28]
   193b8:	2280      	movs	r2, #128	; 0x80
   193ba:	0252      	lsls	r2, r2, #9
   193bc:	4313      	orrs	r3, r2
   193be:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   193c0:	687b      	ldr	r3, [r7, #4]
   193c2:	781b      	ldrb	r3, [r3, #0]
   193c4:	061b      	lsls	r3, r3, #24
   193c6:	001a      	movs	r2, r3
   193c8:	69fb      	ldr	r3, [r7, #28]
   193ca:	4313      	orrs	r3, r2
   193cc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   193ce:	687b      	ldr	r3, [r7, #4]
   193d0:	785b      	ldrb	r3, [r3, #1]
   193d2:	2b00      	cmp	r3, #0
   193d4:	d003      	beq.n	193de <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   193d6:	687b      	ldr	r3, [r7, #4]
   193d8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   193da:	2b02      	cmp	r3, #2
   193dc:	d110      	bne.n	19400 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   193de:	69fb      	ldr	r3, [r7, #28]
   193e0:	2280      	movs	r2, #128	; 0x80
   193e2:	0292      	lsls	r2, r2, #10
   193e4:	4313      	orrs	r3, r2
   193e6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   193e8:	687b      	ldr	r3, [r7, #4]
   193ea:	789b      	ldrb	r3, [r3, #2]
   193ec:	2b00      	cmp	r3, #0
   193ee:	d004      	beq.n	193fa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   193f0:	69fb      	ldr	r3, [r7, #28]
   193f2:	2280      	movs	r2, #128	; 0x80
   193f4:	02d2      	lsls	r2, r2, #11
   193f6:	4313      	orrs	r3, r2
   193f8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   193fa:	68fb      	ldr	r3, [r7, #12]
   193fc:	68ba      	ldr	r2, [r7, #8]
   193fe:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   19400:	687b      	ldr	r3, [r7, #4]
   19402:	785b      	ldrb	r3, [r3, #1]
   19404:	2b01      	cmp	r3, #1
   19406:	d003      	beq.n	19410 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   19408:	687b      	ldr	r3, [r7, #4]
   1940a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1940c:	2b02      	cmp	r3, #2
   1940e:	d107      	bne.n	19420 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   19410:	69fb      	ldr	r3, [r7, #28]
   19412:	4a22      	ldr	r2, [pc, #136]	; (1949c <_system_pinmux_config+0x10c>)
   19414:	4013      	ands	r3, r2
   19416:	61fb      	str	r3, [r7, #28]
   19418:	e002      	b.n	19420 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   1941a:	68fb      	ldr	r3, [r7, #12]
   1941c:	68ba      	ldr	r2, [r7, #8]
   1941e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   19420:	68bb      	ldr	r3, [r7, #8]
   19422:	041b      	lsls	r3, r3, #16
   19424:	0c1b      	lsrs	r3, r3, #16
   19426:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   19428:	68bb      	ldr	r3, [r7, #8]
   1942a:	0c1b      	lsrs	r3, r3, #16
   1942c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1942e:	69ba      	ldr	r2, [r7, #24]
   19430:	69fb      	ldr	r3, [r7, #28]
   19432:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   19434:	22a0      	movs	r2, #160	; 0xa0
   19436:	05d2      	lsls	r2, r2, #23
   19438:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1943a:	68fb      	ldr	r3, [r7, #12]
   1943c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1943e:	697a      	ldr	r2, [r7, #20]
   19440:	69fb      	ldr	r3, [r7, #28]
   19442:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   19444:	22d0      	movs	r2, #208	; 0xd0
   19446:	0612      	lsls	r2, r2, #24
   19448:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1944a:	68fb      	ldr	r3, [r7, #12]
   1944c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1944e:	687b      	ldr	r3, [r7, #4]
   19450:	78db      	ldrb	r3, [r3, #3]
   19452:	2201      	movs	r2, #1
   19454:	4053      	eors	r3, r2
   19456:	b2db      	uxtb	r3, r3
   19458:	2b00      	cmp	r3, #0
   1945a:	d01a      	beq.n	19492 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1945c:	69fa      	ldr	r2, [r7, #28]
   1945e:	2380      	movs	r3, #128	; 0x80
   19460:	02db      	lsls	r3, r3, #11
   19462:	4013      	ands	r3, r2
   19464:	d00a      	beq.n	1947c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   19466:	687b      	ldr	r3, [r7, #4]
   19468:	789b      	ldrb	r3, [r3, #2]
   1946a:	2b01      	cmp	r3, #1
   1946c:	d103      	bne.n	19476 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1946e:	68fb      	ldr	r3, [r7, #12]
   19470:	68ba      	ldr	r2, [r7, #8]
   19472:	619a      	str	r2, [r3, #24]
   19474:	e002      	b.n	1947c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   19476:	68fb      	ldr	r3, [r7, #12]
   19478:	68ba      	ldr	r2, [r7, #8]
   1947a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1947c:	687b      	ldr	r3, [r7, #4]
   1947e:	785b      	ldrb	r3, [r3, #1]
   19480:	2b01      	cmp	r3, #1
   19482:	d003      	beq.n	1948c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   19484:	687b      	ldr	r3, [r7, #4]
   19486:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   19488:	2b02      	cmp	r3, #2
   1948a:	d102      	bne.n	19492 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   1948c:	68fb      	ldr	r3, [r7, #12]
   1948e:	68ba      	ldr	r2, [r7, #8]
   19490:	609a      	str	r2, [r3, #8]
		}
	}
}
   19492:	46c0      	nop			; (mov r8, r8)
   19494:	46bd      	mov	sp, r7
   19496:	b008      	add	sp, #32
   19498:	bd80      	pop	{r7, pc}
   1949a:	46c0      	nop			; (mov r8, r8)
   1949c:	fffbffff 	.word	0xfffbffff

000194a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   194a0:	b580      	push	{r7, lr}
   194a2:	b084      	sub	sp, #16
   194a4:	af00      	add	r7, sp, #0
   194a6:	0002      	movs	r2, r0
   194a8:	6039      	str	r1, [r7, #0]
   194aa:	1dfb      	adds	r3, r7, #7
   194ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   194ae:	1dfb      	adds	r3, r7, #7
   194b0:	781b      	ldrb	r3, [r3, #0]
   194b2:	0018      	movs	r0, r3
   194b4:	4b0a      	ldr	r3, [pc, #40]	; (194e0 <system_pinmux_pin_set_config+0x40>)
   194b6:	4798      	blx	r3
   194b8:	0003      	movs	r3, r0
   194ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   194bc:	1dfb      	adds	r3, r7, #7
   194be:	781b      	ldrb	r3, [r3, #0]
   194c0:	221f      	movs	r2, #31
   194c2:	4013      	ands	r3, r2
   194c4:	2201      	movs	r2, #1
   194c6:	409a      	lsls	r2, r3
   194c8:	0013      	movs	r3, r2
   194ca:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   194cc:	683a      	ldr	r2, [r7, #0]
   194ce:	68b9      	ldr	r1, [r7, #8]
   194d0:	68fb      	ldr	r3, [r7, #12]
   194d2:	0018      	movs	r0, r3
   194d4:	4b03      	ldr	r3, [pc, #12]	; (194e4 <system_pinmux_pin_set_config+0x44>)
   194d6:	4798      	blx	r3
}
   194d8:	46c0      	nop			; (mov r8, r8)
   194da:	46bd      	mov	sp, r7
   194dc:	b004      	add	sp, #16
   194de:	bd80      	pop	{r7, pc}
   194e0:	00019331 	.word	0x00019331
   194e4:	00019391 	.word	0x00019391

000194e8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   194e8:	b580      	push	{r7, lr}
   194ea:	af00      	add	r7, sp, #0
	return;
   194ec:	46c0      	nop			; (mov r8, r8)
}
   194ee:	46bd      	mov	sp, r7
   194f0:	bd80      	pop	{r7, pc}
	...

000194f4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   194f4:	b580      	push	{r7, lr}
   194f6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   194f8:	4b06      	ldr	r3, [pc, #24]	; (19514 <system_init+0x20>)
   194fa:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   194fc:	4b06      	ldr	r3, [pc, #24]	; (19518 <system_init+0x24>)
   194fe:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   19500:	4b06      	ldr	r3, [pc, #24]	; (1951c <system_init+0x28>)
   19502:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   19504:	4b06      	ldr	r3, [pc, #24]	; (19520 <system_init+0x2c>)
   19506:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   19508:	4b06      	ldr	r3, [pc, #24]	; (19524 <system_init+0x30>)
   1950a:	4798      	blx	r3
}
   1950c:	46c0      	nop			; (mov r8, r8)
   1950e:	46bd      	mov	sp, r7
   19510:	bd80      	pop	{r7, pc}
   19512:	46c0      	nop			; (mov r8, r8)
   19514:	00018b75 	.word	0x00018b75
   19518:	0001563d 	.word	0x0001563d
   1951c:	000012c1 	.word	0x000012c1
   19520:	00015a15 	.word	0x00015a15
   19524:	000194e9 	.word	0x000194e9

00019528 <system_gclk_chan_get_config_defaults>:
{
   19528:	b580      	push	{r7, lr}
   1952a:	b082      	sub	sp, #8
   1952c:	af00      	add	r7, sp, #0
   1952e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   19530:	687b      	ldr	r3, [r7, #4]
   19532:	2200      	movs	r2, #0
   19534:	701a      	strb	r2, [r3, #0]
}
   19536:	46c0      	nop			; (mov r8, r8)
   19538:	46bd      	mov	sp, r7
   1953a:	b002      	add	sp, #8
   1953c:	bd80      	pop	{r7, pc}
	...

00019540 <system_apb_clock_set_mask>:
{
   19540:	b580      	push	{r7, lr}
   19542:	b082      	sub	sp, #8
   19544:	af00      	add	r7, sp, #0
   19546:	0002      	movs	r2, r0
   19548:	6039      	str	r1, [r7, #0]
   1954a:	1dfb      	adds	r3, r7, #7
   1954c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1954e:	1dfb      	adds	r3, r7, #7
   19550:	781b      	ldrb	r3, [r3, #0]
   19552:	2b01      	cmp	r3, #1
   19554:	d00a      	beq.n	1956c <system_apb_clock_set_mask+0x2c>
   19556:	2b02      	cmp	r3, #2
   19558:	d00f      	beq.n	1957a <system_apb_clock_set_mask+0x3a>
   1955a:	2b00      	cmp	r3, #0
   1955c:	d114      	bne.n	19588 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1955e:	4b0e      	ldr	r3, [pc, #56]	; (19598 <system_apb_clock_set_mask+0x58>)
   19560:	4a0d      	ldr	r2, [pc, #52]	; (19598 <system_apb_clock_set_mask+0x58>)
   19562:	6991      	ldr	r1, [r2, #24]
   19564:	683a      	ldr	r2, [r7, #0]
   19566:	430a      	orrs	r2, r1
   19568:	619a      	str	r2, [r3, #24]
			break;
   1956a:	e00f      	b.n	1958c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1956c:	4b0a      	ldr	r3, [pc, #40]	; (19598 <system_apb_clock_set_mask+0x58>)
   1956e:	4a0a      	ldr	r2, [pc, #40]	; (19598 <system_apb_clock_set_mask+0x58>)
   19570:	69d1      	ldr	r1, [r2, #28]
   19572:	683a      	ldr	r2, [r7, #0]
   19574:	430a      	orrs	r2, r1
   19576:	61da      	str	r2, [r3, #28]
			break;
   19578:	e008      	b.n	1958c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1957a:	4b07      	ldr	r3, [pc, #28]	; (19598 <system_apb_clock_set_mask+0x58>)
   1957c:	4a06      	ldr	r2, [pc, #24]	; (19598 <system_apb_clock_set_mask+0x58>)
   1957e:	6a11      	ldr	r1, [r2, #32]
   19580:	683a      	ldr	r2, [r7, #0]
   19582:	430a      	orrs	r2, r1
   19584:	621a      	str	r2, [r3, #32]
			break;
   19586:	e001      	b.n	1958c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   19588:	2317      	movs	r3, #23
   1958a:	e000      	b.n	1958e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1958c:	2300      	movs	r3, #0
}
   1958e:	0018      	movs	r0, r3
   19590:	46bd      	mov	sp, r7
   19592:	b002      	add	sp, #8
   19594:	bd80      	pop	{r7, pc}
   19596:	46c0      	nop			; (mov r8, r8)
   19598:	40000400 	.word	0x40000400

0001959c <system_pinmux_get_config_defaults>:
{
   1959c:	b580      	push	{r7, lr}
   1959e:	b082      	sub	sp, #8
   195a0:	af00      	add	r7, sp, #0
   195a2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   195a4:	687b      	ldr	r3, [r7, #4]
   195a6:	2280      	movs	r2, #128	; 0x80
   195a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   195aa:	687b      	ldr	r3, [r7, #4]
   195ac:	2200      	movs	r2, #0
   195ae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   195b0:	687b      	ldr	r3, [r7, #4]
   195b2:	2201      	movs	r2, #1
   195b4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   195b6:	687b      	ldr	r3, [r7, #4]
   195b8:	2200      	movs	r2, #0
   195ba:	70da      	strb	r2, [r3, #3]
}
   195bc:	46c0      	nop			; (mov r8, r8)
   195be:	46bd      	mov	sp, r7
   195c0:	b002      	add	sp, #8
   195c2:	bd80      	pop	{r7, pc}

000195c4 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   195c4:	b580      	push	{r7, lr}
   195c6:	b084      	sub	sp, #16
   195c8:	af00      	add	r7, sp, #0
   195ca:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   195cc:	2300      	movs	r3, #0
   195ce:	60fb      	str	r3, [r7, #12]
   195d0:	e00c      	b.n	195ec <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   195d2:	4b0a      	ldr	r3, [pc, #40]	; (195fc <_tcc_get_inst_index+0x38>)
   195d4:	68fa      	ldr	r2, [r7, #12]
   195d6:	0092      	lsls	r2, r2, #2
   195d8:	58d2      	ldr	r2, [r2, r3]
   195da:	687b      	ldr	r3, [r7, #4]
   195dc:	429a      	cmp	r2, r3
   195de:	d102      	bne.n	195e6 <_tcc_get_inst_index+0x22>
			return i;
   195e0:	68fb      	ldr	r3, [r7, #12]
   195e2:	b2db      	uxtb	r3, r3
   195e4:	e006      	b.n	195f4 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   195e6:	68fb      	ldr	r3, [r7, #12]
   195e8:	3301      	adds	r3, #1
   195ea:	60fb      	str	r3, [r7, #12]
   195ec:	68fb      	ldr	r3, [r7, #12]
   195ee:	2b02      	cmp	r3, #2
   195f0:	d9ef      	bls.n	195d2 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   195f2:	2300      	movs	r3, #0
}
   195f4:	0018      	movs	r0, r3
   195f6:	46bd      	mov	sp, r7
   195f8:	b004      	add	sp, #16
   195fa:	bd80      	pop	{r7, pc}
   195fc:	000293bc 	.word	0x000293bc

00019600 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   19600:	b590      	push	{r4, r7, lr}
   19602:	b085      	sub	sp, #20
   19604:	af00      	add	r7, sp, #0
   19606:	6078      	str	r0, [r7, #4]
   19608:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1960a:	230f      	movs	r3, #15
   1960c:	18fc      	adds	r4, r7, r3
   1960e:	683b      	ldr	r3, [r7, #0]
   19610:	0018      	movs	r0, r3
   19612:	4bad      	ldr	r3, [pc, #692]	; (198c8 <tcc_get_config_defaults+0x2c8>)
   19614:	4798      	blx	r3
   19616:	0003      	movs	r3, r0
   19618:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   1961a:	687b      	ldr	r3, [r7, #4]
   1961c:	2200      	movs	r2, #0
   1961e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   19620:	230f      	movs	r3, #15
   19622:	18fb      	adds	r3, r7, r3
   19624:	781a      	ldrb	r2, [r3, #0]
   19626:	4ba9      	ldr	r3, [pc, #676]	; (198cc <tcc_get_config_defaults+0x2cc>)
   19628:	0092      	lsls	r2, r2, #2
   1962a:	58d2      	ldr	r2, [r2, r3]
   1962c:	687b      	ldr	r3, [r7, #4]
   1962e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   19630:	687b      	ldr	r3, [r7, #4]
   19632:	2200      	movs	r2, #0
   19634:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   19636:	687b      	ldr	r3, [r7, #4]
   19638:	2200      	movs	r2, #0
   1963a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1963c:	687b      	ldr	r3, [r7, #4]
   1963e:	2200      	movs	r2, #0
   19640:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   19642:	687b      	ldr	r3, [r7, #4]
   19644:	2200      	movs	r2, #0
   19646:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   19648:	687b      	ldr	r3, [r7, #4]
   1964a:	2200      	movs	r2, #0
   1964c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1964e:	687b      	ldr	r3, [r7, #4]
   19650:	2200      	movs	r2, #0
   19652:	61da      	str	r2, [r3, #28]
   19654:	687b      	ldr	r3, [r7, #4]
   19656:	2200      	movs	r2, #0
   19658:	621a      	str	r2, [r3, #32]
   1965a:	687b      	ldr	r3, [r7, #4]
   1965c:	2200      	movs	r2, #0
   1965e:	625a      	str	r2, [r3, #36]	; 0x24
   19660:	687b      	ldr	r3, [r7, #4]
   19662:	2200      	movs	r2, #0
   19664:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   19666:	687b      	ldr	r3, [r7, #4]
   19668:	2200      	movs	r2, #0
   1966a:	751a      	strb	r2, [r3, #20]
   1966c:	687b      	ldr	r3, [r7, #4]
   1966e:	2200      	movs	r2, #0
   19670:	755a      	strb	r2, [r3, #21]
   19672:	687b      	ldr	r3, [r7, #4]
   19674:	2200      	movs	r2, #0
   19676:	759a      	strb	r2, [r3, #22]
   19678:	687b      	ldr	r3, [r7, #4]
   1967a:	2200      	movs	r2, #0
   1967c:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   1967e:	687b      	ldr	r3, [r7, #4]
   19680:	2200      	movs	r2, #0
   19682:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   19684:	687b      	ldr	r3, [r7, #4]
   19686:	2200      	movs	r2, #0
   19688:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1968a:	687b      	ldr	r3, [r7, #4]
   1968c:	2200      	movs	r2, #0
   1968e:	741a      	strb	r2, [r3, #16]
   19690:	687b      	ldr	r3, [r7, #4]
   19692:	2200      	movs	r2, #0
   19694:	745a      	strb	r2, [r3, #17]
   19696:	687b      	ldr	r3, [r7, #4]
   19698:	2200      	movs	r2, #0
   1969a:	749a      	strb	r2, [r3, #18]
   1969c:	687b      	ldr	r3, [r7, #4]
   1969e:	2200      	movs	r2, #0
   196a0:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   196a2:	687b      	ldr	r3, [r7, #4]
   196a4:	222c      	movs	r2, #44	; 0x2c
   196a6:	2100      	movs	r1, #0
   196a8:	5499      	strb	r1, [r3, r2]
   196aa:	687b      	ldr	r3, [r7, #4]
   196ac:	222d      	movs	r2, #45	; 0x2d
   196ae:	2100      	movs	r1, #0
   196b0:	5499      	strb	r1, [r3, r2]
   196b2:	687b      	ldr	r3, [r7, #4]
   196b4:	222e      	movs	r2, #46	; 0x2e
   196b6:	2100      	movs	r1, #0
   196b8:	5499      	strb	r1, [r3, r2]
   196ba:	687b      	ldr	r3, [r7, #4]
   196bc:	222f      	movs	r2, #47	; 0x2f
   196be:	2100      	movs	r1, #0
   196c0:	5499      	strb	r1, [r3, r2]
   196c2:	687b      	ldr	r3, [r7, #4]
   196c4:	2230      	movs	r2, #48	; 0x30
   196c6:	2100      	movs	r1, #0
   196c8:	5499      	strb	r1, [r3, r2]
   196ca:	687b      	ldr	r3, [r7, #4]
   196cc:	2231      	movs	r2, #49	; 0x31
   196ce:	2100      	movs	r1, #0
   196d0:	5499      	strb	r1, [r3, r2]
   196d2:	687b      	ldr	r3, [r7, #4]
   196d4:	2232      	movs	r2, #50	; 0x32
   196d6:	2100      	movs	r1, #0
   196d8:	5499      	strb	r1, [r3, r2]
   196da:	687b      	ldr	r3, [r7, #4]
   196dc:	2233      	movs	r2, #51	; 0x33
   196de:	2100      	movs	r1, #0
   196e0:	5499      	strb	r1, [r3, r2]
   196e2:	687b      	ldr	r3, [r7, #4]
   196e4:	2234      	movs	r2, #52	; 0x34
   196e6:	2100      	movs	r1, #0
   196e8:	5499      	strb	r1, [r3, r2]
   196ea:	687b      	ldr	r3, [r7, #4]
   196ec:	2235      	movs	r2, #53	; 0x35
   196ee:	2100      	movs	r1, #0
   196f0:	5499      	strb	r1, [r3, r2]
   196f2:	687b      	ldr	r3, [r7, #4]
   196f4:	2236      	movs	r2, #54	; 0x36
   196f6:	2100      	movs	r1, #0
   196f8:	5499      	strb	r1, [r3, r2]
   196fa:	687b      	ldr	r3, [r7, #4]
   196fc:	2237      	movs	r2, #55	; 0x37
   196fe:	2100      	movs	r1, #0
   19700:	5499      	strb	r1, [r3, r2]
   19702:	687b      	ldr	r3, [r7, #4]
   19704:	2238      	movs	r2, #56	; 0x38
   19706:	2100      	movs	r1, #0
   19708:	5499      	strb	r1, [r3, r2]
   1970a:	687b      	ldr	r3, [r7, #4]
   1970c:	2239      	movs	r2, #57	; 0x39
   1970e:	2100      	movs	r1, #0
   19710:	5499      	strb	r1, [r3, r2]
   19712:	687b      	ldr	r3, [r7, #4]
   19714:	223a      	movs	r2, #58	; 0x3a
   19716:	2100      	movs	r1, #0
   19718:	5499      	strb	r1, [r3, r2]
   1971a:	687b      	ldr	r3, [r7, #4]
   1971c:	223b      	movs	r2, #59	; 0x3b
   1971e:	2100      	movs	r1, #0
   19720:	5499      	strb	r1, [r3, r2]
   19722:	687b      	ldr	r3, [r7, #4]
   19724:	223c      	movs	r2, #60	; 0x3c
   19726:	2100      	movs	r1, #0
   19728:	5499      	strb	r1, [r3, r2]
   1972a:	687b      	ldr	r3, [r7, #4]
   1972c:	223d      	movs	r2, #61	; 0x3d
   1972e:	2100      	movs	r1, #0
   19730:	5499      	strb	r1, [r3, r2]
   19732:	687b      	ldr	r3, [r7, #4]
   19734:	223e      	movs	r2, #62	; 0x3e
   19736:	2100      	movs	r1, #0
   19738:	5499      	strb	r1, [r3, r2]
   1973a:	687b      	ldr	r3, [r7, #4]
   1973c:	223f      	movs	r2, #63	; 0x3f
   1973e:	2100      	movs	r1, #0
   19740:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   19742:	687b      	ldr	r3, [r7, #4]
   19744:	2240      	movs	r2, #64	; 0x40
   19746:	2100      	movs	r1, #0
   19748:	5499      	strb	r1, [r3, r2]
   1974a:	687b      	ldr	r3, [r7, #4]
   1974c:	2241      	movs	r2, #65	; 0x41
   1974e:	2100      	movs	r1, #0
   19750:	5499      	strb	r1, [r3, r2]
   19752:	687b      	ldr	r3, [r7, #4]
   19754:	2242      	movs	r2, #66	; 0x42
   19756:	2100      	movs	r1, #0
   19758:	5499      	strb	r1, [r3, r2]
   1975a:	687b      	ldr	r3, [r7, #4]
   1975c:	2243      	movs	r2, #67	; 0x43
   1975e:	2100      	movs	r1, #0
   19760:	5499      	strb	r1, [r3, r2]
   19762:	687b      	ldr	r3, [r7, #4]
   19764:	2244      	movs	r2, #68	; 0x44
   19766:	2100      	movs	r1, #0
   19768:	5499      	strb	r1, [r3, r2]
   1976a:	687b      	ldr	r3, [r7, #4]
   1976c:	2245      	movs	r2, #69	; 0x45
   1976e:	2100      	movs	r1, #0
   19770:	5499      	strb	r1, [r3, r2]
   19772:	687b      	ldr	r3, [r7, #4]
   19774:	2246      	movs	r2, #70	; 0x46
   19776:	2100      	movs	r1, #0
   19778:	5499      	strb	r1, [r3, r2]
   1977a:	687b      	ldr	r3, [r7, #4]
   1977c:	2247      	movs	r2, #71	; 0x47
   1977e:	2100      	movs	r1, #0
   19780:	5499      	strb	r1, [r3, r2]
   19782:	687b      	ldr	r3, [r7, #4]
   19784:	2248      	movs	r2, #72	; 0x48
   19786:	2100      	movs	r1, #0
   19788:	5499      	strb	r1, [r3, r2]
   1978a:	687b      	ldr	r3, [r7, #4]
   1978c:	2249      	movs	r2, #73	; 0x49
   1978e:	2100      	movs	r1, #0
   19790:	5499      	strb	r1, [r3, r2]
   19792:	687b      	ldr	r3, [r7, #4]
   19794:	224a      	movs	r2, #74	; 0x4a
   19796:	2100      	movs	r1, #0
   19798:	5499      	strb	r1, [r3, r2]
   1979a:	687b      	ldr	r3, [r7, #4]
   1979c:	224b      	movs	r2, #75	; 0x4b
   1979e:	2100      	movs	r1, #0
   197a0:	5499      	strb	r1, [r3, r2]
   197a2:	687b      	ldr	r3, [r7, #4]
   197a4:	224c      	movs	r2, #76	; 0x4c
   197a6:	2100      	movs	r1, #0
   197a8:	5499      	strb	r1, [r3, r2]
   197aa:	687b      	ldr	r3, [r7, #4]
   197ac:	224d      	movs	r2, #77	; 0x4d
   197ae:	2100      	movs	r1, #0
   197b0:	5499      	strb	r1, [r3, r2]
   197b2:	687b      	ldr	r3, [r7, #4]
   197b4:	224e      	movs	r2, #78	; 0x4e
   197b6:	2100      	movs	r1, #0
   197b8:	5499      	strb	r1, [r3, r2]
   197ba:	687b      	ldr	r3, [r7, #4]
   197bc:	224f      	movs	r2, #79	; 0x4f
   197be:	2100      	movs	r1, #0
   197c0:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   197c2:	687b      	ldr	r3, [r7, #4]
   197c4:	2250      	movs	r2, #80	; 0x50
   197c6:	2100      	movs	r1, #0
   197c8:	5499      	strb	r1, [r3, r2]
   197ca:	687b      	ldr	r3, [r7, #4]
   197cc:	2251      	movs	r2, #81	; 0x51
   197ce:	2100      	movs	r1, #0
   197d0:	5499      	strb	r1, [r3, r2]
   197d2:	687b      	ldr	r3, [r7, #4]
   197d4:	2252      	movs	r2, #82	; 0x52
   197d6:	2100      	movs	r1, #0
   197d8:	5499      	strb	r1, [r3, r2]
   197da:	687b      	ldr	r3, [r7, #4]
   197dc:	2253      	movs	r2, #83	; 0x53
   197de:	2100      	movs	r1, #0
   197e0:	5499      	strb	r1, [r3, r2]
   197e2:	687b      	ldr	r3, [r7, #4]
   197e4:	2254      	movs	r2, #84	; 0x54
   197e6:	2100      	movs	r1, #0
   197e8:	5499      	strb	r1, [r3, r2]
   197ea:	687b      	ldr	r3, [r7, #4]
   197ec:	2255      	movs	r2, #85	; 0x55
   197ee:	2100      	movs	r1, #0
   197f0:	5499      	strb	r1, [r3, r2]
   197f2:	687b      	ldr	r3, [r7, #4]
   197f4:	2256      	movs	r2, #86	; 0x56
   197f6:	2100      	movs	r1, #0
   197f8:	5499      	strb	r1, [r3, r2]
   197fa:	687b      	ldr	r3, [r7, #4]
   197fc:	2257      	movs	r2, #87	; 0x57
   197fe:	2100      	movs	r1, #0
   19800:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   19802:	687b      	ldr	r3, [r7, #4]
   19804:	2298      	movs	r2, #152	; 0x98
   19806:	2100      	movs	r1, #0
   19808:	5499      	strb	r1, [r3, r2]
   1980a:	687b      	ldr	r3, [r7, #4]
   1980c:	2200      	movs	r2, #0
   1980e:	659a      	str	r2, [r3, #88]	; 0x58
   19810:	687b      	ldr	r3, [r7, #4]
   19812:	2200      	movs	r2, #0
   19814:	679a      	str	r2, [r3, #120]	; 0x78
   19816:	687b      	ldr	r3, [r7, #4]
   19818:	2299      	movs	r2, #153	; 0x99
   1981a:	2100      	movs	r1, #0
   1981c:	5499      	strb	r1, [r3, r2]
   1981e:	687b      	ldr	r3, [r7, #4]
   19820:	2200      	movs	r2, #0
   19822:	65da      	str	r2, [r3, #92]	; 0x5c
   19824:	687b      	ldr	r3, [r7, #4]
   19826:	2200      	movs	r2, #0
   19828:	67da      	str	r2, [r3, #124]	; 0x7c
   1982a:	687b      	ldr	r3, [r7, #4]
   1982c:	229a      	movs	r2, #154	; 0x9a
   1982e:	2100      	movs	r1, #0
   19830:	5499      	strb	r1, [r3, r2]
   19832:	687b      	ldr	r3, [r7, #4]
   19834:	2200      	movs	r2, #0
   19836:	661a      	str	r2, [r3, #96]	; 0x60
   19838:	687b      	ldr	r3, [r7, #4]
   1983a:	2280      	movs	r2, #128	; 0x80
   1983c:	2100      	movs	r1, #0
   1983e:	5099      	str	r1, [r3, r2]
   19840:	687b      	ldr	r3, [r7, #4]
   19842:	229b      	movs	r2, #155	; 0x9b
   19844:	2100      	movs	r1, #0
   19846:	5499      	strb	r1, [r3, r2]
   19848:	687b      	ldr	r3, [r7, #4]
   1984a:	2200      	movs	r2, #0
   1984c:	665a      	str	r2, [r3, #100]	; 0x64
   1984e:	687b      	ldr	r3, [r7, #4]
   19850:	2284      	movs	r2, #132	; 0x84
   19852:	2100      	movs	r1, #0
   19854:	5099      	str	r1, [r3, r2]
   19856:	687b      	ldr	r3, [r7, #4]
   19858:	229c      	movs	r2, #156	; 0x9c
   1985a:	2100      	movs	r1, #0
   1985c:	5499      	strb	r1, [r3, r2]
   1985e:	687b      	ldr	r3, [r7, #4]
   19860:	2200      	movs	r2, #0
   19862:	669a      	str	r2, [r3, #104]	; 0x68
   19864:	687b      	ldr	r3, [r7, #4]
   19866:	2288      	movs	r2, #136	; 0x88
   19868:	2100      	movs	r1, #0
   1986a:	5099      	str	r1, [r3, r2]
   1986c:	687b      	ldr	r3, [r7, #4]
   1986e:	229d      	movs	r2, #157	; 0x9d
   19870:	2100      	movs	r1, #0
   19872:	5499      	strb	r1, [r3, r2]
   19874:	687b      	ldr	r3, [r7, #4]
   19876:	2200      	movs	r2, #0
   19878:	66da      	str	r2, [r3, #108]	; 0x6c
   1987a:	687b      	ldr	r3, [r7, #4]
   1987c:	228c      	movs	r2, #140	; 0x8c
   1987e:	2100      	movs	r1, #0
   19880:	5099      	str	r1, [r3, r2]
   19882:	687b      	ldr	r3, [r7, #4]
   19884:	229e      	movs	r2, #158	; 0x9e
   19886:	2100      	movs	r1, #0
   19888:	5499      	strb	r1, [r3, r2]
   1988a:	687b      	ldr	r3, [r7, #4]
   1988c:	2200      	movs	r2, #0
   1988e:	671a      	str	r2, [r3, #112]	; 0x70
   19890:	687b      	ldr	r3, [r7, #4]
   19892:	2290      	movs	r2, #144	; 0x90
   19894:	2100      	movs	r1, #0
   19896:	5099      	str	r1, [r3, r2]
   19898:	687b      	ldr	r3, [r7, #4]
   1989a:	229f      	movs	r2, #159	; 0x9f
   1989c:	2100      	movs	r1, #0
   1989e:	5499      	strb	r1, [r3, r2]
   198a0:	687b      	ldr	r3, [r7, #4]
   198a2:	2200      	movs	r2, #0
   198a4:	675a      	str	r2, [r3, #116]	; 0x74
   198a6:	687b      	ldr	r3, [r7, #4]
   198a8:	2294      	movs	r2, #148	; 0x94
   198aa:	2100      	movs	r1, #0
   198ac:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   198ae:	687b      	ldr	r3, [r7, #4]
   198b0:	22a0      	movs	r2, #160	; 0xa0
   198b2:	2101      	movs	r1, #1
   198b4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   198b6:	687b      	ldr	r3, [r7, #4]
   198b8:	22a1      	movs	r2, #161	; 0xa1
   198ba:	2100      	movs	r1, #0
   198bc:	5499      	strb	r1, [r3, r2]
}
   198be:	46c0      	nop			; (mov r8, r8)
   198c0:	46bd      	mov	sp, r7
   198c2:	b005      	add	sp, #20
   198c4:	bd90      	pop	{r4, r7, pc}
   198c6:	46c0      	nop			; (mov r8, r8)
   198c8:	000195c5 	.word	0x000195c5
   198cc:	000293d8 	.word	0x000293d8

000198d0 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   198d0:	b580      	push	{r7, lr}
   198d2:	b086      	sub	sp, #24
   198d4:	af00      	add	r7, sp, #0
   198d6:	60b9      	str	r1, [r7, #8]
   198d8:	607a      	str	r2, [r7, #4]
   198da:	230f      	movs	r3, #15
   198dc:	18fb      	adds	r3, r7, r3
   198de:	1c02      	adds	r2, r0, #0
   198e0:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   198e2:	2300      	movs	r3, #0
   198e4:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   198e6:	2300      	movs	r3, #0
   198e8:	613b      	str	r3, [r7, #16]
   198ea:	e01d      	b.n	19928 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   198ec:	68ba      	ldr	r2, [r7, #8]
   198ee:	693b      	ldr	r3, [r7, #16]
   198f0:	18d3      	adds	r3, r2, r3
   198f2:	3310      	adds	r3, #16
   198f4:	781b      	ldrb	r3, [r3, #0]
   198f6:	2b01      	cmp	r3, #1
   198f8:	d113      	bne.n	19922 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   198fa:	230f      	movs	r3, #15
   198fc:	18fb      	adds	r3, r7, r3
   198fe:	781b      	ldrb	r3, [r3, #0]
   19900:	4a1b      	ldr	r2, [pc, #108]	; (19970 <_tcc_build_ctrla+0xa0>)
   19902:	5cd3      	ldrb	r3, [r2, r3]
   19904:	001a      	movs	r2, r3
   19906:	693b      	ldr	r3, [r7, #16]
   19908:	429a      	cmp	r2, r3
   1990a:	da01      	bge.n	19910 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   1990c:	2317      	movs	r3, #23
   1990e:	e02a      	b.n	19966 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   19910:	2380      	movs	r3, #128	; 0x80
   19912:	045a      	lsls	r2, r3, #17
   19914:	693b      	ldr	r3, [r7, #16]
   19916:	409a      	lsls	r2, r3
   19918:	0013      	movs	r3, r2
   1991a:	001a      	movs	r2, r3
   1991c:	697b      	ldr	r3, [r7, #20]
   1991e:	4313      	orrs	r3, r2
   19920:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   19922:	693b      	ldr	r3, [r7, #16]
   19924:	3301      	adds	r3, #1
   19926:	613b      	str	r3, [r7, #16]
   19928:	693b      	ldr	r3, [r7, #16]
   1992a:	2b03      	cmp	r3, #3
   1992c:	ddde      	ble.n	198ec <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   1992e:	68bb      	ldr	r3, [r7, #8]
   19930:	22a1      	movs	r2, #161	; 0xa1
   19932:	5c9b      	ldrb	r3, [r3, r2]
   19934:	2b00      	cmp	r3, #0
   19936:	d004      	beq.n	19942 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   19938:	697b      	ldr	r3, [r7, #20]
   1993a:	2280      	movs	r2, #128	; 0x80
   1993c:	0112      	lsls	r2, r2, #4
   1993e:	4313      	orrs	r3, r2
   19940:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   19942:	68bb      	ldr	r3, [r7, #8]
   19944:	7b1b      	ldrb	r3, [r3, #12]
   19946:	031b      	lsls	r3, r3, #12
   19948:	001a      	movs	r2, r3
   1994a:	697b      	ldr	r3, [r7, #20]
   1994c:	4313      	orrs	r3, r2
   1994e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   19950:	68bb      	ldr	r3, [r7, #8]
   19952:	7adb      	ldrb	r3, [r3, #11]
   19954:	021b      	lsls	r3, r3, #8
   19956:	001a      	movs	r2, r3
   19958:	697b      	ldr	r3, [r7, #20]
   1995a:	4313      	orrs	r3, r2
   1995c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   1995e:	687b      	ldr	r3, [r7, #4]
   19960:	697a      	ldr	r2, [r7, #20]
   19962:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   19964:	2300      	movs	r3, #0
}
   19966:	0018      	movs	r0, r3
   19968:	46bd      	mov	sp, r7
   1996a:	b006      	add	sp, #24
   1996c:	bd80      	pop	{r7, pc}
   1996e:	46c0      	nop			; (mov r8, r8)
   19970:	000293e4 	.word	0x000293e4

00019974 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   19974:	b580      	push	{r7, lr}
   19976:	b086      	sub	sp, #24
   19978:	af00      	add	r7, sp, #0
   1997a:	60b9      	str	r1, [r7, #8]
   1997c:	607a      	str	r2, [r7, #4]
   1997e:	230f      	movs	r3, #15
   19980:	18fb      	adds	r3, r7, r3
   19982:	1c02      	adds	r2, r0, #0
   19984:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   19986:	2317      	movs	r3, #23
   19988:	18fb      	adds	r3, r7, r3
   1998a:	2200      	movs	r2, #0
   1998c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   1998e:	68bb      	ldr	r3, [r7, #8]
   19990:	7a1b      	ldrb	r3, [r3, #8]
   19992:	2b00      	cmp	r3, #0
   19994:	d007      	beq.n	199a6 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   19996:	2317      	movs	r3, #23
   19998:	18fb      	adds	r3, r7, r3
   1999a:	2217      	movs	r2, #23
   1999c:	18ba      	adds	r2, r7, r2
   1999e:	7812      	ldrb	r2, [r2, #0]
   199a0:	2104      	movs	r1, #4
   199a2:	430a      	orrs	r2, r1
   199a4:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   199a6:	68bb      	ldr	r3, [r7, #8]
   199a8:	7a5b      	ldrb	r3, [r3, #9]
   199aa:	2b01      	cmp	r3, #1
   199ac:	d107      	bne.n	199be <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   199ae:	2317      	movs	r3, #23
   199b0:	18fb      	adds	r3, r7, r3
   199b2:	2217      	movs	r2, #23
   199b4:	18ba      	adds	r2, r7, r2
   199b6:	7812      	ldrb	r2, [r2, #0]
   199b8:	2101      	movs	r1, #1
   199ba:	430a      	orrs	r2, r1
   199bc:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   199be:	687b      	ldr	r3, [r7, #4]
   199c0:	2217      	movs	r2, #23
   199c2:	18ba      	adds	r2, r7, r2
   199c4:	7812      	ldrb	r2, [r2, #0]
   199c6:	701a      	strb	r2, [r3, #0]
}
   199c8:	46c0      	nop			; (mov r8, r8)
   199ca:	46bd      	mov	sp, r7
   199cc:	b006      	add	sp, #24
   199ce:	bd80      	pop	{r7, pc}

000199d0 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   199d0:	b580      	push	{r7, lr}
   199d2:	b088      	sub	sp, #32
   199d4:	af00      	add	r7, sp, #0
   199d6:	60b9      	str	r1, [r7, #8]
   199d8:	607a      	str	r2, [r7, #4]
   199da:	230f      	movs	r3, #15
   199dc:	18fb      	adds	r3, r7, r3
   199de:	1c02      	adds	r2, r0, #0
   199e0:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   199e2:	230f      	movs	r3, #15
   199e4:	18fb      	adds	r3, r7, r3
   199e6:	781a      	ldrb	r2, [r3, #0]
   199e8:	231b      	movs	r3, #27
   199ea:	18fb      	adds	r3, r7, r3
   199ec:	493e      	ldr	r1, [pc, #248]	; (19ae8 <_tcc_build_faults+0x118>)
   199ee:	5c8a      	ldrb	r2, [r1, r2]
   199f0:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   199f2:	2300      	movs	r3, #0
   199f4:	61fb      	str	r3, [r7, #28]
   199f6:	e06e      	b.n	19ad6 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   199f8:	69fa      	ldr	r2, [r7, #28]
   199fa:	0013      	movs	r3, r2
   199fc:	009b      	lsls	r3, r3, #2
   199fe:	189b      	adds	r3, r3, r2
   19a00:	005b      	lsls	r3, r3, #1
   19a02:	3328      	adds	r3, #40	; 0x28
   19a04:	68ba      	ldr	r2, [r7, #8]
   19a06:	18d3      	adds	r3, r2, r3
   19a08:	3304      	adds	r3, #4
   19a0a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   19a0c:	697b      	ldr	r3, [r7, #20]
   19a0e:	7a5b      	ldrb	r3, [r3, #9]
   19a10:	221b      	movs	r2, #27
   19a12:	18ba      	adds	r2, r7, r2
   19a14:	7812      	ldrb	r2, [r2, #0]
   19a16:	429a      	cmp	r2, r3
   19a18:	d801      	bhi.n	19a1e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   19a1a:	2317      	movs	r3, #23
   19a1c:	e05f      	b.n	19ade <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   19a1e:	697b      	ldr	r3, [r7, #20]
   19a20:	781b      	ldrb	r3, [r3, #0]
   19a22:	2b0f      	cmp	r3, #15
   19a24:	d901      	bls.n	19a2a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   19a26:	2317      	movs	r3, #23
   19a28:	e059      	b.n	19ade <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   19a2a:	697b      	ldr	r3, [r7, #20]
   19a2c:	781b      	ldrb	r3, [r3, #0]
   19a2e:	061b      	lsls	r3, r3, #24
   19a30:	001a      	movs	r2, r3
   19a32:	23f0      	movs	r3, #240	; 0xf0
   19a34:	051b      	lsls	r3, r3, #20
   19a36:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   19a38:	697b      	ldr	r3, [r7, #20]
   19a3a:	785b      	ldrb	r3, [r3, #1]
   19a3c:	041b      	lsls	r3, r3, #16
   19a3e:	0019      	movs	r1, r3
   19a40:	23ff      	movs	r3, #255	; 0xff
   19a42:	041b      	lsls	r3, r3, #16
   19a44:	400b      	ands	r3, r1
   19a46:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   19a48:	697b      	ldr	r3, [r7, #20]
   19a4a:	789b      	ldrb	r3, [r3, #2]
   19a4c:	2b00      	cmp	r3, #0
   19a4e:	d001      	beq.n	19a54 <_tcc_build_faults+0x84>
   19a50:	2380      	movs	r3, #128	; 0x80
   19a52:	e000      	b.n	19a56 <_tcc_build_faults+0x86>
   19a54:	2300      	movs	r3, #0
   19a56:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   19a58:	697b      	ldr	r3, [r7, #20]
   19a5a:	78db      	ldrb	r3, [r3, #3]
   19a5c:	2b00      	cmp	r3, #0
   19a5e:	d001      	beq.n	19a64 <_tcc_build_faults+0x94>
   19a60:	2308      	movs	r3, #8
   19a62:	e000      	b.n	19a66 <_tcc_build_faults+0x96>
   19a64:	2300      	movs	r3, #0
   19a66:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   19a68:	697b      	ldr	r3, [r7, #20]
   19a6a:	791b      	ldrb	r3, [r3, #4]
   19a6c:	2b00      	cmp	r3, #0
   19a6e:	d001      	beq.n	19a74 <_tcc_build_faults+0xa4>
   19a70:	2310      	movs	r3, #16
   19a72:	e000      	b.n	19a76 <_tcc_build_faults+0xa6>
   19a74:	2300      	movs	r3, #0
   19a76:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   19a78:	697b      	ldr	r3, [r7, #20]
   19a7a:	795b      	ldrb	r3, [r3, #5]
   19a7c:	0019      	movs	r1, r3
   19a7e:	2303      	movs	r3, #3
   19a80:	400b      	ands	r3, r1
   19a82:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   19a84:	697b      	ldr	r3, [r7, #20]
   19a86:	799b      	ldrb	r3, [r3, #6]
   19a88:	015b      	lsls	r3, r3, #5
   19a8a:	0019      	movs	r1, r3
   19a8c:	2360      	movs	r3, #96	; 0x60
   19a8e:	400b      	ands	r3, r1
   19a90:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   19a92:	697b      	ldr	r3, [r7, #20]
   19a94:	79db      	ldrb	r3, [r3, #7]
   19a96:	021b      	lsls	r3, r3, #8
   19a98:	0019      	movs	r1, r3
   19a9a:	23c0      	movs	r3, #192	; 0xc0
   19a9c:	009b      	lsls	r3, r3, #2
   19a9e:	400b      	ands	r3, r1
   19aa0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   19aa2:	697b      	ldr	r3, [r7, #20]
   19aa4:	7a1b      	ldrb	r3, [r3, #8]
   19aa6:	031b      	lsls	r3, r3, #12
   19aa8:	0019      	movs	r1, r3
   19aaa:	23e0      	movs	r3, #224	; 0xe0
   19aac:	01db      	lsls	r3, r3, #7
   19aae:	400b      	ands	r3, r1
   19ab0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   19ab2:	697b      	ldr	r3, [r7, #20]
   19ab4:	7a5b      	ldrb	r3, [r3, #9]
   19ab6:	029b      	lsls	r3, r3, #10
   19ab8:	0019      	movs	r1, r3
   19aba:	23c0      	movs	r3, #192	; 0xc0
   19abc:	011b      	lsls	r3, r3, #4
   19abe:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   19ac0:	4313      	orrs	r3, r2
   19ac2:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   19ac4:	69fb      	ldr	r3, [r7, #28]
   19ac6:	009b      	lsls	r3, r3, #2
   19ac8:	687a      	ldr	r2, [r7, #4]
   19aca:	18d3      	adds	r3, r2, r3
   19acc:	693a      	ldr	r2, [r7, #16]
   19ace:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   19ad0:	69fb      	ldr	r3, [r7, #28]
   19ad2:	3301      	adds	r3, #1
   19ad4:	61fb      	str	r3, [r7, #28]
   19ad6:	69fb      	ldr	r3, [r7, #28]
   19ad8:	2b01      	cmp	r3, #1
   19ada:	dd8d      	ble.n	199f8 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   19adc:	2300      	movs	r3, #0
}
   19ade:	0018      	movs	r0, r3
   19ae0:	46bd      	mov	sp, r7
   19ae2:	b008      	add	sp, #32
   19ae4:	bd80      	pop	{r7, pc}
   19ae6:	46c0      	nop			; (mov r8, r8)
   19ae8:	000293e4 	.word	0x000293e4

00019aec <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   19aec:	b580      	push	{r7, lr}
   19aee:	b088      	sub	sp, #32
   19af0:	af00      	add	r7, sp, #0
   19af2:	60b9      	str	r1, [r7, #8]
   19af4:	607a      	str	r2, [r7, #4]
   19af6:	230f      	movs	r3, #15
   19af8:	18fb      	adds	r3, r7, r3
   19afa:	1c02      	adds	r2, r0, #0
   19afc:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   19afe:	230f      	movs	r3, #15
   19b00:	18fb      	adds	r3, r7, r3
   19b02:	781a      	ldrb	r2, [r3, #0]
   19b04:	2317      	movs	r3, #23
   19b06:	18fb      	adds	r3, r7, r3
   19b08:	492d      	ldr	r1, [pc, #180]	; (19bc0 <_tcc_build_drvctrl+0xd4>)
   19b0a:	5c8a      	ldrb	r2, [r1, r2]
   19b0c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   19b0e:	2300      	movs	r3, #0
   19b10:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   19b12:	2300      	movs	r3, #0
   19b14:	61fb      	str	r3, [r7, #28]
   19b16:	e048      	b.n	19baa <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   19b18:	68ba      	ldr	r2, [r7, #8]
   19b1a:	2150      	movs	r1, #80	; 0x50
   19b1c:	69fb      	ldr	r3, [r7, #28]
   19b1e:	18d3      	adds	r3, r2, r3
   19b20:	185b      	adds	r3, r3, r1
   19b22:	781b      	ldrb	r3, [r3, #0]
   19b24:	2b00      	cmp	r3, #0
   19b26:	d010      	beq.n	19b4a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   19b28:	2317      	movs	r3, #23
   19b2a:	18fb      	adds	r3, r7, r3
   19b2c:	781a      	ldrb	r2, [r3, #0]
   19b2e:	69fb      	ldr	r3, [r7, #28]
   19b30:	429a      	cmp	r2, r3
   19b32:	d801      	bhi.n	19b38 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   19b34:	2317      	movs	r3, #23
   19b36:	e03f      	b.n	19bb8 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   19b38:	2380      	movs	r3, #128	; 0x80
   19b3a:	025a      	lsls	r2, r3, #9
   19b3c:	69fb      	ldr	r3, [r7, #28]
   19b3e:	409a      	lsls	r2, r3
   19b40:	0013      	movs	r3, r2
   19b42:	001a      	movs	r2, r3
   19b44:	69bb      	ldr	r3, [r7, #24]
   19b46:	4313      	orrs	r3, r2
   19b48:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   19b4a:	68ba      	ldr	r2, [r7, #8]
   19b4c:	69fb      	ldr	r3, [r7, #28]
   19b4e:	331c      	adds	r3, #28
   19b50:	005b      	lsls	r3, r3, #1
   19b52:	18d3      	adds	r3, r2, r3
   19b54:	3309      	adds	r3, #9
   19b56:	781b      	ldrb	r3, [r3, #0]
   19b58:	2b00      	cmp	r3, #0
   19b5a:	d023      	beq.n	19ba4 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   19b5c:	2317      	movs	r3, #23
   19b5e:	18fb      	adds	r3, r7, r3
   19b60:	781a      	ldrb	r2, [r3, #0]
   19b62:	69fb      	ldr	r3, [r7, #28]
   19b64:	429a      	cmp	r2, r3
   19b66:	d801      	bhi.n	19b6c <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   19b68:	2317      	movs	r3, #23
   19b6a:	e025      	b.n	19bb8 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   19b6c:	68ba      	ldr	r2, [r7, #8]
   19b6e:	69fb      	ldr	r3, [r7, #28]
   19b70:	331c      	adds	r3, #28
   19b72:	005b      	lsls	r3, r3, #1
   19b74:	18d3      	adds	r3, r2, r3
   19b76:	3309      	adds	r3, #9
   19b78:	781b      	ldrb	r3, [r3, #0]
   19b7a:	2b02      	cmp	r3, #2
   19b7c:	d10a      	bne.n	19b94 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   19b7e:	2302      	movs	r3, #2
   19b80:	33ff      	adds	r3, #255	; 0xff
   19b82:	001a      	movs	r2, r3
   19b84:	69fb      	ldr	r3, [r7, #28]
   19b86:	409a      	lsls	r2, r3
   19b88:	0013      	movs	r3, r2
   19b8a:	001a      	movs	r2, r3
   19b8c:	69bb      	ldr	r3, [r7, #24]
   19b8e:	4313      	orrs	r3, r2
   19b90:	61bb      	str	r3, [r7, #24]
   19b92:	e007      	b.n	19ba4 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   19b94:	2201      	movs	r2, #1
   19b96:	69fb      	ldr	r3, [r7, #28]
   19b98:	409a      	lsls	r2, r3
   19b9a:	0013      	movs	r3, r2
   19b9c:	001a      	movs	r2, r3
   19b9e:	69bb      	ldr	r3, [r7, #24]
   19ba0:	4313      	orrs	r3, r2
   19ba2:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   19ba4:	69fb      	ldr	r3, [r7, #28]
   19ba6:	3301      	adds	r3, #1
   19ba8:	61fb      	str	r3, [r7, #28]
   19baa:	69fb      	ldr	r3, [r7, #28]
   19bac:	2b07      	cmp	r3, #7
   19bae:	d9b3      	bls.n	19b18 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   19bb0:	687b      	ldr	r3, [r7, #4]
   19bb2:	69ba      	ldr	r2, [r7, #24]
   19bb4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   19bb6:	2300      	movs	r3, #0
}
   19bb8:	0018      	movs	r0, r3
   19bba:	46bd      	mov	sp, r7
   19bbc:	b008      	add	sp, #32
   19bbe:	bd80      	pop	{r7, pc}
   19bc0:	000293e8 	.word	0x000293e8

00019bc4 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   19bc4:	b580      	push	{r7, lr}
   19bc6:	b088      	sub	sp, #32
   19bc8:	af00      	add	r7, sp, #0
   19bca:	60b9      	str	r1, [r7, #8]
   19bcc:	607a      	str	r2, [r7, #4]
   19bce:	230f      	movs	r3, #15
   19bd0:	18fb      	adds	r3, r7, r3
   19bd2:	1c02      	adds	r2, r0, #0
   19bd4:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   19bd6:	230f      	movs	r3, #15
   19bd8:	18fb      	adds	r3, r7, r3
   19bda:	781a      	ldrb	r2, [r3, #0]
   19bdc:	2317      	movs	r3, #23
   19bde:	18fb      	adds	r3, r7, r3
   19be0:	491d      	ldr	r1, [pc, #116]	; (19c58 <_tcc_build_waves+0x94>)
   19be2:	5c8a      	ldrb	r2, [r1, r2]
   19be4:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   19be6:	68bb      	ldr	r3, [r7, #8]
   19be8:	3310      	adds	r3, #16
   19bea:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   19bec:	693b      	ldr	r3, [r7, #16]
   19bee:	7a5b      	ldrb	r3, [r3, #9]
   19bf0:	011b      	lsls	r3, r3, #4
   19bf2:	001a      	movs	r2, r3
   19bf4:	2330      	movs	r3, #48	; 0x30
   19bf6:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   19bf8:	693b      	ldr	r3, [r7, #16]
   19bfa:	7a1b      	ldrb	r3, [r3, #8]
   19bfc:	0019      	movs	r1, r3
   19bfe:	2307      	movs	r3, #7
   19c00:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   19c02:	4313      	orrs	r3, r2
   19c04:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   19c06:	2300      	movs	r3, #0
   19c08:	61fb      	str	r3, [r7, #28]
   19c0a:	e01a      	b.n	19c42 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   19c0c:	693a      	ldr	r2, [r7, #16]
   19c0e:	69fb      	ldr	r3, [r7, #28]
   19c10:	18d3      	adds	r3, r2, r3
   19c12:	3304      	adds	r3, #4
   19c14:	781b      	ldrb	r3, [r3, #0]
   19c16:	2b00      	cmp	r3, #0
   19c18:	d010      	beq.n	19c3c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   19c1a:	2317      	movs	r3, #23
   19c1c:	18fb      	adds	r3, r7, r3
   19c1e:	781a      	ldrb	r2, [r3, #0]
   19c20:	69fb      	ldr	r3, [r7, #28]
   19c22:	429a      	cmp	r2, r3
   19c24:	dc01      	bgt.n	19c2a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   19c26:	2317      	movs	r3, #23
   19c28:	e012      	b.n	19c50 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   19c2a:	2380      	movs	r3, #128	; 0x80
   19c2c:	025a      	lsls	r2, r3, #9
   19c2e:	69fb      	ldr	r3, [r7, #28]
   19c30:	409a      	lsls	r2, r3
   19c32:	0013      	movs	r3, r2
   19c34:	001a      	movs	r2, r3
   19c36:	69bb      	ldr	r3, [r7, #24]
   19c38:	4313      	orrs	r3, r2
   19c3a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   19c3c:	69fb      	ldr	r3, [r7, #28]
   19c3e:	3301      	adds	r3, #1
   19c40:	61fb      	str	r3, [r7, #28]
   19c42:	69fb      	ldr	r3, [r7, #28]
   19c44:	2b03      	cmp	r3, #3
   19c46:	dde1      	ble.n	19c0c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   19c48:	687b      	ldr	r3, [r7, #4]
   19c4a:	69ba      	ldr	r2, [r7, #24]
   19c4c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   19c4e:	2300      	movs	r3, #0
}
   19c50:	0018      	movs	r0, r3
   19c52:	46bd      	mov	sp, r7
   19c54:	b008      	add	sp, #32
   19c56:	bd80      	pop	{r7, pc}
   19c58:	000293e4 	.word	0x000293e4

00019c5c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   19c5c:	b590      	push	{r4, r7, lr}
   19c5e:	b091      	sub	sp, #68	; 0x44
   19c60:	af00      	add	r7, sp, #0
   19c62:	60f8      	str	r0, [r7, #12]
   19c64:	60b9      	str	r1, [r7, #8]
   19c66:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   19c68:	233b      	movs	r3, #59	; 0x3b
   19c6a:	18fc      	adds	r4, r7, r3
   19c6c:	68bb      	ldr	r3, [r7, #8]
   19c6e:	0018      	movs	r0, r3
   19c70:	4bc4      	ldr	r3, [pc, #784]	; (19f84 <tcc_init+0x328>)
   19c72:	4798      	blx	r3
   19c74:	0003      	movs	r3, r0
   19c76:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   19c78:	233b      	movs	r3, #59	; 0x3b
   19c7a:	18fb      	adds	r3, r7, r3
   19c7c:	781a      	ldrb	r2, [r3, #0]
   19c7e:	4bc2      	ldr	r3, [pc, #776]	; (19f88 <tcc_init+0x32c>)
   19c80:	0092      	lsls	r2, r2, #2
   19c82:	58d3      	ldr	r3, [r2, r3]
   19c84:	0019      	movs	r1, r3
   19c86:	2002      	movs	r0, #2
   19c88:	4bc0      	ldr	r3, [pc, #768]	; (19f8c <tcc_init+0x330>)
   19c8a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   19c8c:	68bb      	ldr	r3, [r7, #8]
   19c8e:	681b      	ldr	r3, [r3, #0]
   19c90:	2202      	movs	r2, #2
   19c92:	4013      	ands	r3, r2
   19c94:	d001      	beq.n	19c9a <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   19c96:	231c      	movs	r3, #28
   19c98:	e1be      	b.n	1a018 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   19c9a:	68bb      	ldr	r3, [r7, #8]
   19c9c:	681b      	ldr	r3, [r3, #0]
   19c9e:	2201      	movs	r2, #1
   19ca0:	4013      	ands	r3, r2
   19ca2:	d001      	beq.n	19ca8 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   19ca4:	231c      	movs	r3, #28
   19ca6:	e1b7      	b.n	1a018 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   19ca8:	233b      	movs	r3, #59	; 0x3b
   19caa:	18fb      	adds	r3, r7, r3
   19cac:	781a      	ldrb	r2, [r3, #0]
   19cae:	4bb8      	ldr	r3, [pc, #736]	; (19f90 <tcc_init+0x334>)
   19cb0:	0092      	lsls	r2, r2, #2
   19cb2:	58d3      	ldr	r3, [r2, r3]
   19cb4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   19cb6:	687b      	ldr	r3, [r7, #4]
   19cb8:	681a      	ldr	r2, [r3, #0]
   19cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19cbc:	429a      	cmp	r2, r3
   19cbe:	d804      	bhi.n	19cca <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   19cc0:	687b      	ldr	r3, [r7, #4]
   19cc2:	685a      	ldr	r2, [r3, #4]
   19cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19cc6:	429a      	cmp	r2, r3
   19cc8:	d901      	bls.n	19cce <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   19cca:	2317      	movs	r3, #23
   19ccc:	e1a4      	b.n	1a018 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   19cce:	2300      	movs	r3, #0
   19cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   19cd2:	e00e      	b.n	19cf2 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   19cd4:	687a      	ldr	r2, [r7, #4]
   19cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19cd8:	3306      	adds	r3, #6
   19cda:	009b      	lsls	r3, r3, #2
   19cdc:	18d3      	adds	r3, r2, r3
   19cde:	3304      	adds	r3, #4
   19ce0:	681a      	ldr	r2, [r3, #0]
   19ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19ce4:	429a      	cmp	r2, r3
   19ce6:	d901      	bls.n	19cec <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   19ce8:	2317      	movs	r3, #23
   19cea:	e195      	b.n	1a018 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   19cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19cee:	3301      	adds	r3, #1
   19cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   19cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19cf4:	2b03      	cmp	r3, #3
   19cf6:	dded      	ble.n	19cd4 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   19cf8:	2300      	movs	r3, #0
   19cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   19cfc:	e019      	b.n	19d32 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   19cfe:	687a      	ldr	r2, [r7, #4]
   19d00:	2198      	movs	r1, #152	; 0x98
   19d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19d04:	18d3      	adds	r3, r2, r3
   19d06:	185b      	adds	r3, r3, r1
   19d08:	781b      	ldrb	r3, [r3, #0]
   19d0a:	2201      	movs	r2, #1
   19d0c:	4053      	eors	r3, r2
   19d0e:	b2db      	uxtb	r3, r3
   19d10:	2b00      	cmp	r3, #0
   19d12:	d10a      	bne.n	19d2a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   19d14:	233b      	movs	r3, #59	; 0x3b
   19d16:	18fb      	adds	r3, r7, r3
   19d18:	781b      	ldrb	r3, [r3, #0]
   19d1a:	4a9e      	ldr	r2, [pc, #632]	; (19f94 <tcc_init+0x338>)
   19d1c:	5cd3      	ldrb	r3, [r2, r3]
   19d1e:	001a      	movs	r2, r3
   19d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19d22:	429a      	cmp	r2, r3
   19d24:	dc02      	bgt.n	19d2c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   19d26:	2317      	movs	r3, #23
   19d28:	e176      	b.n	1a018 <tcc_init+0x3bc>
			continue;
   19d2a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   19d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19d2e:	3301      	adds	r3, #1
   19d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   19d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19d34:	2b07      	cmp	r3, #7
   19d36:	dde2      	ble.n	19cfe <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   19d38:	2300      	movs	r3, #0
   19d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   19d3c:	2333      	movs	r3, #51	; 0x33
   19d3e:	18fc      	adds	r4, r7, r3
   19d40:	232c      	movs	r3, #44	; 0x2c
   19d42:	18fa      	adds	r2, r7, r3
   19d44:	6879      	ldr	r1, [r7, #4]
   19d46:	233b      	movs	r3, #59	; 0x3b
   19d48:	18fb      	adds	r3, r7, r3
   19d4a:	781b      	ldrb	r3, [r3, #0]
   19d4c:	0018      	movs	r0, r3
   19d4e:	4b92      	ldr	r3, [pc, #584]	; (19f98 <tcc_init+0x33c>)
   19d50:	4798      	blx	r3
   19d52:	0003      	movs	r3, r0
   19d54:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   19d56:	2333      	movs	r3, #51	; 0x33
   19d58:	18fb      	adds	r3, r7, r3
   19d5a:	781b      	ldrb	r3, [r3, #0]
   19d5c:	2b00      	cmp	r3, #0
   19d5e:	d003      	beq.n	19d68 <tcc_init+0x10c>
		return status;
   19d60:	2333      	movs	r3, #51	; 0x33
   19d62:	18fb      	adds	r3, r7, r3
   19d64:	781b      	ldrb	r3, [r3, #0]
   19d66:	e157      	b.n	1a018 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   19d68:	232b      	movs	r3, #43	; 0x2b
   19d6a:	18fa      	adds	r2, r7, r3
   19d6c:	6879      	ldr	r1, [r7, #4]
   19d6e:	233b      	movs	r3, #59	; 0x3b
   19d70:	18fb      	adds	r3, r7, r3
   19d72:	781b      	ldrb	r3, [r3, #0]
   19d74:	0018      	movs	r0, r3
   19d76:	4b89      	ldr	r3, [pc, #548]	; (19f9c <tcc_init+0x340>)
   19d78:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   19d7a:	2333      	movs	r3, #51	; 0x33
   19d7c:	18fc      	adds	r4, r7, r3
   19d7e:	2320      	movs	r3, #32
   19d80:	18fa      	adds	r2, r7, r3
   19d82:	6879      	ldr	r1, [r7, #4]
   19d84:	233b      	movs	r3, #59	; 0x3b
   19d86:	18fb      	adds	r3, r7, r3
   19d88:	781b      	ldrb	r3, [r3, #0]
   19d8a:	0018      	movs	r0, r3
   19d8c:	4b84      	ldr	r3, [pc, #528]	; (19fa0 <tcc_init+0x344>)
   19d8e:	4798      	blx	r3
   19d90:	0003      	movs	r3, r0
   19d92:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   19d94:	2333      	movs	r3, #51	; 0x33
   19d96:	18fb      	adds	r3, r7, r3
   19d98:	781b      	ldrb	r3, [r3, #0]
   19d9a:	2b00      	cmp	r3, #0
   19d9c:	d003      	beq.n	19da6 <tcc_init+0x14a>
		return status;
   19d9e:	2333      	movs	r3, #51	; 0x33
   19da0:	18fb      	adds	r3, r7, r3
   19da2:	781b      	ldrb	r3, [r3, #0]
   19da4:	e138      	b.n	1a018 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   19da6:	2300      	movs	r3, #0
   19da8:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   19daa:	2333      	movs	r3, #51	; 0x33
   19dac:	18fc      	adds	r4, r7, r3
   19dae:	231c      	movs	r3, #28
   19db0:	18fa      	adds	r2, r7, r3
   19db2:	6879      	ldr	r1, [r7, #4]
   19db4:	233b      	movs	r3, #59	; 0x3b
   19db6:	18fb      	adds	r3, r7, r3
   19db8:	781b      	ldrb	r3, [r3, #0]
   19dba:	0018      	movs	r0, r3
   19dbc:	4b79      	ldr	r3, [pc, #484]	; (19fa4 <tcc_init+0x348>)
   19dbe:	4798      	blx	r3
   19dc0:	0003      	movs	r3, r0
   19dc2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   19dc4:	2333      	movs	r3, #51	; 0x33
   19dc6:	18fb      	adds	r3, r7, r3
   19dc8:	781b      	ldrb	r3, [r3, #0]
   19dca:	2b00      	cmp	r3, #0
   19dcc:	d003      	beq.n	19dd6 <tcc_init+0x17a>
		return status;
   19dce:	2333      	movs	r3, #51	; 0x33
   19dd0:	18fb      	adds	r3, r7, r3
   19dd2:	781b      	ldrb	r3, [r3, #0]
   19dd4:	e120      	b.n	1a018 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   19dd6:	2333      	movs	r3, #51	; 0x33
   19dd8:	18fc      	adds	r4, r7, r3
   19dda:	2318      	movs	r3, #24
   19ddc:	18fa      	adds	r2, r7, r3
   19dde:	6879      	ldr	r1, [r7, #4]
   19de0:	233b      	movs	r3, #59	; 0x3b
   19de2:	18fb      	adds	r3, r7, r3
   19de4:	781b      	ldrb	r3, [r3, #0]
   19de6:	0018      	movs	r0, r3
   19de8:	4b6f      	ldr	r3, [pc, #444]	; (19fa8 <tcc_init+0x34c>)
   19dea:	4798      	blx	r3
   19dec:	0003      	movs	r3, r0
   19dee:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   19df0:	2333      	movs	r3, #51	; 0x33
   19df2:	18fb      	adds	r3, r7, r3
   19df4:	781b      	ldrb	r3, [r3, #0]
   19df6:	2b00      	cmp	r3, #0
   19df8:	d003      	beq.n	19e02 <tcc_init+0x1a6>
		return status;
   19dfa:	2333      	movs	r3, #51	; 0x33
   19dfc:	18fb      	adds	r3, r7, r3
   19dfe:	781b      	ldrb	r3, [r3, #0]
   19e00:	e10a      	b.n	1a018 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   19e02:	2300      	movs	r3, #0
   19e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   19e06:	e009      	b.n	19e1c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   19e08:	68fa      	ldr	r2, [r7, #12]
   19e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19e0c:	009b      	lsls	r3, r3, #2
   19e0e:	18d3      	adds	r3, r2, r3
   19e10:	3304      	adds	r3, #4
   19e12:	2200      	movs	r2, #0
   19e14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   19e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19e18:	3301      	adds	r3, #1
   19e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   19e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19e1e:	2b0b      	cmp	r3, #11
   19e20:	ddf2      	ble.n	19e08 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   19e22:	68fb      	ldr	r3, [r7, #12]
   19e24:	2200      	movs	r2, #0
   19e26:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   19e28:	68fb      	ldr	r3, [r7, #12]
   19e2a:	2200      	movs	r2, #0
   19e2c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   19e2e:	233b      	movs	r3, #59	; 0x3b
   19e30:	18fb      	adds	r3, r7, r3
   19e32:	781a      	ldrb	r2, [r3, #0]
   19e34:	4b5d      	ldr	r3, [pc, #372]	; (19fac <tcc_init+0x350>)
   19e36:	0092      	lsls	r2, r2, #2
   19e38:	68f9      	ldr	r1, [r7, #12]
   19e3a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   19e3c:	68fb      	ldr	r3, [r7, #12]
   19e3e:	68ba      	ldr	r2, [r7, #8]
   19e40:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   19e42:	687b      	ldr	r3, [r7, #4]
   19e44:	22a0      	movs	r2, #160	; 0xa0
   19e46:	5c99      	ldrb	r1, [r3, r2]
   19e48:	68fb      	ldr	r3, [r7, #12]
   19e4a:	223c      	movs	r2, #60	; 0x3c
   19e4c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   19e4e:	2314      	movs	r3, #20
   19e50:	18fb      	adds	r3, r7, r3
   19e52:	0018      	movs	r0, r3
   19e54:	4b56      	ldr	r3, [pc, #344]	; (19fb0 <tcc_init+0x354>)
   19e56:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   19e58:	687b      	ldr	r3, [r7, #4]
   19e5a:	7a9a      	ldrb	r2, [r3, #10]
   19e5c:	2314      	movs	r3, #20
   19e5e:	18fb      	adds	r3, r7, r3
   19e60:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   19e62:	233b      	movs	r3, #59	; 0x3b
   19e64:	18fb      	adds	r3, r7, r3
   19e66:	781b      	ldrb	r3, [r3, #0]
   19e68:	4a52      	ldr	r2, [pc, #328]	; (19fb4 <tcc_init+0x358>)
   19e6a:	5cd3      	ldrb	r3, [r2, r3]
   19e6c:	2214      	movs	r2, #20
   19e6e:	18ba      	adds	r2, r7, r2
   19e70:	0011      	movs	r1, r2
   19e72:	0018      	movs	r0, r3
   19e74:	4b50      	ldr	r3, [pc, #320]	; (19fb8 <tcc_init+0x35c>)
   19e76:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   19e78:	233b      	movs	r3, #59	; 0x3b
   19e7a:	18fb      	adds	r3, r7, r3
   19e7c:	781b      	ldrb	r3, [r3, #0]
   19e7e:	4a4d      	ldr	r2, [pc, #308]	; (19fb4 <tcc_init+0x358>)
   19e80:	5cd3      	ldrb	r3, [r2, r3]
   19e82:	0018      	movs	r0, r3
   19e84:	4b4d      	ldr	r3, [pc, #308]	; (19fbc <tcc_init+0x360>)
   19e86:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   19e88:	2300      	movs	r3, #0
   19e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   19e8c:	e02d      	b.n	19eea <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   19e8e:	687a      	ldr	r2, [r7, #4]
   19e90:	2198      	movs	r1, #152	; 0x98
   19e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19e94:	18d3      	adds	r3, r2, r3
   19e96:	185b      	adds	r3, r3, r1
   19e98:	781b      	ldrb	r3, [r3, #0]
   19e9a:	2201      	movs	r2, #1
   19e9c:	4053      	eors	r3, r2
   19e9e:	b2db      	uxtb	r3, r3
   19ea0:	2b00      	cmp	r3, #0
   19ea2:	d11e      	bne.n	19ee2 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   19ea4:	2310      	movs	r3, #16
   19ea6:	18fb      	adds	r3, r7, r3
   19ea8:	0018      	movs	r0, r3
   19eaa:	4b45      	ldr	r3, [pc, #276]	; (19fc0 <tcc_init+0x364>)
   19eac:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   19eae:	687b      	ldr	r3, [r7, #4]
   19eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   19eb2:	321e      	adds	r2, #30
   19eb4:	0092      	lsls	r2, r2, #2
   19eb6:	58d3      	ldr	r3, [r2, r3]
   19eb8:	b2da      	uxtb	r2, r3
   19eba:	2310      	movs	r3, #16
   19ebc:	18fb      	adds	r3, r7, r3
   19ebe:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   19ec0:	2310      	movs	r3, #16
   19ec2:	18fb      	adds	r3, r7, r3
   19ec4:	2201      	movs	r2, #1
   19ec6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   19ec8:	687b      	ldr	r3, [r7, #4]
   19eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   19ecc:	3216      	adds	r2, #22
   19ece:	0092      	lsls	r2, r2, #2
   19ed0:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   19ed2:	b2db      	uxtb	r3, r3
   19ed4:	2210      	movs	r2, #16
   19ed6:	18ba      	adds	r2, r7, r2
   19ed8:	0011      	movs	r1, r2
   19eda:	0018      	movs	r0, r3
   19edc:	4b39      	ldr	r3, [pc, #228]	; (19fc4 <tcc_init+0x368>)
   19ede:	4798      	blx	r3
   19ee0:	e000      	b.n	19ee4 <tcc_init+0x288>
			continue;
   19ee2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   19ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19ee6:	3301      	adds	r3, #1
   19ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   19eea:	233b      	movs	r3, #59	; 0x3b
   19eec:	18fb      	adds	r3, r7, r3
   19eee:	781b      	ldrb	r3, [r3, #0]
   19ef0:	4a28      	ldr	r2, [pc, #160]	; (19f94 <tcc_init+0x338>)
   19ef2:	5cd3      	ldrb	r3, [r2, r3]
   19ef4:	001a      	movs	r2, r3
   19ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19ef8:	429a      	cmp	r2, r3
   19efa:	dcc8      	bgt.n	19e8e <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   19efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   19efe:	68bb      	ldr	r3, [r7, #8]
   19f00:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   19f02:	46c0      	nop			; (mov r8, r8)
   19f04:	68bb      	ldr	r3, [r7, #8]
   19f06:	689b      	ldr	r3, [r3, #8]
   19f08:	2204      	movs	r2, #4
   19f0a:	4013      	ands	r3, r2
   19f0c:	d1fa      	bne.n	19f04 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   19f0e:	68bb      	ldr	r3, [r7, #8]
   19f10:	22ff      	movs	r2, #255	; 0xff
   19f12:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   19f14:	46c0      	nop			; (mov r8, r8)
   19f16:	68bb      	ldr	r3, [r7, #8]
   19f18:	689b      	ldr	r3, [r3, #8]
   19f1a:	2204      	movs	r2, #4
   19f1c:	4013      	ands	r3, r2
   19f1e:	d1fa      	bne.n	19f16 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   19f20:	232b      	movs	r3, #43	; 0x2b
   19f22:	18fb      	adds	r3, r7, r3
   19f24:	781a      	ldrb	r2, [r3, #0]
   19f26:	68bb      	ldr	r3, [r7, #8]
   19f28:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   19f2a:	2320      	movs	r3, #32
   19f2c:	18fb      	adds	r3, r7, r3
   19f2e:	681a      	ldr	r2, [r3, #0]
   19f30:	68bb      	ldr	r3, [r7, #8]
   19f32:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   19f34:	2320      	movs	r3, #32
   19f36:	18fb      	adds	r3, r7, r3
   19f38:	685a      	ldr	r2, [r3, #4]
   19f3a:	68bb      	ldr	r3, [r7, #8]
   19f3c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   19f3e:	69fa      	ldr	r2, [r7, #28]
   19f40:	68bb      	ldr	r3, [r7, #8]
   19f42:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   19f44:	46c0      	nop			; (mov r8, r8)
   19f46:	68bb      	ldr	r3, [r7, #8]
   19f48:	689b      	ldr	r3, [r3, #8]
   19f4a:	4a1f      	ldr	r2, [pc, #124]	; (19fc8 <tcc_init+0x36c>)
   19f4c:	4013      	ands	r3, r2
   19f4e:	d1fa      	bne.n	19f46 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   19f50:	69ba      	ldr	r2, [r7, #24]
   19f52:	68bb      	ldr	r3, [r7, #8]
   19f54:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   19f56:	46c0      	nop			; (mov r8, r8)
   19f58:	68bb      	ldr	r3, [r7, #8]
   19f5a:	689b      	ldr	r3, [r3, #8]
   19f5c:	2210      	movs	r2, #16
   19f5e:	4013      	ands	r3, r2
   19f60:	d1fa      	bne.n	19f58 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   19f62:	687b      	ldr	r3, [r7, #4]
   19f64:	681a      	ldr	r2, [r3, #0]
   19f66:	68bb      	ldr	r3, [r7, #8]
   19f68:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   19f6a:	46c0      	nop			; (mov r8, r8)
   19f6c:	68bb      	ldr	r3, [r7, #8]
   19f6e:	689b      	ldr	r3, [r3, #8]
   19f70:	4a16      	ldr	r2, [pc, #88]	; (19fcc <tcc_init+0x370>)
   19f72:	4013      	ands	r3, r2
   19f74:	d1fa      	bne.n	19f6c <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   19f76:	687b      	ldr	r3, [r7, #4]
   19f78:	685a      	ldr	r2, [r3, #4]
   19f7a:	68bb      	ldr	r3, [r7, #8]
   19f7c:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   19f7e:	2300      	movs	r3, #0
   19f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   19f82:	e03f      	b.n	1a004 <tcc_init+0x3a8>
   19f84:	000195c5 	.word	0x000195c5
   19f88:	000293cc 	.word	0x000293cc
   19f8c:	00019541 	.word	0x00019541
   19f90:	000293d8 	.word	0x000293d8
   19f94:	000293e8 	.word	0x000293e8
   19f98:	000198d1 	.word	0x000198d1
   19f9c:	00019975 	.word	0x00019975
   19fa0:	000199d1 	.word	0x000199d1
   19fa4:	00019aed 	.word	0x00019aed
   19fa8:	00019bc5 	.word	0x00019bc5
   19fac:	200058a4 	.word	0x200058a4
   19fb0:	00019529 	.word	0x00019529
   19fb4:	000293c8 	.word	0x000293c8
   19fb8:	00019141 	.word	0x00019141
   19fbc:	00019185 	.word	0x00019185
   19fc0:	0001959d 	.word	0x0001959d
   19fc4:	000194a1 	.word	0x000194a1
   19fc8:	00020040 	.word	0x00020040
   19fcc:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   19fd0:	46c0      	nop			; (mov r8, r8)
   19fd2:	68bb      	ldr	r3, [r7, #8]
   19fd4:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   19fd6:	4912      	ldr	r1, [pc, #72]	; (1a020 <tcc_init+0x3c4>)
   19fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   19fda:	4091      	lsls	r1, r2
   19fdc:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   19fde:	4013      	ands	r3, r2
   19fe0:	d1f7      	bne.n	19fd2 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   19fe2:	687a      	ldr	r2, [r7, #4]
   19fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19fe6:	3306      	adds	r3, #6
   19fe8:	009b      	lsls	r3, r3, #2
   19fea:	18d3      	adds	r3, r2, r3
   19fec:	3304      	adds	r3, #4
   19fee:	681a      	ldr	r2, [r3, #0]
   19ff0:	68b9      	ldr	r1, [r7, #8]
   19ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19ff4:	3310      	adds	r3, #16
   19ff6:	009b      	lsls	r3, r3, #2
   19ff8:	18cb      	adds	r3, r1, r3
   19ffa:	3304      	adds	r3, #4
   19ffc:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   19ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a000:	3301      	adds	r3, #1
   1a002:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a004:	233b      	movs	r3, #59	; 0x3b
   1a006:	18fb      	adds	r3, r7, r3
   1a008:	781b      	ldrb	r3, [r3, #0]
   1a00a:	4a06      	ldr	r2, [pc, #24]	; (1a024 <tcc_init+0x3c8>)
   1a00c:	5cd3      	ldrb	r3, [r2, r3]
   1a00e:	001a      	movs	r2, r3
   1a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a012:	429a      	cmp	r2, r3
   1a014:	dcdc      	bgt.n	19fd0 <tcc_init+0x374>
	}

	return STATUS_OK;
   1a016:	2300      	movs	r3, #0
}
   1a018:	0018      	movs	r0, r3
   1a01a:	46bd      	mov	sp, r7
   1a01c:	b011      	add	sp, #68	; 0x44
   1a01e:	bd90      	pop	{r4, r7, pc}
   1a020:	00080100 	.word	0x00080100
   1a024:	000293e4 	.word	0x000293e4

0001a028 <system_interrupt_enable>:
{
   1a028:	b580      	push	{r7, lr}
   1a02a:	b082      	sub	sp, #8
   1a02c:	af00      	add	r7, sp, #0
   1a02e:	0002      	movs	r2, r0
   1a030:	1dfb      	adds	r3, r7, #7
   1a032:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a034:	4b06      	ldr	r3, [pc, #24]	; (1a050 <system_interrupt_enable+0x28>)
   1a036:	1dfa      	adds	r2, r7, #7
   1a038:	7812      	ldrb	r2, [r2, #0]
   1a03a:	0011      	movs	r1, r2
   1a03c:	221f      	movs	r2, #31
   1a03e:	400a      	ands	r2, r1
   1a040:	2101      	movs	r1, #1
   1a042:	4091      	lsls	r1, r2
   1a044:	000a      	movs	r2, r1
   1a046:	601a      	str	r2, [r3, #0]
}
   1a048:	46c0      	nop			; (mov r8, r8)
   1a04a:	46bd      	mov	sp, r7
   1a04c:	b002      	add	sp, #8
   1a04e:	bd80      	pop	{r7, pc}
   1a050:	e000e100 	.word	0xe000e100

0001a054 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   1a054:	b580      	push	{r7, lr}
   1a056:	b082      	sub	sp, #8
   1a058:	af00      	add	r7, sp, #0
   1a05a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   1a05c:	4a04      	ldr	r2, [pc, #16]	; (1a070 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   1a05e:	687b      	ldr	r3, [r7, #4]
   1a060:	18d3      	adds	r3, r2, r3
   1a062:	781b      	ldrb	r3, [r3, #0]
   1a064:	b25b      	sxtb	r3, r3
}
   1a066:	0018      	movs	r0, r3
   1a068:	46bd      	mov	sp, r7
   1a06a:	b002      	add	sp, #8
   1a06c:	bd80      	pop	{r7, pc}
   1a06e:	46c0      	nop			; (mov r8, r8)
   1a070:	2000011c 	.word	0x2000011c

0001a074 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   1a074:	b580      	push	{r7, lr}
   1a076:	b084      	sub	sp, #16
   1a078:	af00      	add	r7, sp, #0
   1a07a:	60f8      	str	r0, [r7, #12]
   1a07c:	60b9      	str	r1, [r7, #8]
   1a07e:	1dfb      	adds	r3, r7, #7
   1a080:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1a082:	1dfb      	adds	r3, r7, #7
   1a084:	781b      	ldrb	r3, [r3, #0]
   1a086:	68fa      	ldr	r2, [r7, #12]
   1a088:	009b      	lsls	r3, r3, #2
   1a08a:	18d3      	adds	r3, r2, r3
   1a08c:	3304      	adds	r3, #4
   1a08e:	68ba      	ldr	r2, [r7, #8]
   1a090:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   1a092:	68fb      	ldr	r3, [r7, #12]
   1a094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a096:	1dfb      	adds	r3, r7, #7
   1a098:	7819      	ldrb	r1, [r3, #0]
   1a09a:	4b05      	ldr	r3, [pc, #20]	; (1a0b0 <tcc_register_callback+0x3c>)
   1a09c:	0089      	lsls	r1, r1, #2
   1a09e:	58cb      	ldr	r3, [r1, r3]
   1a0a0:	431a      	orrs	r2, r3
   1a0a2:	68fb      	ldr	r3, [r7, #12]
   1a0a4:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   1a0a6:	2300      	movs	r3, #0
}
   1a0a8:	0018      	movs	r0, r3
   1a0aa:	46bd      	mov	sp, r7
   1a0ac:	b004      	add	sp, #16
   1a0ae:	bd80      	pop	{r7, pc}
   1a0b0:	000293ec 	.word	0x000293ec

0001a0b4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   1a0b4:	b580      	push	{r7, lr}
   1a0b6:	b082      	sub	sp, #8
   1a0b8:	af00      	add	r7, sp, #0
   1a0ba:	6078      	str	r0, [r7, #4]
   1a0bc:	000a      	movs	r2, r1
   1a0be:	1cfb      	adds	r3, r7, #3
   1a0c0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1a0c2:	687b      	ldr	r3, [r7, #4]
   1a0c4:	681b      	ldr	r3, [r3, #0]
   1a0c6:	0018      	movs	r0, r3
   1a0c8:	4b0f      	ldr	r3, [pc, #60]	; (1a108 <tcc_enable_callback+0x54>)
   1a0ca:	4798      	blx	r3
   1a0cc:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   1a0ce:	0018      	movs	r0, r3
   1a0d0:	4b0e      	ldr	r3, [pc, #56]	; (1a10c <tcc_enable_callback+0x58>)
   1a0d2:	4798      	blx	r3
   1a0d4:	0003      	movs	r3, r0
   1a0d6:	0018      	movs	r0, r3
   1a0d8:	4b0d      	ldr	r3, [pc, #52]	; (1a110 <tcc_enable_callback+0x5c>)
   1a0da:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   1a0dc:	687b      	ldr	r3, [r7, #4]
   1a0de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a0e0:	1cfb      	adds	r3, r7, #3
   1a0e2:	7819      	ldrb	r1, [r3, #0]
   1a0e4:	4b0b      	ldr	r3, [pc, #44]	; (1a114 <tcc_enable_callback+0x60>)
   1a0e6:	0089      	lsls	r1, r1, #2
   1a0e8:	58cb      	ldr	r3, [r1, r3]
   1a0ea:	431a      	orrs	r2, r3
   1a0ec:	687b      	ldr	r3, [r7, #4]
   1a0ee:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1a0f0:	687b      	ldr	r3, [r7, #4]
   1a0f2:	681b      	ldr	r3, [r3, #0]
   1a0f4:	1cfa      	adds	r2, r7, #3
   1a0f6:	7811      	ldrb	r1, [r2, #0]
   1a0f8:	4a06      	ldr	r2, [pc, #24]	; (1a114 <tcc_enable_callback+0x60>)
   1a0fa:	0089      	lsls	r1, r1, #2
   1a0fc:	588a      	ldr	r2, [r1, r2]
   1a0fe:	629a      	str	r2, [r3, #40]	; 0x28
}
   1a100:	46c0      	nop			; (mov r8, r8)
   1a102:	46bd      	mov	sp, r7
   1a104:	b002      	add	sp, #8
   1a106:	bd80      	pop	{r7, pc}
   1a108:	000195c5 	.word	0x000195c5
   1a10c:	0001a055 	.word	0x0001a055
   1a110:	0001a029 	.word	0x0001a029
   1a114:	000293ec 	.word	0x000293ec

0001a118 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1a118:	b580      	push	{r7, lr}
   1a11a:	af00      	add	r7, sp, #0
   1a11c:	2000      	movs	r0, #0
   1a11e:	4b02      	ldr	r3, [pc, #8]	; (1a128 <TCC0_Handler+0x10>)
   1a120:	4798      	blx	r3
   1a122:	46c0      	nop			; (mov r8, r8)
   1a124:	46bd      	mov	sp, r7
   1a126:	bd80      	pop	{r7, pc}
   1a128:	0001a155 	.word	0x0001a155

0001a12c <TCC1_Handler>:
   1a12c:	b580      	push	{r7, lr}
   1a12e:	af00      	add	r7, sp, #0
   1a130:	2001      	movs	r0, #1
   1a132:	4b02      	ldr	r3, [pc, #8]	; (1a13c <TCC1_Handler+0x10>)
   1a134:	4798      	blx	r3
   1a136:	46c0      	nop			; (mov r8, r8)
   1a138:	46bd      	mov	sp, r7
   1a13a:	bd80      	pop	{r7, pc}
   1a13c:	0001a155 	.word	0x0001a155

0001a140 <TCC2_Handler>:
   1a140:	b580      	push	{r7, lr}
   1a142:	af00      	add	r7, sp, #0
   1a144:	2002      	movs	r0, #2
   1a146:	4b02      	ldr	r3, [pc, #8]	; (1a150 <TCC2_Handler+0x10>)
   1a148:	4798      	blx	r3
   1a14a:	46c0      	nop			; (mov r8, r8)
   1a14c:	46bd      	mov	sp, r7
   1a14e:	bd80      	pop	{r7, pc}
   1a150:	0001a155 	.word	0x0001a155

0001a154 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1a154:	b580      	push	{r7, lr}
   1a156:	b086      	sub	sp, #24
   1a158:	af00      	add	r7, sp, #0
   1a15a:	0002      	movs	r2, r0
   1a15c:	1dfb      	adds	r3, r7, #7
   1a15e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   1a160:	1dfb      	adds	r3, r7, #7
   1a162:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   1a164:	4b18      	ldr	r3, [pc, #96]	; (1a1c8 <_tcc_interrupt_handler+0x74>)
   1a166:	0092      	lsls	r2, r2, #2
   1a168:	58d3      	ldr	r3, [r2, r3]
   1a16a:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1a16c:	693b      	ldr	r3, [r7, #16]
   1a16e:	681b      	ldr	r3, [r3, #0]
   1a170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   1a172:	693b      	ldr	r3, [r7, #16]
   1a174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1a176:	401a      	ands	r2, r3
			module->enable_callback_mask);
   1a178:	693b      	ldr	r3, [r7, #16]
   1a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1a17c:	4013      	ands	r3, r2
   1a17e:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1a180:	2300      	movs	r3, #0
   1a182:	617b      	str	r3, [r7, #20]
   1a184:	e019      	b.n	1a1ba <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1a186:	4b11      	ldr	r3, [pc, #68]	; (1a1cc <_tcc_interrupt_handler+0x78>)
   1a188:	697a      	ldr	r2, [r7, #20]
   1a18a:	0092      	lsls	r2, r2, #2
   1a18c:	58d3      	ldr	r3, [r2, r3]
   1a18e:	68fa      	ldr	r2, [r7, #12]
   1a190:	4013      	ands	r3, r2
   1a192:	d00f      	beq.n	1a1b4 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   1a194:	693a      	ldr	r2, [r7, #16]
   1a196:	697b      	ldr	r3, [r7, #20]
   1a198:	009b      	lsls	r3, r3, #2
   1a19a:	18d3      	adds	r3, r2, r3
   1a19c:	3304      	adds	r3, #4
   1a19e:	681b      	ldr	r3, [r3, #0]
   1a1a0:	693a      	ldr	r2, [r7, #16]
   1a1a2:	0010      	movs	r0, r2
   1a1a4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1a1a6:	693b      	ldr	r3, [r7, #16]
   1a1a8:	681b      	ldr	r3, [r3, #0]
   1a1aa:	4a08      	ldr	r2, [pc, #32]	; (1a1cc <_tcc_interrupt_handler+0x78>)
   1a1ac:	6979      	ldr	r1, [r7, #20]
   1a1ae:	0089      	lsls	r1, r1, #2
   1a1b0:	588a      	ldr	r2, [r1, r2]
   1a1b2:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1a1b4:	697b      	ldr	r3, [r7, #20]
   1a1b6:	3301      	adds	r3, #1
   1a1b8:	617b      	str	r3, [r7, #20]
   1a1ba:	697b      	ldr	r3, [r7, #20]
   1a1bc:	2b0b      	cmp	r3, #11
   1a1be:	dde2      	ble.n	1a186 <_tcc_interrupt_handler+0x32>
		}
	}
}
   1a1c0:	46c0      	nop			; (mov r8, r8)
   1a1c2:	46bd      	mov	sp, r7
   1a1c4:	b006      	add	sp, #24
   1a1c6:	bd80      	pop	{r7, pc}
   1a1c8:	200058a4 	.word	0x200058a4
   1a1cc:	000293ec 	.word	0x000293ec

0001a1d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   1a1d0:	b580      	push	{r7, lr}
   1a1d2:	b082      	sub	sp, #8
   1a1d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   1a1d6:	4b2f      	ldr	r3, [pc, #188]	; (1a294 <Reset_Handler+0xc4>)
   1a1d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   1a1da:	4b2f      	ldr	r3, [pc, #188]	; (1a298 <Reset_Handler+0xc8>)
   1a1dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   1a1de:	687a      	ldr	r2, [r7, #4]
   1a1e0:	683b      	ldr	r3, [r7, #0]
   1a1e2:	429a      	cmp	r2, r3
   1a1e4:	d00c      	beq.n	1a200 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   1a1e6:	e007      	b.n	1a1f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   1a1e8:	683b      	ldr	r3, [r7, #0]
   1a1ea:	1d1a      	adds	r2, r3, #4
   1a1ec:	603a      	str	r2, [r7, #0]
   1a1ee:	687a      	ldr	r2, [r7, #4]
   1a1f0:	1d11      	adds	r1, r2, #4
   1a1f2:	6079      	str	r1, [r7, #4]
   1a1f4:	6812      	ldr	r2, [r2, #0]
   1a1f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   1a1f8:	683a      	ldr	r2, [r7, #0]
   1a1fa:	4b28      	ldr	r3, [pc, #160]	; (1a29c <Reset_Handler+0xcc>)
   1a1fc:	429a      	cmp	r2, r3
   1a1fe:	d3f3      	bcc.n	1a1e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   1a200:	4b27      	ldr	r3, [pc, #156]	; (1a2a0 <Reset_Handler+0xd0>)
   1a202:	603b      	str	r3, [r7, #0]
   1a204:	e004      	b.n	1a210 <Reset_Handler+0x40>
                *pDest++ = 0;
   1a206:	683b      	ldr	r3, [r7, #0]
   1a208:	1d1a      	adds	r2, r3, #4
   1a20a:	603a      	str	r2, [r7, #0]
   1a20c:	2200      	movs	r2, #0
   1a20e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   1a210:	683a      	ldr	r2, [r7, #0]
   1a212:	4b24      	ldr	r3, [pc, #144]	; (1a2a4 <Reset_Handler+0xd4>)
   1a214:	429a      	cmp	r2, r3
   1a216:	d3f6      	bcc.n	1a206 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   1a218:	4b23      	ldr	r3, [pc, #140]	; (1a2a8 <Reset_Handler+0xd8>)
   1a21a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1a21c:	4b23      	ldr	r3, [pc, #140]	; (1a2ac <Reset_Handler+0xdc>)
   1a21e:	687a      	ldr	r2, [r7, #4]
   1a220:	21ff      	movs	r1, #255	; 0xff
   1a222:	438a      	bics	r2, r1
   1a224:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1a226:	4a22      	ldr	r2, [pc, #136]	; (1a2b0 <Reset_Handler+0xe0>)
   1a228:	2390      	movs	r3, #144	; 0x90
   1a22a:	005b      	lsls	r3, r3, #1
   1a22c:	2102      	movs	r1, #2
   1a22e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1a230:	4a20      	ldr	r2, [pc, #128]	; (1a2b4 <Reset_Handler+0xe4>)
   1a232:	78d3      	ldrb	r3, [r2, #3]
   1a234:	2103      	movs	r1, #3
   1a236:	438b      	bics	r3, r1
   1a238:	1c19      	adds	r1, r3, #0
   1a23a:	2302      	movs	r3, #2
   1a23c:	430b      	orrs	r3, r1
   1a23e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1a240:	4a1c      	ldr	r2, [pc, #112]	; (1a2b4 <Reset_Handler+0xe4>)
   1a242:	78d3      	ldrb	r3, [r2, #3]
   1a244:	210c      	movs	r1, #12
   1a246:	438b      	bics	r3, r1
   1a248:	1c19      	adds	r1, r3, #0
   1a24a:	2308      	movs	r3, #8
   1a24c:	430b      	orrs	r3, r1
   1a24e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   1a250:	4a19      	ldr	r2, [pc, #100]	; (1a2b8 <Reset_Handler+0xe8>)
   1a252:	7b93      	ldrb	r3, [r2, #14]
   1a254:	2130      	movs	r1, #48	; 0x30
   1a256:	438b      	bics	r3, r1
   1a258:	1c19      	adds	r1, r3, #0
   1a25a:	2320      	movs	r3, #32
   1a25c:	430b      	orrs	r3, r1
   1a25e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1a260:	4a15      	ldr	r2, [pc, #84]	; (1a2b8 <Reset_Handler+0xe8>)
   1a262:	7b93      	ldrb	r3, [r2, #14]
   1a264:	210c      	movs	r1, #12
   1a266:	438b      	bics	r3, r1
   1a268:	1c19      	adds	r1, r3, #0
   1a26a:	2308      	movs	r3, #8
   1a26c:	430b      	orrs	r3, r1
   1a26e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1a270:	4a11      	ldr	r2, [pc, #68]	; (1a2b8 <Reset_Handler+0xe8>)
   1a272:	7b93      	ldrb	r3, [r2, #14]
   1a274:	2103      	movs	r1, #3
   1a276:	438b      	bics	r3, r1
   1a278:	1c19      	adds	r1, r3, #0
   1a27a:	2302      	movs	r3, #2
   1a27c:	430b      	orrs	r3, r1
   1a27e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   1a280:	4a0e      	ldr	r2, [pc, #56]	; (1a2bc <Reset_Handler+0xec>)
   1a282:	6853      	ldr	r3, [r2, #4]
   1a284:	2180      	movs	r1, #128	; 0x80
   1a286:	430b      	orrs	r3, r1
   1a288:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   1a28a:	4b0d      	ldr	r3, [pc, #52]	; (1a2c0 <Reset_Handler+0xf0>)
   1a28c:	4798      	blx	r3

        /* Branch to main function */
        main();
   1a28e:	4b0d      	ldr	r3, [pc, #52]	; (1a2c4 <Reset_Handler+0xf4>)
   1a290:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   1a292:	e7fe      	b.n	1a292 <Reset_Handler+0xc2>
   1a294:	0002a264 	.word	0x0002a264
   1a298:	20000000 	.word	0x20000000
   1a29c:	200002f4 	.word	0x200002f4
   1a2a0:	20000300 	.word	0x20000300
   1a2a4:	20005914 	.word	0x20005914
   1a2a8:	00000000 	.word	0x00000000
   1a2ac:	e000ed00 	.word	0xe000ed00
   1a2b0:	41007000 	.word	0x41007000
   1a2b4:	41005000 	.word	0x41005000
   1a2b8:	41004800 	.word	0x41004800
   1a2bc:	41004000 	.word	0x41004000
   1a2c0:	00024711 	.word	0x00024711
   1a2c4:	00021a05 	.word	0x00021a05

0001a2c8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   1a2c8:	b580      	push	{r7, lr}
   1a2ca:	af00      	add	r7, sp, #0
  __asm volatile (
   1a2cc:	2004      	movs	r0, #4
   1a2ce:	4671      	mov	r1, lr
   1a2d0:	4208      	tst	r0, r1
   1a2d2:	d002      	beq.n	1a2da <_MSP>
   1a2d4:	f3ef 8009 	mrs	r0, PSP
   1a2d8:	e001      	b.n	1a2de <_HALT>

0001a2da <_MSP>:
   1a2da:	f3ef 8008 	mrs	r0, MSP

0001a2de <_HALT>:
   1a2de:	6941      	ldr	r1, [r0, #20]
   1a2e0:	e004      	b.n	1a2ec <HardFault_HandlerC>
   1a2e2:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   1a2e4:	46c0      	nop			; (mov r8, r8)
   1a2e6:	46bd      	mov	sp, r7
   1a2e8:	bd80      	pop	{r7, pc}
	...

0001a2ec <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   1a2ec:	b580      	push	{r7, lr}
   1a2ee:	b090      	sub	sp, #64	; 0x40
   1a2f0:	af00      	add	r7, sp, #0
   1a2f2:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   1a2f4:	687b      	ldr	r3, [r7, #4]
   1a2f6:	681b      	ldr	r3, [r3, #0]
   1a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1a2fa:	687b      	ldr	r3, [r7, #4]
   1a2fc:	685b      	ldr	r3, [r3, #4]
   1a2fe:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1a300:	687b      	ldr	r3, [r7, #4]
   1a302:	689b      	ldr	r3, [r3, #8]
   1a304:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   1a306:	687b      	ldr	r3, [r7, #4]
   1a308:	68db      	ldr	r3, [r3, #12]
   1a30a:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   1a30c:	687b      	ldr	r3, [r7, #4]
   1a30e:	691b      	ldr	r3, [r3, #16]
   1a310:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1a312:	687b      	ldr	r3, [r7, #4]
   1a314:	695b      	ldr	r3, [r3, #20]
   1a316:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   1a318:	687b      	ldr	r3, [r7, #4]
   1a31a:	699b      	ldr	r3, [r3, #24]
   1a31c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1a31e:	687b      	ldr	r3, [r7, #4]
   1a320:	69db      	ldr	r3, [r3, #28]
   1a322:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   1a324:	4b0b      	ldr	r3, [pc, #44]	; (1a354 <HardFault_HandlerC+0x68>)
   1a326:	681b      	ldr	r3, [r3, #0]
   1a328:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   1a32a:	4b0b      	ldr	r3, [pc, #44]	; (1a358 <HardFault_HandlerC+0x6c>)
   1a32c:	681b      	ldr	r3, [r3, #0]
   1a32e:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1a330:	4b0a      	ldr	r3, [pc, #40]	; (1a35c <HardFault_HandlerC+0x70>)
   1a332:	681b      	ldr	r3, [r3, #0]
   1a334:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   1a336:	4b0a      	ldr	r3, [pc, #40]	; (1a360 <HardFault_HandlerC+0x74>)
   1a338:	681b      	ldr	r3, [r3, #0]
   1a33a:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   1a33c:	4b09      	ldr	r3, [pc, #36]	; (1a364 <HardFault_HandlerC+0x78>)
   1a33e:	681b      	ldr	r3, [r3, #0]
   1a340:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1a342:	4b09      	ldr	r3, [pc, #36]	; (1a368 <HardFault_HandlerC+0x7c>)
   1a344:	681b      	ldr	r3, [r3, #0]
   1a346:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   1a348:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   1a34a:	46c0      	nop			; (mov r8, r8)
   1a34c:	46bd      	mov	sp, r7
   1a34e:	b010      	add	sp, #64	; 0x40
   1a350:	bd80      	pop	{r7, pc}
   1a352:	46c0      	nop			; (mov r8, r8)
   1a354:	e000ed28 	.word	0xe000ed28
   1a358:	e000ed2c 	.word	0xe000ed2c
   1a35c:	e000ed30 	.word	0xe000ed30
   1a360:	e000ed3c 	.word	0xe000ed3c
   1a364:	e000ed34 	.word	0xe000ed34
   1a368:	e000ed38 	.word	0xe000ed38

0001a36c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   1a36c:	b580      	push	{r7, lr}
   1a36e:	b086      	sub	sp, #24
   1a370:	af00      	add	r7, sp, #0
   1a372:	60f8      	str	r0, [r7, #12]
   1a374:	60b9      	str	r1, [r7, #8]
   1a376:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   1a378:	2300      	movs	r3, #0
   1a37a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   1a37c:	68fb      	ldr	r3, [r7, #12]
   1a37e:	2b00      	cmp	r3, #0
   1a380:	d012      	beq.n	1a3a8 <_read+0x3c>
		return -1;
   1a382:	2301      	movs	r3, #1
   1a384:	425b      	negs	r3, r3
   1a386:	e013      	b.n	1a3b0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   1a388:	4b0b      	ldr	r3, [pc, #44]	; (1a3b8 <_read+0x4c>)
   1a38a:	681a      	ldr	r2, [r3, #0]
   1a38c:	4b0b      	ldr	r3, [pc, #44]	; (1a3bc <_read+0x50>)
   1a38e:	681b      	ldr	r3, [r3, #0]
   1a390:	68b9      	ldr	r1, [r7, #8]
   1a392:	0018      	movs	r0, r3
   1a394:	4790      	blx	r2
		ptr++;
   1a396:	68bb      	ldr	r3, [r7, #8]
   1a398:	3301      	adds	r3, #1
   1a39a:	60bb      	str	r3, [r7, #8]
		nChars++;
   1a39c:	697b      	ldr	r3, [r7, #20]
   1a39e:	3301      	adds	r3, #1
   1a3a0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   1a3a2:	687b      	ldr	r3, [r7, #4]
   1a3a4:	3b01      	subs	r3, #1
   1a3a6:	607b      	str	r3, [r7, #4]
   1a3a8:	687b      	ldr	r3, [r7, #4]
   1a3aa:	2b00      	cmp	r3, #0
   1a3ac:	dcec      	bgt.n	1a388 <_read+0x1c>
	}
	return nChars;
   1a3ae:	697b      	ldr	r3, [r7, #20]
}
   1a3b0:	0018      	movs	r0, r3
   1a3b2:	46bd      	mov	sp, r7
   1a3b4:	b006      	add	sp, #24
   1a3b6:	bd80      	pop	{r7, pc}
   1a3b8:	200058b0 	.word	0x200058b0
   1a3bc:	200058b8 	.word	0x200058b8

0001a3c0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1a3c0:	b580      	push	{r7, lr}
   1a3c2:	b086      	sub	sp, #24
   1a3c4:	af00      	add	r7, sp, #0
   1a3c6:	60f8      	str	r0, [r7, #12]
   1a3c8:	60b9      	str	r1, [r7, #8]
   1a3ca:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   1a3cc:	2300      	movs	r3, #0
   1a3ce:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   1a3d0:	68fb      	ldr	r3, [r7, #12]
   1a3d2:	2b01      	cmp	r3, #1
   1a3d4:	d01d      	beq.n	1a412 <_write+0x52>
   1a3d6:	68fb      	ldr	r3, [r7, #12]
   1a3d8:	2b02      	cmp	r3, #2
   1a3da:	d01a      	beq.n	1a412 <_write+0x52>
   1a3dc:	68fb      	ldr	r3, [r7, #12]
   1a3de:	2b03      	cmp	r3, #3
   1a3e0:	d017      	beq.n	1a412 <_write+0x52>
		return -1;
   1a3e2:	2301      	movs	r3, #1
   1a3e4:	425b      	negs	r3, r3
   1a3e6:	e018      	b.n	1a41a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   1a3e8:	4b0e      	ldr	r3, [pc, #56]	; (1a424 <_write+0x64>)
   1a3ea:	681a      	ldr	r2, [r3, #0]
   1a3ec:	4b0e      	ldr	r3, [pc, #56]	; (1a428 <_write+0x68>)
   1a3ee:	6818      	ldr	r0, [r3, #0]
   1a3f0:	68bb      	ldr	r3, [r7, #8]
   1a3f2:	1c59      	adds	r1, r3, #1
   1a3f4:	60b9      	str	r1, [r7, #8]
   1a3f6:	781b      	ldrb	r3, [r3, #0]
   1a3f8:	0019      	movs	r1, r3
   1a3fa:	4790      	blx	r2
   1a3fc:	1e03      	subs	r3, r0, #0
   1a3fe:	da02      	bge.n	1a406 <_write+0x46>
			return -1;
   1a400:	2301      	movs	r3, #1
   1a402:	425b      	negs	r3, r3
   1a404:	e009      	b.n	1a41a <_write+0x5a>
		}
		++nChars;
   1a406:	697b      	ldr	r3, [r7, #20]
   1a408:	3301      	adds	r3, #1
   1a40a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   1a40c:	687b      	ldr	r3, [r7, #4]
   1a40e:	3b01      	subs	r3, #1
   1a410:	607b      	str	r3, [r7, #4]
   1a412:	687b      	ldr	r3, [r7, #4]
   1a414:	2b00      	cmp	r3, #0
   1a416:	d1e7      	bne.n	1a3e8 <_write+0x28>
	}
	return nChars;
   1a418:	697b      	ldr	r3, [r7, #20]
}
   1a41a:	0018      	movs	r0, r3
   1a41c:	46bd      	mov	sp, r7
   1a41e:	b006      	add	sp, #24
   1a420:	bd80      	pop	{r7, pc}
   1a422:	46c0      	nop			; (mov r8, r8)
   1a424:	200058b4 	.word	0x200058b4
   1a428:	200058b8 	.word	0x200058b8

0001a42c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1a42c:	b580      	push	{r7, lr}
   1a42e:	b084      	sub	sp, #16
   1a430:	af00      	add	r7, sp, #0
   1a432:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1a434:	4b0a      	ldr	r3, [pc, #40]	; (1a460 <_sbrk+0x34>)
   1a436:	681b      	ldr	r3, [r3, #0]
   1a438:	2b00      	cmp	r3, #0
   1a43a:	d102      	bne.n	1a442 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   1a43c:	4b08      	ldr	r3, [pc, #32]	; (1a460 <_sbrk+0x34>)
   1a43e:	4a09      	ldr	r2, [pc, #36]	; (1a464 <_sbrk+0x38>)
   1a440:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   1a442:	4b07      	ldr	r3, [pc, #28]	; (1a460 <_sbrk+0x34>)
   1a444:	681b      	ldr	r3, [r3, #0]
   1a446:	60fb      	str	r3, [r7, #12]

	heap += incr;
   1a448:	4b05      	ldr	r3, [pc, #20]	; (1a460 <_sbrk+0x34>)
   1a44a:	681a      	ldr	r2, [r3, #0]
   1a44c:	687b      	ldr	r3, [r7, #4]
   1a44e:	18d2      	adds	r2, r2, r3
   1a450:	4b03      	ldr	r3, [pc, #12]	; (1a460 <_sbrk+0x34>)
   1a452:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   1a454:	68fb      	ldr	r3, [r7, #12]
}
   1a456:	0018      	movs	r0, r3
   1a458:	46bd      	mov	sp, r7
   1a45a:	b004      	add	sp, #16
   1a45c:	bd80      	pop	{r7, pc}
   1a45e:	46c0      	nop			; (mov r8, r8)
   1a460:	20003f2c 	.word	0x20003f2c
   1a464:	20007918 	.word	0x20007918

0001a468 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   1a468:	b580      	push	{r7, lr}
   1a46a:	b082      	sub	sp, #8
   1a46c:	af00      	add	r7, sp, #0
   1a46e:	6078      	str	r0, [r7, #4]
	return -1;
   1a470:	2301      	movs	r3, #1
   1a472:	425b      	negs	r3, r3
}
   1a474:	0018      	movs	r0, r3
   1a476:	46bd      	mov	sp, r7
   1a478:	b002      	add	sp, #8
   1a47a:	bd80      	pop	{r7, pc}

0001a47c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   1a47c:	b580      	push	{r7, lr}
   1a47e:	b082      	sub	sp, #8
   1a480:	af00      	add	r7, sp, #0
   1a482:	6078      	str	r0, [r7, #4]
   1a484:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   1a486:	683b      	ldr	r3, [r7, #0]
   1a488:	2280      	movs	r2, #128	; 0x80
   1a48a:	0192      	lsls	r2, r2, #6
   1a48c:	605a      	str	r2, [r3, #4]

	return 0;
   1a48e:	2300      	movs	r3, #0
}
   1a490:	0018      	movs	r0, r3
   1a492:	46bd      	mov	sp, r7
   1a494:	b002      	add	sp, #8
   1a496:	bd80      	pop	{r7, pc}

0001a498 <_isatty>:

extern int _isatty(int file)
{
   1a498:	b580      	push	{r7, lr}
   1a49a:	b082      	sub	sp, #8
   1a49c:	af00      	add	r7, sp, #0
   1a49e:	6078      	str	r0, [r7, #4]
	return 1;
   1a4a0:	2301      	movs	r3, #1
}
   1a4a2:	0018      	movs	r0, r3
   1a4a4:	46bd      	mov	sp, r7
   1a4a6:	b002      	add	sp, #8
   1a4a8:	bd80      	pop	{r7, pc}

0001a4aa <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   1a4aa:	b580      	push	{r7, lr}
   1a4ac:	b084      	sub	sp, #16
   1a4ae:	af00      	add	r7, sp, #0
   1a4b0:	60f8      	str	r0, [r7, #12]
   1a4b2:	60b9      	str	r1, [r7, #8]
   1a4b4:	607a      	str	r2, [r7, #4]
	return 0;
   1a4b6:	2300      	movs	r3, #0
}
   1a4b8:	0018      	movs	r0, r3
   1a4ba:	46bd      	mov	sp, r7
   1a4bc:	b004      	add	sp, #16
   1a4be:	bd80      	pop	{r7, pc}

0001a4c0 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   1a4c0:	b580      	push	{r7, lr}
   1a4c2:	b082      	sub	sp, #8
   1a4c4:	af00      	add	r7, sp, #0
   1a4c6:	6078      	str	r0, [r7, #4]
	time->second = 0;
   1a4c8:	687b      	ldr	r3, [r7, #4]
   1a4ca:	2200      	movs	r2, #0
   1a4cc:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   1a4ce:	687b      	ldr	r3, [r7, #4]
   1a4d0:	2200      	movs	r2, #0
   1a4d2:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   1a4d4:	687b      	ldr	r3, [r7, #4]
   1a4d6:	2200      	movs	r2, #0
   1a4d8:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   1a4da:	687b      	ldr	r3, [r7, #4]
   1a4dc:	2200      	movs	r2, #0
   1a4de:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   1a4e0:	687b      	ldr	r3, [r7, #4]
   1a4e2:	2201      	movs	r2, #1
   1a4e4:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   1a4e6:	687b      	ldr	r3, [r7, #4]
   1a4e8:	2201      	movs	r2, #1
   1a4ea:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   1a4ec:	687b      	ldr	r3, [r7, #4]
   1a4ee:	22fa      	movs	r2, #250	; 0xfa
   1a4f0:	00d2      	lsls	r2, r2, #3
   1a4f2:	80da      	strh	r2, [r3, #6]
}
   1a4f4:	46c0      	nop			; (mov r8, r8)
   1a4f6:	46bd      	mov	sp, r7
   1a4f8:	b002      	add	sp, #8
   1a4fa:	bd80      	pop	{r7, pc}

0001a4fc <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   1a4fc:	b580      	push	{r7, lr}
   1a4fe:	b086      	sub	sp, #24
   1a500:	af00      	add	r7, sp, #0
   1a502:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   1a504:	230c      	movs	r3, #12
   1a506:	18fb      	adds	r3, r7, r3
   1a508:	0018      	movs	r0, r3
   1a50a:	4b23      	ldr	r3, [pc, #140]	; (1a598 <rtc_calendar_get_config_defaults+0x9c>)
   1a50c:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1a50e:	687b      	ldr	r3, [r7, #4]
   1a510:	22a0      	movs	r2, #160	; 0xa0
   1a512:	0112      	lsls	r2, r2, #4
   1a514:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   1a516:	687b      	ldr	r3, [r7, #4]
   1a518:	2200      	movs	r2, #0
   1a51a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   1a51c:	687b      	ldr	r3, [r7, #4]
   1a51e:	2200      	movs	r2, #0
   1a520:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   1a522:	687b      	ldr	r3, [r7, #4]
   1a524:	2200      	movs	r2, #0
   1a526:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   1a528:	687b      	ldr	r3, [r7, #4]
   1a52a:	22fa      	movs	r2, #250	; 0xfa
   1a52c:	00d2      	lsls	r2, r2, #3
   1a52e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   1a530:	2317      	movs	r3, #23
   1a532:	18fb      	adds	r3, r7, r3
   1a534:	2200      	movs	r2, #0
   1a536:	701a      	strb	r2, [r3, #0]
   1a538:	e025      	b.n	1a586 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   1a53a:	2317      	movs	r3, #23
   1a53c:	18fb      	adds	r3, r7, r3
   1a53e:	781a      	ldrb	r2, [r3, #0]
   1a540:	6879      	ldr	r1, [r7, #4]
   1a542:	2008      	movs	r0, #8
   1a544:	0013      	movs	r3, r2
   1a546:	009b      	lsls	r3, r3, #2
   1a548:	189b      	adds	r3, r3, r2
   1a54a:	005b      	lsls	r3, r3, #1
   1a54c:	18cb      	adds	r3, r1, r3
   1a54e:	181a      	adds	r2, r3, r0
   1a550:	230c      	movs	r3, #12
   1a552:	18fb      	adds	r3, r7, r3
   1a554:	0010      	movs	r0, r2
   1a556:	0019      	movs	r1, r3
   1a558:	2308      	movs	r3, #8
   1a55a:	001a      	movs	r2, r3
   1a55c:	4b0f      	ldr	r3, [pc, #60]	; (1a59c <rtc_calendar_get_config_defaults+0xa0>)
   1a55e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1a560:	2317      	movs	r3, #23
   1a562:	18fb      	adds	r3, r7, r3
   1a564:	781a      	ldrb	r2, [r3, #0]
   1a566:	6879      	ldr	r1, [r7, #4]
   1a568:	0013      	movs	r3, r2
   1a56a:	009b      	lsls	r3, r3, #2
   1a56c:	189b      	adds	r3, r3, r2
   1a56e:	005b      	lsls	r3, r3, #1
   1a570:	18cb      	adds	r3, r1, r3
   1a572:	3310      	adds	r3, #16
   1a574:	2206      	movs	r2, #6
   1a576:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   1a578:	2317      	movs	r3, #23
   1a57a:	18fb      	adds	r3, r7, r3
   1a57c:	781a      	ldrb	r2, [r3, #0]
   1a57e:	2317      	movs	r3, #23
   1a580:	18fb      	adds	r3, r7, r3
   1a582:	3201      	adds	r2, #1
   1a584:	701a      	strb	r2, [r3, #0]
   1a586:	2317      	movs	r3, #23
   1a588:	18fb      	adds	r3, r7, r3
   1a58a:	781b      	ldrb	r3, [r3, #0]
   1a58c:	2b00      	cmp	r3, #0
   1a58e:	d0d4      	beq.n	1a53a <rtc_calendar_get_config_defaults+0x3e>
	}
}
   1a590:	46c0      	nop			; (mov r8, r8)
   1a592:	46bd      	mov	sp, r7
   1a594:	b006      	add	sp, #24
   1a596:	bd80      	pop	{r7, pc}
   1a598:	0001a4c1 	.word	0x0001a4c1
   1a59c:	00024781 	.word	0x00024781

0001a5a0 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   1a5a0:	b580      	push	{r7, lr}
   1a5a2:	b088      	sub	sp, #32
   1a5a4:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   1a5a6:	230c      	movs	r3, #12
   1a5a8:	18fb      	adds	r3, r7, r3
   1a5aa:	0018      	movs	r0, r3
   1a5ac:	4b1a      	ldr	r3, [pc, #104]	; (1a618 <configure_rtc_calendar+0x78>)
   1a5ae:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   1a5b0:	1d3b      	adds	r3, r7, #4
   1a5b2:	0018      	movs	r0, r3
   1a5b4:	4b19      	ldr	r3, [pc, #100]	; (1a61c <configure_rtc_calendar+0x7c>)
   1a5b6:	4798      	blx	r3
	init_time.year   = 2014;
   1a5b8:	1d3b      	adds	r3, r7, #4
   1a5ba:	4a19      	ldr	r2, [pc, #100]	; (1a620 <configure_rtc_calendar+0x80>)
   1a5bc:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   1a5be:	1d3b      	adds	r3, r7, #4
   1a5c0:	2201      	movs	r2, #1
   1a5c2:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   1a5c4:	1d3b      	adds	r3, r7, #4
   1a5c6:	2201      	movs	r2, #1
   1a5c8:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   1a5ca:	1d3b      	adds	r3, r7, #4
   1a5cc:	2200      	movs	r2, #0
   1a5ce:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   1a5d0:	1d3b      	adds	r3, r7, #4
   1a5d2:	2200      	movs	r2, #0
   1a5d4:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   1a5d6:	1d3b      	adds	r3, r7, #4
   1a5d8:	2204      	movs	r2, #4
   1a5da:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   1a5dc:	230c      	movs	r3, #12
   1a5de:	18fb      	adds	r3, r7, r3
   1a5e0:	2201      	movs	r2, #1
   1a5e2:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   1a5e4:	230c      	movs	r3, #12
   1a5e6:	18fb      	adds	r3, r7, r3
   1a5e8:	1d3a      	adds	r2, r7, #4
   1a5ea:	3308      	adds	r3, #8
   1a5ec:	ca03      	ldmia	r2!, {r0, r1}
   1a5ee:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1a5f0:	230c      	movs	r3, #12
   1a5f2:	18fb      	adds	r3, r7, r3
   1a5f4:	2206      	movs	r2, #6
   1a5f6:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   1a5f8:	230c      	movs	r3, #12
   1a5fa:	18fa      	adds	r2, r7, r3
   1a5fc:	4909      	ldr	r1, [pc, #36]	; (1a624 <configure_rtc_calendar+0x84>)
   1a5fe:	4b0a      	ldr	r3, [pc, #40]	; (1a628 <configure_rtc_calendar+0x88>)
   1a600:	0018      	movs	r0, r3
   1a602:	4b0a      	ldr	r3, [pc, #40]	; (1a62c <configure_rtc_calendar+0x8c>)
   1a604:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   1a606:	4b08      	ldr	r3, [pc, #32]	; (1a628 <configure_rtc_calendar+0x88>)
   1a608:	0018      	movs	r0, r3
   1a60a:	4b09      	ldr	r3, [pc, #36]	; (1a630 <configure_rtc_calendar+0x90>)
   1a60c:	4798      	blx	r3
}
   1a60e:	46c0      	nop			; (mov r8, r8)
   1a610:	46bd      	mov	sp, r7
   1a612:	b008      	add	sp, #32
   1a614:	bd80      	pop	{r7, pc}
   1a616:	46c0      	nop			; (mov r8, r8)
   1a618:	0001a4fd 	.word	0x0001a4fd
   1a61c:	0001a4c1 	.word	0x0001a4c1
   1a620:	000007de 	.word	0x000007de
   1a624:	40001400 	.word	0x40001400
   1a628:	200058bc 	.word	0x200058bc
   1a62c:	000160dd 	.word	0x000160dd
   1a630:	00015e09 	.word	0x00015e09

0001a634 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   1a634:	b590      	push	{r4, r7, lr}
   1a636:	b085      	sub	sp, #20
   1a638:	af00      	add	r7, sp, #0
   1a63a:	0002      	movs	r2, r0
   1a63c:	1dfb      	adds	r3, r7, #7
   1a63e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   1a640:	4b1a      	ldr	r3, [pc, #104]	; (1a6ac <disk_initialize+0x78>)
   1a642:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   1a644:	1dfb      	adds	r3, r7, #7
   1a646:	781b      	ldrb	r3, [r3, #0]
   1a648:	2b01      	cmp	r3, #1
   1a64a:	d901      	bls.n	1a650 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1a64c:	2301      	movs	r3, #1
   1a64e:	e029      	b.n	1a6a4 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   1a650:	2300      	movs	r3, #0
   1a652:	60fb      	str	r3, [r7, #12]
   1a654:	e010      	b.n	1a678 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   1a656:	230b      	movs	r3, #11
   1a658:	18fc      	adds	r4, r7, r3
   1a65a:	1dfb      	adds	r3, r7, #7
   1a65c:	781b      	ldrb	r3, [r3, #0]
   1a65e:	0018      	movs	r0, r3
   1a660:	4b13      	ldr	r3, [pc, #76]	; (1a6b0 <disk_initialize+0x7c>)
   1a662:	4798      	blx	r3
   1a664:	0003      	movs	r3, r0
   1a666:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   1a668:	230b      	movs	r3, #11
   1a66a:	18fb      	adds	r3, r7, r3
   1a66c:	781b      	ldrb	r3, [r3, #0]
   1a66e:	2b03      	cmp	r3, #3
   1a670:	d106      	bne.n	1a680 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   1a672:	68fb      	ldr	r3, [r7, #12]
   1a674:	3301      	adds	r3, #1
   1a676:	60fb      	str	r3, [r7, #12]
   1a678:	68fb      	ldr	r3, [r7, #12]
   1a67a:	2b01      	cmp	r3, #1
   1a67c:	ddeb      	ble.n	1a656 <disk_initialize+0x22>
   1a67e:	e000      	b.n	1a682 <disk_initialize+0x4e>
			break;
   1a680:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   1a682:	230b      	movs	r3, #11
   1a684:	18fb      	adds	r3, r7, r3
   1a686:	781b      	ldrb	r3, [r3, #0]
   1a688:	2b00      	cmp	r3, #0
   1a68a:	d001      	beq.n	1a690 <disk_initialize+0x5c>
		return STA_NOINIT;
   1a68c:	2301      	movs	r3, #1
   1a68e:	e009      	b.n	1a6a4 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   1a690:	1dfb      	adds	r3, r7, #7
   1a692:	781b      	ldrb	r3, [r3, #0]
   1a694:	0018      	movs	r0, r3
   1a696:	4b07      	ldr	r3, [pc, #28]	; (1a6b4 <disk_initialize+0x80>)
   1a698:	4798      	blx	r3
   1a69a:	1e03      	subs	r3, r0, #0
   1a69c:	d001      	beq.n	1a6a2 <disk_initialize+0x6e>
		return STA_PROTECT;
   1a69e:	2304      	movs	r3, #4
   1a6a0:	e000      	b.n	1a6a4 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   1a6a2:	2300      	movs	r3, #0
}
   1a6a4:	0018      	movs	r0, r3
   1a6a6:	46bd      	mov	sp, r7
   1a6a8:	b005      	add	sp, #20
   1a6aa:	bd90      	pop	{r4, r7, pc}
   1a6ac:	0001a5a1 	.word	0x0001a5a1
   1a6b0:	00015305 	.word	0x00015305
   1a6b4:	000153bd 	.word	0x000153bd

0001a6b8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   1a6b8:	b580      	push	{r7, lr}
   1a6ba:	b082      	sub	sp, #8
   1a6bc:	af00      	add	r7, sp, #0
   1a6be:	0002      	movs	r2, r0
   1a6c0:	1dfb      	adds	r3, r7, #7
   1a6c2:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   1a6c4:	1dfb      	adds	r3, r7, #7
   1a6c6:	781b      	ldrb	r3, [r3, #0]
   1a6c8:	0018      	movs	r0, r3
   1a6ca:	4b08      	ldr	r3, [pc, #32]	; (1a6ec <disk_status+0x34>)
   1a6cc:	4798      	blx	r3
   1a6ce:	1e03      	subs	r3, r0, #0
   1a6d0:	d002      	beq.n	1a6d8 <disk_status+0x20>
   1a6d2:	2b02      	cmp	r3, #2
   1a6d4:	d002      	beq.n	1a6dc <disk_status+0x24>
   1a6d6:	e003      	b.n	1a6e0 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   1a6d8:	2300      	movs	r3, #0
   1a6da:	e002      	b.n	1a6e2 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1a6dc:	2303      	movs	r3, #3
   1a6de:	e000      	b.n	1a6e2 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   1a6e0:	2301      	movs	r3, #1
	}
}
   1a6e2:	0018      	movs	r0, r3
   1a6e4:	46bd      	mov	sp, r7
   1a6e6:	b002      	add	sp, #8
   1a6e8:	bd80      	pop	{r7, pc}
   1a6ea:	46c0      	nop			; (mov r8, r8)
   1a6ec:	00015305 	.word	0x00015305

0001a6f0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   1a6f0:	b590      	push	{r4, r7, lr}
   1a6f2:	b089      	sub	sp, #36	; 0x24
   1a6f4:	af00      	add	r7, sp, #0
   1a6f6:	60b9      	str	r1, [r7, #8]
   1a6f8:	607a      	str	r2, [r7, #4]
   1a6fa:	0019      	movs	r1, r3
   1a6fc:	230f      	movs	r3, #15
   1a6fe:	18fb      	adds	r3, r7, r3
   1a700:	1c02      	adds	r2, r0, #0
   1a702:	701a      	strb	r2, [r3, #0]
   1a704:	230e      	movs	r3, #14
   1a706:	18fb      	adds	r3, r7, r3
   1a708:	1c0a      	adds	r2, r1, #0
   1a70a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1a70c:	231b      	movs	r3, #27
   1a70e:	18fc      	adds	r4, r7, r3
   1a710:	230f      	movs	r3, #15
   1a712:	18fb      	adds	r3, r7, r3
   1a714:	781b      	ldrb	r3, [r3, #0]
   1a716:	0018      	movs	r0, r3
   1a718:	4b28      	ldr	r3, [pc, #160]	; (1a7bc <disk_read+0xcc>)
   1a71a:	4798      	blx	r3
   1a71c:	0003      	movs	r3, r0
   1a71e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   1a720:	231b      	movs	r3, #27
   1a722:	18fb      	adds	r3, r7, r3
   1a724:	781b      	ldrb	r3, [r3, #0]
   1a726:	2b00      	cmp	r3, #0
   1a728:	d101      	bne.n	1a72e <disk_read+0x3e>
		return RES_ERROR;
   1a72a:	2301      	movs	r3, #1
   1a72c:	e042      	b.n	1a7b4 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   1a72e:	2314      	movs	r3, #20
   1a730:	18fa      	adds	r2, r7, r3
   1a732:	230f      	movs	r3, #15
   1a734:	18fb      	adds	r3, r7, r3
   1a736:	781b      	ldrb	r3, [r3, #0]
   1a738:	0011      	movs	r1, r2
   1a73a:	0018      	movs	r0, r3
   1a73c:	4b20      	ldr	r3, [pc, #128]	; (1a7c0 <disk_read+0xd0>)
   1a73e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   1a740:	230e      	movs	r3, #14
   1a742:	18fb      	adds	r3, r7, r3
   1a744:	781b      	ldrb	r3, [r3, #0]
   1a746:	221b      	movs	r2, #27
   1a748:	18ba      	adds	r2, r7, r2
   1a74a:	7812      	ldrb	r2, [r2, #0]
   1a74c:	4353      	muls	r3, r2
   1a74e:	001a      	movs	r2, r3
   1a750:	687b      	ldr	r3, [r7, #4]
   1a752:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1a754:	697b      	ldr	r3, [r7, #20]
   1a756:	3301      	adds	r3, #1
   1a758:	211b      	movs	r1, #27
   1a75a:	1879      	adds	r1, r7, r1
   1a75c:	7809      	ldrb	r1, [r1, #0]
   1a75e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   1a760:	429a      	cmp	r2, r3
   1a762:	d901      	bls.n	1a768 <disk_read+0x78>
		return RES_PARERR;
   1a764:	2304      	movs	r3, #4
   1a766:	e025      	b.n	1a7b4 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   1a768:	2300      	movs	r3, #0
   1a76a:	61fb      	str	r3, [r7, #28]
   1a76c:	e01b      	b.n	1a7a6 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1a76e:	231b      	movs	r3, #27
   1a770:	18fb      	adds	r3, r7, r3
   1a772:	781b      	ldrb	r3, [r3, #0]
   1a774:	69fa      	ldr	r2, [r7, #28]
   1a776:	435a      	muls	r2, r3
   1a778:	687b      	ldr	r3, [r7, #4]
   1a77a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   1a77c:	231b      	movs	r3, #27
   1a77e:	18fb      	adds	r3, r7, r3
   1a780:	781b      	ldrb	r3, [r3, #0]
   1a782:	69fa      	ldr	r2, [r7, #28]
   1a784:	4353      	muls	r3, r2
   1a786:	025b      	lsls	r3, r3, #9
   1a788:	68ba      	ldr	r2, [r7, #8]
   1a78a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1a78c:	230f      	movs	r3, #15
   1a78e:	18fb      	adds	r3, r7, r3
   1a790:	781b      	ldrb	r3, [r3, #0]
   1a792:	0018      	movs	r0, r3
   1a794:	4b0b      	ldr	r3, [pc, #44]	; (1a7c4 <disk_read+0xd4>)
   1a796:	4798      	blx	r3
   1a798:	1e03      	subs	r3, r0, #0
   1a79a:	d001      	beq.n	1a7a0 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   1a79c:	2301      	movs	r3, #1
   1a79e:	e009      	b.n	1a7b4 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   1a7a0:	69fb      	ldr	r3, [r7, #28]
   1a7a2:	3301      	adds	r3, #1
   1a7a4:	61fb      	str	r3, [r7, #28]
   1a7a6:	230e      	movs	r3, #14
   1a7a8:	18fb      	adds	r3, r7, r3
   1a7aa:	781a      	ldrb	r2, [r3, #0]
   1a7ac:	69fb      	ldr	r3, [r7, #28]
   1a7ae:	429a      	cmp	r2, r3
   1a7b0:	d8dd      	bhi.n	1a76e <disk_read+0x7e>
		}
	}

	return RES_OK;
   1a7b2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   1a7b4:	0018      	movs	r0, r3
   1a7b6:	46bd      	mov	sp, r7
   1a7b8:	b009      	add	sp, #36	; 0x24
   1a7ba:	bd90      	pop	{r4, r7, pc}
   1a7bc:	00015391 	.word	0x00015391
   1a7c0:	00015345 	.word	0x00015345
   1a7c4:	00015405 	.word	0x00015405

0001a7c8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   1a7c8:	b590      	push	{r4, r7, lr}
   1a7ca:	b089      	sub	sp, #36	; 0x24
   1a7cc:	af00      	add	r7, sp, #0
   1a7ce:	60b9      	str	r1, [r7, #8]
   1a7d0:	607a      	str	r2, [r7, #4]
   1a7d2:	0019      	movs	r1, r3
   1a7d4:	230f      	movs	r3, #15
   1a7d6:	18fb      	adds	r3, r7, r3
   1a7d8:	1c02      	adds	r2, r0, #0
   1a7da:	701a      	strb	r2, [r3, #0]
   1a7dc:	230e      	movs	r3, #14
   1a7de:	18fb      	adds	r3, r7, r3
   1a7e0:	1c0a      	adds	r2, r1, #0
   1a7e2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1a7e4:	231b      	movs	r3, #27
   1a7e6:	18fc      	adds	r4, r7, r3
   1a7e8:	230f      	movs	r3, #15
   1a7ea:	18fb      	adds	r3, r7, r3
   1a7ec:	781b      	ldrb	r3, [r3, #0]
   1a7ee:	0018      	movs	r0, r3
   1a7f0:	4b28      	ldr	r3, [pc, #160]	; (1a894 <disk_write+0xcc>)
   1a7f2:	4798      	blx	r3
   1a7f4:	0003      	movs	r3, r0
   1a7f6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   1a7f8:	231b      	movs	r3, #27
   1a7fa:	18fb      	adds	r3, r7, r3
   1a7fc:	781b      	ldrb	r3, [r3, #0]
   1a7fe:	2b00      	cmp	r3, #0
   1a800:	d101      	bne.n	1a806 <disk_write+0x3e>
		return RES_ERROR;
   1a802:	2301      	movs	r3, #1
   1a804:	e042      	b.n	1a88c <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   1a806:	2314      	movs	r3, #20
   1a808:	18fa      	adds	r2, r7, r3
   1a80a:	230f      	movs	r3, #15
   1a80c:	18fb      	adds	r3, r7, r3
   1a80e:	781b      	ldrb	r3, [r3, #0]
   1a810:	0011      	movs	r1, r2
   1a812:	0018      	movs	r0, r3
   1a814:	4b20      	ldr	r3, [pc, #128]	; (1a898 <disk_write+0xd0>)
   1a816:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   1a818:	230e      	movs	r3, #14
   1a81a:	18fb      	adds	r3, r7, r3
   1a81c:	781b      	ldrb	r3, [r3, #0]
   1a81e:	221b      	movs	r2, #27
   1a820:	18ba      	adds	r2, r7, r2
   1a822:	7812      	ldrb	r2, [r2, #0]
   1a824:	4353      	muls	r3, r2
   1a826:	001a      	movs	r2, r3
   1a828:	687b      	ldr	r3, [r7, #4]
   1a82a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1a82c:	697b      	ldr	r3, [r7, #20]
   1a82e:	3301      	adds	r3, #1
   1a830:	211b      	movs	r1, #27
   1a832:	1879      	adds	r1, r7, r1
   1a834:	7809      	ldrb	r1, [r1, #0]
   1a836:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   1a838:	429a      	cmp	r2, r3
   1a83a:	d901      	bls.n	1a840 <disk_write+0x78>
		return RES_PARERR;
   1a83c:	2304      	movs	r3, #4
   1a83e:	e025      	b.n	1a88c <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   1a840:	2300      	movs	r3, #0
   1a842:	61fb      	str	r3, [r7, #28]
   1a844:	e01b      	b.n	1a87e <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1a846:	231b      	movs	r3, #27
   1a848:	18fb      	adds	r3, r7, r3
   1a84a:	781b      	ldrb	r3, [r3, #0]
   1a84c:	69fa      	ldr	r2, [r7, #28]
   1a84e:	435a      	muls	r2, r3
   1a850:	687b      	ldr	r3, [r7, #4]
   1a852:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   1a854:	231b      	movs	r3, #27
   1a856:	18fb      	adds	r3, r7, r3
   1a858:	781b      	ldrb	r3, [r3, #0]
   1a85a:	69fa      	ldr	r2, [r7, #28]
   1a85c:	4353      	muls	r3, r2
   1a85e:	025b      	lsls	r3, r3, #9
   1a860:	68ba      	ldr	r2, [r7, #8]
   1a862:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1a864:	230f      	movs	r3, #15
   1a866:	18fb      	adds	r3, r7, r3
   1a868:	781b      	ldrb	r3, [r3, #0]
   1a86a:	0018      	movs	r0, r3
   1a86c:	4b0b      	ldr	r3, [pc, #44]	; (1a89c <disk_write+0xd4>)
   1a86e:	4798      	blx	r3
   1a870:	1e03      	subs	r3, r0, #0
   1a872:	d001      	beq.n	1a878 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   1a874:	2301      	movs	r3, #1
   1a876:	e009      	b.n	1a88c <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   1a878:	69fb      	ldr	r3, [r7, #28]
   1a87a:	3301      	adds	r3, #1
   1a87c:	61fb      	str	r3, [r7, #28]
   1a87e:	230e      	movs	r3, #14
   1a880:	18fb      	adds	r3, r7, r3
   1a882:	781a      	ldrb	r2, [r3, #0]
   1a884:	69fb      	ldr	r3, [r7, #28]
   1a886:	429a      	cmp	r2, r3
   1a888:	d8dd      	bhi.n	1a846 <disk_write+0x7e>
		}
	}

	return RES_OK;
   1a88a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   1a88c:	0018      	movs	r0, r3
   1a88e:	46bd      	mov	sp, r7
   1a890:	b009      	add	sp, #36	; 0x24
   1a892:	bd90      	pop	{r4, r7, pc}
   1a894:	00015391 	.word	0x00015391
   1a898:	00015345 	.word	0x00015345
   1a89c:	00015459 	.word	0x00015459

0001a8a0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1a8a0:	b590      	push	{r4, r7, lr}
   1a8a2:	b085      	sub	sp, #20
   1a8a4:	af00      	add	r7, sp, #0
   1a8a6:	603a      	str	r2, [r7, #0]
   1a8a8:	1dfb      	adds	r3, r7, #7
   1a8aa:	1c02      	adds	r2, r0, #0
   1a8ac:	701a      	strb	r2, [r3, #0]
   1a8ae:	1dbb      	adds	r3, r7, #6
   1a8b0:	1c0a      	adds	r2, r1, #0
   1a8b2:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   1a8b4:	230f      	movs	r3, #15
   1a8b6:	18fb      	adds	r3, r7, r3
   1a8b8:	2204      	movs	r2, #4
   1a8ba:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   1a8bc:	1dbb      	adds	r3, r7, #6
   1a8be:	781b      	ldrb	r3, [r3, #0]
   1a8c0:	2b01      	cmp	r3, #1
   1a8c2:	d00f      	beq.n	1a8e4 <disk_ioctl+0x44>
   1a8c4:	dc02      	bgt.n	1a8cc <disk_ioctl+0x2c>
   1a8c6:	2b00      	cmp	r3, #0
   1a8c8:	d044      	beq.n	1a954 <disk_ioctl+0xb4>
   1a8ca:	e054      	b.n	1a976 <disk_ioctl+0xd6>
   1a8cc:	2b02      	cmp	r3, #2
   1a8ce:	d01a      	beq.n	1a906 <disk_ioctl+0x66>
   1a8d0:	2b03      	cmp	r3, #3
   1a8d2:	d150      	bne.n	1a976 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   1a8d4:	683b      	ldr	r3, [r7, #0]
   1a8d6:	2201      	movs	r2, #1
   1a8d8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   1a8da:	230f      	movs	r3, #15
   1a8dc:	18fb      	adds	r3, r7, r3
   1a8de:	2200      	movs	r2, #0
   1a8e0:	701a      	strb	r2, [r3, #0]
		break;
   1a8e2:	e04c      	b.n	1a97e <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   1a8e4:	2308      	movs	r3, #8
   1a8e6:	18fa      	adds	r2, r7, r3
   1a8e8:	1dfb      	adds	r3, r7, #7
   1a8ea:	781b      	ldrb	r3, [r3, #0]
   1a8ec:	0011      	movs	r1, r2
   1a8ee:	0018      	movs	r0, r3
   1a8f0:	4b26      	ldr	r3, [pc, #152]	; (1a98c <disk_ioctl+0xec>)
   1a8f2:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   1a8f4:	68bb      	ldr	r3, [r7, #8]
   1a8f6:	1c5a      	adds	r2, r3, #1
   1a8f8:	683b      	ldr	r3, [r7, #0]
   1a8fa:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   1a8fc:	230f      	movs	r3, #15
   1a8fe:	18fb      	adds	r3, r7, r3
   1a900:	2200      	movs	r2, #0
   1a902:	701a      	strb	r2, [r3, #0]
	}
	break;
   1a904:	e03b      	b.n	1a97e <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   1a906:	230e      	movs	r3, #14
   1a908:	18fc      	adds	r4, r7, r3
   1a90a:	1dfb      	adds	r3, r7, #7
   1a90c:	781b      	ldrb	r3, [r3, #0]
   1a90e:	0018      	movs	r0, r3
   1a910:	4b1f      	ldr	r3, [pc, #124]	; (1a990 <disk_ioctl+0xf0>)
   1a912:	4798      	blx	r3
   1a914:	0003      	movs	r3, r0
   1a916:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1a918:	230e      	movs	r3, #14
   1a91a:	18fb      	adds	r3, r7, r3
   1a91c:	781b      	ldrb	r3, [r3, #0]
   1a91e:	2b01      	cmp	r3, #1
   1a920:	d010      	beq.n	1a944 <disk_ioctl+0xa4>
   1a922:	230e      	movs	r3, #14
   1a924:	18fb      	adds	r3, r7, r3
   1a926:	781b      	ldrb	r3, [r3, #0]
   1a928:	2b02      	cmp	r3, #2
   1a92a:	d00b      	beq.n	1a944 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1a92c:	230e      	movs	r3, #14
   1a92e:	18fb      	adds	r3, r7, r3
   1a930:	781b      	ldrb	r3, [r3, #0]
   1a932:	2b04      	cmp	r3, #4
   1a934:	d006      	beq.n	1a944 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   1a936:	230e      	movs	r3, #14
   1a938:	18fb      	adds	r3, r7, r3
   1a93a:	781b      	ldrb	r3, [r3, #0]
   1a93c:	2b08      	cmp	r3, #8
   1a93e:	d001      	beq.n	1a944 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   1a940:	2301      	movs	r3, #1
   1a942:	e01f      	b.n	1a984 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   1a944:	683b      	ldr	r3, [r7, #0]
   1a946:	2200      	movs	r2, #0
   1a948:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   1a94a:	230f      	movs	r3, #15
   1a94c:	18fb      	adds	r3, r7, r3
   1a94e:	2200      	movs	r2, #0
   1a950:	701a      	strb	r2, [r3, #0]
	}
	break;
   1a952:	e014      	b.n	1a97e <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   1a954:	1dfb      	adds	r3, r7, #7
   1a956:	781b      	ldrb	r3, [r3, #0]
   1a958:	0018      	movs	r0, r3
   1a95a:	4b0e      	ldr	r3, [pc, #56]	; (1a994 <disk_ioctl+0xf4>)
   1a95c:	4798      	blx	r3
   1a95e:	1e03      	subs	r3, r0, #0
   1a960:	d104      	bne.n	1a96c <disk_ioctl+0xcc>
			res = RES_OK;
   1a962:	230f      	movs	r3, #15
   1a964:	18fb      	adds	r3, r7, r3
   1a966:	2200      	movs	r2, #0
   1a968:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   1a96a:	e008      	b.n	1a97e <disk_ioctl+0xde>
			res = RES_NOTRDY;
   1a96c:	230f      	movs	r3, #15
   1a96e:	18fb      	adds	r3, r7, r3
   1a970:	2203      	movs	r2, #3
   1a972:	701a      	strb	r2, [r3, #0]
		break;
   1a974:	e003      	b.n	1a97e <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   1a976:	230f      	movs	r3, #15
   1a978:	18fb      	adds	r3, r7, r3
   1a97a:	2204      	movs	r2, #4
   1a97c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   1a97e:	230f      	movs	r3, #15
   1a980:	18fb      	adds	r3, r7, r3
   1a982:	781b      	ldrb	r3, [r3, #0]
}
   1a984:	0018      	movs	r0, r3
   1a986:	46bd      	mov	sp, r7
   1a988:	b005      	add	sp, #20
   1a98a:	bd90      	pop	{r4, r7, pc}
   1a98c:	00015345 	.word	0x00015345
   1a990:	00015391 	.word	0x00015391
   1a994:	00015305 	.word	0x00015305

0001a998 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   1a998:	b580      	push	{r7, lr}
   1a99a:	b084      	sub	sp, #16
   1a99c:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   1a99e:	1d3a      	adds	r2, r7, #4
   1a9a0:	4b12      	ldr	r3, [pc, #72]	; (1a9ec <get_fattime+0x54>)
   1a9a2:	0011      	movs	r1, r2
   1a9a4:	0018      	movs	r0, r3
   1a9a6:	4b12      	ldr	r3, [pc, #72]	; (1a9f0 <get_fattime+0x58>)
   1a9a8:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   1a9aa:	1d3b      	adds	r3, r7, #4
   1a9ac:	88db      	ldrh	r3, [r3, #6]
   1a9ae:	4a11      	ldr	r2, [pc, #68]	; (1a9f4 <get_fattime+0x5c>)
   1a9b0:	4694      	mov	ip, r2
   1a9b2:	4463      	add	r3, ip
   1a9b4:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   1a9b6:	1d3b      	adds	r3, r7, #4
   1a9b8:	795b      	ldrb	r3, [r3, #5]
   1a9ba:	055b      	lsls	r3, r3, #21
   1a9bc:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   1a9be:	1d3b      	adds	r3, r7, #4
   1a9c0:	791b      	ldrb	r3, [r3, #4]
   1a9c2:	041b      	lsls	r3, r3, #16
   1a9c4:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   1a9c6:	1d3b      	adds	r3, r7, #4
   1a9c8:	789b      	ldrb	r3, [r3, #2]
   1a9ca:	02db      	lsls	r3, r3, #11
   1a9cc:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   1a9ce:	1d3b      	adds	r3, r7, #4
   1a9d0:	785b      	ldrb	r3, [r3, #1]
   1a9d2:	015b      	lsls	r3, r3, #5
   1a9d4:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   1a9d6:	1d3a      	adds	r2, r7, #4
   1a9d8:	7812      	ldrb	r2, [r2, #0]
   1a9da:	0852      	lsrs	r2, r2, #1
   1a9dc:	b2d2      	uxtb	r2, r2
   1a9de:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   1a9e0:	60fb      	str	r3, [r7, #12]

	return ul_time;
   1a9e2:	68fb      	ldr	r3, [r7, #12]
}
   1a9e4:	0018      	movs	r0, r3
   1a9e6:	46bd      	mov	sp, r7
   1a9e8:	b004      	add	sp, #16
   1a9ea:	bd80      	pop	{r7, pc}
   1a9ec:	200058bc 	.word	0x200058bc
   1a9f0:	00016171 	.word	0x00016171
   1a9f4:	fffff844 	.word	0xfffff844

0001a9f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   1a9f8:	b580      	push	{r7, lr}
   1a9fa:	b086      	sub	sp, #24
   1a9fc:	af00      	add	r7, sp, #0
   1a9fe:	60f8      	str	r0, [r7, #12]
   1aa00:	60b9      	str	r1, [r7, #8]
   1aa02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   1aa04:	68fb      	ldr	r3, [r7, #12]
   1aa06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   1aa08:	68bb      	ldr	r3, [r7, #8]
   1aa0a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   1aa0c:	e007      	b.n	1aa1e <mem_cpy+0x26>
		*d++ = *s++;
   1aa0e:	697b      	ldr	r3, [r7, #20]
   1aa10:	1c5a      	adds	r2, r3, #1
   1aa12:	617a      	str	r2, [r7, #20]
   1aa14:	693a      	ldr	r2, [r7, #16]
   1aa16:	1c51      	adds	r1, r2, #1
   1aa18:	6139      	str	r1, [r7, #16]
   1aa1a:	7812      	ldrb	r2, [r2, #0]
   1aa1c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   1aa1e:	687b      	ldr	r3, [r7, #4]
   1aa20:	1e5a      	subs	r2, r3, #1
   1aa22:	607a      	str	r2, [r7, #4]
   1aa24:	2b00      	cmp	r3, #0
   1aa26:	d1f2      	bne.n	1aa0e <mem_cpy+0x16>
}
   1aa28:	46c0      	nop			; (mov r8, r8)
   1aa2a:	46bd      	mov	sp, r7
   1aa2c:	b006      	add	sp, #24
   1aa2e:	bd80      	pop	{r7, pc}

0001aa30 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   1aa30:	b580      	push	{r7, lr}
   1aa32:	b086      	sub	sp, #24
   1aa34:	af00      	add	r7, sp, #0
   1aa36:	60f8      	str	r0, [r7, #12]
   1aa38:	60b9      	str	r1, [r7, #8]
   1aa3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   1aa3c:	68fb      	ldr	r3, [r7, #12]
   1aa3e:	617b      	str	r3, [r7, #20]

	while (cnt--)
   1aa40:	e005      	b.n	1aa4e <mem_set+0x1e>
		*d++ = (BYTE)val;
   1aa42:	697b      	ldr	r3, [r7, #20]
   1aa44:	1c5a      	adds	r2, r3, #1
   1aa46:	617a      	str	r2, [r7, #20]
   1aa48:	68ba      	ldr	r2, [r7, #8]
   1aa4a:	b2d2      	uxtb	r2, r2
   1aa4c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   1aa4e:	687b      	ldr	r3, [r7, #4]
   1aa50:	1e5a      	subs	r2, r3, #1
   1aa52:	607a      	str	r2, [r7, #4]
   1aa54:	2b00      	cmp	r3, #0
   1aa56:	d1f4      	bne.n	1aa42 <mem_set+0x12>
}
   1aa58:	46c0      	nop			; (mov r8, r8)
   1aa5a:	46bd      	mov	sp, r7
   1aa5c:	b006      	add	sp, #24
   1aa5e:	bd80      	pop	{r7, pc}

0001aa60 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   1aa60:	b580      	push	{r7, lr}
   1aa62:	b088      	sub	sp, #32
   1aa64:	af00      	add	r7, sp, #0
   1aa66:	60f8      	str	r0, [r7, #12]
   1aa68:	60b9      	str	r1, [r7, #8]
   1aa6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   1aa6c:	68fb      	ldr	r3, [r7, #12]
   1aa6e:	61fb      	str	r3, [r7, #28]
   1aa70:	68bb      	ldr	r3, [r7, #8]
   1aa72:	61bb      	str	r3, [r7, #24]
	int r = 0;
   1aa74:	2300      	movs	r3, #0
   1aa76:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   1aa78:	46c0      	nop			; (mov r8, r8)
   1aa7a:	687b      	ldr	r3, [r7, #4]
   1aa7c:	1e5a      	subs	r2, r3, #1
   1aa7e:	607a      	str	r2, [r7, #4]
   1aa80:	2b00      	cmp	r3, #0
   1aa82:	d00d      	beq.n	1aaa0 <mem_cmp+0x40>
   1aa84:	69fb      	ldr	r3, [r7, #28]
   1aa86:	1c5a      	adds	r2, r3, #1
   1aa88:	61fa      	str	r2, [r7, #28]
   1aa8a:	781b      	ldrb	r3, [r3, #0]
   1aa8c:	0019      	movs	r1, r3
   1aa8e:	69bb      	ldr	r3, [r7, #24]
   1aa90:	1c5a      	adds	r2, r3, #1
   1aa92:	61ba      	str	r2, [r7, #24]
   1aa94:	781b      	ldrb	r3, [r3, #0]
   1aa96:	1acb      	subs	r3, r1, r3
   1aa98:	617b      	str	r3, [r7, #20]
   1aa9a:	697b      	ldr	r3, [r7, #20]
   1aa9c:	2b00      	cmp	r3, #0
   1aa9e:	d0ec      	beq.n	1aa7a <mem_cmp+0x1a>
	return r;
   1aaa0:	697b      	ldr	r3, [r7, #20]
}
   1aaa2:	0018      	movs	r0, r3
   1aaa4:	46bd      	mov	sp, r7
   1aaa6:	b008      	add	sp, #32
   1aaa8:	bd80      	pop	{r7, pc}

0001aaaa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   1aaaa:	b580      	push	{r7, lr}
   1aaac:	b082      	sub	sp, #8
   1aaae:	af00      	add	r7, sp, #0
   1aab0:	6078      	str	r0, [r7, #4]
   1aab2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   1aab4:	e002      	b.n	1aabc <chk_chr+0x12>
   1aab6:	687b      	ldr	r3, [r7, #4]
   1aab8:	3301      	adds	r3, #1
   1aaba:	607b      	str	r3, [r7, #4]
   1aabc:	687b      	ldr	r3, [r7, #4]
   1aabe:	781b      	ldrb	r3, [r3, #0]
   1aac0:	2b00      	cmp	r3, #0
   1aac2:	d005      	beq.n	1aad0 <chk_chr+0x26>
   1aac4:	687b      	ldr	r3, [r7, #4]
   1aac6:	781b      	ldrb	r3, [r3, #0]
   1aac8:	001a      	movs	r2, r3
   1aaca:	683b      	ldr	r3, [r7, #0]
   1aacc:	429a      	cmp	r2, r3
   1aace:	d1f2      	bne.n	1aab6 <chk_chr+0xc>
	return *str;
   1aad0:	687b      	ldr	r3, [r7, #4]
   1aad2:	781b      	ldrb	r3, [r3, #0]
}
   1aad4:	0018      	movs	r0, r3
   1aad6:	46bd      	mov	sp, r7
   1aad8:	b002      	add	sp, #8
   1aada:	bd80      	pop	{r7, pc}

0001aadc <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   1aadc:	b590      	push	{r4, r7, lr}
   1aade:	b085      	sub	sp, #20
   1aae0:	af00      	add	r7, sp, #0
   1aae2:	6078      	str	r0, [r7, #4]
   1aae4:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   1aae6:	687b      	ldr	r3, [r7, #4]
   1aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aaea:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   1aaec:	68fa      	ldr	r2, [r7, #12]
   1aaee:	683b      	ldr	r3, [r7, #0]
   1aaf0:	429a      	cmp	r2, r3
   1aaf2:	d04e      	beq.n	1ab92 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   1aaf4:	687b      	ldr	r3, [r7, #4]
   1aaf6:	791b      	ldrb	r3, [r3, #4]
   1aaf8:	2b00      	cmp	r3, #0
   1aafa:	d037      	beq.n	1ab6c <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   1aafc:	687b      	ldr	r3, [r7, #4]
   1aafe:	7858      	ldrb	r0, [r3, #1]
   1ab00:	687b      	ldr	r3, [r7, #4]
   1ab02:	3330      	adds	r3, #48	; 0x30
   1ab04:	0019      	movs	r1, r3
   1ab06:	68fa      	ldr	r2, [r7, #12]
   1ab08:	2301      	movs	r3, #1
   1ab0a:	4c24      	ldr	r4, [pc, #144]	; (1ab9c <move_window+0xc0>)
   1ab0c:	47a0      	blx	r4
   1ab0e:	1e03      	subs	r3, r0, #0
   1ab10:	d001      	beq.n	1ab16 <move_window+0x3a>
				return FR_DISK_ERR;
   1ab12:	2301      	movs	r3, #1
   1ab14:	e03e      	b.n	1ab94 <move_window+0xb8>
			fs->wflag = 0;
   1ab16:	687b      	ldr	r3, [r7, #4]
   1ab18:	2200      	movs	r2, #0
   1ab1a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   1ab1c:	687b      	ldr	r3, [r7, #4]
   1ab1e:	6a1a      	ldr	r2, [r3, #32]
   1ab20:	687b      	ldr	r3, [r7, #4]
   1ab22:	69db      	ldr	r3, [r3, #28]
   1ab24:	18d2      	adds	r2, r2, r3
   1ab26:	68fb      	ldr	r3, [r7, #12]
   1ab28:	429a      	cmp	r2, r3
   1ab2a:	d91f      	bls.n	1ab6c <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   1ab2c:	230b      	movs	r3, #11
   1ab2e:	18fb      	adds	r3, r7, r3
   1ab30:	687a      	ldr	r2, [r7, #4]
   1ab32:	78d2      	ldrb	r2, [r2, #3]
   1ab34:	701a      	strb	r2, [r3, #0]
   1ab36:	e014      	b.n	1ab62 <move_window+0x86>
					wsect += fs->fsize;
   1ab38:	687b      	ldr	r3, [r7, #4]
   1ab3a:	69db      	ldr	r3, [r3, #28]
   1ab3c:	68fa      	ldr	r2, [r7, #12]
   1ab3e:	18d3      	adds	r3, r2, r3
   1ab40:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   1ab42:	687b      	ldr	r3, [r7, #4]
   1ab44:	7858      	ldrb	r0, [r3, #1]
   1ab46:	687b      	ldr	r3, [r7, #4]
   1ab48:	3330      	adds	r3, #48	; 0x30
   1ab4a:	0019      	movs	r1, r3
   1ab4c:	68fa      	ldr	r2, [r7, #12]
   1ab4e:	2301      	movs	r3, #1
   1ab50:	4c12      	ldr	r4, [pc, #72]	; (1ab9c <move_window+0xc0>)
   1ab52:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   1ab54:	230b      	movs	r3, #11
   1ab56:	18fb      	adds	r3, r7, r3
   1ab58:	781a      	ldrb	r2, [r3, #0]
   1ab5a:	230b      	movs	r3, #11
   1ab5c:	18fb      	adds	r3, r7, r3
   1ab5e:	3a01      	subs	r2, #1
   1ab60:	701a      	strb	r2, [r3, #0]
   1ab62:	230b      	movs	r3, #11
   1ab64:	18fb      	adds	r3, r7, r3
   1ab66:	781b      	ldrb	r3, [r3, #0]
   1ab68:	2b01      	cmp	r3, #1
   1ab6a:	d8e5      	bhi.n	1ab38 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   1ab6c:	683b      	ldr	r3, [r7, #0]
   1ab6e:	2b00      	cmp	r3, #0
   1ab70:	d00f      	beq.n	1ab92 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1ab72:	687b      	ldr	r3, [r7, #4]
   1ab74:	7858      	ldrb	r0, [r3, #1]
   1ab76:	687b      	ldr	r3, [r7, #4]
   1ab78:	3330      	adds	r3, #48	; 0x30
   1ab7a:	0019      	movs	r1, r3
   1ab7c:	683a      	ldr	r2, [r7, #0]
   1ab7e:	2301      	movs	r3, #1
   1ab80:	4c07      	ldr	r4, [pc, #28]	; (1aba0 <move_window+0xc4>)
   1ab82:	47a0      	blx	r4
   1ab84:	1e03      	subs	r3, r0, #0
   1ab86:	d001      	beq.n	1ab8c <move_window+0xb0>
				return FR_DISK_ERR;
   1ab88:	2301      	movs	r3, #1
   1ab8a:	e003      	b.n	1ab94 <move_window+0xb8>
			fs->winsect = sector;
   1ab8c:	687b      	ldr	r3, [r7, #4]
   1ab8e:	683a      	ldr	r2, [r7, #0]
   1ab90:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   1ab92:	2300      	movs	r3, #0
}
   1ab94:	0018      	movs	r0, r3
   1ab96:	46bd      	mov	sp, r7
   1ab98:	b005      	add	sp, #20
   1ab9a:	bd90      	pop	{r4, r7, pc}
   1ab9c:	0001a7c9 	.word	0x0001a7c9
   1aba0:	0001a6f1 	.word	0x0001a6f1

0001aba4 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   1aba4:	b590      	push	{r4, r7, lr}
   1aba6:	b085      	sub	sp, #20
   1aba8:	af00      	add	r7, sp, #0
   1abaa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   1abac:	230f      	movs	r3, #15
   1abae:	18fc      	adds	r4, r7, r3
   1abb0:	687b      	ldr	r3, [r7, #4]
   1abb2:	2100      	movs	r1, #0
   1abb4:	0018      	movs	r0, r3
   1abb6:	4b52      	ldr	r3, [pc, #328]	; (1ad00 <sync+0x15c>)
   1abb8:	4798      	blx	r3
   1abba:	0003      	movs	r3, r0
   1abbc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1abbe:	230f      	movs	r3, #15
   1abc0:	18fb      	adds	r3, r7, r3
   1abc2:	781b      	ldrb	r3, [r3, #0]
   1abc4:	2b00      	cmp	r3, #0
   1abc6:	d000      	beq.n	1abca <sync+0x26>
   1abc8:	e093      	b.n	1acf2 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   1abca:	687b      	ldr	r3, [r7, #4]
   1abcc:	781b      	ldrb	r3, [r3, #0]
   1abce:	2b03      	cmp	r3, #3
   1abd0:	d000      	beq.n	1abd4 <sync+0x30>
   1abd2:	e081      	b.n	1acd8 <sync+0x134>
   1abd4:	687b      	ldr	r3, [r7, #4]
   1abd6:	795b      	ldrb	r3, [r3, #5]
   1abd8:	2b00      	cmp	r3, #0
   1abda:	d07d      	beq.n	1acd8 <sync+0x134>
			fs->winsect = 0;
   1abdc:	687b      	ldr	r3, [r7, #4]
   1abde:	2200      	movs	r2, #0
   1abe0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   1abe2:	687b      	ldr	r3, [r7, #4]
   1abe4:	3330      	adds	r3, #48	; 0x30
   1abe6:	0018      	movs	r0, r3
   1abe8:	2380      	movs	r3, #128	; 0x80
   1abea:	009b      	lsls	r3, r3, #2
   1abec:	001a      	movs	r2, r3
   1abee:	2100      	movs	r1, #0
   1abf0:	4b44      	ldr	r3, [pc, #272]	; (1ad04 <sync+0x160>)
   1abf2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   1abf4:	687b      	ldr	r3, [r7, #4]
   1abf6:	4a44      	ldr	r2, [pc, #272]	; (1ad08 <sync+0x164>)
   1abf8:	2155      	movs	r1, #85	; 0x55
   1abfa:	5499      	strb	r1, [r3, r2]
   1abfc:	687b      	ldr	r3, [r7, #4]
   1abfe:	4a43      	ldr	r2, [pc, #268]	; (1ad0c <sync+0x168>)
   1ac00:	21aa      	movs	r1, #170	; 0xaa
   1ac02:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   1ac04:	687b      	ldr	r3, [r7, #4]
   1ac06:	2230      	movs	r2, #48	; 0x30
   1ac08:	2152      	movs	r1, #82	; 0x52
   1ac0a:	5499      	strb	r1, [r3, r2]
   1ac0c:	687b      	ldr	r3, [r7, #4]
   1ac0e:	2231      	movs	r2, #49	; 0x31
   1ac10:	2152      	movs	r1, #82	; 0x52
   1ac12:	5499      	strb	r1, [r3, r2]
   1ac14:	687b      	ldr	r3, [r7, #4]
   1ac16:	2232      	movs	r2, #50	; 0x32
   1ac18:	2161      	movs	r1, #97	; 0x61
   1ac1a:	5499      	strb	r1, [r3, r2]
   1ac1c:	687b      	ldr	r3, [r7, #4]
   1ac1e:	2233      	movs	r2, #51	; 0x33
   1ac20:	2141      	movs	r1, #65	; 0x41
   1ac22:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   1ac24:	687a      	ldr	r2, [r7, #4]
   1ac26:	2385      	movs	r3, #133	; 0x85
   1ac28:	009b      	lsls	r3, r3, #2
   1ac2a:	2172      	movs	r1, #114	; 0x72
   1ac2c:	54d1      	strb	r1, [r2, r3]
   1ac2e:	687b      	ldr	r3, [r7, #4]
   1ac30:	4a37      	ldr	r2, [pc, #220]	; (1ad10 <sync+0x16c>)
   1ac32:	2172      	movs	r1, #114	; 0x72
   1ac34:	5499      	strb	r1, [r3, r2]
   1ac36:	687b      	ldr	r3, [r7, #4]
   1ac38:	4a36      	ldr	r2, [pc, #216]	; (1ad14 <sync+0x170>)
   1ac3a:	2141      	movs	r1, #65	; 0x41
   1ac3c:	5499      	strb	r1, [r3, r2]
   1ac3e:	687b      	ldr	r3, [r7, #4]
   1ac40:	4a35      	ldr	r2, [pc, #212]	; (1ad18 <sync+0x174>)
   1ac42:	2161      	movs	r1, #97	; 0x61
   1ac44:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   1ac46:	687b      	ldr	r3, [r7, #4]
   1ac48:	691b      	ldr	r3, [r3, #16]
   1ac4a:	b2d9      	uxtb	r1, r3
   1ac4c:	687a      	ldr	r2, [r7, #4]
   1ac4e:	2386      	movs	r3, #134	; 0x86
   1ac50:	009b      	lsls	r3, r3, #2
   1ac52:	54d1      	strb	r1, [r2, r3]
   1ac54:	687b      	ldr	r3, [r7, #4]
   1ac56:	691b      	ldr	r3, [r3, #16]
   1ac58:	b29b      	uxth	r3, r3
   1ac5a:	0a1b      	lsrs	r3, r3, #8
   1ac5c:	b29b      	uxth	r3, r3
   1ac5e:	b2d9      	uxtb	r1, r3
   1ac60:	687b      	ldr	r3, [r7, #4]
   1ac62:	4a2e      	ldr	r2, [pc, #184]	; (1ad1c <sync+0x178>)
   1ac64:	5499      	strb	r1, [r3, r2]
   1ac66:	687b      	ldr	r3, [r7, #4]
   1ac68:	691b      	ldr	r3, [r3, #16]
   1ac6a:	0c1b      	lsrs	r3, r3, #16
   1ac6c:	b2d9      	uxtb	r1, r3
   1ac6e:	687b      	ldr	r3, [r7, #4]
   1ac70:	4a2b      	ldr	r2, [pc, #172]	; (1ad20 <sync+0x17c>)
   1ac72:	5499      	strb	r1, [r3, r2]
   1ac74:	687b      	ldr	r3, [r7, #4]
   1ac76:	691b      	ldr	r3, [r3, #16]
   1ac78:	0e1b      	lsrs	r3, r3, #24
   1ac7a:	b2d9      	uxtb	r1, r3
   1ac7c:	687b      	ldr	r3, [r7, #4]
   1ac7e:	4a29      	ldr	r2, [pc, #164]	; (1ad24 <sync+0x180>)
   1ac80:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   1ac82:	687b      	ldr	r3, [r7, #4]
   1ac84:	68db      	ldr	r3, [r3, #12]
   1ac86:	b2d9      	uxtb	r1, r3
   1ac88:	687a      	ldr	r2, [r7, #4]
   1ac8a:	2387      	movs	r3, #135	; 0x87
   1ac8c:	009b      	lsls	r3, r3, #2
   1ac8e:	54d1      	strb	r1, [r2, r3]
   1ac90:	687b      	ldr	r3, [r7, #4]
   1ac92:	68db      	ldr	r3, [r3, #12]
   1ac94:	b29b      	uxth	r3, r3
   1ac96:	0a1b      	lsrs	r3, r3, #8
   1ac98:	b29b      	uxth	r3, r3
   1ac9a:	b2d9      	uxtb	r1, r3
   1ac9c:	687b      	ldr	r3, [r7, #4]
   1ac9e:	4a22      	ldr	r2, [pc, #136]	; (1ad28 <sync+0x184>)
   1aca0:	5499      	strb	r1, [r3, r2]
   1aca2:	687b      	ldr	r3, [r7, #4]
   1aca4:	68db      	ldr	r3, [r3, #12]
   1aca6:	0c1b      	lsrs	r3, r3, #16
   1aca8:	b2d9      	uxtb	r1, r3
   1acaa:	687b      	ldr	r3, [r7, #4]
   1acac:	4a1f      	ldr	r2, [pc, #124]	; (1ad2c <sync+0x188>)
   1acae:	5499      	strb	r1, [r3, r2]
   1acb0:	687b      	ldr	r3, [r7, #4]
   1acb2:	68db      	ldr	r3, [r3, #12]
   1acb4:	0e1b      	lsrs	r3, r3, #24
   1acb6:	b2d9      	uxtb	r1, r3
   1acb8:	687b      	ldr	r3, [r7, #4]
   1acba:	4a1d      	ldr	r2, [pc, #116]	; (1ad30 <sync+0x18c>)
   1acbc:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   1acbe:	687b      	ldr	r3, [r7, #4]
   1acc0:	7858      	ldrb	r0, [r3, #1]
   1acc2:	687b      	ldr	r3, [r7, #4]
   1acc4:	3330      	adds	r3, #48	; 0x30
   1acc6:	0019      	movs	r1, r3
   1acc8:	687b      	ldr	r3, [r7, #4]
   1acca:	695a      	ldr	r2, [r3, #20]
   1accc:	2301      	movs	r3, #1
   1acce:	4c19      	ldr	r4, [pc, #100]	; (1ad34 <sync+0x190>)
   1acd0:	47a0      	blx	r4
			fs->fsi_flag = 0;
   1acd2:	687b      	ldr	r3, [r7, #4]
   1acd4:	2200      	movs	r2, #0
   1acd6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   1acd8:	687b      	ldr	r3, [r7, #4]
   1acda:	785b      	ldrb	r3, [r3, #1]
   1acdc:	2200      	movs	r2, #0
   1acde:	2100      	movs	r1, #0
   1ace0:	0018      	movs	r0, r3
   1ace2:	4b15      	ldr	r3, [pc, #84]	; (1ad38 <sync+0x194>)
   1ace4:	4798      	blx	r3
   1ace6:	1e03      	subs	r3, r0, #0
   1ace8:	d003      	beq.n	1acf2 <sync+0x14e>
			res = FR_DISK_ERR;
   1acea:	230f      	movs	r3, #15
   1acec:	18fb      	adds	r3, r7, r3
   1acee:	2201      	movs	r2, #1
   1acf0:	701a      	strb	r2, [r3, #0]
	}

	return res;
   1acf2:	230f      	movs	r3, #15
   1acf4:	18fb      	adds	r3, r7, r3
   1acf6:	781b      	ldrb	r3, [r3, #0]
}
   1acf8:	0018      	movs	r0, r3
   1acfa:	46bd      	mov	sp, r7
   1acfc:	b005      	add	sp, #20
   1acfe:	bd90      	pop	{r4, r7, pc}
   1ad00:	0001aadd 	.word	0x0001aadd
   1ad04:	0001aa31 	.word	0x0001aa31
   1ad08:	0000022e 	.word	0x0000022e
   1ad0c:	0000022f 	.word	0x0000022f
   1ad10:	00000215 	.word	0x00000215
   1ad14:	00000216 	.word	0x00000216
   1ad18:	00000217 	.word	0x00000217
   1ad1c:	00000219 	.word	0x00000219
   1ad20:	0000021a 	.word	0x0000021a
   1ad24:	0000021b 	.word	0x0000021b
   1ad28:	0000021d 	.word	0x0000021d
   1ad2c:	0000021e 	.word	0x0000021e
   1ad30:	0000021f 	.word	0x0000021f
   1ad34:	0001a7c9 	.word	0x0001a7c9
   1ad38:	0001a8a1 	.word	0x0001a8a1

0001ad3c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1ad3c:	b580      	push	{r7, lr}
   1ad3e:	b082      	sub	sp, #8
   1ad40:	af00      	add	r7, sp, #0
   1ad42:	6078      	str	r0, [r7, #4]
   1ad44:	6039      	str	r1, [r7, #0]
	clst -= 2;
   1ad46:	683b      	ldr	r3, [r7, #0]
   1ad48:	3b02      	subs	r3, #2
   1ad4a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1ad4c:	687b      	ldr	r3, [r7, #4]
   1ad4e:	699b      	ldr	r3, [r3, #24]
   1ad50:	1e9a      	subs	r2, r3, #2
   1ad52:	683b      	ldr	r3, [r7, #0]
   1ad54:	429a      	cmp	r2, r3
   1ad56:	d801      	bhi.n	1ad5c <clust2sect+0x20>
   1ad58:	2300      	movs	r3, #0
   1ad5a:	e007      	b.n	1ad6c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   1ad5c:	687b      	ldr	r3, [r7, #4]
   1ad5e:	789b      	ldrb	r3, [r3, #2]
   1ad60:	001a      	movs	r2, r3
   1ad62:	683b      	ldr	r3, [r7, #0]
   1ad64:	435a      	muls	r2, r3
   1ad66:	687b      	ldr	r3, [r7, #4]
   1ad68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ad6a:	18d3      	adds	r3, r2, r3
}
   1ad6c:	0018      	movs	r0, r3
   1ad6e:	46bd      	mov	sp, r7
   1ad70:	b002      	add	sp, #8
   1ad72:	bd80      	pop	{r7, pc}

0001ad74 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   1ad74:	b580      	push	{r7, lr}
   1ad76:	b086      	sub	sp, #24
   1ad78:	af00      	add	r7, sp, #0
   1ad7a:	6078      	str	r0, [r7, #4]
   1ad7c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   1ad7e:	683b      	ldr	r3, [r7, #0]
   1ad80:	2b01      	cmp	r3, #1
   1ad82:	d904      	bls.n	1ad8e <get_fat+0x1a>
   1ad84:	687b      	ldr	r3, [r7, #4]
   1ad86:	699a      	ldr	r2, [r3, #24]
   1ad88:	683b      	ldr	r3, [r7, #0]
   1ad8a:	429a      	cmp	r2, r3
   1ad8c:	d801      	bhi.n	1ad92 <get_fat+0x1e>
		return 1;
   1ad8e:	2301      	movs	r3, #1
   1ad90:	e09f      	b.n	1aed2 <get_fat+0x15e>

	switch (fs->fs_type) {
   1ad92:	687b      	ldr	r3, [r7, #4]
   1ad94:	781b      	ldrb	r3, [r3, #0]
   1ad96:	2b02      	cmp	r3, #2
   1ad98:	d048      	beq.n	1ae2c <get_fat+0xb8>
   1ad9a:	2b03      	cmp	r3, #3
   1ad9c:	d067      	beq.n	1ae6e <get_fat+0xfa>
   1ad9e:	2b01      	cmp	r3, #1
   1ada0:	d000      	beq.n	1ada4 <get_fat+0x30>
   1ada2:	e094      	b.n	1aece <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   1ada4:	683b      	ldr	r3, [r7, #0]
   1ada6:	617b      	str	r3, [r7, #20]
   1ada8:	697b      	ldr	r3, [r7, #20]
   1adaa:	085b      	lsrs	r3, r3, #1
   1adac:	697a      	ldr	r2, [r7, #20]
   1adae:	18d3      	adds	r3, r2, r3
   1adb0:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1adb2:	687b      	ldr	r3, [r7, #4]
   1adb4:	6a1a      	ldr	r2, [r3, #32]
   1adb6:	697b      	ldr	r3, [r7, #20]
   1adb8:	0a5b      	lsrs	r3, r3, #9
   1adba:	18d2      	adds	r2, r2, r3
   1adbc:	687b      	ldr	r3, [r7, #4]
   1adbe:	0011      	movs	r1, r2
   1adc0:	0018      	movs	r0, r3
   1adc2:	4b46      	ldr	r3, [pc, #280]	; (1aedc <get_fat+0x168>)
   1adc4:	4798      	blx	r3
   1adc6:	1e03      	subs	r3, r0, #0
   1adc8:	d000      	beq.n	1adcc <get_fat+0x58>
   1adca:	e079      	b.n	1aec0 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   1adcc:	697b      	ldr	r3, [r7, #20]
   1adce:	05db      	lsls	r3, r3, #23
   1add0:	0ddb      	lsrs	r3, r3, #23
   1add2:	687a      	ldr	r2, [r7, #4]
   1add4:	2130      	movs	r1, #48	; 0x30
   1add6:	18d3      	adds	r3, r2, r3
   1add8:	185b      	adds	r3, r3, r1
   1adda:	781b      	ldrb	r3, [r3, #0]
   1addc:	613b      	str	r3, [r7, #16]
   1adde:	697b      	ldr	r3, [r7, #20]
   1ade0:	3301      	adds	r3, #1
   1ade2:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1ade4:	687b      	ldr	r3, [r7, #4]
   1ade6:	6a1a      	ldr	r2, [r3, #32]
   1ade8:	697b      	ldr	r3, [r7, #20]
   1adea:	0a5b      	lsrs	r3, r3, #9
   1adec:	18d2      	adds	r2, r2, r3
   1adee:	687b      	ldr	r3, [r7, #4]
   1adf0:	0011      	movs	r1, r2
   1adf2:	0018      	movs	r0, r3
   1adf4:	4b39      	ldr	r3, [pc, #228]	; (1aedc <get_fat+0x168>)
   1adf6:	4798      	blx	r3
   1adf8:	1e03      	subs	r3, r0, #0
   1adfa:	d163      	bne.n	1aec4 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   1adfc:	697b      	ldr	r3, [r7, #20]
   1adfe:	05db      	lsls	r3, r3, #23
   1ae00:	0ddb      	lsrs	r3, r3, #23
   1ae02:	687a      	ldr	r2, [r7, #4]
   1ae04:	2130      	movs	r1, #48	; 0x30
   1ae06:	18d3      	adds	r3, r2, r3
   1ae08:	185b      	adds	r3, r3, r1
   1ae0a:	781b      	ldrb	r3, [r3, #0]
   1ae0c:	021b      	lsls	r3, r3, #8
   1ae0e:	001a      	movs	r2, r3
   1ae10:	693b      	ldr	r3, [r7, #16]
   1ae12:	4313      	orrs	r3, r2
   1ae14:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   1ae16:	683b      	ldr	r3, [r7, #0]
   1ae18:	2201      	movs	r2, #1
   1ae1a:	4013      	ands	r3, r2
   1ae1c:	d002      	beq.n	1ae24 <get_fat+0xb0>
   1ae1e:	693b      	ldr	r3, [r7, #16]
   1ae20:	091b      	lsrs	r3, r3, #4
   1ae22:	e056      	b.n	1aed2 <get_fat+0x15e>
   1ae24:	693b      	ldr	r3, [r7, #16]
   1ae26:	051b      	lsls	r3, r3, #20
   1ae28:	0d1b      	lsrs	r3, r3, #20
   1ae2a:	e052      	b.n	1aed2 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   1ae2c:	687b      	ldr	r3, [r7, #4]
   1ae2e:	6a1a      	ldr	r2, [r3, #32]
   1ae30:	683b      	ldr	r3, [r7, #0]
   1ae32:	0a1b      	lsrs	r3, r3, #8
   1ae34:	18d2      	adds	r2, r2, r3
   1ae36:	687b      	ldr	r3, [r7, #4]
   1ae38:	0011      	movs	r1, r2
   1ae3a:	0018      	movs	r0, r3
   1ae3c:	4b27      	ldr	r3, [pc, #156]	; (1aedc <get_fat+0x168>)
   1ae3e:	4798      	blx	r3
   1ae40:	1e03      	subs	r3, r0, #0
   1ae42:	d141      	bne.n	1aec8 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   1ae44:	683b      	ldr	r3, [r7, #0]
   1ae46:	005a      	lsls	r2, r3, #1
   1ae48:	23ff      	movs	r3, #255	; 0xff
   1ae4a:	005b      	lsls	r3, r3, #1
   1ae4c:	4013      	ands	r3, r2
   1ae4e:	3330      	adds	r3, #48	; 0x30
   1ae50:	687a      	ldr	r2, [r7, #4]
   1ae52:	18d3      	adds	r3, r2, r3
   1ae54:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   1ae56:	68fb      	ldr	r3, [r7, #12]
   1ae58:	3301      	adds	r3, #1
   1ae5a:	781b      	ldrb	r3, [r3, #0]
   1ae5c:	021b      	lsls	r3, r3, #8
   1ae5e:	b21a      	sxth	r2, r3
   1ae60:	68fb      	ldr	r3, [r7, #12]
   1ae62:	781b      	ldrb	r3, [r3, #0]
   1ae64:	b21b      	sxth	r3, r3
   1ae66:	4313      	orrs	r3, r2
   1ae68:	b21b      	sxth	r3, r3
   1ae6a:	b29b      	uxth	r3, r3
   1ae6c:	e031      	b.n	1aed2 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   1ae6e:	687b      	ldr	r3, [r7, #4]
   1ae70:	6a1a      	ldr	r2, [r3, #32]
   1ae72:	683b      	ldr	r3, [r7, #0]
   1ae74:	09db      	lsrs	r3, r3, #7
   1ae76:	18d2      	adds	r2, r2, r3
   1ae78:	687b      	ldr	r3, [r7, #4]
   1ae7a:	0011      	movs	r1, r2
   1ae7c:	0018      	movs	r0, r3
   1ae7e:	4b17      	ldr	r3, [pc, #92]	; (1aedc <get_fat+0x168>)
   1ae80:	4798      	blx	r3
   1ae82:	1e03      	subs	r3, r0, #0
   1ae84:	d122      	bne.n	1aecc <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   1ae86:	683b      	ldr	r3, [r7, #0]
   1ae88:	009a      	lsls	r2, r3, #2
   1ae8a:	23fe      	movs	r3, #254	; 0xfe
   1ae8c:	005b      	lsls	r3, r3, #1
   1ae8e:	4013      	ands	r3, r2
   1ae90:	3330      	adds	r3, #48	; 0x30
   1ae92:	687a      	ldr	r2, [r7, #4]
   1ae94:	18d3      	adds	r3, r2, r3
   1ae96:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   1ae98:	68fb      	ldr	r3, [r7, #12]
   1ae9a:	3303      	adds	r3, #3
   1ae9c:	781b      	ldrb	r3, [r3, #0]
   1ae9e:	061a      	lsls	r2, r3, #24
   1aea0:	68fb      	ldr	r3, [r7, #12]
   1aea2:	3302      	adds	r3, #2
   1aea4:	781b      	ldrb	r3, [r3, #0]
   1aea6:	041b      	lsls	r3, r3, #16
   1aea8:	4313      	orrs	r3, r2
   1aeaa:	68fa      	ldr	r2, [r7, #12]
   1aeac:	3201      	adds	r2, #1
   1aeae:	7812      	ldrb	r2, [r2, #0]
   1aeb0:	0212      	lsls	r2, r2, #8
   1aeb2:	4313      	orrs	r3, r2
   1aeb4:	68fa      	ldr	r2, [r7, #12]
   1aeb6:	7812      	ldrb	r2, [r2, #0]
   1aeb8:	4313      	orrs	r3, r2
   1aeba:	011b      	lsls	r3, r3, #4
   1aebc:	091b      	lsrs	r3, r3, #4
   1aebe:	e008      	b.n	1aed2 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1aec0:	46c0      	nop			; (mov r8, r8)
   1aec2:	e004      	b.n	1aece <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1aec4:	46c0      	nop			; (mov r8, r8)
   1aec6:	e002      	b.n	1aece <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   1aec8:	46c0      	nop			; (mov r8, r8)
   1aeca:	e000      	b.n	1aece <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   1aecc:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1aece:	2301      	movs	r3, #1
   1aed0:	425b      	negs	r3, r3
}
   1aed2:	0018      	movs	r0, r3
   1aed4:	46bd      	mov	sp, r7
   1aed6:	b006      	add	sp, #24
   1aed8:	bd80      	pop	{r7, pc}
   1aeda:	46c0      	nop			; (mov r8, r8)
   1aedc:	0001aadd 	.word	0x0001aadd

0001aee0 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   1aee0:	b590      	push	{r4, r7, lr}
   1aee2:	b089      	sub	sp, #36	; 0x24
   1aee4:	af00      	add	r7, sp, #0
   1aee6:	60f8      	str	r0, [r7, #12]
   1aee8:	60b9      	str	r1, [r7, #8]
   1aeea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   1aeec:	68bb      	ldr	r3, [r7, #8]
   1aeee:	2b01      	cmp	r3, #1
   1aef0:	d904      	bls.n	1aefc <put_fat+0x1c>
   1aef2:	68fb      	ldr	r3, [r7, #12]
   1aef4:	699a      	ldr	r2, [r3, #24]
   1aef6:	68bb      	ldr	r3, [r7, #8]
   1aef8:	429a      	cmp	r2, r3
   1aefa:	d804      	bhi.n	1af06 <put_fat+0x26>
		res = FR_INT_ERR;
   1aefc:	231f      	movs	r3, #31
   1aefe:	18fb      	adds	r3, r7, r3
   1af00:	2202      	movs	r2, #2
   1af02:	701a      	strb	r2, [r3, #0]
   1af04:	e100      	b.n	1b108 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   1af06:	68fb      	ldr	r3, [r7, #12]
   1af08:	781b      	ldrb	r3, [r3, #0]
   1af0a:	2b02      	cmp	r3, #2
   1af0c:	d100      	bne.n	1af10 <put_fat+0x30>
   1af0e:	e078      	b.n	1b002 <put_fat+0x122>
   1af10:	2b03      	cmp	r3, #3
   1af12:	d100      	bne.n	1af16 <put_fat+0x36>
   1af14:	e09e      	b.n	1b054 <put_fat+0x174>
   1af16:	2b01      	cmp	r3, #1
   1af18:	d000      	beq.n	1af1c <put_fat+0x3c>
   1af1a:	e0e6      	b.n	1b0ea <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   1af1c:	68bb      	ldr	r3, [r7, #8]
   1af1e:	61bb      	str	r3, [r7, #24]
   1af20:	69bb      	ldr	r3, [r7, #24]
   1af22:	085b      	lsrs	r3, r3, #1
   1af24:	69ba      	ldr	r2, [r7, #24]
   1af26:	18d3      	adds	r3, r2, r3
   1af28:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1af2a:	68fb      	ldr	r3, [r7, #12]
   1af2c:	6a1a      	ldr	r2, [r3, #32]
   1af2e:	69bb      	ldr	r3, [r7, #24]
   1af30:	0a5b      	lsrs	r3, r3, #9
   1af32:	18d2      	adds	r2, r2, r3
   1af34:	231f      	movs	r3, #31
   1af36:	18fc      	adds	r4, r7, r3
   1af38:	68fb      	ldr	r3, [r7, #12]
   1af3a:	0011      	movs	r1, r2
   1af3c:	0018      	movs	r0, r3
   1af3e:	4b76      	ldr	r3, [pc, #472]	; (1b118 <put_fat+0x238>)
   1af40:	4798      	blx	r3
   1af42:	0003      	movs	r3, r0
   1af44:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1af46:	231f      	movs	r3, #31
   1af48:	18fb      	adds	r3, r7, r3
   1af4a:	781b      	ldrb	r3, [r3, #0]
   1af4c:	2b00      	cmp	r3, #0
   1af4e:	d000      	beq.n	1af52 <put_fat+0x72>
   1af50:	e0d0      	b.n	1b0f4 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   1af52:	69bb      	ldr	r3, [r7, #24]
   1af54:	05db      	lsls	r3, r3, #23
   1af56:	0ddb      	lsrs	r3, r3, #23
   1af58:	3330      	adds	r3, #48	; 0x30
   1af5a:	68fa      	ldr	r2, [r7, #12]
   1af5c:	18d3      	adds	r3, r2, r3
   1af5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1af60:	68bb      	ldr	r3, [r7, #8]
   1af62:	2201      	movs	r2, #1
   1af64:	4013      	ands	r3, r2
   1af66:	d00d      	beq.n	1af84 <put_fat+0xa4>
   1af68:	697b      	ldr	r3, [r7, #20]
   1af6a:	781b      	ldrb	r3, [r3, #0]
   1af6c:	b25b      	sxtb	r3, r3
   1af6e:	220f      	movs	r2, #15
   1af70:	4013      	ands	r3, r2
   1af72:	b25a      	sxtb	r2, r3
   1af74:	687b      	ldr	r3, [r7, #4]
   1af76:	b2db      	uxtb	r3, r3
   1af78:	011b      	lsls	r3, r3, #4
   1af7a:	b25b      	sxtb	r3, r3
   1af7c:	4313      	orrs	r3, r2
   1af7e:	b25b      	sxtb	r3, r3
   1af80:	b2db      	uxtb	r3, r3
   1af82:	e001      	b.n	1af88 <put_fat+0xa8>
   1af84:	687b      	ldr	r3, [r7, #4]
   1af86:	b2db      	uxtb	r3, r3
   1af88:	697a      	ldr	r2, [r7, #20]
   1af8a:	7013      	strb	r3, [r2, #0]
			bc++;
   1af8c:	69bb      	ldr	r3, [r7, #24]
   1af8e:	3301      	adds	r3, #1
   1af90:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   1af92:	68fb      	ldr	r3, [r7, #12]
   1af94:	2201      	movs	r2, #1
   1af96:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1af98:	68fb      	ldr	r3, [r7, #12]
   1af9a:	6a1a      	ldr	r2, [r3, #32]
   1af9c:	69bb      	ldr	r3, [r7, #24]
   1af9e:	0a5b      	lsrs	r3, r3, #9
   1afa0:	18d2      	adds	r2, r2, r3
   1afa2:	231f      	movs	r3, #31
   1afa4:	18fc      	adds	r4, r7, r3
   1afa6:	68fb      	ldr	r3, [r7, #12]
   1afa8:	0011      	movs	r1, r2
   1afaa:	0018      	movs	r0, r3
   1afac:	4b5a      	ldr	r3, [pc, #360]	; (1b118 <put_fat+0x238>)
   1afae:	4798      	blx	r3
   1afb0:	0003      	movs	r3, r0
   1afb2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1afb4:	231f      	movs	r3, #31
   1afb6:	18fb      	adds	r3, r7, r3
   1afb8:	781b      	ldrb	r3, [r3, #0]
   1afba:	2b00      	cmp	r3, #0
   1afbc:	d000      	beq.n	1afc0 <put_fat+0xe0>
   1afbe:	e09b      	b.n	1b0f8 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   1afc0:	69bb      	ldr	r3, [r7, #24]
   1afc2:	05db      	lsls	r3, r3, #23
   1afc4:	0ddb      	lsrs	r3, r3, #23
   1afc6:	3330      	adds	r3, #48	; 0x30
   1afc8:	68fa      	ldr	r2, [r7, #12]
   1afca:	18d3      	adds	r3, r2, r3
   1afcc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   1afce:	68bb      	ldr	r3, [r7, #8]
   1afd0:	2201      	movs	r2, #1
   1afd2:	4013      	ands	r3, r2
   1afd4:	d003      	beq.n	1afde <put_fat+0xfe>
   1afd6:	687b      	ldr	r3, [r7, #4]
   1afd8:	091b      	lsrs	r3, r3, #4
   1afda:	b2db      	uxtb	r3, r3
   1afdc:	e00e      	b.n	1affc <put_fat+0x11c>
   1afde:	697b      	ldr	r3, [r7, #20]
   1afe0:	781b      	ldrb	r3, [r3, #0]
   1afe2:	b25b      	sxtb	r3, r3
   1afe4:	220f      	movs	r2, #15
   1afe6:	4393      	bics	r3, r2
   1afe8:	b25a      	sxtb	r2, r3
   1afea:	687b      	ldr	r3, [r7, #4]
   1afec:	0a1b      	lsrs	r3, r3, #8
   1afee:	b25b      	sxtb	r3, r3
   1aff0:	210f      	movs	r1, #15
   1aff2:	400b      	ands	r3, r1
   1aff4:	b25b      	sxtb	r3, r3
   1aff6:	4313      	orrs	r3, r2
   1aff8:	b25b      	sxtb	r3, r3
   1affa:	b2db      	uxtb	r3, r3
   1affc:	697a      	ldr	r2, [r7, #20]
   1affe:	7013      	strb	r3, [r2, #0]
			break;
   1b000:	e07f      	b.n	1b102 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   1b002:	68fb      	ldr	r3, [r7, #12]
   1b004:	6a1a      	ldr	r2, [r3, #32]
   1b006:	68bb      	ldr	r3, [r7, #8]
   1b008:	0a1b      	lsrs	r3, r3, #8
   1b00a:	18d2      	adds	r2, r2, r3
   1b00c:	231f      	movs	r3, #31
   1b00e:	18fc      	adds	r4, r7, r3
   1b010:	68fb      	ldr	r3, [r7, #12]
   1b012:	0011      	movs	r1, r2
   1b014:	0018      	movs	r0, r3
   1b016:	4b40      	ldr	r3, [pc, #256]	; (1b118 <put_fat+0x238>)
   1b018:	4798      	blx	r3
   1b01a:	0003      	movs	r3, r0
   1b01c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1b01e:	231f      	movs	r3, #31
   1b020:	18fb      	adds	r3, r7, r3
   1b022:	781b      	ldrb	r3, [r3, #0]
   1b024:	2b00      	cmp	r3, #0
   1b026:	d169      	bne.n	1b0fc <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   1b028:	68bb      	ldr	r3, [r7, #8]
   1b02a:	005a      	lsls	r2, r3, #1
   1b02c:	23ff      	movs	r3, #255	; 0xff
   1b02e:	005b      	lsls	r3, r3, #1
   1b030:	4013      	ands	r3, r2
   1b032:	3330      	adds	r3, #48	; 0x30
   1b034:	68fa      	ldr	r2, [r7, #12]
   1b036:	18d3      	adds	r3, r2, r3
   1b038:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   1b03a:	687b      	ldr	r3, [r7, #4]
   1b03c:	b2da      	uxtb	r2, r3
   1b03e:	697b      	ldr	r3, [r7, #20]
   1b040:	701a      	strb	r2, [r3, #0]
   1b042:	697b      	ldr	r3, [r7, #20]
   1b044:	3301      	adds	r3, #1
   1b046:	687a      	ldr	r2, [r7, #4]
   1b048:	b292      	uxth	r2, r2
   1b04a:	0a12      	lsrs	r2, r2, #8
   1b04c:	b292      	uxth	r2, r2
   1b04e:	b2d2      	uxtb	r2, r2
   1b050:	701a      	strb	r2, [r3, #0]
			break;
   1b052:	e056      	b.n	1b102 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   1b054:	68fb      	ldr	r3, [r7, #12]
   1b056:	6a1a      	ldr	r2, [r3, #32]
   1b058:	68bb      	ldr	r3, [r7, #8]
   1b05a:	09db      	lsrs	r3, r3, #7
   1b05c:	18d2      	adds	r2, r2, r3
   1b05e:	231f      	movs	r3, #31
   1b060:	18fc      	adds	r4, r7, r3
   1b062:	68fb      	ldr	r3, [r7, #12]
   1b064:	0011      	movs	r1, r2
   1b066:	0018      	movs	r0, r3
   1b068:	4b2b      	ldr	r3, [pc, #172]	; (1b118 <put_fat+0x238>)
   1b06a:	4798      	blx	r3
   1b06c:	0003      	movs	r3, r0
   1b06e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1b070:	231f      	movs	r3, #31
   1b072:	18fb      	adds	r3, r7, r3
   1b074:	781b      	ldrb	r3, [r3, #0]
   1b076:	2b00      	cmp	r3, #0
   1b078:	d142      	bne.n	1b100 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   1b07a:	68bb      	ldr	r3, [r7, #8]
   1b07c:	009a      	lsls	r2, r3, #2
   1b07e:	23fe      	movs	r3, #254	; 0xfe
   1b080:	005b      	lsls	r3, r3, #1
   1b082:	4013      	ands	r3, r2
   1b084:	3330      	adds	r3, #48	; 0x30
   1b086:	68fa      	ldr	r2, [r7, #12]
   1b088:	18d3      	adds	r3, r2, r3
   1b08a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   1b08c:	697b      	ldr	r3, [r7, #20]
   1b08e:	3303      	adds	r3, #3
   1b090:	781b      	ldrb	r3, [r3, #0]
   1b092:	061a      	lsls	r2, r3, #24
   1b094:	697b      	ldr	r3, [r7, #20]
   1b096:	3302      	adds	r3, #2
   1b098:	781b      	ldrb	r3, [r3, #0]
   1b09a:	041b      	lsls	r3, r3, #16
   1b09c:	4313      	orrs	r3, r2
   1b09e:	697a      	ldr	r2, [r7, #20]
   1b0a0:	3201      	adds	r2, #1
   1b0a2:	7812      	ldrb	r2, [r2, #0]
   1b0a4:	0212      	lsls	r2, r2, #8
   1b0a6:	4313      	orrs	r3, r2
   1b0a8:	697a      	ldr	r2, [r7, #20]
   1b0aa:	7812      	ldrb	r2, [r2, #0]
   1b0ac:	4313      	orrs	r3, r2
   1b0ae:	0f1b      	lsrs	r3, r3, #28
   1b0b0:	071b      	lsls	r3, r3, #28
   1b0b2:	687a      	ldr	r2, [r7, #4]
   1b0b4:	4313      	orrs	r3, r2
   1b0b6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   1b0b8:	687b      	ldr	r3, [r7, #4]
   1b0ba:	b2da      	uxtb	r2, r3
   1b0bc:	697b      	ldr	r3, [r7, #20]
   1b0be:	701a      	strb	r2, [r3, #0]
   1b0c0:	697b      	ldr	r3, [r7, #20]
   1b0c2:	3301      	adds	r3, #1
   1b0c4:	687a      	ldr	r2, [r7, #4]
   1b0c6:	b292      	uxth	r2, r2
   1b0c8:	0a12      	lsrs	r2, r2, #8
   1b0ca:	b292      	uxth	r2, r2
   1b0cc:	b2d2      	uxtb	r2, r2
   1b0ce:	701a      	strb	r2, [r3, #0]
   1b0d0:	697b      	ldr	r3, [r7, #20]
   1b0d2:	3302      	adds	r3, #2
   1b0d4:	687a      	ldr	r2, [r7, #4]
   1b0d6:	0c12      	lsrs	r2, r2, #16
   1b0d8:	b2d2      	uxtb	r2, r2
   1b0da:	701a      	strb	r2, [r3, #0]
   1b0dc:	697b      	ldr	r3, [r7, #20]
   1b0de:	3303      	adds	r3, #3
   1b0e0:	687a      	ldr	r2, [r7, #4]
   1b0e2:	0e12      	lsrs	r2, r2, #24
   1b0e4:	b2d2      	uxtb	r2, r2
   1b0e6:	701a      	strb	r2, [r3, #0]
			break;
   1b0e8:	e00b      	b.n	1b102 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   1b0ea:	231f      	movs	r3, #31
   1b0ec:	18fb      	adds	r3, r7, r3
   1b0ee:	2202      	movs	r2, #2
   1b0f0:	701a      	strb	r2, [r3, #0]
   1b0f2:	e006      	b.n	1b102 <put_fat+0x222>
			if (res != FR_OK) break;
   1b0f4:	46c0      	nop			; (mov r8, r8)
   1b0f6:	e004      	b.n	1b102 <put_fat+0x222>
			if (res != FR_OK) break;
   1b0f8:	46c0      	nop			; (mov r8, r8)
   1b0fa:	e002      	b.n	1b102 <put_fat+0x222>
			if (res != FR_OK) break;
   1b0fc:	46c0      	nop			; (mov r8, r8)
   1b0fe:	e000      	b.n	1b102 <put_fat+0x222>
			if (res != FR_OK) break;
   1b100:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   1b102:	68fb      	ldr	r3, [r7, #12]
   1b104:	2201      	movs	r2, #1
   1b106:	711a      	strb	r2, [r3, #4]
	}

	return res;
   1b108:	231f      	movs	r3, #31
   1b10a:	18fb      	adds	r3, r7, r3
   1b10c:	781b      	ldrb	r3, [r3, #0]
}
   1b10e:	0018      	movs	r0, r3
   1b110:	46bd      	mov	sp, r7
   1b112:	b009      	add	sp, #36	; 0x24
   1b114:	bd90      	pop	{r4, r7, pc}
   1b116:	46c0      	nop			; (mov r8, r8)
   1b118:	0001aadd 	.word	0x0001aadd

0001b11c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   1b11c:	b590      	push	{r4, r7, lr}
   1b11e:	b085      	sub	sp, #20
   1b120:	af00      	add	r7, sp, #0
   1b122:	6078      	str	r0, [r7, #4]
   1b124:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   1b126:	683b      	ldr	r3, [r7, #0]
   1b128:	2b01      	cmp	r3, #1
   1b12a:	d904      	bls.n	1b136 <remove_chain+0x1a>
   1b12c:	687b      	ldr	r3, [r7, #4]
   1b12e:	699a      	ldr	r2, [r3, #24]
   1b130:	683b      	ldr	r3, [r7, #0]
   1b132:	429a      	cmp	r2, r3
   1b134:	d804      	bhi.n	1b140 <remove_chain+0x24>
		res = FR_INT_ERR;
   1b136:	230f      	movs	r3, #15
   1b138:	18fb      	adds	r3, r7, r3
   1b13a:	2202      	movs	r2, #2
   1b13c:	701a      	strb	r2, [r3, #0]
   1b13e:	e045      	b.n	1b1cc <remove_chain+0xb0>

	} else {
		res = FR_OK;
   1b140:	230f      	movs	r3, #15
   1b142:	18fb      	adds	r3, r7, r3
   1b144:	2200      	movs	r2, #0
   1b146:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   1b148:	e037      	b.n	1b1ba <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   1b14a:	683a      	ldr	r2, [r7, #0]
   1b14c:	687b      	ldr	r3, [r7, #4]
   1b14e:	0011      	movs	r1, r2
   1b150:	0018      	movs	r0, r3
   1b152:	4b22      	ldr	r3, [pc, #136]	; (1b1dc <remove_chain+0xc0>)
   1b154:	4798      	blx	r3
   1b156:	0003      	movs	r3, r0
   1b158:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   1b15a:	68bb      	ldr	r3, [r7, #8]
   1b15c:	2b00      	cmp	r3, #0
   1b15e:	d032      	beq.n	1b1c6 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   1b160:	68bb      	ldr	r3, [r7, #8]
   1b162:	2b01      	cmp	r3, #1
   1b164:	d104      	bne.n	1b170 <remove_chain+0x54>
   1b166:	230f      	movs	r3, #15
   1b168:	18fb      	adds	r3, r7, r3
   1b16a:	2202      	movs	r2, #2
   1b16c:	701a      	strb	r2, [r3, #0]
   1b16e:	e02d      	b.n	1b1cc <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   1b170:	68bb      	ldr	r3, [r7, #8]
   1b172:	3301      	adds	r3, #1
   1b174:	d104      	bne.n	1b180 <remove_chain+0x64>
   1b176:	230f      	movs	r3, #15
   1b178:	18fb      	adds	r3, r7, r3
   1b17a:	2201      	movs	r2, #1
   1b17c:	701a      	strb	r2, [r3, #0]
   1b17e:	e025      	b.n	1b1cc <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   1b180:	230f      	movs	r3, #15
   1b182:	18fc      	adds	r4, r7, r3
   1b184:	6839      	ldr	r1, [r7, #0]
   1b186:	687b      	ldr	r3, [r7, #4]
   1b188:	2200      	movs	r2, #0
   1b18a:	0018      	movs	r0, r3
   1b18c:	4b14      	ldr	r3, [pc, #80]	; (1b1e0 <remove_chain+0xc4>)
   1b18e:	4798      	blx	r3
   1b190:	0003      	movs	r3, r0
   1b192:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1b194:	230f      	movs	r3, #15
   1b196:	18fb      	adds	r3, r7, r3
   1b198:	781b      	ldrb	r3, [r3, #0]
   1b19a:	2b00      	cmp	r3, #0
   1b19c:	d115      	bne.n	1b1ca <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   1b19e:	687b      	ldr	r3, [r7, #4]
   1b1a0:	691b      	ldr	r3, [r3, #16]
   1b1a2:	3301      	adds	r3, #1
   1b1a4:	d007      	beq.n	1b1b6 <remove_chain+0x9a>
				fs->free_clust++;
   1b1a6:	687b      	ldr	r3, [r7, #4]
   1b1a8:	691b      	ldr	r3, [r3, #16]
   1b1aa:	1c5a      	adds	r2, r3, #1
   1b1ac:	687b      	ldr	r3, [r7, #4]
   1b1ae:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   1b1b0:	687b      	ldr	r3, [r7, #4]
   1b1b2:	2201      	movs	r2, #1
   1b1b4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   1b1b6:	68bb      	ldr	r3, [r7, #8]
   1b1b8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   1b1ba:	687b      	ldr	r3, [r7, #4]
   1b1bc:	699a      	ldr	r2, [r3, #24]
   1b1be:	683b      	ldr	r3, [r7, #0]
   1b1c0:	429a      	cmp	r2, r3
   1b1c2:	d8c2      	bhi.n	1b14a <remove_chain+0x2e>
   1b1c4:	e002      	b.n	1b1cc <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   1b1c6:	46c0      	nop			; (mov r8, r8)
   1b1c8:	e000      	b.n	1b1cc <remove_chain+0xb0>
			if (res != FR_OK) break;
   1b1ca:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   1b1cc:	230f      	movs	r3, #15
   1b1ce:	18fb      	adds	r3, r7, r3
   1b1d0:	781b      	ldrb	r3, [r3, #0]
}
   1b1d2:	0018      	movs	r0, r3
   1b1d4:	46bd      	mov	sp, r7
   1b1d6:	b005      	add	sp, #20
   1b1d8:	bd90      	pop	{r4, r7, pc}
   1b1da:	46c0      	nop			; (mov r8, r8)
   1b1dc:	0001ad75 	.word	0x0001ad75
   1b1e0:	0001aee1 	.word	0x0001aee1

0001b1e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   1b1e4:	b590      	push	{r4, r7, lr}
   1b1e6:	b087      	sub	sp, #28
   1b1e8:	af00      	add	r7, sp, #0
   1b1ea:	6078      	str	r0, [r7, #4]
   1b1ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   1b1ee:	683b      	ldr	r3, [r7, #0]
   1b1f0:	2b00      	cmp	r3, #0
   1b1f2:	d10d      	bne.n	1b210 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   1b1f4:	687b      	ldr	r3, [r7, #4]
   1b1f6:	68db      	ldr	r3, [r3, #12]
   1b1f8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   1b1fa:	693b      	ldr	r3, [r7, #16]
   1b1fc:	2b00      	cmp	r3, #0
   1b1fe:	d004      	beq.n	1b20a <create_chain+0x26>
   1b200:	687b      	ldr	r3, [r7, #4]
   1b202:	699a      	ldr	r2, [r3, #24]
   1b204:	693b      	ldr	r3, [r7, #16]
   1b206:	429a      	cmp	r2, r3
   1b208:	d818      	bhi.n	1b23c <create_chain+0x58>
   1b20a:	2301      	movs	r3, #1
   1b20c:	613b      	str	r3, [r7, #16]
   1b20e:	e015      	b.n	1b23c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   1b210:	683a      	ldr	r2, [r7, #0]
   1b212:	687b      	ldr	r3, [r7, #4]
   1b214:	0011      	movs	r1, r2
   1b216:	0018      	movs	r0, r3
   1b218:	4b3e      	ldr	r3, [pc, #248]	; (1b314 <create_chain+0x130>)
   1b21a:	4798      	blx	r3
   1b21c:	0003      	movs	r3, r0
   1b21e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   1b220:	68bb      	ldr	r3, [r7, #8]
   1b222:	2b01      	cmp	r3, #1
   1b224:	d801      	bhi.n	1b22a <create_chain+0x46>
   1b226:	2301      	movs	r3, #1
   1b228:	e070      	b.n	1b30c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1b22a:	687b      	ldr	r3, [r7, #4]
   1b22c:	699a      	ldr	r2, [r3, #24]
   1b22e:	68bb      	ldr	r3, [r7, #8]
   1b230:	429a      	cmp	r2, r3
   1b232:	d901      	bls.n	1b238 <create_chain+0x54>
   1b234:	68bb      	ldr	r3, [r7, #8]
   1b236:	e069      	b.n	1b30c <create_chain+0x128>
		scl = clst;
   1b238:	683b      	ldr	r3, [r7, #0]
   1b23a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   1b23c:	693b      	ldr	r3, [r7, #16]
   1b23e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   1b240:	697b      	ldr	r3, [r7, #20]
   1b242:	3301      	adds	r3, #1
   1b244:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   1b246:	687b      	ldr	r3, [r7, #4]
   1b248:	699a      	ldr	r2, [r3, #24]
   1b24a:	697b      	ldr	r3, [r7, #20]
   1b24c:	429a      	cmp	r2, r3
   1b24e:	d807      	bhi.n	1b260 <create_chain+0x7c>
			ncl = 2;
   1b250:	2302      	movs	r3, #2
   1b252:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   1b254:	697a      	ldr	r2, [r7, #20]
   1b256:	693b      	ldr	r3, [r7, #16]
   1b258:	429a      	cmp	r2, r3
   1b25a:	d901      	bls.n	1b260 <create_chain+0x7c>
   1b25c:	2300      	movs	r3, #0
   1b25e:	e055      	b.n	1b30c <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   1b260:	697a      	ldr	r2, [r7, #20]
   1b262:	687b      	ldr	r3, [r7, #4]
   1b264:	0011      	movs	r1, r2
   1b266:	0018      	movs	r0, r3
   1b268:	4b2a      	ldr	r3, [pc, #168]	; (1b314 <create_chain+0x130>)
   1b26a:	4798      	blx	r3
   1b26c:	0003      	movs	r3, r0
   1b26e:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   1b270:	68bb      	ldr	r3, [r7, #8]
   1b272:	2b00      	cmp	r3, #0
   1b274:	d00d      	beq.n	1b292 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   1b276:	68bb      	ldr	r3, [r7, #8]
   1b278:	3301      	adds	r3, #1
   1b27a:	d002      	beq.n	1b282 <create_chain+0x9e>
   1b27c:	68bb      	ldr	r3, [r7, #8]
   1b27e:	2b01      	cmp	r3, #1
   1b280:	d101      	bne.n	1b286 <create_chain+0xa2>
			return cs;
   1b282:	68bb      	ldr	r3, [r7, #8]
   1b284:	e042      	b.n	1b30c <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   1b286:	697a      	ldr	r2, [r7, #20]
   1b288:	693b      	ldr	r3, [r7, #16]
   1b28a:	429a      	cmp	r2, r3
   1b28c:	d1d8      	bne.n	1b240 <create_chain+0x5c>
   1b28e:	2300      	movs	r3, #0
   1b290:	e03c      	b.n	1b30c <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   1b292:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   1b294:	230f      	movs	r3, #15
   1b296:	18fc      	adds	r4, r7, r3
   1b298:	4a1f      	ldr	r2, [pc, #124]	; (1b318 <create_chain+0x134>)
   1b29a:	6979      	ldr	r1, [r7, #20]
   1b29c:	687b      	ldr	r3, [r7, #4]
   1b29e:	0018      	movs	r0, r3
   1b2a0:	4b1e      	ldr	r3, [pc, #120]	; (1b31c <create_chain+0x138>)
   1b2a2:	4798      	blx	r3
   1b2a4:	0003      	movs	r3, r0
   1b2a6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   1b2a8:	230f      	movs	r3, #15
   1b2aa:	18fb      	adds	r3, r7, r3
   1b2ac:	781b      	ldrb	r3, [r3, #0]
   1b2ae:	2b00      	cmp	r3, #0
   1b2b0:	d10c      	bne.n	1b2cc <create_chain+0xe8>
   1b2b2:	683b      	ldr	r3, [r7, #0]
   1b2b4:	2b00      	cmp	r3, #0
   1b2b6:	d009      	beq.n	1b2cc <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   1b2b8:	230f      	movs	r3, #15
   1b2ba:	18fc      	adds	r4, r7, r3
   1b2bc:	697a      	ldr	r2, [r7, #20]
   1b2be:	6839      	ldr	r1, [r7, #0]
   1b2c0:	687b      	ldr	r3, [r7, #4]
   1b2c2:	0018      	movs	r0, r3
   1b2c4:	4b15      	ldr	r3, [pc, #84]	; (1b31c <create_chain+0x138>)
   1b2c6:	4798      	blx	r3
   1b2c8:	0003      	movs	r3, r0
   1b2ca:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   1b2cc:	230f      	movs	r3, #15
   1b2ce:	18fb      	adds	r3, r7, r3
   1b2d0:	781b      	ldrb	r3, [r3, #0]
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d10f      	bne.n	1b2f6 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   1b2d6:	687b      	ldr	r3, [r7, #4]
   1b2d8:	697a      	ldr	r2, [r7, #20]
   1b2da:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   1b2dc:	687b      	ldr	r3, [r7, #4]
   1b2de:	691b      	ldr	r3, [r3, #16]
   1b2e0:	3301      	adds	r3, #1
   1b2e2:	d012      	beq.n	1b30a <create_chain+0x126>
			fs->free_clust--;
   1b2e4:	687b      	ldr	r3, [r7, #4]
   1b2e6:	691b      	ldr	r3, [r3, #16]
   1b2e8:	1e5a      	subs	r2, r3, #1
   1b2ea:	687b      	ldr	r3, [r7, #4]
   1b2ec:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   1b2ee:	687b      	ldr	r3, [r7, #4]
   1b2f0:	2201      	movs	r2, #1
   1b2f2:	715a      	strb	r2, [r3, #5]
   1b2f4:	e009      	b.n	1b30a <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   1b2f6:	230f      	movs	r3, #15
   1b2f8:	18fb      	adds	r3, r7, r3
   1b2fa:	781b      	ldrb	r3, [r3, #0]
   1b2fc:	2b01      	cmp	r3, #1
   1b2fe:	d102      	bne.n	1b306 <create_chain+0x122>
   1b300:	2301      	movs	r3, #1
   1b302:	425b      	negs	r3, r3
   1b304:	e000      	b.n	1b308 <create_chain+0x124>
   1b306:	2301      	movs	r3, #1
   1b308:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   1b30a:	697b      	ldr	r3, [r7, #20]
}
   1b30c:	0018      	movs	r0, r3
   1b30e:	46bd      	mov	sp, r7
   1b310:	b007      	add	sp, #28
   1b312:	bd90      	pop	{r4, r7, pc}
   1b314:	0001ad75 	.word	0x0001ad75
   1b318:	0fffffff 	.word	0x0fffffff
   1b31c:	0001aee1 	.word	0x0001aee1

0001b320 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   1b320:	b580      	push	{r7, lr}
   1b322:	b084      	sub	sp, #16
   1b324:	af00      	add	r7, sp, #0
   1b326:	6078      	str	r0, [r7, #4]
   1b328:	000a      	movs	r2, r1
   1b32a:	1cbb      	adds	r3, r7, #2
   1b32c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   1b32e:	687b      	ldr	r3, [r7, #4]
   1b330:	1cba      	adds	r2, r7, #2
   1b332:	8812      	ldrh	r2, [r2, #0]
   1b334:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   1b336:	687b      	ldr	r3, [r7, #4]
   1b338:	689b      	ldr	r3, [r3, #8]
   1b33a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   1b33c:	68fb      	ldr	r3, [r7, #12]
   1b33e:	2b01      	cmp	r3, #1
   1b340:	d005      	beq.n	1b34e <dir_sdi+0x2e>
   1b342:	687b      	ldr	r3, [r7, #4]
   1b344:	681b      	ldr	r3, [r3, #0]
   1b346:	699a      	ldr	r2, [r3, #24]
   1b348:	68fb      	ldr	r3, [r7, #12]
   1b34a:	429a      	cmp	r2, r3
   1b34c:	d801      	bhi.n	1b352 <dir_sdi+0x32>
		return FR_INT_ERR;
   1b34e:	2302      	movs	r3, #2
   1b350:	e075      	b.n	1b43e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1b352:	68fb      	ldr	r3, [r7, #12]
   1b354:	2b00      	cmp	r3, #0
   1b356:	d108      	bne.n	1b36a <dir_sdi+0x4a>
   1b358:	687b      	ldr	r3, [r7, #4]
   1b35a:	681b      	ldr	r3, [r3, #0]
   1b35c:	781b      	ldrb	r3, [r3, #0]
   1b35e:	2b03      	cmp	r3, #3
   1b360:	d103      	bne.n	1b36a <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   1b362:	687b      	ldr	r3, [r7, #4]
   1b364:	681b      	ldr	r3, [r3, #0]
   1b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b368:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   1b36a:	68fb      	ldr	r3, [r7, #12]
   1b36c:	2b00      	cmp	r3, #0
   1b36e:	d116      	bne.n	1b39e <dir_sdi+0x7e>
		dj->clust = clst;
   1b370:	687b      	ldr	r3, [r7, #4]
   1b372:	68fa      	ldr	r2, [r7, #12]
   1b374:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   1b376:	687b      	ldr	r3, [r7, #4]
   1b378:	681b      	ldr	r3, [r3, #0]
   1b37a:	891b      	ldrh	r3, [r3, #8]
   1b37c:	1cba      	adds	r2, r7, #2
   1b37e:	8812      	ldrh	r2, [r2, #0]
   1b380:	429a      	cmp	r2, r3
   1b382:	d301      	bcc.n	1b388 <dir_sdi+0x68>
			return FR_INT_ERR;
   1b384:	2302      	movs	r3, #2
   1b386:	e05a      	b.n	1b43e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   1b388:	687b      	ldr	r3, [r7, #4]
   1b38a:	681b      	ldr	r3, [r3, #0]
   1b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b38e:	1cba      	adds	r2, r7, #2
   1b390:	8812      	ldrh	r2, [r2, #0]
   1b392:	0912      	lsrs	r2, r2, #4
   1b394:	b292      	uxth	r2, r2
   1b396:	189a      	adds	r2, r3, r2
   1b398:	687b      	ldr	r3, [r7, #4]
   1b39a:	611a      	str	r2, [r3, #16]
   1b39c:	e042      	b.n	1b424 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   1b39e:	687b      	ldr	r3, [r7, #4]
   1b3a0:	681b      	ldr	r3, [r3, #0]
   1b3a2:	789b      	ldrb	r3, [r3, #2]
   1b3a4:	b29a      	uxth	r2, r3
   1b3a6:	230a      	movs	r3, #10
   1b3a8:	18fb      	adds	r3, r7, r3
   1b3aa:	0112      	lsls	r2, r2, #4
   1b3ac:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   1b3ae:	e020      	b.n	1b3f2 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   1b3b0:	687b      	ldr	r3, [r7, #4]
   1b3b2:	681b      	ldr	r3, [r3, #0]
   1b3b4:	68fa      	ldr	r2, [r7, #12]
   1b3b6:	0011      	movs	r1, r2
   1b3b8:	0018      	movs	r0, r3
   1b3ba:	4b23      	ldr	r3, [pc, #140]	; (1b448 <dir_sdi+0x128>)
   1b3bc:	4798      	blx	r3
   1b3be:	0003      	movs	r3, r0
   1b3c0:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1b3c2:	68fb      	ldr	r3, [r7, #12]
   1b3c4:	3301      	adds	r3, #1
   1b3c6:	d101      	bne.n	1b3cc <dir_sdi+0xac>
   1b3c8:	2301      	movs	r3, #1
   1b3ca:	e038      	b.n	1b43e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   1b3cc:	68fb      	ldr	r3, [r7, #12]
   1b3ce:	2b01      	cmp	r3, #1
   1b3d0:	d905      	bls.n	1b3de <dir_sdi+0xbe>
   1b3d2:	687b      	ldr	r3, [r7, #4]
   1b3d4:	681b      	ldr	r3, [r3, #0]
   1b3d6:	699a      	ldr	r2, [r3, #24]
   1b3d8:	68fb      	ldr	r3, [r7, #12]
   1b3da:	429a      	cmp	r2, r3
   1b3dc:	d801      	bhi.n	1b3e2 <dir_sdi+0xc2>
				return FR_INT_ERR;
   1b3de:	2302      	movs	r3, #2
   1b3e0:	e02d      	b.n	1b43e <dir_sdi+0x11e>
			idx -= ic;
   1b3e2:	1cbb      	adds	r3, r7, #2
   1b3e4:	1cb9      	adds	r1, r7, #2
   1b3e6:	220a      	movs	r2, #10
   1b3e8:	18ba      	adds	r2, r7, r2
   1b3ea:	8809      	ldrh	r1, [r1, #0]
   1b3ec:	8812      	ldrh	r2, [r2, #0]
   1b3ee:	1a8a      	subs	r2, r1, r2
   1b3f0:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   1b3f2:	1cba      	adds	r2, r7, #2
   1b3f4:	230a      	movs	r3, #10
   1b3f6:	18fb      	adds	r3, r7, r3
   1b3f8:	8812      	ldrh	r2, [r2, #0]
   1b3fa:	881b      	ldrh	r3, [r3, #0]
   1b3fc:	429a      	cmp	r2, r3
   1b3fe:	d2d7      	bcs.n	1b3b0 <dir_sdi+0x90>
		}
		dj->clust = clst;
   1b400:	687b      	ldr	r3, [r7, #4]
   1b402:	68fa      	ldr	r2, [r7, #12]
   1b404:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   1b406:	687b      	ldr	r3, [r7, #4]
   1b408:	681b      	ldr	r3, [r3, #0]
   1b40a:	68fa      	ldr	r2, [r7, #12]
   1b40c:	0011      	movs	r1, r2
   1b40e:	0018      	movs	r0, r3
   1b410:	4b0e      	ldr	r3, [pc, #56]	; (1b44c <dir_sdi+0x12c>)
   1b412:	4798      	blx	r3
   1b414:	0002      	movs	r2, r0
   1b416:	1cbb      	adds	r3, r7, #2
   1b418:	881b      	ldrh	r3, [r3, #0]
   1b41a:	091b      	lsrs	r3, r3, #4
   1b41c:	b29b      	uxth	r3, r3
   1b41e:	18d2      	adds	r2, r2, r3
   1b420:	687b      	ldr	r3, [r7, #4]
   1b422:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   1b424:	687b      	ldr	r3, [r7, #4]
   1b426:	681b      	ldr	r3, [r3, #0]
   1b428:	3330      	adds	r3, #48	; 0x30
   1b42a:	001a      	movs	r2, r3
   1b42c:	1cbb      	adds	r3, r7, #2
   1b42e:	881b      	ldrh	r3, [r3, #0]
   1b430:	210f      	movs	r1, #15
   1b432:	400b      	ands	r3, r1
   1b434:	015b      	lsls	r3, r3, #5
   1b436:	18d2      	adds	r2, r2, r3
   1b438:	687b      	ldr	r3, [r7, #4]
   1b43a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   1b43c:	2300      	movs	r3, #0
}
   1b43e:	0018      	movs	r0, r3
   1b440:	46bd      	mov	sp, r7
   1b442:	b004      	add	sp, #16
   1b444:	bd80      	pop	{r7, pc}
   1b446:	46c0      	nop			; (mov r8, r8)
   1b448:	0001ad75 	.word	0x0001ad75
   1b44c:	0001ad3d 	.word	0x0001ad3d

0001b450 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   1b450:	b590      	push	{r4, r7, lr}
   1b452:	b085      	sub	sp, #20
   1b454:	af00      	add	r7, sp, #0
   1b456:	6078      	str	r0, [r7, #4]
   1b458:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   1b45a:	687b      	ldr	r3, [r7, #4]
   1b45c:	88da      	ldrh	r2, [r3, #6]
   1b45e:	2308      	movs	r3, #8
   1b460:	18fb      	adds	r3, r7, r3
   1b462:	3201      	adds	r2, #1
   1b464:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   1b466:	2308      	movs	r3, #8
   1b468:	18fb      	adds	r3, r7, r3
   1b46a:	881b      	ldrh	r3, [r3, #0]
   1b46c:	2b00      	cmp	r3, #0
   1b46e:	d003      	beq.n	1b478 <dir_next+0x28>
   1b470:	687b      	ldr	r3, [r7, #4]
   1b472:	691b      	ldr	r3, [r3, #16]
   1b474:	2b00      	cmp	r3, #0
   1b476:	d101      	bne.n	1b47c <dir_next+0x2c>
		return FR_NO_FILE;
   1b478:	2304      	movs	r3, #4
   1b47a:	e0d2      	b.n	1b622 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   1b47c:	2308      	movs	r3, #8
   1b47e:	18fb      	adds	r3, r7, r3
   1b480:	881b      	ldrh	r3, [r3, #0]
   1b482:	220f      	movs	r2, #15
   1b484:	4013      	ands	r3, r2
   1b486:	b29b      	uxth	r3, r3
   1b488:	2b00      	cmp	r3, #0
   1b48a:	d000      	beq.n	1b48e <dir_next+0x3e>
   1b48c:	e0b6      	b.n	1b5fc <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   1b48e:	687b      	ldr	r3, [r7, #4]
   1b490:	691b      	ldr	r3, [r3, #16]
   1b492:	1c5a      	adds	r2, r3, #1
   1b494:	687b      	ldr	r3, [r7, #4]
   1b496:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   1b498:	687b      	ldr	r3, [r7, #4]
   1b49a:	68db      	ldr	r3, [r3, #12]
   1b49c:	2b00      	cmp	r3, #0
   1b49e:	d10a      	bne.n	1b4b6 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   1b4a0:	687b      	ldr	r3, [r7, #4]
   1b4a2:	681b      	ldr	r3, [r3, #0]
   1b4a4:	891b      	ldrh	r3, [r3, #8]
   1b4a6:	2208      	movs	r2, #8
   1b4a8:	18ba      	adds	r2, r7, r2
   1b4aa:	8812      	ldrh	r2, [r2, #0]
   1b4ac:	429a      	cmp	r2, r3
   1b4ae:	d200      	bcs.n	1b4b2 <dir_next+0x62>
   1b4b0:	e0a4      	b.n	1b5fc <dir_next+0x1ac>
				return FR_NO_FILE;
   1b4b2:	2304      	movs	r3, #4
   1b4b4:	e0b5      	b.n	1b622 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   1b4b6:	2308      	movs	r3, #8
   1b4b8:	18fb      	adds	r3, r7, r3
   1b4ba:	881b      	ldrh	r3, [r3, #0]
   1b4bc:	091b      	lsrs	r3, r3, #4
   1b4be:	b29b      	uxth	r3, r3
   1b4c0:	001a      	movs	r2, r3
   1b4c2:	687b      	ldr	r3, [r7, #4]
   1b4c4:	681b      	ldr	r3, [r3, #0]
   1b4c6:	789b      	ldrb	r3, [r3, #2]
   1b4c8:	3b01      	subs	r3, #1
   1b4ca:	4013      	ands	r3, r2
   1b4cc:	d000      	beq.n	1b4d0 <dir_next+0x80>
   1b4ce:	e095      	b.n	1b5fc <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   1b4d0:	687b      	ldr	r3, [r7, #4]
   1b4d2:	681a      	ldr	r2, [r3, #0]
   1b4d4:	687b      	ldr	r3, [r7, #4]
   1b4d6:	68db      	ldr	r3, [r3, #12]
   1b4d8:	0019      	movs	r1, r3
   1b4da:	0010      	movs	r0, r2
   1b4dc:	4b53      	ldr	r3, [pc, #332]	; (1b62c <dir_next+0x1dc>)
   1b4de:	4798      	blx	r3
   1b4e0:	0003      	movs	r3, r0
   1b4e2:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   1b4e4:	68fb      	ldr	r3, [r7, #12]
   1b4e6:	2b01      	cmp	r3, #1
   1b4e8:	d801      	bhi.n	1b4ee <dir_next+0x9e>
   1b4ea:	2302      	movs	r3, #2
   1b4ec:	e099      	b.n	1b622 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1b4ee:	68fb      	ldr	r3, [r7, #12]
   1b4f0:	3301      	adds	r3, #1
   1b4f2:	d101      	bne.n	1b4f8 <dir_next+0xa8>
   1b4f4:	2301      	movs	r3, #1
   1b4f6:	e094      	b.n	1b622 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   1b4f8:	687b      	ldr	r3, [r7, #4]
   1b4fa:	681b      	ldr	r3, [r3, #0]
   1b4fc:	699a      	ldr	r2, [r3, #24]
   1b4fe:	68fb      	ldr	r3, [r7, #12]
   1b500:	429a      	cmp	r2, r3
   1b502:	d900      	bls.n	1b506 <dir_next+0xb6>
   1b504:	e06d      	b.n	1b5e2 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   1b506:	683b      	ldr	r3, [r7, #0]
   1b508:	2b00      	cmp	r3, #0
   1b50a:	d101      	bne.n	1b510 <dir_next+0xc0>
   1b50c:	2304      	movs	r3, #4
   1b50e:	e088      	b.n	1b622 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   1b510:	687b      	ldr	r3, [r7, #4]
   1b512:	681a      	ldr	r2, [r3, #0]
   1b514:	687b      	ldr	r3, [r7, #4]
   1b516:	68db      	ldr	r3, [r3, #12]
   1b518:	0019      	movs	r1, r3
   1b51a:	0010      	movs	r0, r2
   1b51c:	4b44      	ldr	r3, [pc, #272]	; (1b630 <dir_next+0x1e0>)
   1b51e:	4798      	blx	r3
   1b520:	0003      	movs	r3, r0
   1b522:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   1b524:	68fb      	ldr	r3, [r7, #12]
   1b526:	2b00      	cmp	r3, #0
   1b528:	d101      	bne.n	1b52e <dir_next+0xde>
   1b52a:	2307      	movs	r3, #7
   1b52c:	e079      	b.n	1b622 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   1b52e:	68fb      	ldr	r3, [r7, #12]
   1b530:	2b01      	cmp	r3, #1
   1b532:	d101      	bne.n	1b538 <dir_next+0xe8>
   1b534:	2302      	movs	r3, #2
   1b536:	e074      	b.n	1b622 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1b538:	68fb      	ldr	r3, [r7, #12]
   1b53a:	3301      	adds	r3, #1
   1b53c:	d101      	bne.n	1b542 <dir_next+0xf2>
   1b53e:	2301      	movs	r3, #1
   1b540:	e06f      	b.n	1b622 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   1b542:	687b      	ldr	r3, [r7, #4]
   1b544:	681b      	ldr	r3, [r3, #0]
   1b546:	2100      	movs	r1, #0
   1b548:	0018      	movs	r0, r3
   1b54a:	4b3a      	ldr	r3, [pc, #232]	; (1b634 <dir_next+0x1e4>)
   1b54c:	4798      	blx	r3
   1b54e:	1e03      	subs	r3, r0, #0
   1b550:	d001      	beq.n	1b556 <dir_next+0x106>
   1b552:	2301      	movs	r3, #1
   1b554:	e065      	b.n	1b622 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   1b556:	687b      	ldr	r3, [r7, #4]
   1b558:	681b      	ldr	r3, [r3, #0]
   1b55a:	3330      	adds	r3, #48	; 0x30
   1b55c:	0018      	movs	r0, r3
   1b55e:	2380      	movs	r3, #128	; 0x80
   1b560:	009b      	lsls	r3, r3, #2
   1b562:	001a      	movs	r2, r3
   1b564:	2100      	movs	r1, #0
   1b566:	4b34      	ldr	r3, [pc, #208]	; (1b638 <dir_next+0x1e8>)
   1b568:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   1b56a:	687b      	ldr	r3, [r7, #4]
   1b56c:	681c      	ldr	r4, [r3, #0]
   1b56e:	687b      	ldr	r3, [r7, #4]
   1b570:	681b      	ldr	r3, [r3, #0]
   1b572:	68fa      	ldr	r2, [r7, #12]
   1b574:	0011      	movs	r1, r2
   1b576:	0018      	movs	r0, r3
   1b578:	4b30      	ldr	r3, [pc, #192]	; (1b63c <dir_next+0x1ec>)
   1b57a:	4798      	blx	r3
   1b57c:	0003      	movs	r3, r0
   1b57e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1b580:	230b      	movs	r3, #11
   1b582:	18fb      	adds	r3, r7, r3
   1b584:	2200      	movs	r2, #0
   1b586:	701a      	strb	r2, [r3, #0]
   1b588:	e019      	b.n	1b5be <dir_next+0x16e>
						dj->fs->wflag = 1;
   1b58a:	687b      	ldr	r3, [r7, #4]
   1b58c:	681b      	ldr	r3, [r3, #0]
   1b58e:	2201      	movs	r2, #1
   1b590:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   1b592:	687b      	ldr	r3, [r7, #4]
   1b594:	681b      	ldr	r3, [r3, #0]
   1b596:	2100      	movs	r1, #0
   1b598:	0018      	movs	r0, r3
   1b59a:	4b26      	ldr	r3, [pc, #152]	; (1b634 <dir_next+0x1e4>)
   1b59c:	4798      	blx	r3
   1b59e:	1e03      	subs	r3, r0, #0
   1b5a0:	d001      	beq.n	1b5a6 <dir_next+0x156>
   1b5a2:	2301      	movs	r3, #1
   1b5a4:	e03d      	b.n	1b622 <dir_next+0x1d2>
						dj->fs->winsect++;
   1b5a6:	687b      	ldr	r3, [r7, #4]
   1b5a8:	681b      	ldr	r3, [r3, #0]
   1b5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b5ac:	3201      	adds	r2, #1
   1b5ae:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1b5b0:	230b      	movs	r3, #11
   1b5b2:	18fb      	adds	r3, r7, r3
   1b5b4:	781a      	ldrb	r2, [r3, #0]
   1b5b6:	230b      	movs	r3, #11
   1b5b8:	18fb      	adds	r3, r7, r3
   1b5ba:	3201      	adds	r2, #1
   1b5bc:	701a      	strb	r2, [r3, #0]
   1b5be:	687b      	ldr	r3, [r7, #4]
   1b5c0:	681b      	ldr	r3, [r3, #0]
   1b5c2:	789b      	ldrb	r3, [r3, #2]
   1b5c4:	220b      	movs	r2, #11
   1b5c6:	18ba      	adds	r2, r7, r2
   1b5c8:	7812      	ldrb	r2, [r2, #0]
   1b5ca:	429a      	cmp	r2, r3
   1b5cc:	d3dd      	bcc.n	1b58a <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   1b5ce:	687b      	ldr	r3, [r7, #4]
   1b5d0:	681b      	ldr	r3, [r3, #0]
   1b5d2:	687a      	ldr	r2, [r7, #4]
   1b5d4:	6812      	ldr	r2, [r2, #0]
   1b5d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   1b5d8:	220b      	movs	r2, #11
   1b5da:	18ba      	adds	r2, r7, r2
   1b5dc:	7812      	ldrb	r2, [r2, #0]
   1b5de:	1a8a      	subs	r2, r1, r2
   1b5e0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   1b5e2:	687b      	ldr	r3, [r7, #4]
   1b5e4:	68fa      	ldr	r2, [r7, #12]
   1b5e6:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   1b5e8:	687b      	ldr	r3, [r7, #4]
   1b5ea:	681b      	ldr	r3, [r3, #0]
   1b5ec:	68fa      	ldr	r2, [r7, #12]
   1b5ee:	0011      	movs	r1, r2
   1b5f0:	0018      	movs	r0, r3
   1b5f2:	4b12      	ldr	r3, [pc, #72]	; (1b63c <dir_next+0x1ec>)
   1b5f4:	4798      	blx	r3
   1b5f6:	0002      	movs	r2, r0
   1b5f8:	687b      	ldr	r3, [r7, #4]
   1b5fa:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   1b5fc:	687b      	ldr	r3, [r7, #4]
   1b5fe:	2208      	movs	r2, #8
   1b600:	18ba      	adds	r2, r7, r2
   1b602:	8812      	ldrh	r2, [r2, #0]
   1b604:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   1b606:	687b      	ldr	r3, [r7, #4]
   1b608:	681b      	ldr	r3, [r3, #0]
   1b60a:	3330      	adds	r3, #48	; 0x30
   1b60c:	001a      	movs	r2, r3
   1b60e:	2308      	movs	r3, #8
   1b610:	18fb      	adds	r3, r7, r3
   1b612:	881b      	ldrh	r3, [r3, #0]
   1b614:	210f      	movs	r1, #15
   1b616:	400b      	ands	r3, r1
   1b618:	015b      	lsls	r3, r3, #5
   1b61a:	18d2      	adds	r2, r2, r3
   1b61c:	687b      	ldr	r3, [r7, #4]
   1b61e:	615a      	str	r2, [r3, #20]

	return FR_OK;
   1b620:	2300      	movs	r3, #0
}
   1b622:	0018      	movs	r0, r3
   1b624:	46bd      	mov	sp, r7
   1b626:	b005      	add	sp, #20
   1b628:	bd90      	pop	{r4, r7, pc}
   1b62a:	46c0      	nop			; (mov r8, r8)
   1b62c:	0001ad75 	.word	0x0001ad75
   1b630:	0001b1e5 	.word	0x0001b1e5
   1b634:	0001aadd 	.word	0x0001aadd
   1b638:	0001aa31 	.word	0x0001aa31
   1b63c:	0001ad3d 	.word	0x0001ad3d

0001b640 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   1b640:	b590      	push	{r4, r7, lr}
   1b642:	b087      	sub	sp, #28
   1b644:	af00      	add	r7, sp, #0
   1b646:	6078      	str	r0, [r7, #4]
   1b648:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   1b64a:	683b      	ldr	r3, [r7, #0]
   1b64c:	781b      	ldrb	r3, [r3, #0]
   1b64e:	001a      	movs	r2, r3
   1b650:	2340      	movs	r3, #64	; 0x40
   1b652:	439a      	bics	r2, r3
   1b654:	0013      	movs	r3, r2
   1b656:	1e5a      	subs	r2, r3, #1
   1b658:	0013      	movs	r3, r2
   1b65a:	005b      	lsls	r3, r3, #1
   1b65c:	189b      	adds	r3, r3, r2
   1b65e:	009b      	lsls	r3, r3, #2
   1b660:	189b      	adds	r3, r3, r2
   1b662:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   1b664:	2300      	movs	r3, #0
   1b666:	613b      	str	r3, [r7, #16]
   1b668:	230e      	movs	r3, #14
   1b66a:	18fb      	adds	r3, r7, r3
   1b66c:	2201      	movs	r2, #1
   1b66e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   1b670:	4a31      	ldr	r2, [pc, #196]	; (1b738 <cmp_lfn+0xf8>)
   1b672:	693b      	ldr	r3, [r7, #16]
   1b674:	18d3      	adds	r3, r2, r3
   1b676:	781b      	ldrb	r3, [r3, #0]
   1b678:	3301      	adds	r3, #1
   1b67a:	683a      	ldr	r2, [r7, #0]
   1b67c:	18d3      	adds	r3, r2, r3
   1b67e:	781b      	ldrb	r3, [r3, #0]
   1b680:	021b      	lsls	r3, r3, #8
   1b682:	b21a      	sxth	r2, r3
   1b684:	492c      	ldr	r1, [pc, #176]	; (1b738 <cmp_lfn+0xf8>)
   1b686:	693b      	ldr	r3, [r7, #16]
   1b688:	18cb      	adds	r3, r1, r3
   1b68a:	781b      	ldrb	r3, [r3, #0]
   1b68c:	0019      	movs	r1, r3
   1b68e:	683b      	ldr	r3, [r7, #0]
   1b690:	185b      	adds	r3, r3, r1
   1b692:	781b      	ldrb	r3, [r3, #0]
   1b694:	b21b      	sxth	r3, r3
   1b696:	4313      	orrs	r3, r2
   1b698:	b21a      	sxth	r2, r3
   1b69a:	230c      	movs	r3, #12
   1b69c:	18fb      	adds	r3, r7, r3
   1b69e:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   1b6a0:	230e      	movs	r3, #14
   1b6a2:	18fb      	adds	r3, r7, r3
   1b6a4:	881b      	ldrh	r3, [r3, #0]
   1b6a6:	2b00      	cmp	r3, #0
   1b6a8:	d01f      	beq.n	1b6ea <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   1b6aa:	230e      	movs	r3, #14
   1b6ac:	18fc      	adds	r4, r7, r3
   1b6ae:	230c      	movs	r3, #12
   1b6b0:	18fb      	adds	r3, r7, r3
   1b6b2:	881b      	ldrh	r3, [r3, #0]
   1b6b4:	0018      	movs	r0, r3
   1b6b6:	4b21      	ldr	r3, [pc, #132]	; (1b73c <cmp_lfn+0xfc>)
   1b6b8:	4798      	blx	r3
   1b6ba:	0003      	movs	r3, r0
   1b6bc:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   1b6be:	697b      	ldr	r3, [r7, #20]
   1b6c0:	2bfe      	cmp	r3, #254	; 0xfe
   1b6c2:	d810      	bhi.n	1b6e6 <cmp_lfn+0xa6>
   1b6c4:	697b      	ldr	r3, [r7, #20]
   1b6c6:	1c5a      	adds	r2, r3, #1
   1b6c8:	617a      	str	r2, [r7, #20]
   1b6ca:	005b      	lsls	r3, r3, #1
   1b6cc:	687a      	ldr	r2, [r7, #4]
   1b6ce:	18d3      	adds	r3, r2, r3
   1b6d0:	881b      	ldrh	r3, [r3, #0]
   1b6d2:	0018      	movs	r0, r3
   1b6d4:	4b19      	ldr	r3, [pc, #100]	; (1b73c <cmp_lfn+0xfc>)
   1b6d6:	4798      	blx	r3
   1b6d8:	0003      	movs	r3, r0
   1b6da:	001a      	movs	r2, r3
   1b6dc:	230e      	movs	r3, #14
   1b6de:	18fb      	adds	r3, r7, r3
   1b6e0:	881b      	ldrh	r3, [r3, #0]
   1b6e2:	4293      	cmp	r3, r2
   1b6e4:	d009      	beq.n	1b6fa <cmp_lfn+0xba>
				return 0;				/* Not matched */
   1b6e6:	2300      	movs	r3, #0
   1b6e8:	e022      	b.n	1b730 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   1b6ea:	230c      	movs	r3, #12
   1b6ec:	18fb      	adds	r3, r7, r3
   1b6ee:	881b      	ldrh	r3, [r3, #0]
   1b6f0:	4a13      	ldr	r2, [pc, #76]	; (1b740 <cmp_lfn+0x100>)
   1b6f2:	4293      	cmp	r3, r2
   1b6f4:	d001      	beq.n	1b6fa <cmp_lfn+0xba>
   1b6f6:	2300      	movs	r3, #0
   1b6f8:	e01a      	b.n	1b730 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   1b6fa:	693b      	ldr	r3, [r7, #16]
   1b6fc:	3301      	adds	r3, #1
   1b6fe:	613b      	str	r3, [r7, #16]
   1b700:	693b      	ldr	r3, [r7, #16]
   1b702:	2b0c      	cmp	r3, #12
   1b704:	d9b4      	bls.n	1b670 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   1b706:	683b      	ldr	r3, [r7, #0]
   1b708:	781b      	ldrb	r3, [r3, #0]
   1b70a:	001a      	movs	r2, r3
   1b70c:	2340      	movs	r3, #64	; 0x40
   1b70e:	4013      	ands	r3, r2
   1b710:	d00d      	beq.n	1b72e <cmp_lfn+0xee>
   1b712:	230e      	movs	r3, #14
   1b714:	18fb      	adds	r3, r7, r3
   1b716:	881b      	ldrh	r3, [r3, #0]
   1b718:	2b00      	cmp	r3, #0
   1b71a:	d008      	beq.n	1b72e <cmp_lfn+0xee>
   1b71c:	697b      	ldr	r3, [r7, #20]
   1b71e:	005b      	lsls	r3, r3, #1
   1b720:	687a      	ldr	r2, [r7, #4]
   1b722:	18d3      	adds	r3, r2, r3
   1b724:	881b      	ldrh	r3, [r3, #0]
   1b726:	2b00      	cmp	r3, #0
   1b728:	d001      	beq.n	1b72e <cmp_lfn+0xee>
		return 0;
   1b72a:	2300      	movs	r3, #0
   1b72c:	e000      	b.n	1b730 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   1b72e:	2301      	movs	r3, #1
}
   1b730:	0018      	movs	r0, r3
   1b732:	46bd      	mov	sp, r7
   1b734:	b007      	add	sp, #28
   1b736:	bd90      	pop	{r4, r7, pc}
   1b738:	0002941c 	.word	0x0002941c
   1b73c:	0001d6ed 	.word	0x0001d6ed
   1b740:	0000ffff 	.word	0x0000ffff

0001b744 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   1b744:	b580      	push	{r7, lr}
   1b746:	b088      	sub	sp, #32
   1b748:	af00      	add	r7, sp, #0
   1b74a:	60f8      	str	r0, [r7, #12]
   1b74c:	60b9      	str	r1, [r7, #8]
   1b74e:	0019      	movs	r1, r3
   1b750:	1dfb      	adds	r3, r7, #7
   1b752:	701a      	strb	r2, [r3, #0]
   1b754:	1dbb      	adds	r3, r7, #6
   1b756:	1c0a      	adds	r2, r1, #0
   1b758:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   1b75a:	68bb      	ldr	r3, [r7, #8]
   1b75c:	330d      	adds	r3, #13
   1b75e:	1dba      	adds	r2, r7, #6
   1b760:	7812      	ldrb	r2, [r2, #0]
   1b762:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   1b764:	68bb      	ldr	r3, [r7, #8]
   1b766:	330b      	adds	r3, #11
   1b768:	220f      	movs	r2, #15
   1b76a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   1b76c:	68bb      	ldr	r3, [r7, #8]
   1b76e:	330c      	adds	r3, #12
   1b770:	2200      	movs	r2, #0
   1b772:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   1b774:	68bb      	ldr	r3, [r7, #8]
   1b776:	331a      	adds	r3, #26
   1b778:	2200      	movs	r2, #0
   1b77a:	701a      	strb	r2, [r3, #0]
   1b77c:	68bb      	ldr	r3, [r7, #8]
   1b77e:	331b      	adds	r3, #27
   1b780:	2200      	movs	r2, #0
   1b782:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   1b784:	1dfb      	adds	r3, r7, #7
   1b786:	781b      	ldrb	r3, [r3, #0]
   1b788:	1e5a      	subs	r2, r3, #1
   1b78a:	0013      	movs	r3, r2
   1b78c:	005b      	lsls	r3, r3, #1
   1b78e:	189b      	adds	r3, r3, r2
   1b790:	009b      	lsls	r3, r3, #2
   1b792:	189b      	adds	r3, r3, r2
   1b794:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   1b796:	2316      	movs	r3, #22
   1b798:	18fb      	adds	r3, r7, r3
   1b79a:	2200      	movs	r2, #0
   1b79c:	801a      	strh	r2, [r3, #0]
   1b79e:	2300      	movs	r3, #0
   1b7a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1b7a2:	2316      	movs	r3, #22
   1b7a4:	18fb      	adds	r3, r7, r3
   1b7a6:	881b      	ldrh	r3, [r3, #0]
   1b7a8:	4a28      	ldr	r2, [pc, #160]	; (1b84c <fit_lfn+0x108>)
   1b7aa:	4293      	cmp	r3, r2
   1b7ac:	d009      	beq.n	1b7c2 <fit_lfn+0x7e>
   1b7ae:	69fb      	ldr	r3, [r7, #28]
   1b7b0:	1c5a      	adds	r2, r3, #1
   1b7b2:	61fa      	str	r2, [r7, #28]
   1b7b4:	005b      	lsls	r3, r3, #1
   1b7b6:	68fa      	ldr	r2, [r7, #12]
   1b7b8:	18d2      	adds	r2, r2, r3
   1b7ba:	2316      	movs	r3, #22
   1b7bc:	18fb      	adds	r3, r7, r3
   1b7be:	8812      	ldrh	r2, [r2, #0]
   1b7c0:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1b7c2:	4a23      	ldr	r2, [pc, #140]	; (1b850 <fit_lfn+0x10c>)
   1b7c4:	69bb      	ldr	r3, [r7, #24]
   1b7c6:	18d3      	adds	r3, r2, r3
   1b7c8:	781b      	ldrb	r3, [r3, #0]
   1b7ca:	001a      	movs	r2, r3
   1b7cc:	68bb      	ldr	r3, [r7, #8]
   1b7ce:	189b      	adds	r3, r3, r2
   1b7d0:	2216      	movs	r2, #22
   1b7d2:	18ba      	adds	r2, r7, r2
   1b7d4:	8812      	ldrh	r2, [r2, #0]
   1b7d6:	b2d2      	uxtb	r2, r2
   1b7d8:	701a      	strb	r2, [r3, #0]
   1b7da:	4a1d      	ldr	r2, [pc, #116]	; (1b850 <fit_lfn+0x10c>)
   1b7dc:	69bb      	ldr	r3, [r7, #24]
   1b7de:	18d3      	adds	r3, r2, r3
   1b7e0:	781b      	ldrb	r3, [r3, #0]
   1b7e2:	3301      	adds	r3, #1
   1b7e4:	68ba      	ldr	r2, [r7, #8]
   1b7e6:	18d3      	adds	r3, r2, r3
   1b7e8:	2216      	movs	r2, #22
   1b7ea:	18ba      	adds	r2, r7, r2
   1b7ec:	8812      	ldrh	r2, [r2, #0]
   1b7ee:	0a12      	lsrs	r2, r2, #8
   1b7f0:	b292      	uxth	r2, r2
   1b7f2:	b2d2      	uxtb	r2, r2
   1b7f4:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   1b7f6:	2316      	movs	r3, #22
   1b7f8:	18fb      	adds	r3, r7, r3
   1b7fa:	881b      	ldrh	r3, [r3, #0]
   1b7fc:	2b00      	cmp	r3, #0
   1b7fe:	d104      	bne.n	1b80a <fit_lfn+0xc6>
   1b800:	2316      	movs	r3, #22
   1b802:	18fb      	adds	r3, r7, r3
   1b804:	2201      	movs	r2, #1
   1b806:	4252      	negs	r2, r2
   1b808:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   1b80a:	69bb      	ldr	r3, [r7, #24]
   1b80c:	3301      	adds	r3, #1
   1b80e:	61bb      	str	r3, [r7, #24]
   1b810:	69bb      	ldr	r3, [r7, #24]
   1b812:	2b0c      	cmp	r3, #12
   1b814:	d9c5      	bls.n	1b7a2 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   1b816:	2316      	movs	r3, #22
   1b818:	18fb      	adds	r3, r7, r3
   1b81a:	881b      	ldrh	r3, [r3, #0]
   1b81c:	4a0b      	ldr	r2, [pc, #44]	; (1b84c <fit_lfn+0x108>)
   1b81e:	4293      	cmp	r3, r2
   1b820:	d006      	beq.n	1b830 <fit_lfn+0xec>
   1b822:	69fb      	ldr	r3, [r7, #28]
   1b824:	005b      	lsls	r3, r3, #1
   1b826:	68fa      	ldr	r2, [r7, #12]
   1b828:	18d3      	adds	r3, r2, r3
   1b82a:	881b      	ldrh	r3, [r3, #0]
   1b82c:	2b00      	cmp	r3, #0
   1b82e:	d105      	bne.n	1b83c <fit_lfn+0xf8>
   1b830:	1dfb      	adds	r3, r7, #7
   1b832:	1dfa      	adds	r2, r7, #7
   1b834:	7812      	ldrb	r2, [r2, #0]
   1b836:	2140      	movs	r1, #64	; 0x40
   1b838:	430a      	orrs	r2, r1
   1b83a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   1b83c:	68bb      	ldr	r3, [r7, #8]
   1b83e:	1dfa      	adds	r2, r7, #7
   1b840:	7812      	ldrb	r2, [r2, #0]
   1b842:	701a      	strb	r2, [r3, #0]
}
   1b844:	46c0      	nop			; (mov r8, r8)
   1b846:	46bd      	mov	sp, r7
   1b848:	b008      	add	sp, #32
   1b84a:	bd80      	pop	{r7, pc}
   1b84c:	0000ffff 	.word	0x0000ffff
   1b850:	0002941c 	.word	0x0002941c

0001b854 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   1b854:	b580      	push	{r7, lr}
   1b856:	b08a      	sub	sp, #40	; 0x28
   1b858:	af00      	add	r7, sp, #0
   1b85a:	60f8      	str	r0, [r7, #12]
   1b85c:	60b9      	str	r1, [r7, #8]
   1b85e:	607a      	str	r2, [r7, #4]
   1b860:	001a      	movs	r2, r3
   1b862:	1cbb      	adds	r3, r7, #2
   1b864:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   1b866:	68b9      	ldr	r1, [r7, #8]
   1b868:	68fb      	ldr	r3, [r7, #12]
   1b86a:	220b      	movs	r2, #11
   1b86c:	0018      	movs	r0, r3
   1b86e:	4b38      	ldr	r3, [pc, #224]	; (1b950 <gen_numname+0xfc>)
   1b870:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1b872:	1cbb      	adds	r3, r7, #2
   1b874:	881b      	ldrh	r3, [r3, #0]
   1b876:	2b05      	cmp	r3, #5
   1b878:	d911      	bls.n	1b89e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   1b87a:	1cbb      	adds	r3, r7, #2
   1b87c:	881b      	ldrh	r3, [r3, #0]
   1b87e:	b29a      	uxth	r2, r3
   1b880:	0852      	lsrs	r2, r2, #1
   1b882:	03db      	lsls	r3, r3, #15
   1b884:	4313      	orrs	r3, r2
   1b886:	b299      	uxth	r1, r3
   1b888:	687b      	ldr	r3, [r7, #4]
   1b88a:	1c9a      	adds	r2, r3, #2
   1b88c:	607a      	str	r2, [r7, #4]
   1b88e:	881a      	ldrh	r2, [r3, #0]
   1b890:	1cbb      	adds	r3, r7, #2
   1b892:	188a      	adds	r2, r1, r2
   1b894:	801a      	strh	r2, [r3, #0]
   1b896:	687b      	ldr	r3, [r7, #4]
   1b898:	881b      	ldrh	r3, [r3, #0]
   1b89a:	2b00      	cmp	r3, #0
   1b89c:	d1ed      	bne.n	1b87a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   1b89e:	2307      	movs	r3, #7
   1b8a0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   1b8a2:	1cbb      	adds	r3, r7, #2
   1b8a4:	881b      	ldrh	r3, [r3, #0]
   1b8a6:	b2db      	uxtb	r3, r3
   1b8a8:	220f      	movs	r2, #15
   1b8aa:	4013      	ands	r3, r2
   1b8ac:	b2da      	uxtb	r2, r3
   1b8ae:	2327      	movs	r3, #39	; 0x27
   1b8b0:	18fb      	adds	r3, r7, r3
   1b8b2:	3230      	adds	r2, #48	; 0x30
   1b8b4:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   1b8b6:	2327      	movs	r3, #39	; 0x27
   1b8b8:	18fb      	adds	r3, r7, r3
   1b8ba:	781b      	ldrb	r3, [r3, #0]
   1b8bc:	2b39      	cmp	r3, #57	; 0x39
   1b8be:	d906      	bls.n	1b8ce <gen_numname+0x7a>
   1b8c0:	2327      	movs	r3, #39	; 0x27
   1b8c2:	18fb      	adds	r3, r7, r3
   1b8c4:	2227      	movs	r2, #39	; 0x27
   1b8c6:	18ba      	adds	r2, r7, r2
   1b8c8:	7812      	ldrb	r2, [r2, #0]
   1b8ca:	3207      	adds	r2, #7
   1b8cc:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   1b8ce:	6a3b      	ldr	r3, [r7, #32]
   1b8d0:	1e5a      	subs	r2, r3, #1
   1b8d2:	623a      	str	r2, [r7, #32]
   1b8d4:	2214      	movs	r2, #20
   1b8d6:	18ba      	adds	r2, r7, r2
   1b8d8:	2127      	movs	r1, #39	; 0x27
   1b8da:	1879      	adds	r1, r7, r1
   1b8dc:	7809      	ldrb	r1, [r1, #0]
   1b8de:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   1b8e0:	1cbb      	adds	r3, r7, #2
   1b8e2:	1cba      	adds	r2, r7, #2
   1b8e4:	8812      	ldrh	r2, [r2, #0]
   1b8e6:	0912      	lsrs	r2, r2, #4
   1b8e8:	801a      	strh	r2, [r3, #0]
	} while (seq);
   1b8ea:	1cbb      	adds	r3, r7, #2
   1b8ec:	881b      	ldrh	r3, [r3, #0]
   1b8ee:	2b00      	cmp	r3, #0
   1b8f0:	d1d7      	bne.n	1b8a2 <gen_numname+0x4e>
	ns[i] = '~';
   1b8f2:	2314      	movs	r3, #20
   1b8f4:	18fa      	adds	r2, r7, r3
   1b8f6:	6a3b      	ldr	r3, [r7, #32]
   1b8f8:	18d3      	adds	r3, r2, r3
   1b8fa:	227e      	movs	r2, #126	; 0x7e
   1b8fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   1b8fe:	2300      	movs	r3, #0
   1b900:	61fb      	str	r3, [r7, #28]
   1b902:	e002      	b.n	1b90a <gen_numname+0xb6>
   1b904:	69fb      	ldr	r3, [r7, #28]
   1b906:	3301      	adds	r3, #1
   1b908:	61fb      	str	r3, [r7, #28]
   1b90a:	69fa      	ldr	r2, [r7, #28]
   1b90c:	6a3b      	ldr	r3, [r7, #32]
   1b90e:	429a      	cmp	r2, r3
   1b910:	d205      	bcs.n	1b91e <gen_numname+0xca>
   1b912:	68fa      	ldr	r2, [r7, #12]
   1b914:	69fb      	ldr	r3, [r7, #28]
   1b916:	18d3      	adds	r3, r2, r3
   1b918:	781b      	ldrb	r3, [r3, #0]
   1b91a:	2b20      	cmp	r3, #32
   1b91c:	d1f2      	bne.n	1b904 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1b91e:	69fb      	ldr	r3, [r7, #28]
   1b920:	1c5a      	adds	r2, r3, #1
   1b922:	61fa      	str	r2, [r7, #28]
   1b924:	68fa      	ldr	r2, [r7, #12]
   1b926:	18d2      	adds	r2, r2, r3
   1b928:	6a3b      	ldr	r3, [r7, #32]
   1b92a:	2b07      	cmp	r3, #7
   1b92c:	d806      	bhi.n	1b93c <gen_numname+0xe8>
   1b92e:	6a3b      	ldr	r3, [r7, #32]
   1b930:	1c59      	adds	r1, r3, #1
   1b932:	6239      	str	r1, [r7, #32]
   1b934:	2114      	movs	r1, #20
   1b936:	1879      	adds	r1, r7, r1
   1b938:	5ccb      	ldrb	r3, [r1, r3]
   1b93a:	e000      	b.n	1b93e <gen_numname+0xea>
   1b93c:	2320      	movs	r3, #32
   1b93e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   1b940:	69fb      	ldr	r3, [r7, #28]
   1b942:	2b07      	cmp	r3, #7
   1b944:	d9eb      	bls.n	1b91e <gen_numname+0xca>
}
   1b946:	46c0      	nop			; (mov r8, r8)
   1b948:	46bd      	mov	sp, r7
   1b94a:	b00a      	add	sp, #40	; 0x28
   1b94c:	bd80      	pop	{r7, pc}
   1b94e:	46c0      	nop			; (mov r8, r8)
   1b950:	0001a9f9 	.word	0x0001a9f9

0001b954 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   1b954:	b580      	push	{r7, lr}
   1b956:	b084      	sub	sp, #16
   1b958:	af00      	add	r7, sp, #0
   1b95a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   1b95c:	230f      	movs	r3, #15
   1b95e:	18fb      	adds	r3, r7, r3
   1b960:	2200      	movs	r2, #0
   1b962:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   1b964:	230b      	movs	r3, #11
   1b966:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1b968:	230f      	movs	r3, #15
   1b96a:	18fb      	adds	r3, r7, r3
   1b96c:	781b      	ldrb	r3, [r3, #0]
   1b96e:	b2da      	uxtb	r2, r3
   1b970:	0852      	lsrs	r2, r2, #1
   1b972:	01db      	lsls	r3, r3, #7
   1b974:	4313      	orrs	r3, r2
   1b976:	b2d9      	uxtb	r1, r3
   1b978:	687b      	ldr	r3, [r7, #4]
   1b97a:	1c5a      	adds	r2, r3, #1
   1b97c:	607a      	str	r2, [r7, #4]
   1b97e:	781a      	ldrb	r2, [r3, #0]
   1b980:	230f      	movs	r3, #15
   1b982:	18fb      	adds	r3, r7, r3
   1b984:	188a      	adds	r2, r1, r2
   1b986:	701a      	strb	r2, [r3, #0]
   1b988:	68bb      	ldr	r3, [r7, #8]
   1b98a:	3b01      	subs	r3, #1
   1b98c:	60bb      	str	r3, [r7, #8]
   1b98e:	68bb      	ldr	r3, [r7, #8]
   1b990:	2b00      	cmp	r3, #0
   1b992:	d1e9      	bne.n	1b968 <sum_sfn+0x14>
	return sum;
   1b994:	230f      	movs	r3, #15
   1b996:	18fb      	adds	r3, r7, r3
   1b998:	781b      	ldrb	r3, [r3, #0]
}
   1b99a:	0018      	movs	r0, r3
   1b99c:	46bd      	mov	sp, r7
   1b99e:	b004      	add	sp, #16
   1b9a0:	bd80      	pop	{r7, pc}
	...

0001b9a4 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   1b9a4:	b590      	push	{r4, r7, lr}
   1b9a6:	b087      	sub	sp, #28
   1b9a8:	af00      	add	r7, sp, #0
   1b9aa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   1b9ac:	2317      	movs	r3, #23
   1b9ae:	18fc      	adds	r4, r7, r3
   1b9b0:	687b      	ldr	r3, [r7, #4]
   1b9b2:	2100      	movs	r1, #0
   1b9b4:	0018      	movs	r0, r3
   1b9b6:	4b74      	ldr	r3, [pc, #464]	; (1bb88 <dir_find+0x1e4>)
   1b9b8:	4798      	blx	r3
   1b9ba:	0003      	movs	r3, r0
   1b9bc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   1b9be:	2317      	movs	r3, #23
   1b9c0:	18fb      	adds	r3, r7, r3
   1b9c2:	781b      	ldrb	r3, [r3, #0]
   1b9c4:	2b00      	cmp	r3, #0
   1b9c6:	d003      	beq.n	1b9d0 <dir_find+0x2c>
   1b9c8:	2317      	movs	r3, #23
   1b9ca:	18fb      	adds	r3, r7, r3
   1b9cc:	781b      	ldrb	r3, [r3, #0]
   1b9ce:	e0d6      	b.n	1bb7e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   1b9d0:	2314      	movs	r3, #20
   1b9d2:	18fb      	adds	r3, r7, r3
   1b9d4:	22ff      	movs	r2, #255	; 0xff
   1b9d6:	701a      	strb	r2, [r3, #0]
   1b9d8:	2315      	movs	r3, #21
   1b9da:	18fb      	adds	r3, r7, r3
   1b9dc:	2214      	movs	r2, #20
   1b9de:	18ba      	adds	r2, r7, r2
   1b9e0:	7812      	ldrb	r2, [r2, #0]
   1b9e2:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   1b9e4:	687b      	ldr	r3, [r7, #4]
   1b9e6:	681a      	ldr	r2, [r3, #0]
   1b9e8:	687b      	ldr	r3, [r7, #4]
   1b9ea:	691b      	ldr	r3, [r3, #16]
   1b9ec:	2117      	movs	r1, #23
   1b9ee:	187c      	adds	r4, r7, r1
   1b9f0:	0019      	movs	r1, r3
   1b9f2:	0010      	movs	r0, r2
   1b9f4:	4b65      	ldr	r3, [pc, #404]	; (1bb8c <dir_find+0x1e8>)
   1b9f6:	4798      	blx	r3
   1b9f8:	0003      	movs	r3, r0
   1b9fa:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   1b9fc:	2317      	movs	r3, #23
   1b9fe:	18fb      	adds	r3, r7, r3
   1ba00:	781b      	ldrb	r3, [r3, #0]
   1ba02:	2b00      	cmp	r3, #0
   1ba04:	d000      	beq.n	1ba08 <dir_find+0x64>
   1ba06:	e0b2      	b.n	1bb6e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   1ba08:	687b      	ldr	r3, [r7, #4]
   1ba0a:	695b      	ldr	r3, [r3, #20]
   1ba0c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   1ba0e:	2316      	movs	r3, #22
   1ba10:	18fb      	adds	r3, r7, r3
   1ba12:	693a      	ldr	r2, [r7, #16]
   1ba14:	7812      	ldrb	r2, [r2, #0]
   1ba16:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1ba18:	2316      	movs	r3, #22
   1ba1a:	18fb      	adds	r3, r7, r3
   1ba1c:	781b      	ldrb	r3, [r3, #0]
   1ba1e:	2b00      	cmp	r3, #0
   1ba20:	d104      	bne.n	1ba2c <dir_find+0x88>
   1ba22:	2317      	movs	r3, #23
   1ba24:	18fb      	adds	r3, r7, r3
   1ba26:	2204      	movs	r2, #4
   1ba28:	701a      	strb	r2, [r3, #0]
   1ba2a:	e0a5      	b.n	1bb78 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   1ba2c:	693b      	ldr	r3, [r7, #16]
   1ba2e:	330b      	adds	r3, #11
   1ba30:	781a      	ldrb	r2, [r3, #0]
   1ba32:	230f      	movs	r3, #15
   1ba34:	18fb      	adds	r3, r7, r3
   1ba36:	213f      	movs	r1, #63	; 0x3f
   1ba38:	400a      	ands	r2, r1
   1ba3a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1ba3c:	2316      	movs	r3, #22
   1ba3e:	18fb      	adds	r3, r7, r3
   1ba40:	781b      	ldrb	r3, [r3, #0]
   1ba42:	2be5      	cmp	r3, #229	; 0xe5
   1ba44:	d00a      	beq.n	1ba5c <dir_find+0xb8>
   1ba46:	230f      	movs	r3, #15
   1ba48:	18fb      	adds	r3, r7, r3
   1ba4a:	781b      	ldrb	r3, [r3, #0]
   1ba4c:	2208      	movs	r2, #8
   1ba4e:	4013      	ands	r3, r2
   1ba50:	d009      	beq.n	1ba66 <dir_find+0xc2>
   1ba52:	230f      	movs	r3, #15
   1ba54:	18fb      	adds	r3, r7, r3
   1ba56:	781b      	ldrb	r3, [r3, #0]
   1ba58:	2b0f      	cmp	r3, #15
   1ba5a:	d004      	beq.n	1ba66 <dir_find+0xc2>
			ord = 0xFF;
   1ba5c:	2315      	movs	r3, #21
   1ba5e:	18fb      	adds	r3, r7, r3
   1ba60:	22ff      	movs	r2, #255	; 0xff
   1ba62:	701a      	strb	r2, [r3, #0]
   1ba64:	e073      	b.n	1bb4e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   1ba66:	230f      	movs	r3, #15
   1ba68:	18fb      	adds	r3, r7, r3
   1ba6a:	781b      	ldrb	r3, [r3, #0]
   1ba6c:	2b0f      	cmp	r3, #15
   1ba6e:	d145      	bne.n	1bafc <dir_find+0x158>
				if (dj->lfn) {
   1ba70:	687b      	ldr	r3, [r7, #4]
   1ba72:	69db      	ldr	r3, [r3, #28]
   1ba74:	2b00      	cmp	r3, #0
   1ba76:	d100      	bne.n	1ba7a <dir_find+0xd6>
   1ba78:	e069      	b.n	1bb4e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   1ba7a:	2316      	movs	r3, #22
   1ba7c:	18fb      	adds	r3, r7, r3
   1ba7e:	781b      	ldrb	r3, [r3, #0]
   1ba80:	2240      	movs	r2, #64	; 0x40
   1ba82:	4013      	ands	r3, r2
   1ba84:	d016      	beq.n	1bab4 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   1ba86:	2314      	movs	r3, #20
   1ba88:	18fb      	adds	r3, r7, r3
   1ba8a:	693a      	ldr	r2, [r7, #16]
   1ba8c:	7b52      	ldrb	r2, [r2, #13]
   1ba8e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   1ba90:	2316      	movs	r3, #22
   1ba92:	18fb      	adds	r3, r7, r3
   1ba94:	2216      	movs	r2, #22
   1ba96:	18ba      	adds	r2, r7, r2
   1ba98:	7812      	ldrb	r2, [r2, #0]
   1ba9a:	2140      	movs	r1, #64	; 0x40
   1ba9c:	438a      	bics	r2, r1
   1ba9e:	701a      	strb	r2, [r3, #0]
   1baa0:	2315      	movs	r3, #21
   1baa2:	18fb      	adds	r3, r7, r3
   1baa4:	2216      	movs	r2, #22
   1baa6:	18ba      	adds	r2, r7, r2
   1baa8:	7812      	ldrb	r2, [r2, #0]
   1baaa:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   1baac:	687b      	ldr	r3, [r7, #4]
   1baae:	88da      	ldrh	r2, [r3, #6]
   1bab0:	687b      	ldr	r3, [r7, #4]
   1bab2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1bab4:	2316      	movs	r3, #22
   1bab6:	18fa      	adds	r2, r7, r3
   1bab8:	2315      	movs	r3, #21
   1baba:	18fb      	adds	r3, r7, r3
   1babc:	7812      	ldrb	r2, [r2, #0]
   1babe:	781b      	ldrb	r3, [r3, #0]
   1bac0:	429a      	cmp	r2, r3
   1bac2:	d116      	bne.n	1baf2 <dir_find+0x14e>
   1bac4:	693b      	ldr	r3, [r7, #16]
   1bac6:	330d      	adds	r3, #13
   1bac8:	781b      	ldrb	r3, [r3, #0]
   1baca:	2214      	movs	r2, #20
   1bacc:	18ba      	adds	r2, r7, r2
   1bace:	7812      	ldrb	r2, [r2, #0]
   1bad0:	429a      	cmp	r2, r3
   1bad2:	d10e      	bne.n	1baf2 <dir_find+0x14e>
   1bad4:	687b      	ldr	r3, [r7, #4]
   1bad6:	69db      	ldr	r3, [r3, #28]
   1bad8:	693a      	ldr	r2, [r7, #16]
   1bada:	0011      	movs	r1, r2
   1badc:	0018      	movs	r0, r3
   1bade:	4b2c      	ldr	r3, [pc, #176]	; (1bb90 <dir_find+0x1ec>)
   1bae0:	4798      	blx	r3
   1bae2:	1e03      	subs	r3, r0, #0
   1bae4:	d005      	beq.n	1baf2 <dir_find+0x14e>
   1bae6:	2315      	movs	r3, #21
   1bae8:	18fb      	adds	r3, r7, r3
   1baea:	781b      	ldrb	r3, [r3, #0]
   1baec:	3b01      	subs	r3, #1
   1baee:	b2da      	uxtb	r2, r3
   1baf0:	e000      	b.n	1baf4 <dir_find+0x150>
   1baf2:	22ff      	movs	r2, #255	; 0xff
   1baf4:	2315      	movs	r3, #21
   1baf6:	18fb      	adds	r3, r7, r3
   1baf8:	701a      	strb	r2, [r3, #0]
   1bafa:	e028      	b.n	1bb4e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1bafc:	2315      	movs	r3, #21
   1bafe:	18fb      	adds	r3, r7, r3
   1bb00:	781b      	ldrb	r3, [r3, #0]
   1bb02:	2b00      	cmp	r3, #0
   1bb04:	d10a      	bne.n	1bb1c <dir_find+0x178>
   1bb06:	693b      	ldr	r3, [r7, #16]
   1bb08:	0018      	movs	r0, r3
   1bb0a:	4b22      	ldr	r3, [pc, #136]	; (1bb94 <dir_find+0x1f0>)
   1bb0c:	4798      	blx	r3
   1bb0e:	0003      	movs	r3, r0
   1bb10:	001a      	movs	r2, r3
   1bb12:	2314      	movs	r3, #20
   1bb14:	18fb      	adds	r3, r7, r3
   1bb16:	781b      	ldrb	r3, [r3, #0]
   1bb18:	4293      	cmp	r3, r2
   1bb1a:	d02a      	beq.n	1bb72 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1bb1c:	2315      	movs	r3, #21
   1bb1e:	18fb      	adds	r3, r7, r3
   1bb20:	22ff      	movs	r2, #255	; 0xff
   1bb22:	701a      	strb	r2, [r3, #0]
   1bb24:	687b      	ldr	r3, [r7, #4]
   1bb26:	2201      	movs	r2, #1
   1bb28:	4252      	negs	r2, r2
   1bb2a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   1bb2c:	687b      	ldr	r3, [r7, #4]
   1bb2e:	699b      	ldr	r3, [r3, #24]
   1bb30:	330b      	adds	r3, #11
   1bb32:	781b      	ldrb	r3, [r3, #0]
   1bb34:	001a      	movs	r2, r3
   1bb36:	2301      	movs	r3, #1
   1bb38:	4013      	ands	r3, r2
   1bb3a:	d108      	bne.n	1bb4e <dir_find+0x1aa>
   1bb3c:	687b      	ldr	r3, [r7, #4]
   1bb3e:	6999      	ldr	r1, [r3, #24]
   1bb40:	693b      	ldr	r3, [r7, #16]
   1bb42:	220b      	movs	r2, #11
   1bb44:	0018      	movs	r0, r3
   1bb46:	4b14      	ldr	r3, [pc, #80]	; (1bb98 <dir_find+0x1f4>)
   1bb48:	4798      	blx	r3
   1bb4a:	1e03      	subs	r3, r0, #0
   1bb4c:	d013      	beq.n	1bb76 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   1bb4e:	2317      	movs	r3, #23
   1bb50:	18fc      	adds	r4, r7, r3
   1bb52:	687b      	ldr	r3, [r7, #4]
   1bb54:	2100      	movs	r1, #0
   1bb56:	0018      	movs	r0, r3
   1bb58:	4b10      	ldr	r3, [pc, #64]	; (1bb9c <dir_find+0x1f8>)
   1bb5a:	4798      	blx	r3
   1bb5c:	0003      	movs	r3, r0
   1bb5e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   1bb60:	2317      	movs	r3, #23
   1bb62:	18fb      	adds	r3, r7, r3
   1bb64:	781b      	ldrb	r3, [r3, #0]
   1bb66:	2b00      	cmp	r3, #0
   1bb68:	d100      	bne.n	1bb6c <dir_find+0x1c8>
   1bb6a:	e73b      	b.n	1b9e4 <dir_find+0x40>
   1bb6c:	e004      	b.n	1bb78 <dir_find+0x1d4>
		if (res != FR_OK) break;
   1bb6e:	46c0      	nop			; (mov r8, r8)
   1bb70:	e002      	b.n	1bb78 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1bb72:	46c0      	nop			; (mov r8, r8)
   1bb74:	e000      	b.n	1bb78 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   1bb76:	46c0      	nop			; (mov r8, r8)

	return res;
   1bb78:	2317      	movs	r3, #23
   1bb7a:	18fb      	adds	r3, r7, r3
   1bb7c:	781b      	ldrb	r3, [r3, #0]
}
   1bb7e:	0018      	movs	r0, r3
   1bb80:	46bd      	mov	sp, r7
   1bb82:	b007      	add	sp, #28
   1bb84:	bd90      	pop	{r4, r7, pc}
   1bb86:	46c0      	nop			; (mov r8, r8)
   1bb88:	0001b321 	.word	0x0001b321
   1bb8c:	0001aadd 	.word	0x0001aadd
   1bb90:	0001b641 	.word	0x0001b641
   1bb94:	0001b955 	.word	0x0001b955
   1bb98:	0001aa61 	.word	0x0001aa61
   1bb9c:	0001b451 	.word	0x0001b451

0001bba0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   1bba0:	b590      	push	{r4, r7, lr}
   1bba2:	b08d      	sub	sp, #52	; 0x34
   1bba4:	af00      	add	r7, sp, #0
   1bba6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   1bba8:	687b      	ldr	r3, [r7, #4]
   1bbaa:	699b      	ldr	r3, [r3, #24]
   1bbac:	627b      	str	r3, [r7, #36]	; 0x24
   1bbae:	687b      	ldr	r3, [r7, #4]
   1bbb0:	69db      	ldr	r3, [r3, #28]
   1bbb2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   1bbb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1bbb6:	230c      	movs	r3, #12
   1bbb8:	18fb      	adds	r3, r7, r3
   1bbba:	220c      	movs	r2, #12
   1bbbc:	0018      	movs	r0, r3
   1bbbe:	4bc8      	ldr	r3, [pc, #800]	; (1bee0 <dir_register+0x340>)
   1bbc0:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   1bbc2:	230c      	movs	r3, #12
   1bbc4:	18fb      	adds	r3, r7, r3
   1bbc6:	7adb      	ldrb	r3, [r3, #11]
   1bbc8:	001a      	movs	r2, r3
   1bbca:	2301      	movs	r3, #1
   1bbcc:	4013      	ands	r3, r2
   1bbce:	d048      	beq.n	1bc62 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   1bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bbd2:	330b      	adds	r3, #11
   1bbd4:	2200      	movs	r2, #0
   1bbd6:	701a      	strb	r2, [r3, #0]
   1bbd8:	687b      	ldr	r3, [r7, #4]
   1bbda:	2200      	movs	r2, #0
   1bbdc:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   1bbde:	232c      	movs	r3, #44	; 0x2c
   1bbe0:	18fb      	adds	r3, r7, r3
   1bbe2:	2201      	movs	r2, #1
   1bbe4:	801a      	strh	r2, [r3, #0]
   1bbe6:	e01c      	b.n	1bc22 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   1bbe8:	232c      	movs	r3, #44	; 0x2c
   1bbea:	18fb      	adds	r3, r7, r3
   1bbec:	881b      	ldrh	r3, [r3, #0]
   1bbee:	6a3a      	ldr	r2, [r7, #32]
   1bbf0:	210c      	movs	r1, #12
   1bbf2:	1879      	adds	r1, r7, r1
   1bbf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1bbf6:	4cbb      	ldr	r4, [pc, #748]	; (1bee4 <dir_register+0x344>)
   1bbf8:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   1bbfa:	232f      	movs	r3, #47	; 0x2f
   1bbfc:	18fc      	adds	r4, r7, r3
   1bbfe:	687b      	ldr	r3, [r7, #4]
   1bc00:	0018      	movs	r0, r3
   1bc02:	4bb9      	ldr	r3, [pc, #740]	; (1bee8 <dir_register+0x348>)
   1bc04:	4798      	blx	r3
   1bc06:	0003      	movs	r3, r0
   1bc08:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1bc0a:	232f      	movs	r3, #47	; 0x2f
   1bc0c:	18fb      	adds	r3, r7, r3
   1bc0e:	781b      	ldrb	r3, [r3, #0]
   1bc10:	2b00      	cmp	r3, #0
   1bc12:	d10c      	bne.n	1bc2e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   1bc14:	232c      	movs	r3, #44	; 0x2c
   1bc16:	18fb      	adds	r3, r7, r3
   1bc18:	881a      	ldrh	r2, [r3, #0]
   1bc1a:	232c      	movs	r3, #44	; 0x2c
   1bc1c:	18fb      	adds	r3, r7, r3
   1bc1e:	3201      	adds	r2, #1
   1bc20:	801a      	strh	r2, [r3, #0]
   1bc22:	232c      	movs	r3, #44	; 0x2c
   1bc24:	18fb      	adds	r3, r7, r3
   1bc26:	881b      	ldrh	r3, [r3, #0]
   1bc28:	2b63      	cmp	r3, #99	; 0x63
   1bc2a:	d9dd      	bls.n	1bbe8 <dir_register+0x48>
   1bc2c:	e000      	b.n	1bc30 <dir_register+0x90>
			if (res != FR_OK) break;
   1bc2e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1bc30:	232c      	movs	r3, #44	; 0x2c
   1bc32:	18fb      	adds	r3, r7, r3
   1bc34:	881b      	ldrh	r3, [r3, #0]
   1bc36:	2b64      	cmp	r3, #100	; 0x64
   1bc38:	d101      	bne.n	1bc3e <dir_register+0x9e>
   1bc3a:	2307      	movs	r3, #7
   1bc3c:	e14c      	b.n	1bed8 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   1bc3e:	232f      	movs	r3, #47	; 0x2f
   1bc40:	18fb      	adds	r3, r7, r3
   1bc42:	781b      	ldrb	r3, [r3, #0]
   1bc44:	2b04      	cmp	r3, #4
   1bc46:	d003      	beq.n	1bc50 <dir_register+0xb0>
   1bc48:	232f      	movs	r3, #47	; 0x2f
   1bc4a:	18fb      	adds	r3, r7, r3
   1bc4c:	781b      	ldrb	r3, [r3, #0]
   1bc4e:	e143      	b.n	1bed8 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   1bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc52:	330b      	adds	r3, #11
   1bc54:	220c      	movs	r2, #12
   1bc56:	18ba      	adds	r2, r7, r2
   1bc58:	7ad2      	ldrb	r2, [r2, #11]
   1bc5a:	701a      	strb	r2, [r3, #0]
   1bc5c:	687b      	ldr	r3, [r7, #4]
   1bc5e:	6a3a      	ldr	r2, [r7, #32]
   1bc60:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1bc62:	230c      	movs	r3, #12
   1bc64:	18fb      	adds	r3, r7, r3
   1bc66:	7adb      	ldrb	r3, [r3, #11]
   1bc68:	001a      	movs	r2, r3
   1bc6a:	2302      	movs	r3, #2
   1bc6c:	4013      	ands	r3, r2
   1bc6e:	d023      	beq.n	1bcb8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   1bc70:	232a      	movs	r3, #42	; 0x2a
   1bc72:	18fb      	adds	r3, r7, r3
   1bc74:	2200      	movs	r2, #0
   1bc76:	801a      	strh	r2, [r3, #0]
   1bc78:	e006      	b.n	1bc88 <dir_register+0xe8>
   1bc7a:	232a      	movs	r3, #42	; 0x2a
   1bc7c:	18fb      	adds	r3, r7, r3
   1bc7e:	881a      	ldrh	r2, [r3, #0]
   1bc80:	232a      	movs	r3, #42	; 0x2a
   1bc82:	18fb      	adds	r3, r7, r3
   1bc84:	3201      	adds	r2, #1
   1bc86:	801a      	strh	r2, [r3, #0]
   1bc88:	232a      	movs	r3, #42	; 0x2a
   1bc8a:	18fb      	adds	r3, r7, r3
   1bc8c:	881b      	ldrh	r3, [r3, #0]
   1bc8e:	005b      	lsls	r3, r3, #1
   1bc90:	6a3a      	ldr	r2, [r7, #32]
   1bc92:	18d3      	adds	r3, r2, r3
   1bc94:	881b      	ldrh	r3, [r3, #0]
   1bc96:	2b00      	cmp	r3, #0
   1bc98:	d1ef      	bne.n	1bc7a <dir_register+0xda>
		ne = (ne + 25) / 13;
   1bc9a:	232a      	movs	r3, #42	; 0x2a
   1bc9c:	18fb      	adds	r3, r7, r3
   1bc9e:	881b      	ldrh	r3, [r3, #0]
   1bca0:	3319      	adds	r3, #25
   1bca2:	001a      	movs	r2, r3
   1bca4:	4b91      	ldr	r3, [pc, #580]	; (1beec <dir_register+0x34c>)
   1bca6:	210d      	movs	r1, #13
   1bca8:	0010      	movs	r0, r2
   1bcaa:	4798      	blx	r3
   1bcac:	0003      	movs	r3, r0
   1bcae:	001a      	movs	r2, r3
   1bcb0:	232a      	movs	r3, #42	; 0x2a
   1bcb2:	18fb      	adds	r3, r7, r3
   1bcb4:	801a      	strh	r2, [r3, #0]
   1bcb6:	e003      	b.n	1bcc0 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   1bcb8:	232a      	movs	r3, #42	; 0x2a
   1bcba:	18fb      	adds	r3, r7, r3
   1bcbc:	2201      	movs	r2, #1
   1bcbe:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   1bcc0:	232f      	movs	r3, #47	; 0x2f
   1bcc2:	18fc      	adds	r4, r7, r3
   1bcc4:	687b      	ldr	r3, [r7, #4]
   1bcc6:	2100      	movs	r1, #0
   1bcc8:	0018      	movs	r0, r3
   1bcca:	4b89      	ldr	r3, [pc, #548]	; (1bef0 <dir_register+0x350>)
   1bccc:	4798      	blx	r3
   1bcce:	0003      	movs	r3, r0
   1bcd0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   1bcd2:	232f      	movs	r3, #47	; 0x2f
   1bcd4:	18fb      	adds	r3, r7, r3
   1bcd6:	781b      	ldrb	r3, [r3, #0]
   1bcd8:	2b00      	cmp	r3, #0
   1bcda:	d003      	beq.n	1bce4 <dir_register+0x144>
   1bcdc:	232f      	movs	r3, #47	; 0x2f
   1bcde:	18fb      	adds	r3, r7, r3
   1bce0:	781b      	ldrb	r3, [r3, #0]
   1bce2:	e0f9      	b.n	1bed8 <dir_register+0x338>
	n = is = 0;
   1bce4:	2328      	movs	r3, #40	; 0x28
   1bce6:	18fb      	adds	r3, r7, r3
   1bce8:	2200      	movs	r2, #0
   1bcea:	801a      	strh	r2, [r3, #0]
   1bcec:	232c      	movs	r3, #44	; 0x2c
   1bcee:	18fb      	adds	r3, r7, r3
   1bcf0:	2228      	movs	r2, #40	; 0x28
   1bcf2:	18ba      	adds	r2, r7, r2
   1bcf4:	8812      	ldrh	r2, [r2, #0]
   1bcf6:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   1bcf8:	687b      	ldr	r3, [r7, #4]
   1bcfa:	681a      	ldr	r2, [r3, #0]
   1bcfc:	687b      	ldr	r3, [r7, #4]
   1bcfe:	691b      	ldr	r3, [r3, #16]
   1bd00:	212f      	movs	r1, #47	; 0x2f
   1bd02:	187c      	adds	r4, r7, r1
   1bd04:	0019      	movs	r1, r3
   1bd06:	0010      	movs	r0, r2
   1bd08:	4b7a      	ldr	r3, [pc, #488]	; (1bef4 <dir_register+0x354>)
   1bd0a:	4798      	blx	r3
   1bd0c:	0003      	movs	r3, r0
   1bd0e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   1bd10:	232f      	movs	r3, #47	; 0x2f
   1bd12:	18fb      	adds	r3, r7, r3
   1bd14:	781b      	ldrb	r3, [r3, #0]
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	d13c      	bne.n	1bd94 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   1bd1a:	687b      	ldr	r3, [r7, #4]
   1bd1c:	695a      	ldr	r2, [r3, #20]
   1bd1e:	231f      	movs	r3, #31
   1bd20:	18fb      	adds	r3, r7, r3
   1bd22:	7812      	ldrb	r2, [r2, #0]
   1bd24:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   1bd26:	231f      	movs	r3, #31
   1bd28:	18fb      	adds	r3, r7, r3
   1bd2a:	781b      	ldrb	r3, [r3, #0]
   1bd2c:	2be5      	cmp	r3, #229	; 0xe5
   1bd2e:	d004      	beq.n	1bd3a <dir_register+0x19a>
   1bd30:	231f      	movs	r3, #31
   1bd32:	18fb      	adds	r3, r7, r3
   1bd34:	781b      	ldrb	r3, [r3, #0]
   1bd36:	2b00      	cmp	r3, #0
   1bd38:	d119      	bne.n	1bd6e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   1bd3a:	232c      	movs	r3, #44	; 0x2c
   1bd3c:	18fb      	adds	r3, r7, r3
   1bd3e:	881b      	ldrh	r3, [r3, #0]
   1bd40:	2b00      	cmp	r3, #0
   1bd42:	d104      	bne.n	1bd4e <dir_register+0x1ae>
   1bd44:	2328      	movs	r3, #40	; 0x28
   1bd46:	18fb      	adds	r3, r7, r3
   1bd48:	687a      	ldr	r2, [r7, #4]
   1bd4a:	88d2      	ldrh	r2, [r2, #6]
   1bd4c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   1bd4e:	232c      	movs	r3, #44	; 0x2c
   1bd50:	18fb      	adds	r3, r7, r3
   1bd52:	222c      	movs	r2, #44	; 0x2c
   1bd54:	18ba      	adds	r2, r7, r2
   1bd56:	8812      	ldrh	r2, [r2, #0]
   1bd58:	3201      	adds	r2, #1
   1bd5a:	801a      	strh	r2, [r3, #0]
   1bd5c:	232c      	movs	r3, #44	; 0x2c
   1bd5e:	18fa      	adds	r2, r7, r3
   1bd60:	232a      	movs	r3, #42	; 0x2a
   1bd62:	18fb      	adds	r3, r7, r3
   1bd64:	8812      	ldrh	r2, [r2, #0]
   1bd66:	881b      	ldrh	r3, [r3, #0]
   1bd68:	429a      	cmp	r2, r3
   1bd6a:	d104      	bne.n	1bd76 <dir_register+0x1d6>
   1bd6c:	e013      	b.n	1bd96 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   1bd6e:	232c      	movs	r3, #44	; 0x2c
   1bd70:	18fb      	adds	r3, r7, r3
   1bd72:	2200      	movs	r2, #0
   1bd74:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   1bd76:	232f      	movs	r3, #47	; 0x2f
   1bd78:	18fc      	adds	r4, r7, r3
   1bd7a:	687b      	ldr	r3, [r7, #4]
   1bd7c:	2101      	movs	r1, #1
   1bd7e:	0018      	movs	r0, r3
   1bd80:	4b5d      	ldr	r3, [pc, #372]	; (1bef8 <dir_register+0x358>)
   1bd82:	4798      	blx	r3
   1bd84:	0003      	movs	r3, r0
   1bd86:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   1bd88:	232f      	movs	r3, #47	; 0x2f
   1bd8a:	18fb      	adds	r3, r7, r3
   1bd8c:	781b      	ldrb	r3, [r3, #0]
   1bd8e:	2b00      	cmp	r3, #0
   1bd90:	d0b2      	beq.n	1bcf8 <dir_register+0x158>
   1bd92:	e000      	b.n	1bd96 <dir_register+0x1f6>
		if (res != FR_OK) break;
   1bd94:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   1bd96:	232f      	movs	r3, #47	; 0x2f
   1bd98:	18fb      	adds	r3, r7, r3
   1bd9a:	781b      	ldrb	r3, [r3, #0]
   1bd9c:	2b00      	cmp	r3, #0
   1bd9e:	d163      	bne.n	1be68 <dir_register+0x2c8>
   1bda0:	232a      	movs	r3, #42	; 0x2a
   1bda2:	18fb      	adds	r3, r7, r3
   1bda4:	881b      	ldrh	r3, [r3, #0]
   1bda6:	2b01      	cmp	r3, #1
   1bda8:	d95e      	bls.n	1be68 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   1bdaa:	232f      	movs	r3, #47	; 0x2f
   1bdac:	18fc      	adds	r4, r7, r3
   1bdae:	2328      	movs	r3, #40	; 0x28
   1bdb0:	18fb      	adds	r3, r7, r3
   1bdb2:	881a      	ldrh	r2, [r3, #0]
   1bdb4:	687b      	ldr	r3, [r7, #4]
   1bdb6:	0011      	movs	r1, r2
   1bdb8:	0018      	movs	r0, r3
   1bdba:	4b4d      	ldr	r3, [pc, #308]	; (1bef0 <dir_register+0x350>)
   1bdbc:	4798      	blx	r3
   1bdbe:	0003      	movs	r3, r0
   1bdc0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   1bdc2:	232f      	movs	r3, #47	; 0x2f
   1bdc4:	18fb      	adds	r3, r7, r3
   1bdc6:	781b      	ldrb	r3, [r3, #0]
   1bdc8:	2b00      	cmp	r3, #0
   1bdca:	d14d      	bne.n	1be68 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   1bdcc:	687b      	ldr	r3, [r7, #4]
   1bdce:	699b      	ldr	r3, [r3, #24]
   1bdd0:	221e      	movs	r2, #30
   1bdd2:	18bc      	adds	r4, r7, r2
   1bdd4:	0018      	movs	r0, r3
   1bdd6:	4b49      	ldr	r3, [pc, #292]	; (1befc <dir_register+0x35c>)
   1bdd8:	4798      	blx	r3
   1bdda:	0003      	movs	r3, r0
   1bddc:	7023      	strb	r3, [r4, #0]
			ne--;
   1bdde:	232a      	movs	r3, #42	; 0x2a
   1bde0:	18fb      	adds	r3, r7, r3
   1bde2:	881a      	ldrh	r2, [r3, #0]
   1bde4:	232a      	movs	r3, #42	; 0x2a
   1bde6:	18fb      	adds	r3, r7, r3
   1bde8:	3a01      	subs	r2, #1
   1bdea:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   1bdec:	687b      	ldr	r3, [r7, #4]
   1bdee:	681a      	ldr	r2, [r3, #0]
   1bdf0:	687b      	ldr	r3, [r7, #4]
   1bdf2:	691b      	ldr	r3, [r3, #16]
   1bdf4:	212f      	movs	r1, #47	; 0x2f
   1bdf6:	187c      	adds	r4, r7, r1
   1bdf8:	0019      	movs	r1, r3
   1bdfa:	0010      	movs	r0, r2
   1bdfc:	4b3d      	ldr	r3, [pc, #244]	; (1bef4 <dir_register+0x354>)
   1bdfe:	4798      	blx	r3
   1be00:	0003      	movs	r3, r0
   1be02:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   1be04:	232f      	movs	r3, #47	; 0x2f
   1be06:	18fb      	adds	r3, r7, r3
   1be08:	781b      	ldrb	r3, [r3, #0]
   1be0a:	2b00      	cmp	r3, #0
   1be0c:	d12b      	bne.n	1be66 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   1be0e:	687b      	ldr	r3, [r7, #4]
   1be10:	69d8      	ldr	r0, [r3, #28]
   1be12:	687b      	ldr	r3, [r7, #4]
   1be14:	6959      	ldr	r1, [r3, #20]
   1be16:	232a      	movs	r3, #42	; 0x2a
   1be18:	18fb      	adds	r3, r7, r3
   1be1a:	881b      	ldrh	r3, [r3, #0]
   1be1c:	b2da      	uxtb	r2, r3
   1be1e:	231e      	movs	r3, #30
   1be20:	18fb      	adds	r3, r7, r3
   1be22:	781b      	ldrb	r3, [r3, #0]
   1be24:	4c36      	ldr	r4, [pc, #216]	; (1bf00 <dir_register+0x360>)
   1be26:	47a0      	blx	r4
				dj->fs->wflag = 1;
   1be28:	687b      	ldr	r3, [r7, #4]
   1be2a:	681b      	ldr	r3, [r3, #0]
   1be2c:	2201      	movs	r2, #1
   1be2e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   1be30:	232f      	movs	r3, #47	; 0x2f
   1be32:	18fc      	adds	r4, r7, r3
   1be34:	687b      	ldr	r3, [r7, #4]
   1be36:	2100      	movs	r1, #0
   1be38:	0018      	movs	r0, r3
   1be3a:	4b2f      	ldr	r3, [pc, #188]	; (1bef8 <dir_register+0x358>)
   1be3c:	4798      	blx	r3
   1be3e:	0003      	movs	r3, r0
   1be40:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   1be42:	232f      	movs	r3, #47	; 0x2f
   1be44:	18fb      	adds	r3, r7, r3
   1be46:	781b      	ldrb	r3, [r3, #0]
   1be48:	2b00      	cmp	r3, #0
   1be4a:	d10d      	bne.n	1be68 <dir_register+0x2c8>
   1be4c:	232a      	movs	r3, #42	; 0x2a
   1be4e:	18fb      	adds	r3, r7, r3
   1be50:	222a      	movs	r2, #42	; 0x2a
   1be52:	18ba      	adds	r2, r7, r2
   1be54:	8812      	ldrh	r2, [r2, #0]
   1be56:	3a01      	subs	r2, #1
   1be58:	801a      	strh	r2, [r3, #0]
   1be5a:	232a      	movs	r3, #42	; 0x2a
   1be5c:	18fb      	adds	r3, r7, r3
   1be5e:	881b      	ldrh	r3, [r3, #0]
   1be60:	2b00      	cmp	r3, #0
   1be62:	d1c3      	bne.n	1bdec <dir_register+0x24c>
   1be64:	e000      	b.n	1be68 <dir_register+0x2c8>
				if (res != FR_OK) break;
   1be66:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   1be68:	232f      	movs	r3, #47	; 0x2f
   1be6a:	18fb      	adds	r3, r7, r3
   1be6c:	781b      	ldrb	r3, [r3, #0]
   1be6e:	2b00      	cmp	r3, #0
   1be70:	d12f      	bne.n	1bed2 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   1be72:	687b      	ldr	r3, [r7, #4]
   1be74:	681a      	ldr	r2, [r3, #0]
   1be76:	687b      	ldr	r3, [r7, #4]
   1be78:	691b      	ldr	r3, [r3, #16]
   1be7a:	212f      	movs	r1, #47	; 0x2f
   1be7c:	187c      	adds	r4, r7, r1
   1be7e:	0019      	movs	r1, r3
   1be80:	0010      	movs	r0, r2
   1be82:	4b1c      	ldr	r3, [pc, #112]	; (1bef4 <dir_register+0x354>)
   1be84:	4798      	blx	r3
   1be86:	0003      	movs	r3, r0
   1be88:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   1be8a:	232f      	movs	r3, #47	; 0x2f
   1be8c:	18fb      	adds	r3, r7, r3
   1be8e:	781b      	ldrb	r3, [r3, #0]
   1be90:	2b00      	cmp	r3, #0
   1be92:	d11e      	bne.n	1bed2 <dir_register+0x332>
			dir = dj->dir;
   1be94:	687b      	ldr	r3, [r7, #4]
   1be96:	695b      	ldr	r3, [r3, #20]
   1be98:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   1be9a:	69bb      	ldr	r3, [r7, #24]
   1be9c:	2220      	movs	r2, #32
   1be9e:	2100      	movs	r1, #0
   1bea0:	0018      	movs	r0, r3
   1bea2:	4b18      	ldr	r3, [pc, #96]	; (1bf04 <dir_register+0x364>)
   1bea4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   1bea6:	687b      	ldr	r3, [r7, #4]
   1bea8:	6999      	ldr	r1, [r3, #24]
   1beaa:	69bb      	ldr	r3, [r7, #24]
   1beac:	220b      	movs	r2, #11
   1beae:	0018      	movs	r0, r3
   1beb0:	4b0b      	ldr	r3, [pc, #44]	; (1bee0 <dir_register+0x340>)
   1beb2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   1beb4:	69bb      	ldr	r3, [r7, #24]
   1beb6:	330c      	adds	r3, #12
   1beb8:	001a      	movs	r2, r3
   1beba:	687b      	ldr	r3, [r7, #4]
   1bebc:	699b      	ldr	r3, [r3, #24]
   1bebe:	330b      	adds	r3, #11
   1bec0:	781b      	ldrb	r3, [r3, #0]
   1bec2:	2118      	movs	r1, #24
   1bec4:	400b      	ands	r3, r1
   1bec6:	b2db      	uxtb	r3, r3
   1bec8:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   1beca:	687b      	ldr	r3, [r7, #4]
   1becc:	681b      	ldr	r3, [r3, #0]
   1bece:	2201      	movs	r2, #1
   1bed0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   1bed2:	232f      	movs	r3, #47	; 0x2f
   1bed4:	18fb      	adds	r3, r7, r3
   1bed6:	781b      	ldrb	r3, [r3, #0]
}
   1bed8:	0018      	movs	r0, r3
   1beda:	46bd      	mov	sp, r7
   1bedc:	b00d      	add	sp, #52	; 0x34
   1bede:	bd90      	pop	{r4, r7, pc}
   1bee0:	0001a9f9 	.word	0x0001a9f9
   1bee4:	0001b855 	.word	0x0001b855
   1bee8:	0001b9a5 	.word	0x0001b9a5
   1beec:	00021e11 	.word	0x00021e11
   1bef0:	0001b321 	.word	0x0001b321
   1bef4:	0001aadd 	.word	0x0001aadd
   1bef8:	0001b451 	.word	0x0001b451
   1befc:	0001b955 	.word	0x0001b955
   1bf00:	0001b745 	.word	0x0001b745
   1bf04:	0001aa31 	.word	0x0001aa31

0001bf08 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   1bf08:	b590      	push	{r4, r7, lr}
   1bf0a:	b08b      	sub	sp, #44	; 0x2c
   1bf0c:	af00      	add	r7, sp, #0
   1bf0e:	6078      	str	r0, [r7, #4]
   1bf10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1bf12:	683b      	ldr	r3, [r7, #0]
   1bf14:	681b      	ldr	r3, [r3, #0]
   1bf16:	613b      	str	r3, [r7, #16]
   1bf18:	e002      	b.n	1bf20 <create_name+0x18>
   1bf1a:	693b      	ldr	r3, [r7, #16]
   1bf1c:	3301      	adds	r3, #1
   1bf1e:	613b      	str	r3, [r7, #16]
   1bf20:	693b      	ldr	r3, [r7, #16]
   1bf22:	781b      	ldrb	r3, [r3, #0]
   1bf24:	2b2f      	cmp	r3, #47	; 0x2f
   1bf26:	d0f8      	beq.n	1bf1a <create_name+0x12>
   1bf28:	693b      	ldr	r3, [r7, #16]
   1bf2a:	781b      	ldrb	r3, [r3, #0]
   1bf2c:	2b5c      	cmp	r3, #92	; 0x5c
   1bf2e:	d0f4      	beq.n	1bf1a <create_name+0x12>
	lfn = dj->lfn;
   1bf30:	687b      	ldr	r3, [r7, #4]
   1bf32:	69db      	ldr	r3, [r3, #28]
   1bf34:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   1bf36:	2300      	movs	r3, #0
   1bf38:	617b      	str	r3, [r7, #20]
   1bf3a:	697b      	ldr	r3, [r7, #20]
   1bf3c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   1bf3e:	69bb      	ldr	r3, [r7, #24]
   1bf40:	1c5a      	adds	r2, r3, #1
   1bf42:	61ba      	str	r2, [r7, #24]
   1bf44:	693a      	ldr	r2, [r7, #16]
   1bf46:	18d3      	adds	r3, r2, r3
   1bf48:	781a      	ldrb	r2, [r3, #0]
   1bf4a:	2324      	movs	r3, #36	; 0x24
   1bf4c:	18fb      	adds	r3, r7, r3
   1bf4e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1bf50:	2324      	movs	r3, #36	; 0x24
   1bf52:	18fb      	adds	r3, r7, r3
   1bf54:	881b      	ldrh	r3, [r3, #0]
   1bf56:	2b1f      	cmp	r3, #31
   1bf58:	d944      	bls.n	1bfe4 <create_name+0xdc>
   1bf5a:	2324      	movs	r3, #36	; 0x24
   1bf5c:	18fb      	adds	r3, r7, r3
   1bf5e:	881b      	ldrh	r3, [r3, #0]
   1bf60:	2b2f      	cmp	r3, #47	; 0x2f
   1bf62:	d03f      	beq.n	1bfe4 <create_name+0xdc>
   1bf64:	2324      	movs	r3, #36	; 0x24
   1bf66:	18fb      	adds	r3, r7, r3
   1bf68:	881b      	ldrh	r3, [r3, #0]
   1bf6a:	2b5c      	cmp	r3, #92	; 0x5c
   1bf6c:	d03a      	beq.n	1bfe4 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   1bf6e:	697b      	ldr	r3, [r7, #20]
   1bf70:	2bfe      	cmp	r3, #254	; 0xfe
   1bf72:	d901      	bls.n	1bf78 <create_name+0x70>
			return FR_INVALID_NAME;
   1bf74:	2306      	movs	r3, #6
   1bf76:	e1e7      	b.n	1c348 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   1bf78:	2324      	movs	r3, #36	; 0x24
   1bf7a:	18fb      	adds	r3, r7, r3
   1bf7c:	2224      	movs	r2, #36	; 0x24
   1bf7e:	18ba      	adds	r2, r7, r2
   1bf80:	8812      	ldrh	r2, [r2, #0]
   1bf82:	21ff      	movs	r1, #255	; 0xff
   1bf84:	400a      	ands	r2, r1
   1bf86:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   1bf88:	2324      	movs	r3, #36	; 0x24
   1bf8a:	18fc      	adds	r4, r7, r3
   1bf8c:	2324      	movs	r3, #36	; 0x24
   1bf8e:	18fb      	adds	r3, r7, r3
   1bf90:	881b      	ldrh	r3, [r3, #0]
   1bf92:	2101      	movs	r1, #1
   1bf94:	0018      	movs	r0, r3
   1bf96:	4bba      	ldr	r3, [pc, #744]	; (1c280 <create_name+0x378>)
   1bf98:	4798      	blx	r3
   1bf9a:	0003      	movs	r3, r0
   1bf9c:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1bf9e:	2324      	movs	r3, #36	; 0x24
   1bfa0:	18fb      	adds	r3, r7, r3
   1bfa2:	881b      	ldrh	r3, [r3, #0]
   1bfa4:	2b00      	cmp	r3, #0
   1bfa6:	d101      	bne.n	1bfac <create_name+0xa4>
   1bfa8:	2306      	movs	r3, #6
   1bfaa:	e1cd      	b.n	1c348 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1bfac:	2324      	movs	r3, #36	; 0x24
   1bfae:	18fb      	adds	r3, r7, r3
   1bfb0:	881b      	ldrh	r3, [r3, #0]
   1bfb2:	2b7f      	cmp	r3, #127	; 0x7f
   1bfb4:	d80b      	bhi.n	1bfce <create_name+0xc6>
   1bfb6:	2324      	movs	r3, #36	; 0x24
   1bfb8:	18fb      	adds	r3, r7, r3
   1bfba:	881a      	ldrh	r2, [r3, #0]
   1bfbc:	4bb1      	ldr	r3, [pc, #708]	; (1c284 <create_name+0x37c>)
   1bfbe:	0011      	movs	r1, r2
   1bfc0:	0018      	movs	r0, r3
   1bfc2:	4bb1      	ldr	r3, [pc, #708]	; (1c288 <create_name+0x380>)
   1bfc4:	4798      	blx	r3
   1bfc6:	1e03      	subs	r3, r0, #0
   1bfc8:	d001      	beq.n	1bfce <create_name+0xc6>
			return FR_INVALID_NAME;
   1bfca:	2306      	movs	r3, #6
   1bfcc:	e1bc      	b.n	1c348 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   1bfce:	697b      	ldr	r3, [r7, #20]
   1bfd0:	1c5a      	adds	r2, r3, #1
   1bfd2:	617a      	str	r2, [r7, #20]
   1bfd4:	005b      	lsls	r3, r3, #1
   1bfd6:	68fa      	ldr	r2, [r7, #12]
   1bfd8:	18d3      	adds	r3, r2, r3
   1bfda:	2224      	movs	r2, #36	; 0x24
   1bfdc:	18ba      	adds	r2, r7, r2
   1bfde:	8812      	ldrh	r2, [r2, #0]
   1bfe0:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   1bfe2:	e7ac      	b.n	1bf3e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   1bfe4:	693a      	ldr	r2, [r7, #16]
   1bfe6:	69bb      	ldr	r3, [r7, #24]
   1bfe8:	18d2      	adds	r2, r2, r3
   1bfea:	683b      	ldr	r3, [r7, #0]
   1bfec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1bfee:	2324      	movs	r3, #36	; 0x24
   1bff0:	18fb      	adds	r3, r7, r3
   1bff2:	881b      	ldrh	r3, [r3, #0]
   1bff4:	2b1f      	cmp	r3, #31
   1bff6:	d801      	bhi.n	1bffc <create_name+0xf4>
   1bff8:	2204      	movs	r2, #4
   1bffa:	e000      	b.n	1bffe <create_name+0xf6>
   1bffc:	2200      	movs	r2, #0
   1bffe:	2326      	movs	r3, #38	; 0x26
   1c000:	18fb      	adds	r3, r7, r3
   1c002:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   1c004:	e017      	b.n	1c036 <create_name+0x12e>
		w = lfn[di-1];
   1c006:	697b      	ldr	r3, [r7, #20]
   1c008:	4aa0      	ldr	r2, [pc, #640]	; (1c28c <create_name+0x384>)
   1c00a:	4694      	mov	ip, r2
   1c00c:	4463      	add	r3, ip
   1c00e:	005b      	lsls	r3, r3, #1
   1c010:	68fa      	ldr	r2, [r7, #12]
   1c012:	18d2      	adds	r2, r2, r3
   1c014:	2324      	movs	r3, #36	; 0x24
   1c016:	18fb      	adds	r3, r7, r3
   1c018:	8812      	ldrh	r2, [r2, #0]
   1c01a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   1c01c:	2324      	movs	r3, #36	; 0x24
   1c01e:	18fb      	adds	r3, r7, r3
   1c020:	881b      	ldrh	r3, [r3, #0]
   1c022:	2b20      	cmp	r3, #32
   1c024:	d004      	beq.n	1c030 <create_name+0x128>
   1c026:	2324      	movs	r3, #36	; 0x24
   1c028:	18fb      	adds	r3, r7, r3
   1c02a:	881b      	ldrh	r3, [r3, #0]
   1c02c:	2b2e      	cmp	r3, #46	; 0x2e
   1c02e:	d106      	bne.n	1c03e <create_name+0x136>
		di--;
   1c030:	697b      	ldr	r3, [r7, #20]
   1c032:	3b01      	subs	r3, #1
   1c034:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   1c036:	697b      	ldr	r3, [r7, #20]
   1c038:	2b00      	cmp	r3, #0
   1c03a:	d1e4      	bne.n	1c006 <create_name+0xfe>
   1c03c:	e000      	b.n	1c040 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   1c03e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1c040:	697b      	ldr	r3, [r7, #20]
   1c042:	2b00      	cmp	r3, #0
   1c044:	d101      	bne.n	1c04a <create_name+0x142>
   1c046:	2306      	movs	r3, #6
   1c048:	e17e      	b.n	1c348 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   1c04a:	697b      	ldr	r3, [r7, #20]
   1c04c:	005b      	lsls	r3, r3, #1
   1c04e:	68fa      	ldr	r2, [r7, #12]
   1c050:	18d3      	adds	r3, r2, r3
   1c052:	2200      	movs	r2, #0
   1c054:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   1c056:	687b      	ldr	r3, [r7, #4]
   1c058:	699b      	ldr	r3, [r3, #24]
   1c05a:	220b      	movs	r2, #11
   1c05c:	2120      	movs	r1, #32
   1c05e:	0018      	movs	r0, r3
   1c060:	4b8b      	ldr	r3, [pc, #556]	; (1c290 <create_name+0x388>)
   1c062:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   1c064:	2300      	movs	r3, #0
   1c066:	61bb      	str	r3, [r7, #24]
   1c068:	e002      	b.n	1c070 <create_name+0x168>
   1c06a:	69bb      	ldr	r3, [r7, #24]
   1c06c:	3301      	adds	r3, #1
   1c06e:	61bb      	str	r3, [r7, #24]
   1c070:	69bb      	ldr	r3, [r7, #24]
   1c072:	005b      	lsls	r3, r3, #1
   1c074:	68fa      	ldr	r2, [r7, #12]
   1c076:	18d3      	adds	r3, r2, r3
   1c078:	881b      	ldrh	r3, [r3, #0]
   1c07a:	2b20      	cmp	r3, #32
   1c07c:	d0f5      	beq.n	1c06a <create_name+0x162>
   1c07e:	69bb      	ldr	r3, [r7, #24]
   1c080:	005b      	lsls	r3, r3, #1
   1c082:	68fa      	ldr	r2, [r7, #12]
   1c084:	18d3      	adds	r3, r2, r3
   1c086:	881b      	ldrh	r3, [r3, #0]
   1c088:	2b2e      	cmp	r3, #46	; 0x2e
   1c08a:	d0ee      	beq.n	1c06a <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   1c08c:	69bb      	ldr	r3, [r7, #24]
   1c08e:	2b00      	cmp	r3, #0
   1c090:	d00b      	beq.n	1c0aa <create_name+0x1a2>
   1c092:	2326      	movs	r3, #38	; 0x26
   1c094:	18fb      	adds	r3, r7, r3
   1c096:	2226      	movs	r2, #38	; 0x26
   1c098:	18ba      	adds	r2, r7, r2
   1c09a:	7812      	ldrb	r2, [r2, #0]
   1c09c:	2103      	movs	r1, #3
   1c09e:	430a      	orrs	r2, r1
   1c0a0:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1c0a2:	e002      	b.n	1c0aa <create_name+0x1a2>
   1c0a4:	697b      	ldr	r3, [r7, #20]
   1c0a6:	3b01      	subs	r3, #1
   1c0a8:	617b      	str	r3, [r7, #20]
   1c0aa:	697b      	ldr	r3, [r7, #20]
   1c0ac:	2b00      	cmp	r3, #0
   1c0ae:	d009      	beq.n	1c0c4 <create_name+0x1bc>
   1c0b0:	697b      	ldr	r3, [r7, #20]
   1c0b2:	4a76      	ldr	r2, [pc, #472]	; (1c28c <create_name+0x384>)
   1c0b4:	4694      	mov	ip, r2
   1c0b6:	4463      	add	r3, ip
   1c0b8:	005b      	lsls	r3, r3, #1
   1c0ba:	68fa      	ldr	r2, [r7, #12]
   1c0bc:	18d3      	adds	r3, r2, r3
   1c0be:	881b      	ldrh	r3, [r3, #0]
   1c0c0:	2b2e      	cmp	r3, #46	; 0x2e
   1c0c2:	d1ef      	bne.n	1c0a4 <create_name+0x19c>

	b = i = 0; ni = 8;
   1c0c4:	2300      	movs	r3, #0
   1c0c6:	623b      	str	r3, [r7, #32]
   1c0c8:	2327      	movs	r3, #39	; 0x27
   1c0ca:	18fb      	adds	r3, r7, r3
   1c0cc:	2200      	movs	r2, #0
   1c0ce:	701a      	strb	r2, [r3, #0]
   1c0d0:	2308      	movs	r3, #8
   1c0d2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   1c0d4:	69bb      	ldr	r3, [r7, #24]
   1c0d6:	1c5a      	adds	r2, r3, #1
   1c0d8:	61ba      	str	r2, [r7, #24]
   1c0da:	005b      	lsls	r3, r3, #1
   1c0dc:	68fa      	ldr	r2, [r7, #12]
   1c0de:	18d2      	adds	r2, r2, r3
   1c0e0:	2324      	movs	r3, #36	; 0x24
   1c0e2:	18fb      	adds	r3, r7, r3
   1c0e4:	8812      	ldrh	r2, [r2, #0]
   1c0e6:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   1c0e8:	2324      	movs	r3, #36	; 0x24
   1c0ea:	18fb      	adds	r3, r7, r3
   1c0ec:	881b      	ldrh	r3, [r3, #0]
   1c0ee:	2b00      	cmp	r3, #0
   1c0f0:	d100      	bne.n	1c0f4 <create_name+0x1ec>
   1c0f2:	e0c3      	b.n	1c27c <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1c0f4:	2324      	movs	r3, #36	; 0x24
   1c0f6:	18fb      	adds	r3, r7, r3
   1c0f8:	881b      	ldrh	r3, [r3, #0]
   1c0fa:	2b20      	cmp	r3, #32
   1c0fc:	d008      	beq.n	1c110 <create_name+0x208>
   1c0fe:	2324      	movs	r3, #36	; 0x24
   1c100:	18fb      	adds	r3, r7, r3
   1c102:	881b      	ldrh	r3, [r3, #0]
   1c104:	2b2e      	cmp	r3, #46	; 0x2e
   1c106:	d10c      	bne.n	1c122 <create_name+0x21a>
   1c108:	69ba      	ldr	r2, [r7, #24]
   1c10a:	697b      	ldr	r3, [r7, #20]
   1c10c:	429a      	cmp	r2, r3
   1c10e:	d008      	beq.n	1c122 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   1c110:	2326      	movs	r3, #38	; 0x26
   1c112:	18fb      	adds	r3, r7, r3
   1c114:	2226      	movs	r2, #38	; 0x26
   1c116:	18ba      	adds	r2, r7, r2
   1c118:	7812      	ldrb	r2, [r2, #0]
   1c11a:	2103      	movs	r1, #3
   1c11c:	430a      	orrs	r2, r1
   1c11e:	701a      	strb	r2, [r3, #0]
   1c120:	e0ab      	b.n	1c27a <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1c122:	6a3a      	ldr	r2, [r7, #32]
   1c124:	69fb      	ldr	r3, [r7, #28]
   1c126:	429a      	cmp	r2, r3
   1c128:	d203      	bcs.n	1c132 <create_name+0x22a>
   1c12a:	69ba      	ldr	r2, [r7, #24]
   1c12c:	697b      	ldr	r3, [r7, #20]
   1c12e:	429a      	cmp	r2, r3
   1c130:	d12a      	bne.n	1c188 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   1c132:	69fb      	ldr	r3, [r7, #28]
   1c134:	2b0b      	cmp	r3, #11
   1c136:	d108      	bne.n	1c14a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   1c138:	2326      	movs	r3, #38	; 0x26
   1c13a:	18fb      	adds	r3, r7, r3
   1c13c:	2226      	movs	r2, #38	; 0x26
   1c13e:	18ba      	adds	r2, r7, r2
   1c140:	7812      	ldrb	r2, [r2, #0]
   1c142:	2103      	movs	r1, #3
   1c144:	430a      	orrs	r2, r1
   1c146:	701a      	strb	r2, [r3, #0]
   1c148:	e0a9      	b.n	1c29e <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   1c14a:	69ba      	ldr	r2, [r7, #24]
   1c14c:	697b      	ldr	r3, [r7, #20]
   1c14e:	429a      	cmp	r2, r3
   1c150:	d007      	beq.n	1c162 <create_name+0x25a>
   1c152:	2326      	movs	r3, #38	; 0x26
   1c154:	18fb      	adds	r3, r7, r3
   1c156:	2226      	movs	r2, #38	; 0x26
   1c158:	18ba      	adds	r2, r7, r2
   1c15a:	7812      	ldrb	r2, [r2, #0]
   1c15c:	2103      	movs	r1, #3
   1c15e:	430a      	orrs	r2, r1
   1c160:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   1c162:	69ba      	ldr	r2, [r7, #24]
   1c164:	697b      	ldr	r3, [r7, #20]
   1c166:	429a      	cmp	r2, r3
   1c168:	d900      	bls.n	1c16c <create_name+0x264>
   1c16a:	e097      	b.n	1c29c <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   1c16c:	697b      	ldr	r3, [r7, #20]
   1c16e:	61bb      	str	r3, [r7, #24]
   1c170:	2308      	movs	r3, #8
   1c172:	623b      	str	r3, [r7, #32]
   1c174:	230b      	movs	r3, #11
   1c176:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   1c178:	2327      	movs	r3, #39	; 0x27
   1c17a:	18fb      	adds	r3, r7, r3
   1c17c:	2227      	movs	r2, #39	; 0x27
   1c17e:	18ba      	adds	r2, r7, r2
   1c180:	7812      	ldrb	r2, [r2, #0]
   1c182:	0092      	lsls	r2, r2, #2
   1c184:	701a      	strb	r2, [r3, #0]
   1c186:	e078      	b.n	1c27a <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   1c188:	2324      	movs	r3, #36	; 0x24
   1c18a:	18fb      	adds	r3, r7, r3
   1c18c:	881b      	ldrh	r3, [r3, #0]
   1c18e:	2b7f      	cmp	r3, #127	; 0x7f
   1c190:	d920      	bls.n	1c1d4 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1c192:	2324      	movs	r3, #36	; 0x24
   1c194:	18fc      	adds	r4, r7, r3
   1c196:	2324      	movs	r3, #36	; 0x24
   1c198:	18fb      	adds	r3, r7, r3
   1c19a:	881b      	ldrh	r3, [r3, #0]
   1c19c:	2100      	movs	r1, #0
   1c19e:	0018      	movs	r0, r3
   1c1a0:	4b37      	ldr	r3, [pc, #220]	; (1c280 <create_name+0x378>)
   1c1a2:	4798      	blx	r3
   1c1a4:	0003      	movs	r3, r0
   1c1a6:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   1c1a8:	2324      	movs	r3, #36	; 0x24
   1c1aa:	18fb      	adds	r3, r7, r3
   1c1ac:	881b      	ldrh	r3, [r3, #0]
   1c1ae:	2b00      	cmp	r3, #0
   1c1b0:	d008      	beq.n	1c1c4 <create_name+0x2bc>
   1c1b2:	2324      	movs	r3, #36	; 0x24
   1c1b4:	18fb      	adds	r3, r7, r3
   1c1b6:	881b      	ldrh	r3, [r3, #0]
   1c1b8:	3b80      	subs	r3, #128	; 0x80
   1c1ba:	4a36      	ldr	r2, [pc, #216]	; (1c294 <create_name+0x38c>)
   1c1bc:	5cd2      	ldrb	r2, [r2, r3]
   1c1be:	2324      	movs	r3, #36	; 0x24
   1c1c0:	18fb      	adds	r3, r7, r3
   1c1c2:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   1c1c4:	2326      	movs	r3, #38	; 0x26
   1c1c6:	18fb      	adds	r3, r7, r3
   1c1c8:	2226      	movs	r2, #38	; 0x26
   1c1ca:	18ba      	adds	r2, r7, r2
   1c1cc:	7812      	ldrb	r2, [r2, #0]
   1c1ce:	2102      	movs	r1, #2
   1c1d0:	430a      	orrs	r2, r1
   1c1d2:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   1c1d4:	2324      	movs	r3, #36	; 0x24
   1c1d6:	18fb      	adds	r3, r7, r3
   1c1d8:	881b      	ldrh	r3, [r3, #0]
   1c1da:	2b00      	cmp	r3, #0
   1c1dc:	d009      	beq.n	1c1f2 <create_name+0x2ea>
   1c1de:	2324      	movs	r3, #36	; 0x24
   1c1e0:	18fb      	adds	r3, r7, r3
   1c1e2:	881a      	ldrh	r2, [r3, #0]
   1c1e4:	4b2c      	ldr	r3, [pc, #176]	; (1c298 <create_name+0x390>)
   1c1e6:	0011      	movs	r1, r2
   1c1e8:	0018      	movs	r0, r3
   1c1ea:	4b27      	ldr	r3, [pc, #156]	; (1c288 <create_name+0x380>)
   1c1ec:	4798      	blx	r3
   1c1ee:	1e03      	subs	r3, r0, #0
   1c1f0:	d00c      	beq.n	1c20c <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1c1f2:	2324      	movs	r3, #36	; 0x24
   1c1f4:	18fb      	adds	r3, r7, r3
   1c1f6:	225f      	movs	r2, #95	; 0x5f
   1c1f8:	801a      	strh	r2, [r3, #0]
   1c1fa:	2326      	movs	r3, #38	; 0x26
   1c1fc:	18fb      	adds	r3, r7, r3
   1c1fe:	2226      	movs	r2, #38	; 0x26
   1c200:	18ba      	adds	r2, r7, r2
   1c202:	7812      	ldrb	r2, [r2, #0]
   1c204:	2103      	movs	r1, #3
   1c206:	430a      	orrs	r2, r1
   1c208:	701a      	strb	r2, [r3, #0]
   1c20a:	e02b      	b.n	1c264 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   1c20c:	2324      	movs	r3, #36	; 0x24
   1c20e:	18fb      	adds	r3, r7, r3
   1c210:	881b      	ldrh	r3, [r3, #0]
   1c212:	2b40      	cmp	r3, #64	; 0x40
   1c214:	d90d      	bls.n	1c232 <create_name+0x32a>
   1c216:	2324      	movs	r3, #36	; 0x24
   1c218:	18fb      	adds	r3, r7, r3
   1c21a:	881b      	ldrh	r3, [r3, #0]
   1c21c:	2b5a      	cmp	r3, #90	; 0x5a
   1c21e:	d808      	bhi.n	1c232 <create_name+0x32a>
					b |= 2;
   1c220:	2327      	movs	r3, #39	; 0x27
   1c222:	18fb      	adds	r3, r7, r3
   1c224:	2227      	movs	r2, #39	; 0x27
   1c226:	18ba      	adds	r2, r7, r2
   1c228:	7812      	ldrb	r2, [r2, #0]
   1c22a:	2102      	movs	r1, #2
   1c22c:	430a      	orrs	r2, r1
   1c22e:	701a      	strb	r2, [r3, #0]
   1c230:	e018      	b.n	1c264 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   1c232:	2324      	movs	r3, #36	; 0x24
   1c234:	18fb      	adds	r3, r7, r3
   1c236:	881b      	ldrh	r3, [r3, #0]
   1c238:	2b60      	cmp	r3, #96	; 0x60
   1c23a:	d913      	bls.n	1c264 <create_name+0x35c>
   1c23c:	2324      	movs	r3, #36	; 0x24
   1c23e:	18fb      	adds	r3, r7, r3
   1c240:	881b      	ldrh	r3, [r3, #0]
   1c242:	2b7a      	cmp	r3, #122	; 0x7a
   1c244:	d80e      	bhi.n	1c264 <create_name+0x35c>
						b |= 1; w -= 0x20;
   1c246:	2327      	movs	r3, #39	; 0x27
   1c248:	18fb      	adds	r3, r7, r3
   1c24a:	2227      	movs	r2, #39	; 0x27
   1c24c:	18ba      	adds	r2, r7, r2
   1c24e:	7812      	ldrb	r2, [r2, #0]
   1c250:	2101      	movs	r1, #1
   1c252:	430a      	orrs	r2, r1
   1c254:	701a      	strb	r2, [r3, #0]
   1c256:	2324      	movs	r3, #36	; 0x24
   1c258:	18fb      	adds	r3, r7, r3
   1c25a:	2224      	movs	r2, #36	; 0x24
   1c25c:	18ba      	adds	r2, r7, r2
   1c25e:	8812      	ldrh	r2, [r2, #0]
   1c260:	3a20      	subs	r2, #32
   1c262:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   1c264:	687b      	ldr	r3, [r7, #4]
   1c266:	699a      	ldr	r2, [r3, #24]
   1c268:	6a3b      	ldr	r3, [r7, #32]
   1c26a:	1c59      	adds	r1, r3, #1
   1c26c:	6239      	str	r1, [r7, #32]
   1c26e:	18d3      	adds	r3, r2, r3
   1c270:	2224      	movs	r2, #36	; 0x24
   1c272:	18ba      	adds	r2, r7, r2
   1c274:	8812      	ldrh	r2, [r2, #0]
   1c276:	b2d2      	uxtb	r2, r2
   1c278:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   1c27a:	e72b      	b.n	1c0d4 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   1c27c:	46c0      	nop			; (mov r8, r8)
   1c27e:	e00e      	b.n	1c29e <create_name+0x396>
   1c280:	0001d641 	.word	0x0001d641
   1c284:	0002942c 	.word	0x0002942c
   1c288:	0001aaab 	.word	0x0001aaab
   1c28c:	7fffffff 	.word	0x7fffffff
   1c290:	0001aa31 	.word	0x0001aa31
   1c294:	00029474 	.word	0x00029474
   1c298:	00029438 	.word	0x00029438
			if (si > di) break;			/* No extension */
   1c29c:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   1c29e:	687b      	ldr	r3, [r7, #4]
   1c2a0:	699b      	ldr	r3, [r3, #24]
   1c2a2:	781b      	ldrb	r3, [r3, #0]
   1c2a4:	2be5      	cmp	r3, #229	; 0xe5
   1c2a6:	d103      	bne.n	1c2b0 <create_name+0x3a8>
   1c2a8:	687b      	ldr	r3, [r7, #4]
   1c2aa:	699b      	ldr	r3, [r3, #24]
   1c2ac:	2205      	movs	r2, #5
   1c2ae:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   1c2b0:	69fb      	ldr	r3, [r7, #28]
   1c2b2:	2b08      	cmp	r3, #8
   1c2b4:	d106      	bne.n	1c2c4 <create_name+0x3bc>
   1c2b6:	2327      	movs	r3, #39	; 0x27
   1c2b8:	18fb      	adds	r3, r7, r3
   1c2ba:	2227      	movs	r2, #39	; 0x27
   1c2bc:	18ba      	adds	r2, r7, r2
   1c2be:	7812      	ldrb	r2, [r2, #0]
   1c2c0:	0092      	lsls	r2, r2, #2
   1c2c2:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   1c2c4:	2327      	movs	r3, #39	; 0x27
   1c2c6:	18fb      	adds	r3, r7, r3
   1c2c8:	781b      	ldrb	r3, [r3, #0]
   1c2ca:	220c      	movs	r2, #12
   1c2cc:	4013      	ands	r3, r2
   1c2ce:	2b0c      	cmp	r3, #12
   1c2d0:	d006      	beq.n	1c2e0 <create_name+0x3d8>
   1c2d2:	2327      	movs	r3, #39	; 0x27
   1c2d4:	18fb      	adds	r3, r7, r3
   1c2d6:	781b      	ldrb	r3, [r3, #0]
   1c2d8:	2203      	movs	r2, #3
   1c2da:	4013      	ands	r3, r2
   1c2dc:	2b03      	cmp	r3, #3
   1c2de:	d107      	bne.n	1c2f0 <create_name+0x3e8>
		cf |= NS_LFN;
   1c2e0:	2326      	movs	r3, #38	; 0x26
   1c2e2:	18fb      	adds	r3, r7, r3
   1c2e4:	2226      	movs	r2, #38	; 0x26
   1c2e6:	18ba      	adds	r2, r7, r2
   1c2e8:	7812      	ldrb	r2, [r2, #0]
   1c2ea:	2102      	movs	r1, #2
   1c2ec:	430a      	orrs	r2, r1
   1c2ee:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   1c2f0:	2326      	movs	r3, #38	; 0x26
   1c2f2:	18fb      	adds	r3, r7, r3
   1c2f4:	781b      	ldrb	r3, [r3, #0]
   1c2f6:	2202      	movs	r2, #2
   1c2f8:	4013      	ands	r3, r2
   1c2fa:	d11d      	bne.n	1c338 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1c2fc:	2327      	movs	r3, #39	; 0x27
   1c2fe:	18fb      	adds	r3, r7, r3
   1c300:	781b      	ldrb	r3, [r3, #0]
   1c302:	2203      	movs	r2, #3
   1c304:	4013      	ands	r3, r2
   1c306:	2b01      	cmp	r3, #1
   1c308:	d107      	bne.n	1c31a <create_name+0x412>
   1c30a:	2326      	movs	r3, #38	; 0x26
   1c30c:	18fb      	adds	r3, r7, r3
   1c30e:	2226      	movs	r2, #38	; 0x26
   1c310:	18ba      	adds	r2, r7, r2
   1c312:	7812      	ldrb	r2, [r2, #0]
   1c314:	2110      	movs	r1, #16
   1c316:	430a      	orrs	r2, r1
   1c318:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1c31a:	2327      	movs	r3, #39	; 0x27
   1c31c:	18fb      	adds	r3, r7, r3
   1c31e:	781b      	ldrb	r3, [r3, #0]
   1c320:	220c      	movs	r2, #12
   1c322:	4013      	ands	r3, r2
   1c324:	2b04      	cmp	r3, #4
   1c326:	d107      	bne.n	1c338 <create_name+0x430>
   1c328:	2326      	movs	r3, #38	; 0x26
   1c32a:	18fb      	adds	r3, r7, r3
   1c32c:	2226      	movs	r2, #38	; 0x26
   1c32e:	18ba      	adds	r2, r7, r2
   1c330:	7812      	ldrb	r2, [r2, #0]
   1c332:	2108      	movs	r1, #8
   1c334:	430a      	orrs	r2, r1
   1c336:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   1c338:	687b      	ldr	r3, [r7, #4]
   1c33a:	699b      	ldr	r3, [r3, #24]
   1c33c:	330b      	adds	r3, #11
   1c33e:	2226      	movs	r2, #38	; 0x26
   1c340:	18ba      	adds	r2, r7, r2
   1c342:	7812      	ldrb	r2, [r2, #0]
   1c344:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   1c346:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   1c348:	0018      	movs	r0, r3
   1c34a:	46bd      	mov	sp, r7
   1c34c:	b00b      	add	sp, #44	; 0x2c
   1c34e:	bd90      	pop	{r4, r7, pc}

0001c350 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   1c350:	b590      	push	{r4, r7, lr}
   1c352:	b085      	sub	sp, #20
   1c354:	af00      	add	r7, sp, #0
   1c356:	6078      	str	r0, [r7, #4]
   1c358:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   1c35a:	683b      	ldr	r3, [r7, #0]
   1c35c:	781b      	ldrb	r3, [r3, #0]
   1c35e:	2b2f      	cmp	r3, #47	; 0x2f
   1c360:	d003      	beq.n	1c36a <follow_path+0x1a>
   1c362:	683b      	ldr	r3, [r7, #0]
   1c364:	781b      	ldrb	r3, [r3, #0]
   1c366:	2b5c      	cmp	r3, #92	; 0x5c
   1c368:	d102      	bne.n	1c370 <follow_path+0x20>
		path++;
   1c36a:	683b      	ldr	r3, [r7, #0]
   1c36c:	3301      	adds	r3, #1
   1c36e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   1c370:	687b      	ldr	r3, [r7, #4]
   1c372:	2200      	movs	r2, #0
   1c374:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   1c376:	683b      	ldr	r3, [r7, #0]
   1c378:	781b      	ldrb	r3, [r3, #0]
   1c37a:	2b1f      	cmp	r3, #31
   1c37c:	d80c      	bhi.n	1c398 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   1c37e:	230f      	movs	r3, #15
   1c380:	18fc      	adds	r4, r7, r3
   1c382:	687b      	ldr	r3, [r7, #4]
   1c384:	2100      	movs	r1, #0
   1c386:	0018      	movs	r0, r3
   1c388:	4b3c      	ldr	r3, [pc, #240]	; (1c47c <follow_path+0x12c>)
   1c38a:	4798      	blx	r3
   1c38c:	0003      	movs	r3, r0
   1c38e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   1c390:	687b      	ldr	r3, [r7, #4]
   1c392:	2200      	movs	r2, #0
   1c394:	615a      	str	r2, [r3, #20]
   1c396:	e06a      	b.n	1c46e <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   1c398:	230f      	movs	r3, #15
   1c39a:	18fc      	adds	r4, r7, r3
   1c39c:	003a      	movs	r2, r7
   1c39e:	687b      	ldr	r3, [r7, #4]
   1c3a0:	0011      	movs	r1, r2
   1c3a2:	0018      	movs	r0, r3
   1c3a4:	4b36      	ldr	r3, [pc, #216]	; (1c480 <follow_path+0x130>)
   1c3a6:	4798      	blx	r3
   1c3a8:	0003      	movs	r3, r0
   1c3aa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1c3ac:	230f      	movs	r3, #15
   1c3ae:	18fb      	adds	r3, r7, r3
   1c3b0:	781b      	ldrb	r3, [r3, #0]
   1c3b2:	2b00      	cmp	r3, #0
   1c3b4:	d154      	bne.n	1c460 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   1c3b6:	230f      	movs	r3, #15
   1c3b8:	18fc      	adds	r4, r7, r3
   1c3ba:	687b      	ldr	r3, [r7, #4]
   1c3bc:	0018      	movs	r0, r3
   1c3be:	4b31      	ldr	r3, [pc, #196]	; (1c484 <follow_path+0x134>)
   1c3c0:	4798      	blx	r3
   1c3c2:	0003      	movs	r3, r0
   1c3c4:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   1c3c6:	687b      	ldr	r3, [r7, #4]
   1c3c8:	699a      	ldr	r2, [r3, #24]
   1c3ca:	230e      	movs	r3, #14
   1c3cc:	18fb      	adds	r3, r7, r3
   1c3ce:	7ad2      	ldrb	r2, [r2, #11]
   1c3d0:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   1c3d2:	230f      	movs	r3, #15
   1c3d4:	18fb      	adds	r3, r7, r3
   1c3d6:	781b      	ldrb	r3, [r3, #0]
   1c3d8:	2b00      	cmp	r3, #0
   1c3da:	d00f      	beq.n	1c3fc <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1c3dc:	230f      	movs	r3, #15
   1c3de:	18fb      	adds	r3, r7, r3
   1c3e0:	781b      	ldrb	r3, [r3, #0]
   1c3e2:	2b04      	cmp	r3, #4
   1c3e4:	d13e      	bne.n	1c464 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   1c3e6:	230e      	movs	r3, #14
   1c3e8:	18fb      	adds	r3, r7, r3
   1c3ea:	781b      	ldrb	r3, [r3, #0]
   1c3ec:	2204      	movs	r2, #4
   1c3ee:	4013      	ands	r3, r2
   1c3f0:	d13a      	bne.n	1c468 <follow_path+0x118>
   1c3f2:	230f      	movs	r3, #15
   1c3f4:	18fb      	adds	r3, r7, r3
   1c3f6:	2205      	movs	r2, #5
   1c3f8:	701a      	strb	r2, [r3, #0]
				}
				break;
   1c3fa:	e035      	b.n	1c468 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1c3fc:	230e      	movs	r3, #14
   1c3fe:	18fb      	adds	r3, r7, r3
   1c400:	781b      	ldrb	r3, [r3, #0]
   1c402:	2204      	movs	r2, #4
   1c404:	4013      	ands	r3, r2
   1c406:	d131      	bne.n	1c46c <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   1c408:	687b      	ldr	r3, [r7, #4]
   1c40a:	695b      	ldr	r3, [r3, #20]
   1c40c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   1c40e:	68bb      	ldr	r3, [r7, #8]
   1c410:	330b      	adds	r3, #11
   1c412:	781b      	ldrb	r3, [r3, #0]
   1c414:	001a      	movs	r2, r3
   1c416:	2310      	movs	r3, #16
   1c418:	4013      	ands	r3, r2
   1c41a:	d104      	bne.n	1c426 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   1c41c:	230f      	movs	r3, #15
   1c41e:	18fb      	adds	r3, r7, r3
   1c420:	2205      	movs	r2, #5
   1c422:	701a      	strb	r2, [r3, #0]
   1c424:	e023      	b.n	1c46e <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   1c426:	68bb      	ldr	r3, [r7, #8]
   1c428:	3315      	adds	r3, #21
   1c42a:	781b      	ldrb	r3, [r3, #0]
   1c42c:	021b      	lsls	r3, r3, #8
   1c42e:	b21a      	sxth	r2, r3
   1c430:	68bb      	ldr	r3, [r7, #8]
   1c432:	3314      	adds	r3, #20
   1c434:	781b      	ldrb	r3, [r3, #0]
   1c436:	b21b      	sxth	r3, r3
   1c438:	4313      	orrs	r3, r2
   1c43a:	b21b      	sxth	r3, r3
   1c43c:	b29b      	uxth	r3, r3
   1c43e:	041b      	lsls	r3, r3, #16
   1c440:	68ba      	ldr	r2, [r7, #8]
   1c442:	321b      	adds	r2, #27
   1c444:	7812      	ldrb	r2, [r2, #0]
   1c446:	0212      	lsls	r2, r2, #8
   1c448:	b211      	sxth	r1, r2
   1c44a:	68ba      	ldr	r2, [r7, #8]
   1c44c:	321a      	adds	r2, #26
   1c44e:	7812      	ldrb	r2, [r2, #0]
   1c450:	b212      	sxth	r2, r2
   1c452:	430a      	orrs	r2, r1
   1c454:	b212      	sxth	r2, r2
   1c456:	b292      	uxth	r2, r2
   1c458:	431a      	orrs	r2, r3
   1c45a:	687b      	ldr	r3, [r7, #4]
   1c45c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   1c45e:	e79b      	b.n	1c398 <follow_path+0x48>
			if (res != FR_OK) break;
   1c460:	46c0      	nop			; (mov r8, r8)
   1c462:	e004      	b.n	1c46e <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1c464:	46c0      	nop			; (mov r8, r8)
   1c466:	e002      	b.n	1c46e <follow_path+0x11e>
				break;
   1c468:	46c0      	nop			; (mov r8, r8)
   1c46a:	e000      	b.n	1c46e <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1c46c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   1c46e:	230f      	movs	r3, #15
   1c470:	18fb      	adds	r3, r7, r3
   1c472:	781b      	ldrb	r3, [r3, #0]
}
   1c474:	0018      	movs	r0, r3
   1c476:	46bd      	mov	sp, r7
   1c478:	b005      	add	sp, #20
   1c47a:	bd90      	pop	{r4, r7, pc}
   1c47c:	0001b321 	.word	0x0001b321
   1c480:	0001bf09 	.word	0x0001bf09
   1c484:	0001b9a5 	.word	0x0001b9a5

0001c488 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   1c488:	b590      	push	{r4, r7, lr}
   1c48a:	b083      	sub	sp, #12
   1c48c:	af00      	add	r7, sp, #0
   1c48e:	6078      	str	r0, [r7, #4]
   1c490:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1c492:	687b      	ldr	r3, [r7, #4]
   1c494:	7858      	ldrb	r0, [r3, #1]
   1c496:	687b      	ldr	r3, [r7, #4]
   1c498:	3330      	adds	r3, #48	; 0x30
   1c49a:	0019      	movs	r1, r3
   1c49c:	683a      	ldr	r2, [r7, #0]
   1c49e:	2301      	movs	r3, #1
   1c4a0:	4c2a      	ldr	r4, [pc, #168]	; (1c54c <check_fs+0xc4>)
   1c4a2:	47a0      	blx	r4
   1c4a4:	1e03      	subs	r3, r0, #0
   1c4a6:	d001      	beq.n	1c4ac <check_fs+0x24>
		return 3;
   1c4a8:	2303      	movs	r3, #3
   1c4aa:	e04b      	b.n	1c544 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1c4ac:	687b      	ldr	r3, [r7, #4]
   1c4ae:	4a28      	ldr	r2, [pc, #160]	; (1c550 <check_fs+0xc8>)
   1c4b0:	4694      	mov	ip, r2
   1c4b2:	4463      	add	r3, ip
   1c4b4:	3301      	adds	r3, #1
   1c4b6:	781b      	ldrb	r3, [r3, #0]
   1c4b8:	021b      	lsls	r3, r3, #8
   1c4ba:	b21a      	sxth	r2, r3
   1c4bc:	687b      	ldr	r3, [r7, #4]
   1c4be:	4924      	ldr	r1, [pc, #144]	; (1c550 <check_fs+0xc8>)
   1c4c0:	5c5b      	ldrb	r3, [r3, r1]
   1c4c2:	b21b      	sxth	r3, r3
   1c4c4:	4313      	orrs	r3, r2
   1c4c6:	b21b      	sxth	r3, r3
   1c4c8:	4a22      	ldr	r2, [pc, #136]	; (1c554 <check_fs+0xcc>)
   1c4ca:	4293      	cmp	r3, r2
   1c4cc:	d001      	beq.n	1c4d2 <check_fs+0x4a>
		return 2;
   1c4ce:	2302      	movs	r3, #2
   1c4d0:	e038      	b.n	1c544 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1c4d2:	687b      	ldr	r3, [r7, #4]
   1c4d4:	3366      	adds	r3, #102	; 0x66
   1c4d6:	3303      	adds	r3, #3
   1c4d8:	781b      	ldrb	r3, [r3, #0]
   1c4da:	061a      	lsls	r2, r3, #24
   1c4dc:	687b      	ldr	r3, [r7, #4]
   1c4de:	3366      	adds	r3, #102	; 0x66
   1c4e0:	3302      	adds	r3, #2
   1c4e2:	781b      	ldrb	r3, [r3, #0]
   1c4e4:	041b      	lsls	r3, r3, #16
   1c4e6:	4313      	orrs	r3, r2
   1c4e8:	687a      	ldr	r2, [r7, #4]
   1c4ea:	3266      	adds	r2, #102	; 0x66
   1c4ec:	3201      	adds	r2, #1
   1c4ee:	7812      	ldrb	r2, [r2, #0]
   1c4f0:	0212      	lsls	r2, r2, #8
   1c4f2:	4313      	orrs	r3, r2
   1c4f4:	687a      	ldr	r2, [r7, #4]
   1c4f6:	2166      	movs	r1, #102	; 0x66
   1c4f8:	5c52      	ldrb	r2, [r2, r1]
   1c4fa:	4313      	orrs	r3, r2
   1c4fc:	021b      	lsls	r3, r3, #8
   1c4fe:	0a1b      	lsrs	r3, r3, #8
   1c500:	4a15      	ldr	r2, [pc, #84]	; (1c558 <check_fs+0xd0>)
   1c502:	4293      	cmp	r3, r2
   1c504:	d101      	bne.n	1c50a <check_fs+0x82>
		return 0;
   1c506:	2300      	movs	r3, #0
   1c508:	e01c      	b.n	1c544 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1c50a:	687b      	ldr	r3, [r7, #4]
   1c50c:	3382      	adds	r3, #130	; 0x82
   1c50e:	3303      	adds	r3, #3
   1c510:	781b      	ldrb	r3, [r3, #0]
   1c512:	061a      	lsls	r2, r3, #24
   1c514:	687b      	ldr	r3, [r7, #4]
   1c516:	3382      	adds	r3, #130	; 0x82
   1c518:	3302      	adds	r3, #2
   1c51a:	781b      	ldrb	r3, [r3, #0]
   1c51c:	041b      	lsls	r3, r3, #16
   1c51e:	4313      	orrs	r3, r2
   1c520:	687a      	ldr	r2, [r7, #4]
   1c522:	3282      	adds	r2, #130	; 0x82
   1c524:	3201      	adds	r2, #1
   1c526:	7812      	ldrb	r2, [r2, #0]
   1c528:	0212      	lsls	r2, r2, #8
   1c52a:	4313      	orrs	r3, r2
   1c52c:	687a      	ldr	r2, [r7, #4]
   1c52e:	2182      	movs	r1, #130	; 0x82
   1c530:	5c52      	ldrb	r2, [r2, r1]
   1c532:	4313      	orrs	r3, r2
   1c534:	021b      	lsls	r3, r3, #8
   1c536:	0a1b      	lsrs	r3, r3, #8
   1c538:	4a07      	ldr	r2, [pc, #28]	; (1c558 <check_fs+0xd0>)
   1c53a:	4293      	cmp	r3, r2
   1c53c:	d101      	bne.n	1c542 <check_fs+0xba>
		return 0;
   1c53e:	2300      	movs	r3, #0
   1c540:	e000      	b.n	1c544 <check_fs+0xbc>

	return 1;
   1c542:	2301      	movs	r3, #1
}
   1c544:	0018      	movs	r0, r3
   1c546:	46bd      	mov	sp, r7
   1c548:	b003      	add	sp, #12
   1c54a:	bd90      	pop	{r4, r7, pc}
   1c54c:	0001a6f1 	.word	0x0001a6f1
   1c550:	0000022e 	.word	0x0000022e
   1c554:	ffffaa55 	.word	0xffffaa55
   1c558:	00544146 	.word	0x00544146

0001c55c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   1c55c:	b590      	push	{r4, r7, lr}
   1c55e:	b093      	sub	sp, #76	; 0x4c
   1c560:	af00      	add	r7, sp, #0
   1c562:	60f8      	str	r0, [r7, #12]
   1c564:	60b9      	str	r1, [r7, #8]
   1c566:	1dfb      	adds	r3, r7, #7
   1c568:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   1c56a:	68fb      	ldr	r3, [r7, #12]
   1c56c:	681b      	ldr	r3, [r3, #0]
   1c56e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   1c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c572:	781b      	ldrb	r3, [r3, #0]
   1c574:	3b30      	subs	r3, #48	; 0x30
   1c576:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1c578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c57a:	2b09      	cmp	r3, #9
   1c57c:	d80b      	bhi.n	1c596 <chk_mounted+0x3a>
   1c57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c580:	3301      	adds	r3, #1
   1c582:	781b      	ldrb	r3, [r3, #0]
   1c584:	2b3a      	cmp	r3, #58	; 0x3a
   1c586:	d106      	bne.n	1c596 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   1c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c58a:	3302      	adds	r3, #2
   1c58c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c58e:	68fb      	ldr	r3, [r7, #12]
   1c590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c592:	601a      	str	r2, [r3, #0]
   1c594:	e001      	b.n	1c59a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   1c596:	2300      	movs	r3, #0
   1c598:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1c59a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c59c:	2b07      	cmp	r3, #7
   1c59e:	d901      	bls.n	1c5a4 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   1c5a0:	230b      	movs	r3, #11
   1c5a2:	e2af      	b.n	1cb04 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1c5a4:	4bc5      	ldr	r3, [pc, #788]	; (1c8bc <chk_mounted+0x360>)
   1c5a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c5a8:	0092      	lsls	r2, r2, #2
   1c5aa:	58d3      	ldr	r3, [r2, r3]
   1c5ac:	62bb      	str	r3, [r7, #40]	; 0x28
   1c5ae:	68bb      	ldr	r3, [r7, #8]
   1c5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c5b2:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5b6:	2b00      	cmp	r3, #0
   1c5b8:	d101      	bne.n	1c5be <chk_mounted+0x62>
   1c5ba:	230c      	movs	r3, #12
   1c5bc:	e2a2      	b.n	1cb04 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5c0:	781b      	ldrb	r3, [r3, #0]
   1c5c2:	2b00      	cmp	r3, #0
   1c5c4:	d01c      	beq.n	1c600 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   1c5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5c8:	785b      	ldrb	r3, [r3, #1]
   1c5ca:	2227      	movs	r2, #39	; 0x27
   1c5cc:	18bc      	adds	r4, r7, r2
   1c5ce:	0018      	movs	r0, r3
   1c5d0:	4bbb      	ldr	r3, [pc, #748]	; (1c8c0 <chk_mounted+0x364>)
   1c5d2:	4798      	blx	r3
   1c5d4:	0003      	movs	r3, r0
   1c5d6:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   1c5d8:	2327      	movs	r3, #39	; 0x27
   1c5da:	18fb      	adds	r3, r7, r3
   1c5dc:	781b      	ldrb	r3, [r3, #0]
   1c5de:	2201      	movs	r2, #1
   1c5e0:	4013      	ands	r3, r2
   1c5e2:	d10d      	bne.n	1c600 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1c5e4:	1dfb      	adds	r3, r7, #7
   1c5e6:	781b      	ldrb	r3, [r3, #0]
   1c5e8:	2b00      	cmp	r3, #0
   1c5ea:	d007      	beq.n	1c5fc <chk_mounted+0xa0>
   1c5ec:	2327      	movs	r3, #39	; 0x27
   1c5ee:	18fb      	adds	r3, r7, r3
   1c5f0:	781b      	ldrb	r3, [r3, #0]
   1c5f2:	2204      	movs	r2, #4
   1c5f4:	4013      	ands	r3, r2
   1c5f6:	d001      	beq.n	1c5fc <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   1c5f8:	230a      	movs	r3, #10
   1c5fa:	e283      	b.n	1cb04 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   1c5fc:	2300      	movs	r3, #0
   1c5fe:	e281      	b.n	1cb04 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   1c600:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c602:	2200      	movs	r2, #0
   1c604:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1c606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c608:	b2da      	uxtb	r2, r3
   1c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c60c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1c60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c610:	785b      	ldrb	r3, [r3, #1]
   1c612:	2227      	movs	r2, #39	; 0x27
   1c614:	18bc      	adds	r4, r7, r2
   1c616:	0018      	movs	r0, r3
   1c618:	4baa      	ldr	r3, [pc, #680]	; (1c8c4 <chk_mounted+0x368>)
   1c61a:	4798      	blx	r3
   1c61c:	0003      	movs	r3, r0
   1c61e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1c620:	2327      	movs	r3, #39	; 0x27
   1c622:	18fb      	adds	r3, r7, r3
   1c624:	781b      	ldrb	r3, [r3, #0]
   1c626:	2201      	movs	r2, #1
   1c628:	4013      	ands	r3, r2
   1c62a:	d001      	beq.n	1c630 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   1c62c:	2303      	movs	r3, #3
   1c62e:	e269      	b.n	1cb04 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1c630:	1dfb      	adds	r3, r7, #7
   1c632:	781b      	ldrb	r3, [r3, #0]
   1c634:	2b00      	cmp	r3, #0
   1c636:	d007      	beq.n	1c648 <chk_mounted+0xec>
   1c638:	2327      	movs	r3, #39	; 0x27
   1c63a:	18fb      	adds	r3, r7, r3
   1c63c:	781b      	ldrb	r3, [r3, #0]
   1c63e:	2204      	movs	r2, #4
   1c640:	4013      	ands	r3, r2
   1c642:	d001      	beq.n	1c648 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   1c644:	230a      	movs	r3, #10
   1c646:	e25d      	b.n	1cb04 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1c648:	2300      	movs	r3, #0
   1c64a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1c64c:	2347      	movs	r3, #71	; 0x47
   1c64e:	18fc      	adds	r4, r7, r3
   1c650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c652:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c654:	0011      	movs	r1, r2
   1c656:	0018      	movs	r0, r3
   1c658:	4b9b      	ldr	r3, [pc, #620]	; (1c8c8 <chk_mounted+0x36c>)
   1c65a:	4798      	blx	r3
   1c65c:	0003      	movs	r3, r0
   1c65e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1c660:	2347      	movs	r3, #71	; 0x47
   1c662:	18fb      	adds	r3, r7, r3
   1c664:	781b      	ldrb	r3, [r3, #0]
   1c666:	2b01      	cmp	r3, #1
   1c668:	d13b      	bne.n	1c6e2 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   1c66a:	2346      	movs	r3, #70	; 0x46
   1c66c:	18fb      	adds	r3, r7, r3
   1c66e:	2200      	movs	r2, #0
   1c670:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   1c672:	2346      	movs	r3, #70	; 0x46
   1c674:	18fb      	adds	r3, r7, r3
   1c676:	781b      	ldrb	r3, [r3, #0]
   1c678:	2b00      	cmp	r3, #0
   1c67a:	d006      	beq.n	1c68a <chk_mounted+0x12e>
   1c67c:	2346      	movs	r3, #70	; 0x46
   1c67e:	18fb      	adds	r3, r7, r3
   1c680:	781a      	ldrb	r2, [r3, #0]
   1c682:	2346      	movs	r3, #70	; 0x46
   1c684:	18fb      	adds	r3, r7, r3
   1c686:	3a01      	subs	r2, #1
   1c688:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   1c68a:	2346      	movs	r3, #70	; 0x46
   1c68c:	18fb      	adds	r3, r7, r3
   1c68e:	781b      	ldrb	r3, [r3, #0]
   1c690:	011b      	lsls	r3, r3, #4
   1c692:	33bf      	adds	r3, #191	; 0xbf
   1c694:	33ff      	adds	r3, #255	; 0xff
   1c696:	3330      	adds	r3, #48	; 0x30
   1c698:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c69a:	18d3      	adds	r3, r2, r3
   1c69c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   1c69e:	6a3b      	ldr	r3, [r7, #32]
   1c6a0:	3304      	adds	r3, #4
   1c6a2:	781b      	ldrb	r3, [r3, #0]
   1c6a4:	2b00      	cmp	r3, #0
   1c6a6:	d01c      	beq.n	1c6e2 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   1c6a8:	6a3b      	ldr	r3, [r7, #32]
   1c6aa:	330b      	adds	r3, #11
   1c6ac:	781b      	ldrb	r3, [r3, #0]
   1c6ae:	061a      	lsls	r2, r3, #24
   1c6b0:	6a3b      	ldr	r3, [r7, #32]
   1c6b2:	330a      	adds	r3, #10
   1c6b4:	781b      	ldrb	r3, [r3, #0]
   1c6b6:	041b      	lsls	r3, r3, #16
   1c6b8:	4313      	orrs	r3, r2
   1c6ba:	6a3a      	ldr	r2, [r7, #32]
   1c6bc:	3209      	adds	r2, #9
   1c6be:	7812      	ldrb	r2, [r2, #0]
   1c6c0:	0212      	lsls	r2, r2, #8
   1c6c2:	4313      	orrs	r3, r2
   1c6c4:	6a3a      	ldr	r2, [r7, #32]
   1c6c6:	3208      	adds	r2, #8
   1c6c8:	7812      	ldrb	r2, [r2, #0]
   1c6ca:	4313      	orrs	r3, r2
   1c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   1c6ce:	2347      	movs	r3, #71	; 0x47
   1c6d0:	18fc      	adds	r4, r7, r3
   1c6d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6d6:	0011      	movs	r1, r2
   1c6d8:	0018      	movs	r0, r3
   1c6da:	4b7b      	ldr	r3, [pc, #492]	; (1c8c8 <chk_mounted+0x36c>)
   1c6dc:	4798      	blx	r3
   1c6de:	0003      	movs	r3, r0
   1c6e0:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   1c6e2:	2347      	movs	r3, #71	; 0x47
   1c6e4:	18fb      	adds	r3, r7, r3
   1c6e6:	781b      	ldrb	r3, [r3, #0]
   1c6e8:	2b03      	cmp	r3, #3
   1c6ea:	d101      	bne.n	1c6f0 <chk_mounted+0x194>
   1c6ec:	2301      	movs	r3, #1
   1c6ee:	e209      	b.n	1cb04 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1c6f0:	2347      	movs	r3, #71	; 0x47
   1c6f2:	18fb      	adds	r3, r7, r3
   1c6f4:	781b      	ldrb	r3, [r3, #0]
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	d001      	beq.n	1c6fe <chk_mounted+0x1a2>
   1c6fa:	230d      	movs	r3, #13
   1c6fc:	e202      	b.n	1cb04 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c700:	223c      	movs	r2, #60	; 0x3c
   1c702:	5c9b      	ldrb	r3, [r3, r2]
   1c704:	021b      	lsls	r3, r3, #8
   1c706:	b21a      	sxth	r2, r3
   1c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c70a:	213b      	movs	r1, #59	; 0x3b
   1c70c:	5c5b      	ldrb	r3, [r3, r1]
   1c70e:	b21b      	sxth	r3, r3
   1c710:	4313      	orrs	r3, r2
   1c712:	b21a      	sxth	r2, r3
   1c714:	2380      	movs	r3, #128	; 0x80
   1c716:	009b      	lsls	r3, r3, #2
   1c718:	429a      	cmp	r2, r3
   1c71a:	d001      	beq.n	1c720 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   1c71c:	230d      	movs	r3, #13
   1c71e:	e1f1      	b.n	1cb04 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c722:	2247      	movs	r2, #71	; 0x47
   1c724:	5c9b      	ldrb	r3, [r3, r2]
   1c726:	021b      	lsls	r3, r3, #8
   1c728:	b21a      	sxth	r2, r3
   1c72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c72c:	2146      	movs	r1, #70	; 0x46
   1c72e:	5c5b      	ldrb	r3, [r3, r1]
   1c730:	b21b      	sxth	r3, r3
   1c732:	4313      	orrs	r3, r2
   1c734:	b21b      	sxth	r3, r3
   1c736:	b29b      	uxth	r3, r3
   1c738:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c73c:	2b00      	cmp	r3, #0
   1c73e:	d112      	bne.n	1c766 <chk_mounted+0x20a>
   1c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c742:	2257      	movs	r2, #87	; 0x57
   1c744:	5c9b      	ldrb	r3, [r3, r2]
   1c746:	061a      	lsls	r2, r3, #24
   1c748:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c74a:	2156      	movs	r1, #86	; 0x56
   1c74c:	5c5b      	ldrb	r3, [r3, r1]
   1c74e:	041b      	lsls	r3, r3, #16
   1c750:	4313      	orrs	r3, r2
   1c752:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c754:	2155      	movs	r1, #85	; 0x55
   1c756:	5c52      	ldrb	r2, [r2, r1]
   1c758:	0212      	lsls	r2, r2, #8
   1c75a:	4313      	orrs	r3, r2
   1c75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c75e:	2154      	movs	r1, #84	; 0x54
   1c760:	5c52      	ldrb	r2, [r2, r1]
   1c762:	4313      	orrs	r3, r2
   1c764:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   1c766:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c768:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c76a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1c76c:	231f      	movs	r3, #31
   1c76e:	18fb      	adds	r3, r7, r3
   1c770:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c772:	2140      	movs	r1, #64	; 0x40
   1c774:	5c52      	ldrb	r2, [r2, r1]
   1c776:	701a      	strb	r2, [r3, #0]
   1c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c77a:	221f      	movs	r2, #31
   1c77c:	18ba      	adds	r2, r7, r2
   1c77e:	7812      	ldrb	r2, [r2, #0]
   1c780:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1c782:	231f      	movs	r3, #31
   1c784:	18fb      	adds	r3, r7, r3
   1c786:	781b      	ldrb	r3, [r3, #0]
   1c788:	2b01      	cmp	r3, #1
   1c78a:	d006      	beq.n	1c79a <chk_mounted+0x23e>
   1c78c:	231f      	movs	r3, #31
   1c78e:	18fb      	adds	r3, r7, r3
   1c790:	781b      	ldrb	r3, [r3, #0]
   1c792:	2b02      	cmp	r3, #2
   1c794:	d001      	beq.n	1c79a <chk_mounted+0x23e>
   1c796:	230d      	movs	r3, #13
   1c798:	e1b4      	b.n	1cb04 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   1c79a:	231f      	movs	r3, #31
   1c79c:	18fb      	adds	r3, r7, r3
   1c79e:	781a      	ldrb	r2, [r3, #0]
   1c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7a2:	4353      	muls	r3, r2
   1c7a4:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   1c7a6:	231f      	movs	r3, #31
   1c7a8:	18fb      	adds	r3, r7, r3
   1c7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c7ac:	213d      	movs	r1, #61	; 0x3d
   1c7ae:	5c52      	ldrb	r2, [r2, r1]
   1c7b0:	701a      	strb	r2, [r3, #0]
   1c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c7b4:	221f      	movs	r2, #31
   1c7b6:	18ba      	adds	r2, r7, r2
   1c7b8:	7812      	ldrb	r2, [r2, #0]
   1c7ba:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1c7bc:	231f      	movs	r3, #31
   1c7be:	18fb      	adds	r3, r7, r3
   1c7c0:	781b      	ldrb	r3, [r3, #0]
   1c7c2:	2b00      	cmp	r3, #0
   1c7c4:	d008      	beq.n	1c7d8 <chk_mounted+0x27c>
   1c7c6:	231f      	movs	r3, #31
   1c7c8:	18fb      	adds	r3, r7, r3
   1c7ca:	781b      	ldrb	r3, [r3, #0]
   1c7cc:	221f      	movs	r2, #31
   1c7ce:	18ba      	adds	r2, r7, r2
   1c7d0:	7812      	ldrb	r2, [r2, #0]
   1c7d2:	3a01      	subs	r2, #1
   1c7d4:	4013      	ands	r3, r2
   1c7d6:	d001      	beq.n	1c7dc <chk_mounted+0x280>
   1c7d8:	230d      	movs	r3, #13
   1c7da:	e193      	b.n	1cb04 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   1c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c7de:	2242      	movs	r2, #66	; 0x42
   1c7e0:	5c9b      	ldrb	r3, [r3, r2]
   1c7e2:	021b      	lsls	r3, r3, #8
   1c7e4:	b21a      	sxth	r2, r3
   1c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c7e8:	2141      	movs	r1, #65	; 0x41
   1c7ea:	5c5b      	ldrb	r3, [r3, r1]
   1c7ec:	b21b      	sxth	r3, r3
   1c7ee:	4313      	orrs	r3, r2
   1c7f0:	b21b      	sxth	r3, r3
   1c7f2:	b29a      	uxth	r2, r3
   1c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c7f6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   1c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c7fa:	891b      	ldrh	r3, [r3, #8]
   1c7fc:	220f      	movs	r2, #15
   1c7fe:	4013      	ands	r3, r2
   1c800:	b29b      	uxth	r3, r3
   1c802:	2b00      	cmp	r3, #0
   1c804:	d001      	beq.n	1c80a <chk_mounted+0x2ae>
   1c806:	230d      	movs	r3, #13
   1c808:	e17c      	b.n	1cb04 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   1c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c80c:	2244      	movs	r2, #68	; 0x44
   1c80e:	5c9b      	ldrb	r3, [r3, r2]
   1c810:	021b      	lsls	r3, r3, #8
   1c812:	b21a      	sxth	r2, r3
   1c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c816:	2143      	movs	r1, #67	; 0x43
   1c818:	5c5b      	ldrb	r3, [r3, r1]
   1c81a:	b21b      	sxth	r3, r3
   1c81c:	4313      	orrs	r3, r2
   1c81e:	b21b      	sxth	r3, r3
   1c820:	b29b      	uxth	r3, r3
   1c822:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1c824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c826:	2b00      	cmp	r3, #0
   1c828:	d112      	bne.n	1c850 <chk_mounted+0x2f4>
   1c82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c82c:	2253      	movs	r2, #83	; 0x53
   1c82e:	5c9b      	ldrb	r3, [r3, r2]
   1c830:	061a      	lsls	r2, r3, #24
   1c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c834:	2152      	movs	r1, #82	; 0x52
   1c836:	5c5b      	ldrb	r3, [r3, r1]
   1c838:	041b      	lsls	r3, r3, #16
   1c83a:	4313      	orrs	r3, r2
   1c83c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c83e:	2151      	movs	r1, #81	; 0x51
   1c840:	5c52      	ldrb	r2, [r2, r1]
   1c842:	0212      	lsls	r2, r2, #8
   1c844:	4313      	orrs	r3, r2
   1c846:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c848:	2150      	movs	r1, #80	; 0x50
   1c84a:	5c52      	ldrb	r2, [r2, r1]
   1c84c:	4313      	orrs	r3, r2
   1c84e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1c850:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c852:	223f      	movs	r2, #63	; 0x3f
   1c854:	5c9b      	ldrb	r3, [r3, r2]
   1c856:	021b      	lsls	r3, r3, #8
   1c858:	b21a      	sxth	r2, r3
   1c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c85c:	213e      	movs	r1, #62	; 0x3e
   1c85e:	5c5b      	ldrb	r3, [r3, r1]
   1c860:	b21b      	sxth	r3, r3
   1c862:	4313      	orrs	r3, r2
   1c864:	b21a      	sxth	r2, r3
   1c866:	231c      	movs	r3, #28
   1c868:	18fb      	adds	r3, r7, r3
   1c86a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1c86c:	231c      	movs	r3, #28
   1c86e:	18fb      	adds	r3, r7, r3
   1c870:	881b      	ldrh	r3, [r3, #0]
   1c872:	2b00      	cmp	r3, #0
   1c874:	d101      	bne.n	1c87a <chk_mounted+0x31e>
   1c876:	230d      	movs	r3, #13
   1c878:	e144      	b.n	1cb04 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   1c87a:	231c      	movs	r3, #28
   1c87c:	18fb      	adds	r3, r7, r3
   1c87e:	881a      	ldrh	r2, [r3, #0]
   1c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c882:	18d3      	adds	r3, r2, r3
   1c884:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c886:	8912      	ldrh	r2, [r2, #8]
   1c888:	0912      	lsrs	r2, r2, #4
   1c88a:	b292      	uxth	r2, r2
   1c88c:	189b      	adds	r3, r3, r2
   1c88e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1c890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1c892:	69bb      	ldr	r3, [r7, #24]
   1c894:	429a      	cmp	r2, r3
   1c896:	d201      	bcs.n	1c89c <chk_mounted+0x340>
   1c898:	230d      	movs	r3, #13
   1c89a:	e133      	b.n	1cb04 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   1c89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1c89e:	69bb      	ldr	r3, [r7, #24]
   1c8a0:	1ad2      	subs	r2, r2, r3
   1c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c8a4:	789b      	ldrb	r3, [r3, #2]
   1c8a6:	0019      	movs	r1, r3
   1c8a8:	4b08      	ldr	r3, [pc, #32]	; (1c8cc <chk_mounted+0x370>)
   1c8aa:	0010      	movs	r0, r2
   1c8ac:	4798      	blx	r3
   1c8ae:	0003      	movs	r3, r0
   1c8b0:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1c8b2:	697b      	ldr	r3, [r7, #20]
   1c8b4:	2b00      	cmp	r3, #0
   1c8b6:	d10b      	bne.n	1c8d0 <chk_mounted+0x374>
   1c8b8:	230d      	movs	r3, #13
   1c8ba:	e123      	b.n	1cb04 <chk_mounted+0x5a8>
   1c8bc:	20003f30 	.word	0x20003f30
   1c8c0:	0001a6b9 	.word	0x0001a6b9
   1c8c4:	0001a635 	.word	0x0001a635
   1c8c8:	0001c489 	.word	0x0001c489
   1c8cc:	00021cfd 	.word	0x00021cfd
	fmt = FS_FAT12;
   1c8d0:	2347      	movs	r3, #71	; 0x47
   1c8d2:	18fb      	adds	r3, r7, r3
   1c8d4:	2201      	movs	r2, #1
   1c8d6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   1c8d8:	697b      	ldr	r3, [r7, #20]
   1c8da:	4a8c      	ldr	r2, [pc, #560]	; (1cb0c <chk_mounted+0x5b0>)
   1c8dc:	4293      	cmp	r3, r2
   1c8de:	d903      	bls.n	1c8e8 <chk_mounted+0x38c>
   1c8e0:	2347      	movs	r3, #71	; 0x47
   1c8e2:	18fb      	adds	r3, r7, r3
   1c8e4:	2202      	movs	r2, #2
   1c8e6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   1c8e8:	697b      	ldr	r3, [r7, #20]
   1c8ea:	4a89      	ldr	r2, [pc, #548]	; (1cb10 <chk_mounted+0x5b4>)
   1c8ec:	4293      	cmp	r3, r2
   1c8ee:	d903      	bls.n	1c8f8 <chk_mounted+0x39c>
   1c8f0:	2347      	movs	r3, #71	; 0x47
   1c8f2:	18fb      	adds	r3, r7, r3
   1c8f4:	2203      	movs	r2, #3
   1c8f6:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   1c8f8:	697b      	ldr	r3, [r7, #20]
   1c8fa:	1c9a      	adds	r2, r3, #2
   1c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c8fe:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1c900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c902:	69bb      	ldr	r3, [r7, #24]
   1c904:	18d2      	adds	r2, r2, r3
   1c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c908:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1c90a:	231c      	movs	r3, #28
   1c90c:	18fb      	adds	r3, r7, r3
   1c90e:	881a      	ldrh	r2, [r3, #0]
   1c910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c912:	18d2      	adds	r2, r2, r3
   1c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c916:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   1c918:	2347      	movs	r3, #71	; 0x47
   1c91a:	18fb      	adds	r3, r7, r3
   1c91c:	781b      	ldrb	r3, [r3, #0]
   1c91e:	2b03      	cmp	r3, #3
   1c920:	d11e      	bne.n	1c960 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   1c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c924:	891b      	ldrh	r3, [r3, #8]
   1c926:	2b00      	cmp	r3, #0
   1c928:	d001      	beq.n	1c92e <chk_mounted+0x3d2>
   1c92a:	230d      	movs	r3, #13
   1c92c:	e0ea      	b.n	1cb04 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c930:	225f      	movs	r2, #95	; 0x5f
   1c932:	5c9b      	ldrb	r3, [r3, r2]
   1c934:	061a      	lsls	r2, r3, #24
   1c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c938:	215e      	movs	r1, #94	; 0x5e
   1c93a:	5c5b      	ldrb	r3, [r3, r1]
   1c93c:	041b      	lsls	r3, r3, #16
   1c93e:	4313      	orrs	r3, r2
   1c940:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c942:	215d      	movs	r1, #93	; 0x5d
   1c944:	5c52      	ldrb	r2, [r2, r1]
   1c946:	0212      	lsls	r2, r2, #8
   1c948:	4313      	orrs	r3, r2
   1c94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c94c:	215c      	movs	r1, #92	; 0x5c
   1c94e:	5c52      	ldrb	r2, [r2, r1]
   1c950:	431a      	orrs	r2, r3
   1c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c954:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c958:	699b      	ldr	r3, [r3, #24]
   1c95a:	009b      	lsls	r3, r3, #2
   1c95c:	633b      	str	r3, [r7, #48]	; 0x30
   1c95e:	e020      	b.n	1c9a2 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   1c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c962:	891b      	ldrh	r3, [r3, #8]
   1c964:	2b00      	cmp	r3, #0
   1c966:	d101      	bne.n	1c96c <chk_mounted+0x410>
   1c968:	230d      	movs	r3, #13
   1c96a:	e0cb      	b.n	1cb04 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   1c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c96e:	6a1a      	ldr	r2, [r3, #32]
   1c970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c972:	18d2      	adds	r2, r2, r3
   1c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c976:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1c978:	2347      	movs	r3, #71	; 0x47
   1c97a:	18fb      	adds	r3, r7, r3
   1c97c:	781b      	ldrb	r3, [r3, #0]
   1c97e:	2b02      	cmp	r3, #2
   1c980:	d103      	bne.n	1c98a <chk_mounted+0x42e>
   1c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c984:	699b      	ldr	r3, [r3, #24]
   1c986:	005b      	lsls	r3, r3, #1
   1c988:	e00a      	b.n	1c9a0 <chk_mounted+0x444>
   1c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c98c:	699a      	ldr	r2, [r3, #24]
   1c98e:	0013      	movs	r3, r2
   1c990:	005b      	lsls	r3, r3, #1
   1c992:	189b      	adds	r3, r3, r2
   1c994:	085a      	lsrs	r2, r3, #1
   1c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c998:	699b      	ldr	r3, [r3, #24]
   1c99a:	2101      	movs	r1, #1
   1c99c:	400b      	ands	r3, r1
   1c99e:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   1c9a0:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9a4:	69da      	ldr	r2, [r3, #28]
   1c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c9a8:	495a      	ldr	r1, [pc, #360]	; (1cb14 <chk_mounted+0x5b8>)
   1c9aa:	468c      	mov	ip, r1
   1c9ac:	4463      	add	r3, ip
   1c9ae:	0a5b      	lsrs	r3, r3, #9
   1c9b0:	429a      	cmp	r2, r3
   1c9b2:	d201      	bcs.n	1c9b8 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   1c9b4:	230d      	movs	r3, #13
   1c9b6:	e0a5      	b.n	1cb04 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   1c9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9ba:	2201      	movs	r2, #1
   1c9bc:	4252      	negs	r2, r2
   1c9be:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   1c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9c2:	2200      	movs	r2, #0
   1c9c4:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   1c9c6:	2347      	movs	r3, #71	; 0x47
   1c9c8:	18fb      	adds	r3, r7, r3
   1c9ca:	781b      	ldrb	r3, [r3, #0]
   1c9cc:	2b03      	cmp	r3, #3
   1c9ce:	d000      	beq.n	1c9d2 <chk_mounted+0x476>
   1c9d0:	e082      	b.n	1cad8 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   1c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9d4:	2200      	movs	r2, #0
   1c9d6:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   1c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9da:	2261      	movs	r2, #97	; 0x61
   1c9dc:	5c9b      	ldrb	r3, [r3, r2]
   1c9de:	021b      	lsls	r3, r3, #8
   1c9e0:	b21a      	sxth	r2, r3
   1c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9e4:	2160      	movs	r1, #96	; 0x60
   1c9e6:	5c5b      	ldrb	r3, [r3, r1]
   1c9e8:	b21b      	sxth	r3, r3
   1c9ea:	4313      	orrs	r3, r2
   1c9ec:	b21b      	sxth	r3, r3
   1c9ee:	b29b      	uxth	r3, r3
   1c9f0:	001a      	movs	r2, r3
   1c9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c9f4:	18d2      	adds	r2, r2, r3
   1c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9f8:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9fc:	7858      	ldrb	r0, [r3, #1]
   1c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca00:	3330      	adds	r3, #48	; 0x30
   1ca02:	0019      	movs	r1, r3
   1ca04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca06:	695a      	ldr	r2, [r3, #20]
   1ca08:	2301      	movs	r3, #1
   1ca0a:	4c43      	ldr	r4, [pc, #268]	; (1cb18 <chk_mounted+0x5bc>)
   1ca0c:	47a0      	blx	r4
   1ca0e:	1e03      	subs	r3, r0, #0
   1ca10:	d162      	bne.n	1cad8 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca14:	4a41      	ldr	r2, [pc, #260]	; (1cb1c <chk_mounted+0x5c0>)
   1ca16:	5c9b      	ldrb	r3, [r3, r2]
   1ca18:	021b      	lsls	r3, r3, #8
   1ca1a:	b21a      	sxth	r2, r3
   1ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca1e:	4940      	ldr	r1, [pc, #256]	; (1cb20 <chk_mounted+0x5c4>)
   1ca20:	5c5b      	ldrb	r3, [r3, r1]
   1ca22:	b21b      	sxth	r3, r3
   1ca24:	4313      	orrs	r3, r2
   1ca26:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1ca28:	4a3e      	ldr	r2, [pc, #248]	; (1cb24 <chk_mounted+0x5c8>)
   1ca2a:	4293      	cmp	r3, r2
   1ca2c:	d154      	bne.n	1cad8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1ca2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca30:	2233      	movs	r2, #51	; 0x33
   1ca32:	5c9b      	ldrb	r3, [r3, r2]
   1ca34:	061a      	lsls	r2, r3, #24
   1ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca38:	2132      	movs	r1, #50	; 0x32
   1ca3a:	5c5b      	ldrb	r3, [r3, r1]
   1ca3c:	041b      	lsls	r3, r3, #16
   1ca3e:	4313      	orrs	r3, r2
   1ca40:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca42:	2131      	movs	r1, #49	; 0x31
   1ca44:	5c52      	ldrb	r2, [r2, r1]
   1ca46:	0212      	lsls	r2, r2, #8
   1ca48:	4313      	orrs	r3, r2
   1ca4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca4c:	2130      	movs	r1, #48	; 0x30
   1ca4e:	5c52      	ldrb	r2, [r2, r1]
   1ca50:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1ca52:	4a35      	ldr	r2, [pc, #212]	; (1cb28 <chk_mounted+0x5cc>)
   1ca54:	4293      	cmp	r3, r2
   1ca56:	d13f      	bne.n	1cad8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   1ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca5a:	4a34      	ldr	r2, [pc, #208]	; (1cb2c <chk_mounted+0x5d0>)
   1ca5c:	5c9b      	ldrb	r3, [r3, r2]
   1ca5e:	061a      	lsls	r2, r3, #24
   1ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca62:	4933      	ldr	r1, [pc, #204]	; (1cb30 <chk_mounted+0x5d4>)
   1ca64:	5c5b      	ldrb	r3, [r3, r1]
   1ca66:	041b      	lsls	r3, r3, #16
   1ca68:	4313      	orrs	r3, r2
   1ca6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca6c:	4931      	ldr	r1, [pc, #196]	; (1cb34 <chk_mounted+0x5d8>)
   1ca6e:	5c52      	ldrb	r2, [r2, r1]
   1ca70:	0212      	lsls	r2, r2, #8
   1ca72:	4313      	orrs	r3, r2
   1ca74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1ca76:	2285      	movs	r2, #133	; 0x85
   1ca78:	0092      	lsls	r2, r2, #2
   1ca7a:	5c8a      	ldrb	r2, [r1, r2]
   1ca7c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1ca7e:	4a2e      	ldr	r2, [pc, #184]	; (1cb38 <chk_mounted+0x5dc>)
   1ca80:	4293      	cmp	r3, r2
   1ca82:	d129      	bne.n	1cad8 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   1ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca86:	4a2d      	ldr	r2, [pc, #180]	; (1cb3c <chk_mounted+0x5e0>)
   1ca88:	5c9b      	ldrb	r3, [r3, r2]
   1ca8a:	061a      	lsls	r2, r3, #24
   1ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca8e:	492c      	ldr	r1, [pc, #176]	; (1cb40 <chk_mounted+0x5e4>)
   1ca90:	5c5b      	ldrb	r3, [r3, r1]
   1ca92:	041b      	lsls	r3, r3, #16
   1ca94:	4313      	orrs	r3, r2
   1ca96:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca98:	492a      	ldr	r1, [pc, #168]	; (1cb44 <chk_mounted+0x5e8>)
   1ca9a:	5c52      	ldrb	r2, [r2, r1]
   1ca9c:	0212      	lsls	r2, r2, #8
   1ca9e:	4313      	orrs	r3, r2
   1caa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1caa2:	2287      	movs	r2, #135	; 0x87
   1caa4:	0092      	lsls	r2, r2, #2
   1caa6:	5c8a      	ldrb	r2, [r1, r2]
   1caa8:	431a      	orrs	r2, r3
   1caaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1caac:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1caae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cab0:	4a25      	ldr	r2, [pc, #148]	; (1cb48 <chk_mounted+0x5ec>)
   1cab2:	5c9b      	ldrb	r3, [r3, r2]
   1cab4:	061a      	lsls	r2, r3, #24
   1cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cab8:	4924      	ldr	r1, [pc, #144]	; (1cb4c <chk_mounted+0x5f0>)
   1caba:	5c5b      	ldrb	r3, [r3, r1]
   1cabc:	041b      	lsls	r3, r3, #16
   1cabe:	4313      	orrs	r3, r2
   1cac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cac2:	4923      	ldr	r1, [pc, #140]	; (1cb50 <chk_mounted+0x5f4>)
   1cac4:	5c52      	ldrb	r2, [r2, r1]
   1cac6:	0212      	lsls	r2, r2, #8
   1cac8:	4313      	orrs	r3, r2
   1caca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1cacc:	2286      	movs	r2, #134	; 0x86
   1cace:	0092      	lsls	r2, r2, #2
   1cad0:	5c8a      	ldrb	r2, [r1, r2]
   1cad2:	431a      	orrs	r2, r3
   1cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cad6:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   1cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cada:	2247      	movs	r2, #71	; 0x47
   1cadc:	18ba      	adds	r2, r7, r2
   1cade:	7812      	ldrb	r2, [r2, #0]
   1cae0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   1cae2:	4b1c      	ldr	r3, [pc, #112]	; (1cb54 <chk_mounted+0x5f8>)
   1cae4:	881b      	ldrh	r3, [r3, #0]
   1cae6:	3301      	adds	r3, #1
   1cae8:	b29a      	uxth	r2, r3
   1caea:	4b1a      	ldr	r3, [pc, #104]	; (1cb54 <chk_mounted+0x5f8>)
   1caec:	801a      	strh	r2, [r3, #0]
   1caee:	4b19      	ldr	r3, [pc, #100]	; (1cb54 <chk_mounted+0x5f8>)
   1caf0:	881a      	ldrh	r2, [r3, #0]
   1caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1caf4:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   1caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1caf8:	2200      	movs	r2, #0
   1cafa:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   1cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cafe:	2200      	movs	r2, #0
   1cb00:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   1cb02:	2300      	movs	r3, #0
}
   1cb04:	0018      	movs	r0, r3
   1cb06:	46bd      	mov	sp, r7
   1cb08:	b013      	add	sp, #76	; 0x4c
   1cb0a:	bd90      	pop	{r4, r7, pc}
   1cb0c:	00000ff5 	.word	0x00000ff5
   1cb10:	0000fff5 	.word	0x0000fff5
   1cb14:	000001ff 	.word	0x000001ff
   1cb18:	0001a6f1 	.word	0x0001a6f1
   1cb1c:	0000022f 	.word	0x0000022f
   1cb20:	0000022e 	.word	0x0000022e
   1cb24:	ffffaa55 	.word	0xffffaa55
   1cb28:	41615252 	.word	0x41615252
   1cb2c:	00000217 	.word	0x00000217
   1cb30:	00000216 	.word	0x00000216
   1cb34:	00000215 	.word	0x00000215
   1cb38:	61417272 	.word	0x61417272
   1cb3c:	0000021f 	.word	0x0000021f
   1cb40:	0000021e 	.word	0x0000021e
   1cb44:	0000021d 	.word	0x0000021d
   1cb48:	0000021b 	.word	0x0000021b
   1cb4c:	0000021a 	.word	0x0000021a
   1cb50:	00000219 	.word	0x00000219
   1cb54:	20003f50 	.word	0x20003f50

0001cb58 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   1cb58:	b580      	push	{r7, lr}
   1cb5a:	b082      	sub	sp, #8
   1cb5c:	af00      	add	r7, sp, #0
   1cb5e:	6078      	str	r0, [r7, #4]
   1cb60:	000a      	movs	r2, r1
   1cb62:	1cbb      	adds	r3, r7, #2
   1cb64:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   1cb66:	687b      	ldr	r3, [r7, #4]
   1cb68:	2b00      	cmp	r3, #0
   1cb6a:	d009      	beq.n	1cb80 <validate+0x28>
   1cb6c:	687b      	ldr	r3, [r7, #4]
   1cb6e:	781b      	ldrb	r3, [r3, #0]
   1cb70:	2b00      	cmp	r3, #0
   1cb72:	d005      	beq.n	1cb80 <validate+0x28>
   1cb74:	687b      	ldr	r3, [r7, #4]
   1cb76:	88db      	ldrh	r3, [r3, #6]
   1cb78:	1cba      	adds	r2, r7, #2
   1cb7a:	8812      	ldrh	r2, [r2, #0]
   1cb7c:	429a      	cmp	r2, r3
   1cb7e:	d001      	beq.n	1cb84 <validate+0x2c>
		return FR_INVALID_OBJECT;
   1cb80:	2309      	movs	r3, #9
   1cb82:	e00c      	b.n	1cb9e <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   1cb84:	687b      	ldr	r3, [r7, #4]
   1cb86:	785b      	ldrb	r3, [r3, #1]
   1cb88:	0018      	movs	r0, r3
   1cb8a:	4b07      	ldr	r3, [pc, #28]	; (1cba8 <validate+0x50>)
   1cb8c:	4798      	blx	r3
   1cb8e:	0003      	movs	r3, r0
   1cb90:	001a      	movs	r2, r3
   1cb92:	2301      	movs	r3, #1
   1cb94:	4013      	ands	r3, r2
   1cb96:	d001      	beq.n	1cb9c <validate+0x44>
		return FR_NOT_READY;
   1cb98:	2303      	movs	r3, #3
   1cb9a:	e000      	b.n	1cb9e <validate+0x46>

	return FR_OK;
   1cb9c:	2300      	movs	r3, #0
}
   1cb9e:	0018      	movs	r0, r3
   1cba0:	46bd      	mov	sp, r7
   1cba2:	b002      	add	sp, #8
   1cba4:	bd80      	pop	{r7, pc}
   1cba6:	46c0      	nop			; (mov r8, r8)
   1cba8:	0001a6b9 	.word	0x0001a6b9

0001cbac <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   1cbac:	b580      	push	{r7, lr}
   1cbae:	b084      	sub	sp, #16
   1cbb0:	af00      	add	r7, sp, #0
   1cbb2:	0002      	movs	r2, r0
   1cbb4:	6039      	str	r1, [r7, #0]
   1cbb6:	1dfb      	adds	r3, r7, #7
   1cbb8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   1cbba:	1dfb      	adds	r3, r7, #7
   1cbbc:	781b      	ldrb	r3, [r3, #0]
   1cbbe:	2b07      	cmp	r3, #7
   1cbc0:	d901      	bls.n	1cbc6 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   1cbc2:	230b      	movs	r3, #11
   1cbc4:	e018      	b.n	1cbf8 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   1cbc6:	1dfb      	adds	r3, r7, #7
   1cbc8:	781a      	ldrb	r2, [r3, #0]
   1cbca:	4b0d      	ldr	r3, [pc, #52]	; (1cc00 <f_mount+0x54>)
   1cbcc:	0092      	lsls	r2, r2, #2
   1cbce:	58d3      	ldr	r3, [r2, r3]
   1cbd0:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   1cbd2:	68fb      	ldr	r3, [r7, #12]
   1cbd4:	2b00      	cmp	r3, #0
   1cbd6:	d002      	beq.n	1cbde <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   1cbd8:	68fb      	ldr	r3, [r7, #12]
   1cbda:	2200      	movs	r2, #0
   1cbdc:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   1cbde:	683b      	ldr	r3, [r7, #0]
   1cbe0:	2b00      	cmp	r3, #0
   1cbe2:	d002      	beq.n	1cbea <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   1cbe4:	683b      	ldr	r3, [r7, #0]
   1cbe6:	2200      	movs	r2, #0
   1cbe8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   1cbea:	1dfb      	adds	r3, r7, #7
   1cbec:	781a      	ldrb	r2, [r3, #0]
   1cbee:	4b04      	ldr	r3, [pc, #16]	; (1cc00 <f_mount+0x54>)
   1cbf0:	0092      	lsls	r2, r2, #2
   1cbf2:	6839      	ldr	r1, [r7, #0]
   1cbf4:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   1cbf6:	2300      	movs	r3, #0
}
   1cbf8:	0018      	movs	r0, r3
   1cbfa:	46bd      	mov	sp, r7
   1cbfc:	b004      	add	sp, #16
   1cbfe:	bd80      	pop	{r7, pc}
   1cc00:	20003f30 	.word	0x20003f30

0001cc04 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   1cc04:	b590      	push	{r4, r7, lr}
   1cc06:	4ce5      	ldr	r4, [pc, #916]	; (1cf9c <f_open+0x398>)
   1cc08:	44a5      	add	sp, r4
   1cc0a:	af00      	add	r7, sp, #0
   1cc0c:	60f8      	str	r0, [r7, #12]
   1cc0e:	60b9      	str	r1, [r7, #8]
   1cc10:	4be3      	ldr	r3, [pc, #908]	; (1cfa0 <f_open+0x39c>)
   1cc12:	2194      	movs	r1, #148	; 0x94
   1cc14:	0089      	lsls	r1, r1, #2
   1cc16:	468c      	mov	ip, r1
   1cc18:	44bc      	add	ip, r7
   1cc1a:	4463      	add	r3, ip
   1cc1c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   1cc1e:	68fb      	ldr	r3, [r7, #12]
   1cc20:	2200      	movs	r2, #0
   1cc22:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   1cc24:	4bde      	ldr	r3, [pc, #888]	; (1cfa0 <f_open+0x39c>)
   1cc26:	2294      	movs	r2, #148	; 0x94
   1cc28:	0092      	lsls	r2, r2, #2
   1cc2a:	4694      	mov	ip, r2
   1cc2c:	44bc      	add	ip, r7
   1cc2e:	4463      	add	r3, ip
   1cc30:	4adb      	ldr	r2, [pc, #876]	; (1cfa0 <f_open+0x39c>)
   1cc32:	2194      	movs	r1, #148	; 0x94
   1cc34:	0089      	lsls	r1, r1, #2
   1cc36:	468c      	mov	ip, r1
   1cc38:	44bc      	add	ip, r7
   1cc3a:	4462      	add	r2, ip
   1cc3c:	7812      	ldrb	r2, [r2, #0]
   1cc3e:	211f      	movs	r1, #31
   1cc40:	400a      	ands	r2, r1
   1cc42:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   1cc44:	4bd6      	ldr	r3, [pc, #856]	; (1cfa0 <f_open+0x39c>)
   1cc46:	2294      	movs	r2, #148	; 0x94
   1cc48:	0092      	lsls	r2, r2, #2
   1cc4a:	4694      	mov	ip, r2
   1cc4c:	44bc      	add	ip, r7
   1cc4e:	4463      	add	r3, ip
   1cc50:	781b      	ldrb	r3, [r3, #0]
   1cc52:	2201      	movs	r2, #1
   1cc54:	4393      	bics	r3, r2
   1cc56:	b2da      	uxtb	r2, r3
   1cc58:	4bd2      	ldr	r3, [pc, #840]	; (1cfa4 <f_open+0x3a0>)
   1cc5a:	18fc      	adds	r4, r7, r3
   1cc5c:	2387      	movs	r3, #135	; 0x87
   1cc5e:	009b      	lsls	r3, r3, #2
   1cc60:	18f9      	adds	r1, r7, r3
   1cc62:	2308      	movs	r3, #8
   1cc64:	18fb      	adds	r3, r7, r3
   1cc66:	0018      	movs	r0, r3
   1cc68:	4bcf      	ldr	r3, [pc, #828]	; (1cfa8 <f_open+0x3a4>)
   1cc6a:	4798      	blx	r3
   1cc6c:	0003      	movs	r3, r0
   1cc6e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   1cc70:	2387      	movs	r3, #135	; 0x87
   1cc72:	009b      	lsls	r3, r3, #2
   1cc74:	18fb      	adds	r3, r7, r3
   1cc76:	2284      	movs	r2, #132	; 0x84
   1cc78:	0092      	lsls	r2, r2, #2
   1cc7a:	18ba      	adds	r2, r7, r2
   1cc7c:	619a      	str	r2, [r3, #24]
   1cc7e:	2387      	movs	r3, #135	; 0x87
   1cc80:	009b      	lsls	r3, r3, #2
   1cc82:	18fb      	adds	r3, r7, r3
   1cc84:	2210      	movs	r2, #16
   1cc86:	18ba      	adds	r2, r7, r2
   1cc88:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   1cc8a:	4bc6      	ldr	r3, [pc, #792]	; (1cfa4 <f_open+0x3a0>)
   1cc8c:	18fb      	adds	r3, r7, r3
   1cc8e:	781b      	ldrb	r3, [r3, #0]
   1cc90:	2b00      	cmp	r3, #0
   1cc92:	d10b      	bne.n	1ccac <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   1cc94:	68ba      	ldr	r2, [r7, #8]
   1cc96:	4bc3      	ldr	r3, [pc, #780]	; (1cfa4 <f_open+0x3a0>)
   1cc98:	18fc      	adds	r4, r7, r3
   1cc9a:	2387      	movs	r3, #135	; 0x87
   1cc9c:	009b      	lsls	r3, r3, #2
   1cc9e:	18fb      	adds	r3, r7, r3
   1cca0:	0011      	movs	r1, r2
   1cca2:	0018      	movs	r0, r3
   1cca4:	4bc1      	ldr	r3, [pc, #772]	; (1cfac <f_open+0x3a8>)
   1cca6:	4798      	blx	r3
   1cca8:	0003      	movs	r3, r0
   1ccaa:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   1ccac:	2387      	movs	r3, #135	; 0x87
   1ccae:	009b      	lsls	r3, r3, #2
   1ccb0:	18fb      	adds	r3, r7, r3
   1ccb2:	695b      	ldr	r3, [r3, #20]
   1ccb4:	2292      	movs	r2, #146	; 0x92
   1ccb6:	0092      	lsls	r2, r2, #2
   1ccb8:	18ba      	adds	r2, r7, r2
   1ccba:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   1ccbc:	4bb9      	ldr	r3, [pc, #740]	; (1cfa4 <f_open+0x3a0>)
   1ccbe:	18fb      	adds	r3, r7, r3
   1ccc0:	781b      	ldrb	r3, [r3, #0]
   1ccc2:	2b00      	cmp	r3, #0
   1ccc4:	d109      	bne.n	1ccda <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   1ccc6:	2392      	movs	r3, #146	; 0x92
   1ccc8:	009b      	lsls	r3, r3, #2
   1ccca:	18fb      	adds	r3, r7, r3
   1cccc:	681b      	ldr	r3, [r3, #0]
   1ccce:	2b00      	cmp	r3, #0
   1ccd0:	d103      	bne.n	1ccda <f_open+0xd6>
			res = FR_INVALID_NAME;
   1ccd2:	4bb4      	ldr	r3, [pc, #720]	; (1cfa4 <f_open+0x3a0>)
   1ccd4:	18fb      	adds	r3, r7, r3
   1ccd6:	2206      	movs	r2, #6
   1ccd8:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1ccda:	4bb1      	ldr	r3, [pc, #708]	; (1cfa0 <f_open+0x39c>)
   1ccdc:	2294      	movs	r2, #148	; 0x94
   1ccde:	0092      	lsls	r2, r2, #2
   1cce0:	4694      	mov	ip, r2
   1cce2:	44bc      	add	ip, r7
   1cce4:	4463      	add	r3, ip
   1cce6:	781b      	ldrb	r3, [r3, #0]
   1cce8:	221c      	movs	r2, #28
   1ccea:	4013      	ands	r3, r2
   1ccec:	d100      	bne.n	1ccf0 <f_open+0xec>
   1ccee:	e141      	b.n	1cf74 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   1ccf0:	4bac      	ldr	r3, [pc, #688]	; (1cfa4 <f_open+0x3a0>)
   1ccf2:	18fb      	adds	r3, r7, r3
   1ccf4:	781b      	ldrb	r3, [r3, #0]
   1ccf6:	2b00      	cmp	r3, #0
   1ccf8:	d027      	beq.n	1cd4a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   1ccfa:	4baa      	ldr	r3, [pc, #680]	; (1cfa4 <f_open+0x3a0>)
   1ccfc:	18fb      	adds	r3, r7, r3
   1ccfe:	781b      	ldrb	r3, [r3, #0]
   1cd00:	2b04      	cmp	r3, #4
   1cd02:	d109      	bne.n	1cd18 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   1cd04:	4ba7      	ldr	r3, [pc, #668]	; (1cfa4 <f_open+0x3a0>)
   1cd06:	18fc      	adds	r4, r7, r3
   1cd08:	2387      	movs	r3, #135	; 0x87
   1cd0a:	009b      	lsls	r3, r3, #2
   1cd0c:	18fb      	adds	r3, r7, r3
   1cd0e:	0018      	movs	r0, r3
   1cd10:	4ba7      	ldr	r3, [pc, #668]	; (1cfb0 <f_open+0x3ac>)
   1cd12:	4798      	blx	r3
   1cd14:	0003      	movs	r3, r0
   1cd16:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1cd18:	4ba1      	ldr	r3, [pc, #644]	; (1cfa0 <f_open+0x39c>)
   1cd1a:	2294      	movs	r2, #148	; 0x94
   1cd1c:	0092      	lsls	r2, r2, #2
   1cd1e:	4694      	mov	ip, r2
   1cd20:	44bc      	add	ip, r7
   1cd22:	4463      	add	r3, ip
   1cd24:	4a9e      	ldr	r2, [pc, #632]	; (1cfa0 <f_open+0x39c>)
   1cd26:	2194      	movs	r1, #148	; 0x94
   1cd28:	0089      	lsls	r1, r1, #2
   1cd2a:	468c      	mov	ip, r1
   1cd2c:	44bc      	add	ip, r7
   1cd2e:	4462      	add	r2, ip
   1cd30:	7812      	ldrb	r2, [r2, #0]
   1cd32:	2108      	movs	r1, #8
   1cd34:	430a      	orrs	r2, r1
   1cd36:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   1cd38:	2387      	movs	r3, #135	; 0x87
   1cd3a:	009b      	lsls	r3, r3, #2
   1cd3c:	18fb      	adds	r3, r7, r3
   1cd3e:	695b      	ldr	r3, [r3, #20]
   1cd40:	2292      	movs	r2, #146	; 0x92
   1cd42:	0092      	lsls	r2, r2, #2
   1cd44:	18ba      	adds	r2, r7, r2
   1cd46:	6013      	str	r3, [r2, #0]
   1cd48:	e01c      	b.n	1cd84 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1cd4a:	2392      	movs	r3, #146	; 0x92
   1cd4c:	009b      	lsls	r3, r3, #2
   1cd4e:	18fb      	adds	r3, r7, r3
   1cd50:	681b      	ldr	r3, [r3, #0]
   1cd52:	330b      	adds	r3, #11
   1cd54:	781b      	ldrb	r3, [r3, #0]
   1cd56:	001a      	movs	r2, r3
   1cd58:	2311      	movs	r3, #17
   1cd5a:	4013      	ands	r3, r2
   1cd5c:	d004      	beq.n	1cd68 <f_open+0x164>
				res = FR_DENIED;
   1cd5e:	4b91      	ldr	r3, [pc, #580]	; (1cfa4 <f_open+0x3a0>)
   1cd60:	18fb      	adds	r3, r7, r3
   1cd62:	2207      	movs	r2, #7
   1cd64:	701a      	strb	r2, [r3, #0]
   1cd66:	e00d      	b.n	1cd84 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   1cd68:	4b8d      	ldr	r3, [pc, #564]	; (1cfa0 <f_open+0x39c>)
   1cd6a:	2294      	movs	r2, #148	; 0x94
   1cd6c:	0092      	lsls	r2, r2, #2
   1cd6e:	4694      	mov	ip, r2
   1cd70:	44bc      	add	ip, r7
   1cd72:	4463      	add	r3, ip
   1cd74:	781b      	ldrb	r3, [r3, #0]
   1cd76:	2204      	movs	r2, #4
   1cd78:	4013      	ands	r3, r2
   1cd7a:	d003      	beq.n	1cd84 <f_open+0x180>
					res = FR_EXIST;
   1cd7c:	4b89      	ldr	r3, [pc, #548]	; (1cfa4 <f_open+0x3a0>)
   1cd7e:	18fb      	adds	r3, r7, r3
   1cd80:	2208      	movs	r2, #8
   1cd82:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1cd84:	4b87      	ldr	r3, [pc, #540]	; (1cfa4 <f_open+0x3a0>)
   1cd86:	18fb      	adds	r3, r7, r3
   1cd88:	781b      	ldrb	r3, [r3, #0]
   1cd8a:	2b00      	cmp	r3, #0
   1cd8c:	d000      	beq.n	1cd90 <f_open+0x18c>
   1cd8e:	e12f      	b.n	1cff0 <f_open+0x3ec>
   1cd90:	4b83      	ldr	r3, [pc, #524]	; (1cfa0 <f_open+0x39c>)
   1cd92:	2294      	movs	r2, #148	; 0x94
   1cd94:	0092      	lsls	r2, r2, #2
   1cd96:	4694      	mov	ip, r2
   1cd98:	44bc      	add	ip, r7
   1cd9a:	4463      	add	r3, ip
   1cd9c:	781b      	ldrb	r3, [r3, #0]
   1cd9e:	2208      	movs	r2, #8
   1cda0:	4013      	ands	r3, r2
   1cda2:	d100      	bne.n	1cda6 <f_open+0x1a2>
   1cda4:	e124      	b.n	1cff0 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   1cda6:	4b83      	ldr	r3, [pc, #524]	; (1cfb4 <f_open+0x3b0>)
   1cda8:	4798      	blx	r3
   1cdaa:	0003      	movs	r3, r0
   1cdac:	2291      	movs	r2, #145	; 0x91
   1cdae:	0092      	lsls	r2, r2, #2
   1cdb0:	18ba      	adds	r2, r7, r2
   1cdb2:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   1cdb4:	2392      	movs	r3, #146	; 0x92
   1cdb6:	009b      	lsls	r3, r3, #2
   1cdb8:	18fb      	adds	r3, r7, r3
   1cdba:	681b      	ldr	r3, [r3, #0]
   1cdbc:	330e      	adds	r3, #14
   1cdbe:	2291      	movs	r2, #145	; 0x91
   1cdc0:	0092      	lsls	r2, r2, #2
   1cdc2:	18ba      	adds	r2, r7, r2
   1cdc4:	6812      	ldr	r2, [r2, #0]
   1cdc6:	b2d2      	uxtb	r2, r2
   1cdc8:	701a      	strb	r2, [r3, #0]
   1cdca:	2392      	movs	r3, #146	; 0x92
   1cdcc:	009b      	lsls	r3, r3, #2
   1cdce:	18fb      	adds	r3, r7, r3
   1cdd0:	681b      	ldr	r3, [r3, #0]
   1cdd2:	330f      	adds	r3, #15
   1cdd4:	2291      	movs	r2, #145	; 0x91
   1cdd6:	0092      	lsls	r2, r2, #2
   1cdd8:	18ba      	adds	r2, r7, r2
   1cdda:	6812      	ldr	r2, [r2, #0]
   1cddc:	b292      	uxth	r2, r2
   1cdde:	0a12      	lsrs	r2, r2, #8
   1cde0:	b292      	uxth	r2, r2
   1cde2:	b2d2      	uxtb	r2, r2
   1cde4:	701a      	strb	r2, [r3, #0]
   1cde6:	2392      	movs	r3, #146	; 0x92
   1cde8:	009b      	lsls	r3, r3, #2
   1cdea:	18fb      	adds	r3, r7, r3
   1cdec:	681b      	ldr	r3, [r3, #0]
   1cdee:	3310      	adds	r3, #16
   1cdf0:	2291      	movs	r2, #145	; 0x91
   1cdf2:	0092      	lsls	r2, r2, #2
   1cdf4:	18ba      	adds	r2, r7, r2
   1cdf6:	6812      	ldr	r2, [r2, #0]
   1cdf8:	0c12      	lsrs	r2, r2, #16
   1cdfa:	b2d2      	uxtb	r2, r2
   1cdfc:	701a      	strb	r2, [r3, #0]
   1cdfe:	2392      	movs	r3, #146	; 0x92
   1ce00:	009b      	lsls	r3, r3, #2
   1ce02:	18fb      	adds	r3, r7, r3
   1ce04:	681b      	ldr	r3, [r3, #0]
   1ce06:	3311      	adds	r3, #17
   1ce08:	2291      	movs	r2, #145	; 0x91
   1ce0a:	0092      	lsls	r2, r2, #2
   1ce0c:	18ba      	adds	r2, r7, r2
   1ce0e:	6812      	ldr	r2, [r2, #0]
   1ce10:	0e12      	lsrs	r2, r2, #24
   1ce12:	b2d2      	uxtb	r2, r2
   1ce14:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   1ce16:	2392      	movs	r3, #146	; 0x92
   1ce18:	009b      	lsls	r3, r3, #2
   1ce1a:	18fb      	adds	r3, r7, r3
   1ce1c:	681b      	ldr	r3, [r3, #0]
   1ce1e:	330b      	adds	r3, #11
   1ce20:	2200      	movs	r2, #0
   1ce22:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   1ce24:	2392      	movs	r3, #146	; 0x92
   1ce26:	009b      	lsls	r3, r3, #2
   1ce28:	18fb      	adds	r3, r7, r3
   1ce2a:	681b      	ldr	r3, [r3, #0]
   1ce2c:	331c      	adds	r3, #28
   1ce2e:	2200      	movs	r2, #0
   1ce30:	701a      	strb	r2, [r3, #0]
   1ce32:	2392      	movs	r3, #146	; 0x92
   1ce34:	009b      	lsls	r3, r3, #2
   1ce36:	18fb      	adds	r3, r7, r3
   1ce38:	681b      	ldr	r3, [r3, #0]
   1ce3a:	331d      	adds	r3, #29
   1ce3c:	2200      	movs	r2, #0
   1ce3e:	701a      	strb	r2, [r3, #0]
   1ce40:	2392      	movs	r3, #146	; 0x92
   1ce42:	009b      	lsls	r3, r3, #2
   1ce44:	18fb      	adds	r3, r7, r3
   1ce46:	681b      	ldr	r3, [r3, #0]
   1ce48:	331e      	adds	r3, #30
   1ce4a:	2200      	movs	r2, #0
   1ce4c:	701a      	strb	r2, [r3, #0]
   1ce4e:	2392      	movs	r3, #146	; 0x92
   1ce50:	009b      	lsls	r3, r3, #2
   1ce52:	18fb      	adds	r3, r7, r3
   1ce54:	681b      	ldr	r3, [r3, #0]
   1ce56:	331f      	adds	r3, #31
   1ce58:	2200      	movs	r2, #0
   1ce5a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   1ce5c:	2392      	movs	r3, #146	; 0x92
   1ce5e:	009b      	lsls	r3, r3, #2
   1ce60:	18fb      	adds	r3, r7, r3
   1ce62:	681b      	ldr	r3, [r3, #0]
   1ce64:	3315      	adds	r3, #21
   1ce66:	781b      	ldrb	r3, [r3, #0]
   1ce68:	021b      	lsls	r3, r3, #8
   1ce6a:	b21a      	sxth	r2, r3
   1ce6c:	2392      	movs	r3, #146	; 0x92
   1ce6e:	009b      	lsls	r3, r3, #2
   1ce70:	18fb      	adds	r3, r7, r3
   1ce72:	681b      	ldr	r3, [r3, #0]
   1ce74:	3314      	adds	r3, #20
   1ce76:	781b      	ldrb	r3, [r3, #0]
   1ce78:	b21b      	sxth	r3, r3
   1ce7a:	4313      	orrs	r3, r2
   1ce7c:	b21b      	sxth	r3, r3
   1ce7e:	b29b      	uxth	r3, r3
   1ce80:	041b      	lsls	r3, r3, #16
   1ce82:	2292      	movs	r2, #146	; 0x92
   1ce84:	0092      	lsls	r2, r2, #2
   1ce86:	18ba      	adds	r2, r7, r2
   1ce88:	6812      	ldr	r2, [r2, #0]
   1ce8a:	321b      	adds	r2, #27
   1ce8c:	7812      	ldrb	r2, [r2, #0]
   1ce8e:	0212      	lsls	r2, r2, #8
   1ce90:	b211      	sxth	r1, r2
   1ce92:	2292      	movs	r2, #146	; 0x92
   1ce94:	0092      	lsls	r2, r2, #2
   1ce96:	18ba      	adds	r2, r7, r2
   1ce98:	6812      	ldr	r2, [r2, #0]
   1ce9a:	321a      	adds	r2, #26
   1ce9c:	7812      	ldrb	r2, [r2, #0]
   1ce9e:	b212      	sxth	r2, r2
   1cea0:	430a      	orrs	r2, r1
   1cea2:	b212      	sxth	r2, r2
   1cea4:	b292      	uxth	r2, r2
   1cea6:	4313      	orrs	r3, r2
   1cea8:	2290      	movs	r2, #144	; 0x90
   1ceaa:	0092      	lsls	r2, r2, #2
   1ceac:	18ba      	adds	r2, r7, r2
   1ceae:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   1ceb0:	2392      	movs	r3, #146	; 0x92
   1ceb2:	009b      	lsls	r3, r3, #2
   1ceb4:	18fb      	adds	r3, r7, r3
   1ceb6:	681b      	ldr	r3, [r3, #0]
   1ceb8:	331a      	adds	r3, #26
   1ceba:	2200      	movs	r2, #0
   1cebc:	701a      	strb	r2, [r3, #0]
   1cebe:	2392      	movs	r3, #146	; 0x92
   1cec0:	009b      	lsls	r3, r3, #2
   1cec2:	18fb      	adds	r3, r7, r3
   1cec4:	681b      	ldr	r3, [r3, #0]
   1cec6:	331b      	adds	r3, #27
   1cec8:	2200      	movs	r2, #0
   1ceca:	701a      	strb	r2, [r3, #0]
   1cecc:	2392      	movs	r3, #146	; 0x92
   1cece:	009b      	lsls	r3, r3, #2
   1ced0:	18fb      	adds	r3, r7, r3
   1ced2:	681b      	ldr	r3, [r3, #0]
   1ced4:	3314      	adds	r3, #20
   1ced6:	2200      	movs	r2, #0
   1ced8:	701a      	strb	r2, [r3, #0]
   1ceda:	2392      	movs	r3, #146	; 0x92
   1cedc:	009b      	lsls	r3, r3, #2
   1cede:	18fb      	adds	r3, r7, r3
   1cee0:	681b      	ldr	r3, [r3, #0]
   1cee2:	3315      	adds	r3, #21
   1cee4:	2200      	movs	r2, #0
   1cee6:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   1cee8:	2387      	movs	r3, #135	; 0x87
   1ceea:	009b      	lsls	r3, r3, #2
   1ceec:	18fb      	adds	r3, r7, r3
   1ceee:	681b      	ldr	r3, [r3, #0]
   1cef0:	2201      	movs	r2, #1
   1cef2:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   1cef4:	2390      	movs	r3, #144	; 0x90
   1cef6:	009b      	lsls	r3, r3, #2
   1cef8:	18fb      	adds	r3, r7, r3
   1cefa:	681b      	ldr	r3, [r3, #0]
   1cefc:	2b00      	cmp	r3, #0
   1cefe:	d100      	bne.n	1cf02 <f_open+0x2fe>
   1cf00:	e076      	b.n	1cff0 <f_open+0x3ec>
				dw = dj.fs->winsect;
   1cf02:	2387      	movs	r3, #135	; 0x87
   1cf04:	009b      	lsls	r3, r3, #2
   1cf06:	18fb      	adds	r3, r7, r3
   1cf08:	681b      	ldr	r3, [r3, #0]
   1cf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf0c:	2291      	movs	r2, #145	; 0x91
   1cf0e:	0092      	lsls	r2, r2, #2
   1cf10:	18ba      	adds	r2, r7, r2
   1cf12:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   1cf14:	2387      	movs	r3, #135	; 0x87
   1cf16:	009b      	lsls	r3, r3, #2
   1cf18:	18fb      	adds	r3, r7, r3
   1cf1a:	681b      	ldr	r3, [r3, #0]
   1cf1c:	4a21      	ldr	r2, [pc, #132]	; (1cfa4 <f_open+0x3a0>)
   1cf1e:	18bc      	adds	r4, r7, r2
   1cf20:	2290      	movs	r2, #144	; 0x90
   1cf22:	0092      	lsls	r2, r2, #2
   1cf24:	18ba      	adds	r2, r7, r2
   1cf26:	6812      	ldr	r2, [r2, #0]
   1cf28:	0011      	movs	r1, r2
   1cf2a:	0018      	movs	r0, r3
   1cf2c:	4b22      	ldr	r3, [pc, #136]	; (1cfb8 <f_open+0x3b4>)
   1cf2e:	4798      	blx	r3
   1cf30:	0003      	movs	r3, r0
   1cf32:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   1cf34:	4b1b      	ldr	r3, [pc, #108]	; (1cfa4 <f_open+0x3a0>)
   1cf36:	18fb      	adds	r3, r7, r3
   1cf38:	781b      	ldrb	r3, [r3, #0]
   1cf3a:	2b00      	cmp	r3, #0
   1cf3c:	d158      	bne.n	1cff0 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   1cf3e:	2387      	movs	r3, #135	; 0x87
   1cf40:	009b      	lsls	r3, r3, #2
   1cf42:	18fb      	adds	r3, r7, r3
   1cf44:	681b      	ldr	r3, [r3, #0]
   1cf46:	2290      	movs	r2, #144	; 0x90
   1cf48:	0092      	lsls	r2, r2, #2
   1cf4a:	18ba      	adds	r2, r7, r2
   1cf4c:	6812      	ldr	r2, [r2, #0]
   1cf4e:	3a01      	subs	r2, #1
   1cf50:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   1cf52:	2387      	movs	r3, #135	; 0x87
   1cf54:	009b      	lsls	r3, r3, #2
   1cf56:	18fb      	adds	r3, r7, r3
   1cf58:	681b      	ldr	r3, [r3, #0]
   1cf5a:	4a12      	ldr	r2, [pc, #72]	; (1cfa4 <f_open+0x3a0>)
   1cf5c:	18bc      	adds	r4, r7, r2
   1cf5e:	2291      	movs	r2, #145	; 0x91
   1cf60:	0092      	lsls	r2, r2, #2
   1cf62:	18ba      	adds	r2, r7, r2
   1cf64:	6812      	ldr	r2, [r2, #0]
   1cf66:	0011      	movs	r1, r2
   1cf68:	0018      	movs	r0, r3
   1cf6a:	4b14      	ldr	r3, [pc, #80]	; (1cfbc <f_open+0x3b8>)
   1cf6c:	4798      	blx	r3
   1cf6e:	0003      	movs	r3, r0
   1cf70:	7023      	strb	r3, [r4, #0]
   1cf72:	e03d      	b.n	1cff0 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   1cf74:	4b0b      	ldr	r3, [pc, #44]	; (1cfa4 <f_open+0x3a0>)
   1cf76:	18fb      	adds	r3, r7, r3
   1cf78:	781b      	ldrb	r3, [r3, #0]
   1cf7a:	2b00      	cmp	r3, #0
   1cf7c:	d138      	bne.n	1cff0 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1cf7e:	2392      	movs	r3, #146	; 0x92
   1cf80:	009b      	lsls	r3, r3, #2
   1cf82:	18fb      	adds	r3, r7, r3
   1cf84:	681b      	ldr	r3, [r3, #0]
   1cf86:	330b      	adds	r3, #11
   1cf88:	781b      	ldrb	r3, [r3, #0]
   1cf8a:	001a      	movs	r2, r3
   1cf8c:	2310      	movs	r3, #16
   1cf8e:	4013      	ands	r3, r2
   1cf90:	d016      	beq.n	1cfc0 <f_open+0x3bc>
				res = FR_NO_FILE;
   1cf92:	4b04      	ldr	r3, [pc, #16]	; (1cfa4 <f_open+0x3a0>)
   1cf94:	18fb      	adds	r3, r7, r3
   1cf96:	2204      	movs	r2, #4
   1cf98:	701a      	strb	r2, [r3, #0]
   1cf9a:	e029      	b.n	1cff0 <f_open+0x3ec>
   1cf9c:	fffffdac 	.word	0xfffffdac
   1cfa0:	fffffdb7 	.word	0xfffffdb7
   1cfa4:	0000024f 	.word	0x0000024f
   1cfa8:	0001c55d 	.word	0x0001c55d
   1cfac:	0001c351 	.word	0x0001c351
   1cfb0:	0001bba1 	.word	0x0001bba1
   1cfb4:	0001a999 	.word	0x0001a999
   1cfb8:	0001b11d 	.word	0x0001b11d
   1cfbc:	0001aadd 	.word	0x0001aadd
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1cfc0:	4b5a      	ldr	r3, [pc, #360]	; (1d12c <f_open+0x528>)
   1cfc2:	2294      	movs	r2, #148	; 0x94
   1cfc4:	0092      	lsls	r2, r2, #2
   1cfc6:	4694      	mov	ip, r2
   1cfc8:	44bc      	add	ip, r7
   1cfca:	4463      	add	r3, ip
   1cfcc:	781b      	ldrb	r3, [r3, #0]
   1cfce:	2202      	movs	r2, #2
   1cfd0:	4013      	ands	r3, r2
   1cfd2:	d00d      	beq.n	1cff0 <f_open+0x3ec>
   1cfd4:	2392      	movs	r3, #146	; 0x92
   1cfd6:	009b      	lsls	r3, r3, #2
   1cfd8:	18fb      	adds	r3, r7, r3
   1cfda:	681b      	ldr	r3, [r3, #0]
   1cfdc:	330b      	adds	r3, #11
   1cfde:	781b      	ldrb	r3, [r3, #0]
   1cfe0:	001a      	movs	r2, r3
   1cfe2:	2301      	movs	r3, #1
   1cfe4:	4013      	ands	r3, r2
   1cfe6:	d003      	beq.n	1cff0 <f_open+0x3ec>
					res = FR_DENIED;
   1cfe8:	4b51      	ldr	r3, [pc, #324]	; (1d130 <f_open+0x52c>)
   1cfea:	18fb      	adds	r3, r7, r3
   1cfec:	2207      	movs	r2, #7
   1cfee:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   1cff0:	4b4f      	ldr	r3, [pc, #316]	; (1d130 <f_open+0x52c>)
   1cff2:	18fb      	adds	r3, r7, r3
   1cff4:	781b      	ldrb	r3, [r3, #0]
   1cff6:	2b00      	cmp	r3, #0
   1cff8:	d126      	bne.n	1d048 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1cffa:	4b4c      	ldr	r3, [pc, #304]	; (1d12c <f_open+0x528>)
   1cffc:	2294      	movs	r2, #148	; 0x94
   1cffe:	0092      	lsls	r2, r2, #2
   1d000:	4694      	mov	ip, r2
   1d002:	44bc      	add	ip, r7
   1d004:	4463      	add	r3, ip
   1d006:	781b      	ldrb	r3, [r3, #0]
   1d008:	2208      	movs	r2, #8
   1d00a:	4013      	ands	r3, r2
   1d00c:	d00f      	beq.n	1d02e <f_open+0x42a>
			mode |= FA__WRITTEN;
   1d00e:	4b47      	ldr	r3, [pc, #284]	; (1d12c <f_open+0x528>)
   1d010:	2294      	movs	r2, #148	; 0x94
   1d012:	0092      	lsls	r2, r2, #2
   1d014:	4694      	mov	ip, r2
   1d016:	44bc      	add	ip, r7
   1d018:	4463      	add	r3, ip
   1d01a:	4a44      	ldr	r2, [pc, #272]	; (1d12c <f_open+0x528>)
   1d01c:	2194      	movs	r1, #148	; 0x94
   1d01e:	0089      	lsls	r1, r1, #2
   1d020:	468c      	mov	ip, r1
   1d022:	44bc      	add	ip, r7
   1d024:	4462      	add	r2, ip
   1d026:	7812      	ldrb	r2, [r2, #0]
   1d028:	2120      	movs	r1, #32
   1d02a:	430a      	orrs	r2, r1
   1d02c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   1d02e:	2387      	movs	r3, #135	; 0x87
   1d030:	009b      	lsls	r3, r3, #2
   1d032:	18fb      	adds	r3, r7, r3
   1d034:	681b      	ldr	r3, [r3, #0]
   1d036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d038:	68fb      	ldr	r3, [r7, #12]
   1d03a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   1d03c:	68fb      	ldr	r3, [r7, #12]
   1d03e:	2292      	movs	r2, #146	; 0x92
   1d040:	0092      	lsls	r2, r2, #2
   1d042:	18ba      	adds	r2, r7, r2
   1d044:	6812      	ldr	r2, [r2, #0]
   1d046:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   1d048:	4b39      	ldr	r3, [pc, #228]	; (1d130 <f_open+0x52c>)
   1d04a:	18fb      	adds	r3, r7, r3
   1d04c:	781b      	ldrb	r3, [r3, #0]
   1d04e:	2b00      	cmp	r3, #0
   1d050:	d163      	bne.n	1d11a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   1d052:	68fb      	ldr	r3, [r7, #12]
   1d054:	4a35      	ldr	r2, [pc, #212]	; (1d12c <f_open+0x528>)
   1d056:	2194      	movs	r1, #148	; 0x94
   1d058:	0089      	lsls	r1, r1, #2
   1d05a:	468c      	mov	ip, r1
   1d05c:	44bc      	add	ip, r7
   1d05e:	4462      	add	r2, ip
   1d060:	7812      	ldrb	r2, [r2, #0]
   1d062:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   1d064:	2392      	movs	r3, #146	; 0x92
   1d066:	009b      	lsls	r3, r3, #2
   1d068:	18fb      	adds	r3, r7, r3
   1d06a:	681b      	ldr	r3, [r3, #0]
   1d06c:	3315      	adds	r3, #21
   1d06e:	781b      	ldrb	r3, [r3, #0]
   1d070:	021b      	lsls	r3, r3, #8
   1d072:	b21a      	sxth	r2, r3
   1d074:	2392      	movs	r3, #146	; 0x92
   1d076:	009b      	lsls	r3, r3, #2
   1d078:	18fb      	adds	r3, r7, r3
   1d07a:	681b      	ldr	r3, [r3, #0]
   1d07c:	3314      	adds	r3, #20
   1d07e:	781b      	ldrb	r3, [r3, #0]
   1d080:	b21b      	sxth	r3, r3
   1d082:	4313      	orrs	r3, r2
   1d084:	b21b      	sxth	r3, r3
   1d086:	b29b      	uxth	r3, r3
   1d088:	041b      	lsls	r3, r3, #16
   1d08a:	2292      	movs	r2, #146	; 0x92
   1d08c:	0092      	lsls	r2, r2, #2
   1d08e:	18ba      	adds	r2, r7, r2
   1d090:	6812      	ldr	r2, [r2, #0]
   1d092:	321b      	adds	r2, #27
   1d094:	7812      	ldrb	r2, [r2, #0]
   1d096:	0212      	lsls	r2, r2, #8
   1d098:	b211      	sxth	r1, r2
   1d09a:	2292      	movs	r2, #146	; 0x92
   1d09c:	0092      	lsls	r2, r2, #2
   1d09e:	18ba      	adds	r2, r7, r2
   1d0a0:	6812      	ldr	r2, [r2, #0]
   1d0a2:	321a      	adds	r2, #26
   1d0a4:	7812      	ldrb	r2, [r2, #0]
   1d0a6:	b212      	sxth	r2, r2
   1d0a8:	430a      	orrs	r2, r1
   1d0aa:	b212      	sxth	r2, r2
   1d0ac:	b292      	uxth	r2, r2
   1d0ae:	431a      	orrs	r2, r3
   1d0b0:	68fb      	ldr	r3, [r7, #12]
   1d0b2:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1d0b4:	2392      	movs	r3, #146	; 0x92
   1d0b6:	009b      	lsls	r3, r3, #2
   1d0b8:	18fb      	adds	r3, r7, r3
   1d0ba:	681b      	ldr	r3, [r3, #0]
   1d0bc:	331f      	adds	r3, #31
   1d0be:	781b      	ldrb	r3, [r3, #0]
   1d0c0:	061a      	lsls	r2, r3, #24
   1d0c2:	2392      	movs	r3, #146	; 0x92
   1d0c4:	009b      	lsls	r3, r3, #2
   1d0c6:	18fb      	adds	r3, r7, r3
   1d0c8:	681b      	ldr	r3, [r3, #0]
   1d0ca:	331e      	adds	r3, #30
   1d0cc:	781b      	ldrb	r3, [r3, #0]
   1d0ce:	041b      	lsls	r3, r3, #16
   1d0d0:	4313      	orrs	r3, r2
   1d0d2:	2292      	movs	r2, #146	; 0x92
   1d0d4:	0092      	lsls	r2, r2, #2
   1d0d6:	18ba      	adds	r2, r7, r2
   1d0d8:	6812      	ldr	r2, [r2, #0]
   1d0da:	321d      	adds	r2, #29
   1d0dc:	7812      	ldrb	r2, [r2, #0]
   1d0de:	0212      	lsls	r2, r2, #8
   1d0e0:	4313      	orrs	r3, r2
   1d0e2:	2292      	movs	r2, #146	; 0x92
   1d0e4:	0092      	lsls	r2, r2, #2
   1d0e6:	18ba      	adds	r2, r7, r2
   1d0e8:	6812      	ldr	r2, [r2, #0]
   1d0ea:	321c      	adds	r2, #28
   1d0ec:	7812      	ldrb	r2, [r2, #0]
   1d0ee:	431a      	orrs	r2, r3
   1d0f0:	68fb      	ldr	r3, [r7, #12]
   1d0f2:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   1d0f4:	68fb      	ldr	r3, [r7, #12]
   1d0f6:	2200      	movs	r2, #0
   1d0f8:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   1d0fa:	68fb      	ldr	r3, [r7, #12]
   1d0fc:	2200      	movs	r2, #0
   1d0fe:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1d100:	2387      	movs	r3, #135	; 0x87
   1d102:	009b      	lsls	r3, r3, #2
   1d104:	18fb      	adds	r3, r7, r3
   1d106:	681a      	ldr	r2, [r3, #0]
   1d108:	68fb      	ldr	r3, [r7, #12]
   1d10a:	601a      	str	r2, [r3, #0]
   1d10c:	2387      	movs	r3, #135	; 0x87
   1d10e:	009b      	lsls	r3, r3, #2
   1d110:	18fb      	adds	r3, r7, r3
   1d112:	681b      	ldr	r3, [r3, #0]
   1d114:	88da      	ldrh	r2, [r3, #6]
   1d116:	68fb      	ldr	r3, [r7, #12]
   1d118:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   1d11a:	4b05      	ldr	r3, [pc, #20]	; (1d130 <f_open+0x52c>)
   1d11c:	18fb      	adds	r3, r7, r3
   1d11e:	781b      	ldrb	r3, [r3, #0]
}
   1d120:	0018      	movs	r0, r3
   1d122:	46bd      	mov	sp, r7
   1d124:	2395      	movs	r3, #149	; 0x95
   1d126:	009b      	lsls	r3, r3, #2
   1d128:	449d      	add	sp, r3
   1d12a:	bd90      	pop	{r4, r7, pc}
   1d12c:	fffffdb7 	.word	0xfffffdb7
   1d130:	0000024f 	.word	0x0000024f

0001d134 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   1d134:	b590      	push	{r4, r7, lr}
   1d136:	b08b      	sub	sp, #44	; 0x2c
   1d138:	af00      	add	r7, sp, #0
   1d13a:	60f8      	str	r0, [r7, #12]
   1d13c:	60b9      	str	r1, [r7, #8]
   1d13e:	607a      	str	r2, [r7, #4]
   1d140:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   1d142:	68bb      	ldr	r3, [r7, #8]
   1d144:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   1d146:	683b      	ldr	r3, [r7, #0]
   1d148:	2200      	movs	r2, #0
   1d14a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   1d14c:	68fb      	ldr	r3, [r7, #12]
   1d14e:	681a      	ldr	r2, [r3, #0]
   1d150:	68fb      	ldr	r3, [r7, #12]
   1d152:	889b      	ldrh	r3, [r3, #4]
   1d154:	2117      	movs	r1, #23
   1d156:	187c      	adds	r4, r7, r1
   1d158:	0019      	movs	r1, r3
   1d15a:	0010      	movs	r0, r2
   1d15c:	4bc3      	ldr	r3, [pc, #780]	; (1d46c <f_write+0x338>)
   1d15e:	4798      	blx	r3
   1d160:	0003      	movs	r3, r0
   1d162:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   1d164:	2317      	movs	r3, #23
   1d166:	18fb      	adds	r3, r7, r3
   1d168:	781b      	ldrb	r3, [r3, #0]
   1d16a:	2b00      	cmp	r3, #0
   1d16c:	d003      	beq.n	1d176 <f_write+0x42>
   1d16e:	2317      	movs	r3, #23
   1d170:	18fb      	adds	r3, r7, r3
   1d172:	781b      	ldrb	r3, [r3, #0]
   1d174:	e176      	b.n	1d464 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   1d176:	68fb      	ldr	r3, [r7, #12]
   1d178:	799b      	ldrb	r3, [r3, #6]
   1d17a:	b25b      	sxtb	r3, r3
   1d17c:	2b00      	cmp	r3, #0
   1d17e:	da01      	bge.n	1d184 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   1d180:	2302      	movs	r3, #2
   1d182:	e16f      	b.n	1d464 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   1d184:	68fb      	ldr	r3, [r7, #12]
   1d186:	799b      	ldrb	r3, [r3, #6]
   1d188:	001a      	movs	r2, r3
   1d18a:	2302      	movs	r3, #2
   1d18c:	4013      	ands	r3, r2
   1d18e:	d101      	bne.n	1d194 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   1d190:	2307      	movs	r3, #7
   1d192:	e167      	b.n	1d464 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   1d194:	68fb      	ldr	r3, [r7, #12]
   1d196:	68da      	ldr	r2, [r3, #12]
   1d198:	687b      	ldr	r3, [r7, #4]
   1d19a:	18d2      	adds	r2, r2, r3
   1d19c:	68fb      	ldr	r3, [r7, #12]
   1d19e:	68db      	ldr	r3, [r3, #12]
   1d1a0:	429a      	cmp	r2, r3
   1d1a2:	d300      	bcc.n	1d1a6 <f_write+0x72>
   1d1a4:	e146      	b.n	1d434 <f_write+0x300>
   1d1a6:	2300      	movs	r3, #0
   1d1a8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   1d1aa:	e143      	b.n	1d434 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   1d1ac:	68fb      	ldr	r3, [r7, #12]
   1d1ae:	689b      	ldr	r3, [r3, #8]
   1d1b0:	05db      	lsls	r3, r3, #23
   1d1b2:	0ddb      	lsrs	r3, r3, #23
   1d1b4:	d000      	beq.n	1d1b8 <f_write+0x84>
   1d1b6:	e0f6      	b.n	1d3a6 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1d1b8:	68fb      	ldr	r3, [r7, #12]
   1d1ba:	689b      	ldr	r3, [r3, #8]
   1d1bc:	0a5b      	lsrs	r3, r3, #9
   1d1be:	b2da      	uxtb	r2, r3
   1d1c0:	68fb      	ldr	r3, [r7, #12]
   1d1c2:	681b      	ldr	r3, [r3, #0]
   1d1c4:	789b      	ldrb	r3, [r3, #2]
   1d1c6:	3b01      	subs	r3, #1
   1d1c8:	b2d9      	uxtb	r1, r3
   1d1ca:	2316      	movs	r3, #22
   1d1cc:	18fb      	adds	r3, r7, r3
   1d1ce:	400a      	ands	r2, r1
   1d1d0:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   1d1d2:	2316      	movs	r3, #22
   1d1d4:	18fb      	adds	r3, r7, r3
   1d1d6:	781b      	ldrb	r3, [r3, #0]
   1d1d8:	2b00      	cmp	r3, #0
   1d1da:	d140      	bne.n	1d25e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1d1dc:	68fb      	ldr	r3, [r7, #12]
   1d1de:	689b      	ldr	r3, [r3, #8]
   1d1e0:	2b00      	cmp	r3, #0
   1d1e2:	d111      	bne.n	1d208 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   1d1e4:	68fb      	ldr	r3, [r7, #12]
   1d1e6:	691b      	ldr	r3, [r3, #16]
   1d1e8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   1d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d1ec:	2b00      	cmp	r3, #0
   1d1ee:	d115      	bne.n	1d21c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   1d1f0:	68fb      	ldr	r3, [r7, #12]
   1d1f2:	681b      	ldr	r3, [r3, #0]
   1d1f4:	2100      	movs	r1, #0
   1d1f6:	0018      	movs	r0, r3
   1d1f8:	4b9d      	ldr	r3, [pc, #628]	; (1d470 <f_write+0x33c>)
   1d1fa:	4798      	blx	r3
   1d1fc:	0003      	movs	r3, r0
   1d1fe:	627b      	str	r3, [r7, #36]	; 0x24
   1d200:	68fb      	ldr	r3, [r7, #12]
   1d202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d204:	611a      	str	r2, [r3, #16]
   1d206:	e009      	b.n	1d21c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1d208:	68fb      	ldr	r3, [r7, #12]
   1d20a:	681a      	ldr	r2, [r3, #0]
   1d20c:	68fb      	ldr	r3, [r7, #12]
   1d20e:	695b      	ldr	r3, [r3, #20]
   1d210:	0019      	movs	r1, r3
   1d212:	0010      	movs	r0, r2
   1d214:	4b96      	ldr	r3, [pc, #600]	; (1d470 <f_write+0x33c>)
   1d216:	4798      	blx	r3
   1d218:	0003      	movs	r3, r0
   1d21a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d21e:	2b00      	cmp	r3, #0
   1d220:	d100      	bne.n	1d224 <f_write+0xf0>
   1d222:	e10c      	b.n	1d43e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d226:	2b01      	cmp	r3, #1
   1d228:	d109      	bne.n	1d23e <f_write+0x10a>
   1d22a:	68fb      	ldr	r3, [r7, #12]
   1d22c:	799b      	ldrb	r3, [r3, #6]
   1d22e:	2280      	movs	r2, #128	; 0x80
   1d230:	4252      	negs	r2, r2
   1d232:	4313      	orrs	r3, r2
   1d234:	b2da      	uxtb	r2, r3
   1d236:	68fb      	ldr	r3, [r7, #12]
   1d238:	719a      	strb	r2, [r3, #6]
   1d23a:	2302      	movs	r3, #2
   1d23c:	e112      	b.n	1d464 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d240:	3301      	adds	r3, #1
   1d242:	d109      	bne.n	1d258 <f_write+0x124>
   1d244:	68fb      	ldr	r3, [r7, #12]
   1d246:	799b      	ldrb	r3, [r3, #6]
   1d248:	2280      	movs	r2, #128	; 0x80
   1d24a:	4252      	negs	r2, r2
   1d24c:	4313      	orrs	r3, r2
   1d24e:	b2da      	uxtb	r2, r3
   1d250:	68fb      	ldr	r3, [r7, #12]
   1d252:	719a      	strb	r2, [r3, #6]
   1d254:	2301      	movs	r3, #1
   1d256:	e105      	b.n	1d464 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   1d258:	68fb      	ldr	r3, [r7, #12]
   1d25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d25c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1d25e:	68fb      	ldr	r3, [r7, #12]
   1d260:	681b      	ldr	r3, [r3, #0]
   1d262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d264:	68fb      	ldr	r3, [r7, #12]
   1d266:	699b      	ldr	r3, [r3, #24]
   1d268:	429a      	cmp	r2, r3
   1d26a:	d111      	bne.n	1d290 <f_write+0x15c>
   1d26c:	68fb      	ldr	r3, [r7, #12]
   1d26e:	681b      	ldr	r3, [r3, #0]
   1d270:	2100      	movs	r1, #0
   1d272:	0018      	movs	r0, r3
   1d274:	4b7f      	ldr	r3, [pc, #508]	; (1d474 <f_write+0x340>)
   1d276:	4798      	blx	r3
   1d278:	1e03      	subs	r3, r0, #0
   1d27a:	d009      	beq.n	1d290 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   1d27c:	68fb      	ldr	r3, [r7, #12]
   1d27e:	799b      	ldrb	r3, [r3, #6]
   1d280:	2280      	movs	r2, #128	; 0x80
   1d282:	4252      	negs	r2, r2
   1d284:	4313      	orrs	r3, r2
   1d286:	b2da      	uxtb	r2, r3
   1d288:	68fb      	ldr	r3, [r7, #12]
   1d28a:	719a      	strb	r2, [r3, #6]
   1d28c:	2301      	movs	r3, #1
   1d28e:	e0e9      	b.n	1d464 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1d290:	68fb      	ldr	r3, [r7, #12]
   1d292:	681a      	ldr	r2, [r3, #0]
   1d294:	68fb      	ldr	r3, [r7, #12]
   1d296:	695b      	ldr	r3, [r3, #20]
   1d298:	0019      	movs	r1, r3
   1d29a:	0010      	movs	r0, r2
   1d29c:	4b76      	ldr	r3, [pc, #472]	; (1d478 <f_write+0x344>)
   1d29e:	4798      	blx	r3
   1d2a0:	0003      	movs	r3, r0
   1d2a2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1d2a4:	693b      	ldr	r3, [r7, #16]
   1d2a6:	2b00      	cmp	r3, #0
   1d2a8:	d109      	bne.n	1d2be <f_write+0x18a>
   1d2aa:	68fb      	ldr	r3, [r7, #12]
   1d2ac:	799b      	ldrb	r3, [r3, #6]
   1d2ae:	2280      	movs	r2, #128	; 0x80
   1d2b0:	4252      	negs	r2, r2
   1d2b2:	4313      	orrs	r3, r2
   1d2b4:	b2da      	uxtb	r2, r3
   1d2b6:	68fb      	ldr	r3, [r7, #12]
   1d2b8:	719a      	strb	r2, [r3, #6]
   1d2ba:	2302      	movs	r3, #2
   1d2bc:	e0d2      	b.n	1d464 <f_write+0x330>
			sect += csect;
   1d2be:	2316      	movs	r3, #22
   1d2c0:	18fb      	adds	r3, r7, r3
   1d2c2:	781b      	ldrb	r3, [r3, #0]
   1d2c4:	693a      	ldr	r2, [r7, #16]
   1d2c6:	18d3      	adds	r3, r2, r3
   1d2c8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1d2ca:	687b      	ldr	r3, [r7, #4]
   1d2cc:	0a5b      	lsrs	r3, r3, #9
   1d2ce:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   1d2d0:	69fb      	ldr	r3, [r7, #28]
   1d2d2:	2b00      	cmp	r3, #0
   1d2d4:	d048      	beq.n	1d368 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1d2d6:	2316      	movs	r3, #22
   1d2d8:	18fb      	adds	r3, r7, r3
   1d2da:	781a      	ldrb	r2, [r3, #0]
   1d2dc:	69fb      	ldr	r3, [r7, #28]
   1d2de:	18d2      	adds	r2, r2, r3
   1d2e0:	68fb      	ldr	r3, [r7, #12]
   1d2e2:	681b      	ldr	r3, [r3, #0]
   1d2e4:	789b      	ldrb	r3, [r3, #2]
   1d2e6:	429a      	cmp	r2, r3
   1d2e8:	d908      	bls.n	1d2fc <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   1d2ea:	68fb      	ldr	r3, [r7, #12]
   1d2ec:	681b      	ldr	r3, [r3, #0]
   1d2ee:	789b      	ldrb	r3, [r3, #2]
   1d2f0:	001a      	movs	r2, r3
   1d2f2:	2316      	movs	r3, #22
   1d2f4:	18fb      	adds	r3, r7, r3
   1d2f6:	781b      	ldrb	r3, [r3, #0]
   1d2f8:	1ad3      	subs	r3, r2, r3
   1d2fa:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   1d2fc:	68fb      	ldr	r3, [r7, #12]
   1d2fe:	681b      	ldr	r3, [r3, #0]
   1d300:	7858      	ldrb	r0, [r3, #1]
   1d302:	69fb      	ldr	r3, [r7, #28]
   1d304:	b2db      	uxtb	r3, r3
   1d306:	693a      	ldr	r2, [r7, #16]
   1d308:	69b9      	ldr	r1, [r7, #24]
   1d30a:	4c5c      	ldr	r4, [pc, #368]	; (1d47c <f_write+0x348>)
   1d30c:	47a0      	blx	r4
   1d30e:	1e03      	subs	r3, r0, #0
   1d310:	d009      	beq.n	1d326 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   1d312:	68fb      	ldr	r3, [r7, #12]
   1d314:	799b      	ldrb	r3, [r3, #6]
   1d316:	2280      	movs	r2, #128	; 0x80
   1d318:	4252      	negs	r2, r2
   1d31a:	4313      	orrs	r3, r2
   1d31c:	b2da      	uxtb	r2, r3
   1d31e:	68fb      	ldr	r3, [r7, #12]
   1d320:	719a      	strb	r2, [r3, #6]
   1d322:	2301      	movs	r3, #1
   1d324:	e09e      	b.n	1d464 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   1d326:	68fb      	ldr	r3, [r7, #12]
   1d328:	681b      	ldr	r3, [r3, #0]
   1d32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d32c:	693b      	ldr	r3, [r7, #16]
   1d32e:	1ad2      	subs	r2, r2, r3
   1d330:	69fb      	ldr	r3, [r7, #28]
   1d332:	429a      	cmp	r2, r3
   1d334:	d214      	bcs.n	1d360 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   1d336:	68fb      	ldr	r3, [r7, #12]
   1d338:	681b      	ldr	r3, [r3, #0]
   1d33a:	3330      	adds	r3, #48	; 0x30
   1d33c:	0018      	movs	r0, r3
   1d33e:	68fb      	ldr	r3, [r7, #12]
   1d340:	681b      	ldr	r3, [r3, #0]
   1d342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d344:	693b      	ldr	r3, [r7, #16]
   1d346:	1ad3      	subs	r3, r2, r3
   1d348:	025b      	lsls	r3, r3, #9
   1d34a:	69ba      	ldr	r2, [r7, #24]
   1d34c:	18d1      	adds	r1, r2, r3
   1d34e:	2380      	movs	r3, #128	; 0x80
   1d350:	009b      	lsls	r3, r3, #2
   1d352:	001a      	movs	r2, r3
   1d354:	4b4a      	ldr	r3, [pc, #296]	; (1d480 <f_write+0x34c>)
   1d356:	4798      	blx	r3
					fp->fs->wflag = 0;
   1d358:	68fb      	ldr	r3, [r7, #12]
   1d35a:	681b      	ldr	r3, [r3, #0]
   1d35c:	2200      	movs	r2, #0
   1d35e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   1d360:	69fb      	ldr	r3, [r7, #28]
   1d362:	025b      	lsls	r3, r3, #9
   1d364:	623b      	str	r3, [r7, #32]
				continue;
   1d366:	e051      	b.n	1d40c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   1d368:	68fb      	ldr	r3, [r7, #12]
   1d36a:	689a      	ldr	r2, [r3, #8]
   1d36c:	68fb      	ldr	r3, [r7, #12]
   1d36e:	68db      	ldr	r3, [r3, #12]
   1d370:	429a      	cmp	r2, r3
   1d372:	d315      	bcc.n	1d3a0 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1d374:	68fb      	ldr	r3, [r7, #12]
   1d376:	681b      	ldr	r3, [r3, #0]
   1d378:	2100      	movs	r1, #0
   1d37a:	0018      	movs	r0, r3
   1d37c:	4b3d      	ldr	r3, [pc, #244]	; (1d474 <f_write+0x340>)
   1d37e:	4798      	blx	r3
   1d380:	1e03      	subs	r3, r0, #0
   1d382:	d009      	beq.n	1d398 <f_write+0x264>
   1d384:	68fb      	ldr	r3, [r7, #12]
   1d386:	799b      	ldrb	r3, [r3, #6]
   1d388:	2280      	movs	r2, #128	; 0x80
   1d38a:	4252      	negs	r2, r2
   1d38c:	4313      	orrs	r3, r2
   1d38e:	b2da      	uxtb	r2, r3
   1d390:	68fb      	ldr	r3, [r7, #12]
   1d392:	719a      	strb	r2, [r3, #6]
   1d394:	2301      	movs	r3, #1
   1d396:	e065      	b.n	1d464 <f_write+0x330>
				fp->fs->winsect = sect;
   1d398:	68fb      	ldr	r3, [r7, #12]
   1d39a:	681b      	ldr	r3, [r3, #0]
   1d39c:	693a      	ldr	r2, [r7, #16]
   1d39e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   1d3a0:	68fb      	ldr	r3, [r7, #12]
   1d3a2:	693a      	ldr	r2, [r7, #16]
   1d3a4:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   1d3a6:	68fb      	ldr	r3, [r7, #12]
   1d3a8:	689b      	ldr	r3, [r3, #8]
   1d3aa:	05db      	lsls	r3, r3, #23
   1d3ac:	0ddb      	lsrs	r3, r3, #23
   1d3ae:	2280      	movs	r2, #128	; 0x80
   1d3b0:	0092      	lsls	r2, r2, #2
   1d3b2:	1ad3      	subs	r3, r2, r3
   1d3b4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   1d3b6:	6a3a      	ldr	r2, [r7, #32]
   1d3b8:	687b      	ldr	r3, [r7, #4]
   1d3ba:	429a      	cmp	r2, r3
   1d3bc:	d901      	bls.n	1d3c2 <f_write+0x28e>
   1d3be:	687b      	ldr	r3, [r7, #4]
   1d3c0:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   1d3c2:	68fb      	ldr	r3, [r7, #12]
   1d3c4:	681a      	ldr	r2, [r3, #0]
   1d3c6:	68fb      	ldr	r3, [r7, #12]
   1d3c8:	699b      	ldr	r3, [r3, #24]
   1d3ca:	0019      	movs	r1, r3
   1d3cc:	0010      	movs	r0, r2
   1d3ce:	4b29      	ldr	r3, [pc, #164]	; (1d474 <f_write+0x340>)
   1d3d0:	4798      	blx	r3
   1d3d2:	1e03      	subs	r3, r0, #0
   1d3d4:	d009      	beq.n	1d3ea <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   1d3d6:	68fb      	ldr	r3, [r7, #12]
   1d3d8:	799b      	ldrb	r3, [r3, #6]
   1d3da:	2280      	movs	r2, #128	; 0x80
   1d3dc:	4252      	negs	r2, r2
   1d3de:	4313      	orrs	r3, r2
   1d3e0:	b2da      	uxtb	r2, r3
   1d3e2:	68fb      	ldr	r3, [r7, #12]
   1d3e4:	719a      	strb	r2, [r3, #6]
   1d3e6:	2301      	movs	r3, #1
   1d3e8:	e03c      	b.n	1d464 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   1d3ea:	68fb      	ldr	r3, [r7, #12]
   1d3ec:	681a      	ldr	r2, [r3, #0]
   1d3ee:	68fb      	ldr	r3, [r7, #12]
   1d3f0:	689b      	ldr	r3, [r3, #8]
   1d3f2:	05db      	lsls	r3, r3, #23
   1d3f4:	0ddb      	lsrs	r3, r3, #23
   1d3f6:	3330      	adds	r3, #48	; 0x30
   1d3f8:	18d3      	adds	r3, r2, r3
   1d3fa:	6a3a      	ldr	r2, [r7, #32]
   1d3fc:	69b9      	ldr	r1, [r7, #24]
   1d3fe:	0018      	movs	r0, r3
   1d400:	4b1f      	ldr	r3, [pc, #124]	; (1d480 <f_write+0x34c>)
   1d402:	4798      	blx	r3
		fp->fs->wflag = 1;
   1d404:	68fb      	ldr	r3, [r7, #12]
   1d406:	681b      	ldr	r3, [r3, #0]
   1d408:	2201      	movs	r2, #1
   1d40a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1d40c:	69ba      	ldr	r2, [r7, #24]
   1d40e:	6a3b      	ldr	r3, [r7, #32]
   1d410:	18d3      	adds	r3, r2, r3
   1d412:	61bb      	str	r3, [r7, #24]
   1d414:	68fb      	ldr	r3, [r7, #12]
   1d416:	689a      	ldr	r2, [r3, #8]
   1d418:	6a3b      	ldr	r3, [r7, #32]
   1d41a:	18d2      	adds	r2, r2, r3
   1d41c:	68fb      	ldr	r3, [r7, #12]
   1d41e:	609a      	str	r2, [r3, #8]
   1d420:	683b      	ldr	r3, [r7, #0]
   1d422:	681a      	ldr	r2, [r3, #0]
   1d424:	6a3b      	ldr	r3, [r7, #32]
   1d426:	18d2      	adds	r2, r2, r3
   1d428:	683b      	ldr	r3, [r7, #0]
   1d42a:	601a      	str	r2, [r3, #0]
   1d42c:	687a      	ldr	r2, [r7, #4]
   1d42e:	6a3b      	ldr	r3, [r7, #32]
   1d430:	1ad3      	subs	r3, r2, r3
   1d432:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   1d434:	687b      	ldr	r3, [r7, #4]
   1d436:	2b00      	cmp	r3, #0
   1d438:	d000      	beq.n	1d43c <f_write+0x308>
   1d43a:	e6b7      	b.n	1d1ac <f_write+0x78>
   1d43c:	e000      	b.n	1d440 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1d43e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   1d440:	68fb      	ldr	r3, [r7, #12]
   1d442:	689a      	ldr	r2, [r3, #8]
   1d444:	68fb      	ldr	r3, [r7, #12]
   1d446:	68db      	ldr	r3, [r3, #12]
   1d448:	429a      	cmp	r2, r3
   1d44a:	d903      	bls.n	1d454 <f_write+0x320>
   1d44c:	68fb      	ldr	r3, [r7, #12]
   1d44e:	689a      	ldr	r2, [r3, #8]
   1d450:	68fb      	ldr	r3, [r7, #12]
   1d452:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   1d454:	68fb      	ldr	r3, [r7, #12]
   1d456:	799b      	ldrb	r3, [r3, #6]
   1d458:	2220      	movs	r2, #32
   1d45a:	4313      	orrs	r3, r2
   1d45c:	b2da      	uxtb	r2, r3
   1d45e:	68fb      	ldr	r3, [r7, #12]
   1d460:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   1d462:	2300      	movs	r3, #0
}
   1d464:	0018      	movs	r0, r3
   1d466:	46bd      	mov	sp, r7
   1d468:	b00b      	add	sp, #44	; 0x2c
   1d46a:	bd90      	pop	{r4, r7, pc}
   1d46c:	0001cb59 	.word	0x0001cb59
   1d470:	0001b1e5 	.word	0x0001b1e5
   1d474:	0001aadd 	.word	0x0001aadd
   1d478:	0001ad3d 	.word	0x0001ad3d
   1d47c:	0001a7c9 	.word	0x0001a7c9
   1d480:	0001a9f9 	.word	0x0001a9f9

0001d484 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   1d484:	b590      	push	{r4, r7, lr}
   1d486:	b087      	sub	sp, #28
   1d488:	af00      	add	r7, sp, #0
   1d48a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   1d48c:	687b      	ldr	r3, [r7, #4]
   1d48e:	681a      	ldr	r2, [r3, #0]
   1d490:	687b      	ldr	r3, [r7, #4]
   1d492:	889b      	ldrh	r3, [r3, #4]
   1d494:	2117      	movs	r1, #23
   1d496:	187c      	adds	r4, r7, r1
   1d498:	0019      	movs	r1, r3
   1d49a:	0010      	movs	r0, r2
   1d49c:	4b55      	ldr	r3, [pc, #340]	; (1d5f4 <f_sync+0x170>)
   1d49e:	4798      	blx	r3
   1d4a0:	0003      	movs	r3, r0
   1d4a2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1d4a4:	2317      	movs	r3, #23
   1d4a6:	18fb      	adds	r3, r7, r3
   1d4a8:	781b      	ldrb	r3, [r3, #0]
   1d4aa:	2b00      	cmp	r3, #0
   1d4ac:	d000      	beq.n	1d4b0 <f_sync+0x2c>
   1d4ae:	e09a      	b.n	1d5e6 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   1d4b0:	687b      	ldr	r3, [r7, #4]
   1d4b2:	799b      	ldrb	r3, [r3, #6]
   1d4b4:	001a      	movs	r2, r3
   1d4b6:	2320      	movs	r3, #32
   1d4b8:	4013      	ands	r3, r2
   1d4ba:	d100      	bne.n	1d4be <f_sync+0x3a>
   1d4bc:	e093      	b.n	1d5e6 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   1d4be:	687b      	ldr	r3, [r7, #4]
   1d4c0:	681a      	ldr	r2, [r3, #0]
   1d4c2:	687b      	ldr	r3, [r7, #4]
   1d4c4:	69db      	ldr	r3, [r3, #28]
   1d4c6:	2117      	movs	r1, #23
   1d4c8:	187c      	adds	r4, r7, r1
   1d4ca:	0019      	movs	r1, r3
   1d4cc:	0010      	movs	r0, r2
   1d4ce:	4b4a      	ldr	r3, [pc, #296]	; (1d5f8 <f_sync+0x174>)
   1d4d0:	4798      	blx	r3
   1d4d2:	0003      	movs	r3, r0
   1d4d4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   1d4d6:	2317      	movs	r3, #23
   1d4d8:	18fb      	adds	r3, r7, r3
   1d4da:	781b      	ldrb	r3, [r3, #0]
   1d4dc:	2b00      	cmp	r3, #0
   1d4de:	d000      	beq.n	1d4e2 <f_sync+0x5e>
   1d4e0:	e081      	b.n	1d5e6 <f_sync+0x162>
				dir = fp->dir_ptr;
   1d4e2:	687b      	ldr	r3, [r7, #4]
   1d4e4:	6a1b      	ldr	r3, [r3, #32]
   1d4e6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   1d4e8:	693b      	ldr	r3, [r7, #16]
   1d4ea:	330b      	adds	r3, #11
   1d4ec:	693a      	ldr	r2, [r7, #16]
   1d4ee:	320b      	adds	r2, #11
   1d4f0:	7812      	ldrb	r2, [r2, #0]
   1d4f2:	2120      	movs	r1, #32
   1d4f4:	430a      	orrs	r2, r1
   1d4f6:	b2d2      	uxtb	r2, r2
   1d4f8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1d4fa:	693b      	ldr	r3, [r7, #16]
   1d4fc:	331c      	adds	r3, #28
   1d4fe:	001a      	movs	r2, r3
   1d500:	687b      	ldr	r3, [r7, #4]
   1d502:	68db      	ldr	r3, [r3, #12]
   1d504:	b2db      	uxtb	r3, r3
   1d506:	7013      	strb	r3, [r2, #0]
   1d508:	693b      	ldr	r3, [r7, #16]
   1d50a:	331d      	adds	r3, #29
   1d50c:	001a      	movs	r2, r3
   1d50e:	687b      	ldr	r3, [r7, #4]
   1d510:	68db      	ldr	r3, [r3, #12]
   1d512:	b29b      	uxth	r3, r3
   1d514:	0a1b      	lsrs	r3, r3, #8
   1d516:	b29b      	uxth	r3, r3
   1d518:	b2db      	uxtb	r3, r3
   1d51a:	7013      	strb	r3, [r2, #0]
   1d51c:	693b      	ldr	r3, [r7, #16]
   1d51e:	331e      	adds	r3, #30
   1d520:	001a      	movs	r2, r3
   1d522:	687b      	ldr	r3, [r7, #4]
   1d524:	68db      	ldr	r3, [r3, #12]
   1d526:	0c1b      	lsrs	r3, r3, #16
   1d528:	b2db      	uxtb	r3, r3
   1d52a:	7013      	strb	r3, [r2, #0]
   1d52c:	693b      	ldr	r3, [r7, #16]
   1d52e:	331f      	adds	r3, #31
   1d530:	001a      	movs	r2, r3
   1d532:	687b      	ldr	r3, [r7, #4]
   1d534:	68db      	ldr	r3, [r3, #12]
   1d536:	0e1b      	lsrs	r3, r3, #24
   1d538:	b2db      	uxtb	r3, r3
   1d53a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   1d53c:	693b      	ldr	r3, [r7, #16]
   1d53e:	331a      	adds	r3, #26
   1d540:	001a      	movs	r2, r3
   1d542:	687b      	ldr	r3, [r7, #4]
   1d544:	691b      	ldr	r3, [r3, #16]
   1d546:	b2db      	uxtb	r3, r3
   1d548:	7013      	strb	r3, [r2, #0]
   1d54a:	693b      	ldr	r3, [r7, #16]
   1d54c:	331b      	adds	r3, #27
   1d54e:	001a      	movs	r2, r3
   1d550:	687b      	ldr	r3, [r7, #4]
   1d552:	691b      	ldr	r3, [r3, #16]
   1d554:	b29b      	uxth	r3, r3
   1d556:	0a1b      	lsrs	r3, r3, #8
   1d558:	b29b      	uxth	r3, r3
   1d55a:	b2db      	uxtb	r3, r3
   1d55c:	7013      	strb	r3, [r2, #0]
   1d55e:	693b      	ldr	r3, [r7, #16]
   1d560:	3314      	adds	r3, #20
   1d562:	001a      	movs	r2, r3
   1d564:	687b      	ldr	r3, [r7, #4]
   1d566:	691b      	ldr	r3, [r3, #16]
   1d568:	0c1b      	lsrs	r3, r3, #16
   1d56a:	b2db      	uxtb	r3, r3
   1d56c:	7013      	strb	r3, [r2, #0]
   1d56e:	693b      	ldr	r3, [r7, #16]
   1d570:	3315      	adds	r3, #21
   1d572:	001a      	movs	r2, r3
   1d574:	687b      	ldr	r3, [r7, #4]
   1d576:	691b      	ldr	r3, [r3, #16]
   1d578:	0c1b      	lsrs	r3, r3, #16
   1d57a:	b29b      	uxth	r3, r3
   1d57c:	0a1b      	lsrs	r3, r3, #8
   1d57e:	b29b      	uxth	r3, r3
   1d580:	b2db      	uxtb	r3, r3
   1d582:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   1d584:	4b1d      	ldr	r3, [pc, #116]	; (1d5fc <f_sync+0x178>)
   1d586:	4798      	blx	r3
   1d588:	0003      	movs	r3, r0
   1d58a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   1d58c:	693b      	ldr	r3, [r7, #16]
   1d58e:	3316      	adds	r3, #22
   1d590:	68fa      	ldr	r2, [r7, #12]
   1d592:	b2d2      	uxtb	r2, r2
   1d594:	701a      	strb	r2, [r3, #0]
   1d596:	693b      	ldr	r3, [r7, #16]
   1d598:	3317      	adds	r3, #23
   1d59a:	68fa      	ldr	r2, [r7, #12]
   1d59c:	b292      	uxth	r2, r2
   1d59e:	0a12      	lsrs	r2, r2, #8
   1d5a0:	b292      	uxth	r2, r2
   1d5a2:	b2d2      	uxtb	r2, r2
   1d5a4:	701a      	strb	r2, [r3, #0]
   1d5a6:	693b      	ldr	r3, [r7, #16]
   1d5a8:	3318      	adds	r3, #24
   1d5aa:	68fa      	ldr	r2, [r7, #12]
   1d5ac:	0c12      	lsrs	r2, r2, #16
   1d5ae:	b2d2      	uxtb	r2, r2
   1d5b0:	701a      	strb	r2, [r3, #0]
   1d5b2:	693b      	ldr	r3, [r7, #16]
   1d5b4:	3319      	adds	r3, #25
   1d5b6:	68fa      	ldr	r2, [r7, #12]
   1d5b8:	0e12      	lsrs	r2, r2, #24
   1d5ba:	b2d2      	uxtb	r2, r2
   1d5bc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   1d5be:	687b      	ldr	r3, [r7, #4]
   1d5c0:	799b      	ldrb	r3, [r3, #6]
   1d5c2:	2220      	movs	r2, #32
   1d5c4:	4393      	bics	r3, r2
   1d5c6:	b2da      	uxtb	r2, r3
   1d5c8:	687b      	ldr	r3, [r7, #4]
   1d5ca:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   1d5cc:	687b      	ldr	r3, [r7, #4]
   1d5ce:	681b      	ldr	r3, [r3, #0]
   1d5d0:	2201      	movs	r2, #1
   1d5d2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   1d5d4:	687b      	ldr	r3, [r7, #4]
   1d5d6:	681b      	ldr	r3, [r3, #0]
   1d5d8:	2217      	movs	r2, #23
   1d5da:	18bc      	adds	r4, r7, r2
   1d5dc:	0018      	movs	r0, r3
   1d5de:	4b08      	ldr	r3, [pc, #32]	; (1d600 <f_sync+0x17c>)
   1d5e0:	4798      	blx	r3
   1d5e2:	0003      	movs	r3, r0
   1d5e4:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   1d5e6:	2317      	movs	r3, #23
   1d5e8:	18fb      	adds	r3, r7, r3
   1d5ea:	781b      	ldrb	r3, [r3, #0]
}
   1d5ec:	0018      	movs	r0, r3
   1d5ee:	46bd      	mov	sp, r7
   1d5f0:	b007      	add	sp, #28
   1d5f2:	bd90      	pop	{r4, r7, pc}
   1d5f4:	0001cb59 	.word	0x0001cb59
   1d5f8:	0001aadd 	.word	0x0001aadd
   1d5fc:	0001a999 	.word	0x0001a999
   1d600:	0001aba5 	.word	0x0001aba5

0001d604 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   1d604:	b590      	push	{r4, r7, lr}
   1d606:	b085      	sub	sp, #20
   1d608:	af00      	add	r7, sp, #0
   1d60a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   1d60c:	230f      	movs	r3, #15
   1d60e:	18fc      	adds	r4, r7, r3
   1d610:	687b      	ldr	r3, [r7, #4]
   1d612:	0018      	movs	r0, r3
   1d614:	4b09      	ldr	r3, [pc, #36]	; (1d63c <f_close+0x38>)
   1d616:	4798      	blx	r3
   1d618:	0003      	movs	r3, r0
   1d61a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   1d61c:	230f      	movs	r3, #15
   1d61e:	18fb      	adds	r3, r7, r3
   1d620:	781b      	ldrb	r3, [r3, #0]
   1d622:	2b00      	cmp	r3, #0
   1d624:	d102      	bne.n	1d62c <f_close+0x28>
   1d626:	687b      	ldr	r3, [r7, #4]
   1d628:	2200      	movs	r2, #0
   1d62a:	601a      	str	r2, [r3, #0]
	return res;
   1d62c:	230f      	movs	r3, #15
   1d62e:	18fb      	adds	r3, r7, r3
   1d630:	781b      	ldrb	r3, [r3, #0]
#endif
}
   1d632:	0018      	movs	r0, r3
   1d634:	46bd      	mov	sp, r7
   1d636:	b005      	add	sp, #20
   1d638:	bd90      	pop	{r4, r7, pc}
   1d63a:	46c0      	nop			; (mov r8, r8)
   1d63c:	0001d485 	.word	0x0001d485

0001d640 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   1d640:	b580      	push	{r7, lr}
   1d642:	b084      	sub	sp, #16
   1d644:	af00      	add	r7, sp, #0
   1d646:	0002      	movs	r2, r0
   1d648:	6039      	str	r1, [r7, #0]
   1d64a:	1dbb      	adds	r3, r7, #6
   1d64c:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   1d64e:	1dbb      	adds	r3, r7, #6
   1d650:	881b      	ldrh	r3, [r3, #0]
   1d652:	2b7f      	cmp	r3, #127	; 0x7f
   1d654:	d805      	bhi.n	1d662 <ff_convert+0x22>
		c = src;
   1d656:	230e      	movs	r3, #14
   1d658:	18fb      	adds	r3, r7, r3
   1d65a:	1dba      	adds	r2, r7, #6
   1d65c:	8812      	ldrh	r2, [r2, #0]
   1d65e:	801a      	strh	r2, [r3, #0]
   1d660:	e03a      	b.n	1d6d8 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   1d662:	683b      	ldr	r3, [r7, #0]
   1d664:	2b00      	cmp	r3, #0
   1d666:	d010      	beq.n	1d68a <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   1d668:	1dbb      	adds	r3, r7, #6
   1d66a:	881b      	ldrh	r3, [r3, #0]
   1d66c:	2bff      	cmp	r3, #255	; 0xff
   1d66e:	d807      	bhi.n	1d680 <ff_convert+0x40>
   1d670:	1dbb      	adds	r3, r7, #6
   1d672:	881b      	ldrh	r3, [r3, #0]
   1d674:	3b80      	subs	r3, #128	; 0x80
   1d676:	001a      	movs	r2, r3
   1d678:	4b1b      	ldr	r3, [pc, #108]	; (1d6e8 <ff_convert+0xa8>)
   1d67a:	0052      	lsls	r2, r2, #1
   1d67c:	5ad2      	ldrh	r2, [r2, r3]
   1d67e:	e000      	b.n	1d682 <ff_convert+0x42>
   1d680:	2200      	movs	r2, #0
   1d682:	230e      	movs	r3, #14
   1d684:	18fb      	adds	r3, r7, r3
   1d686:	801a      	strh	r2, [r3, #0]
   1d688:	e026      	b.n	1d6d8 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   1d68a:	230e      	movs	r3, #14
   1d68c:	18fb      	adds	r3, r7, r3
   1d68e:	2200      	movs	r2, #0
   1d690:	801a      	strh	r2, [r3, #0]
   1d692:	e010      	b.n	1d6b6 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   1d694:	230e      	movs	r3, #14
   1d696:	18fb      	adds	r3, r7, r3
   1d698:	881a      	ldrh	r2, [r3, #0]
   1d69a:	4b13      	ldr	r3, [pc, #76]	; (1d6e8 <ff_convert+0xa8>)
   1d69c:	0052      	lsls	r2, r2, #1
   1d69e:	5ad3      	ldrh	r3, [r2, r3]
   1d6a0:	1dba      	adds	r2, r7, #6
   1d6a2:	8812      	ldrh	r2, [r2, #0]
   1d6a4:	429a      	cmp	r2, r3
   1d6a6:	d00c      	beq.n	1d6c2 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   1d6a8:	230e      	movs	r3, #14
   1d6aa:	18fb      	adds	r3, r7, r3
   1d6ac:	881a      	ldrh	r2, [r3, #0]
   1d6ae:	230e      	movs	r3, #14
   1d6b0:	18fb      	adds	r3, r7, r3
   1d6b2:	3201      	adds	r2, #1
   1d6b4:	801a      	strh	r2, [r3, #0]
   1d6b6:	230e      	movs	r3, #14
   1d6b8:	18fb      	adds	r3, r7, r3
   1d6ba:	881b      	ldrh	r3, [r3, #0]
   1d6bc:	2b7f      	cmp	r3, #127	; 0x7f
   1d6be:	d9e9      	bls.n	1d694 <ff_convert+0x54>
   1d6c0:	e000      	b.n	1d6c4 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   1d6c2:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   1d6c4:	230e      	movs	r3, #14
   1d6c6:	18fb      	adds	r3, r7, r3
   1d6c8:	881b      	ldrh	r3, [r3, #0]
   1d6ca:	3380      	adds	r3, #128	; 0x80
   1d6cc:	b29a      	uxth	r2, r3
   1d6ce:	230e      	movs	r3, #14
   1d6d0:	18fb      	adds	r3, r7, r3
   1d6d2:	21ff      	movs	r1, #255	; 0xff
   1d6d4:	400a      	ands	r2, r1
   1d6d6:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   1d6d8:	230e      	movs	r3, #14
   1d6da:	18fb      	adds	r3, r7, r3
   1d6dc:	881b      	ldrh	r3, [r3, #0]
}
   1d6de:	0018      	movs	r0, r3
   1d6e0:	46bd      	mov	sp, r7
   1d6e2:	b004      	add	sp, #16
   1d6e4:	bd80      	pop	{r7, pc}
   1d6e6:	46c0      	nop			; (mov r8, r8)
   1d6e8:	000294f4 	.word	0x000294f4

0001d6ec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   1d6ec:	b580      	push	{r7, lr}
   1d6ee:	b084      	sub	sp, #16
   1d6f0:	af00      	add	r7, sp, #0
   1d6f2:	0002      	movs	r2, r0
   1d6f4:	1dbb      	adds	r3, r7, #6
   1d6f6:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   1d6f8:	2300      	movs	r3, #0
   1d6fa:	60fb      	str	r3, [r7, #12]
   1d6fc:	e002      	b.n	1d704 <ff_wtoupper+0x18>
   1d6fe:	68fb      	ldr	r3, [r7, #12]
   1d700:	3301      	adds	r3, #1
   1d702:	60fb      	str	r3, [r7, #12]
   1d704:	4b0f      	ldr	r3, [pc, #60]	; (1d744 <ff_wtoupper+0x58>)
   1d706:	68fa      	ldr	r2, [r7, #12]
   1d708:	0052      	lsls	r2, r2, #1
   1d70a:	5ad3      	ldrh	r3, [r2, r3]
   1d70c:	2b00      	cmp	r3, #0
   1d70e:	d007      	beq.n	1d720 <ff_wtoupper+0x34>
   1d710:	4b0c      	ldr	r3, [pc, #48]	; (1d744 <ff_wtoupper+0x58>)
   1d712:	68fa      	ldr	r2, [r7, #12]
   1d714:	0052      	lsls	r2, r2, #1
   1d716:	5ad3      	ldrh	r3, [r2, r3]
   1d718:	1dba      	adds	r2, r7, #6
   1d71a:	8812      	ldrh	r2, [r2, #0]
   1d71c:	429a      	cmp	r2, r3
   1d71e:	d1ee      	bne.n	1d6fe <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   1d720:	4b08      	ldr	r3, [pc, #32]	; (1d744 <ff_wtoupper+0x58>)
   1d722:	68fa      	ldr	r2, [r7, #12]
   1d724:	0052      	lsls	r2, r2, #1
   1d726:	5ad3      	ldrh	r3, [r2, r3]
   1d728:	2b00      	cmp	r3, #0
   1d72a:	d004      	beq.n	1d736 <ff_wtoupper+0x4a>
   1d72c:	4b06      	ldr	r3, [pc, #24]	; (1d748 <ff_wtoupper+0x5c>)
   1d72e:	68fa      	ldr	r2, [r7, #12]
   1d730:	0052      	lsls	r2, r2, #1
   1d732:	5ad3      	ldrh	r3, [r2, r3]
   1d734:	e001      	b.n	1d73a <ff_wtoupper+0x4e>
   1d736:	1dbb      	adds	r3, r7, #6
   1d738:	881b      	ldrh	r3, [r3, #0]
}
   1d73a:	0018      	movs	r0, r3
   1d73c:	46bd      	mov	sp, r7
   1d73e:	b004      	add	sp, #16
   1d740:	bd80      	pop	{r7, pc}
   1d742:	46c0      	nop			; (mov r8, r8)
   1d744:	000295f4 	.word	0x000295f4
   1d748:	000297d4 	.word	0x000297d4

0001d74c <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   1d74c:	b580      	push	{r7, lr}
   1d74e:	b084      	sub	sp, #16
   1d750:	af00      	add	r7, sp, #0
   1d752:	60f8      	str	r0, [r7, #12]
   1d754:	60b9      	str	r1, [r7, #8]
   1d756:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   1d758:	68fb      	ldr	r3, [r7, #12]
   1d75a:	68ba      	ldr	r2, [r7, #8]
   1d75c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   1d75e:	68fb      	ldr	r3, [r7, #12]
   1d760:	687a      	ldr	r2, [r7, #4]
   1d762:	601a      	str	r2, [r3, #0]
}
   1d764:	46c0      	nop			; (mov r8, r8)
   1d766:	46bd      	mov	sp, r7
   1d768:	b004      	add	sp, #16
   1d76a:	bd80      	pop	{r7, pc}

0001d76c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   1d76c:	b580      	push	{r7, lr}
   1d76e:	b082      	sub	sp, #8
   1d770:	af00      	add	r7, sp, #0
   1d772:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1d774:	687b      	ldr	r3, [r7, #4]
   1d776:	681b      	ldr	r3, [r3, #0]
   1d778:	4a07      	ldr	r2, [pc, #28]	; (1d798 <getNextPacketId+0x2c>)
   1d77a:	4293      	cmp	r3, r2
   1d77c:	d003      	beq.n	1d786 <getNextPacketId+0x1a>
   1d77e:	687b      	ldr	r3, [r7, #4]
   1d780:	681b      	ldr	r3, [r3, #0]
   1d782:	1c5a      	adds	r2, r3, #1
   1d784:	e000      	b.n	1d788 <getNextPacketId+0x1c>
   1d786:	2201      	movs	r2, #1
   1d788:	687b      	ldr	r3, [r7, #4]
   1d78a:	601a      	str	r2, [r3, #0]
   1d78c:	687b      	ldr	r3, [r7, #4]
   1d78e:	681b      	ldr	r3, [r3, #0]
}
   1d790:	0018      	movs	r0, r3
   1d792:	46bd      	mov	sp, r7
   1d794:	b002      	add	sp, #8
   1d796:	bd80      	pop	{r7, pc}
   1d798:	0000ffff 	.word	0x0000ffff

0001d79c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1d79c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d79e:	b087      	sub	sp, #28
   1d7a0:	af00      	add	r7, sp, #0
   1d7a2:	60f8      	str	r0, [r7, #12]
   1d7a4:	60b9      	str	r1, [r7, #8]
   1d7a6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   1d7a8:	2301      	movs	r3, #1
   1d7aa:	425b      	negs	r3, r3
   1d7ac:	617b      	str	r3, [r7, #20]
        sent = 0;
   1d7ae:	2300      	movs	r3, #0
   1d7b0:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   1d7b2:	e01a      	b.n	1d7ea <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1d7b4:	68fb      	ldr	r3, [r7, #12]
   1d7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1d7b8:	68dc      	ldr	r4, [r3, #12]
   1d7ba:	68fb      	ldr	r3, [r7, #12]
   1d7bc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1d7be:	68fb      	ldr	r3, [r7, #12]
   1d7c0:	691a      	ldr	r2, [r3, #16]
   1d7c2:	693b      	ldr	r3, [r7, #16]
   1d7c4:	18d6      	adds	r6, r2, r3
   1d7c6:	687b      	ldr	r3, [r7, #4]
   1d7c8:	0018      	movs	r0, r3
   1d7ca:	4b1a      	ldr	r3, [pc, #104]	; (1d834 <sendPacket+0x98>)
   1d7cc:	4798      	blx	r3
   1d7ce:	0003      	movs	r3, r0
   1d7d0:	68ba      	ldr	r2, [r7, #8]
   1d7d2:	0031      	movs	r1, r6
   1d7d4:	0028      	movs	r0, r5
   1d7d6:	47a0      	blx	r4
   1d7d8:	0003      	movs	r3, r0
   1d7da:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   1d7dc:	697b      	ldr	r3, [r7, #20]
   1d7de:	2b00      	cmp	r3, #0
   1d7e0:	db0e      	blt.n	1d800 <sendPacket+0x64>
            break;
        sent += rc;
   1d7e2:	693a      	ldr	r2, [r7, #16]
   1d7e4:	697b      	ldr	r3, [r7, #20]
   1d7e6:	18d3      	adds	r3, r2, r3
   1d7e8:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   1d7ea:	693a      	ldr	r2, [r7, #16]
   1d7ec:	68bb      	ldr	r3, [r7, #8]
   1d7ee:	429a      	cmp	r2, r3
   1d7f0:	da07      	bge.n	1d802 <sendPacket+0x66>
   1d7f2:	687b      	ldr	r3, [r7, #4]
   1d7f4:	0018      	movs	r0, r3
   1d7f6:	4b10      	ldr	r3, [pc, #64]	; (1d838 <sendPacket+0x9c>)
   1d7f8:	4798      	blx	r3
   1d7fa:	1e03      	subs	r3, r0, #0
   1d7fc:	d0da      	beq.n	1d7b4 <sendPacket+0x18>
   1d7fe:	e000      	b.n	1d802 <sendPacket+0x66>
            break;
   1d800:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   1d802:	693a      	ldr	r2, [r7, #16]
   1d804:	68bb      	ldr	r3, [r7, #8]
   1d806:	429a      	cmp	r2, r3
   1d808:	d10b      	bne.n	1d822 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1d80a:	68fb      	ldr	r3, [r7, #12]
   1d80c:	3354      	adds	r3, #84	; 0x54
   1d80e:	001a      	movs	r2, r3
   1d810:	68fb      	ldr	r3, [r7, #12]
   1d812:	699b      	ldr	r3, [r3, #24]
   1d814:	0019      	movs	r1, r3
   1d816:	0010      	movs	r0, r2
   1d818:	4b08      	ldr	r3, [pc, #32]	; (1d83c <sendPacket+0xa0>)
   1d81a:	4798      	blx	r3
        rc = SUCCESS;
   1d81c:	2300      	movs	r3, #0
   1d81e:	617b      	str	r3, [r7, #20]
   1d820:	e002      	b.n	1d828 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   1d822:	2301      	movs	r3, #1
   1d824:	425b      	negs	r3, r3
   1d826:	617b      	str	r3, [r7, #20]
    return rc;
   1d828:	697b      	ldr	r3, [r7, #20]
}
   1d82a:	0018      	movs	r0, r3
   1d82c:	46bd      	mov	sp, r7
   1d82e:	b007      	add	sp, #28
   1d830:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d832:	46c0      	nop			; (mov r8, r8)
   1d834:	0001e5fd 	.word	0x0001e5fd
   1d838:	0001e581 	.word	0x0001e581
   1d83c:	0001e5d5 	.word	0x0001e5d5

0001d840 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1d840:	b580      	push	{r7, lr}
   1d842:	b086      	sub	sp, #24
   1d844:	af00      	add	r7, sp, #0
   1d846:	60f8      	str	r0, [r7, #12]
   1d848:	60b9      	str	r1, [r7, #8]
   1d84a:	607a      	str	r2, [r7, #4]
   1d84c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   1d84e:	68fb      	ldr	r3, [r7, #12]
   1d850:	68ba      	ldr	r2, [r7, #8]
   1d852:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1d854:	2300      	movs	r3, #0
   1d856:	617b      	str	r3, [r7, #20]
   1d858:	e00a      	b.n	1d870 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   1d85a:	68fa      	ldr	r2, [r7, #12]
   1d85c:	697b      	ldr	r3, [r7, #20]
   1d85e:	3304      	adds	r3, #4
   1d860:	00db      	lsls	r3, r3, #3
   1d862:	18d3      	adds	r3, r2, r3
   1d864:	3304      	adds	r3, #4
   1d866:	2200      	movs	r2, #0
   1d868:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1d86a:	697b      	ldr	r3, [r7, #20]
   1d86c:	3301      	adds	r3, #1
   1d86e:	617b      	str	r3, [r7, #20]
   1d870:	697b      	ldr	r3, [r7, #20]
   1d872:	2b04      	cmp	r3, #4
   1d874:	ddf1      	ble.n	1d85a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   1d876:	68fb      	ldr	r3, [r7, #12]
   1d878:	687a      	ldr	r2, [r7, #4]
   1d87a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   1d87c:	68fb      	ldr	r3, [r7, #12]
   1d87e:	683a      	ldr	r2, [r7, #0]
   1d880:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   1d882:	68fb      	ldr	r3, [r7, #12]
   1d884:	6a3a      	ldr	r2, [r7, #32]
   1d886:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   1d888:	68fb      	ldr	r3, [r7, #12]
   1d88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d88c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   1d88e:	68fb      	ldr	r3, [r7, #12]
   1d890:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d892:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   1d894:	68fb      	ldr	r3, [r7, #12]
   1d896:	2200      	movs	r2, #0
   1d898:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   1d89a:	68fb      	ldr	r3, [r7, #12]
   1d89c:	2200      	movs	r2, #0
   1d89e:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   1d8a0:	68fb      	ldr	r3, [r7, #12]
   1d8a2:	2200      	movs	r2, #0
   1d8a4:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   1d8a6:	68fb      	ldr	r3, [r7, #12]
   1d8a8:	2201      	movs	r2, #1
   1d8aa:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   1d8ac:	68fb      	ldr	r3, [r7, #12]
   1d8ae:	3354      	adds	r3, #84	; 0x54
   1d8b0:	0018      	movs	r0, r3
   1d8b2:	4b03      	ldr	r3, [pc, #12]	; (1d8c0 <MQTTClientInit+0x80>)
   1d8b4:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   1d8b6:	46c0      	nop			; (mov r8, r8)
   1d8b8:	46bd      	mov	sp, r7
   1d8ba:	b006      	add	sp, #24
   1d8bc:	bd80      	pop	{r7, pc}
   1d8be:	46c0      	nop			; (mov r8, r8)
   1d8c0:	0001e625 	.word	0x0001e625

0001d8c4 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   1d8c4:	b590      	push	{r4, r7, lr}
   1d8c6:	b08b      	sub	sp, #44	; 0x2c
   1d8c8:	af00      	add	r7, sp, #0
   1d8ca:	60f8      	str	r0, [r7, #12]
   1d8cc:	60b9      	str	r1, [r7, #8]
   1d8ce:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   1d8d0:	2301      	movs	r3, #1
   1d8d2:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   1d8d4:	2300      	movs	r3, #0
   1d8d6:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   1d8d8:	2304      	movs	r3, #4
   1d8da:	61fb      	str	r3, [r7, #28]

    *value = 0;
   1d8dc:	68bb      	ldr	r3, [r7, #8]
   1d8de:	2200      	movs	r2, #0
   1d8e0:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   1d8e2:	2301      	movs	r3, #1
   1d8e4:	425b      	negs	r3, r3
   1d8e6:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1d8e8:	6a3b      	ldr	r3, [r7, #32]
   1d8ea:	3301      	adds	r3, #1
   1d8ec:	623b      	str	r3, [r7, #32]
   1d8ee:	6a3a      	ldr	r2, [r7, #32]
   1d8f0:	69fb      	ldr	r3, [r7, #28]
   1d8f2:	429a      	cmp	r2, r3
   1d8f4:	dd03      	ble.n	1d8fe <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   1d8f6:	2301      	movs	r3, #1
   1d8f8:	425b      	negs	r3, r3
   1d8fa:	61bb      	str	r3, [r7, #24]
            goto exit;
   1d8fc:	e026      	b.n	1d94c <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   1d8fe:	68fb      	ldr	r3, [r7, #12]
   1d900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1d902:	689c      	ldr	r4, [r3, #8]
   1d904:	68fb      	ldr	r3, [r7, #12]
   1d906:	6d18      	ldr	r0, [r3, #80]	; 0x50
   1d908:	687b      	ldr	r3, [r7, #4]
   1d90a:	2217      	movs	r2, #23
   1d90c:	18b9      	adds	r1, r7, r2
   1d90e:	2201      	movs	r2, #1
   1d910:	47a0      	blx	r4
   1d912:	0003      	movs	r3, r0
   1d914:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   1d916:	69bb      	ldr	r3, [r7, #24]
   1d918:	2b01      	cmp	r3, #1
   1d91a:	d116      	bne.n	1d94a <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   1d91c:	68bb      	ldr	r3, [r7, #8]
   1d91e:	681a      	ldr	r2, [r3, #0]
   1d920:	2317      	movs	r3, #23
   1d922:	18fb      	adds	r3, r7, r3
   1d924:	781b      	ldrb	r3, [r3, #0]
   1d926:	0019      	movs	r1, r3
   1d928:	237f      	movs	r3, #127	; 0x7f
   1d92a:	400b      	ands	r3, r1
   1d92c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1d92e:	434b      	muls	r3, r1
   1d930:	18d2      	adds	r2, r2, r3
   1d932:	68bb      	ldr	r3, [r7, #8]
   1d934:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   1d936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d938:	01db      	lsls	r3, r3, #7
   1d93a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   1d93c:	2317      	movs	r3, #23
   1d93e:	18fb      	adds	r3, r7, r3
   1d940:	781b      	ldrb	r3, [r3, #0]
   1d942:	b25b      	sxtb	r3, r3
   1d944:	2b00      	cmp	r3, #0
   1d946:	dbcc      	blt.n	1d8e2 <decodePacket+0x1e>
   1d948:	e000      	b.n	1d94c <decodePacket+0x88>
            goto exit;
   1d94a:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   1d94c:	6a3b      	ldr	r3, [r7, #32]
}
   1d94e:	0018      	movs	r0, r3
   1d950:	46bd      	mov	sp, r7
   1d952:	b00b      	add	sp, #44	; 0x2c
   1d954:	bd90      	pop	{r4, r7, pc}
	...

0001d958 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   1d958:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d95a:	46c6      	mov	lr, r8
   1d95c:	b500      	push	{lr}
   1d95e:	b086      	sub	sp, #24
   1d960:	af00      	add	r7, sp, #0
   1d962:	6078      	str	r0, [r7, #4]
   1d964:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   1d966:	2301      	movs	r3, #1
   1d968:	425b      	negs	r3, r3
   1d96a:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   1d96c:	2300      	movs	r3, #0
   1d96e:	60fb      	str	r3, [r7, #12]
    int len = 0;
   1d970:	2300      	movs	r3, #0
   1d972:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   1d974:	2300      	movs	r3, #0
   1d976:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   1d978:	687b      	ldr	r3, [r7, #4]
   1d97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1d97c:	689c      	ldr	r4, [r3, #8]
   1d97e:	687b      	ldr	r3, [r7, #4]
   1d980:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1d982:	687b      	ldr	r3, [r7, #4]
   1d984:	695e      	ldr	r6, [r3, #20]
   1d986:	683b      	ldr	r3, [r7, #0]
   1d988:	0018      	movs	r0, r3
   1d98a:	4b2b      	ldr	r3, [pc, #172]	; (1da38 <readPacket+0xe0>)
   1d98c:	4798      	blx	r3
   1d98e:	0003      	movs	r3, r0
   1d990:	2201      	movs	r2, #1
   1d992:	0031      	movs	r1, r6
   1d994:	0028      	movs	r0, r5
   1d996:	47a0      	blx	r4
   1d998:	0003      	movs	r3, r0
   1d99a:	2b01      	cmp	r3, #1
   1d99c:	d141      	bne.n	1da22 <readPacket+0xca>
        goto exit;

    len = 1;
   1d99e:	2301      	movs	r3, #1
   1d9a0:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   1d9a2:	683b      	ldr	r3, [r7, #0]
   1d9a4:	0018      	movs	r0, r3
   1d9a6:	4b24      	ldr	r3, [pc, #144]	; (1da38 <readPacket+0xe0>)
   1d9a8:	4798      	blx	r3
   1d9aa:	0002      	movs	r2, r0
   1d9ac:	2308      	movs	r3, #8
   1d9ae:	18f9      	adds	r1, r7, r3
   1d9b0:	687b      	ldr	r3, [r7, #4]
   1d9b2:	0018      	movs	r0, r3
   1d9b4:	4b21      	ldr	r3, [pc, #132]	; (1da3c <readPacket+0xe4>)
   1d9b6:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1d9b8:	687b      	ldr	r3, [r7, #4]
   1d9ba:	695b      	ldr	r3, [r3, #20]
   1d9bc:	3301      	adds	r3, #1
   1d9be:	68ba      	ldr	r2, [r7, #8]
   1d9c0:	0011      	movs	r1, r2
   1d9c2:	0018      	movs	r0, r3
   1d9c4:	4b1e      	ldr	r3, [pc, #120]	; (1da40 <readPacket+0xe8>)
   1d9c6:	4798      	blx	r3
   1d9c8:	0002      	movs	r2, r0
   1d9ca:	693b      	ldr	r3, [r7, #16]
   1d9cc:	189b      	adds	r3, r3, r2
   1d9ce:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1d9d0:	68bb      	ldr	r3, [r7, #8]
   1d9d2:	2b00      	cmp	r3, #0
   1d9d4:	dd17      	ble.n	1da06 <readPacket+0xae>
   1d9d6:	687b      	ldr	r3, [r7, #4]
   1d9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1d9da:	689c      	ldr	r4, [r3, #8]
   1d9dc:	687b      	ldr	r3, [r7, #4]
   1d9de:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1d9e0:	687b      	ldr	r3, [r7, #4]
   1d9e2:	695a      	ldr	r2, [r3, #20]
   1d9e4:	693b      	ldr	r3, [r7, #16]
   1d9e6:	18d6      	adds	r6, r2, r3
   1d9e8:	68bb      	ldr	r3, [r7, #8]
   1d9ea:	4698      	mov	r8, r3
   1d9ec:	683b      	ldr	r3, [r7, #0]
   1d9ee:	0018      	movs	r0, r3
   1d9f0:	4b11      	ldr	r3, [pc, #68]	; (1da38 <readPacket+0xe0>)
   1d9f2:	4798      	blx	r3
   1d9f4:	0003      	movs	r3, r0
   1d9f6:	4642      	mov	r2, r8
   1d9f8:	0031      	movs	r1, r6
   1d9fa:	0028      	movs	r0, r5
   1d9fc:	47a0      	blx	r4
   1d9fe:	0002      	movs	r2, r0
   1da00:	68bb      	ldr	r3, [r7, #8]
   1da02:	429a      	cmp	r2, r3
   1da04:	d10f      	bne.n	1da26 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   1da06:	687b      	ldr	r3, [r7, #4]
   1da08:	695b      	ldr	r3, [r3, #20]
   1da0a:	781a      	ldrb	r2, [r3, #0]
   1da0c:	230c      	movs	r3, #12
   1da0e:	18fb      	adds	r3, r7, r3
   1da10:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   1da12:	230c      	movs	r3, #12
   1da14:	18fb      	adds	r3, r7, r3
   1da16:	781b      	ldrb	r3, [r3, #0]
   1da18:	061b      	lsls	r3, r3, #24
   1da1a:	0f1b      	lsrs	r3, r3, #28
   1da1c:	b2db      	uxtb	r3, r3
   1da1e:	617b      	str	r3, [r7, #20]
   1da20:	e002      	b.n	1da28 <readPacket+0xd0>
        goto exit;
   1da22:	46c0      	nop			; (mov r8, r8)
   1da24:	e000      	b.n	1da28 <readPacket+0xd0>
        goto exit;
   1da26:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   1da28:	697b      	ldr	r3, [r7, #20]
}
   1da2a:	0018      	movs	r0, r3
   1da2c:	46bd      	mov	sp, r7
   1da2e:	b006      	add	sp, #24
   1da30:	bc04      	pop	{r2}
   1da32:	4690      	mov	r8, r2
   1da34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1da36:	46c0      	nop			; (mov r8, r8)
   1da38:	0001e5fd 	.word	0x0001e5fd
   1da3c:	0001d8c5 	.word	0x0001d8c5
   1da40:	0001f3d5 	.word	0x0001f3d5

0001da44 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   1da44:	b580      	push	{r7, lr}
   1da46:	b086      	sub	sp, #24
   1da48:	af00      	add	r7, sp, #0
   1da4a:	6078      	str	r0, [r7, #4]
   1da4c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   1da4e:	687b      	ldr	r3, [r7, #4]
   1da50:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   1da52:	683b      	ldr	r3, [r7, #0]
   1da54:	689b      	ldr	r3, [r3, #8]
   1da56:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   1da58:	683b      	ldr	r3, [r7, #0]
   1da5a:	685b      	ldr	r3, [r3, #4]
   1da5c:	001a      	movs	r2, r3
   1da5e:	693b      	ldr	r3, [r7, #16]
   1da60:	189b      	adds	r3, r3, r2
   1da62:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   1da64:	e039      	b.n	1dada <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   1da66:	693b      	ldr	r3, [r7, #16]
   1da68:	781b      	ldrb	r3, [r3, #0]
   1da6a:	2b2f      	cmp	r3, #47	; 0x2f
   1da6c:	d103      	bne.n	1da76 <isTopicMatched+0x32>
   1da6e:	697b      	ldr	r3, [r7, #20]
   1da70:	781b      	ldrb	r3, [r3, #0]
   1da72:	2b2f      	cmp	r3, #47	; 0x2f
   1da74:	d13a      	bne.n	1daec <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1da76:	697b      	ldr	r3, [r7, #20]
   1da78:	781b      	ldrb	r3, [r3, #0]
   1da7a:	2b2b      	cmp	r3, #43	; 0x2b
   1da7c:	d009      	beq.n	1da92 <isTopicMatched+0x4e>
   1da7e:	697b      	ldr	r3, [r7, #20]
   1da80:	781b      	ldrb	r3, [r3, #0]
   1da82:	2b23      	cmp	r3, #35	; 0x23
   1da84:	d005      	beq.n	1da92 <isTopicMatched+0x4e>
   1da86:	697b      	ldr	r3, [r7, #20]
   1da88:	781a      	ldrb	r2, [r3, #0]
   1da8a:	693b      	ldr	r3, [r7, #16]
   1da8c:	781b      	ldrb	r3, [r3, #0]
   1da8e:	429a      	cmp	r2, r3
   1da90:	d12e      	bne.n	1daf0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   1da92:	697b      	ldr	r3, [r7, #20]
   1da94:	781b      	ldrb	r3, [r3, #0]
   1da96:	2b2b      	cmp	r3, #43	; 0x2b
   1da98:	d112      	bne.n	1dac0 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   1da9a:	693b      	ldr	r3, [r7, #16]
   1da9c:	3301      	adds	r3, #1
   1da9e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1daa0:	e005      	b.n	1daae <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   1daa2:	693b      	ldr	r3, [r7, #16]
   1daa4:	3301      	adds	r3, #1
   1daa6:	613b      	str	r3, [r7, #16]
   1daa8:	693b      	ldr	r3, [r7, #16]
   1daaa:	3301      	adds	r3, #1
   1daac:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1daae:	68fa      	ldr	r2, [r7, #12]
   1dab0:	68bb      	ldr	r3, [r7, #8]
   1dab2:	429a      	cmp	r2, r3
   1dab4:	d20b      	bcs.n	1dace <isTopicMatched+0x8a>
   1dab6:	68fb      	ldr	r3, [r7, #12]
   1dab8:	781b      	ldrb	r3, [r3, #0]
   1daba:	2b2f      	cmp	r3, #47	; 0x2f
   1dabc:	d1f1      	bne.n	1daa2 <isTopicMatched+0x5e>
   1dabe:	e006      	b.n	1dace <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   1dac0:	697b      	ldr	r3, [r7, #20]
   1dac2:	781b      	ldrb	r3, [r3, #0]
   1dac4:	2b23      	cmp	r3, #35	; 0x23
   1dac6:	d102      	bne.n	1dace <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   1dac8:	68bb      	ldr	r3, [r7, #8]
   1daca:	3b01      	subs	r3, #1
   1dacc:	613b      	str	r3, [r7, #16]
        curf++;
   1dace:	697b      	ldr	r3, [r7, #20]
   1dad0:	3301      	adds	r3, #1
   1dad2:	617b      	str	r3, [r7, #20]
        curn++;
   1dad4:	693b      	ldr	r3, [r7, #16]
   1dad6:	3301      	adds	r3, #1
   1dad8:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   1dada:	697b      	ldr	r3, [r7, #20]
   1dadc:	781b      	ldrb	r3, [r3, #0]
   1dade:	2b00      	cmp	r3, #0
   1dae0:	d007      	beq.n	1daf2 <isTopicMatched+0xae>
   1dae2:	693a      	ldr	r2, [r7, #16]
   1dae4:	68bb      	ldr	r3, [r7, #8]
   1dae6:	429a      	cmp	r2, r3
   1dae8:	d3bd      	bcc.n	1da66 <isTopicMatched+0x22>
   1daea:	e002      	b.n	1daf2 <isTopicMatched+0xae>
            break;
   1daec:	46c0      	nop			; (mov r8, r8)
   1daee:	e000      	b.n	1daf2 <isTopicMatched+0xae>
            break;
   1daf0:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   1daf2:	693a      	ldr	r2, [r7, #16]
   1daf4:	68bb      	ldr	r3, [r7, #8]
   1daf6:	429a      	cmp	r2, r3
   1daf8:	d105      	bne.n	1db06 <isTopicMatched+0xc2>
   1dafa:	697b      	ldr	r3, [r7, #20]
   1dafc:	781b      	ldrb	r3, [r3, #0]
   1dafe:	2b00      	cmp	r3, #0
   1db00:	d101      	bne.n	1db06 <isTopicMatched+0xc2>
   1db02:	2301      	movs	r3, #1
   1db04:	e000      	b.n	1db08 <isTopicMatched+0xc4>
   1db06:	2300      	movs	r3, #0
   1db08:	b2db      	uxtb	r3, r3
}
   1db0a:	0018      	movs	r0, r3
   1db0c:	46bd      	mov	sp, r7
   1db0e:	b006      	add	sp, #24
   1db10:	bd80      	pop	{r7, pc}
	...

0001db14 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   1db14:	b580      	push	{r7, lr}
   1db16:	b08a      	sub	sp, #40	; 0x28
   1db18:	af00      	add	r7, sp, #0
   1db1a:	60f8      	str	r0, [r7, #12]
   1db1c:	60b9      	str	r1, [r7, #8]
   1db1e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   1db20:	2301      	movs	r3, #1
   1db22:	425b      	negs	r3, r3
   1db24:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1db26:	2300      	movs	r3, #0
   1db28:	627b      	str	r3, [r7, #36]	; 0x24
   1db2a:	e044      	b.n	1dbb6 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1db2c:	68fa      	ldr	r2, [r7, #12]
   1db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1db30:	3304      	adds	r3, #4
   1db32:	00db      	lsls	r3, r3, #3
   1db34:	18d3      	adds	r3, r2, r3
   1db36:	3304      	adds	r3, #4
   1db38:	681b      	ldr	r3, [r3, #0]
   1db3a:	2b00      	cmp	r3, #0
   1db3c:	d038      	beq.n	1dbb0 <deliverMessage+0x9c>
   1db3e:	68fa      	ldr	r2, [r7, #12]
   1db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1db42:	3304      	adds	r3, #4
   1db44:	00db      	lsls	r3, r3, #3
   1db46:	18d3      	adds	r3, r2, r3
   1db48:	3304      	adds	r3, #4
   1db4a:	681a      	ldr	r2, [r3, #0]
   1db4c:	68bb      	ldr	r3, [r7, #8]
   1db4e:	0011      	movs	r1, r2
   1db50:	0018      	movs	r0, r3
   1db52:	4b28      	ldr	r3, [pc, #160]	; (1dbf4 <deliverMessage+0xe0>)
   1db54:	4798      	blx	r3
   1db56:	1e03      	subs	r3, r0, #0
   1db58:	d10d      	bne.n	1db76 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   1db5a:	68fa      	ldr	r2, [r7, #12]
   1db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1db5e:	3304      	adds	r3, #4
   1db60:	00db      	lsls	r3, r3, #3
   1db62:	18d3      	adds	r3, r2, r3
   1db64:	3304      	adds	r3, #4
   1db66:	681b      	ldr	r3, [r3, #0]
   1db68:	68ba      	ldr	r2, [r7, #8]
   1db6a:	0011      	movs	r1, r2
   1db6c:	0018      	movs	r0, r3
   1db6e:	4b22      	ldr	r3, [pc, #136]	; (1dbf8 <deliverMessage+0xe4>)
   1db70:	4798      	blx	r3
   1db72:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1db74:	d01c      	beq.n	1dbb0 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   1db76:	68fa      	ldr	r2, [r7, #12]
   1db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1db7a:	3304      	adds	r3, #4
   1db7c:	00db      	lsls	r3, r3, #3
   1db7e:	18d3      	adds	r3, r2, r3
   1db80:	3308      	adds	r3, #8
   1db82:	681b      	ldr	r3, [r3, #0]
   1db84:	2b00      	cmp	r3, #0
   1db86:	d013      	beq.n	1dbb0 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   1db88:	687a      	ldr	r2, [r7, #4]
   1db8a:	68b9      	ldr	r1, [r7, #8]
   1db8c:	2318      	movs	r3, #24
   1db8e:	18fb      	adds	r3, r7, r3
   1db90:	0018      	movs	r0, r3
   1db92:	4b1a      	ldr	r3, [pc, #104]	; (1dbfc <deliverMessage+0xe8>)
   1db94:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   1db96:	68fa      	ldr	r2, [r7, #12]
   1db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1db9a:	3304      	adds	r3, #4
   1db9c:	00db      	lsls	r3, r3, #3
   1db9e:	18d3      	adds	r3, r2, r3
   1dba0:	3308      	adds	r3, #8
   1dba2:	681b      	ldr	r3, [r3, #0]
   1dba4:	2218      	movs	r2, #24
   1dba6:	18ba      	adds	r2, r7, r2
   1dba8:	0010      	movs	r0, r2
   1dbaa:	4798      	blx	r3
                rc = SUCCESS;
   1dbac:	2300      	movs	r3, #0
   1dbae:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dbb2:	3301      	adds	r3, #1
   1dbb4:	627b      	str	r3, [r7, #36]	; 0x24
   1dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dbb8:	2b04      	cmp	r3, #4
   1dbba:	ddb7      	ble.n	1db2c <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1dbbc:	6a3b      	ldr	r3, [r7, #32]
   1dbbe:	3301      	adds	r3, #1
   1dbc0:	d112      	bne.n	1dbe8 <deliverMessage+0xd4>
   1dbc2:	68fb      	ldr	r3, [r7, #12]
   1dbc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dbc6:	2b00      	cmp	r3, #0
   1dbc8:	d00e      	beq.n	1dbe8 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   1dbca:	687a      	ldr	r2, [r7, #4]
   1dbcc:	68b9      	ldr	r1, [r7, #8]
   1dbce:	2310      	movs	r3, #16
   1dbd0:	18fb      	adds	r3, r7, r3
   1dbd2:	0018      	movs	r0, r3
   1dbd4:	4b09      	ldr	r3, [pc, #36]	; (1dbfc <deliverMessage+0xe8>)
   1dbd6:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   1dbd8:	68fb      	ldr	r3, [r7, #12]
   1dbda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dbdc:	2210      	movs	r2, #16
   1dbde:	18ba      	adds	r2, r7, r2
   1dbe0:	0010      	movs	r0, r2
   1dbe2:	4798      	blx	r3
        rc = SUCCESS;
   1dbe4:	2300      	movs	r3, #0
   1dbe6:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   1dbe8:	6a3b      	ldr	r3, [r7, #32]
}
   1dbea:	0018      	movs	r0, r3
   1dbec:	46bd      	mov	sp, r7
   1dbee:	b00a      	add	sp, #40	; 0x28
   1dbf0:	bd80      	pop	{r7, pc}
   1dbf2:	46c0      	nop			; (mov r8, r8)
   1dbf4:	0001f7e9 	.word	0x0001f7e9
   1dbf8:	0001da45 	.word	0x0001da45
   1dbfc:	0001d74d 	.word	0x0001d74d

0001dc00 <keepalive>:


int keepalive(MQTTClient* c)
{
   1dc00:	b580      	push	{r7, lr}
   1dc02:	b088      	sub	sp, #32
   1dc04:	af00      	add	r7, sp, #0
   1dc06:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1dc08:	2301      	movs	r3, #1
   1dc0a:	425b      	negs	r3, r3
   1dc0c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   1dc0e:	687b      	ldr	r3, [r7, #4]
   1dc10:	699b      	ldr	r3, [r3, #24]
   1dc12:	2b00      	cmp	r3, #0
   1dc14:	d102      	bne.n	1dc1c <keepalive+0x1c>
    {
        rc = SUCCESS;
   1dc16:	2300      	movs	r3, #0
   1dc18:	61fb      	str	r3, [r7, #28]
        goto exit;
   1dc1a:	e033      	b.n	1dc84 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   1dc1c:	687b      	ldr	r3, [r7, #4]
   1dc1e:	3354      	adds	r3, #84	; 0x54
   1dc20:	0018      	movs	r0, r3
   1dc22:	4b1b      	ldr	r3, [pc, #108]	; (1dc90 <keepalive+0x90>)
   1dc24:	4798      	blx	r3
   1dc26:	1e03      	subs	r3, r0, #0
   1dc28:	d02c      	beq.n	1dc84 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   1dc2a:	687b      	ldr	r3, [r7, #4]
   1dc2c:	7f1b      	ldrb	r3, [r3, #28]
   1dc2e:	2b00      	cmp	r3, #0
   1dc30:	d128      	bne.n	1dc84 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   1dc32:	230c      	movs	r3, #12
   1dc34:	18fb      	adds	r3, r7, r3
   1dc36:	0018      	movs	r0, r3
   1dc38:	4b16      	ldr	r3, [pc, #88]	; (1dc94 <keepalive+0x94>)
   1dc3a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   1dc3c:	23fa      	movs	r3, #250	; 0xfa
   1dc3e:	009a      	lsls	r2, r3, #2
   1dc40:	230c      	movs	r3, #12
   1dc42:	18fb      	adds	r3, r7, r3
   1dc44:	0011      	movs	r1, r2
   1dc46:	0018      	movs	r0, r3
   1dc48:	4b13      	ldr	r3, [pc, #76]	; (1dc98 <keepalive+0x98>)
   1dc4a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   1dc4c:	687b      	ldr	r3, [r7, #4]
   1dc4e:	691a      	ldr	r2, [r3, #16]
   1dc50:	687b      	ldr	r3, [r7, #4]
   1dc52:	689b      	ldr	r3, [r3, #8]
   1dc54:	0019      	movs	r1, r3
   1dc56:	0010      	movs	r0, r2
   1dc58:	4b10      	ldr	r3, [pc, #64]	; (1dc9c <keepalive+0x9c>)
   1dc5a:	4798      	blx	r3
   1dc5c:	0003      	movs	r3, r0
   1dc5e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   1dc60:	69bb      	ldr	r3, [r7, #24]
   1dc62:	2b00      	cmp	r3, #0
   1dc64:	dd0e      	ble.n	1dc84 <keepalive+0x84>
   1dc66:	230c      	movs	r3, #12
   1dc68:	18fa      	adds	r2, r7, r3
   1dc6a:	69b9      	ldr	r1, [r7, #24]
   1dc6c:	687b      	ldr	r3, [r7, #4]
   1dc6e:	0018      	movs	r0, r3
   1dc70:	4b0b      	ldr	r3, [pc, #44]	; (1dca0 <keepalive+0xa0>)
   1dc72:	4798      	blx	r3
   1dc74:	0003      	movs	r3, r0
   1dc76:	61fb      	str	r3, [r7, #28]
   1dc78:	69fb      	ldr	r3, [r7, #28]
   1dc7a:	2b00      	cmp	r3, #0
   1dc7c:	d102      	bne.n	1dc84 <keepalive+0x84>
                c->ping_outstanding = 1;
   1dc7e:	687b      	ldr	r3, [r7, #4]
   1dc80:	2201      	movs	r2, #1
   1dc82:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   1dc84:	69fb      	ldr	r3, [r7, #28]
}
   1dc86:	0018      	movs	r0, r3
   1dc88:	46bd      	mov	sp, r7
   1dc8a:	b008      	add	sp, #32
   1dc8c:	bd80      	pop	{r7, pc}
   1dc8e:	46c0      	nop			; (mov r8, r8)
   1dc90:	0001e581 	.word	0x0001e581
   1dc94:	0001e625 	.word	0x0001e625
   1dc98:	0001e5ad 	.word	0x0001e5ad
   1dc9c:	0001f1f9 	.word	0x0001f1f9
   1dca0:	0001d79d 	.word	0x0001d79d

0001dca4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   1dca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dca6:	b095      	sub	sp, #84	; 0x54
   1dca8:	af06      	add	r7, sp, #24
   1dcaa:	6078      	str	r0, [r7, #4]
   1dcac:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   1dcae:	683a      	ldr	r2, [r7, #0]
   1dcb0:	687b      	ldr	r3, [r7, #4]
   1dcb2:	0011      	movs	r1, r2
   1dcb4:	0018      	movs	r0, r3
   1dcb6:	4b70      	ldr	r3, [pc, #448]	; (1de78 <cycle+0x1d4>)
   1dcb8:	4798      	blx	r3
   1dcba:	0002      	movs	r2, r0
   1dcbc:	232e      	movs	r3, #46	; 0x2e
   1dcbe:	18fb      	adds	r3, r7, r3
   1dcc0:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   1dcc2:	2300      	movs	r3, #0
   1dcc4:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   1dcc6:	2300      	movs	r3, #0
   1dcc8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   1dcca:	232e      	movs	r3, #46	; 0x2e
   1dccc:	18fb      	adds	r3, r7, r3
   1dcce:	881b      	ldrh	r3, [r3, #0]
   1dcd0:	2b0d      	cmp	r3, #13
   1dcd2:	d900      	bls.n	1dcd6 <cycle+0x32>
   1dcd4:	e0bd      	b.n	1de52 <cycle+0x1ae>
   1dcd6:	009a      	lsls	r2, r3, #2
   1dcd8:	4b68      	ldr	r3, [pc, #416]	; (1de7c <cycle+0x1d8>)
   1dcda:	18d3      	adds	r3, r2, r3
   1dcdc:	681b      	ldr	r3, [r3, #0]
   1dcde:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1dce0:	687b      	ldr	r3, [r7, #4]
   1dce2:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   1dce4:	687b      	ldr	r3, [r7, #4]
   1dce6:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1dce8:	001e      	movs	r6, r3
   1dcea:	2310      	movs	r3, #16
   1dcec:	18fb      	adds	r3, r7, r3
   1dcee:	1d1d      	adds	r5, r3, #4
   1dcf0:	2310      	movs	r3, #16
   1dcf2:	18fb      	adds	r3, r7, r3
   1dcf4:	1c5c      	adds	r4, r3, #1
   1dcf6:	230c      	movs	r3, #12
   1dcf8:	18f9      	adds	r1, r7, r3
   1dcfa:	2310      	movs	r3, #16
   1dcfc:	18fb      	adds	r3, r7, r3
   1dcfe:	1c98      	adds	r0, r3, #2
   1dd00:	9604      	str	r6, [sp, #16]
   1dd02:	9203      	str	r2, [sp, #12]
   1dd04:	2310      	movs	r3, #16
   1dd06:	18fb      	adds	r3, r7, r3
   1dd08:	330c      	adds	r3, #12
   1dd0a:	9302      	str	r3, [sp, #8]
   1dd0c:	2310      	movs	r3, #16
   1dd0e:	18fb      	adds	r3, r7, r3
   1dd10:	3308      	adds	r3, #8
   1dd12:	9301      	str	r3, [sp, #4]
   1dd14:	2320      	movs	r3, #32
   1dd16:	18fb      	adds	r3, r7, r3
   1dd18:	9300      	str	r3, [sp, #0]
   1dd1a:	002b      	movs	r3, r5
   1dd1c:	0022      	movs	r2, r4
   1dd1e:	4c58      	ldr	r4, [pc, #352]	; (1de80 <cycle+0x1dc>)
   1dd20:	47a0      	blx	r4
   1dd22:	0003      	movs	r3, r0
   1dd24:	2b01      	cmp	r3, #1
   1dd26:	d000      	beq.n	1dd2a <cycle+0x86>
   1dd28:	e098      	b.n	1de5c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   1dd2a:	68fb      	ldr	r3, [r7, #12]
   1dd2c:	b2da      	uxtb	r2, r3
   1dd2e:	2310      	movs	r3, #16
   1dd30:	18fb      	adds	r3, r7, r3
   1dd32:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   1dd34:	2310      	movs	r3, #16
   1dd36:	18fa      	adds	r2, r7, r3
   1dd38:	2320      	movs	r3, #32
   1dd3a:	18f9      	adds	r1, r7, r3
   1dd3c:	687b      	ldr	r3, [r7, #4]
   1dd3e:	0018      	movs	r0, r3
   1dd40:	4b50      	ldr	r3, [pc, #320]	; (1de84 <cycle+0x1e0>)
   1dd42:	4798      	blx	r3
            if (msg.qos != QOS0)
   1dd44:	2310      	movs	r3, #16
   1dd46:	18fb      	adds	r3, r7, r3
   1dd48:	781b      	ldrb	r3, [r3, #0]
   1dd4a:	2b00      	cmp	r3, #0
   1dd4c:	d100      	bne.n	1dd50 <cycle+0xac>
   1dd4e:	e07d      	b.n	1de4c <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   1dd50:	2310      	movs	r3, #16
   1dd52:	18fb      	adds	r3, r7, r3
   1dd54:	781b      	ldrb	r3, [r3, #0]
   1dd56:	2b01      	cmp	r3, #1
   1dd58:	d10f      	bne.n	1dd7a <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   1dd5a:	687b      	ldr	r3, [r7, #4]
   1dd5c:	6918      	ldr	r0, [r3, #16]
   1dd5e:	687b      	ldr	r3, [r7, #4]
   1dd60:	689b      	ldr	r3, [r3, #8]
   1dd62:	0019      	movs	r1, r3
   1dd64:	2310      	movs	r3, #16
   1dd66:	18fb      	adds	r3, r7, r3
   1dd68:	889b      	ldrh	r3, [r3, #4]
   1dd6a:	9300      	str	r3, [sp, #0]
   1dd6c:	2300      	movs	r3, #0
   1dd6e:	2204      	movs	r2, #4
   1dd70:	4c45      	ldr	r4, [pc, #276]	; (1de88 <cycle+0x1e4>)
   1dd72:	47a0      	blx	r4
   1dd74:	0003      	movs	r3, r0
   1dd76:	637b      	str	r3, [r7, #52]	; 0x34
   1dd78:	e013      	b.n	1dda2 <cycle+0xfe>
                else if (msg.qos == QOS2)
   1dd7a:	2310      	movs	r3, #16
   1dd7c:	18fb      	adds	r3, r7, r3
   1dd7e:	781b      	ldrb	r3, [r3, #0]
   1dd80:	2b02      	cmp	r3, #2
   1dd82:	d10e      	bne.n	1dda2 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   1dd84:	687b      	ldr	r3, [r7, #4]
   1dd86:	6918      	ldr	r0, [r3, #16]
   1dd88:	687b      	ldr	r3, [r7, #4]
   1dd8a:	689b      	ldr	r3, [r3, #8]
   1dd8c:	0019      	movs	r1, r3
   1dd8e:	2310      	movs	r3, #16
   1dd90:	18fb      	adds	r3, r7, r3
   1dd92:	889b      	ldrh	r3, [r3, #4]
   1dd94:	9300      	str	r3, [sp, #0]
   1dd96:	2300      	movs	r3, #0
   1dd98:	2205      	movs	r2, #5
   1dd9a:	4c3b      	ldr	r4, [pc, #236]	; (1de88 <cycle+0x1e4>)
   1dd9c:	47a0      	blx	r4
   1dd9e:	0003      	movs	r3, r0
   1dda0:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   1dda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dda4:	2b00      	cmp	r3, #0
   1dda6:	dc03      	bgt.n	1ddb0 <cycle+0x10c>
                    rc = FAILURE;
   1dda8:	2301      	movs	r3, #1
   1ddaa:	425b      	negs	r3, r3
   1ddac:	633b      	str	r3, [r7, #48]	; 0x30
   1ddae:	e007      	b.n	1ddc0 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   1ddb0:	683a      	ldr	r2, [r7, #0]
   1ddb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1ddb4:	687b      	ldr	r3, [r7, #4]
   1ddb6:	0018      	movs	r0, r3
   1ddb8:	4b34      	ldr	r3, [pc, #208]	; (1de8c <cycle+0x1e8>)
   1ddba:	4798      	blx	r3
   1ddbc:	0003      	movs	r3, r0
   1ddbe:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   1ddc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ddc2:	3301      	adds	r3, #1
   1ddc4:	d142      	bne.n	1de4c <cycle+0x1a8>
                    goto exit; // there was a problem
   1ddc6:	46c0      	nop			; (mov r8, r8)
   1ddc8:	e049      	b.n	1de5e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1ddca:	687b      	ldr	r3, [r7, #4]
   1ddcc:	695c      	ldr	r4, [r3, #20]
   1ddce:	687b      	ldr	r3, [r7, #4]
   1ddd0:	68db      	ldr	r3, [r3, #12]
   1ddd2:	220a      	movs	r2, #10
   1ddd4:	18ba      	adds	r2, r7, r2
   1ddd6:	2109      	movs	r1, #9
   1ddd8:	1879      	adds	r1, r7, r1
   1ddda:	2008      	movs	r0, #8
   1dddc:	1838      	adds	r0, r7, r0
   1ddde:	9300      	str	r3, [sp, #0]
   1dde0:	0023      	movs	r3, r4
   1dde2:	4c2b      	ldr	r4, [pc, #172]	; (1de90 <cycle+0x1ec>)
   1dde4:	47a0      	blx	r4
   1dde6:	0003      	movs	r3, r0
   1dde8:	2b01      	cmp	r3, #1
   1ddea:	d003      	beq.n	1ddf4 <cycle+0x150>
                rc = FAILURE;
   1ddec:	2301      	movs	r3, #1
   1ddee:	425b      	negs	r3, r3
   1ddf0:	633b      	str	r3, [r7, #48]	; 0x30
   1ddf2:	e023      	b.n	1de3c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   1ddf4:	687b      	ldr	r3, [r7, #4]
   1ddf6:	6918      	ldr	r0, [r3, #16]
   1ddf8:	687b      	ldr	r3, [r7, #4]
   1ddfa:	689b      	ldr	r3, [r3, #8]
   1ddfc:	0019      	movs	r1, r3
   1ddfe:	230a      	movs	r3, #10
   1de00:	18fb      	adds	r3, r7, r3
   1de02:	881b      	ldrh	r3, [r3, #0]
   1de04:	9300      	str	r3, [sp, #0]
   1de06:	2300      	movs	r3, #0
   1de08:	2206      	movs	r2, #6
   1de0a:	4c1f      	ldr	r4, [pc, #124]	; (1de88 <cycle+0x1e4>)
   1de0c:	47a0      	blx	r4
   1de0e:	0003      	movs	r3, r0
   1de10:	637b      	str	r3, [r7, #52]	; 0x34
   1de12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1de14:	2b00      	cmp	r3, #0
   1de16:	dc03      	bgt.n	1de20 <cycle+0x17c>
                rc = FAILURE;
   1de18:	2301      	movs	r3, #1
   1de1a:	425b      	negs	r3, r3
   1de1c:	633b      	str	r3, [r7, #48]	; 0x30
   1de1e:	e00d      	b.n	1de3c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   1de20:	683a      	ldr	r2, [r7, #0]
   1de22:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1de24:	687b      	ldr	r3, [r7, #4]
   1de26:	0018      	movs	r0, r3
   1de28:	4b18      	ldr	r3, [pc, #96]	; (1de8c <cycle+0x1e8>)
   1de2a:	4798      	blx	r3
   1de2c:	0003      	movs	r3, r0
   1de2e:	633b      	str	r3, [r7, #48]	; 0x30
   1de30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1de32:	2b00      	cmp	r3, #0
   1de34:	d002      	beq.n	1de3c <cycle+0x198>
                rc = FAILURE; // there was a problem
   1de36:	2301      	movs	r3, #1
   1de38:	425b      	negs	r3, r3
   1de3a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   1de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1de3e:	3301      	adds	r3, #1
   1de40:	d106      	bne.n	1de50 <cycle+0x1ac>
                goto exit; // there was a problem
   1de42:	e00c      	b.n	1de5e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   1de44:	687b      	ldr	r3, [r7, #4]
   1de46:	2200      	movs	r2, #0
   1de48:	771a      	strb	r2, [r3, #28]
            break;
   1de4a:	e002      	b.n	1de52 <cycle+0x1ae>
            break;
   1de4c:	46c0      	nop			; (mov r8, r8)
   1de4e:	e000      	b.n	1de52 <cycle+0x1ae>
            break;
   1de50:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   1de52:	687b      	ldr	r3, [r7, #4]
   1de54:	0018      	movs	r0, r3
   1de56:	4b0f      	ldr	r3, [pc, #60]	; (1de94 <cycle+0x1f0>)
   1de58:	4798      	blx	r3
   1de5a:	e000      	b.n	1de5e <cycle+0x1ba>
                goto exit;
   1de5c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   1de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1de60:	2b00      	cmp	r3, #0
   1de62:	d103      	bne.n	1de6c <cycle+0x1c8>
        rc = packet_type;
   1de64:	232e      	movs	r3, #46	; 0x2e
   1de66:	18fb      	adds	r3, r7, r3
   1de68:	881b      	ldrh	r3, [r3, #0]
   1de6a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   1de6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   1de6e:	0018      	movs	r0, r3
   1de70:	46bd      	mov	sp, r7
   1de72:	b00f      	add	sp, #60	; 0x3c
   1de74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de76:	46c0      	nop			; (mov r8, r8)
   1de78:	0001d959 	.word	0x0001d959
   1de7c:	000299b4 	.word	0x000299b4
   1de80:	0001f21d 	.word	0x0001f21d
   1de84:	0001db15 	.word	0x0001db15
   1de88:	0001fa15 	.word	0x0001fa15
   1de8c:	0001d79d 	.word	0x0001d79d
   1de90:	0001f321 	.word	0x0001f321
   1de94:	0001dc01 	.word	0x0001dc01

0001de98 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1de98:	b580      	push	{r7, lr}
   1de9a:	b086      	sub	sp, #24
   1de9c:	af00      	add	r7, sp, #0
   1de9e:	6078      	str	r0, [r7, #4]
   1dea0:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   1dea2:	2300      	movs	r3, #0
   1dea4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   1dea6:	2308      	movs	r3, #8
   1dea8:	18fb      	adds	r3, r7, r3
   1deaa:	0018      	movs	r0, r3
   1deac:	4b11      	ldr	r3, [pc, #68]	; (1def4 <MQTTYield+0x5c>)
   1deae:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1deb0:	683a      	ldr	r2, [r7, #0]
   1deb2:	2308      	movs	r3, #8
   1deb4:	18fb      	adds	r3, r7, r3
   1deb6:	0011      	movs	r1, r2
   1deb8:	0018      	movs	r0, r3
   1deba:	4b0f      	ldr	r3, [pc, #60]	; (1def8 <MQTTYield+0x60>)
   1debc:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   1debe:	2308      	movs	r3, #8
   1dec0:	18fa      	adds	r2, r7, r3
   1dec2:	687b      	ldr	r3, [r7, #4]
   1dec4:	0011      	movs	r1, r2
   1dec6:	0018      	movs	r0, r3
   1dec8:	4b0c      	ldr	r3, [pc, #48]	; (1defc <MQTTYield+0x64>)
   1deca:	4798      	blx	r3
   1decc:	0003      	movs	r3, r0
   1dece:	3301      	adds	r3, #1
   1ded0:	d103      	bne.n	1deda <MQTTYield+0x42>
        {
            rc = FAILURE;
   1ded2:	2301      	movs	r3, #1
   1ded4:	425b      	negs	r3, r3
   1ded6:	617b      	str	r3, [r7, #20]
            break;
   1ded8:	e006      	b.n	1dee8 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   1deda:	2308      	movs	r3, #8
   1dedc:	18fb      	adds	r3, r7, r3
   1dede:	0018      	movs	r0, r3
   1dee0:	4b07      	ldr	r3, [pc, #28]	; (1df00 <MQTTYield+0x68>)
   1dee2:	4798      	blx	r3
   1dee4:	1e03      	subs	r3, r0, #0
   1dee6:	d0ea      	beq.n	1debe <MQTTYield+0x26>
        
    return rc;
   1dee8:	697b      	ldr	r3, [r7, #20]
}
   1deea:	0018      	movs	r0, r3
   1deec:	46bd      	mov	sp, r7
   1deee:	b006      	add	sp, #24
   1def0:	bd80      	pop	{r7, pc}
   1def2:	46c0      	nop			; (mov r8, r8)
   1def4:	0001e625 	.word	0x0001e625
   1def8:	0001e5ad 	.word	0x0001e5ad
   1defc:	0001dca5 	.word	0x0001dca5
   1df00:	0001e581 	.word	0x0001e581

0001df04 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   1df04:	b580      	push	{r7, lr}
   1df06:	b086      	sub	sp, #24
   1df08:	af00      	add	r7, sp, #0
   1df0a:	60f8      	str	r0, [r7, #12]
   1df0c:	60b9      	str	r1, [r7, #8]
   1df0e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1df10:	2301      	movs	r3, #1
   1df12:	425b      	negs	r3, r3
   1df14:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   1df16:	687b      	ldr	r3, [r7, #4]
   1df18:	0018      	movs	r0, r3
   1df1a:	4b0b      	ldr	r3, [pc, #44]	; (1df48 <waitfor+0x44>)
   1df1c:	4798      	blx	r3
   1df1e:	1e03      	subs	r3, r0, #0
   1df20:	d10c      	bne.n	1df3c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   1df22:	687a      	ldr	r2, [r7, #4]
   1df24:	68fb      	ldr	r3, [r7, #12]
   1df26:	0011      	movs	r1, r2
   1df28:	0018      	movs	r0, r3
   1df2a:	4b08      	ldr	r3, [pc, #32]	; (1df4c <waitfor+0x48>)
   1df2c:	4798      	blx	r3
   1df2e:	0003      	movs	r3, r0
   1df30:	617b      	str	r3, [r7, #20]
   1df32:	697a      	ldr	r2, [r7, #20]
   1df34:	68bb      	ldr	r3, [r7, #8]
   1df36:	429a      	cmp	r2, r3
   1df38:	d1ed      	bne.n	1df16 <waitfor+0x12>
   1df3a:	e000      	b.n	1df3e <waitfor+0x3a>
            break; // we timed out
   1df3c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   1df3e:	697b      	ldr	r3, [r7, #20]
}
   1df40:	0018      	movs	r0, r3
   1df42:	46bd      	mov	sp, r7
   1df44:	b006      	add	sp, #24
   1df46:	bd80      	pop	{r7, pc}
   1df48:	0001e581 	.word	0x0001e581
   1df4c:	0001dca5 	.word	0x0001dca5

0001df50 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   1df50:	b590      	push	{r4, r7, lr}
   1df52:	b09f      	sub	sp, #124	; 0x7c
   1df54:	af00      	add	r7, sp, #0
   1df56:	6078      	str	r0, [r7, #4]
   1df58:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   1df5a:	2301      	movs	r3, #1
   1df5c:	425b      	negs	r3, r3
   1df5e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   1df60:	230c      	movs	r3, #12
   1df62:	18fa      	adds	r2, r7, r3
   1df64:	4b41      	ldr	r3, [pc, #260]	; (1e06c <MQTTConnect+0x11c>)
   1df66:	0010      	movs	r0, r2
   1df68:	0019      	movs	r1, r3
   1df6a:	2358      	movs	r3, #88	; 0x58
   1df6c:	001a      	movs	r2, r3
   1df6e:	4b40      	ldr	r3, [pc, #256]	; (1e070 <MQTTConnect+0x120>)
   1df70:	4798      	blx	r3
    int len = 0;
   1df72:	2300      	movs	r3, #0
   1df74:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1df76:	687b      	ldr	r3, [r7, #4]
   1df78:	6a1b      	ldr	r3, [r3, #32]
   1df7a:	2b00      	cmp	r3, #0
   1df7c:	d166      	bne.n	1e04c <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   1df7e:	2364      	movs	r3, #100	; 0x64
   1df80:	18fb      	adds	r3, r7, r3
   1df82:	0018      	movs	r0, r3
   1df84:	4b3b      	ldr	r3, [pc, #236]	; (1e074 <MQTTConnect+0x124>)
   1df86:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1df88:	687b      	ldr	r3, [r7, #4]
   1df8a:	685a      	ldr	r2, [r3, #4]
   1df8c:	2364      	movs	r3, #100	; 0x64
   1df8e:	18fb      	adds	r3, r7, r3
   1df90:	0011      	movs	r1, r2
   1df92:	0018      	movs	r0, r3
   1df94:	4b38      	ldr	r3, [pc, #224]	; (1e078 <MQTTConnect+0x128>)
   1df96:	4798      	blx	r3

    if (options == 0)
   1df98:	683b      	ldr	r3, [r7, #0]
   1df9a:	2b00      	cmp	r3, #0
   1df9c:	d102      	bne.n	1dfa4 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   1df9e:	230c      	movs	r3, #12
   1dfa0:	18fb      	adds	r3, r7, r3
   1dfa2:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   1dfa4:	683b      	ldr	r3, [r7, #0]
   1dfa6:	8b1b      	ldrh	r3, [r3, #24]
   1dfa8:	001a      	movs	r2, r3
   1dfaa:	687b      	ldr	r3, [r7, #4]
   1dfac:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1dfae:	687b      	ldr	r3, [r7, #4]
   1dfb0:	3354      	adds	r3, #84	; 0x54
   1dfb2:	001a      	movs	r2, r3
   1dfb4:	687b      	ldr	r3, [r7, #4]
   1dfb6:	699b      	ldr	r3, [r3, #24]
   1dfb8:	0019      	movs	r1, r3
   1dfba:	0010      	movs	r0, r2
   1dfbc:	4b2f      	ldr	r3, [pc, #188]	; (1e07c <MQTTConnect+0x12c>)
   1dfbe:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   1dfc0:	687b      	ldr	r3, [r7, #4]
   1dfc2:	6918      	ldr	r0, [r3, #16]
   1dfc4:	687b      	ldr	r3, [r7, #4]
   1dfc6:	689b      	ldr	r3, [r3, #8]
   1dfc8:	0019      	movs	r1, r3
   1dfca:	683b      	ldr	r3, [r7, #0]
   1dfcc:	001a      	movs	r2, r3
   1dfce:	4b2c      	ldr	r3, [pc, #176]	; (1e080 <MQTTConnect+0x130>)
   1dfd0:	4798      	blx	r3
   1dfd2:	0003      	movs	r3, r0
   1dfd4:	673b      	str	r3, [r7, #112]	; 0x70
   1dfd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1dfd8:	2b00      	cmp	r3, #0
   1dfda:	dd39      	ble.n	1e050 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   1dfdc:	2364      	movs	r3, #100	; 0x64
   1dfde:	18fa      	adds	r2, r7, r3
   1dfe0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1dfe2:	687b      	ldr	r3, [r7, #4]
   1dfe4:	0018      	movs	r0, r3
   1dfe6:	4b27      	ldr	r3, [pc, #156]	; (1e084 <MQTTConnect+0x134>)
   1dfe8:	4798      	blx	r3
   1dfea:	0003      	movs	r3, r0
   1dfec:	677b      	str	r3, [r7, #116]	; 0x74
   1dfee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dff0:	2b00      	cmp	r3, #0
   1dff2:	d12f      	bne.n	1e054 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   1dff4:	2364      	movs	r3, #100	; 0x64
   1dff6:	18fa      	adds	r2, r7, r3
   1dff8:	687b      	ldr	r3, [r7, #4]
   1dffa:	2102      	movs	r1, #2
   1dffc:	0018      	movs	r0, r3
   1dffe:	4b22      	ldr	r3, [pc, #136]	; (1e088 <MQTTConnect+0x138>)
   1e000:	4798      	blx	r3
   1e002:	0003      	movs	r3, r0
   1e004:	2b02      	cmp	r3, #2
   1e006:	d11d      	bne.n	1e044 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   1e008:	230b      	movs	r3, #11
   1e00a:	18fb      	adds	r3, r7, r3
   1e00c:	22ff      	movs	r2, #255	; 0xff
   1e00e:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   1e010:	230a      	movs	r3, #10
   1e012:	18fb      	adds	r3, r7, r3
   1e014:	2200      	movs	r2, #0
   1e016:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1e018:	687b      	ldr	r3, [r7, #4]
   1e01a:	695a      	ldr	r2, [r3, #20]
   1e01c:	687b      	ldr	r3, [r7, #4]
   1e01e:	68db      	ldr	r3, [r3, #12]
   1e020:	210b      	movs	r1, #11
   1e022:	1879      	adds	r1, r7, r1
   1e024:	200a      	movs	r0, #10
   1e026:	1838      	adds	r0, r7, r0
   1e028:	4c18      	ldr	r4, [pc, #96]	; (1e08c <MQTTConnect+0x13c>)
   1e02a:	47a0      	blx	r4
   1e02c:	0003      	movs	r3, r0
   1e02e:	2b01      	cmp	r3, #1
   1e030:	d104      	bne.n	1e03c <MQTTConnect+0xec>
            rc = connack_rc;
   1e032:	230b      	movs	r3, #11
   1e034:	18fb      	adds	r3, r7, r3
   1e036:	781b      	ldrb	r3, [r3, #0]
   1e038:	677b      	str	r3, [r7, #116]	; 0x74
   1e03a:	e00c      	b.n	1e056 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   1e03c:	2301      	movs	r3, #1
   1e03e:	425b      	negs	r3, r3
   1e040:	677b      	str	r3, [r7, #116]	; 0x74
   1e042:	e008      	b.n	1e056 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   1e044:	2301      	movs	r3, #1
   1e046:	425b      	negs	r3, r3
   1e048:	677b      	str	r3, [r7, #116]	; 0x74
   1e04a:	e004      	b.n	1e056 <MQTTConnect+0x106>
		goto exit;
   1e04c:	46c0      	nop			; (mov r8, r8)
   1e04e:	e002      	b.n	1e056 <MQTTConnect+0x106>
        goto exit;
   1e050:	46c0      	nop			; (mov r8, r8)
   1e052:	e000      	b.n	1e056 <MQTTConnect+0x106>
        goto exit; // there was a problem
   1e054:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   1e056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e058:	2b00      	cmp	r3, #0
   1e05a:	d102      	bne.n	1e062 <MQTTConnect+0x112>
        c->isconnected = 1;
   1e05c:	687b      	ldr	r3, [r7, #4]
   1e05e:	2201      	movs	r2, #1
   1e060:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   1e062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1e064:	0018      	movs	r0, r3
   1e066:	46bd      	mov	sp, r7
   1e068:	b01f      	add	sp, #124	; 0x7c
   1e06a:	bd90      	pop	{r4, r7, pc}
   1e06c:	000299ec 	.word	0x000299ec
   1e070:	00024781 	.word	0x00024781
   1e074:	0001e625 	.word	0x0001e625
   1e078:	0001e5ad 	.word	0x0001e5ad
   1e07c:	0001e5d5 	.word	0x0001e5d5
   1e080:	0001ee01 	.word	0x0001ee01
   1e084:	0001d79d 	.word	0x0001d79d
   1e088:	0001df05 	.word	0x0001df05
   1e08c:	0001f07d 	.word	0x0001f07d

0001e090 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   1e090:	b5b0      	push	{r4, r5, r7, lr}
   1e092:	b096      	sub	sp, #88	; 0x58
   1e094:	af04      	add	r7, sp, #16
   1e096:	60f8      	str	r0, [r7, #12]
   1e098:	60b9      	str	r1, [r7, #8]
   1e09a:	603b      	str	r3, [r7, #0]
   1e09c:	1dfb      	adds	r3, r7, #7
   1e09e:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   1e0a0:	2301      	movs	r3, #1
   1e0a2:	425b      	negs	r3, r3
   1e0a4:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   1e0a6:	2300      	movs	r3, #0
   1e0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   1e0aa:	2324      	movs	r3, #36	; 0x24
   1e0ac:	18fb      	adds	r3, r7, r3
   1e0ae:	2200      	movs	r2, #0
   1e0b0:	601a      	str	r2, [r3, #0]
   1e0b2:	2324      	movs	r3, #36	; 0x24
   1e0b4:	18fb      	adds	r3, r7, r3
   1e0b6:	2200      	movs	r2, #0
   1e0b8:	605a      	str	r2, [r3, #4]
   1e0ba:	2324      	movs	r3, #36	; 0x24
   1e0bc:	18fb      	adds	r3, r7, r3
   1e0be:	2200      	movs	r2, #0
   1e0c0:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   1e0c2:	1dfb      	adds	r3, r7, #7
   1e0c4:	781b      	ldrb	r3, [r3, #0]
   1e0c6:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   1e0c8:	2324      	movs	r3, #36	; 0x24
   1e0ca:	18fb      	adds	r3, r7, r3
   1e0cc:	68ba      	ldr	r2, [r7, #8]
   1e0ce:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1e0d0:	68fb      	ldr	r3, [r7, #12]
   1e0d2:	6a1b      	ldr	r3, [r3, #32]
   1e0d4:	2b00      	cmp	r3, #0
   1e0d6:	d100      	bne.n	1e0da <MQTTSubscribe+0x4a>
   1e0d8:	e088      	b.n	1e1ec <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   1e0da:	2330      	movs	r3, #48	; 0x30
   1e0dc:	18fb      	adds	r3, r7, r3
   1e0de:	0018      	movs	r0, r3
   1e0e0:	4b47      	ldr	r3, [pc, #284]	; (1e200 <MQTTSubscribe+0x170>)
   1e0e2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1e0e4:	68fb      	ldr	r3, [r7, #12]
   1e0e6:	685a      	ldr	r2, [r3, #4]
   1e0e8:	2330      	movs	r3, #48	; 0x30
   1e0ea:	18fb      	adds	r3, r7, r3
   1e0ec:	0011      	movs	r1, r2
   1e0ee:	0018      	movs	r0, r3
   1e0f0:	4b44      	ldr	r3, [pc, #272]	; (1e204 <MQTTSubscribe+0x174>)
   1e0f2:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1e0f4:	68fb      	ldr	r3, [r7, #12]
   1e0f6:	691c      	ldr	r4, [r3, #16]
   1e0f8:	68fb      	ldr	r3, [r7, #12]
   1e0fa:	689b      	ldr	r3, [r3, #8]
   1e0fc:	001d      	movs	r5, r3
   1e0fe:	68fb      	ldr	r3, [r7, #12]
   1e100:	0018      	movs	r0, r3
   1e102:	4b41      	ldr	r3, [pc, #260]	; (1e208 <MQTTSubscribe+0x178>)
   1e104:	4798      	blx	r3
   1e106:	0003      	movs	r3, r0
   1e108:	b29a      	uxth	r2, r3
   1e10a:	2320      	movs	r3, #32
   1e10c:	18fb      	adds	r3, r7, r3
   1e10e:	9302      	str	r3, [sp, #8]
   1e110:	2324      	movs	r3, #36	; 0x24
   1e112:	18fb      	adds	r3, r7, r3
   1e114:	9301      	str	r3, [sp, #4]
   1e116:	2301      	movs	r3, #1
   1e118:	9300      	str	r3, [sp, #0]
   1e11a:	0013      	movs	r3, r2
   1e11c:	2200      	movs	r2, #0
   1e11e:	0029      	movs	r1, r5
   1e120:	0020      	movs	r0, r4
   1e122:	4c3a      	ldr	r4, [pc, #232]	; (1e20c <MQTTSubscribe+0x17c>)
   1e124:	47a0      	blx	r4
   1e126:	0003      	movs	r3, r0
   1e128:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   1e12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e12c:	2b00      	cmp	r3, #0
   1e12e:	dd5f      	ble.n	1e1f0 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1e130:	2330      	movs	r3, #48	; 0x30
   1e132:	18fa      	adds	r2, r7, r3
   1e134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1e136:	68fb      	ldr	r3, [r7, #12]
   1e138:	0018      	movs	r0, r3
   1e13a:	4b35      	ldr	r3, [pc, #212]	; (1e210 <MQTTSubscribe+0x180>)
   1e13c:	4798      	blx	r3
   1e13e:	0003      	movs	r3, r0
   1e140:	647b      	str	r3, [r7, #68]	; 0x44
   1e142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1e144:	2b00      	cmp	r3, #0
   1e146:	d155      	bne.n	1e1f4 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   1e148:	2330      	movs	r3, #48	; 0x30
   1e14a:	18fa      	adds	r2, r7, r3
   1e14c:	68fb      	ldr	r3, [r7, #12]
   1e14e:	2109      	movs	r1, #9
   1e150:	0018      	movs	r0, r3
   1e152:	4b30      	ldr	r3, [pc, #192]	; (1e214 <MQTTSubscribe+0x184>)
   1e154:	4798      	blx	r3
   1e156:	0003      	movs	r3, r0
   1e158:	2b09      	cmp	r3, #9
   1e15a:	d143      	bne.n	1e1e4 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   1e15c:	2300      	movs	r3, #0
   1e15e:	61fb      	str	r3, [r7, #28]
   1e160:	2301      	movs	r3, #1
   1e162:	425b      	negs	r3, r3
   1e164:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1e166:	68fb      	ldr	r3, [r7, #12]
   1e168:	695a      	ldr	r2, [r3, #20]
   1e16a:	68fb      	ldr	r3, [r7, #12]
   1e16c:	68db      	ldr	r3, [r3, #12]
   1e16e:	001c      	movs	r4, r3
   1e170:	2318      	movs	r3, #24
   1e172:	18fb      	adds	r3, r7, r3
   1e174:	211c      	movs	r1, #28
   1e176:	1879      	adds	r1, r7, r1
   1e178:	2016      	movs	r0, #22
   1e17a:	1838      	adds	r0, r7, r0
   1e17c:	9401      	str	r4, [sp, #4]
   1e17e:	9200      	str	r2, [sp, #0]
   1e180:	000a      	movs	r2, r1
   1e182:	2101      	movs	r1, #1
   1e184:	4c24      	ldr	r4, [pc, #144]	; (1e218 <MQTTSubscribe+0x188>)
   1e186:	47a0      	blx	r4
   1e188:	0003      	movs	r3, r0
   1e18a:	2b01      	cmp	r3, #1
   1e18c:	d101      	bne.n	1e192 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   1e18e:	69bb      	ldr	r3, [r7, #24]
   1e190:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   1e192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1e194:	2b80      	cmp	r3, #128	; 0x80
   1e196:	d02e      	beq.n	1e1f6 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1e198:	2300      	movs	r3, #0
   1e19a:	643b      	str	r3, [r7, #64]	; 0x40
   1e19c:	e01e      	b.n	1e1dc <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   1e19e:	68fa      	ldr	r2, [r7, #12]
   1e1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1e1a2:	3304      	adds	r3, #4
   1e1a4:	00db      	lsls	r3, r3, #3
   1e1a6:	18d3      	adds	r3, r2, r3
   1e1a8:	3304      	adds	r3, #4
   1e1aa:	681b      	ldr	r3, [r3, #0]
   1e1ac:	2b00      	cmp	r3, #0
   1e1ae:	d112      	bne.n	1e1d6 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   1e1b0:	68fa      	ldr	r2, [r7, #12]
   1e1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1e1b4:	3304      	adds	r3, #4
   1e1b6:	00db      	lsls	r3, r3, #3
   1e1b8:	18d3      	adds	r3, r2, r3
   1e1ba:	3304      	adds	r3, #4
   1e1bc:	68ba      	ldr	r2, [r7, #8]
   1e1be:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   1e1c0:	68fa      	ldr	r2, [r7, #12]
   1e1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1e1c4:	3304      	adds	r3, #4
   1e1c6:	00db      	lsls	r3, r3, #3
   1e1c8:	18d3      	adds	r3, r2, r3
   1e1ca:	3308      	adds	r3, #8
   1e1cc:	683a      	ldr	r2, [r7, #0]
   1e1ce:	601a      	str	r2, [r3, #0]
                    rc = 0;
   1e1d0:	2300      	movs	r3, #0
   1e1d2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   1e1d4:	e00f      	b.n	1e1f6 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1e1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1e1d8:	3301      	adds	r3, #1
   1e1da:	643b      	str	r3, [r7, #64]	; 0x40
   1e1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1e1de:	2b04      	cmp	r3, #4
   1e1e0:	dddd      	ble.n	1e19e <MQTTSubscribe+0x10e>
   1e1e2:	e008      	b.n	1e1f6 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   1e1e4:	2301      	movs	r3, #1
   1e1e6:	425b      	negs	r3, r3
   1e1e8:	647b      	str	r3, [r7, #68]	; 0x44
   1e1ea:	e004      	b.n	1e1f6 <MQTTSubscribe+0x166>
		goto exit;
   1e1ec:	46c0      	nop			; (mov r8, r8)
   1e1ee:	e002      	b.n	1e1f6 <MQTTSubscribe+0x166>
        goto exit;
   1e1f0:	46c0      	nop			; (mov r8, r8)
   1e1f2:	e000      	b.n	1e1f6 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   1e1f4:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1e1f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1e1f8:	0018      	movs	r0, r3
   1e1fa:	46bd      	mov	sp, r7
   1e1fc:	b012      	add	sp, #72	; 0x48
   1e1fe:	bdb0      	pop	{r4, r5, r7, pc}
   1e200:	0001e625 	.word	0x0001e625
   1e204:	0001e5ad 	.word	0x0001e5ad
   1e208:	0001d76d 	.word	0x0001d76d
   1e20c:	0001fb5d 	.word	0x0001fb5d
   1e210:	0001d79d 	.word	0x0001d79d
   1e214:	0001df05 	.word	0x0001df05
   1e218:	0001fcad 	.word	0x0001fcad

0001e21c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1e21c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e21e:	46ce      	mov	lr, r9
   1e220:	4647      	mov	r7, r8
   1e222:	b580      	push	{r7, lr}
   1e224:	b097      	sub	sp, #92	; 0x5c
   1e226:	af08      	add	r7, sp, #32
   1e228:	60f8      	str	r0, [r7, #12]
   1e22a:	60b9      	str	r1, [r7, #8]
   1e22c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1e22e:	2301      	movs	r3, #1
   1e230:	425b      	negs	r3, r3
   1e232:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   1e234:	2318      	movs	r3, #24
   1e236:	18fb      	adds	r3, r7, r3
   1e238:	2200      	movs	r2, #0
   1e23a:	601a      	str	r2, [r3, #0]
   1e23c:	2318      	movs	r3, #24
   1e23e:	18fb      	adds	r3, r7, r3
   1e240:	2200      	movs	r2, #0
   1e242:	605a      	str	r2, [r3, #4]
   1e244:	2318      	movs	r3, #24
   1e246:	18fb      	adds	r3, r7, r3
   1e248:	2200      	movs	r2, #0
   1e24a:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   1e24c:	2318      	movs	r3, #24
   1e24e:	18fb      	adds	r3, r7, r3
   1e250:	68ba      	ldr	r2, [r7, #8]
   1e252:	601a      	str	r2, [r3, #0]
    int len = 0;
   1e254:	2300      	movs	r3, #0
   1e256:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1e258:	68fb      	ldr	r3, [r7, #12]
   1e25a:	6a1b      	ldr	r3, [r3, #32]
   1e25c:	2b00      	cmp	r3, #0
   1e25e:	d100      	bne.n	1e262 <MQTTPublish+0x46>
   1e260:	e0a0      	b.n	1e3a4 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   1e262:	2324      	movs	r3, #36	; 0x24
   1e264:	18fb      	adds	r3, r7, r3
   1e266:	0018      	movs	r0, r3
   1e268:	4b55      	ldr	r3, [pc, #340]	; (1e3c0 <MQTTPublish+0x1a4>)
   1e26a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1e26c:	68fb      	ldr	r3, [r7, #12]
   1e26e:	685a      	ldr	r2, [r3, #4]
   1e270:	2324      	movs	r3, #36	; 0x24
   1e272:	18fb      	adds	r3, r7, r3
   1e274:	0011      	movs	r1, r2
   1e276:	0018      	movs	r0, r3
   1e278:	4b52      	ldr	r3, [pc, #328]	; (1e3c4 <MQTTPublish+0x1a8>)
   1e27a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1e27c:	687b      	ldr	r3, [r7, #4]
   1e27e:	781b      	ldrb	r3, [r3, #0]
   1e280:	2b01      	cmp	r3, #1
   1e282:	d003      	beq.n	1e28c <MQTTPublish+0x70>
   1e284:	687b      	ldr	r3, [r7, #4]
   1e286:	781b      	ldrb	r3, [r3, #0]
   1e288:	2b02      	cmp	r3, #2
   1e28a:	d107      	bne.n	1e29c <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   1e28c:	68fb      	ldr	r3, [r7, #12]
   1e28e:	0018      	movs	r0, r3
   1e290:	4b4d      	ldr	r3, [pc, #308]	; (1e3c8 <MQTTPublish+0x1ac>)
   1e292:	4798      	blx	r3
   1e294:	0003      	movs	r3, r0
   1e296:	b29a      	uxth	r2, r3
   1e298:	687b      	ldr	r3, [r7, #4]
   1e29a:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1e29c:	68fb      	ldr	r3, [r7, #12]
   1e29e:	691b      	ldr	r3, [r3, #16]
   1e2a0:	469c      	mov	ip, r3
   1e2a2:	68fb      	ldr	r3, [r7, #12]
   1e2a4:	689b      	ldr	r3, [r3, #8]
   1e2a6:	001d      	movs	r5, r3
   1e2a8:	687b      	ldr	r3, [r7, #4]
   1e2aa:	781b      	ldrb	r3, [r3, #0]
   1e2ac:	001e      	movs	r6, r3
   1e2ae:	687b      	ldr	r3, [r7, #4]
   1e2b0:	785b      	ldrb	r3, [r3, #1]
   1e2b2:	4698      	mov	r8, r3
   1e2b4:	687b      	ldr	r3, [r7, #4]
   1e2b6:	889b      	ldrh	r3, [r3, #4]
   1e2b8:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   1e2ba:	687b      	ldr	r3, [r7, #4]
   1e2bc:	689a      	ldr	r2, [r3, #8]
   1e2be:	687b      	ldr	r3, [r7, #4]
   1e2c0:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1e2c2:	9306      	str	r3, [sp, #24]
   1e2c4:	9205      	str	r2, [sp, #20]
   1e2c6:	2318      	movs	r3, #24
   1e2c8:	18fa      	adds	r2, r7, r3
   1e2ca:	2308      	movs	r3, #8
   1e2cc:	446b      	add	r3, sp
   1e2ce:	ca13      	ldmia	r2!, {r0, r1, r4}
   1e2d0:	c313      	stmia	r3!, {r0, r1, r4}
   1e2d2:	464b      	mov	r3, r9
   1e2d4:	9301      	str	r3, [sp, #4]
   1e2d6:	4643      	mov	r3, r8
   1e2d8:	9300      	str	r3, [sp, #0]
   1e2da:	0033      	movs	r3, r6
   1e2dc:	2200      	movs	r2, #0
   1e2de:	0029      	movs	r1, r5
   1e2e0:	4660      	mov	r0, ip
   1e2e2:	4c3a      	ldr	r4, [pc, #232]	; (1e3cc <MQTTPublish+0x1b0>)
   1e2e4:	47a0      	blx	r4
   1e2e6:	0003      	movs	r3, r0
   1e2e8:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   1e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e2ec:	2b00      	cmp	r3, #0
   1e2ee:	dd5b      	ble.n	1e3a8 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1e2f0:	2324      	movs	r3, #36	; 0x24
   1e2f2:	18fa      	adds	r2, r7, r3
   1e2f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1e2f6:	68fb      	ldr	r3, [r7, #12]
   1e2f8:	0018      	movs	r0, r3
   1e2fa:	4b35      	ldr	r3, [pc, #212]	; (1e3d0 <MQTTPublish+0x1b4>)
   1e2fc:	4798      	blx	r3
   1e2fe:	0003      	movs	r3, r0
   1e300:	637b      	str	r3, [r7, #52]	; 0x34
   1e302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e304:	2b00      	cmp	r3, #0
   1e306:	d151      	bne.n	1e3ac <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1e308:	687b      	ldr	r3, [r7, #4]
   1e30a:	781b      	ldrb	r3, [r3, #0]
   1e30c:	2b01      	cmp	r3, #1
   1e30e:	d122      	bne.n	1e356 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   1e310:	2324      	movs	r3, #36	; 0x24
   1e312:	18fa      	adds	r2, r7, r3
   1e314:	68fb      	ldr	r3, [r7, #12]
   1e316:	2104      	movs	r1, #4
   1e318:	0018      	movs	r0, r3
   1e31a:	4b2e      	ldr	r3, [pc, #184]	; (1e3d4 <MQTTPublish+0x1b8>)
   1e31c:	4798      	blx	r3
   1e31e:	0003      	movs	r3, r0
   1e320:	2b04      	cmp	r3, #4
   1e322:	d114      	bne.n	1e34e <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1e324:	68fb      	ldr	r3, [r7, #12]
   1e326:	695c      	ldr	r4, [r3, #20]
   1e328:	68fb      	ldr	r3, [r7, #12]
   1e32a:	68db      	ldr	r3, [r3, #12]
   1e32c:	2216      	movs	r2, #22
   1e32e:	18ba      	adds	r2, r7, r2
   1e330:	2115      	movs	r1, #21
   1e332:	1879      	adds	r1, r7, r1
   1e334:	2014      	movs	r0, #20
   1e336:	1838      	adds	r0, r7, r0
   1e338:	9300      	str	r3, [sp, #0]
   1e33a:	0023      	movs	r3, r4
   1e33c:	4c26      	ldr	r4, [pc, #152]	; (1e3d8 <MQTTPublish+0x1bc>)
   1e33e:	47a0      	blx	r4
   1e340:	0003      	movs	r3, r0
   1e342:	2b01      	cmp	r3, #1
   1e344:	d033      	beq.n	1e3ae <MQTTPublish+0x192>
                rc = FAILURE;
   1e346:	2301      	movs	r3, #1
   1e348:	425b      	negs	r3, r3
   1e34a:	637b      	str	r3, [r7, #52]	; 0x34
   1e34c:	e02f      	b.n	1e3ae <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1e34e:	2301      	movs	r3, #1
   1e350:	425b      	negs	r3, r3
   1e352:	637b      	str	r3, [r7, #52]	; 0x34
   1e354:	e02b      	b.n	1e3ae <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   1e356:	687b      	ldr	r3, [r7, #4]
   1e358:	781b      	ldrb	r3, [r3, #0]
   1e35a:	2b02      	cmp	r3, #2
   1e35c:	d127      	bne.n	1e3ae <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   1e35e:	2324      	movs	r3, #36	; 0x24
   1e360:	18fa      	adds	r2, r7, r3
   1e362:	68fb      	ldr	r3, [r7, #12]
   1e364:	2107      	movs	r1, #7
   1e366:	0018      	movs	r0, r3
   1e368:	4b1a      	ldr	r3, [pc, #104]	; (1e3d4 <MQTTPublish+0x1b8>)
   1e36a:	4798      	blx	r3
   1e36c:	0003      	movs	r3, r0
   1e36e:	2b07      	cmp	r3, #7
   1e370:	d114      	bne.n	1e39c <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1e372:	68fb      	ldr	r3, [r7, #12]
   1e374:	695c      	ldr	r4, [r3, #20]
   1e376:	68fb      	ldr	r3, [r7, #12]
   1e378:	68db      	ldr	r3, [r3, #12]
   1e37a:	2212      	movs	r2, #18
   1e37c:	18ba      	adds	r2, r7, r2
   1e37e:	2111      	movs	r1, #17
   1e380:	1879      	adds	r1, r7, r1
   1e382:	2010      	movs	r0, #16
   1e384:	1838      	adds	r0, r7, r0
   1e386:	9300      	str	r3, [sp, #0]
   1e388:	0023      	movs	r3, r4
   1e38a:	4c13      	ldr	r4, [pc, #76]	; (1e3d8 <MQTTPublish+0x1bc>)
   1e38c:	47a0      	blx	r4
   1e38e:	0003      	movs	r3, r0
   1e390:	2b01      	cmp	r3, #1
   1e392:	d00c      	beq.n	1e3ae <MQTTPublish+0x192>
                rc = FAILURE;
   1e394:	2301      	movs	r3, #1
   1e396:	425b      	negs	r3, r3
   1e398:	637b      	str	r3, [r7, #52]	; 0x34
   1e39a:	e008      	b.n	1e3ae <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1e39c:	2301      	movs	r3, #1
   1e39e:	425b      	negs	r3, r3
   1e3a0:	637b      	str	r3, [r7, #52]	; 0x34
   1e3a2:	e004      	b.n	1e3ae <MQTTPublish+0x192>
		goto exit;
   1e3a4:	46c0      	nop			; (mov r8, r8)
   1e3a6:	e002      	b.n	1e3ae <MQTTPublish+0x192>
        goto exit;
   1e3a8:	46c0      	nop			; (mov r8, r8)
   1e3aa:	e000      	b.n	1e3ae <MQTTPublish+0x192>
        goto exit; // there was a problem
   1e3ac:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1e3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1e3b0:	0018      	movs	r0, r3
   1e3b2:	46bd      	mov	sp, r7
   1e3b4:	b00f      	add	sp, #60	; 0x3c
   1e3b6:	bc0c      	pop	{r2, r3}
   1e3b8:	4690      	mov	r8, r2
   1e3ba:	4699      	mov	r9, r3
   1e3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3be:	46c0      	nop			; (mov r8, r8)
   1e3c0:	0001e625 	.word	0x0001e625
   1e3c4:	0001e5ad 	.word	0x0001e5ad
   1e3c8:	0001d76d 	.word	0x0001d76d
   1e3cc:	0001f8a9 	.word	0x0001f8a9
   1e3d0:	0001d79d 	.word	0x0001d79d
   1e3d4:	0001df05 	.word	0x0001df05
   1e3d8:	0001f321 	.word	0x0001f321

0001e3dc <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   1e3dc:	b580      	push	{r7, lr}
   1e3de:	b088      	sub	sp, #32
   1e3e0:	af00      	add	r7, sp, #0
   1e3e2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1e3e4:	2301      	movs	r3, #1
   1e3e6:	425b      	negs	r3, r3
   1e3e8:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   1e3ea:	2300      	movs	r3, #0
   1e3ec:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1e3ee:	230c      	movs	r3, #12
   1e3f0:	18fb      	adds	r3, r7, r3
   1e3f2:	0018      	movs	r0, r3
   1e3f4:	4b13      	ldr	r3, [pc, #76]	; (1e444 <MQTTDisconnect+0x68>)
   1e3f6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1e3f8:	687b      	ldr	r3, [r7, #4]
   1e3fa:	685a      	ldr	r2, [r3, #4]
   1e3fc:	230c      	movs	r3, #12
   1e3fe:	18fb      	adds	r3, r7, r3
   1e400:	0011      	movs	r1, r2
   1e402:	0018      	movs	r0, r3
   1e404:	4b10      	ldr	r3, [pc, #64]	; (1e448 <MQTTDisconnect+0x6c>)
   1e406:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   1e408:	687b      	ldr	r3, [r7, #4]
   1e40a:	691a      	ldr	r2, [r3, #16]
   1e40c:	687b      	ldr	r3, [r7, #4]
   1e40e:	689b      	ldr	r3, [r3, #8]
   1e410:	0019      	movs	r1, r3
   1e412:	0010      	movs	r0, r2
   1e414:	4b0d      	ldr	r3, [pc, #52]	; (1e44c <MQTTDisconnect+0x70>)
   1e416:	4798      	blx	r3
   1e418:	0003      	movs	r3, r0
   1e41a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   1e41c:	69bb      	ldr	r3, [r7, #24]
   1e41e:	2b00      	cmp	r3, #0
   1e420:	dd08      	ble.n	1e434 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   1e422:	230c      	movs	r3, #12
   1e424:	18fa      	adds	r2, r7, r3
   1e426:	69b9      	ldr	r1, [r7, #24]
   1e428:	687b      	ldr	r3, [r7, #4]
   1e42a:	0018      	movs	r0, r3
   1e42c:	4b08      	ldr	r3, [pc, #32]	; (1e450 <MQTTDisconnect+0x74>)
   1e42e:	4798      	blx	r3
   1e430:	0003      	movs	r3, r0
   1e432:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   1e434:	687b      	ldr	r3, [r7, #4]
   1e436:	2200      	movs	r2, #0
   1e438:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1e43a:	69fb      	ldr	r3, [r7, #28]
}
   1e43c:	0018      	movs	r0, r3
   1e43e:	46bd      	mov	sp, r7
   1e440:	b008      	add	sp, #32
   1e442:	bd80      	pop	{r7, pc}
   1e444:	0001e625 	.word	0x0001e625
   1e448:	0001e5ad 	.word	0x0001e5ad
   1e44c:	0001f1d5 	.word	0x0001f1d5
   1e450:	0001d79d 	.word	0x0001d79d

0001e454 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   1e454:	b580      	push	{r7, lr}
   1e456:	b084      	sub	sp, #16
   1e458:	af00      	add	r7, sp, #0
   1e45a:	0002      	movs	r2, r0
   1e45c:	1dfb      	adds	r3, r7, #7
   1e45e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1e460:	2300      	movs	r3, #0
   1e462:	60fb      	str	r3, [r7, #12]
   1e464:	e01c      	b.n	1e4a0 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1e466:	4a12      	ldr	r2, [pc, #72]	; (1e4b0 <isMQTTSocket+0x5c>)
   1e468:	68fb      	ldr	r3, [r7, #12]
   1e46a:	2164      	movs	r1, #100	; 0x64
   1e46c:	434b      	muls	r3, r1
   1e46e:	18d3      	adds	r3, r2, r3
   1e470:	3360      	adds	r3, #96	; 0x60
   1e472:	681b      	ldr	r3, [r3, #0]
   1e474:	2b00      	cmp	r3, #0
   1e476:	d010      	beq.n	1e49a <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   1e478:	4a0d      	ldr	r2, [pc, #52]	; (1e4b0 <isMQTTSocket+0x5c>)
   1e47a:	68fb      	ldr	r3, [r7, #12]
   1e47c:	2164      	movs	r1, #100	; 0x64
   1e47e:	434b      	muls	r3, r1
   1e480:	18d3      	adds	r3, r2, r3
   1e482:	3360      	adds	r3, #96	; 0x60
   1e484:	681b      	ldr	r3, [r3, #0]
   1e486:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   1e488:	68bb      	ldr	r3, [r7, #8]
   1e48a:	6a1a      	ldr	r2, [r3, #32]
   1e48c:	1dfb      	adds	r3, r7, #7
   1e48e:	781b      	ldrb	r3, [r3, #0]
   1e490:	b25b      	sxtb	r3, r3
   1e492:	429a      	cmp	r2, r3
   1e494:	d101      	bne.n	1e49a <isMQTTSocket+0x46>
				return true;
   1e496:	2301      	movs	r3, #1
   1e498:	e006      	b.n	1e4a8 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1e49a:	68fb      	ldr	r3, [r7, #12]
   1e49c:	3301      	adds	r3, #1
   1e49e:	60fb      	str	r3, [r7, #12]
   1e4a0:	68fb      	ldr	r3, [r7, #12]
   1e4a2:	2b06      	cmp	r3, #6
   1e4a4:	d9df      	bls.n	1e466 <isMQTTSocket+0x12>
		}
	}
	return false;
   1e4a6:	2300      	movs	r3, #0
}
   1e4a8:	0018      	movs	r0, r3
   1e4aa:	46bd      	mov	sp, r7
   1e4ac:	b004      	add	sp, #16
   1e4ae:	bd80      	pop	{r7, pc}
   1e4b0:	2000406c 	.word	0x2000406c

0001e4b4 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   1e4b4:	b580      	push	{r7, lr}
   1e4b6:	b082      	sub	sp, #8
   1e4b8:	af00      	add	r7, sp, #0
   1e4ba:	6078      	str	r0, [r7, #4]
   1e4bc:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   1e4be:	4b0d      	ldr	r3, [pc, #52]	; (1e4f4 <dnsResolveCallback+0x40>)
   1e4c0:	781b      	ldrb	r3, [r3, #0]
   1e4c2:	2201      	movs	r2, #1
   1e4c4:	4053      	eors	r3, r2
   1e4c6:	b2db      	uxtb	r3, r3
   1e4c8:	2b00      	cmp	r3, #0
   1e4ca:	d00e      	beq.n	1e4ea <dnsResolveCallback+0x36>
   1e4cc:	4b0a      	ldr	r3, [pc, #40]	; (1e4f8 <dnsResolveCallback+0x44>)
   1e4ce:	681b      	ldr	r3, [r3, #0]
   1e4d0:	687a      	ldr	r2, [r7, #4]
   1e4d2:	0011      	movs	r1, r2
   1e4d4:	0018      	movs	r0, r3
   1e4d6:	4b09      	ldr	r3, [pc, #36]	; (1e4fc <dnsResolveCallback+0x48>)
   1e4d8:	4798      	blx	r3
   1e4da:	1e03      	subs	r3, r0, #0
   1e4dc:	d105      	bne.n	1e4ea <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   1e4de:	683a      	ldr	r2, [r7, #0]
   1e4e0:	4b07      	ldr	r3, [pc, #28]	; (1e500 <dnsResolveCallback+0x4c>)
   1e4e2:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   1e4e4:	4b03      	ldr	r3, [pc, #12]	; (1e4f4 <dnsResolveCallback+0x40>)
   1e4e6:	2201      	movs	r2, #1
   1e4e8:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   1e4ea:	46c0      	nop			; (mov r8, r8)
   1e4ec:	46bd      	mov	sp, r7
   1e4ee:	b002      	add	sp, #8
   1e4f0:	bd80      	pop	{r7, pc}
   1e4f2:	46c0      	nop			; (mov r8, r8)
   1e4f4:	20003f5c 	.word	0x20003f5c
   1e4f8:	20004068 	.word	0x20004068
   1e4fc:	00024b0f 	.word	0x00024b0f
   1e500:	20003f54 	.word	0x20003f54

0001e504 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   1e504:	b580      	push	{r7, lr}
   1e506:	b084      	sub	sp, #16
   1e508:	af00      	add	r7, sp, #0
   1e50a:	603a      	str	r2, [r7, #0]
   1e50c:	1dfb      	adds	r3, r7, #7
   1e50e:	1c02      	adds	r2, r0, #0
   1e510:	701a      	strb	r2, [r3, #0]
   1e512:	1dbb      	adds	r3, r7, #6
   1e514:	1c0a      	adds	r2, r1, #0
   1e516:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   1e518:	1dfb      	adds	r3, r7, #7
   1e51a:	781b      	ldrb	r3, [r3, #0]
   1e51c:	b25b      	sxtb	r3, r3
   1e51e:	0018      	movs	r0, r3
   1e520:	4b12      	ldr	r3, [pc, #72]	; (1e56c <tcpClientSocketEventHandler+0x68>)
   1e522:	4798      	blx	r3
   1e524:	1e03      	subs	r3, r0, #0
   1e526:	d01c      	beq.n	1e562 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   1e528:	1dbb      	adds	r3, r7, #6
   1e52a:	781b      	ldrb	r3, [r3, #0]
   1e52c:	2b06      	cmp	r3, #6
   1e52e:	d00c      	beq.n	1e54a <tcpClientSocketEventHandler+0x46>
   1e530:	2b07      	cmp	r3, #7
   1e532:	d006      	beq.n	1e542 <tcpClientSocketEventHandler+0x3e>
   1e534:	2b05      	cmp	r3, #5
   1e536:	d000      	beq.n	1e53a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   1e538:	e013      	b.n	1e562 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   1e53a:	4b0d      	ldr	r3, [pc, #52]	; (1e570 <tcpClientSocketEventHandler+0x6c>)
   1e53c:	2201      	movs	r2, #1
   1e53e:	701a      	strb	r2, [r3, #0]
			break;
   1e540:	e00f      	b.n	1e562 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   1e542:	4b0c      	ldr	r3, [pc, #48]	; (1e574 <tcpClientSocketEventHandler+0x70>)
   1e544:	2201      	movs	r2, #1
   1e546:	701a      	strb	r2, [r3, #0]
			break;
   1e548:	e00b      	b.n	1e562 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   1e54a:	683b      	ldr	r3, [r7, #0]
   1e54c:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   1e54e:	68fb      	ldr	r3, [r7, #12]
   1e550:	2204      	movs	r2, #4
   1e552:	5e9b      	ldrsh	r3, [r3, r2]
   1e554:	001a      	movs	r2, r3
   1e556:	4b08      	ldr	r3, [pc, #32]	; (1e578 <tcpClientSocketEventHandler+0x74>)
   1e558:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1e55a:	4b08      	ldr	r3, [pc, #32]	; (1e57c <tcpClientSocketEventHandler+0x78>)
   1e55c:	2201      	movs	r2, #1
   1e55e:	701a      	strb	r2, [r3, #0]
			break;
   1e560:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1e562:	46c0      	nop			; (mov r8, r8)
   1e564:	46bd      	mov	sp, r7
   1e566:	b004      	add	sp, #16
   1e568:	bd80      	pop	{r7, pc}
   1e56a:	46c0      	nop			; (mov r8, r8)
   1e56c:	0001e455 	.word	0x0001e455
   1e570:	20003f5d 	.word	0x20003f5d
   1e574:	20003f5e 	.word	0x20003f5e
   1e578:	20003f58 	.word	0x20003f58
   1e57c:	20003f5f 	.word	0x20003f5f

0001e580 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   1e580:	b580      	push	{r7, lr}
   1e582:	b082      	sub	sp, #8
   1e584:	af00      	add	r7, sp, #0
   1e586:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   1e588:	687b      	ldr	r3, [r7, #4]
   1e58a:	3304      	adds	r3, #4
   1e58c:	687a      	ldr	r2, [r7, #4]
   1e58e:	0011      	movs	r1, r2
   1e590:	0018      	movs	r0, r3
   1e592:	4b05      	ldr	r3, [pc, #20]	; (1e5a8 <TimerIsExpired+0x28>)
   1e594:	4798      	blx	r3
   1e596:	0003      	movs	r3, r0
   1e598:	3b01      	subs	r3, #1
   1e59a:	425a      	negs	r2, r3
   1e59c:	4153      	adcs	r3, r2
   1e59e:	b2db      	uxtb	r3, r3
}
   1e5a0:	0018      	movs	r0, r3
   1e5a2:	46bd      	mov	sp, r7
   1e5a4:	b002      	add	sp, #8
   1e5a6:	bd80      	pop	{r7, pc}
   1e5a8:	0000bdb5 	.word	0x0000bdb5

0001e5ac <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   1e5ac:	b580      	push	{r7, lr}
   1e5ae:	b082      	sub	sp, #8
   1e5b0:	af00      	add	r7, sp, #0
   1e5b2:	6078      	str	r0, [r7, #4]
   1e5b4:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   1e5b6:	687b      	ldr	r3, [r7, #4]
   1e5b8:	683a      	ldr	r2, [r7, #0]
   1e5ba:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   1e5bc:	687b      	ldr	r3, [r7, #4]
   1e5be:	3304      	adds	r3, #4
   1e5c0:	0018      	movs	r0, r3
   1e5c2:	4b03      	ldr	r3, [pc, #12]	; (1e5d0 <TimerCountdownMS+0x24>)
   1e5c4:	4798      	blx	r3
}
   1e5c6:	46c0      	nop			; (mov r8, r8)
   1e5c8:	46bd      	mov	sp, r7
   1e5ca:	b002      	add	sp, #8
   1e5cc:	bd80      	pop	{r7, pc}
   1e5ce:	46c0      	nop			; (mov r8, r8)
   1e5d0:	0000bd49 	.word	0x0000bd49

0001e5d4 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   1e5d4:	b580      	push	{r7, lr}
   1e5d6:	b082      	sub	sp, #8
   1e5d8:	af00      	add	r7, sp, #0
   1e5da:	6078      	str	r0, [r7, #4]
   1e5dc:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   1e5de:	683b      	ldr	r3, [r7, #0]
   1e5e0:	22fa      	movs	r2, #250	; 0xfa
   1e5e2:	0092      	lsls	r2, r2, #2
   1e5e4:	435a      	muls	r2, r3
   1e5e6:	687b      	ldr	r3, [r7, #4]
   1e5e8:	0011      	movs	r1, r2
   1e5ea:	0018      	movs	r0, r3
   1e5ec:	4b02      	ldr	r3, [pc, #8]	; (1e5f8 <TimerCountdown+0x24>)
   1e5ee:	4798      	blx	r3
}
   1e5f0:	46c0      	nop			; (mov r8, r8)
   1e5f2:	46bd      	mov	sp, r7
   1e5f4:	b002      	add	sp, #8
   1e5f6:	bd80      	pop	{r7, pc}
   1e5f8:	0001e5ad 	.word	0x0001e5ad

0001e5fc <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   1e5fc:	b580      	push	{r7, lr}
   1e5fe:	b082      	sub	sp, #8
   1e600:	af00      	add	r7, sp, #0
   1e602:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   1e604:	687b      	ldr	r3, [r7, #4]
   1e606:	3304      	adds	r3, #4
   1e608:	687a      	ldr	r2, [r7, #4]
   1e60a:	0011      	movs	r1, r2
   1e60c:	0018      	movs	r0, r3
   1e60e:	4b04      	ldr	r3, [pc, #16]	; (1e620 <TimerLeftMS+0x24>)
   1e610:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   1e612:	687b      	ldr	r3, [r7, #4]
   1e614:	681b      	ldr	r3, [r3, #0]
}
   1e616:	0018      	movs	r0, r3
   1e618:	46bd      	mov	sp, r7
   1e61a:	b002      	add	sp, #8
   1e61c:	bd80      	pop	{r7, pc}
   1e61e:	46c0      	nop			; (mov r8, r8)
   1e620:	0000bdb5 	.word	0x0000bdb5

0001e624 <TimerInit>:


void TimerInit(Timer* timer) {
   1e624:	b580      	push	{r7, lr}
   1e626:	b082      	sub	sp, #8
   1e628:	af00      	add	r7, sp, #0
   1e62a:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   1e62c:	687b      	ldr	r3, [r7, #4]
   1e62e:	2200      	movs	r2, #0
   1e630:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   1e632:	687b      	ldr	r3, [r7, #4]
   1e634:	3304      	adds	r3, #4
   1e636:	2208      	movs	r2, #8
   1e638:	2100      	movs	r1, #0
   1e63a:	0018      	movs	r0, r3
   1e63c:	4b02      	ldr	r3, [pc, #8]	; (1e648 <TimerInit+0x24>)
   1e63e:	4798      	blx	r3
}
   1e640:	46c0      	nop			; (mov r8, r8)
   1e642:	46bd      	mov	sp, r7
   1e644:	b002      	add	sp, #8
   1e646:	bd80      	pop	{r7, pc}
   1e648:	000247b7 	.word	0x000247b7

0001e64c <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1e64c:	b590      	push	{r4, r7, lr}
   1e64e:	b085      	sub	sp, #20
   1e650:	af00      	add	r7, sp, #0
   1e652:	60f8      	str	r0, [r7, #12]
   1e654:	60b9      	str	r1, [r7, #8]
   1e656:	607a      	str	r2, [r7, #4]
   1e658:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   1e65a:	683b      	ldr	r3, [r7, #0]
   1e65c:	2b00      	cmp	r3, #0
   1e65e:	d101      	bne.n	1e664 <WINC1500_read+0x18>
   1e660:	230a      	movs	r3, #10
   1e662:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1e664:	4b2c      	ldr	r3, [pc, #176]	; (1e718 <WINC1500_read+0xcc>)
   1e666:	681b      	ldr	r3, [r3, #0]
   1e668:	2b00      	cmp	r3, #0
   1e66a:	d131      	bne.n	1e6d0 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   1e66c:	4b2b      	ldr	r3, [pc, #172]	; (1e71c <WINC1500_read+0xd0>)
   1e66e:	2200      	movs	r2, #0
   1e670:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1e672:	68fb      	ldr	r3, [r7, #12]
   1e674:	681b      	ldr	r3, [r3, #0]
   1e676:	b258      	sxtb	r0, r3
   1e678:	683c      	ldr	r4, [r7, #0]
   1e67a:	2380      	movs	r3, #128	; 0x80
   1e67c:	005a      	lsls	r2, r3, #1
   1e67e:	4928      	ldr	r1, [pc, #160]	; (1e720 <WINC1500_read+0xd4>)
   1e680:	0023      	movs	r3, r4
   1e682:	4c28      	ldr	r4, [pc, #160]	; (1e724 <WINC1500_read+0xd8>)
   1e684:	47a0      	blx	r4
   1e686:	1e03      	subs	r3, r0, #0
   1e688:	d005      	beq.n	1e696 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   1e68a:	2301      	movs	r3, #1
   1e68c:	425b      	negs	r3, r3
   1e68e:	e03e      	b.n	1e70e <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   1e690:	2000      	movs	r0, #0
   1e692:	4b25      	ldr	r3, [pc, #148]	; (1e728 <WINC1500_read+0xdc>)
   1e694:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   1e696:	4b21      	ldr	r3, [pc, #132]	; (1e71c <WINC1500_read+0xd0>)
   1e698:	781b      	ldrb	r3, [r3, #0]
   1e69a:	2201      	movs	r2, #1
   1e69c:	4053      	eors	r3, r2
   1e69e:	b2db      	uxtb	r3, r3
   1e6a0:	2b00      	cmp	r3, #0
   1e6a2:	d1f5      	bne.n	1e690 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   1e6a4:	4b21      	ldr	r3, [pc, #132]	; (1e72c <WINC1500_read+0xe0>)
   1e6a6:	681b      	ldr	r3, [r3, #0]
   1e6a8:	2b00      	cmp	r3, #0
   1e6aa:	dd08      	ble.n	1e6be <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1e6ac:	4b1f      	ldr	r3, [pc, #124]	; (1e72c <WINC1500_read+0xe0>)
   1e6ae:	681b      	ldr	r3, [r3, #0]
   1e6b0:	001a      	movs	r2, r3
   1e6b2:	4b19      	ldr	r3, [pc, #100]	; (1e718 <WINC1500_read+0xcc>)
   1e6b4:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   1e6b6:	4b1e      	ldr	r3, [pc, #120]	; (1e730 <WINC1500_read+0xe4>)
   1e6b8:	2200      	movs	r2, #0
   1e6ba:	601a      	str	r2, [r3, #0]
   1e6bc:	e008      	b.n	1e6d0 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   1e6be:	4b16      	ldr	r3, [pc, #88]	; (1e718 <WINC1500_read+0xcc>)
   1e6c0:	2200      	movs	r2, #0
   1e6c2:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   1e6c4:	4b1a      	ldr	r3, [pc, #104]	; (1e730 <WINC1500_read+0xe4>)
   1e6c6:	2200      	movs	r2, #0
   1e6c8:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   1e6ca:	4b18      	ldr	r3, [pc, #96]	; (1e72c <WINC1500_read+0xe0>)
   1e6cc:	681b      	ldr	r3, [r3, #0]
   1e6ce:	e01e      	b.n	1e70e <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   1e6d0:	4b11      	ldr	r3, [pc, #68]	; (1e718 <WINC1500_read+0xcc>)
   1e6d2:	681b      	ldr	r3, [r3, #0]
   1e6d4:	001a      	movs	r2, r3
   1e6d6:	687b      	ldr	r3, [r7, #4]
   1e6d8:	4293      	cmp	r3, r2
   1e6da:	dd02      	ble.n	1e6e2 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   1e6dc:	2301      	movs	r3, #1
   1e6de:	425b      	negs	r3, r3
   1e6e0:	e015      	b.n	1e70e <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1e6e2:	4b13      	ldr	r3, [pc, #76]	; (1e730 <WINC1500_read+0xe4>)
   1e6e4:	681a      	ldr	r2, [r3, #0]
   1e6e6:	4b0e      	ldr	r3, [pc, #56]	; (1e720 <WINC1500_read+0xd4>)
   1e6e8:	18d1      	adds	r1, r2, r3
   1e6ea:	687a      	ldr	r2, [r7, #4]
   1e6ec:	68bb      	ldr	r3, [r7, #8]
   1e6ee:	0018      	movs	r0, r3
   1e6f0:	4b10      	ldr	r3, [pc, #64]	; (1e734 <WINC1500_read+0xe8>)
   1e6f2:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1e6f4:	4b08      	ldr	r3, [pc, #32]	; (1e718 <WINC1500_read+0xcc>)
   1e6f6:	681a      	ldr	r2, [r3, #0]
   1e6f8:	687b      	ldr	r3, [r7, #4]
   1e6fa:	1ad2      	subs	r2, r2, r3
   1e6fc:	4b06      	ldr	r3, [pc, #24]	; (1e718 <WINC1500_read+0xcc>)
   1e6fe:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1e700:	4b0b      	ldr	r3, [pc, #44]	; (1e730 <WINC1500_read+0xe4>)
   1e702:	681a      	ldr	r2, [r3, #0]
   1e704:	687b      	ldr	r3, [r7, #4]
   1e706:	18d2      	adds	r2, r2, r3
   1e708:	4b09      	ldr	r3, [pc, #36]	; (1e730 <WINC1500_read+0xe4>)
   1e70a:	601a      	str	r2, [r3, #0]
  
  return len;
   1e70c:	687b      	ldr	r3, [r7, #4]
}
   1e70e:	0018      	movs	r0, r3
   1e710:	46bd      	mov	sp, r7
   1e712:	b005      	add	sp, #20
   1e714:	bd90      	pop	{r4, r7, pc}
   1e716:	46c0      	nop			; (mov r8, r8)
   1e718:	20004064 	.word	0x20004064
   1e71c:	20003f5f 	.word	0x20003f5f
   1e720:	20003f60 	.word	0x20003f60
   1e724:	00014d01 	.word	0x00014d01
   1e728:	00011249 	.word	0x00011249
   1e72c:	20003f58 	.word	0x20003f58
   1e730:	20004060 	.word	0x20004060
   1e734:	00024781 	.word	0x00024781

0001e738 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   1e738:	b590      	push	{r4, r7, lr}
   1e73a:	b085      	sub	sp, #20
   1e73c:	af00      	add	r7, sp, #0
   1e73e:	60f8      	str	r0, [r7, #12]
   1e740:	60b9      	str	r1, [r7, #8]
   1e742:	607a      	str	r2, [r7, #4]
   1e744:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   1e746:	4b10      	ldr	r3, [pc, #64]	; (1e788 <WINC1500_write+0x50>)
   1e748:	2200      	movs	r2, #0
   1e74a:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1e74c:	68fb      	ldr	r3, [r7, #12]
   1e74e:	681b      	ldr	r3, [r3, #0]
   1e750:	b258      	sxtb	r0, r3
   1e752:	687b      	ldr	r3, [r7, #4]
   1e754:	b29a      	uxth	r2, r3
   1e756:	68b9      	ldr	r1, [r7, #8]
   1e758:	2300      	movs	r3, #0
   1e75a:	4c0c      	ldr	r4, [pc, #48]	; (1e78c <WINC1500_write+0x54>)
   1e75c:	47a0      	blx	r4
   1e75e:	1e03      	subs	r3, r0, #0
   1e760:	d005      	beq.n	1e76e <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   1e762:	2301      	movs	r3, #1
   1e764:	425b      	negs	r3, r3
   1e766:	e00a      	b.n	1e77e <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   1e768:	2000      	movs	r0, #0
   1e76a:	4b09      	ldr	r3, [pc, #36]	; (1e790 <WINC1500_write+0x58>)
   1e76c:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   1e76e:	4b06      	ldr	r3, [pc, #24]	; (1e788 <WINC1500_write+0x50>)
   1e770:	781b      	ldrb	r3, [r3, #0]
   1e772:	2201      	movs	r2, #1
   1e774:	4053      	eors	r3, r2
   1e776:	b2db      	uxtb	r3, r3
   1e778:	2b00      	cmp	r3, #0
   1e77a:	d1f5      	bne.n	1e768 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   1e77c:	687b      	ldr	r3, [r7, #4]
}
   1e77e:	0018      	movs	r0, r3
   1e780:	46bd      	mov	sp, r7
   1e782:	b005      	add	sp, #20
   1e784:	bd90      	pop	{r4, r7, pc}
   1e786:	46c0      	nop			; (mov r8, r8)
   1e788:	20003f5e 	.word	0x20003f5e
   1e78c:	00014b9d 	.word	0x00014b9d
   1e790:	00011249 	.word	0x00011249

0001e794 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   1e794:	b580      	push	{r7, lr}
   1e796:	b082      	sub	sp, #8
   1e798:	af00      	add	r7, sp, #0
   1e79a:	6078      	str	r0, [r7, #4]
	close(n->socket);
   1e79c:	687b      	ldr	r3, [r7, #4]
   1e79e:	681b      	ldr	r3, [r3, #0]
   1e7a0:	b25b      	sxtb	r3, r3
   1e7a2:	0018      	movs	r0, r3
   1e7a4:	4b06      	ldr	r3, [pc, #24]	; (1e7c0 <WINC1500_disconnect+0x2c>)
   1e7a6:	4798      	blx	r3
	n->socket=-1;
   1e7a8:	687b      	ldr	r3, [r7, #4]
   1e7aa:	2201      	movs	r2, #1
   1e7ac:	4252      	negs	r2, r2
   1e7ae:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   1e7b0:	4b04      	ldr	r3, [pc, #16]	; (1e7c4 <WINC1500_disconnect+0x30>)
   1e7b2:	2200      	movs	r2, #0
   1e7b4:	701a      	strb	r2, [r3, #0]
}
   1e7b6:	46c0      	nop			; (mov r8, r8)
   1e7b8:	46bd      	mov	sp, r7
   1e7ba:	b002      	add	sp, #8
   1e7bc:	bd80      	pop	{r7, pc}
   1e7be:	46c0      	nop			; (mov r8, r8)
   1e7c0:	00014e81 	.word	0x00014e81
   1e7c4:	20003f5d 	.word	0x20003f5d

0001e7c8 <NetworkInit>:


void NetworkInit(Network* n) {
   1e7c8:	b580      	push	{r7, lr}
   1e7ca:	b082      	sub	sp, #8
   1e7cc:	af00      	add	r7, sp, #0
   1e7ce:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   1e7d0:	687b      	ldr	r3, [r7, #4]
   1e7d2:	2201      	movs	r2, #1
   1e7d4:	4252      	negs	r2, r2
   1e7d6:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   1e7d8:	687b      	ldr	r3, [r7, #4]
   1e7da:	4a06      	ldr	r2, [pc, #24]	; (1e7f4 <NetworkInit+0x2c>)
   1e7dc:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   1e7de:	687b      	ldr	r3, [r7, #4]
   1e7e0:	4a05      	ldr	r2, [pc, #20]	; (1e7f8 <NetworkInit+0x30>)
   1e7e2:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   1e7e4:	687b      	ldr	r3, [r7, #4]
   1e7e6:	4a05      	ldr	r2, [pc, #20]	; (1e7fc <NetworkInit+0x34>)
   1e7e8:	611a      	str	r2, [r3, #16]
}
   1e7ea:	46c0      	nop			; (mov r8, r8)
   1e7ec:	46bd      	mov	sp, r7
   1e7ee:	b002      	add	sp, #8
   1e7f0:	bd80      	pop	{r7, pc}
   1e7f2:	46c0      	nop			; (mov r8, r8)
   1e7f4:	0001e64d 	.word	0x0001e64d
   1e7f8:	0001e739 	.word	0x0001e739
   1e7fc:	0001e795 	.word	0x0001e795

0001e800 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   1e800:	b580      	push	{r7, lr}
   1e802:	b088      	sub	sp, #32
   1e804:	af00      	add	r7, sp, #0
   1e806:	60f8      	str	r0, [r7, #12]
   1e808:	60b9      	str	r1, [r7, #8]
   1e80a:	607a      	str	r2, [r7, #4]
   1e80c:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1e80e:	4b37      	ldr	r3, [pc, #220]	; (1e8ec <ConnectNetwork+0xec>)
   1e810:	2200      	movs	r2, #0
   1e812:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   1e814:	4b36      	ldr	r3, [pc, #216]	; (1e8f0 <ConnectNetwork+0xf0>)
   1e816:	68ba      	ldr	r2, [r7, #8]
   1e818:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   1e81a:	68bb      	ldr	r3, [r7, #8]
   1e81c:	0018      	movs	r0, r3
   1e81e:	4b35      	ldr	r3, [pc, #212]	; (1e8f4 <ConnectNetwork+0xf4>)
   1e820:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1e822:	e002      	b.n	1e82a <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   1e824:	2000      	movs	r0, #0
   1e826:	4b34      	ldr	r3, [pc, #208]	; (1e8f8 <ConnectNetwork+0xf8>)
   1e828:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   1e82a:	4b30      	ldr	r3, [pc, #192]	; (1e8ec <ConnectNetwork+0xec>)
   1e82c:	781b      	ldrb	r3, [r3, #0]
   1e82e:	2201      	movs	r2, #1
   1e830:	4053      	eors	r3, r2
   1e832:	b2db      	uxtb	r3, r3
   1e834:	2b00      	cmp	r3, #0
   1e836:	d1f5      	bne.n	1e824 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1e838:	4b30      	ldr	r3, [pc, #192]	; (1e8fc <ConnectNetwork+0xfc>)
   1e83a:	681a      	ldr	r2, [r3, #0]
   1e83c:	68fb      	ldr	r3, [r7, #12]
   1e83e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   1e840:	2310      	movs	r3, #16
   1e842:	18fb      	adds	r3, r7, r3
   1e844:	2202      	movs	r2, #2
   1e846:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   1e848:	687b      	ldr	r3, [r7, #4]
   1e84a:	b29b      	uxth	r3, r3
   1e84c:	021b      	lsls	r3, r3, #8
   1e84e:	b21a      	sxth	r2, r3
   1e850:	687b      	ldr	r3, [r7, #4]
   1e852:	b29b      	uxth	r3, r3
   1e854:	0a1b      	lsrs	r3, r3, #8
   1e856:	b29b      	uxth	r3, r3
   1e858:	b21b      	sxth	r3, r3
   1e85a:	4313      	orrs	r3, r2
   1e85c:	b21b      	sxth	r3, r3
   1e85e:	b29a      	uxth	r2, r3
   1e860:	2310      	movs	r3, #16
   1e862:	18fb      	adds	r3, r7, r3
   1e864:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   1e866:	4b25      	ldr	r3, [pc, #148]	; (1e8fc <ConnectNetwork+0xfc>)
   1e868:	681b      	ldr	r3, [r3, #0]
   1e86a:	001a      	movs	r2, r3
   1e86c:	2310      	movs	r3, #16
   1e86e:	18fb      	adds	r3, r7, r3
   1e870:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   1e872:	68fb      	ldr	r3, [r7, #12]
   1e874:	681b      	ldr	r3, [r3, #0]
   1e876:	2b00      	cmp	r3, #0
   1e878:	da0a      	bge.n	1e890 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1e87a:	683b      	ldr	r3, [r7, #0]
   1e87c:	b2db      	uxtb	r3, r3
   1e87e:	001a      	movs	r2, r3
   1e880:	2101      	movs	r1, #1
   1e882:	2002      	movs	r0, #2
   1e884:	4b1e      	ldr	r3, [pc, #120]	; (1e900 <ConnectNetwork+0x100>)
   1e886:	4798      	blx	r3
   1e888:	0003      	movs	r3, r0
   1e88a:	001a      	movs	r2, r3
   1e88c:	68fb      	ldr	r3, [r7, #12]
   1e88e:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1e890:	68fb      	ldr	r3, [r7, #12]
   1e892:	681b      	ldr	r3, [r3, #0]
   1e894:	3301      	adds	r3, #1
   1e896:	d108      	bne.n	1e8aa <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   1e898:	68fb      	ldr	r3, [r7, #12]
   1e89a:	681b      	ldr	r3, [r3, #0]
   1e89c:	b25b      	sxtb	r3, r3
   1e89e:	0018      	movs	r0, r3
   1e8a0:	4b18      	ldr	r3, [pc, #96]	; (1e904 <ConnectNetwork+0x104>)
   1e8a2:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1e8a4:	2309      	movs	r3, #9
   1e8a6:	425b      	negs	r3, r3
   1e8a8:	e01c      	b.n	1e8e4 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   1e8aa:	68fb      	ldr	r3, [r7, #12]
   1e8ac:	681b      	ldr	r3, [r3, #0]
   1e8ae:	b25b      	sxtb	r3, r3
   1e8b0:	2210      	movs	r2, #16
   1e8b2:	18b9      	adds	r1, r7, r2
   1e8b4:	2210      	movs	r2, #16
   1e8b6:	0018      	movs	r0, r3
   1e8b8:	4b13      	ldr	r3, [pc, #76]	; (1e908 <ConnectNetwork+0x108>)
   1e8ba:	4798      	blx	r3
   1e8bc:	1e03      	subs	r3, r0, #0
   1e8be:	d002      	beq.n	1e8c6 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   1e8c0:	2309      	movs	r3, #9
   1e8c2:	425b      	negs	r3, r3
   1e8c4:	e00e      	b.n	1e8e4 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   1e8c6:	4b11      	ldr	r3, [pc, #68]	; (1e90c <ConnectNetwork+0x10c>)
   1e8c8:	2200      	movs	r2, #0
   1e8ca:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   1e8cc:	e002      	b.n	1e8d4 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   1e8ce:	2000      	movs	r0, #0
   1e8d0:	4b09      	ldr	r3, [pc, #36]	; (1e8f8 <ConnectNetwork+0xf8>)
   1e8d2:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   1e8d4:	4b0d      	ldr	r3, [pc, #52]	; (1e90c <ConnectNetwork+0x10c>)
   1e8d6:	781b      	ldrb	r3, [r3, #0]
   1e8d8:	2201      	movs	r2, #1
   1e8da:	4053      	eors	r3, r2
   1e8dc:	b2db      	uxtb	r3, r3
   1e8de:	2b00      	cmp	r3, #0
   1e8e0:	d1f5      	bne.n	1e8ce <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   1e8e2:	2300      	movs	r3, #0
   1e8e4:	0018      	movs	r0, r3
   1e8e6:	46bd      	mov	sp, r7
   1e8e8:	b008      	add	sp, #32
   1e8ea:	bd80      	pop	{r7, pc}
   1e8ec:	20003f5c 	.word	0x20003f5c
   1e8f0:	20004068 	.word	0x20004068
   1e8f4:	000150c9 	.word	0x000150c9
   1e8f8:	00011249 	.word	0x00011249
   1e8fc:	20003f54 	.word	0x20003f54
   1e900:	00014875 	.word	0x00014875
   1e904:	00014e81 	.word	0x00014e81
   1e908:	00014a89 	.word	0x00014a89
   1e90c:	20003f5d 	.word	0x20003f5d

0001e910 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   1e910:	b580      	push	{r7, lr}
   1e912:	b084      	sub	sp, #16
   1e914:	af00      	add	r7, sp, #0
   1e916:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   1e918:	687b      	ldr	r3, [r7, #4]
   1e91a:	2b00      	cmp	r3, #0
   1e91c:	d022      	beq.n	1e964 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1e91e:	2300      	movs	r3, #0
   1e920:	60fb      	str	r3, [r7, #12]
   1e922:	e01b      	b.n	1e95c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1e924:	4a11      	ldr	r2, [pc, #68]	; (1e96c <allocateClient+0x5c>)
   1e926:	68fb      	ldr	r3, [r7, #12]
   1e928:	2164      	movs	r1, #100	; 0x64
   1e92a:	434b      	muls	r3, r1
   1e92c:	18d3      	adds	r3, r2, r3
   1e92e:	3360      	adds	r3, #96	; 0x60
   1e930:	681b      	ldr	r3, [r3, #0]
   1e932:	2b00      	cmp	r3, #0
   1e934:	d10f      	bne.n	1e956 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   1e936:	4a0d      	ldr	r2, [pc, #52]	; (1e96c <allocateClient+0x5c>)
   1e938:	68fb      	ldr	r3, [r7, #12]
   1e93a:	2164      	movs	r1, #100	; 0x64
   1e93c:	434b      	muls	r3, r1
   1e93e:	18d3      	adds	r3, r2, r3
   1e940:	3360      	adds	r3, #96	; 0x60
   1e942:	687a      	ldr	r2, [r7, #4]
   1e944:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   1e946:	68fb      	ldr	r3, [r7, #12]
   1e948:	2264      	movs	r2, #100	; 0x64
   1e94a:	435a      	muls	r2, r3
   1e94c:	4b07      	ldr	r3, [pc, #28]	; (1e96c <allocateClient+0x5c>)
   1e94e:	18d2      	adds	r2, r2, r3
   1e950:	687b      	ldr	r3, [r7, #4]
   1e952:	61da      	str	r2, [r3, #28]
			return;
   1e954:	e007      	b.n	1e966 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1e956:	68fb      	ldr	r3, [r7, #12]
   1e958:	3301      	adds	r3, #1
   1e95a:	60fb      	str	r3, [r7, #12]
   1e95c:	68fb      	ldr	r3, [r7, #12]
   1e95e:	2b06      	cmp	r3, #6
   1e960:	d9e0      	bls.n	1e924 <allocateClient+0x14>
   1e962:	e000      	b.n	1e966 <allocateClient+0x56>
		return;
   1e964:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   1e966:	46bd      	mov	sp, r7
   1e968:	b004      	add	sp, #16
   1e96a:	bd80      	pop	{r7, pc}
   1e96c:	2000406c 	.word	0x2000406c

0001e970 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   1e970:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e972:	b089      	sub	sp, #36	; 0x24
   1e974:	af04      	add	r7, sp, #16
   1e976:	6078      	str	r0, [r7, #4]
   1e978:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   1e97a:	687b      	ldr	r3, [r7, #4]
   1e97c:	2b00      	cmp	r3, #0
   1e97e:	d00a      	beq.n	1e996 <mqtt_init+0x26>
   1e980:	683b      	ldr	r3, [r7, #0]
   1e982:	2b00      	cmp	r3, #0
   1e984:	d007      	beq.n	1e996 <mqtt_init+0x26>
   1e986:	683b      	ldr	r3, [r7, #0]
   1e988:	691b      	ldr	r3, [r3, #16]
   1e98a:	2b00      	cmp	r3, #0
   1e98c:	d003      	beq.n	1e996 <mqtt_init+0x26>
   1e98e:	683b      	ldr	r3, [r7, #0]
   1e990:	689b      	ldr	r3, [r3, #8]
   1e992:	2b00      	cmp	r3, #0
   1e994:	d102      	bne.n	1e99c <mqtt_init+0x2c>
		return FAILURE;
   1e996:	2301      	movs	r3, #1
   1e998:	425b      	negs	r3, r3
   1e99a:	e034      	b.n	1ea06 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   1e99c:	683b      	ldr	r3, [r7, #0]
   1e99e:	889b      	ldrh	r3, [r3, #4]
   1e9a0:	001a      	movs	r2, r3
   1e9a2:	23fa      	movs	r3, #250	; 0xfa
   1e9a4:	009b      	lsls	r3, r3, #2
   1e9a6:	4353      	muls	r3, r2
   1e9a8:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   1e9aa:	687b      	ldr	r3, [r7, #4]
   1e9ac:	3320      	adds	r3, #32
   1e9ae:	0018      	movs	r0, r3
   1e9b0:	4b17      	ldr	r3, [pc, #92]	; (1ea10 <mqtt_init+0xa0>)
   1e9b2:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1e9b4:	687b      	ldr	r3, [r7, #4]
   1e9b6:	3304      	adds	r3, #4
   1e9b8:	6839      	ldr	r1, [r7, #0]
   1e9ba:	2218      	movs	r2, #24
   1e9bc:	0018      	movs	r0, r3
   1e9be:	4b15      	ldr	r3, [pc, #84]	; (1ea14 <mqtt_init+0xa4>)
   1e9c0:	4798      	blx	r3
	allocateClient(module);
   1e9c2:	687b      	ldr	r3, [r7, #4]
   1e9c4:	0018      	movs	r0, r3
   1e9c6:	4b14      	ldr	r3, [pc, #80]	; (1ea18 <mqtt_init+0xa8>)
   1e9c8:	4798      	blx	r3
	
	if(module->client)
   1e9ca:	687b      	ldr	r3, [r7, #4]
   1e9cc:	69db      	ldr	r3, [r3, #28]
   1e9ce:	2b00      	cmp	r3, #0
   1e9d0:	d017      	beq.n	1ea02 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1e9d2:	687b      	ldr	r3, [r7, #4]
   1e9d4:	69d8      	ldr	r0, [r3, #28]
   1e9d6:	687b      	ldr	r3, [r7, #4]
   1e9d8:	3320      	adds	r3, #32
   1e9da:	001c      	movs	r4, r3
   1e9dc:	683b      	ldr	r3, [r7, #0]
   1e9de:	691e      	ldr	r6, [r3, #16]
   1e9e0:	683b      	ldr	r3, [r7, #0]
   1e9e2:	695a      	ldr	r2, [r3, #20]
   1e9e4:	683b      	ldr	r3, [r7, #0]
   1e9e6:	6899      	ldr	r1, [r3, #8]
   1e9e8:	683b      	ldr	r3, [r7, #0]
   1e9ea:	68db      	ldr	r3, [r3, #12]
   1e9ec:	68fd      	ldr	r5, [r7, #12]
   1e9ee:	9302      	str	r3, [sp, #8]
   1e9f0:	9101      	str	r1, [sp, #4]
   1e9f2:	9200      	str	r2, [sp, #0]
   1e9f4:	0033      	movs	r3, r6
   1e9f6:	002a      	movs	r2, r5
   1e9f8:	0021      	movs	r1, r4
   1e9fa:	4c08      	ldr	r4, [pc, #32]	; (1ea1c <mqtt_init+0xac>)
   1e9fc:	47a0      	blx	r4
		return SUCCESS;
   1e9fe:	2300      	movs	r3, #0
   1ea00:	e001      	b.n	1ea06 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   1ea02:	2301      	movs	r3, #1
   1ea04:	425b      	negs	r3, r3
}
   1ea06:	0018      	movs	r0, r3
   1ea08:	46bd      	mov	sp, r7
   1ea0a:	b005      	add	sp, #20
   1ea0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea0e:	46c0      	nop			; (mov r8, r8)
   1ea10:	0001e7c9 	.word	0x0001e7c9
   1ea14:	00024781 	.word	0x00024781
   1ea18:	0001e911 	.word	0x0001e911
   1ea1c:	0001d841 	.word	0x0001d841

0001ea20 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   1ea20:	b580      	push	{r7, lr}
   1ea22:	b082      	sub	sp, #8
   1ea24:	af00      	add	r7, sp, #0
   1ea26:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   1ea28:	687b      	ldr	r3, [r7, #4]
   1ea2a:	4a0c      	ldr	r2, [pc, #48]	; (1ea5c <mqtt_get_config_defaults+0x3c>)
   1ea2c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1ea2e:	687b      	ldr	r3, [r7, #4]
   1ea30:	2200      	movs	r2, #0
   1ea32:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   1ea34:	687b      	ldr	r3, [r7, #4]
   1ea36:	223c      	movs	r2, #60	; 0x3c
   1ea38:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   1ea3a:	687b      	ldr	r3, [r7, #4]
   1ea3c:	2200      	movs	r2, #0
   1ea3e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   1ea40:	687b      	ldr	r3, [r7, #4]
   1ea42:	2200      	movs	r2, #0
   1ea44:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   1ea46:	687b      	ldr	r3, [r7, #4]
   1ea48:	2200      	movs	r2, #0
   1ea4a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   1ea4c:	687b      	ldr	r3, [r7, #4]
   1ea4e:	2200      	movs	r2, #0
   1ea50:	615a      	str	r2, [r3, #20]
}
   1ea52:	46c0      	nop			; (mov r8, r8)
   1ea54:	46bd      	mov	sp, r7
   1ea56:	b002      	add	sp, #8
   1ea58:	bd80      	pop	{r7, pc}
   1ea5a:	46c0      	nop			; (mov r8, r8)
   1ea5c:	0000075b 	.word	0x0000075b

0001ea60 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   1ea60:	b580      	push	{r7, lr}
   1ea62:	b082      	sub	sp, #8
   1ea64:	af00      	add	r7, sp, #0
   1ea66:	6078      	str	r0, [r7, #4]
   1ea68:	6039      	str	r1, [r7, #0]
	if(module)
   1ea6a:	687b      	ldr	r3, [r7, #4]
   1ea6c:	2b00      	cmp	r3, #0
   1ea6e:	d004      	beq.n	1ea7a <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   1ea70:	687b      	ldr	r3, [r7, #4]
   1ea72:	683a      	ldr	r2, [r7, #0]
   1ea74:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   1ea76:	2300      	movs	r3, #0
   1ea78:	e001      	b.n	1ea7e <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   1ea7a:	2301      	movs	r3, #1
   1ea7c:	425b      	negs	r3, r3
}
   1ea7e:	0018      	movs	r0, r3
   1ea80:	46bd      	mov	sp, r7
   1ea82:	b002      	add	sp, #8
   1ea84:	bd80      	pop	{r7, pc}
	...

0001ea88 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1ea88:	b580      	push	{r7, lr}
   1ea8a:	b082      	sub	sp, #8
   1ea8c:	af00      	add	r7, sp, #0
   1ea8e:	603a      	str	r2, [r7, #0]
   1ea90:	1dfb      	adds	r3, r7, #7
   1ea92:	1c02      	adds	r2, r0, #0
   1ea94:	701a      	strb	r2, [r3, #0]
   1ea96:	1dbb      	adds	r3, r7, #6
   1ea98:	1c0a      	adds	r2, r1, #0
   1ea9a:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   1ea9c:	683a      	ldr	r2, [r7, #0]
   1ea9e:	1dbb      	adds	r3, r7, #6
   1eaa0:	7819      	ldrb	r1, [r3, #0]
   1eaa2:	1dfb      	adds	r3, r7, #7
   1eaa4:	781b      	ldrb	r3, [r3, #0]
   1eaa6:	b25b      	sxtb	r3, r3
   1eaa8:	0018      	movs	r0, r3
   1eaaa:	4b03      	ldr	r3, [pc, #12]	; (1eab8 <mqtt_socket_event_handler+0x30>)
   1eaac:	4798      	blx	r3
}
   1eaae:	46c0      	nop			; (mov r8, r8)
   1eab0:	46bd      	mov	sp, r7
   1eab2:	b002      	add	sp, #8
   1eab4:	bd80      	pop	{r7, pc}
   1eab6:	46c0      	nop			; (mov r8, r8)
   1eab8:	0001e505 	.word	0x0001e505

0001eabc <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   1eabc:	b580      	push	{r7, lr}
   1eabe:	b082      	sub	sp, #8
   1eac0:	af00      	add	r7, sp, #0
   1eac2:	6078      	str	r0, [r7, #4]
   1eac4:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   1eac6:	683a      	ldr	r2, [r7, #0]
   1eac8:	687b      	ldr	r3, [r7, #4]
   1eaca:	0011      	movs	r1, r2
   1eacc:	0018      	movs	r0, r3
   1eace:	4b03      	ldr	r3, [pc, #12]	; (1eadc <mqtt_socket_resolve_handler+0x20>)
   1ead0:	4798      	blx	r3
}
   1ead2:	46c0      	nop			; (mov r8, r8)
   1ead4:	46bd      	mov	sp, r7
   1ead6:	b002      	add	sp, #8
   1ead8:	bd80      	pop	{r7, pc}
   1eada:	46c0      	nop			; (mov r8, r8)
   1eadc:	0001e4b5 	.word	0x0001e4b5

0001eae0 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1eae0:	b590      	push	{r4, r7, lr}
   1eae2:	b085      	sub	sp, #20
   1eae4:	af00      	add	r7, sp, #0
   1eae6:	6078      	str	r0, [r7, #4]
   1eae8:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   1eaea:	687b      	ldr	r3, [r7, #4]
   1eaec:	3320      	adds	r3, #32
   1eaee:	0018      	movs	r0, r3
   1eaf0:	687b      	ldr	r3, [r7, #4]
   1eaf2:	889b      	ldrh	r3, [r3, #4]
   1eaf4:	001a      	movs	r2, r3
   1eaf6:	687b      	ldr	r3, [r7, #4]
   1eaf8:	799b      	ldrb	r3, [r3, #6]
   1eafa:	6839      	ldr	r1, [r7, #0]
   1eafc:	4c09      	ldr	r4, [pc, #36]	; (1eb24 <mqtt_connect+0x44>)
   1eafe:	47a0      	blx	r4
   1eb00:	0003      	movs	r3, r0
   1eb02:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   1eb04:	687b      	ldr	r3, [r7, #4]
   1eb06:	681b      	ldr	r3, [r3, #0]
   1eb08:	2b00      	cmp	r3, #0
   1eb0a:	d006      	beq.n	1eb1a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   1eb0c:	687b      	ldr	r3, [r7, #4]
   1eb0e:	681b      	ldr	r3, [r3, #0]
   1eb10:	220c      	movs	r2, #12
   1eb12:	18ba      	adds	r2, r7, r2
   1eb14:	6878      	ldr	r0, [r7, #4]
   1eb16:	2100      	movs	r1, #0
   1eb18:	4798      	blx	r3
	return connResult.sock_connected.result;
   1eb1a:	68fb      	ldr	r3, [r7, #12]
}
   1eb1c:	0018      	movs	r0, r3
   1eb1e:	46bd      	mov	sp, r7
   1eb20:	b005      	add	sp, #20
   1eb22:	bd90      	pop	{r4, r7, pc}
   1eb24:	0001e801 	.word	0x0001e801

0001eb28 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   1eb28:	b580      	push	{r7, lr}
   1eb2a:	b09c      	sub	sp, #112	; 0x70
   1eb2c:	af00      	add	r7, sp, #0
   1eb2e:	60f8      	str	r0, [r7, #12]
   1eb30:	607a      	str	r2, [r7, #4]
   1eb32:	603b      	str	r3, [r7, #0]
   1eb34:	230b      	movs	r3, #11
   1eb36:	18fb      	adds	r3, r7, r3
   1eb38:	1c0a      	adds	r2, r1, #0
   1eb3a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   1eb3c:	2310      	movs	r3, #16
   1eb3e:	18fa      	adds	r2, r7, r3
   1eb40:	4b31      	ldr	r3, [pc, #196]	; (1ec08 <mqtt_connect_broker+0xe0>)
   1eb42:	0010      	movs	r0, r2
   1eb44:	0019      	movs	r1, r3
   1eb46:	2358      	movs	r3, #88	; 0x58
   1eb48:	001a      	movs	r2, r3
   1eb4a:	4b30      	ldr	r3, [pc, #192]	; (1ec0c <mqtt_connect_broker+0xe4>)
   1eb4c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   1eb4e:	2310      	movs	r3, #16
   1eb50:	18fb      	adds	r3, r7, r3
   1eb52:	2204      	movs	r2, #4
   1eb54:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   1eb56:	2310      	movs	r3, #16
   1eb58:	18fb      	adds	r3, r7, r3
   1eb5a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1eb5c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   1eb5e:	2310      	movs	r3, #16
   1eb60:	18fb      	adds	r3, r7, r3
   1eb62:	687a      	ldr	r2, [r7, #4]
   1eb64:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1eb66:	2310      	movs	r3, #16
   1eb68:	18fb      	adds	r3, r7, r3
   1eb6a:	683a      	ldr	r2, [r7, #0]
   1eb6c:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1eb6e:	2310      	movs	r3, #16
   1eb70:	18fb      	adds	r3, r7, r3
   1eb72:	220b      	movs	r2, #11
   1eb74:	18ba      	adds	r2, r7, r2
   1eb76:	7812      	ldrb	r2, [r2, #0]
   1eb78:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   1eb7a:	2310      	movs	r3, #16
   1eb7c:	18fb      	adds	r3, r7, r3
   1eb7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1eb80:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   1eb82:	2310      	movs	r3, #16
   1eb84:	18fb      	adds	r3, r7, r3
   1eb86:	2280      	movs	r2, #128	; 0x80
   1eb88:	18ba      	adds	r2, r7, r2
   1eb8a:	6812      	ldr	r2, [r2, #0]
   1eb8c:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   1eb8e:	2310      	movs	r3, #16
   1eb90:	18fb      	adds	r3, r7, r3
   1eb92:	228c      	movs	r2, #140	; 0x8c
   1eb94:	18ba      	adds	r2, r7, r2
   1eb96:	213c      	movs	r1, #60	; 0x3c
   1eb98:	7812      	ldrb	r2, [r2, #0]
   1eb9a:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   1eb9c:	2310      	movs	r3, #16
   1eb9e:	18fb      	adds	r3, r7, r3
   1eba0:	2288      	movs	r2, #136	; 0x88
   1eba2:	18ba      	adds	r2, r7, r2
   1eba4:	213d      	movs	r1, #61	; 0x3d
   1eba6:	7812      	ldrb	r2, [r2, #0]
   1eba8:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   1ebaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1ebac:	2b00      	cmp	r3, #0
   1ebae:	d008      	beq.n	1ebc2 <mqtt_connect_broker+0x9a>
   1ebb0:	2380      	movs	r3, #128	; 0x80
   1ebb2:	18fb      	adds	r3, r7, r3
   1ebb4:	681b      	ldr	r3, [r3, #0]
   1ebb6:	2b00      	cmp	r3, #0
   1ebb8:	d003      	beq.n	1ebc2 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   1ebba:	2310      	movs	r3, #16
   1ebbc:	18fb      	adds	r3, r7, r3
   1ebbe:	2201      	movs	r2, #1
   1ebc0:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   1ebc2:	68fb      	ldr	r3, [r7, #12]
   1ebc4:	69db      	ldr	r3, [r3, #28]
   1ebc6:	2210      	movs	r2, #16
   1ebc8:	18ba      	adds	r2, r7, r2
   1ebca:	0011      	movs	r1, r2
   1ebcc:	0018      	movs	r0, r3
   1ebce:	4b10      	ldr	r3, [pc, #64]	; (1ec10 <mqtt_connect_broker+0xe8>)
   1ebd0:	4798      	blx	r3
   1ebd2:	0003      	movs	r3, r0
   1ebd4:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   1ebd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ebd8:	b2da      	uxtb	r2, r3
   1ebda:	2368      	movs	r3, #104	; 0x68
   1ebdc:	18fb      	adds	r3, r7, r3
   1ebde:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   1ebe0:	68fb      	ldr	r3, [r7, #12]
   1ebe2:	681b      	ldr	r3, [r3, #0]
   1ebe4:	2b00      	cmp	r3, #0
   1ebe6:	d006      	beq.n	1ebf6 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1ebe8:	68fb      	ldr	r3, [r7, #12]
   1ebea:	681b      	ldr	r3, [r3, #0]
   1ebec:	2268      	movs	r2, #104	; 0x68
   1ebee:	18ba      	adds	r2, r7, r2
   1ebf0:	68f8      	ldr	r0, [r7, #12]
   1ebf2:	2101      	movs	r1, #1
   1ebf4:	4798      	blx	r3
	
	module->isConnected = true;
   1ebf6:	68fb      	ldr	r3, [r7, #12]
   1ebf8:	2234      	movs	r2, #52	; 0x34
   1ebfa:	2101      	movs	r1, #1
   1ebfc:	5499      	strb	r1, [r3, r2]
	return rc;
   1ebfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   1ec00:	0018      	movs	r0, r3
   1ec02:	46bd      	mov	sp, r7
   1ec04:	b01c      	add	sp, #112	; 0x70
   1ec06:	bd80      	pop	{r7, pc}
   1ec08:	00029a44 	.word	0x00029a44
   1ec0c:	00024781 	.word	0x00024781
   1ec10:	0001df51 	.word	0x0001df51

0001ec14 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   1ec14:	b580      	push	{r7, lr}
   1ec16:	b084      	sub	sp, #16
   1ec18:	af00      	add	r7, sp, #0
   1ec1a:	6078      	str	r0, [r7, #4]
   1ec1c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1ec1e:	687b      	ldr	r3, [r7, #4]
   1ec20:	69db      	ldr	r3, [r3, #28]
   1ec22:	0018      	movs	r0, r3
   1ec24:	4b0c      	ldr	r3, [pc, #48]	; (1ec58 <mqtt_disconnect+0x44>)
   1ec26:	4798      	blx	r3
   1ec28:	0003      	movs	r3, r0
   1ec2a:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   1ec2c:	68fb      	ldr	r3, [r7, #12]
   1ec2e:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   1ec30:	687b      	ldr	r3, [r7, #4]
   1ec32:	681b      	ldr	r3, [r3, #0]
   1ec34:	2b00      	cmp	r3, #0
   1ec36:	d006      	beq.n	1ec46 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   1ec38:	687b      	ldr	r3, [r7, #4]
   1ec3a:	681b      	ldr	r3, [r3, #0]
   1ec3c:	2208      	movs	r2, #8
   1ec3e:	18ba      	adds	r2, r7, r2
   1ec40:	6878      	ldr	r0, [r7, #4]
   1ec42:	2105      	movs	r1, #5
   1ec44:	4798      	blx	r3
	
	module->isConnected = false;
   1ec46:	687b      	ldr	r3, [r7, #4]
   1ec48:	2234      	movs	r2, #52	; 0x34
   1ec4a:	2100      	movs	r1, #0
   1ec4c:	5499      	strb	r1, [r3, r2]
	return rc;
   1ec4e:	68fb      	ldr	r3, [r7, #12]
}
   1ec50:	0018      	movs	r0, r3
   1ec52:	46bd      	mov	sp, r7
   1ec54:	b004      	add	sp, #16
   1ec56:	bd80      	pop	{r7, pc}
   1ec58:	0001e3dd 	.word	0x0001e3dd

0001ec5c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   1ec5c:	b580      	push	{r7, lr}
   1ec5e:	b08a      	sub	sp, #40	; 0x28
   1ec60:	af00      	add	r7, sp, #0
   1ec62:	60f8      	str	r0, [r7, #12]
   1ec64:	60b9      	str	r1, [r7, #8]
   1ec66:	607a      	str	r2, [r7, #4]
   1ec68:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1ec6a:	2314      	movs	r3, #20
   1ec6c:	18fb      	adds	r3, r7, r3
   1ec6e:	2230      	movs	r2, #48	; 0x30
   1ec70:	18ba      	adds	r2, r7, r2
   1ec72:	7812      	ldrb	r2, [r2, #0]
   1ec74:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   1ec76:	2314      	movs	r3, #20
   1ec78:	18fb      	adds	r3, r7, r3
   1ec7a:	687a      	ldr	r2, [r7, #4]
   1ec7c:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   1ec7e:	2314      	movs	r3, #20
   1ec80:	18fb      	adds	r3, r7, r3
   1ec82:	683a      	ldr	r2, [r7, #0]
   1ec84:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   1ec86:	2314      	movs	r3, #20
   1ec88:	18fb      	adds	r3, r7, r3
   1ec8a:	2234      	movs	r2, #52	; 0x34
   1ec8c:	18ba      	adds	r2, r7, r2
   1ec8e:	7812      	ldrb	r2, [r2, #0]
   1ec90:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   1ec92:	68fb      	ldr	r3, [r7, #12]
   1ec94:	69db      	ldr	r3, [r3, #28]
   1ec96:	2214      	movs	r2, #20
   1ec98:	18ba      	adds	r2, r7, r2
   1ec9a:	68b9      	ldr	r1, [r7, #8]
   1ec9c:	0018      	movs	r0, r3
   1ec9e:	4b09      	ldr	r3, [pc, #36]	; (1ecc4 <mqtt_publish+0x68>)
   1eca0:	4798      	blx	r3
   1eca2:	0003      	movs	r3, r0
   1eca4:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   1eca6:	68fb      	ldr	r3, [r7, #12]
   1eca8:	681b      	ldr	r3, [r3, #0]
   1ecaa:	2b00      	cmp	r3, #0
   1ecac:	d005      	beq.n	1ecba <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   1ecae:	68fb      	ldr	r3, [r7, #12]
   1ecb0:	681b      	ldr	r3, [r3, #0]
   1ecb2:	68f8      	ldr	r0, [r7, #12]
   1ecb4:	2200      	movs	r2, #0
   1ecb6:	2102      	movs	r1, #2
   1ecb8:	4798      	blx	r3
	
	return rc;
   1ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1ecbc:	0018      	movs	r0, r3
   1ecbe:	46bd      	mov	sp, r7
   1ecc0:	b00a      	add	sp, #40	; 0x28
   1ecc2:	bd80      	pop	{r7, pc}
   1ecc4:	0001e21d 	.word	0x0001e21d

0001ecc8 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1ecc8:	b590      	push	{r4, r7, lr}
   1ecca:	b087      	sub	sp, #28
   1eccc:	af00      	add	r7, sp, #0
   1ecce:	60f8      	str	r0, [r7, #12]
   1ecd0:	60b9      	str	r1, [r7, #8]
   1ecd2:	603b      	str	r3, [r7, #0]
   1ecd4:	1dfb      	adds	r3, r7, #7
   1ecd6:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   1ecd8:	68fb      	ldr	r3, [r7, #12]
   1ecda:	69d8      	ldr	r0, [r3, #28]
   1ecdc:	683c      	ldr	r4, [r7, #0]
   1ecde:	1dfb      	adds	r3, r7, #7
   1ece0:	781a      	ldrb	r2, [r3, #0]
   1ece2:	68b9      	ldr	r1, [r7, #8]
   1ece4:	0023      	movs	r3, r4
   1ece6:	4c09      	ldr	r4, [pc, #36]	; (1ed0c <mqtt_subscribe+0x44>)
   1ece8:	47a0      	blx	r4
   1ecea:	0003      	movs	r3, r0
   1ecec:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   1ecee:	68fb      	ldr	r3, [r7, #12]
   1ecf0:	681b      	ldr	r3, [r3, #0]
   1ecf2:	2b00      	cmp	r3, #0
   1ecf4:	d005      	beq.n	1ed02 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1ecf6:	68fb      	ldr	r3, [r7, #12]
   1ecf8:	681b      	ldr	r3, [r3, #0]
   1ecfa:	68f8      	ldr	r0, [r7, #12]
   1ecfc:	2200      	movs	r2, #0
   1ecfe:	2103      	movs	r1, #3
   1ed00:	4798      	blx	r3
	
	return rc;
   1ed02:	697b      	ldr	r3, [r7, #20]
}
   1ed04:	0018      	movs	r0, r3
   1ed06:	46bd      	mov	sp, r7
   1ed08:	b007      	add	sp, #28
   1ed0a:	bd90      	pop	{r4, r7, pc}
   1ed0c:	0001e091 	.word	0x0001e091

0001ed10 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   1ed10:	b580      	push	{r7, lr}
   1ed12:	b082      	sub	sp, #8
   1ed14:	af00      	add	r7, sp, #0
   1ed16:	6078      	str	r0, [r7, #4]
   1ed18:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   1ed1a:	687b      	ldr	r3, [r7, #4]
   1ed1c:	69db      	ldr	r3, [r3, #28]
   1ed1e:	683a      	ldr	r2, [r7, #0]
   1ed20:	0011      	movs	r1, r2
   1ed22:	0018      	movs	r0, r3
   1ed24:	4b03      	ldr	r3, [pc, #12]	; (1ed34 <mqtt_yield+0x24>)
   1ed26:	4798      	blx	r3
   1ed28:	0003      	movs	r3, r0
   1ed2a:	0018      	movs	r0, r3
   1ed2c:	46bd      	mov	sp, r7
   1ed2e:	b002      	add	sp, #8
   1ed30:	bd80      	pop	{r7, pc}
   1ed32:	46c0      	nop			; (mov r8, r8)
   1ed34:	0001de99 	.word	0x0001de99

0001ed38 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1ed38:	b590      	push	{r4, r7, lr}
   1ed3a:	b085      	sub	sp, #20
   1ed3c:	af00      	add	r7, sp, #0
   1ed3e:	6078      	str	r0, [r7, #4]
	int len = 0;
   1ed40:	2300      	movs	r3, #0
   1ed42:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   1ed44:	687b      	ldr	r3, [r7, #4]
   1ed46:	7a1b      	ldrb	r3, [r3, #8]
   1ed48:	2b03      	cmp	r3, #3
   1ed4a:	d102      	bne.n	1ed52 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   1ed4c:	230c      	movs	r3, #12
   1ed4e:	60fb      	str	r3, [r7, #12]
   1ed50:	e005      	b.n	1ed5e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   1ed52:	687b      	ldr	r3, [r7, #4]
   1ed54:	7a1b      	ldrb	r3, [r3, #8]
   1ed56:	2b04      	cmp	r3, #4
   1ed58:	d101      	bne.n	1ed5e <MQTTSerialize_connectLength+0x26>
		len = 10;
   1ed5a:	230a      	movs	r3, #10
   1ed5c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   1ed5e:	687b      	ldr	r3, [r7, #4]
   1ed60:	68d8      	ldr	r0, [r3, #12]
   1ed62:	6919      	ldr	r1, [r3, #16]
   1ed64:	695a      	ldr	r2, [r3, #20]
   1ed66:	4b25      	ldr	r3, [pc, #148]	; (1edfc <MQTTSerialize_connectLength+0xc4>)
   1ed68:	4798      	blx	r3
   1ed6a:	0003      	movs	r3, r0
   1ed6c:	3302      	adds	r3, #2
   1ed6e:	68fa      	ldr	r2, [r7, #12]
   1ed70:	18d3      	adds	r3, r2, r3
   1ed72:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   1ed74:	687b      	ldr	r3, [r7, #4]
   1ed76:	7edb      	ldrb	r3, [r3, #27]
   1ed78:	2b00      	cmp	r3, #0
   1ed7a:	d013      	beq.n	1eda4 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   1ed7c:	687b      	ldr	r3, [r7, #4]
   1ed7e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1ed80:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1ed82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ed84:	4b1d      	ldr	r3, [pc, #116]	; (1edfc <MQTTSerialize_connectLength+0xc4>)
   1ed86:	4798      	blx	r3
   1ed88:	0003      	movs	r3, r0
   1ed8a:	1c9c      	adds	r4, r3, #2
   1ed8c:	687b      	ldr	r3, [r7, #4]
   1ed8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1ed90:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1ed92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ed94:	4b19      	ldr	r3, [pc, #100]	; (1edfc <MQTTSerialize_connectLength+0xc4>)
   1ed96:	4798      	blx	r3
   1ed98:	0003      	movs	r3, r0
   1ed9a:	18e3      	adds	r3, r4, r3
   1ed9c:	3302      	adds	r3, #2
   1ed9e:	68fa      	ldr	r2, [r7, #12]
   1eda0:	18d3      	adds	r3, r2, r3
   1eda2:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   1eda4:	687b      	ldr	r3, [r7, #4]
   1eda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1eda8:	2b00      	cmp	r3, #0
   1edaa:	d103      	bne.n	1edb4 <MQTTSerialize_connectLength+0x7c>
   1edac:	687b      	ldr	r3, [r7, #4]
   1edae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1edb0:	2b00      	cmp	r3, #0
   1edb2:	d00a      	beq.n	1edca <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   1edb4:	687b      	ldr	r3, [r7, #4]
   1edb6:	6c18      	ldr	r0, [r3, #64]	; 0x40
   1edb8:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1edba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1edbc:	4b0f      	ldr	r3, [pc, #60]	; (1edfc <MQTTSerialize_connectLength+0xc4>)
   1edbe:	4798      	blx	r3
   1edc0:	0003      	movs	r3, r0
   1edc2:	3302      	adds	r3, #2
   1edc4:	68fa      	ldr	r2, [r7, #12]
   1edc6:	18d3      	adds	r3, r2, r3
   1edc8:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   1edca:	687b      	ldr	r3, [r7, #4]
   1edcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1edce:	2b00      	cmp	r3, #0
   1edd0:	d103      	bne.n	1edda <MQTTSerialize_connectLength+0xa2>
   1edd2:	687b      	ldr	r3, [r7, #4]
   1edd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1edd6:	2b00      	cmp	r3, #0
   1edd8:	d00a      	beq.n	1edf0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   1edda:	687b      	ldr	r3, [r7, #4]
   1eddc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   1edde:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1ede0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1ede2:	4b06      	ldr	r3, [pc, #24]	; (1edfc <MQTTSerialize_connectLength+0xc4>)
   1ede4:	4798      	blx	r3
   1ede6:	0003      	movs	r3, r0
   1ede8:	3302      	adds	r3, #2
   1edea:	68fa      	ldr	r2, [r7, #12]
   1edec:	18d3      	adds	r3, r2, r3
   1edee:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   1edf0:	68fb      	ldr	r3, [r7, #12]
}
   1edf2:	0018      	movs	r0, r3
   1edf4:	46bd      	mov	sp, r7
   1edf6:	b005      	add	sp, #20
   1edf8:	bd90      	pop	{r4, r7, pc}
   1edfa:	46c0      	nop			; (mov r8, r8)
   1edfc:	0001f7a9 	.word	0x0001f7a9

0001ee00 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   1ee00:	b590      	push	{r4, r7, lr}
   1ee02:	b08b      	sub	sp, #44	; 0x2c
   1ee04:	af00      	add	r7, sp, #0
   1ee06:	60f8      	str	r0, [r7, #12]
   1ee08:	60b9      	str	r1, [r7, #8]
   1ee0a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   1ee0c:	68fb      	ldr	r3, [r7, #12]
   1ee0e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   1ee10:	2300      	movs	r3, #0
   1ee12:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   1ee14:	2300      	movs	r3, #0
   1ee16:	617b      	str	r3, [r7, #20]
	int len = 0;
   1ee18:	2300      	movs	r3, #0
   1ee1a:	623b      	str	r3, [r7, #32]
	int rc = -1;
   1ee1c:	2301      	movs	r3, #1
   1ee1e:	425b      	negs	r3, r3
   1ee20:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1ee22:	687b      	ldr	r3, [r7, #4]
   1ee24:	0018      	movs	r0, r3
   1ee26:	4b8c      	ldr	r3, [pc, #560]	; (1f058 <MQTTSerialize_connect+0x258>)
   1ee28:	4798      	blx	r3
   1ee2a:	0003      	movs	r3, r0
   1ee2c:	623b      	str	r3, [r7, #32]
   1ee2e:	6a3b      	ldr	r3, [r7, #32]
   1ee30:	0018      	movs	r0, r3
   1ee32:	4b8a      	ldr	r3, [pc, #552]	; (1f05c <MQTTSerialize_connect+0x25c>)
   1ee34:	4798      	blx	r3
   1ee36:	0002      	movs	r2, r0
   1ee38:	68bb      	ldr	r3, [r7, #8]
   1ee3a:	429a      	cmp	r2, r3
   1ee3c:	dd03      	ble.n	1ee46 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1ee3e:	2302      	movs	r3, #2
   1ee40:	425b      	negs	r3, r3
   1ee42:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1ee44:	e103      	b.n	1f04e <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   1ee46:	2318      	movs	r3, #24
   1ee48:	18fb      	adds	r3, r7, r3
   1ee4a:	2200      	movs	r2, #0
   1ee4c:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   1ee4e:	2318      	movs	r3, #24
   1ee50:	18fb      	adds	r3, r7, r3
   1ee52:	781a      	ldrb	r2, [r3, #0]
   1ee54:	210f      	movs	r1, #15
   1ee56:	400a      	ands	r2, r1
   1ee58:	1c11      	adds	r1, r2, #0
   1ee5a:	2210      	movs	r2, #16
   1ee5c:	430a      	orrs	r2, r1
   1ee5e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1ee60:	2318      	movs	r3, #24
   1ee62:	18fb      	adds	r3, r7, r3
   1ee64:	781a      	ldrb	r2, [r3, #0]
   1ee66:	231c      	movs	r3, #28
   1ee68:	18fb      	adds	r3, r7, r3
   1ee6a:	0011      	movs	r1, r2
   1ee6c:	0018      	movs	r0, r3
   1ee6e:	4b7c      	ldr	r3, [pc, #496]	; (1f060 <MQTTSerialize_connect+0x260>)
   1ee70:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1ee72:	69fb      	ldr	r3, [r7, #28]
   1ee74:	6a3a      	ldr	r2, [r7, #32]
   1ee76:	0011      	movs	r1, r2
   1ee78:	0018      	movs	r0, r3
   1ee7a:	4b7a      	ldr	r3, [pc, #488]	; (1f064 <MQTTSerialize_connect+0x264>)
   1ee7c:	4798      	blx	r3
   1ee7e:	0002      	movs	r2, r0
   1ee80:	69fb      	ldr	r3, [r7, #28]
   1ee82:	189b      	adds	r3, r3, r2
   1ee84:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   1ee86:	687b      	ldr	r3, [r7, #4]
   1ee88:	7a1b      	ldrb	r3, [r3, #8]
   1ee8a:	2b04      	cmp	r3, #4
   1ee8c:	d10d      	bne.n	1eeaa <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   1ee8e:	4a76      	ldr	r2, [pc, #472]	; (1f068 <MQTTSerialize_connect+0x268>)
   1ee90:	231c      	movs	r3, #28
   1ee92:	18fb      	adds	r3, r7, r3
   1ee94:	0011      	movs	r1, r2
   1ee96:	0018      	movs	r0, r3
   1ee98:	4b74      	ldr	r3, [pc, #464]	; (1f06c <MQTTSerialize_connect+0x26c>)
   1ee9a:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   1ee9c:	231c      	movs	r3, #28
   1ee9e:	18fb      	adds	r3, r7, r3
   1eea0:	2104      	movs	r1, #4
   1eea2:	0018      	movs	r0, r3
   1eea4:	4b6e      	ldr	r3, [pc, #440]	; (1f060 <MQTTSerialize_connect+0x260>)
   1eea6:	4798      	blx	r3
   1eea8:	e00c      	b.n	1eec4 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   1eeaa:	4a71      	ldr	r2, [pc, #452]	; (1f070 <MQTTSerialize_connect+0x270>)
   1eeac:	231c      	movs	r3, #28
   1eeae:	18fb      	adds	r3, r7, r3
   1eeb0:	0011      	movs	r1, r2
   1eeb2:	0018      	movs	r0, r3
   1eeb4:	4b6d      	ldr	r3, [pc, #436]	; (1f06c <MQTTSerialize_connect+0x26c>)
   1eeb6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   1eeb8:	231c      	movs	r3, #28
   1eeba:	18fb      	adds	r3, r7, r3
   1eebc:	2103      	movs	r1, #3
   1eebe:	0018      	movs	r0, r3
   1eec0:	4b67      	ldr	r3, [pc, #412]	; (1f060 <MQTTSerialize_connect+0x260>)
   1eec2:	4798      	blx	r3
	}

	flags.all = 0;
   1eec4:	2314      	movs	r3, #20
   1eec6:	18fb      	adds	r3, r7, r3
   1eec8:	2200      	movs	r2, #0
   1eeca:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   1eecc:	687b      	ldr	r3, [r7, #4]
   1eece:	7e9b      	ldrb	r3, [r3, #26]
   1eed0:	1c1a      	adds	r2, r3, #0
   1eed2:	2301      	movs	r3, #1
   1eed4:	4013      	ands	r3, r2
   1eed6:	b2da      	uxtb	r2, r3
   1eed8:	2314      	movs	r3, #20
   1eeda:	18fb      	adds	r3, r7, r3
   1eedc:	2101      	movs	r1, #1
   1eede:	400a      	ands	r2, r1
   1eee0:	1890      	adds	r0, r2, r2
   1eee2:	781a      	ldrb	r2, [r3, #0]
   1eee4:	2102      	movs	r1, #2
   1eee6:	438a      	bics	r2, r1
   1eee8:	1c11      	adds	r1, r2, #0
   1eeea:	1c02      	adds	r2, r0, #0
   1eeec:	430a      	orrs	r2, r1
   1eeee:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   1eef0:	687b      	ldr	r3, [r7, #4]
   1eef2:	7edb      	ldrb	r3, [r3, #27]
   1eef4:	1e5a      	subs	r2, r3, #1
   1eef6:	4193      	sbcs	r3, r2
   1eef8:	b2da      	uxtb	r2, r3
   1eefa:	2314      	movs	r3, #20
   1eefc:	18fb      	adds	r3, r7, r3
   1eefe:	2101      	movs	r1, #1
   1ef00:	400a      	ands	r2, r1
   1ef02:	0090      	lsls	r0, r2, #2
   1ef04:	781a      	ldrb	r2, [r3, #0]
   1ef06:	2104      	movs	r1, #4
   1ef08:	438a      	bics	r2, r1
   1ef0a:	1c11      	adds	r1, r2, #0
   1ef0c:	1c02      	adds	r2, r0, #0
   1ef0e:	430a      	orrs	r2, r1
   1ef10:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   1ef12:	2314      	movs	r3, #20
   1ef14:	18fb      	adds	r3, r7, r3
   1ef16:	781b      	ldrb	r3, [r3, #0]
   1ef18:	2204      	movs	r2, #4
   1ef1a:	4013      	ands	r3, r2
   1ef1c:	b2db      	uxtb	r3, r3
   1ef1e:	2b00      	cmp	r3, #0
   1ef20:	d025      	beq.n	1ef6e <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   1ef22:	687b      	ldr	r3, [r7, #4]
   1ef24:	223d      	movs	r2, #61	; 0x3d
   1ef26:	5c9b      	ldrb	r3, [r3, r2]
   1ef28:	1c1a      	adds	r2, r3, #0
   1ef2a:	2303      	movs	r3, #3
   1ef2c:	4013      	ands	r3, r2
   1ef2e:	b2da      	uxtb	r2, r3
   1ef30:	2314      	movs	r3, #20
   1ef32:	18fb      	adds	r3, r7, r3
   1ef34:	2103      	movs	r1, #3
   1ef36:	400a      	ands	r2, r1
   1ef38:	00d0      	lsls	r0, r2, #3
   1ef3a:	781a      	ldrb	r2, [r3, #0]
   1ef3c:	2118      	movs	r1, #24
   1ef3e:	438a      	bics	r2, r1
   1ef40:	1c11      	adds	r1, r2, #0
   1ef42:	1c02      	adds	r2, r0, #0
   1ef44:	430a      	orrs	r2, r1
   1ef46:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   1ef48:	687b      	ldr	r3, [r7, #4]
   1ef4a:	223c      	movs	r2, #60	; 0x3c
   1ef4c:	5c9b      	ldrb	r3, [r3, r2]
   1ef4e:	1c1a      	adds	r2, r3, #0
   1ef50:	2301      	movs	r3, #1
   1ef52:	4013      	ands	r3, r2
   1ef54:	b2da      	uxtb	r2, r3
   1ef56:	2314      	movs	r3, #20
   1ef58:	18fb      	adds	r3, r7, r3
   1ef5a:	2101      	movs	r1, #1
   1ef5c:	400a      	ands	r2, r1
   1ef5e:	0150      	lsls	r0, r2, #5
   1ef60:	781a      	ldrb	r2, [r3, #0]
   1ef62:	2120      	movs	r1, #32
   1ef64:	438a      	bics	r2, r1
   1ef66:	1c11      	adds	r1, r2, #0
   1ef68:	1c02      	adds	r2, r0, #0
   1ef6a:	430a      	orrs	r2, r1
   1ef6c:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   1ef6e:	687b      	ldr	r3, [r7, #4]
   1ef70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ef72:	2b00      	cmp	r3, #0
   1ef74:	d103      	bne.n	1ef7e <MQTTSerialize_connect+0x17e>
   1ef76:	687b      	ldr	r3, [r7, #4]
   1ef78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ef7a:	2b00      	cmp	r3, #0
   1ef7c:	d006      	beq.n	1ef8c <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   1ef7e:	2314      	movs	r3, #20
   1ef80:	18fb      	adds	r3, r7, r3
   1ef82:	781a      	ldrb	r2, [r3, #0]
   1ef84:	2180      	movs	r1, #128	; 0x80
   1ef86:	4249      	negs	r1, r1
   1ef88:	430a      	orrs	r2, r1
   1ef8a:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   1ef8c:	687b      	ldr	r3, [r7, #4]
   1ef8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ef90:	2b00      	cmp	r3, #0
   1ef92:	d103      	bne.n	1ef9c <MQTTSerialize_connect+0x19c>
   1ef94:	687b      	ldr	r3, [r7, #4]
   1ef96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1ef98:	2b00      	cmp	r3, #0
   1ef9a:	d005      	beq.n	1efa8 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   1ef9c:	2314      	movs	r3, #20
   1ef9e:	18fb      	adds	r3, r7, r3
   1efa0:	781a      	ldrb	r2, [r3, #0]
   1efa2:	2140      	movs	r1, #64	; 0x40
   1efa4:	430a      	orrs	r2, r1
   1efa6:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   1efa8:	2314      	movs	r3, #20
   1efaa:	18fb      	adds	r3, r7, r3
   1efac:	781a      	ldrb	r2, [r3, #0]
   1efae:	231c      	movs	r3, #28
   1efb0:	18fb      	adds	r3, r7, r3
   1efb2:	0011      	movs	r1, r2
   1efb4:	0018      	movs	r0, r3
   1efb6:	4b2a      	ldr	r3, [pc, #168]	; (1f060 <MQTTSerialize_connect+0x260>)
   1efb8:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   1efba:	687b      	ldr	r3, [r7, #4]
   1efbc:	8b1b      	ldrh	r3, [r3, #24]
   1efbe:	001a      	movs	r2, r3
   1efc0:	231c      	movs	r3, #28
   1efc2:	18fb      	adds	r3, r7, r3
   1efc4:	0011      	movs	r1, r2
   1efc6:	0018      	movs	r0, r3
   1efc8:	4b2a      	ldr	r3, [pc, #168]	; (1f074 <MQTTSerialize_connect+0x274>)
   1efca:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   1efcc:	687b      	ldr	r3, [r7, #4]
   1efce:	221c      	movs	r2, #28
   1efd0:	18b8      	adds	r0, r7, r2
   1efd2:	68d9      	ldr	r1, [r3, #12]
   1efd4:	691a      	ldr	r2, [r3, #16]
   1efd6:	695b      	ldr	r3, [r3, #20]
   1efd8:	4c27      	ldr	r4, [pc, #156]	; (1f078 <MQTTSerialize_connect+0x278>)
   1efda:	47a0      	blx	r4
	if (options->willFlag)
   1efdc:	687b      	ldr	r3, [r7, #4]
   1efde:	7edb      	ldrb	r3, [r3, #27]
   1efe0:	2b00      	cmp	r3, #0
   1efe2:	d00f      	beq.n	1f004 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   1efe4:	687b      	ldr	r3, [r7, #4]
   1efe6:	221c      	movs	r2, #28
   1efe8:	18b8      	adds	r0, r7, r2
   1efea:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1efec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1efee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eff0:	4c21      	ldr	r4, [pc, #132]	; (1f078 <MQTTSerialize_connect+0x278>)
   1eff2:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   1eff4:	687b      	ldr	r3, [r7, #4]
   1eff6:	221c      	movs	r2, #28
   1eff8:	18b8      	adds	r0, r7, r2
   1effa:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1effc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1effe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f000:	4c1d      	ldr	r4, [pc, #116]	; (1f078 <MQTTSerialize_connect+0x278>)
   1f002:	47a0      	blx	r4
	}
	if (flags.bits.username)
   1f004:	2314      	movs	r3, #20
   1f006:	18fb      	adds	r3, r7, r3
   1f008:	781b      	ldrb	r3, [r3, #0]
   1f00a:	227f      	movs	r2, #127	; 0x7f
   1f00c:	4393      	bics	r3, r2
   1f00e:	b2db      	uxtb	r3, r3
   1f010:	2b00      	cmp	r3, #0
   1f012:	d007      	beq.n	1f024 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   1f014:	687b      	ldr	r3, [r7, #4]
   1f016:	221c      	movs	r2, #28
   1f018:	18b8      	adds	r0, r7, r2
   1f01a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1f01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f01e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f020:	4c15      	ldr	r4, [pc, #84]	; (1f078 <MQTTSerialize_connect+0x278>)
   1f022:	47a0      	blx	r4
	if (flags.bits.password)
   1f024:	2314      	movs	r3, #20
   1f026:	18fb      	adds	r3, r7, r3
   1f028:	781b      	ldrb	r3, [r3, #0]
   1f02a:	2240      	movs	r2, #64	; 0x40
   1f02c:	4013      	ands	r3, r2
   1f02e:	b2db      	uxtb	r3, r3
   1f030:	2b00      	cmp	r3, #0
   1f032:	d007      	beq.n	1f044 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   1f034:	687b      	ldr	r3, [r7, #4]
   1f036:	221c      	movs	r2, #28
   1f038:	18b8      	adds	r0, r7, r2
   1f03a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1f03c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1f03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1f040:	4c0d      	ldr	r4, [pc, #52]	; (1f078 <MQTTSerialize_connect+0x278>)
   1f042:	47a0      	blx	r4

	rc = ptr - buf;
   1f044:	69fb      	ldr	r3, [r7, #28]
   1f046:	001a      	movs	r2, r3
   1f048:	68fb      	ldr	r3, [r7, #12]
   1f04a:	1ad3      	subs	r3, r2, r3
   1f04c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   1f04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1f050:	0018      	movs	r0, r3
   1f052:	46bd      	mov	sp, r7
   1f054:	b00b      	add	sp, #44	; 0x2c
   1f056:	bd90      	pop	{r4, r7, pc}
   1f058:	0001ed39 	.word	0x0001ed39
   1f05c:	0001f4cd 	.word	0x0001f4cd
   1f060:	0001f5ef 	.word	0x0001f5ef
   1f064:	0001f3d5 	.word	0x0001f3d5
   1f068:	00029a9c 	.word	0x00029a9c
   1f06c:	0001f671 	.word	0x0001f671
   1f070:	00029aa4 	.word	0x00029aa4
   1f074:	0001f619 	.word	0x0001f619
   1f078:	0001f6c1 	.word	0x0001f6c1

0001f07c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   1f07c:	b580      	push	{r7, lr}
   1f07e:	b08a      	sub	sp, #40	; 0x28
   1f080:	af00      	add	r7, sp, #0
   1f082:	60f8      	str	r0, [r7, #12]
   1f084:	60b9      	str	r1, [r7, #8]
   1f086:	607a      	str	r2, [r7, #4]
   1f088:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1f08a:	2300      	movs	r3, #0
   1f08c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1f08e:	687b      	ldr	r3, [r7, #4]
   1f090:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1f092:	2300      	movs	r3, #0
   1f094:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1f096:	2300      	movs	r3, #0
   1f098:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   1f09a:	2300      	movs	r3, #0
   1f09c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1f09e:	2318      	movs	r3, #24
   1f0a0:	18fb      	adds	r3, r7, r3
   1f0a2:	0018      	movs	r0, r3
   1f0a4:	4b25      	ldr	r3, [pc, #148]	; (1f13c <MQTTDeserialize_connack+0xc0>)
   1f0a6:	4798      	blx	r3
   1f0a8:	0003      	movs	r3, r0
   1f0aa:	001a      	movs	r2, r3
   1f0ac:	231c      	movs	r3, #28
   1f0ae:	18fb      	adds	r3, r7, r3
   1f0b0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   1f0b2:	231c      	movs	r3, #28
   1f0b4:	18fb      	adds	r3, r7, r3
   1f0b6:	781b      	ldrb	r3, [r3, #0]
   1f0b8:	220f      	movs	r2, #15
   1f0ba:	4393      	bics	r3, r2
   1f0bc:	b2db      	uxtb	r3, r3
   1f0be:	2b20      	cmp	r3, #32
   1f0c0:	d134      	bne.n	1f12c <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1f0c2:	69bb      	ldr	r3, [r7, #24]
   1f0c4:	2214      	movs	r2, #20
   1f0c6:	18ba      	adds	r2, r7, r2
   1f0c8:	0011      	movs	r1, r2
   1f0ca:	0018      	movs	r0, r3
   1f0cc:	4b1c      	ldr	r3, [pc, #112]	; (1f140 <MQTTDeserialize_connack+0xc4>)
   1f0ce:	4798      	blx	r3
   1f0d0:	0003      	movs	r3, r0
   1f0d2:	627b      	str	r3, [r7, #36]	; 0x24
   1f0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f0d6:	69bb      	ldr	r3, [r7, #24]
   1f0d8:	189b      	adds	r3, r3, r2
   1f0da:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1f0dc:	69bb      	ldr	r3, [r7, #24]
   1f0de:	697a      	ldr	r2, [r7, #20]
   1f0e0:	189b      	adds	r3, r3, r2
   1f0e2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1f0e4:	6a3b      	ldr	r3, [r7, #32]
   1f0e6:	69ba      	ldr	r2, [r7, #24]
   1f0e8:	1a9b      	subs	r3, r3, r2
   1f0ea:	2b01      	cmp	r3, #1
   1f0ec:	dd20      	ble.n	1f130 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   1f0ee:	2318      	movs	r3, #24
   1f0f0:	18fb      	adds	r3, r7, r3
   1f0f2:	0018      	movs	r0, r3
   1f0f4:	4b11      	ldr	r3, [pc, #68]	; (1f13c <MQTTDeserialize_connack+0xc0>)
   1f0f6:	4798      	blx	r3
   1f0f8:	0003      	movs	r3, r0
   1f0fa:	001a      	movs	r2, r3
   1f0fc:	2310      	movs	r3, #16
   1f0fe:	18fb      	adds	r3, r7, r3
   1f100:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   1f102:	2310      	movs	r3, #16
   1f104:	18fb      	adds	r3, r7, r3
   1f106:	781b      	ldrb	r3, [r3, #0]
   1f108:	061b      	lsls	r3, r3, #24
   1f10a:	0fdb      	lsrs	r3, r3, #31
   1f10c:	b2db      	uxtb	r3, r3
   1f10e:	001a      	movs	r2, r3
   1f110:	68fb      	ldr	r3, [r7, #12]
   1f112:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   1f114:	2318      	movs	r3, #24
   1f116:	18fb      	adds	r3, r7, r3
   1f118:	0018      	movs	r0, r3
   1f11a:	4b08      	ldr	r3, [pc, #32]	; (1f13c <MQTTDeserialize_connack+0xc0>)
   1f11c:	4798      	blx	r3
   1f11e:	0003      	movs	r3, r0
   1f120:	001a      	movs	r2, r3
   1f122:	68bb      	ldr	r3, [r7, #8]
   1f124:	701a      	strb	r2, [r3, #0]

	rc = 1;
   1f126:	2301      	movs	r3, #1
   1f128:	627b      	str	r3, [r7, #36]	; 0x24
   1f12a:	e002      	b.n	1f132 <MQTTDeserialize_connack+0xb6>
		goto exit;
   1f12c:	46c0      	nop			; (mov r8, r8)
   1f12e:	e000      	b.n	1f132 <MQTTDeserialize_connack+0xb6>
		goto exit;
   1f130:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1f132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1f134:	0018      	movs	r0, r3
   1f136:	46bd      	mov	sp, r7
   1f138:	b00a      	add	sp, #40	; 0x28
   1f13a:	bd80      	pop	{r7, pc}
   1f13c:	0001f5c3 	.word	0x0001f5c3
   1f140:	0001f55d 	.word	0x0001f55d

0001f144 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1f144:	b580      	push	{r7, lr}
   1f146:	b088      	sub	sp, #32
   1f148:	af00      	add	r7, sp, #0
   1f14a:	60f8      	str	r0, [r7, #12]
   1f14c:	60b9      	str	r1, [r7, #8]
   1f14e:	1dfb      	adds	r3, r7, #7
   1f150:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1f152:	2300      	movs	r3, #0
   1f154:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   1f156:	2301      	movs	r3, #1
   1f158:	425b      	negs	r3, r3
   1f15a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1f15c:	68fb      	ldr	r3, [r7, #12]
   1f15e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   1f160:	68bb      	ldr	r3, [r7, #8]
   1f162:	2b01      	cmp	r3, #1
   1f164:	dc03      	bgt.n	1f16e <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1f166:	2302      	movs	r3, #2
   1f168:	425b      	negs	r3, r3
   1f16a:	61fb      	str	r3, [r7, #28]
		goto exit;
   1f16c:	e029      	b.n	1f1c2 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   1f16e:	2318      	movs	r3, #24
   1f170:	18fb      	adds	r3, r7, r3
   1f172:	2200      	movs	r2, #0
   1f174:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   1f176:	1dfb      	adds	r3, r7, #7
   1f178:	781b      	ldrb	r3, [r3, #0]
   1f17a:	220f      	movs	r2, #15
   1f17c:	4013      	ands	r3, r2
   1f17e:	b2da      	uxtb	r2, r3
   1f180:	2318      	movs	r3, #24
   1f182:	18fb      	adds	r3, r7, r3
   1f184:	0110      	lsls	r0, r2, #4
   1f186:	781a      	ldrb	r2, [r3, #0]
   1f188:	210f      	movs	r1, #15
   1f18a:	400a      	ands	r2, r1
   1f18c:	1c11      	adds	r1, r2, #0
   1f18e:	1c02      	adds	r2, r0, #0
   1f190:	430a      	orrs	r2, r1
   1f192:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1f194:	2318      	movs	r3, #24
   1f196:	18fb      	adds	r3, r7, r3
   1f198:	781a      	ldrb	r2, [r3, #0]
   1f19a:	2314      	movs	r3, #20
   1f19c:	18fb      	adds	r3, r7, r3
   1f19e:	0011      	movs	r1, r2
   1f1a0:	0018      	movs	r0, r3
   1f1a2:	4b0a      	ldr	r3, [pc, #40]	; (1f1cc <MQTTSerialize_zero+0x88>)
   1f1a4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   1f1a6:	697b      	ldr	r3, [r7, #20]
   1f1a8:	2100      	movs	r1, #0
   1f1aa:	0018      	movs	r0, r3
   1f1ac:	4b08      	ldr	r3, [pc, #32]	; (1f1d0 <MQTTSerialize_zero+0x8c>)
   1f1ae:	4798      	blx	r3
   1f1b0:	0002      	movs	r2, r0
   1f1b2:	697b      	ldr	r3, [r7, #20]
   1f1b4:	189b      	adds	r3, r3, r2
   1f1b6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   1f1b8:	697b      	ldr	r3, [r7, #20]
   1f1ba:	001a      	movs	r2, r3
   1f1bc:	68fb      	ldr	r3, [r7, #12]
   1f1be:	1ad3      	subs	r3, r2, r3
   1f1c0:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1f1c2:	69fb      	ldr	r3, [r7, #28]
}
   1f1c4:	0018      	movs	r0, r3
   1f1c6:	46bd      	mov	sp, r7
   1f1c8:	b008      	add	sp, #32
   1f1ca:	bd80      	pop	{r7, pc}
   1f1cc:	0001f5ef 	.word	0x0001f5ef
   1f1d0:	0001f3d5 	.word	0x0001f3d5

0001f1d4 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   1f1d4:	b580      	push	{r7, lr}
   1f1d6:	b082      	sub	sp, #8
   1f1d8:	af00      	add	r7, sp, #0
   1f1da:	6078      	str	r0, [r7, #4]
   1f1dc:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1f1de:	6839      	ldr	r1, [r7, #0]
   1f1e0:	687b      	ldr	r3, [r7, #4]
   1f1e2:	220e      	movs	r2, #14
   1f1e4:	0018      	movs	r0, r3
   1f1e6:	4b03      	ldr	r3, [pc, #12]	; (1f1f4 <MQTTSerialize_disconnect+0x20>)
   1f1e8:	4798      	blx	r3
   1f1ea:	0003      	movs	r3, r0
}
   1f1ec:	0018      	movs	r0, r3
   1f1ee:	46bd      	mov	sp, r7
   1f1f0:	b002      	add	sp, #8
   1f1f2:	bd80      	pop	{r7, pc}
   1f1f4:	0001f145 	.word	0x0001f145

0001f1f8 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   1f1f8:	b580      	push	{r7, lr}
   1f1fa:	b082      	sub	sp, #8
   1f1fc:	af00      	add	r7, sp, #0
   1f1fe:	6078      	str	r0, [r7, #4]
   1f200:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1f202:	6839      	ldr	r1, [r7, #0]
   1f204:	687b      	ldr	r3, [r7, #4]
   1f206:	220c      	movs	r2, #12
   1f208:	0018      	movs	r0, r3
   1f20a:	4b03      	ldr	r3, [pc, #12]	; (1f218 <MQTTSerialize_pingreq+0x20>)
   1f20c:	4798      	blx	r3
   1f20e:	0003      	movs	r3, r0
}
   1f210:	0018      	movs	r0, r3
   1f212:	46bd      	mov	sp, r7
   1f214:	b002      	add	sp, #8
   1f216:	bd80      	pop	{r7, pc}
   1f218:	0001f145 	.word	0x0001f145

0001f21c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   1f21c:	b580      	push	{r7, lr}
   1f21e:	b08a      	sub	sp, #40	; 0x28
   1f220:	af00      	add	r7, sp, #0
   1f222:	60f8      	str	r0, [r7, #12]
   1f224:	60b9      	str	r1, [r7, #8]
   1f226:	607a      	str	r2, [r7, #4]
   1f228:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1f22a:	2300      	movs	r3, #0
   1f22c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1f22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f230:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1f232:	2300      	movs	r3, #0
   1f234:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1f236:	2300      	movs	r3, #0
   1f238:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   1f23a:	2300      	movs	r3, #0
   1f23c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1f23e:	2318      	movs	r3, #24
   1f240:	18fb      	adds	r3, r7, r3
   1f242:	0018      	movs	r0, r3
   1f244:	4b32      	ldr	r3, [pc, #200]	; (1f310 <MQTTDeserialize_publish+0xf4>)
   1f246:	4798      	blx	r3
   1f248:	0003      	movs	r3, r0
   1f24a:	001a      	movs	r2, r3
   1f24c:	231c      	movs	r3, #28
   1f24e:	18fb      	adds	r3, r7, r3
   1f250:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   1f252:	231c      	movs	r3, #28
   1f254:	18fb      	adds	r3, r7, r3
   1f256:	781b      	ldrb	r3, [r3, #0]
   1f258:	220f      	movs	r2, #15
   1f25a:	4393      	bics	r3, r2
   1f25c:	b2db      	uxtb	r3, r3
   1f25e:	2b30      	cmp	r3, #48	; 0x30
   1f260:	d150      	bne.n	1f304 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   1f262:	231c      	movs	r3, #28
   1f264:	18fb      	adds	r3, r7, r3
   1f266:	781b      	ldrb	r3, [r3, #0]
   1f268:	071b      	lsls	r3, r3, #28
   1f26a:	0fdb      	lsrs	r3, r3, #31
   1f26c:	b2db      	uxtb	r3, r3
   1f26e:	001a      	movs	r2, r3
   1f270:	68fb      	ldr	r3, [r7, #12]
   1f272:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   1f274:	231c      	movs	r3, #28
   1f276:	18fb      	adds	r3, r7, r3
   1f278:	781b      	ldrb	r3, [r3, #0]
   1f27a:	075b      	lsls	r3, r3, #29
   1f27c:	0f9b      	lsrs	r3, r3, #30
   1f27e:	b2db      	uxtb	r3, r3
   1f280:	001a      	movs	r2, r3
   1f282:	68bb      	ldr	r3, [r7, #8]
   1f284:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   1f286:	231c      	movs	r3, #28
   1f288:	18fb      	adds	r3, r7, r3
   1f28a:	781b      	ldrb	r3, [r3, #0]
   1f28c:	07db      	lsls	r3, r3, #31
   1f28e:	0fdb      	lsrs	r3, r3, #31
   1f290:	b2db      	uxtb	r3, r3
   1f292:	001a      	movs	r2, r3
   1f294:	687b      	ldr	r3, [r7, #4]
   1f296:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1f298:	69bb      	ldr	r3, [r7, #24]
   1f29a:	2214      	movs	r2, #20
   1f29c:	18ba      	adds	r2, r7, r2
   1f29e:	0011      	movs	r1, r2
   1f2a0:	0018      	movs	r0, r3
   1f2a2:	4b1c      	ldr	r3, [pc, #112]	; (1f314 <MQTTDeserialize_publish+0xf8>)
   1f2a4:	4798      	blx	r3
   1f2a6:	0003      	movs	r3, r0
   1f2a8:	627b      	str	r3, [r7, #36]	; 0x24
   1f2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f2ac:	69bb      	ldr	r3, [r7, #24]
   1f2ae:	189b      	adds	r3, r3, r2
   1f2b0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1f2b2:	69bb      	ldr	r3, [r7, #24]
   1f2b4:	697a      	ldr	r2, [r7, #20]
   1f2b6:	189b      	adds	r3, r3, r2
   1f2b8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1f2ba:	6a3a      	ldr	r2, [r7, #32]
   1f2bc:	2318      	movs	r3, #24
   1f2be:	18f9      	adds	r1, r7, r3
   1f2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f2c2:	0018      	movs	r0, r3
   1f2c4:	4b14      	ldr	r3, [pc, #80]	; (1f318 <MQTTDeserialize_publish+0xfc>)
   1f2c6:	4798      	blx	r3
   1f2c8:	1e03      	subs	r3, r0, #0
   1f2ca:	d01c      	beq.n	1f306 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   1f2cc:	6a3b      	ldr	r3, [r7, #32]
   1f2ce:	69ba      	ldr	r2, [r7, #24]
   1f2d0:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1f2d2:	d418      	bmi.n	1f306 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   1f2d4:	68bb      	ldr	r3, [r7, #8]
   1f2d6:	681b      	ldr	r3, [r3, #0]
   1f2d8:	2b00      	cmp	r3, #0
   1f2da:	dd08      	ble.n	1f2ee <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   1f2dc:	2318      	movs	r3, #24
   1f2de:	18fb      	adds	r3, r7, r3
   1f2e0:	0018      	movs	r0, r3
   1f2e2:	4b0e      	ldr	r3, [pc, #56]	; (1f31c <MQTTDeserialize_publish+0x100>)
   1f2e4:	4798      	blx	r3
   1f2e6:	0003      	movs	r3, r0
   1f2e8:	b29a      	uxth	r2, r3
   1f2ea:	683b      	ldr	r3, [r7, #0]
   1f2ec:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   1f2ee:	6a3b      	ldr	r3, [r7, #32]
   1f2f0:	69ba      	ldr	r2, [r7, #24]
   1f2f2:	1a9a      	subs	r2, r3, r2
   1f2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f2f6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   1f2f8:	69ba      	ldr	r2, [r7, #24]
   1f2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f2fc:	601a      	str	r2, [r3, #0]
	rc = 1;
   1f2fe:	2301      	movs	r3, #1
   1f300:	627b      	str	r3, [r7, #36]	; 0x24
   1f302:	e000      	b.n	1f306 <MQTTDeserialize_publish+0xea>
		goto exit;
   1f304:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1f306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1f308:	0018      	movs	r0, r3
   1f30a:	46bd      	mov	sp, r7
   1f30c:	b00a      	add	sp, #40	; 0x28
   1f30e:	bd80      	pop	{r7, pc}
   1f310:	0001f5c3 	.word	0x0001f5c3
   1f314:	0001f55d 	.word	0x0001f55d
   1f318:	0001f741 	.word	0x0001f741
   1f31c:	0001f591 	.word	0x0001f591

0001f320 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   1f320:	b580      	push	{r7, lr}
   1f322:	b08a      	sub	sp, #40	; 0x28
   1f324:	af00      	add	r7, sp, #0
   1f326:	60f8      	str	r0, [r7, #12]
   1f328:	60b9      	str	r1, [r7, #8]
   1f32a:	607a      	str	r2, [r7, #4]
   1f32c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1f32e:	2300      	movs	r3, #0
   1f330:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1f332:	683b      	ldr	r3, [r7, #0]
   1f334:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1f336:	2300      	movs	r3, #0
   1f338:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1f33a:	2300      	movs	r3, #0
   1f33c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1f33e:	2318      	movs	r3, #24
   1f340:	18fb      	adds	r3, r7, r3
   1f342:	0018      	movs	r0, r3
   1f344:	4b20      	ldr	r3, [pc, #128]	; (1f3c8 <MQTTDeserialize_ack+0xa8>)
   1f346:	4798      	blx	r3
   1f348:	0003      	movs	r3, r0
   1f34a:	001a      	movs	r2, r3
   1f34c:	231c      	movs	r3, #28
   1f34e:	18fb      	adds	r3, r7, r3
   1f350:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   1f352:	231c      	movs	r3, #28
   1f354:	18fb      	adds	r3, r7, r3
   1f356:	781b      	ldrb	r3, [r3, #0]
   1f358:	071b      	lsls	r3, r3, #28
   1f35a:	0fdb      	lsrs	r3, r3, #31
   1f35c:	b2db      	uxtb	r3, r3
   1f35e:	001a      	movs	r2, r3
   1f360:	68bb      	ldr	r3, [r7, #8]
   1f362:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   1f364:	231c      	movs	r3, #28
   1f366:	18fb      	adds	r3, r7, r3
   1f368:	781b      	ldrb	r3, [r3, #0]
   1f36a:	061b      	lsls	r3, r3, #24
   1f36c:	0f1b      	lsrs	r3, r3, #28
   1f36e:	b2db      	uxtb	r3, r3
   1f370:	001a      	movs	r2, r3
   1f372:	68fb      	ldr	r3, [r7, #12]
   1f374:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1f376:	69bb      	ldr	r3, [r7, #24]
   1f378:	2214      	movs	r2, #20
   1f37a:	18ba      	adds	r2, r7, r2
   1f37c:	0011      	movs	r1, r2
   1f37e:	0018      	movs	r0, r3
   1f380:	4b12      	ldr	r3, [pc, #72]	; (1f3cc <MQTTDeserialize_ack+0xac>)
   1f382:	4798      	blx	r3
   1f384:	0003      	movs	r3, r0
   1f386:	627b      	str	r3, [r7, #36]	; 0x24
   1f388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f38a:	69bb      	ldr	r3, [r7, #24]
   1f38c:	189b      	adds	r3, r3, r2
   1f38e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1f390:	69bb      	ldr	r3, [r7, #24]
   1f392:	697a      	ldr	r2, [r7, #20]
   1f394:	189b      	adds	r3, r3, r2
   1f396:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   1f398:	6a3b      	ldr	r3, [r7, #32]
   1f39a:	69ba      	ldr	r2, [r7, #24]
   1f39c:	1a9b      	subs	r3, r3, r2
   1f39e:	2b01      	cmp	r3, #1
   1f3a0:	dd0b      	ble.n	1f3ba <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   1f3a2:	2318      	movs	r3, #24
   1f3a4:	18fb      	adds	r3, r7, r3
   1f3a6:	0018      	movs	r0, r3
   1f3a8:	4b09      	ldr	r3, [pc, #36]	; (1f3d0 <MQTTDeserialize_ack+0xb0>)
   1f3aa:	4798      	blx	r3
   1f3ac:	0003      	movs	r3, r0
   1f3ae:	b29a      	uxth	r2, r3
   1f3b0:	687b      	ldr	r3, [r7, #4]
   1f3b2:	801a      	strh	r2, [r3, #0]

	rc = 1;
   1f3b4:	2301      	movs	r3, #1
   1f3b6:	627b      	str	r3, [r7, #36]	; 0x24
   1f3b8:	e000      	b.n	1f3bc <MQTTDeserialize_ack+0x9c>
		goto exit;
   1f3ba:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1f3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1f3be:	0018      	movs	r0, r3
   1f3c0:	46bd      	mov	sp, r7
   1f3c2:	b00a      	add	sp, #40	; 0x28
   1f3c4:	bd80      	pop	{r7, pc}
   1f3c6:	46c0      	nop			; (mov r8, r8)
   1f3c8:	0001f5c3 	.word	0x0001f5c3
   1f3cc:	0001f55d 	.word	0x0001f55d
   1f3d0:	0001f591 	.word	0x0001f591

0001f3d4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   1f3d4:	b580      	push	{r7, lr}
   1f3d6:	b084      	sub	sp, #16
   1f3d8:	af00      	add	r7, sp, #0
   1f3da:	6078      	str	r0, [r7, #4]
   1f3dc:	6039      	str	r1, [r7, #0]
	int rc = 0;
   1f3de:	2300      	movs	r3, #0
   1f3e0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   1f3e2:	683b      	ldr	r3, [r7, #0]
   1f3e4:	4a17      	ldr	r2, [pc, #92]	; (1f444 <MQTTPacket_encode+0x70>)
   1f3e6:	4013      	ands	r3, r2
   1f3e8:	d504      	bpl.n	1f3f4 <MQTTPacket_encode+0x20>
   1f3ea:	3b01      	subs	r3, #1
   1f3ec:	2280      	movs	r2, #128	; 0x80
   1f3ee:	4252      	negs	r2, r2
   1f3f0:	4313      	orrs	r3, r2
   1f3f2:	3301      	adds	r3, #1
   1f3f4:	001a      	movs	r2, r3
   1f3f6:	230b      	movs	r3, #11
   1f3f8:	18fb      	adds	r3, r7, r3
   1f3fa:	701a      	strb	r2, [r3, #0]
		length /= 128;
   1f3fc:	683b      	ldr	r3, [r7, #0]
   1f3fe:	2b00      	cmp	r3, #0
   1f400:	da00      	bge.n	1f404 <MQTTPacket_encode+0x30>
   1f402:	337f      	adds	r3, #127	; 0x7f
   1f404:	11db      	asrs	r3, r3, #7
   1f406:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   1f408:	683b      	ldr	r3, [r7, #0]
   1f40a:	2b00      	cmp	r3, #0
   1f40c:	dd08      	ble.n	1f420 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   1f40e:	230b      	movs	r3, #11
   1f410:	18fb      	adds	r3, r7, r3
   1f412:	220b      	movs	r2, #11
   1f414:	18ba      	adds	r2, r7, r2
   1f416:	7812      	ldrb	r2, [r2, #0]
   1f418:	2180      	movs	r1, #128	; 0x80
   1f41a:	4249      	negs	r1, r1
   1f41c:	430a      	orrs	r2, r1
   1f41e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   1f420:	68fb      	ldr	r3, [r7, #12]
   1f422:	1c5a      	adds	r2, r3, #1
   1f424:	60fa      	str	r2, [r7, #12]
   1f426:	001a      	movs	r2, r3
   1f428:	687b      	ldr	r3, [r7, #4]
   1f42a:	189b      	adds	r3, r3, r2
   1f42c:	220b      	movs	r2, #11
   1f42e:	18ba      	adds	r2, r7, r2
   1f430:	7812      	ldrb	r2, [r2, #0]
   1f432:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   1f434:	683b      	ldr	r3, [r7, #0]
   1f436:	2b00      	cmp	r3, #0
   1f438:	dcd3      	bgt.n	1f3e2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   1f43a:	68fb      	ldr	r3, [r7, #12]
}
   1f43c:	0018      	movs	r0, r3
   1f43e:	46bd      	mov	sp, r7
   1f440:	b004      	add	sp, #16
   1f442:	bd80      	pop	{r7, pc}
   1f444:	8000007f 	.word	0x8000007f

0001f448 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   1f448:	b580      	push	{r7, lr}
   1f44a:	b086      	sub	sp, #24
   1f44c:	af00      	add	r7, sp, #0
   1f44e:	6078      	str	r0, [r7, #4]
   1f450:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   1f452:	2301      	movs	r3, #1
   1f454:	617b      	str	r3, [r7, #20]
	int len = 0;
   1f456:	2300      	movs	r3, #0
   1f458:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   1f45a:	683b      	ldr	r3, [r7, #0]
   1f45c:	2200      	movs	r2, #0
   1f45e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   1f460:	2301      	movs	r3, #1
   1f462:	425b      	negs	r3, r3
   1f464:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1f466:	693b      	ldr	r3, [r7, #16]
   1f468:	3301      	adds	r3, #1
   1f46a:	613b      	str	r3, [r7, #16]
   1f46c:	693b      	ldr	r3, [r7, #16]
   1f46e:	2b04      	cmp	r3, #4
   1f470:	dd03      	ble.n	1f47a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   1f472:	2301      	movs	r3, #1
   1f474:	425b      	negs	r3, r3
   1f476:	60fb      	str	r3, [r7, #12]
			goto exit;
   1f478:	e022      	b.n	1f4c0 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   1f47a:	230b      	movs	r3, #11
   1f47c:	18fa      	adds	r2, r7, r3
   1f47e:	687b      	ldr	r3, [r7, #4]
   1f480:	2101      	movs	r1, #1
   1f482:	0010      	movs	r0, r2
   1f484:	4798      	blx	r3
   1f486:	0003      	movs	r3, r0
   1f488:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   1f48a:	68fb      	ldr	r3, [r7, #12]
   1f48c:	2b01      	cmp	r3, #1
   1f48e:	d116      	bne.n	1f4be <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   1f490:	683b      	ldr	r3, [r7, #0]
   1f492:	681a      	ldr	r2, [r3, #0]
   1f494:	230b      	movs	r3, #11
   1f496:	18fb      	adds	r3, r7, r3
   1f498:	781b      	ldrb	r3, [r3, #0]
   1f49a:	0019      	movs	r1, r3
   1f49c:	237f      	movs	r3, #127	; 0x7f
   1f49e:	400b      	ands	r3, r1
   1f4a0:	6979      	ldr	r1, [r7, #20]
   1f4a2:	434b      	muls	r3, r1
   1f4a4:	18d2      	adds	r2, r2, r3
   1f4a6:	683b      	ldr	r3, [r7, #0]
   1f4a8:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   1f4aa:	697b      	ldr	r3, [r7, #20]
   1f4ac:	01db      	lsls	r3, r3, #7
   1f4ae:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   1f4b0:	230b      	movs	r3, #11
   1f4b2:	18fb      	adds	r3, r7, r3
   1f4b4:	781b      	ldrb	r3, [r3, #0]
   1f4b6:	b25b      	sxtb	r3, r3
   1f4b8:	2b00      	cmp	r3, #0
   1f4ba:	dbd1      	blt.n	1f460 <MQTTPacket_decode+0x18>
   1f4bc:	e000      	b.n	1f4c0 <MQTTPacket_decode+0x78>
			goto exit;
   1f4be:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   1f4c0:	693b      	ldr	r3, [r7, #16]
}
   1f4c2:	0018      	movs	r0, r3
   1f4c4:	46bd      	mov	sp, r7
   1f4c6:	b006      	add	sp, #24
   1f4c8:	bd80      	pop	{r7, pc}
	...

0001f4cc <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   1f4cc:	b580      	push	{r7, lr}
   1f4ce:	b082      	sub	sp, #8
   1f4d0:	af00      	add	r7, sp, #0
   1f4d2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   1f4d4:	687b      	ldr	r3, [r7, #4]
   1f4d6:	3301      	adds	r3, #1
   1f4d8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   1f4da:	687b      	ldr	r3, [r7, #4]
   1f4dc:	2b7f      	cmp	r3, #127	; 0x7f
   1f4de:	dc03      	bgt.n	1f4e8 <MQTTPacket_len+0x1c>
		rem_len += 1;
   1f4e0:	687b      	ldr	r3, [r7, #4]
   1f4e2:	3301      	adds	r3, #1
   1f4e4:	607b      	str	r3, [r7, #4]
   1f4e6:	e012      	b.n	1f50e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   1f4e8:	687b      	ldr	r3, [r7, #4]
   1f4ea:	4a0b      	ldr	r2, [pc, #44]	; (1f518 <MQTTPacket_len+0x4c>)
   1f4ec:	4293      	cmp	r3, r2
   1f4ee:	dc03      	bgt.n	1f4f8 <MQTTPacket_len+0x2c>
		rem_len += 2;
   1f4f0:	687b      	ldr	r3, [r7, #4]
   1f4f2:	3302      	adds	r3, #2
   1f4f4:	607b      	str	r3, [r7, #4]
   1f4f6:	e00a      	b.n	1f50e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   1f4f8:	687b      	ldr	r3, [r7, #4]
   1f4fa:	4a08      	ldr	r2, [pc, #32]	; (1f51c <MQTTPacket_len+0x50>)
   1f4fc:	4293      	cmp	r3, r2
   1f4fe:	dc03      	bgt.n	1f508 <MQTTPacket_len+0x3c>
		rem_len += 3;
   1f500:	687b      	ldr	r3, [r7, #4]
   1f502:	3303      	adds	r3, #3
   1f504:	607b      	str	r3, [r7, #4]
   1f506:	e002      	b.n	1f50e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   1f508:	687b      	ldr	r3, [r7, #4]
   1f50a:	3304      	adds	r3, #4
   1f50c:	607b      	str	r3, [r7, #4]
	return rem_len;
   1f50e:	687b      	ldr	r3, [r7, #4]
}
   1f510:	0018      	movs	r0, r3
   1f512:	46bd      	mov	sp, r7
   1f514:	b002      	add	sp, #8
   1f516:	bd80      	pop	{r7, pc}
   1f518:	00003fff 	.word	0x00003fff
   1f51c:	001ffffe 	.word	0x001ffffe

0001f520 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1f520:	b580      	push	{r7, lr}
   1f522:	b084      	sub	sp, #16
   1f524:	af00      	add	r7, sp, #0
   1f526:	6078      	str	r0, [r7, #4]
   1f528:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   1f52a:	2300      	movs	r3, #0
   1f52c:	60fb      	str	r3, [r7, #12]
   1f52e:	e00a      	b.n	1f546 <bufchar+0x26>
		*c = *bufptr++;
   1f530:	4b09      	ldr	r3, [pc, #36]	; (1f558 <bufchar+0x38>)
   1f532:	681b      	ldr	r3, [r3, #0]
   1f534:	1c59      	adds	r1, r3, #1
   1f536:	4a08      	ldr	r2, [pc, #32]	; (1f558 <bufchar+0x38>)
   1f538:	6011      	str	r1, [r2, #0]
   1f53a:	781a      	ldrb	r2, [r3, #0]
   1f53c:	687b      	ldr	r3, [r7, #4]
   1f53e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   1f540:	68fb      	ldr	r3, [r7, #12]
   1f542:	3301      	adds	r3, #1
   1f544:	60fb      	str	r3, [r7, #12]
   1f546:	68fa      	ldr	r2, [r7, #12]
   1f548:	683b      	ldr	r3, [r7, #0]
   1f54a:	429a      	cmp	r2, r3
   1f54c:	dbf0      	blt.n	1f530 <bufchar+0x10>
	return count;
   1f54e:	683b      	ldr	r3, [r7, #0]
}
   1f550:	0018      	movs	r0, r3
   1f552:	46bd      	mov	sp, r7
   1f554:	b004      	add	sp, #16
   1f556:	bd80      	pop	{r7, pc}
   1f558:	20004328 	.word	0x20004328

0001f55c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   1f55c:	b580      	push	{r7, lr}
   1f55e:	b082      	sub	sp, #8
   1f560:	af00      	add	r7, sp, #0
   1f562:	6078      	str	r0, [r7, #4]
   1f564:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   1f566:	4b07      	ldr	r3, [pc, #28]	; (1f584 <MQTTPacket_decodeBuf+0x28>)
   1f568:	687a      	ldr	r2, [r7, #4]
   1f56a:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   1f56c:	683a      	ldr	r2, [r7, #0]
   1f56e:	4b06      	ldr	r3, [pc, #24]	; (1f588 <MQTTPacket_decodeBuf+0x2c>)
   1f570:	0011      	movs	r1, r2
   1f572:	0018      	movs	r0, r3
   1f574:	4b05      	ldr	r3, [pc, #20]	; (1f58c <MQTTPacket_decodeBuf+0x30>)
   1f576:	4798      	blx	r3
   1f578:	0003      	movs	r3, r0
}
   1f57a:	0018      	movs	r0, r3
   1f57c:	46bd      	mov	sp, r7
   1f57e:	b002      	add	sp, #8
   1f580:	bd80      	pop	{r7, pc}
   1f582:	46c0      	nop			; (mov r8, r8)
   1f584:	20004328 	.word	0x20004328
   1f588:	0001f521 	.word	0x0001f521
   1f58c:	0001f449 	.word	0x0001f449

0001f590 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   1f590:	b580      	push	{r7, lr}
   1f592:	b084      	sub	sp, #16
   1f594:	af00      	add	r7, sp, #0
   1f596:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   1f598:	687b      	ldr	r3, [r7, #4]
   1f59a:	681b      	ldr	r3, [r3, #0]
   1f59c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   1f59e:	68fb      	ldr	r3, [r7, #12]
   1f5a0:	781b      	ldrb	r3, [r3, #0]
   1f5a2:	021b      	lsls	r3, r3, #8
   1f5a4:	68fa      	ldr	r2, [r7, #12]
   1f5a6:	3201      	adds	r2, #1
   1f5a8:	7812      	ldrb	r2, [r2, #0]
   1f5aa:	189b      	adds	r3, r3, r2
   1f5ac:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   1f5ae:	687b      	ldr	r3, [r7, #4]
   1f5b0:	681b      	ldr	r3, [r3, #0]
   1f5b2:	1c9a      	adds	r2, r3, #2
   1f5b4:	687b      	ldr	r3, [r7, #4]
   1f5b6:	601a      	str	r2, [r3, #0]
	return len;
   1f5b8:	68bb      	ldr	r3, [r7, #8]
}
   1f5ba:	0018      	movs	r0, r3
   1f5bc:	46bd      	mov	sp, r7
   1f5be:	b004      	add	sp, #16
   1f5c0:	bd80      	pop	{r7, pc}

0001f5c2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1f5c2:	b580      	push	{r7, lr}
   1f5c4:	b084      	sub	sp, #16
   1f5c6:	af00      	add	r7, sp, #0
   1f5c8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   1f5ca:	687b      	ldr	r3, [r7, #4]
   1f5cc:	681a      	ldr	r2, [r3, #0]
   1f5ce:	230f      	movs	r3, #15
   1f5d0:	18fb      	adds	r3, r7, r3
   1f5d2:	7812      	ldrb	r2, [r2, #0]
   1f5d4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1f5d6:	687b      	ldr	r3, [r7, #4]
   1f5d8:	681b      	ldr	r3, [r3, #0]
   1f5da:	1c5a      	adds	r2, r3, #1
   1f5dc:	687b      	ldr	r3, [r7, #4]
   1f5de:	601a      	str	r2, [r3, #0]
	return c;
   1f5e0:	230f      	movs	r3, #15
   1f5e2:	18fb      	adds	r3, r7, r3
   1f5e4:	781b      	ldrb	r3, [r3, #0]
}
   1f5e6:	0018      	movs	r0, r3
   1f5e8:	46bd      	mov	sp, r7
   1f5ea:	b004      	add	sp, #16
   1f5ec:	bd80      	pop	{r7, pc}

0001f5ee <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   1f5ee:	b580      	push	{r7, lr}
   1f5f0:	b082      	sub	sp, #8
   1f5f2:	af00      	add	r7, sp, #0
   1f5f4:	6078      	str	r0, [r7, #4]
   1f5f6:	000a      	movs	r2, r1
   1f5f8:	1cfb      	adds	r3, r7, #3
   1f5fa:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   1f5fc:	687b      	ldr	r3, [r7, #4]
   1f5fe:	681b      	ldr	r3, [r3, #0]
   1f600:	1cfa      	adds	r2, r7, #3
   1f602:	7812      	ldrb	r2, [r2, #0]
   1f604:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1f606:	687b      	ldr	r3, [r7, #4]
   1f608:	681b      	ldr	r3, [r3, #0]
   1f60a:	1c5a      	adds	r2, r3, #1
   1f60c:	687b      	ldr	r3, [r7, #4]
   1f60e:	601a      	str	r2, [r3, #0]
}
   1f610:	46c0      	nop			; (mov r8, r8)
   1f612:	46bd      	mov	sp, r7
   1f614:	b002      	add	sp, #8
   1f616:	bd80      	pop	{r7, pc}

0001f618 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   1f618:	b580      	push	{r7, lr}
   1f61a:	b082      	sub	sp, #8
   1f61c:	af00      	add	r7, sp, #0
   1f61e:	6078      	str	r0, [r7, #4]
   1f620:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   1f622:	687b      	ldr	r3, [r7, #4]
   1f624:	681a      	ldr	r2, [r3, #0]
   1f626:	683b      	ldr	r3, [r7, #0]
   1f628:	2b00      	cmp	r3, #0
   1f62a:	da00      	bge.n	1f62e <writeInt+0x16>
   1f62c:	33ff      	adds	r3, #255	; 0xff
   1f62e:	121b      	asrs	r3, r3, #8
   1f630:	b2db      	uxtb	r3, r3
   1f632:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1f634:	687b      	ldr	r3, [r7, #4]
   1f636:	681b      	ldr	r3, [r3, #0]
   1f638:	1c5a      	adds	r2, r3, #1
   1f63a:	687b      	ldr	r3, [r7, #4]
   1f63c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   1f63e:	687b      	ldr	r3, [r7, #4]
   1f640:	681a      	ldr	r2, [r3, #0]
   1f642:	683b      	ldr	r3, [r7, #0]
   1f644:	4908      	ldr	r1, [pc, #32]	; (1f668 <writeInt+0x50>)
   1f646:	400b      	ands	r3, r1
   1f648:	d503      	bpl.n	1f652 <writeInt+0x3a>
   1f64a:	3b01      	subs	r3, #1
   1f64c:	4907      	ldr	r1, [pc, #28]	; (1f66c <writeInt+0x54>)
   1f64e:	430b      	orrs	r3, r1
   1f650:	3301      	adds	r3, #1
   1f652:	b2db      	uxtb	r3, r3
   1f654:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1f656:	687b      	ldr	r3, [r7, #4]
   1f658:	681b      	ldr	r3, [r3, #0]
   1f65a:	1c5a      	adds	r2, r3, #1
   1f65c:	687b      	ldr	r3, [r7, #4]
   1f65e:	601a      	str	r2, [r3, #0]
}
   1f660:	46c0      	nop			; (mov r8, r8)
   1f662:	46bd      	mov	sp, r7
   1f664:	b002      	add	sp, #8
   1f666:	bd80      	pop	{r7, pc}
   1f668:	800000ff 	.word	0x800000ff
   1f66c:	ffffff00 	.word	0xffffff00

0001f670 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1f670:	b580      	push	{r7, lr}
   1f672:	b084      	sub	sp, #16
   1f674:	af00      	add	r7, sp, #0
   1f676:	6078      	str	r0, [r7, #4]
   1f678:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   1f67a:	683b      	ldr	r3, [r7, #0]
   1f67c:	0018      	movs	r0, r3
   1f67e:	4b0d      	ldr	r3, [pc, #52]	; (1f6b4 <writeCString+0x44>)
   1f680:	4798      	blx	r3
   1f682:	0003      	movs	r3, r0
   1f684:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   1f686:	68fa      	ldr	r2, [r7, #12]
   1f688:	687b      	ldr	r3, [r7, #4]
   1f68a:	0011      	movs	r1, r2
   1f68c:	0018      	movs	r0, r3
   1f68e:	4b0a      	ldr	r3, [pc, #40]	; (1f6b8 <writeCString+0x48>)
   1f690:	4798      	blx	r3
	memcpy(*pptr, string, len);
   1f692:	687b      	ldr	r3, [r7, #4]
   1f694:	681b      	ldr	r3, [r3, #0]
   1f696:	68fa      	ldr	r2, [r7, #12]
   1f698:	6839      	ldr	r1, [r7, #0]
   1f69a:	0018      	movs	r0, r3
   1f69c:	4b07      	ldr	r3, [pc, #28]	; (1f6bc <writeCString+0x4c>)
   1f69e:	4798      	blx	r3
	*pptr += len;
   1f6a0:	687b      	ldr	r3, [r7, #4]
   1f6a2:	681a      	ldr	r2, [r3, #0]
   1f6a4:	68fb      	ldr	r3, [r7, #12]
   1f6a6:	18d2      	adds	r2, r2, r3
   1f6a8:	687b      	ldr	r3, [r7, #4]
   1f6aa:	601a      	str	r2, [r3, #0]
}
   1f6ac:	46c0      	nop			; (mov r8, r8)
   1f6ae:	46bd      	mov	sp, r7
   1f6b0:	b004      	add	sp, #16
   1f6b2:	bd80      	pop	{r7, pc}
   1f6b4:	00024b6f 	.word	0x00024b6f
   1f6b8:	0001f619 	.word	0x0001f619
   1f6bc:	00024781 	.word	0x00024781

0001f6c0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   1f6c0:	b580      	push	{r7, lr}
   1f6c2:	b084      	sub	sp, #16
   1f6c4:	af00      	add	r7, sp, #0
   1f6c6:	60f8      	str	r0, [r7, #12]
   1f6c8:	0038      	movs	r0, r7
   1f6ca:	6001      	str	r1, [r0, #0]
   1f6cc:	6042      	str	r2, [r0, #4]
   1f6ce:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   1f6d0:	003b      	movs	r3, r7
   1f6d2:	685b      	ldr	r3, [r3, #4]
   1f6d4:	2b00      	cmp	r3, #0
   1f6d6:	dd17      	ble.n	1f708 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   1f6d8:	003b      	movs	r3, r7
   1f6da:	685a      	ldr	r2, [r3, #4]
   1f6dc:	68fb      	ldr	r3, [r7, #12]
   1f6de:	0011      	movs	r1, r2
   1f6e0:	0018      	movs	r0, r3
   1f6e2:	4b14      	ldr	r3, [pc, #80]	; (1f734 <writeMQTTString+0x74>)
   1f6e4:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   1f6e6:	68fb      	ldr	r3, [r7, #12]
   1f6e8:	6818      	ldr	r0, [r3, #0]
   1f6ea:	003b      	movs	r3, r7
   1f6ec:	6899      	ldr	r1, [r3, #8]
   1f6ee:	003b      	movs	r3, r7
   1f6f0:	685b      	ldr	r3, [r3, #4]
   1f6f2:	001a      	movs	r2, r3
   1f6f4:	4b10      	ldr	r3, [pc, #64]	; (1f738 <writeMQTTString+0x78>)
   1f6f6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   1f6f8:	68fb      	ldr	r3, [r7, #12]
   1f6fa:	681a      	ldr	r2, [r3, #0]
   1f6fc:	003b      	movs	r3, r7
   1f6fe:	685b      	ldr	r3, [r3, #4]
   1f700:	18d2      	adds	r2, r2, r3
   1f702:	68fb      	ldr	r3, [r7, #12]
   1f704:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   1f706:	e010      	b.n	1f72a <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   1f708:	003b      	movs	r3, r7
   1f70a:	681b      	ldr	r3, [r3, #0]
   1f70c:	2b00      	cmp	r3, #0
   1f70e:	d007      	beq.n	1f720 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   1f710:	003b      	movs	r3, r7
   1f712:	681a      	ldr	r2, [r3, #0]
   1f714:	68fb      	ldr	r3, [r7, #12]
   1f716:	0011      	movs	r1, r2
   1f718:	0018      	movs	r0, r3
   1f71a:	4b08      	ldr	r3, [pc, #32]	; (1f73c <writeMQTTString+0x7c>)
   1f71c:	4798      	blx	r3
}
   1f71e:	e004      	b.n	1f72a <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   1f720:	68fb      	ldr	r3, [r7, #12]
   1f722:	2100      	movs	r1, #0
   1f724:	0018      	movs	r0, r3
   1f726:	4b03      	ldr	r3, [pc, #12]	; (1f734 <writeMQTTString+0x74>)
   1f728:	4798      	blx	r3
}
   1f72a:	46c0      	nop			; (mov r8, r8)
   1f72c:	46bd      	mov	sp, r7
   1f72e:	b004      	add	sp, #16
   1f730:	bd80      	pop	{r7, pc}
   1f732:	46c0      	nop			; (mov r8, r8)
   1f734:	0001f619 	.word	0x0001f619
   1f738:	00024781 	.word	0x00024781
   1f73c:	0001f671 	.word	0x0001f671

0001f740 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   1f740:	b580      	push	{r7, lr}
   1f742:	b086      	sub	sp, #24
   1f744:	af00      	add	r7, sp, #0
   1f746:	60f8      	str	r0, [r7, #12]
   1f748:	60b9      	str	r1, [r7, #8]
   1f74a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   1f74c:	2300      	movs	r3, #0
   1f74e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   1f750:	687a      	ldr	r2, [r7, #4]
   1f752:	68bb      	ldr	r3, [r7, #8]
   1f754:	681b      	ldr	r3, [r3, #0]
   1f756:	1ad3      	subs	r3, r2, r3
   1f758:	2b01      	cmp	r3, #1
   1f75a:	dd1b      	ble.n	1f794 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   1f75c:	68bb      	ldr	r3, [r7, #8]
   1f75e:	0018      	movs	r0, r3
   1f760:	4b10      	ldr	r3, [pc, #64]	; (1f7a4 <readMQTTLenString+0x64>)
   1f762:	4798      	blx	r3
   1f764:	0002      	movs	r2, r0
   1f766:	68fb      	ldr	r3, [r7, #12]
   1f768:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1f76a:	68bb      	ldr	r3, [r7, #8]
   1f76c:	681a      	ldr	r2, [r3, #0]
   1f76e:	68fb      	ldr	r3, [r7, #12]
   1f770:	685b      	ldr	r3, [r3, #4]
   1f772:	18d2      	adds	r2, r2, r3
   1f774:	687b      	ldr	r3, [r7, #4]
   1f776:	429a      	cmp	r2, r3
   1f778:	d80c      	bhi.n	1f794 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   1f77a:	68bb      	ldr	r3, [r7, #8]
   1f77c:	681a      	ldr	r2, [r3, #0]
   1f77e:	68fb      	ldr	r3, [r7, #12]
   1f780:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   1f782:	68bb      	ldr	r3, [r7, #8]
   1f784:	681a      	ldr	r2, [r3, #0]
   1f786:	68fb      	ldr	r3, [r7, #12]
   1f788:	685b      	ldr	r3, [r3, #4]
   1f78a:	18d2      	adds	r2, r2, r3
   1f78c:	68bb      	ldr	r3, [r7, #8]
   1f78e:	601a      	str	r2, [r3, #0]
			rc = 1;
   1f790:	2301      	movs	r3, #1
   1f792:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   1f794:	68fb      	ldr	r3, [r7, #12]
   1f796:	2200      	movs	r2, #0
   1f798:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   1f79a:	697b      	ldr	r3, [r7, #20]
}
   1f79c:	0018      	movs	r0, r3
   1f79e:	46bd      	mov	sp, r7
   1f7a0:	b006      	add	sp, #24
   1f7a2:	bd80      	pop	{r7, pc}
   1f7a4:	0001f591 	.word	0x0001f591

0001f7a8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   1f7a8:	b580      	push	{r7, lr}
   1f7aa:	b086      	sub	sp, #24
   1f7ac:	af00      	add	r7, sp, #0
   1f7ae:	1d3b      	adds	r3, r7, #4
   1f7b0:	6018      	str	r0, [r3, #0]
   1f7b2:	6059      	str	r1, [r3, #4]
   1f7b4:	609a      	str	r2, [r3, #8]
	int rc = 0;
   1f7b6:	2300      	movs	r3, #0
   1f7b8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   1f7ba:	1d3b      	adds	r3, r7, #4
   1f7bc:	681b      	ldr	r3, [r3, #0]
   1f7be:	2b00      	cmp	r3, #0
   1f7c0:	d007      	beq.n	1f7d2 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   1f7c2:	1d3b      	adds	r3, r7, #4
   1f7c4:	681b      	ldr	r3, [r3, #0]
   1f7c6:	0018      	movs	r0, r3
   1f7c8:	4b06      	ldr	r3, [pc, #24]	; (1f7e4 <MQTTstrlen+0x3c>)
   1f7ca:	4798      	blx	r3
   1f7cc:	0003      	movs	r3, r0
   1f7ce:	617b      	str	r3, [r7, #20]
   1f7d0:	e002      	b.n	1f7d8 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   1f7d2:	1d3b      	adds	r3, r7, #4
   1f7d4:	685b      	ldr	r3, [r3, #4]
   1f7d6:	617b      	str	r3, [r7, #20]
	return rc;
   1f7d8:	697b      	ldr	r3, [r7, #20]
}
   1f7da:	0018      	movs	r0, r3
   1f7dc:	46bd      	mov	sp, r7
   1f7de:	b006      	add	sp, #24
   1f7e0:	bd80      	pop	{r7, pc}
   1f7e2:	46c0      	nop			; (mov r8, r8)
   1f7e4:	00024b6f 	.word	0x00024b6f

0001f7e8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1f7e8:	b580      	push	{r7, lr}
   1f7ea:	b086      	sub	sp, #24
   1f7ec:	af00      	add	r7, sp, #0
   1f7ee:	6078      	str	r0, [r7, #4]
   1f7f0:	6039      	str	r1, [r7, #0]
	int alen = 0,
   1f7f2:	2300      	movs	r3, #0
   1f7f4:	617b      	str	r3, [r7, #20]
		blen = 0;
   1f7f6:	2300      	movs	r3, #0
   1f7f8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   1f7fa:	687b      	ldr	r3, [r7, #4]
   1f7fc:	681b      	ldr	r3, [r3, #0]
   1f7fe:	2b00      	cmp	r3, #0
   1f800:	d00a      	beq.n	1f818 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   1f802:	687b      	ldr	r3, [r7, #4]
   1f804:	681b      	ldr	r3, [r3, #0]
   1f806:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   1f808:	687b      	ldr	r3, [r7, #4]
   1f80a:	681b      	ldr	r3, [r3, #0]
   1f80c:	0018      	movs	r0, r3
   1f80e:	4b12      	ldr	r3, [pc, #72]	; (1f858 <MQTTPacket_equals+0x70>)
   1f810:	4798      	blx	r3
   1f812:	0003      	movs	r3, r0
   1f814:	617b      	str	r3, [r7, #20]
   1f816:	e005      	b.n	1f824 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   1f818:	687b      	ldr	r3, [r7, #4]
   1f81a:	689b      	ldr	r3, [r3, #8]
   1f81c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   1f81e:	687b      	ldr	r3, [r7, #4]
   1f820:	685b      	ldr	r3, [r3, #4]
   1f822:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   1f824:	683b      	ldr	r3, [r7, #0]
   1f826:	0018      	movs	r0, r3
   1f828:	4b0b      	ldr	r3, [pc, #44]	; (1f858 <MQTTPacket_equals+0x70>)
   1f82a:	4798      	blx	r3
   1f82c:	0003      	movs	r3, r0
   1f82e:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   1f830:	697a      	ldr	r2, [r7, #20]
   1f832:	68fb      	ldr	r3, [r7, #12]
   1f834:	429a      	cmp	r2, r3
   1f836:	d109      	bne.n	1f84c <MQTTPacket_equals+0x64>
   1f838:	697a      	ldr	r2, [r7, #20]
   1f83a:	6839      	ldr	r1, [r7, #0]
   1f83c:	693b      	ldr	r3, [r7, #16]
   1f83e:	0018      	movs	r0, r3
   1f840:	4b06      	ldr	r3, [pc, #24]	; (1f85c <MQTTPacket_equals+0x74>)
   1f842:	4798      	blx	r3
   1f844:	1e03      	subs	r3, r0, #0
   1f846:	d101      	bne.n	1f84c <MQTTPacket_equals+0x64>
   1f848:	2301      	movs	r3, #1
   1f84a:	e000      	b.n	1f84e <MQTTPacket_equals+0x66>
   1f84c:	2300      	movs	r3, #0
}
   1f84e:	0018      	movs	r0, r3
   1f850:	46bd      	mov	sp, r7
   1f852:	b006      	add	sp, #24
   1f854:	bd80      	pop	{r7, pc}
   1f856:	46c0      	nop			; (mov r8, r8)
   1f858:	00024b6f 	.word	0x00024b6f
   1f85c:	00024b7d 	.word	0x00024b7d

0001f860 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   1f860:	b580      	push	{r7, lr}
   1f862:	b086      	sub	sp, #24
   1f864:	af00      	add	r7, sp, #0
   1f866:	60f8      	str	r0, [r7, #12]
   1f868:	0038      	movs	r0, r7
   1f86a:	6001      	str	r1, [r0, #0]
   1f86c:	6042      	str	r2, [r0, #4]
   1f86e:	6083      	str	r3, [r0, #8]
	int len = 0;
   1f870:	2300      	movs	r3, #0
   1f872:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   1f874:	003b      	movs	r3, r7
   1f876:	6818      	ldr	r0, [r3, #0]
   1f878:	6859      	ldr	r1, [r3, #4]
   1f87a:	689a      	ldr	r2, [r3, #8]
   1f87c:	4b09      	ldr	r3, [pc, #36]	; (1f8a4 <MQTTSerialize_publishLength+0x44>)
   1f87e:	4798      	blx	r3
   1f880:	0003      	movs	r3, r0
   1f882:	1c9a      	adds	r2, r3, #2
   1f884:	6a3b      	ldr	r3, [r7, #32]
   1f886:	18d3      	adds	r3, r2, r3
   1f888:	697a      	ldr	r2, [r7, #20]
   1f88a:	18d3      	adds	r3, r2, r3
   1f88c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   1f88e:	68fb      	ldr	r3, [r7, #12]
   1f890:	2b00      	cmp	r3, #0
   1f892:	dd02      	ble.n	1f89a <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   1f894:	697b      	ldr	r3, [r7, #20]
   1f896:	3302      	adds	r3, #2
   1f898:	617b      	str	r3, [r7, #20]
	return len;
   1f89a:	697b      	ldr	r3, [r7, #20]
}
   1f89c:	0018      	movs	r0, r3
   1f89e:	46bd      	mov	sp, r7
   1f8a0:	b006      	add	sp, #24
   1f8a2:	bd80      	pop	{r7, pc}
   1f8a4:	0001f7a9 	.word	0x0001f7a9

0001f8a8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   1f8a8:	b590      	push	{r4, r7, lr}
   1f8aa:	b08b      	sub	sp, #44	; 0x2c
   1f8ac:	af02      	add	r7, sp, #8
   1f8ae:	60f8      	str	r0, [r7, #12]
   1f8b0:	60b9      	str	r1, [r7, #8]
   1f8b2:	603b      	str	r3, [r7, #0]
   1f8b4:	1dfb      	adds	r3, r7, #7
   1f8b6:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   1f8b8:	68fb      	ldr	r3, [r7, #12]
   1f8ba:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   1f8bc:	2300      	movs	r3, #0
   1f8be:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   1f8c0:	2300      	movs	r3, #0
   1f8c2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1f8c4:	2300      	movs	r3, #0
   1f8c6:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   1f8c8:	2308      	movs	r3, #8
   1f8ca:	2230      	movs	r2, #48	; 0x30
   1f8cc:	4694      	mov	ip, r2
   1f8ce:	44bc      	add	ip, r7
   1f8d0:	4463      	add	r3, ip
   1f8d2:	6838      	ldr	r0, [r7, #0]
   1f8d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1f8d6:	9200      	str	r2, [sp, #0]
   1f8d8:	6819      	ldr	r1, [r3, #0]
   1f8da:	685a      	ldr	r2, [r3, #4]
   1f8dc:	689b      	ldr	r3, [r3, #8]
   1f8de:	4c46      	ldr	r4, [pc, #280]	; (1f9f8 <MQTTSerialize_publish+0x150>)
   1f8e0:	47a0      	blx	r4
   1f8e2:	0003      	movs	r3, r0
   1f8e4:	61bb      	str	r3, [r7, #24]
   1f8e6:	69bb      	ldr	r3, [r7, #24]
   1f8e8:	0018      	movs	r0, r3
   1f8ea:	4b44      	ldr	r3, [pc, #272]	; (1f9fc <MQTTSerialize_publish+0x154>)
   1f8ec:	4798      	blx	r3
   1f8ee:	0002      	movs	r2, r0
   1f8f0:	68bb      	ldr	r3, [r7, #8]
   1f8f2:	429a      	cmp	r2, r3
   1f8f4:	dd03      	ble.n	1f8fe <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1f8f6:	2302      	movs	r3, #2
   1f8f8:	425b      	negs	r3, r3
   1f8fa:	61fb      	str	r3, [r7, #28]
		goto exit;
   1f8fc:	e077      	b.n	1f9ee <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   1f8fe:	2310      	movs	r3, #16
   1f900:	18fb      	adds	r3, r7, r3
   1f902:	781a      	ldrb	r2, [r3, #0]
   1f904:	210f      	movs	r1, #15
   1f906:	400a      	ands	r2, r1
   1f908:	1c11      	adds	r1, r2, #0
   1f90a:	2230      	movs	r2, #48	; 0x30
   1f90c:	430a      	orrs	r2, r1
   1f90e:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1f910:	1dfb      	adds	r3, r7, #7
   1f912:	781b      	ldrb	r3, [r3, #0]
   1f914:	2201      	movs	r2, #1
   1f916:	4013      	ands	r3, r2
   1f918:	b2da      	uxtb	r2, r3
   1f91a:	2310      	movs	r3, #16
   1f91c:	18fb      	adds	r3, r7, r3
   1f91e:	2101      	movs	r1, #1
   1f920:	400a      	ands	r2, r1
   1f922:	00d0      	lsls	r0, r2, #3
   1f924:	781a      	ldrb	r2, [r3, #0]
   1f926:	2108      	movs	r1, #8
   1f928:	438a      	bics	r2, r1
   1f92a:	1c11      	adds	r1, r2, #0
   1f92c:	1c02      	adds	r2, r0, #0
   1f92e:	430a      	orrs	r2, r1
   1f930:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   1f932:	683b      	ldr	r3, [r7, #0]
   1f934:	b2db      	uxtb	r3, r3
   1f936:	1c1a      	adds	r2, r3, #0
   1f938:	2303      	movs	r3, #3
   1f93a:	4013      	ands	r3, r2
   1f93c:	b2da      	uxtb	r2, r3
   1f93e:	2310      	movs	r3, #16
   1f940:	18fb      	adds	r3, r7, r3
   1f942:	2103      	movs	r1, #3
   1f944:	400a      	ands	r2, r1
   1f946:	1890      	adds	r0, r2, r2
   1f948:	781a      	ldrb	r2, [r3, #0]
   1f94a:	2106      	movs	r1, #6
   1f94c:	438a      	bics	r2, r1
   1f94e:	1c11      	adds	r1, r2, #0
   1f950:	1c02      	adds	r2, r0, #0
   1f952:	430a      	orrs	r2, r1
   1f954:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   1f956:	2330      	movs	r3, #48	; 0x30
   1f958:	18fb      	adds	r3, r7, r3
   1f95a:	781b      	ldrb	r3, [r3, #0]
   1f95c:	2201      	movs	r2, #1
   1f95e:	4013      	ands	r3, r2
   1f960:	b2da      	uxtb	r2, r3
   1f962:	2310      	movs	r3, #16
   1f964:	18fb      	adds	r3, r7, r3
   1f966:	2101      	movs	r1, #1
   1f968:	400a      	ands	r2, r1
   1f96a:	0010      	movs	r0, r2
   1f96c:	781a      	ldrb	r2, [r3, #0]
   1f96e:	2101      	movs	r1, #1
   1f970:	438a      	bics	r2, r1
   1f972:	1c11      	adds	r1, r2, #0
   1f974:	1c02      	adds	r2, r0, #0
   1f976:	430a      	orrs	r2, r1
   1f978:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1f97a:	2310      	movs	r3, #16
   1f97c:	18fb      	adds	r3, r7, r3
   1f97e:	781a      	ldrb	r2, [r3, #0]
   1f980:	2314      	movs	r3, #20
   1f982:	18fb      	adds	r3, r7, r3
   1f984:	0011      	movs	r1, r2
   1f986:	0018      	movs	r0, r3
   1f988:	4b1d      	ldr	r3, [pc, #116]	; (1fa00 <MQTTSerialize_publish+0x158>)
   1f98a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1f98c:	697b      	ldr	r3, [r7, #20]
   1f98e:	69ba      	ldr	r2, [r7, #24]
   1f990:	0011      	movs	r1, r2
   1f992:	0018      	movs	r0, r3
   1f994:	4b1b      	ldr	r3, [pc, #108]	; (1fa04 <MQTTSerialize_publish+0x15c>)
   1f996:	4798      	blx	r3
   1f998:	0002      	movs	r2, r0
   1f99a:	697b      	ldr	r3, [r7, #20]
   1f99c:	189b      	adds	r3, r3, r2
   1f99e:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   1f9a0:	2308      	movs	r3, #8
   1f9a2:	2230      	movs	r2, #48	; 0x30
   1f9a4:	4694      	mov	ip, r2
   1f9a6:	44bc      	add	ip, r7
   1f9a8:	4463      	add	r3, ip
   1f9aa:	2214      	movs	r2, #20
   1f9ac:	18b8      	adds	r0, r7, r2
   1f9ae:	6819      	ldr	r1, [r3, #0]
   1f9b0:	685a      	ldr	r2, [r3, #4]
   1f9b2:	689b      	ldr	r3, [r3, #8]
   1f9b4:	4c14      	ldr	r4, [pc, #80]	; (1fa08 <MQTTSerialize_publish+0x160>)
   1f9b6:	47a0      	blx	r4

	if (qos > 0)
   1f9b8:	683b      	ldr	r3, [r7, #0]
   1f9ba:	2b00      	cmp	r3, #0
   1f9bc:	dd08      	ble.n	1f9d0 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   1f9be:	2334      	movs	r3, #52	; 0x34
   1f9c0:	18fb      	adds	r3, r7, r3
   1f9c2:	881a      	ldrh	r2, [r3, #0]
   1f9c4:	2314      	movs	r3, #20
   1f9c6:	18fb      	adds	r3, r7, r3
   1f9c8:	0011      	movs	r1, r2
   1f9ca:	0018      	movs	r0, r3
   1f9cc:	4b0f      	ldr	r3, [pc, #60]	; (1fa0c <MQTTSerialize_publish+0x164>)
   1f9ce:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1f9d0:	697b      	ldr	r3, [r7, #20]
   1f9d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1f9d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1f9d6:	0018      	movs	r0, r3
   1f9d8:	4b0d      	ldr	r3, [pc, #52]	; (1fa10 <MQTTSerialize_publish+0x168>)
   1f9da:	4798      	blx	r3
	ptr += payloadlen;
   1f9dc:	697a      	ldr	r2, [r7, #20]
   1f9de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f9e0:	18d3      	adds	r3, r2, r3
   1f9e2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   1f9e4:	697b      	ldr	r3, [r7, #20]
   1f9e6:	001a      	movs	r2, r3
   1f9e8:	68fb      	ldr	r3, [r7, #12]
   1f9ea:	1ad3      	subs	r3, r2, r3
   1f9ec:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1f9ee:	69fb      	ldr	r3, [r7, #28]
}
   1f9f0:	0018      	movs	r0, r3
   1f9f2:	46bd      	mov	sp, r7
   1f9f4:	b009      	add	sp, #36	; 0x24
   1f9f6:	bd90      	pop	{r4, r7, pc}
   1f9f8:	0001f861 	.word	0x0001f861
   1f9fc:	0001f4cd 	.word	0x0001f4cd
   1fa00:	0001f5ef 	.word	0x0001f5ef
   1fa04:	0001f3d5 	.word	0x0001f3d5
   1fa08:	0001f6c1 	.word	0x0001f6c1
   1fa0c:	0001f619 	.word	0x0001f619
   1fa10:	00024781 	.word	0x00024781

0001fa14 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   1fa14:	b580      	push	{r7, lr}
   1fa16:	b088      	sub	sp, #32
   1fa18:	af00      	add	r7, sp, #0
   1fa1a:	60f8      	str	r0, [r7, #12]
   1fa1c:	60b9      	str	r1, [r7, #8]
   1fa1e:	0019      	movs	r1, r3
   1fa20:	1dfb      	adds	r3, r7, #7
   1fa22:	701a      	strb	r2, [r3, #0]
   1fa24:	1dbb      	adds	r3, r7, #6
   1fa26:	1c0a      	adds	r2, r1, #0
   1fa28:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1fa2a:	2300      	movs	r3, #0
   1fa2c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1fa2e:	2300      	movs	r3, #0
   1fa30:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1fa32:	68fb      	ldr	r3, [r7, #12]
   1fa34:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   1fa36:	68bb      	ldr	r3, [r7, #8]
   1fa38:	2b03      	cmp	r3, #3
   1fa3a:	dc03      	bgt.n	1fa44 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1fa3c:	2302      	movs	r3, #2
   1fa3e:	425b      	negs	r3, r3
   1fa40:	61fb      	str	r3, [r7, #28]
		goto exit;
   1fa42:	e055      	b.n	1faf0 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   1fa44:	1dfb      	adds	r3, r7, #7
   1fa46:	781b      	ldrb	r3, [r3, #0]
   1fa48:	220f      	movs	r2, #15
   1fa4a:	4013      	ands	r3, r2
   1fa4c:	b2da      	uxtb	r2, r3
   1fa4e:	2318      	movs	r3, #24
   1fa50:	18fb      	adds	r3, r7, r3
   1fa52:	0110      	lsls	r0, r2, #4
   1fa54:	781a      	ldrb	r2, [r3, #0]
   1fa56:	210f      	movs	r1, #15
   1fa58:	400a      	ands	r2, r1
   1fa5a:	1c11      	adds	r1, r2, #0
   1fa5c:	1c02      	adds	r2, r0, #0
   1fa5e:	430a      	orrs	r2, r1
   1fa60:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1fa62:	1dbb      	adds	r3, r7, #6
   1fa64:	781b      	ldrb	r3, [r3, #0]
   1fa66:	2201      	movs	r2, #1
   1fa68:	4013      	ands	r3, r2
   1fa6a:	b2da      	uxtb	r2, r3
   1fa6c:	2318      	movs	r3, #24
   1fa6e:	18fb      	adds	r3, r7, r3
   1fa70:	2101      	movs	r1, #1
   1fa72:	400a      	ands	r2, r1
   1fa74:	00d0      	lsls	r0, r2, #3
   1fa76:	781a      	ldrb	r2, [r3, #0]
   1fa78:	2108      	movs	r1, #8
   1fa7a:	438a      	bics	r2, r1
   1fa7c:	1c11      	adds	r1, r2, #0
   1fa7e:	1c02      	adds	r2, r0, #0
   1fa80:	430a      	orrs	r2, r1
   1fa82:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1fa84:	1dfb      	adds	r3, r7, #7
   1fa86:	781b      	ldrb	r3, [r3, #0]
   1fa88:	3b06      	subs	r3, #6
   1fa8a:	425a      	negs	r2, r3
   1fa8c:	4153      	adcs	r3, r2
   1fa8e:	b2db      	uxtb	r3, r3
   1fa90:	1c1a      	adds	r2, r3, #0
   1fa92:	2303      	movs	r3, #3
   1fa94:	4013      	ands	r3, r2
   1fa96:	b2da      	uxtb	r2, r3
   1fa98:	2318      	movs	r3, #24
   1fa9a:	18fb      	adds	r3, r7, r3
   1fa9c:	2103      	movs	r1, #3
   1fa9e:	400a      	ands	r2, r1
   1faa0:	1890      	adds	r0, r2, r2
   1faa2:	781a      	ldrb	r2, [r3, #0]
   1faa4:	2106      	movs	r1, #6
   1faa6:	438a      	bics	r2, r1
   1faa8:	1c11      	adds	r1, r2, #0
   1faaa:	1c02      	adds	r2, r0, #0
   1faac:	430a      	orrs	r2, r1
   1faae:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1fab0:	2318      	movs	r3, #24
   1fab2:	18fb      	adds	r3, r7, r3
   1fab4:	781a      	ldrb	r2, [r3, #0]
   1fab6:	2314      	movs	r3, #20
   1fab8:	18fb      	adds	r3, r7, r3
   1faba:	0011      	movs	r1, r2
   1fabc:	0018      	movs	r0, r3
   1fabe:	4b0f      	ldr	r3, [pc, #60]	; (1fafc <MQTTSerialize_ack+0xe8>)
   1fac0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   1fac2:	697b      	ldr	r3, [r7, #20]
   1fac4:	2102      	movs	r1, #2
   1fac6:	0018      	movs	r0, r3
   1fac8:	4b0d      	ldr	r3, [pc, #52]	; (1fb00 <MQTTSerialize_ack+0xec>)
   1faca:	4798      	blx	r3
   1facc:	0002      	movs	r2, r0
   1face:	697b      	ldr	r3, [r7, #20]
   1fad0:	189b      	adds	r3, r3, r2
   1fad2:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   1fad4:	2328      	movs	r3, #40	; 0x28
   1fad6:	18fb      	adds	r3, r7, r3
   1fad8:	881a      	ldrh	r2, [r3, #0]
   1fada:	2314      	movs	r3, #20
   1fadc:	18fb      	adds	r3, r7, r3
   1fade:	0011      	movs	r1, r2
   1fae0:	0018      	movs	r0, r3
   1fae2:	4b08      	ldr	r3, [pc, #32]	; (1fb04 <MQTTSerialize_ack+0xf0>)
   1fae4:	4798      	blx	r3
	rc = ptr - buf;
   1fae6:	697b      	ldr	r3, [r7, #20]
   1fae8:	001a      	movs	r2, r3
   1faea:	68fb      	ldr	r3, [r7, #12]
   1faec:	1ad3      	subs	r3, r2, r3
   1faee:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1faf0:	69fb      	ldr	r3, [r7, #28]
}
   1faf2:	0018      	movs	r0, r3
   1faf4:	46bd      	mov	sp, r7
   1faf6:	b008      	add	sp, #32
   1faf8:	bd80      	pop	{r7, pc}
   1fafa:	46c0      	nop			; (mov r8, r8)
   1fafc:	0001f5ef 	.word	0x0001f5ef
   1fb00:	0001f3d5 	.word	0x0001f3d5
   1fb04:	0001f619 	.word	0x0001f619

0001fb08 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   1fb08:	b580      	push	{r7, lr}
   1fb0a:	b084      	sub	sp, #16
   1fb0c:	af00      	add	r7, sp, #0
   1fb0e:	6078      	str	r0, [r7, #4]
   1fb10:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   1fb12:	2302      	movs	r3, #2
   1fb14:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   1fb16:	2300      	movs	r3, #0
   1fb18:	60fb      	str	r3, [r7, #12]
   1fb1a:	e014      	b.n	1fb46 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   1fb1c:	68fa      	ldr	r2, [r7, #12]
   1fb1e:	0013      	movs	r3, r2
   1fb20:	005b      	lsls	r3, r3, #1
   1fb22:	189b      	adds	r3, r3, r2
   1fb24:	009b      	lsls	r3, r3, #2
   1fb26:	001a      	movs	r2, r3
   1fb28:	683b      	ldr	r3, [r7, #0]
   1fb2a:	189b      	adds	r3, r3, r2
   1fb2c:	6818      	ldr	r0, [r3, #0]
   1fb2e:	6859      	ldr	r1, [r3, #4]
   1fb30:	689a      	ldr	r2, [r3, #8]
   1fb32:	4b09      	ldr	r3, [pc, #36]	; (1fb58 <MQTTSerialize_subscribeLength+0x50>)
   1fb34:	4798      	blx	r3
   1fb36:	0003      	movs	r3, r0
   1fb38:	3303      	adds	r3, #3
   1fb3a:	68ba      	ldr	r2, [r7, #8]
   1fb3c:	18d3      	adds	r3, r2, r3
   1fb3e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   1fb40:	68fb      	ldr	r3, [r7, #12]
   1fb42:	3301      	adds	r3, #1
   1fb44:	60fb      	str	r3, [r7, #12]
   1fb46:	68fa      	ldr	r2, [r7, #12]
   1fb48:	687b      	ldr	r3, [r7, #4]
   1fb4a:	429a      	cmp	r2, r3
   1fb4c:	dbe6      	blt.n	1fb1c <MQTTSerialize_subscribeLength+0x14>
	return len;
   1fb4e:	68bb      	ldr	r3, [r7, #8]
}
   1fb50:	0018      	movs	r0, r3
   1fb52:	46bd      	mov	sp, r7
   1fb54:	b004      	add	sp, #16
   1fb56:	bd80      	pop	{r7, pc}
   1fb58:	0001f7a9 	.word	0x0001f7a9

0001fb5c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1fb5c:	b590      	push	{r4, r7, lr}
   1fb5e:	b08b      	sub	sp, #44	; 0x2c
   1fb60:	af00      	add	r7, sp, #0
   1fb62:	60f8      	str	r0, [r7, #12]
   1fb64:	60b9      	str	r1, [r7, #8]
   1fb66:	0019      	movs	r1, r3
   1fb68:	1dfb      	adds	r3, r7, #7
   1fb6a:	701a      	strb	r2, [r3, #0]
   1fb6c:	1d3b      	adds	r3, r7, #4
   1fb6e:	1c0a      	adds	r2, r1, #0
   1fb70:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   1fb72:	68fb      	ldr	r3, [r7, #12]
   1fb74:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   1fb76:	2300      	movs	r3, #0
   1fb78:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   1fb7a:	2300      	movs	r3, #0
   1fb7c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   1fb7e:	2300      	movs	r3, #0
   1fb80:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   1fb82:	2300      	movs	r3, #0
   1fb84:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   1fb86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1fb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1fb8a:	0011      	movs	r1, r2
   1fb8c:	0018      	movs	r0, r3
   1fb8e:	4b41      	ldr	r3, [pc, #260]	; (1fc94 <MQTTSerialize_subscribe+0x138>)
   1fb90:	4798      	blx	r3
   1fb92:	0003      	movs	r3, r0
   1fb94:	61fb      	str	r3, [r7, #28]
   1fb96:	69fb      	ldr	r3, [r7, #28]
   1fb98:	0018      	movs	r0, r3
   1fb9a:	4b3f      	ldr	r3, [pc, #252]	; (1fc98 <MQTTSerialize_subscribe+0x13c>)
   1fb9c:	4798      	blx	r3
   1fb9e:	0002      	movs	r2, r0
   1fba0:	68bb      	ldr	r3, [r7, #8]
   1fba2:	429a      	cmp	r2, r3
   1fba4:	dd03      	ble.n	1fbae <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1fba6:	2302      	movs	r3, #2
   1fba8:	425b      	negs	r3, r3
   1fbaa:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1fbac:	e06c      	b.n	1fc88 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   1fbae:	2314      	movs	r3, #20
   1fbb0:	18fb      	adds	r3, r7, r3
   1fbb2:	2200      	movs	r2, #0
   1fbb4:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   1fbb6:	2314      	movs	r3, #20
   1fbb8:	18fb      	adds	r3, r7, r3
   1fbba:	781a      	ldrb	r2, [r3, #0]
   1fbbc:	210f      	movs	r1, #15
   1fbbe:	400a      	ands	r2, r1
   1fbc0:	1c11      	adds	r1, r2, #0
   1fbc2:	2280      	movs	r2, #128	; 0x80
   1fbc4:	4252      	negs	r2, r2
   1fbc6:	430a      	orrs	r2, r1
   1fbc8:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1fbca:	1dfb      	adds	r3, r7, #7
   1fbcc:	781b      	ldrb	r3, [r3, #0]
   1fbce:	2201      	movs	r2, #1
   1fbd0:	4013      	ands	r3, r2
   1fbd2:	b2da      	uxtb	r2, r3
   1fbd4:	2314      	movs	r3, #20
   1fbd6:	18fb      	adds	r3, r7, r3
   1fbd8:	2101      	movs	r1, #1
   1fbda:	400a      	ands	r2, r1
   1fbdc:	00d0      	lsls	r0, r2, #3
   1fbde:	781a      	ldrb	r2, [r3, #0]
   1fbe0:	2108      	movs	r1, #8
   1fbe2:	438a      	bics	r2, r1
   1fbe4:	1c11      	adds	r1, r2, #0
   1fbe6:	1c02      	adds	r2, r0, #0
   1fbe8:	430a      	orrs	r2, r1
   1fbea:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   1fbec:	2314      	movs	r3, #20
   1fbee:	18fb      	adds	r3, r7, r3
   1fbf0:	781a      	ldrb	r2, [r3, #0]
   1fbf2:	2106      	movs	r1, #6
   1fbf4:	438a      	bics	r2, r1
   1fbf6:	1c11      	adds	r1, r2, #0
   1fbf8:	2202      	movs	r2, #2
   1fbfa:	430a      	orrs	r2, r1
   1fbfc:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1fbfe:	2314      	movs	r3, #20
   1fc00:	18fb      	adds	r3, r7, r3
   1fc02:	781a      	ldrb	r2, [r3, #0]
   1fc04:	2318      	movs	r3, #24
   1fc06:	18fb      	adds	r3, r7, r3
   1fc08:	0011      	movs	r1, r2
   1fc0a:	0018      	movs	r0, r3
   1fc0c:	4b23      	ldr	r3, [pc, #140]	; (1fc9c <MQTTSerialize_subscribe+0x140>)
   1fc0e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1fc10:	69bb      	ldr	r3, [r7, #24]
   1fc12:	69fa      	ldr	r2, [r7, #28]
   1fc14:	0011      	movs	r1, r2
   1fc16:	0018      	movs	r0, r3
   1fc18:	4b21      	ldr	r3, [pc, #132]	; (1fca0 <MQTTSerialize_subscribe+0x144>)
   1fc1a:	4798      	blx	r3
   1fc1c:	0002      	movs	r2, r0
   1fc1e:	69bb      	ldr	r3, [r7, #24]
   1fc20:	189b      	adds	r3, r3, r2
   1fc22:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   1fc24:	1d3b      	adds	r3, r7, #4
   1fc26:	881a      	ldrh	r2, [r3, #0]
   1fc28:	2318      	movs	r3, #24
   1fc2a:	18fb      	adds	r3, r7, r3
   1fc2c:	0011      	movs	r1, r2
   1fc2e:	0018      	movs	r0, r3
   1fc30:	4b1c      	ldr	r3, [pc, #112]	; (1fca4 <MQTTSerialize_subscribe+0x148>)
   1fc32:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1fc34:	2300      	movs	r3, #0
   1fc36:	623b      	str	r3, [r7, #32]
   1fc38:	e01d      	b.n	1fc76 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1fc3a:	6a3a      	ldr	r2, [r7, #32]
   1fc3c:	0013      	movs	r3, r2
   1fc3e:	005b      	lsls	r3, r3, #1
   1fc40:	189b      	adds	r3, r3, r2
   1fc42:	009b      	lsls	r3, r3, #2
   1fc44:	001a      	movs	r2, r3
   1fc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1fc48:	189b      	adds	r3, r3, r2
   1fc4a:	2218      	movs	r2, #24
   1fc4c:	18b8      	adds	r0, r7, r2
   1fc4e:	6819      	ldr	r1, [r3, #0]
   1fc50:	685a      	ldr	r2, [r3, #4]
   1fc52:	689b      	ldr	r3, [r3, #8]
   1fc54:	4c14      	ldr	r4, [pc, #80]	; (1fca8 <MQTTSerialize_subscribe+0x14c>)
   1fc56:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   1fc58:	6a3b      	ldr	r3, [r7, #32]
   1fc5a:	009b      	lsls	r3, r3, #2
   1fc5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1fc5e:	18d3      	adds	r3, r2, r3
   1fc60:	681b      	ldr	r3, [r3, #0]
   1fc62:	b2da      	uxtb	r2, r3
   1fc64:	2318      	movs	r3, #24
   1fc66:	18fb      	adds	r3, r7, r3
   1fc68:	0011      	movs	r1, r2
   1fc6a:	0018      	movs	r0, r3
   1fc6c:	4b0b      	ldr	r3, [pc, #44]	; (1fc9c <MQTTSerialize_subscribe+0x140>)
   1fc6e:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   1fc70:	6a3b      	ldr	r3, [r7, #32]
   1fc72:	3301      	adds	r3, #1
   1fc74:	623b      	str	r3, [r7, #32]
   1fc76:	6a3a      	ldr	r2, [r7, #32]
   1fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1fc7a:	429a      	cmp	r2, r3
   1fc7c:	dbdd      	blt.n	1fc3a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   1fc7e:	69bb      	ldr	r3, [r7, #24]
   1fc80:	001a      	movs	r2, r3
   1fc82:	68fb      	ldr	r3, [r7, #12]
   1fc84:	1ad3      	subs	r3, r2, r3
   1fc86:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1fc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1fc8a:	0018      	movs	r0, r3
   1fc8c:	46bd      	mov	sp, r7
   1fc8e:	b00b      	add	sp, #44	; 0x2c
   1fc90:	bd90      	pop	{r4, r7, pc}
   1fc92:	46c0      	nop			; (mov r8, r8)
   1fc94:	0001fb09 	.word	0x0001fb09
   1fc98:	0001f4cd 	.word	0x0001f4cd
   1fc9c:	0001f5ef 	.word	0x0001f5ef
   1fca0:	0001f3d5 	.word	0x0001f3d5
   1fca4:	0001f619 	.word	0x0001f619
   1fca8:	0001f6c1 	.word	0x0001f6c1

0001fcac <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   1fcac:	b590      	push	{r4, r7, lr}
   1fcae:	b08b      	sub	sp, #44	; 0x2c
   1fcb0:	af00      	add	r7, sp, #0
   1fcb2:	60f8      	str	r0, [r7, #12]
   1fcb4:	60b9      	str	r1, [r7, #8]
   1fcb6:	607a      	str	r2, [r7, #4]
   1fcb8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1fcba:	2300      	movs	r3, #0
   1fcbc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1fcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1fcc0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1fcc2:	2300      	movs	r3, #0
   1fcc4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1fcc6:	2300      	movs	r3, #0
   1fcc8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1fcca:	2318      	movs	r3, #24
   1fccc:	18fb      	adds	r3, r7, r3
   1fcce:	0018      	movs	r0, r3
   1fcd0:	4b2c      	ldr	r3, [pc, #176]	; (1fd84 <MQTTDeserialize_suback+0xd8>)
   1fcd2:	4798      	blx	r3
   1fcd4:	0003      	movs	r3, r0
   1fcd6:	001a      	movs	r2, r3
   1fcd8:	231c      	movs	r3, #28
   1fcda:	18fb      	adds	r3, r7, r3
   1fcdc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   1fcde:	231c      	movs	r3, #28
   1fce0:	18fb      	adds	r3, r7, r3
   1fce2:	781b      	ldrb	r3, [r3, #0]
   1fce4:	220f      	movs	r2, #15
   1fce6:	4393      	bics	r3, r2
   1fce8:	b2db      	uxtb	r3, r3
   1fcea:	2b90      	cmp	r3, #144	; 0x90
   1fcec:	d142      	bne.n	1fd74 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1fcee:	69bb      	ldr	r3, [r7, #24]
   1fcf0:	2214      	movs	r2, #20
   1fcf2:	18ba      	adds	r2, r7, r2
   1fcf4:	0011      	movs	r1, r2
   1fcf6:	0018      	movs	r0, r3
   1fcf8:	4b23      	ldr	r3, [pc, #140]	; (1fd88 <MQTTDeserialize_suback+0xdc>)
   1fcfa:	4798      	blx	r3
   1fcfc:	0003      	movs	r3, r0
   1fcfe:	627b      	str	r3, [r7, #36]	; 0x24
   1fd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fd02:	69bb      	ldr	r3, [r7, #24]
   1fd04:	189b      	adds	r3, r3, r2
   1fd06:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1fd08:	69bb      	ldr	r3, [r7, #24]
   1fd0a:	697a      	ldr	r2, [r7, #20]
   1fd0c:	189b      	adds	r3, r3, r2
   1fd0e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1fd10:	6a3b      	ldr	r3, [r7, #32]
   1fd12:	69ba      	ldr	r2, [r7, #24]
   1fd14:	1a9b      	subs	r3, r3, r2
   1fd16:	2b01      	cmp	r3, #1
   1fd18:	dd2e      	ble.n	1fd78 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   1fd1a:	2318      	movs	r3, #24
   1fd1c:	18fb      	adds	r3, r7, r3
   1fd1e:	0018      	movs	r0, r3
   1fd20:	4b1a      	ldr	r3, [pc, #104]	; (1fd8c <MQTTDeserialize_suback+0xe0>)
   1fd22:	4798      	blx	r3
   1fd24:	0003      	movs	r3, r0
   1fd26:	b29a      	uxth	r2, r3
   1fd28:	68fb      	ldr	r3, [r7, #12]
   1fd2a:	801a      	strh	r2, [r3, #0]

	*count = 0;
   1fd2c:	687b      	ldr	r3, [r7, #4]
   1fd2e:	2200      	movs	r2, #0
   1fd30:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   1fd32:	e018      	b.n	1fd66 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   1fd34:	687b      	ldr	r3, [r7, #4]
   1fd36:	681a      	ldr	r2, [r3, #0]
   1fd38:	68bb      	ldr	r3, [r7, #8]
   1fd3a:	429a      	cmp	r2, r3
   1fd3c:	dd03      	ble.n	1fd46 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   1fd3e:	2301      	movs	r3, #1
   1fd40:	425b      	negs	r3, r3
   1fd42:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   1fd44:	e019      	b.n	1fd7a <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   1fd46:	687b      	ldr	r3, [r7, #4]
   1fd48:	681a      	ldr	r2, [r3, #0]
   1fd4a:	1c51      	adds	r1, r2, #1
   1fd4c:	687b      	ldr	r3, [r7, #4]
   1fd4e:	6019      	str	r1, [r3, #0]
   1fd50:	0013      	movs	r3, r2
   1fd52:	009b      	lsls	r3, r3, #2
   1fd54:	683a      	ldr	r2, [r7, #0]
   1fd56:	18d4      	adds	r4, r2, r3
   1fd58:	2318      	movs	r3, #24
   1fd5a:	18fb      	adds	r3, r7, r3
   1fd5c:	0018      	movs	r0, r3
   1fd5e:	4b09      	ldr	r3, [pc, #36]	; (1fd84 <MQTTDeserialize_suback+0xd8>)
   1fd60:	4798      	blx	r3
   1fd62:	0003      	movs	r3, r0
   1fd64:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   1fd66:	69ba      	ldr	r2, [r7, #24]
   1fd68:	6a3b      	ldr	r3, [r7, #32]
   1fd6a:	429a      	cmp	r2, r3
   1fd6c:	d3e2      	bcc.n	1fd34 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   1fd6e:	2301      	movs	r3, #1
   1fd70:	627b      	str	r3, [r7, #36]	; 0x24
   1fd72:	e002      	b.n	1fd7a <MQTTDeserialize_suback+0xce>
		goto exit;
   1fd74:	46c0      	nop			; (mov r8, r8)
   1fd76:	e000      	b.n	1fd7a <MQTTDeserialize_suback+0xce>
		goto exit;
   1fd78:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1fd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1fd7c:	0018      	movs	r0, r3
   1fd7e:	46bd      	mov	sp, r7
   1fd80:	b00b      	add	sp, #44	; 0x2c
   1fd82:	bd90      	pop	{r4, r7, pc}
   1fd84:	0001f5c3 	.word	0x0001f5c3
   1fd88:	0001f55d 	.word	0x0001f55d
   1fd8c:	0001f591 	.word	0x0001f591

0001fd90 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   1fd90:	b580      	push	{r7, lr}
   1fd92:	b082      	sub	sp, #8
   1fd94:	af00      	add	r7, sp, #0
   1fd96:	6078      	str	r0, [r7, #4]
	config->port = 80;
   1fd98:	687b      	ldr	r3, [r7, #4]
   1fd9a:	2250      	movs	r2, #80	; 0x50
   1fd9c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1fd9e:	687b      	ldr	r3, [r7, #4]
   1fda0:	2200      	movs	r2, #0
   1fda2:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   1fda4:	687b      	ldr	r3, [r7, #4]
   1fda6:	4a0b      	ldr	r2, [pc, #44]	; (1fdd4 <http_client_get_config_defaults+0x44>)
   1fda8:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   1fdaa:	687b      	ldr	r3, [r7, #4]
   1fdac:	2200      	movs	r2, #0
   1fdae:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   1fdb0:	687b      	ldr	r3, [r7, #4]
   1fdb2:	2200      	movs	r2, #0
   1fdb4:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   1fdb6:	687b      	ldr	r3, [r7, #4]
   1fdb8:	2280      	movs	r2, #128	; 0x80
   1fdba:	0052      	lsls	r2, r2, #1
   1fdbc:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1fdbe:	687b      	ldr	r3, [r7, #4]
   1fdc0:	2252      	movs	r2, #82	; 0x52
   1fdc2:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   1fdc4:	687b      	ldr	r3, [r7, #4]
   1fdc6:	4a04      	ldr	r2, [pc, #16]	; (1fdd8 <http_client_get_config_defaults+0x48>)
   1fdc8:	619a      	str	r2, [r3, #24]
}
   1fdca:	46c0      	nop			; (mov r8, r8)
   1fdcc:	46bd      	mov	sp, r7
   1fdce:	b002      	add	sp, #8
   1fdd0:	bd80      	pop	{r7, pc}
   1fdd2:	46c0      	nop			; (mov r8, r8)
   1fdd4:	00004e20 	.word	0x00004e20
   1fdd8:	00029aac 	.word	0x00029aac

0001fddc <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   1fddc:	b590      	push	{r4, r7, lr}
   1fdde:	b083      	sub	sp, #12
   1fde0:	af00      	add	r7, sp, #0
   1fde2:	6078      	str	r0, [r7, #4]
   1fde4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   1fde6:	687b      	ldr	r3, [r7, #4]
   1fde8:	2b00      	cmp	r3, #0
   1fdea:	d002      	beq.n	1fdf2 <http_client_init+0x16>
   1fdec:	683b      	ldr	r3, [r7, #0]
   1fdee:	2b00      	cmp	r3, #0
   1fdf0:	d102      	bne.n	1fdf8 <http_client_init+0x1c>
		return -EINVAL;
   1fdf2:	2316      	movs	r3, #22
   1fdf4:	425b      	negs	r3, r3
   1fdf6:	e058      	b.n	1feaa <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   1fdf8:	683b      	ldr	r3, [r7, #0]
   1fdfa:	691b      	ldr	r3, [r3, #16]
   1fdfc:	2b00      	cmp	r3, #0
   1fdfe:	d102      	bne.n	1fe06 <http_client_init+0x2a>
		return -EINVAL;
   1fe00:	2316      	movs	r3, #22
   1fe02:	425b      	negs	r3, r3
   1fe04:	e051      	b.n	1feaa <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   1fe06:	683b      	ldr	r3, [r7, #0]
   1fe08:	685b      	ldr	r3, [r3, #4]
   1fe0a:	2b00      	cmp	r3, #0
   1fe0c:	d102      	bne.n	1fe14 <http_client_init+0x38>
		return -EINVAL;
   1fe0e:	2316      	movs	r3, #22
   1fe10:	425b      	negs	r3, r3
   1fe12:	e04a      	b.n	1feaa <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1fe14:	683b      	ldr	r3, [r7, #0]
   1fe16:	695b      	ldr	r3, [r3, #20]
   1fe18:	2b51      	cmp	r3, #81	; 0x51
   1fe1a:	d802      	bhi.n	1fe22 <http_client_init+0x46>
		return -EINVAL;
   1fe1c:	2316      	movs	r3, #22
   1fe1e:	425b      	negs	r3, r3
   1fe20:	e043      	b.n	1feaa <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   1fe22:	687b      	ldr	r3, [r7, #4]
   1fe24:	22e8      	movs	r2, #232	; 0xe8
   1fe26:	2100      	movs	r1, #0
   1fe28:	0018      	movs	r0, r3
   1fe2a:	4b22      	ldr	r3, [pc, #136]	; (1feb4 <http_client_init+0xd8>)
   1fe2c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   1fe2e:	687b      	ldr	r3, [r7, #4]
   1fe30:	3350      	adds	r3, #80	; 0x50
   1fe32:	6839      	ldr	r1, [r7, #0]
   1fe34:	221c      	movs	r2, #28
   1fe36:	0018      	movs	r0, r3
   1fe38:	4b1f      	ldr	r3, [pc, #124]	; (1feb8 <http_client_init+0xdc>)
   1fe3a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   1fe3c:	687b      	ldr	r3, [r7, #4]
   1fe3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1fe40:	2b00      	cmp	r3, #0
   1fe42:	d115      	bne.n	1fe70 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   1fe44:	683b      	ldr	r3, [r7, #0]
   1fe46:	691b      	ldr	r3, [r3, #16]
   1fe48:	0018      	movs	r0, r3
   1fe4a:	4b1c      	ldr	r3, [pc, #112]	; (1febc <http_client_init+0xe0>)
   1fe4c:	4798      	blx	r3
   1fe4e:	0003      	movs	r3, r0
   1fe50:	001a      	movs	r2, r3
   1fe52:	687b      	ldr	r3, [r7, #4]
   1fe54:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1fe56:	687b      	ldr	r3, [r7, #4]
   1fe58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1fe5a:	2b00      	cmp	r3, #0
   1fe5c:	d102      	bne.n	1fe64 <http_client_init+0x88>
			return -ENOMEM;
   1fe5e:	230c      	movs	r3, #12
   1fe60:	425b      	negs	r3, r3
   1fe62:	e022      	b.n	1feaa <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   1fe64:	687b      	ldr	r3, [r7, #4]
   1fe66:	2241      	movs	r2, #65	; 0x41
   1fe68:	5c99      	ldrb	r1, [r3, r2]
   1fe6a:	2004      	movs	r0, #4
   1fe6c:	4301      	orrs	r1, r0
   1fe6e:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   1fe70:	683b      	ldr	r3, [r7, #0]
   1fe72:	891b      	ldrh	r3, [r3, #8]
   1fe74:	2b00      	cmp	r3, #0
   1fe76:	d010      	beq.n	1fe9a <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1fe78:	683b      	ldr	r3, [r7, #0]
   1fe7a:	6858      	ldr	r0, [r3, #4]
   1fe7c:	687a      	ldr	r2, [r7, #4]
   1fe7e:	4910      	ldr	r1, [pc, #64]	; (1fec0 <http_client_init+0xe4>)
   1fe80:	2300      	movs	r3, #0
   1fe82:	4c10      	ldr	r4, [pc, #64]	; (1fec4 <http_client_init+0xe8>)
   1fe84:	47a0      	blx	r4
   1fe86:	0002      	movs	r2, r0
   1fe88:	687b      	ldr	r3, [r7, #4]
   1fe8a:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   1fe8c:	687b      	ldr	r3, [r7, #4]
   1fe8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fe90:	2b00      	cmp	r3, #0
   1fe92:	da02      	bge.n	1fe9a <http_client_init+0xbe>
			return -ENOSPC;
   1fe94:	231c      	movs	r3, #28
   1fe96:	425b      	negs	r3, r3
   1fe98:	e007      	b.n	1feaa <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   1fe9a:	687b      	ldr	r3, [r7, #4]
   1fe9c:	2200      	movs	r2, #0
   1fe9e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1fea0:	687b      	ldr	r3, [r7, #4]
   1fea2:	22d8      	movs	r2, #216	; 0xd8
   1fea4:	2100      	movs	r1, #0
   1fea6:	5099      	str	r1, [r3, r2]

	return 0;
   1fea8:	2300      	movs	r3, #0
}
   1feaa:	0018      	movs	r0, r3
   1feac:	46bd      	mov	sp, r7
   1feae:	b003      	add	sp, #12
   1feb0:	bd90      	pop	{r4, r7, pc}
   1feb2:	46c0      	nop			; (mov r8, r8)
   1feb4:	000247b7 	.word	0x000247b7
   1feb8:	00024781 	.word	0x00024781
   1febc:	00024759 	.word	0x00024759
   1fec0:	0002018d 	.word	0x0002018d
   1fec4:	00021831 	.word	0x00021831

0001fec8 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   1fec8:	b580      	push	{r7, lr}
   1feca:	b082      	sub	sp, #8
   1fecc:	af00      	add	r7, sp, #0
   1fece:	6078      	str	r0, [r7, #4]
   1fed0:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   1fed2:	687b      	ldr	r3, [r7, #4]
   1fed4:	2b00      	cmp	r3, #0
   1fed6:	d102      	bne.n	1fede <http_client_register_callback+0x16>
		return -EINVAL;
   1fed8:	2316      	movs	r3, #22
   1feda:	425b      	negs	r3, r3
   1fedc:	e003      	b.n	1fee6 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   1fede:	687b      	ldr	r3, [r7, #4]
   1fee0:	683a      	ldr	r2, [r7, #0]
   1fee2:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   1fee4:	2300      	movs	r3, #0
}
   1fee6:	0018      	movs	r0, r3
   1fee8:	46bd      	mov	sp, r7
   1feea:	b002      	add	sp, #8
   1feec:	bd80      	pop	{r7, pc}
	...

0001fef0 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   1fef0:	b580      	push	{r7, lr}
   1fef2:	b082      	sub	sp, #8
   1fef4:	af00      	add	r7, sp, #0
   1fef6:	6078      	str	r0, [r7, #4]
	switch (err) {
   1fef8:	687b      	ldr	r3, [r7, #4]
   1fefa:	330e      	adds	r3, #14
   1fefc:	2b0e      	cmp	r3, #14
   1fefe:	d825      	bhi.n	1ff4c <_hwerr_to_stderr+0x5c>
   1ff00:	009a      	lsls	r2, r3, #2
   1ff02:	4b18      	ldr	r3, [pc, #96]	; (1ff64 <_hwerr_to_stderr+0x74>)
   1ff04:	18d3      	adds	r3, r2, r3
   1ff06:	681b      	ldr	r3, [r3, #0]
   1ff08:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   1ff0a:	2305      	movs	r3, #5
   1ff0c:	425b      	negs	r3, r3
   1ff0e:	e024      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   1ff10:	2302      	movs	r3, #2
   1ff12:	425b      	negs	r3, r3
   1ff14:	e021      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   1ff16:	2370      	movs	r3, #112	; 0x70
   1ff18:	425b      	negs	r3, r3
   1ff1a:	e01e      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   1ff1c:	230c      	movs	r3, #12
   1ff1e:	425b      	negs	r3, r3
   1ff20:	e01b      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   1ff22:	2316      	movs	r3, #22
   1ff24:	425b      	negs	r3, r3
   1ff26:	e018      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   1ff28:	230c      	movs	r3, #12
   1ff2a:	425b      	negs	r3, r3
   1ff2c:	e015      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   1ff2e:	2305      	movs	r3, #5
   1ff30:	425b      	negs	r3, r3
   1ff32:	e012      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   1ff34:	2379      	movs	r3, #121	; 0x79
   1ff36:	425b      	negs	r3, r3
   1ff38:	e00f      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   1ff3a:	2368      	movs	r3, #104	; 0x68
   1ff3c:	425b      	negs	r3, r3
   1ff3e:	e00c      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   1ff40:	230b      	movs	r3, #11
   1ff42:	425b      	negs	r3, r3
   1ff44:	e009      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   1ff46:	2310      	movs	r3, #16
   1ff48:	425b      	negs	r3, r3
   1ff4a:	e006      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   1ff4c:	687b      	ldr	r3, [r7, #4]
   1ff4e:	2b00      	cmp	r3, #0
   1ff50:	da02      	bge.n	1ff58 <_hwerr_to_stderr+0x68>
				return -EIO;
   1ff52:	2305      	movs	r3, #5
   1ff54:	425b      	negs	r3, r3
   1ff56:	e000      	b.n	1ff5a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   1ff58:	2300      	movs	r3, #0
	}
}
   1ff5a:	0018      	movs	r0, r3
   1ff5c:	46bd      	mov	sp, r7
   1ff5e:	b002      	add	sp, #8
   1ff60:	bd80      	pop	{r7, pc}
   1ff62:	46c0      	nop			; (mov r8, r8)
   1ff64:	00029be8 	.word	0x00029be8

0001ff68 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1ff68:	b580      	push	{r7, lr}
   1ff6a:	b08a      	sub	sp, #40	; 0x28
   1ff6c:	af00      	add	r7, sp, #0
   1ff6e:	603a      	str	r2, [r7, #0]
   1ff70:	1dfb      	adds	r3, r7, #7
   1ff72:	1c02      	adds	r2, r0, #0
   1ff74:	701a      	strb	r2, [r3, #0]
   1ff76:	1dbb      	adds	r3, r7, #6
   1ff78:	1c0a      	adds	r2, r1, #0
   1ff7a:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   1ff7c:	1dfb      	adds	r3, r7, #7
   1ff7e:	2200      	movs	r2, #0
   1ff80:	569a      	ldrsb	r2, [r3, r2]
   1ff82:	4b4b      	ldr	r3, [pc, #300]	; (200b0 <http_client_socket_event_handler+0x148>)
   1ff84:	0092      	lsls	r2, r2, #2
   1ff86:	58d3      	ldr	r3, [r2, r3]
   1ff88:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   1ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff8c:	2b00      	cmp	r3, #0
   1ff8e:	d100      	bne.n	1ff92 <http_client_socket_event_handler+0x2a>
   1ff90:	e08a      	b.n	200a8 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   1ff92:	1dbb      	adds	r3, r7, #6
   1ff94:	781b      	ldrb	r3, [r3, #0]
   1ff96:	2b06      	cmp	r3, #6
   1ff98:	d040      	beq.n	2001c <http_client_socket_event_handler+0xb4>
   1ff9a:	2b07      	cmp	r3, #7
   1ff9c:	d060      	beq.n	20060 <http_client_socket_event_handler+0xf8>
   1ff9e:	2b05      	cmp	r3, #5
   1ffa0:	d000      	beq.n	1ffa4 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   1ffa2:	e082      	b.n	200aa <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   1ffa4:	683b      	ldr	r3, [r7, #0]
   1ffa6:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   1ffa8:	6a3b      	ldr	r3, [r7, #32]
   1ffaa:	785b      	ldrb	r3, [r3, #1]
   1ffac:	b25b      	sxtb	r3, r3
   1ffae:	001a      	movs	r2, r3
   1ffb0:	230c      	movs	r3, #12
   1ffb2:	18fb      	adds	r3, r7, r3
   1ffb4:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   1ffb6:	6a3b      	ldr	r3, [r7, #32]
   1ffb8:	785b      	ldrb	r3, [r3, #1]
   1ffba:	b25b      	sxtb	r3, r3
   1ffbc:	2b00      	cmp	r3, #0
   1ffbe:	da0c      	bge.n	1ffda <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   1ffc0:	6a3b      	ldr	r3, [r7, #32]
   1ffc2:	785b      	ldrb	r3, [r3, #1]
   1ffc4:	b25b      	sxtb	r3, r3
   1ffc6:	0018      	movs	r0, r3
   1ffc8:	4b3a      	ldr	r3, [pc, #232]	; (200b4 <http_client_socket_event_handler+0x14c>)
   1ffca:	4798      	blx	r3
   1ffcc:	0002      	movs	r2, r0
   1ffce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ffd0:	0011      	movs	r1, r2
   1ffd2:	0018      	movs	r0, r3
   1ffd4:	4b38      	ldr	r3, [pc, #224]	; (200b8 <http_client_socket_event_handler+0x150>)
   1ffd6:	4798      	blx	r3
    	break;
   1ffd8:	e067      	b.n	200aa <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   1ffda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ffdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ffde:	2b00      	cmp	r3, #0
   1ffe0:	d006      	beq.n	1fff0 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   1ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ffe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ffe6:	220c      	movs	r2, #12
   1ffe8:	18ba      	adds	r2, r7, r2
   1ffea:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1ffec:	2100      	movs	r1, #0
   1ffee:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   1fff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fff2:	2203      	movs	r2, #3
   1fff4:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   1fff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fff8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   1fffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fffc:	6c99      	ldr	r1, [r3, #72]	; 0x48
   1fffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20000:	2258      	movs	r2, #88	; 0x58
   20002:	5a9b      	ldrh	r3, [r3, r2]
   20004:	001a      	movs	r2, r3
   20006:	4b2d      	ldr	r3, [pc, #180]	; (200bc <http_client_socket_event_handler+0x154>)
   20008:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2000c:	0018      	movs	r0, r3
   2000e:	4b2c      	ldr	r3, [pc, #176]	; (200c0 <http_client_socket_event_handler+0x158>)
   20010:	4798      	blx	r3
			_http_client_request(module);
   20012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20014:	0018      	movs	r0, r3
   20016:	4b2b      	ldr	r3, [pc, #172]	; (200c4 <http_client_socket_event_handler+0x15c>)
   20018:	4798      	blx	r3
    	break;
   2001a:	e046      	b.n	200aa <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2001c:	683b      	ldr	r3, [r7, #0]
   2001e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   20020:	69fb      	ldr	r3, [r7, #28]
   20022:	2204      	movs	r2, #4
   20024:	5e9b      	ldrsh	r3, [r3, r2]
   20026:	2b00      	cmp	r3, #0
   20028:	dd09      	ble.n	2003e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2002a:	69fb      	ldr	r3, [r7, #28]
   2002c:	2204      	movs	r2, #4
   2002e:	5e9b      	ldrsh	r3, [r3, r2]
   20030:	001a      	movs	r2, r3
   20032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20034:	0011      	movs	r1, r2
   20036:	0018      	movs	r0, r3
   20038:	4b23      	ldr	r3, [pc, #140]	; (200c8 <http_client_socket_event_handler+0x160>)
   2003a:	4798      	blx	r3
   2003c:	e00b      	b.n	20056 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2003e:	69fb      	ldr	r3, [r7, #28]
   20040:	2204      	movs	r2, #4
   20042:	5e9b      	ldrsh	r3, [r3, r2]
   20044:	0018      	movs	r0, r3
   20046:	4b1b      	ldr	r3, [pc, #108]	; (200b4 <http_client_socket_event_handler+0x14c>)
   20048:	4798      	blx	r3
   2004a:	0002      	movs	r2, r0
   2004c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2004e:	0011      	movs	r1, r2
   20050:	0018      	movs	r0, r3
   20052:	4b19      	ldr	r3, [pc, #100]	; (200b8 <http_client_socket_event_handler+0x150>)
   20054:	4798      	blx	r3
		_http_client_recv_packet(module);
   20056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20058:	0018      	movs	r0, r3
   2005a:	4b19      	ldr	r3, [pc, #100]	; (200c0 <http_client_socket_event_handler+0x158>)
   2005c:	4798      	blx	r3
		break;
   2005e:	e024      	b.n	200aa <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   20060:	231a      	movs	r3, #26
   20062:	18fb      	adds	r3, r7, r3
   20064:	683a      	ldr	r2, [r7, #0]
   20066:	8812      	ldrh	r2, [r2, #0]
   20068:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2006a:	231a      	movs	r3, #26
   2006c:	18fb      	adds	r3, r7, r3
   2006e:	2200      	movs	r2, #0
   20070:	5e9b      	ldrsh	r3, [r3, r2]
   20072:	2b00      	cmp	r3, #0
   20074:	da0d      	bge.n	20092 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   20076:	231a      	movs	r3, #26
   20078:	18fb      	adds	r3, r7, r3
   2007a:	2200      	movs	r2, #0
   2007c:	5e9b      	ldrsh	r3, [r3, r2]
   2007e:	0018      	movs	r0, r3
   20080:	4b0c      	ldr	r3, [pc, #48]	; (200b4 <http_client_socket_event_handler+0x14c>)
   20082:	4798      	blx	r3
   20084:	0002      	movs	r2, r0
   20086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20088:	0011      	movs	r1, r2
   2008a:	0018      	movs	r0, r3
   2008c:	4b0a      	ldr	r3, [pc, #40]	; (200b8 <http_client_socket_event_handler+0x150>)
   2008e:	4798      	blx	r3
   20090:	e003      	b.n	2009a <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   20092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20094:	0018      	movs	r0, r3
   20096:	4b0b      	ldr	r3, [pc, #44]	; (200c4 <http_client_socket_event_handler+0x15c>)
   20098:	4798      	blx	r3
		module->sending = 0;
   2009a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2009c:	2241      	movs	r2, #65	; 0x41
   2009e:	5c99      	ldrb	r1, [r3, r2]
   200a0:	2001      	movs	r0, #1
   200a2:	4381      	bics	r1, r0
   200a4:	5499      	strb	r1, [r3, r2]
    	break;
   200a6:	e000      	b.n	200aa <http_client_socket_event_handler+0x142>
		return;
   200a8:	46c0      	nop			; (mov r8, r8)
	}

}
   200aa:	46bd      	mov	sp, r7
   200ac:	b00a      	add	sp, #40	; 0x28
   200ae:	bd80      	pop	{r7, pc}
   200b0:	2000432c 	.word	0x2000432c
   200b4:	0001fef1 	.word	0x0001fef1
   200b8:	00020565 	.word	0x00020565
   200bc:	000218c1 	.word	0x000218c1
   200c0:	00020df1 	.word	0x00020df1
   200c4:	000206b9 	.word	0x000206b9
   200c8:	00020e55 	.word	0x00020e55

000200cc <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   200cc:	b580      	push	{r7, lr}
   200ce:	b088      	sub	sp, #32
   200d0:	af00      	add	r7, sp, #0
   200d2:	6078      	str	r0, [r7, #4]
   200d4:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   200d6:	2300      	movs	r3, #0
   200d8:	61fb      	str	r3, [r7, #28]
   200da:	e048      	b.n	2016e <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   200dc:	4b27      	ldr	r3, [pc, #156]	; (2017c <http_client_socket_resolve_handler+0xb0>)
   200de:	69fa      	ldr	r2, [r7, #28]
   200e0:	0092      	lsls	r2, r2, #2
   200e2:	58d3      	ldr	r3, [r2, r3]
   200e4:	2b00      	cmp	r3, #0
   200e6:	d03f      	beq.n	20168 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   200e8:	4b24      	ldr	r3, [pc, #144]	; (2017c <http_client_socket_resolve_handler+0xb0>)
   200ea:	69fa      	ldr	r2, [r7, #28]
   200ec:	0092      	lsls	r2, r2, #2
   200ee:	58d3      	ldr	r3, [r2, r3]
   200f0:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   200f2:	69bb      	ldr	r3, [r7, #24]
   200f4:	1c5a      	adds	r2, r3, #1
   200f6:	687b      	ldr	r3, [r7, #4]
   200f8:	0011      	movs	r1, r2
   200fa:	0018      	movs	r0, r3
   200fc:	4b20      	ldr	r3, [pc, #128]	; (20180 <http_client_socket_resolve_handler+0xb4>)
   200fe:	4798      	blx	r3
   20100:	1e03      	subs	r3, r0, #0
   20102:	d131      	bne.n	20168 <http_client_socket_resolve_handler+0x9c>
   20104:	69bb      	ldr	r3, [r7, #24]
   20106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   20108:	2b01      	cmp	r3, #1
   2010a:	d12d      	bne.n	20168 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   2010c:	683b      	ldr	r3, [r7, #0]
   2010e:	2b00      	cmp	r3, #0
   20110:	d107      	bne.n	20122 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   20112:	2376      	movs	r3, #118	; 0x76
   20114:	425a      	negs	r2, r3
   20116:	69bb      	ldr	r3, [r7, #24]
   20118:	0011      	movs	r1, r2
   2011a:	0018      	movs	r0, r3
   2011c:	4b19      	ldr	r3, [pc, #100]	; (20184 <http_client_socket_resolve_handler+0xb8>)
   2011e:	4798      	blx	r3
					return;
   20120:	e028      	b.n	20174 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   20122:	2308      	movs	r3, #8
   20124:	18fb      	adds	r3, r7, r3
   20126:	2202      	movs	r2, #2
   20128:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2012a:	69bb      	ldr	r3, [r7, #24]
   2012c:	2250      	movs	r2, #80	; 0x50
   2012e:	5a9b      	ldrh	r3, [r3, r2]
   20130:	021b      	lsls	r3, r3, #8
   20132:	b21a      	sxth	r2, r3
   20134:	69bb      	ldr	r3, [r7, #24]
   20136:	2150      	movs	r1, #80	; 0x50
   20138:	5a5b      	ldrh	r3, [r3, r1]
   2013a:	0a1b      	lsrs	r3, r3, #8
   2013c:	b29b      	uxth	r3, r3
   2013e:	b21b      	sxth	r3, r3
   20140:	4313      	orrs	r3, r2
   20142:	b21b      	sxth	r3, r3
   20144:	b29a      	uxth	r2, r3
   20146:	2308      	movs	r3, #8
   20148:	18fb      	adds	r3, r7, r3
   2014a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   2014c:	2308      	movs	r3, #8
   2014e:	18fb      	adds	r3, r7, r3
   20150:	683a      	ldr	r2, [r7, #0]
   20152:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   20154:	69bb      	ldr	r3, [r7, #24]
   20156:	781b      	ldrb	r3, [r3, #0]
   20158:	b25b      	sxtb	r3, r3
   2015a:	2208      	movs	r2, #8
   2015c:	18b9      	adds	r1, r7, r2
   2015e:	2210      	movs	r2, #16
   20160:	0018      	movs	r0, r3
   20162:	4b09      	ldr	r3, [pc, #36]	; (20188 <http_client_socket_resolve_handler+0xbc>)
   20164:	4798      	blx	r3
				return;
   20166:	e005      	b.n	20174 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   20168:	69fb      	ldr	r3, [r7, #28]
   2016a:	3301      	adds	r3, #1
   2016c:	61fb      	str	r3, [r7, #28]
   2016e:	69fb      	ldr	r3, [r7, #28]
   20170:	2b06      	cmp	r3, #6
   20172:	ddb3      	ble.n	200dc <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   20174:	46bd      	mov	sp, r7
   20176:	b008      	add	sp, #32
   20178:	bd80      	pop	{r7, pc}
   2017a:	46c0      	nop			; (mov r8, r8)
   2017c:	2000432c 	.word	0x2000432c
   20180:	00024b0f 	.word	0x00024b0f
   20184:	00020565 	.word	0x00020565
   20188:	00014a89 	.word	0x00014a89

0002018c <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   2018c:	b580      	push	{r7, lr}
   2018e:	b086      	sub	sp, #24
   20190:	af00      	add	r7, sp, #0
   20192:	60f8      	str	r0, [r7, #12]
   20194:	60b9      	str	r1, [r7, #8]
   20196:	607a      	str	r2, [r7, #4]
   20198:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   2019a:	687b      	ldr	r3, [r7, #4]
   2019c:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   2019e:	697b      	ldr	r3, [r7, #20]
   201a0:	2b00      	cmp	r3, #0
   201a2:	d007      	beq.n	201b4 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   201a4:	233e      	movs	r3, #62	; 0x3e
   201a6:	425a      	negs	r2, r3
   201a8:	697b      	ldr	r3, [r7, #20]
   201aa:	0011      	movs	r1, r2
   201ac:	0018      	movs	r0, r3
   201ae:	4b03      	ldr	r3, [pc, #12]	; (201bc <http_client_timer_callback+0x30>)
   201b0:	4798      	blx	r3
   201b2:	e000      	b.n	201b6 <http_client_timer_callback+0x2a>
		return;
   201b4:	46c0      	nop			; (mov r8, r8)
}
   201b6:	46bd      	mov	sp, r7
   201b8:	b006      	add	sp, #24
   201ba:	bd80      	pop	{r7, pc}
   201bc:	00020565 	.word	0x00020565

000201c0 <_is_ip>:

static int _is_ip(const char *host)
{
   201c0:	b580      	push	{r7, lr}
   201c2:	b084      	sub	sp, #16
   201c4:	af00      	add	r7, sp, #0
   201c6:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   201c8:	2300      	movs	r3, #0
   201ca:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   201cc:	e03a      	b.n	20244 <_is_ip+0x84>
		ch = *host++;
   201ce:	687b      	ldr	r3, [r7, #4]
   201d0:	1c5a      	adds	r2, r3, #1
   201d2:	607a      	str	r2, [r7, #4]
   201d4:	220b      	movs	r2, #11
   201d6:	18ba      	adds	r2, r7, r2
   201d8:	781b      	ldrb	r3, [r3, #0]
   201da:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   201dc:	230b      	movs	r3, #11
   201de:	18fb      	adds	r3, r7, r3
   201e0:	781b      	ldrb	r3, [r3, #0]
   201e2:	2b60      	cmp	r3, #96	; 0x60
   201e4:	d904      	bls.n	201f0 <_is_ip+0x30>
   201e6:	230b      	movs	r3, #11
   201e8:	18fb      	adds	r3, r7, r3
   201ea:	781b      	ldrb	r3, [r3, #0]
   201ec:	2b66      	cmp	r3, #102	; 0x66
   201ee:	d913      	bls.n	20218 <_is_ip+0x58>
   201f0:	230b      	movs	r3, #11
   201f2:	18fb      	adds	r3, r7, r3
   201f4:	781b      	ldrb	r3, [r3, #0]
   201f6:	2b40      	cmp	r3, #64	; 0x40
   201f8:	d904      	bls.n	20204 <_is_ip+0x44>
   201fa:	230b      	movs	r3, #11
   201fc:	18fb      	adds	r3, r7, r3
   201fe:	781b      	ldrb	r3, [r3, #0]
   20200:	2b46      	cmp	r3, #70	; 0x46
   20202:	d909      	bls.n	20218 <_is_ip+0x58>
   20204:	230b      	movs	r3, #11
   20206:	18fb      	adds	r3, r7, r3
   20208:	781b      	ldrb	r3, [r3, #0]
   2020a:	2b3a      	cmp	r3, #58	; 0x3a
   2020c:	d004      	beq.n	20218 <_is_ip+0x58>
   2020e:	230b      	movs	r3, #11
   20210:	18fb      	adds	r3, r7, r3
   20212:	781b      	ldrb	r3, [r3, #0]
   20214:	2b2f      	cmp	r3, #47	; 0x2f
   20216:	d102      	bne.n	2021e <_is_ip+0x5e>
			isv6 = 1;
   20218:	2301      	movs	r3, #1
   2021a:	60fb      	str	r3, [r7, #12]
   2021c:	e012      	b.n	20244 <_is_ip+0x84>
		} else if (ch == '.') {
   2021e:	230b      	movs	r3, #11
   20220:	18fb      	adds	r3, r7, r3
   20222:	781b      	ldrb	r3, [r3, #0]
   20224:	2b2e      	cmp	r3, #46	; 0x2e
   20226:	d104      	bne.n	20232 <_is_ip+0x72>
			if (isv6) {
   20228:	68fb      	ldr	r3, [r7, #12]
   2022a:	2b00      	cmp	r3, #0
   2022c:	d00a      	beq.n	20244 <_is_ip+0x84>
				return 0;
   2022e:	2300      	movs	r3, #0
   20230:	e00d      	b.n	2024e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   20232:	230b      	movs	r3, #11
   20234:	18fb      	adds	r3, r7, r3
   20236:	781b      	ldrb	r3, [r3, #0]
   20238:	2230      	movs	r2, #48	; 0x30
   2023a:	4013      	ands	r3, r2
   2023c:	2b30      	cmp	r3, #48	; 0x30
   2023e:	d001      	beq.n	20244 <_is_ip+0x84>
			return 0;
   20240:	2300      	movs	r3, #0
   20242:	e004      	b.n	2024e <_is_ip+0x8e>
	while (*host != '\0') {
   20244:	687b      	ldr	r3, [r7, #4]
   20246:	781b      	ldrb	r3, [r3, #0]
   20248:	2b00      	cmp	r3, #0
   2024a:	d1c0      	bne.n	201ce <_is_ip+0xe>
		}
	}
	return 1;
   2024c:	2301      	movs	r3, #1
}
   2024e:	0018      	movs	r0, r3
   20250:	46bd      	mov	sp, r7
   20252:	b004      	add	sp, #16
   20254:	bd80      	pop	{r7, pc}
	...

00020258 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   20258:	b5b0      	push	{r4, r5, r7, lr}
   2025a:	b08e      	sub	sp, #56	; 0x38
   2025c:	af00      	add	r7, sp, #0
   2025e:	60f8      	str	r0, [r7, #12]
   20260:	60b9      	str	r1, [r7, #8]
   20262:	603b      	str	r3, [r7, #0]
   20264:	1dfb      	adds	r3, r7, #7
   20266:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   20268:	2337      	movs	r3, #55	; 0x37
   2026a:	18fb      	adds	r3, r7, r3
   2026c:	2200      	movs	r2, #0
   2026e:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   20270:	2300      	movs	r3, #0
   20272:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   20274:	2300      	movs	r3, #0
   20276:	633b      	str	r3, [r7, #48]	; 0x30
   20278:	2300      	movs	r3, #0
   2027a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2027c:	2300      	movs	r3, #0
   2027e:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   20280:	68fb      	ldr	r3, [r7, #12]
   20282:	2b00      	cmp	r3, #0
   20284:	d102      	bne.n	2028c <http_client_send_request+0x34>
		return -EINVAL;
   20286:	2316      	movs	r3, #22
   20288:	425b      	negs	r3, r3
   2028a:	e145      	b.n	20518 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   2028c:	68fb      	ldr	r3, [r7, #12]
   2028e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   20290:	2b02      	cmp	r3, #2
   20292:	d902      	bls.n	2029a <http_client_send_request+0x42>
		return -EBUSY;
   20294:	2310      	movs	r3, #16
   20296:	425b      	negs	r3, r3
   20298:	e13e      	b.n	20518 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   2029a:	49a1      	ldr	r1, [pc, #644]	; (20520 <http_client_send_request+0x2c8>)
   2029c:	68bb      	ldr	r3, [r7, #8]
   2029e:	2207      	movs	r2, #7
   202a0:	0018      	movs	r0, r3
   202a2:	4ba0      	ldr	r3, [pc, #640]	; (20524 <http_client_send_request+0x2cc>)
   202a4:	4798      	blx	r3
   202a6:	1e03      	subs	r3, r0, #0
   202a8:	d102      	bne.n	202b0 <http_client_send_request+0x58>
		i = 7;
   202aa:	2307      	movs	r3, #7
   202ac:	633b      	str	r3, [r7, #48]	; 0x30
   202ae:	e009      	b.n	202c4 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   202b0:	499d      	ldr	r1, [pc, #628]	; (20528 <http_client_send_request+0x2d0>)
   202b2:	68bb      	ldr	r3, [r7, #8]
   202b4:	2208      	movs	r2, #8
   202b6:	0018      	movs	r0, r3
   202b8:	4b9a      	ldr	r3, [pc, #616]	; (20524 <http_client_send_request+0x2cc>)
   202ba:	4798      	blx	r3
   202bc:	1e03      	subs	r3, r0, #0
   202be:	d101      	bne.n	202c4 <http_client_send_request+0x6c>
		i = 8;
   202c0:	2308      	movs	r3, #8
   202c2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   202c4:	68fb      	ldr	r3, [r7, #12]
   202c6:	1c5c      	adds	r4, r3, #1
   202c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   202ca:	68ba      	ldr	r2, [r7, #8]
   202cc:	18d5      	adds	r5, r2, r3
   202ce:	68fb      	ldr	r3, [r7, #12]
   202d0:	3301      	adds	r3, #1
   202d2:	0018      	movs	r0, r3
   202d4:	4b95      	ldr	r3, [pc, #596]	; (2052c <http_client_send_request+0x2d4>)
   202d6:	4798      	blx	r3
   202d8:	0003      	movs	r3, r0
   202da:	001a      	movs	r2, r3
   202dc:	0029      	movs	r1, r5
   202de:	0020      	movs	r0, r4
   202e0:	4b90      	ldr	r3, [pc, #576]	; (20524 <http_client_send_request+0x2cc>)
   202e2:	4798      	blx	r3
   202e4:	0003      	movs	r3, r0
   202e6:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   202e8:	e00d      	b.n	20306 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   202ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   202ec:	1c5a      	adds	r2, r3, #1
   202ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   202f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   202f2:	68b9      	ldr	r1, [r7, #8]
   202f4:	188a      	adds	r2, r1, r2
   202f6:	7811      	ldrb	r1, [r2, #0]
   202f8:	68fa      	ldr	r2, [r7, #12]
   202fa:	18d3      	adds	r3, r2, r3
   202fc:	1c0a      	adds	r2, r1, #0
   202fe:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   20300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20302:	3301      	adds	r3, #1
   20304:	633b      	str	r3, [r7, #48]	; 0x30
   20306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20308:	68ba      	ldr	r2, [r7, #8]
   2030a:	18d3      	adds	r3, r2, r3
   2030c:	781b      	ldrb	r3, [r3, #0]
   2030e:	2b00      	cmp	r3, #0
   20310:	d005      	beq.n	2031e <http_client_send_request+0xc6>
   20312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20314:	68ba      	ldr	r2, [r7, #8]
   20316:	18d3      	adds	r3, r2, r3
   20318:	781b      	ldrb	r3, [r3, #0]
   2031a:	2b2f      	cmp	r3, #47	; 0x2f
   2031c:	d1e5      	bne.n	202ea <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   2031e:	68fa      	ldr	r2, [r7, #12]
   20320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20322:	18d3      	adds	r3, r2, r3
   20324:	3301      	adds	r3, #1
   20326:	2200      	movs	r2, #0
   20328:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   2032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2032c:	68ba      	ldr	r2, [r7, #8]
   2032e:	18d3      	adds	r3, r2, r3
   20330:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   20332:	68fb      	ldr	r3, [r7, #12]
   20334:	3301      	adds	r3, #1
   20336:	781b      	ldrb	r3, [r3, #0]
   20338:	2b00      	cmp	r3, #0
   2033a:	d102      	bne.n	20342 <http_client_send_request+0xea>
		return -EINVAL;
   2033c:	2316      	movs	r3, #22
   2033e:	425b      	negs	r3, r3
   20340:	e0ea      	b.n	20518 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   20342:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20344:	0018      	movs	r0, r3
   20346:	4b79      	ldr	r3, [pc, #484]	; (2052c <http_client_send_request+0x2d4>)
   20348:	4798      	blx	r3
   2034a:	0003      	movs	r3, r0
   2034c:	2b3f      	cmp	r3, #63	; 0x3f
   2034e:	d902      	bls.n	20356 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   20350:	235b      	movs	r3, #91	; 0x5b
   20352:	425b      	negs	r3, r3
   20354:	e0e0      	b.n	20518 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   20356:	68fb      	ldr	r3, [r7, #12]
   20358:	22d4      	movs	r2, #212	; 0xd4
   2035a:	589b      	ldr	r3, [r3, r2]
   2035c:	2b00      	cmp	r3, #0
   2035e:	d005      	beq.n	2036c <http_client_send_request+0x114>
		free(module->req.ext_header);
   20360:	68fb      	ldr	r3, [r7, #12]
   20362:	22d4      	movs	r2, #212	; 0xd4
   20364:	589b      	ldr	r3, [r3, r2]
   20366:	0018      	movs	r0, r3
   20368:	4b71      	ldr	r3, [pc, #452]	; (20530 <http_client_send_request+0x2d8>)
   2036a:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   2036c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2036e:	2b00      	cmp	r3, #0
   20370:	d010      	beq.n	20394 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   20372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   20374:	0018      	movs	r0, r3
   20376:	4b6f      	ldr	r3, [pc, #444]	; (20534 <http_client_send_request+0x2dc>)
   20378:	4798      	blx	r3
   2037a:	0003      	movs	r3, r0
   2037c:	0019      	movs	r1, r3
   2037e:	68fb      	ldr	r3, [r7, #12]
   20380:	22d4      	movs	r2, #212	; 0xd4
   20382:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   20384:	68fb      	ldr	r3, [r7, #12]
   20386:	22d4      	movs	r2, #212	; 0xd4
   20388:	589b      	ldr	r3, [r3, r2]
   2038a:	2b00      	cmp	r3, #0
   2038c:	d106      	bne.n	2039c <http_client_send_request+0x144>
			return -ENOMEM;
   2038e:	230c      	movs	r3, #12
   20390:	425b      	negs	r3, r3
   20392:	e0c1      	b.n	20518 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   20394:	68fb      	ldr	r3, [r7, #12]
   20396:	22d4      	movs	r2, #212	; 0xd4
   20398:	2100      	movs	r1, #0
   2039a:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   2039c:	68fb      	ldr	r3, [r7, #12]
   2039e:	2241      	movs	r2, #65	; 0x41
   203a0:	5c99      	ldrb	r1, [r3, r2]
   203a2:	2001      	movs	r0, #1
   203a4:	4381      	bics	r1, r0
   203a6:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   203a8:	68fb      	ldr	r3, [r7, #12]
   203aa:	2200      	movs	r2, #0
   203ac:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   203ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   203b0:	781b      	ldrb	r3, [r3, #0]
   203b2:	2b2f      	cmp	r3, #47	; 0x2f
   203b4:	d107      	bne.n	203c6 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   203b6:	68fb      	ldr	r3, [r7, #12]
   203b8:	3370      	adds	r3, #112	; 0x70
   203ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   203bc:	0011      	movs	r1, r2
   203be:	0018      	movs	r0, r3
   203c0:	4b5d      	ldr	r3, [pc, #372]	; (20538 <http_client_send_request+0x2e0>)
   203c2:	4798      	blx	r3
   203c4:	e00f      	b.n	203e6 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   203c6:	68fb      	ldr	r3, [r7, #12]
   203c8:	2270      	movs	r2, #112	; 0x70
   203ca:	212f      	movs	r1, #47	; 0x2f
   203cc:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   203ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   203d0:	781b      	ldrb	r3, [r3, #0]
   203d2:	2b00      	cmp	r3, #0
   203d4:	d007      	beq.n	203e6 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   203d6:	68fb      	ldr	r3, [r7, #12]
   203d8:	3370      	adds	r3, #112	; 0x70
   203da:	3301      	adds	r3, #1
   203dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   203de:	0011      	movs	r1, r2
   203e0:	0018      	movs	r0, r3
   203e2:	4b55      	ldr	r3, [pc, #340]	; (20538 <http_client_send_request+0x2e0>)
   203e4:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   203e6:	683b      	ldr	r3, [r7, #0]
   203e8:	2b00      	cmp	r3, #0
   203ea:	d007      	beq.n	203fc <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   203ec:	68fb      	ldr	r3, [r7, #12]
   203ee:	33b0      	adds	r3, #176	; 0xb0
   203f0:	6839      	ldr	r1, [r7, #0]
   203f2:	2218      	movs	r2, #24
   203f4:	0018      	movs	r0, r3
   203f6:	4b51      	ldr	r3, [pc, #324]	; (2053c <http_client_send_request+0x2e4>)
   203f8:	4798      	blx	r3
   203fa:	e006      	b.n	2040a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   203fc:	68fb      	ldr	r3, [r7, #12]
   203fe:	33b0      	adds	r3, #176	; 0xb0
   20400:	2218      	movs	r2, #24
   20402:	2100      	movs	r1, #0
   20404:	0018      	movs	r0, r3
   20406:	4b4e      	ldr	r3, [pc, #312]	; (20540 <http_client_send_request+0x2e8>)
   20408:	4798      	blx	r3
	}

	module->req.method = method;
   2040a:	68fb      	ldr	r3, [r7, #12]
   2040c:	1dfa      	adds	r2, r7, #7
   2040e:	21c8      	movs	r1, #200	; 0xc8
   20410:	7812      	ldrb	r2, [r2, #0]
   20412:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   20414:	68fb      	ldr	r3, [r7, #12]
   20416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   20418:	2b01      	cmp	r3, #1
   2041a:	d003      	beq.n	20424 <http_client_send_request+0x1cc>
   2041c:	d316      	bcc.n	2044c <http_client_send_request+0x1f4>
   2041e:	2b02      	cmp	r3, #2
   20420:	d004      	beq.n	2042c <http_client_send_request+0x1d4>
   20422:	e074      	b.n	2050e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   20424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20426:	2b00      	cmp	r3, #0
   20428:	d100      	bne.n	2042c <http_client_send_request+0x1d4>
   2042a:	e073      	b.n	20514 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   2042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2042e:	2b00      	cmp	r3, #0
   20430:	d107      	bne.n	20442 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   20432:	68fb      	ldr	r3, [r7, #12]
   20434:	2203      	movs	r2, #3
   20436:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   20438:	68fb      	ldr	r3, [r7, #12]
   2043a:	0018      	movs	r0, r3
   2043c:	4b41      	ldr	r3, [pc, #260]	; (20544 <http_client_send_request+0x2ec>)
   2043e:	4798      	blx	r3
			break;
   20440:	e069      	b.n	20516 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   20442:	68fb      	ldr	r3, [r7, #12]
   20444:	2100      	movs	r1, #0
   20446:	0018      	movs	r0, r3
   20448:	4b3f      	ldr	r3, [pc, #252]	; (20548 <http_client_send_request+0x2f0>)
   2044a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   2044c:	68fb      	ldr	r3, [r7, #12]
   2044e:	2252      	movs	r2, #82	; 0x52
   20450:	5c9b      	ldrb	r3, [r3, r2]
   20452:	2b00      	cmp	r3, #0
   20454:	d007      	beq.n	20466 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   20456:	2337      	movs	r3, #55	; 0x37
   20458:	18fb      	adds	r3, r7, r3
   2045a:	2237      	movs	r2, #55	; 0x37
   2045c:	18ba      	adds	r2, r7, r2
   2045e:	7812      	ldrb	r2, [r2, #0]
   20460:	2101      	movs	r1, #1
   20462:	430a      	orrs	r2, r1
   20464:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   20466:	2337      	movs	r3, #55	; 0x37
   20468:	18fb      	adds	r3, r7, r3
   2046a:	781b      	ldrb	r3, [r3, #0]
   2046c:	001a      	movs	r2, r3
   2046e:	2101      	movs	r1, #1
   20470:	2002      	movs	r0, #2
   20472:	4b36      	ldr	r3, [pc, #216]	; (2054c <http_client_send_request+0x2f4>)
   20474:	4798      	blx	r3
   20476:	0003      	movs	r3, r0
   20478:	001a      	movs	r2, r3
   2047a:	68fb      	ldr	r3, [r7, #12]
   2047c:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   2047e:	68fb      	ldr	r3, [r7, #12]
   20480:	781b      	ldrb	r3, [r3, #0]
   20482:	b25b      	sxtb	r3, r3
   20484:	2b00      	cmp	r3, #0
   20486:	db3f      	blt.n	20508 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   20488:	68fb      	ldr	r3, [r7, #12]
   2048a:	781b      	ldrb	r3, [r3, #0]
   2048c:	b25b      	sxtb	r3, r3
   2048e:	001a      	movs	r2, r3
   20490:	4b2f      	ldr	r3, [pc, #188]	; (20550 <http_client_send_request+0x2f8>)
   20492:	0092      	lsls	r2, r2, #2
   20494:	68f9      	ldr	r1, [r7, #12]
   20496:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   20498:	68fb      	ldr	r3, [r7, #12]
   2049a:	3301      	adds	r3, #1
   2049c:	0018      	movs	r0, r3
   2049e:	4b2d      	ldr	r3, [pc, #180]	; (20554 <http_client_send_request+0x2fc>)
   204a0:	4798      	blx	r3
   204a2:	1e03      	subs	r3, r0, #0
   204a4:	d027      	beq.n	204f6 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   204a6:	2314      	movs	r3, #20
   204a8:	18fb      	adds	r3, r7, r3
   204aa:	2202      	movs	r2, #2
   204ac:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   204ae:	68fb      	ldr	r3, [r7, #12]
   204b0:	2250      	movs	r2, #80	; 0x50
   204b2:	5a9b      	ldrh	r3, [r3, r2]
   204b4:	021b      	lsls	r3, r3, #8
   204b6:	b21a      	sxth	r2, r3
   204b8:	68fb      	ldr	r3, [r7, #12]
   204ba:	2150      	movs	r1, #80	; 0x50
   204bc:	5a5b      	ldrh	r3, [r3, r1]
   204be:	0a1b      	lsrs	r3, r3, #8
   204c0:	b29b      	uxth	r3, r3
   204c2:	b21b      	sxth	r3, r3
   204c4:	4313      	orrs	r3, r2
   204c6:	b21b      	sxth	r3, r3
   204c8:	b29a      	uxth	r2, r3
   204ca:	2314      	movs	r3, #20
   204cc:	18fb      	adds	r3, r7, r3
   204ce:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   204d0:	68fb      	ldr	r3, [r7, #12]
   204d2:	3301      	adds	r3, #1
   204d4:	0018      	movs	r0, r3
   204d6:	4b20      	ldr	r3, [pc, #128]	; (20558 <http_client_send_request+0x300>)
   204d8:	4798      	blx	r3
   204da:	0002      	movs	r2, r0
   204dc:	2314      	movs	r3, #20
   204de:	18fb      	adds	r3, r7, r3
   204e0:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   204e2:	68fb      	ldr	r3, [r7, #12]
   204e4:	781b      	ldrb	r3, [r3, #0]
   204e6:	b25b      	sxtb	r3, r3
   204e8:	2214      	movs	r2, #20
   204ea:	18b9      	adds	r1, r7, r2
   204ec:	2210      	movs	r2, #16
   204ee:	0018      	movs	r0, r3
   204f0:	4b1a      	ldr	r3, [pc, #104]	; (2055c <http_client_send_request+0x304>)
   204f2:	4798      	blx	r3
   204f4:	e004      	b.n	20500 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   204f6:	68fb      	ldr	r3, [r7, #12]
   204f8:	3301      	adds	r3, #1
   204fa:	0018      	movs	r0, r3
   204fc:	4b18      	ldr	r3, [pc, #96]	; (20560 <http_client_send_request+0x308>)
   204fe:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   20500:	68fb      	ldr	r3, [r7, #12]
   20502:	2201      	movs	r2, #1
   20504:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   20506:	e006      	b.n	20516 <http_client_send_request+0x2be>
			return -ENOSPC;
   20508:	231c      	movs	r3, #28
   2050a:	425b      	negs	r3, r3
   2050c:	e004      	b.n	20518 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   2050e:	230b      	movs	r3, #11
   20510:	425b      	negs	r3, r3
   20512:	e001      	b.n	20518 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   20514:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   20516:	2300      	movs	r3, #0
}
   20518:	0018      	movs	r0, r3
   2051a:	46bd      	mov	sp, r7
   2051c:	b00e      	add	sp, #56	; 0x38
   2051e:	bdb0      	pop	{r4, r5, r7, pc}
   20520:	00029ab8 	.word	0x00029ab8
   20524:	00024b7d 	.word	0x00024b7d
   20528:	00029ac0 	.word	0x00029ac0
   2052c:	00024b6f 	.word	0x00024b6f
   20530:	0002476d 	.word	0x0002476d
   20534:	00024b35 	.word	0x00024b35
   20538:	00024b23 	.word	0x00024b23
   2053c:	00024781 	.word	0x00024781
   20540:	000247b7 	.word	0x000247b7
   20544:	000206b9 	.word	0x000206b9
   20548:	00020565 	.word	0x00020565
   2054c:	00014875 	.word	0x00014875
   20550:	2000432c 	.word	0x2000432c
   20554:	000201c1 	.word	0x000201c1
   20558:	00014fc1 	.word	0x00014fc1
   2055c:	00014a89 	.word	0x00014a89
   20560:	000150c9 	.word	0x000150c9

00020564 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   20564:	b580      	push	{r7, lr}
   20566:	b086      	sub	sp, #24
   20568:	af00      	add	r7, sp, #0
   2056a:	6078      	str	r0, [r7, #4]
   2056c:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   2056e:	687b      	ldr	r3, [r7, #4]
   20570:	22c0      	movs	r2, #192	; 0xc0
   20572:	589b      	ldr	r3, [r3, r2]
   20574:	2b00      	cmp	r3, #0
   20576:	d007      	beq.n	20588 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   20578:	687b      	ldr	r3, [r7, #4]
   2057a:	22c0      	movs	r2, #192	; 0xc0
   2057c:	589b      	ldr	r3, [r3, r2]
   2057e:	687a      	ldr	r2, [r7, #4]
   20580:	21c4      	movs	r1, #196	; 0xc4
   20582:	5852      	ldr	r2, [r2, r1]
   20584:	0010      	movs	r0, r2
   20586:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   20588:	687b      	ldr	r3, [r7, #4]
   2058a:	33b0      	adds	r3, #176	; 0xb0
   2058c:	2218      	movs	r2, #24
   2058e:	2100      	movs	r1, #0
   20590:	0018      	movs	r0, r3
   20592:	4b24      	ldr	r3, [pc, #144]	; (20624 <_http_client_clear_conn+0xc0>)
   20594:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   20596:	687b      	ldr	r3, [r7, #4]
   20598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2059a:	2b00      	cmp	r3, #0
   2059c:	d005      	beq.n	205aa <_http_client_clear_conn+0x46>
		close(module->sock);
   2059e:	687b      	ldr	r3, [r7, #4]
   205a0:	781b      	ldrb	r3, [r3, #0]
   205a2:	b25b      	sxtb	r3, r3
   205a4:	0018      	movs	r0, r3
   205a6:	4b20      	ldr	r3, [pc, #128]	; (20628 <_http_client_clear_conn+0xc4>)
   205a8:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   205aa:	687b      	ldr	r3, [r7, #4]
   205ac:	781b      	ldrb	r3, [r3, #0]
   205ae:	b25b      	sxtb	r3, r3
   205b0:	001a      	movs	r2, r3
   205b2:	4b1e      	ldr	r3, [pc, #120]	; (2062c <_http_client_clear_conn+0xc8>)
   205b4:	0092      	lsls	r2, r2, #2
   205b6:	2100      	movs	r1, #0
   205b8:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   205ba:	687b      	ldr	r3, [r7, #4]
   205bc:	336c      	adds	r3, #108	; 0x6c
   205be:	226c      	movs	r2, #108	; 0x6c
   205c0:	2100      	movs	r1, #0
   205c2:	0018      	movs	r0, r3
   205c4:	4b17      	ldr	r3, [pc, #92]	; (20624 <_http_client_clear_conn+0xc0>)
   205c6:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   205c8:	687b      	ldr	r3, [r7, #4]
   205ca:	33d8      	adds	r3, #216	; 0xd8
   205cc:	2210      	movs	r2, #16
   205ce:	2100      	movs	r1, #0
   205d0:	0018      	movs	r0, r3
   205d2:	4b14      	ldr	r3, [pc, #80]	; (20624 <_http_client_clear_conn+0xc0>)
   205d4:	4798      	blx	r3
	module->req.state = STATE_INIT;
   205d6:	687b      	ldr	r3, [r7, #4]
   205d8:	2200      	movs	r2, #0
   205da:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   205dc:	687b      	ldr	r3, [r7, #4]
   205de:	22d8      	movs	r2, #216	; 0xd8
   205e0:	2100      	movs	r1, #0
   205e2:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   205e4:	687b      	ldr	r3, [r7, #4]
   205e6:	2241      	movs	r2, #65	; 0x41
   205e8:	5c99      	ldrb	r1, [r3, r2]
   205ea:	2001      	movs	r0, #1
   205ec:	4381      	bics	r1, r0
   205ee:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   205f0:	687b      	ldr	r3, [r7, #4]
   205f2:	2241      	movs	r2, #65	; 0x41
   205f4:	5c99      	ldrb	r1, [r3, r2]
   205f6:	2002      	movs	r0, #2
   205f8:	4381      	bics	r1, r0
   205fa:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   205fc:	230c      	movs	r3, #12
   205fe:	18fb      	adds	r3, r7, r3
   20600:	683a      	ldr	r2, [r7, #0]
   20602:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   20604:	687b      	ldr	r3, [r7, #4]
   20606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20608:	2b00      	cmp	r3, #0
   2060a:	d006      	beq.n	2061a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   2060c:	687b      	ldr	r3, [r7, #4]
   2060e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20610:	220c      	movs	r2, #12
   20612:	18ba      	adds	r2, r7, r2
   20614:	6878      	ldr	r0, [r7, #4]
   20616:	2104      	movs	r1, #4
   20618:	4798      	blx	r3
	}
}
   2061a:	46c0      	nop			; (mov r8, r8)
   2061c:	46bd      	mov	sp, r7
   2061e:	b006      	add	sp, #24
   20620:	bd80      	pop	{r7, pc}
   20622:	46c0      	nop			; (mov r8, r8)
   20624:	000247b7 	.word	0x000247b7
   20628:	00014e81 	.word	0x00014e81
   2062c:	2000432c 	.word	0x2000432c

00020630 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   20630:	b590      	push	{r4, r7, lr}
   20632:	b087      	sub	sp, #28
   20634:	af00      	add	r7, sp, #0
   20636:	60f8      	str	r0, [r7, #12]
   20638:	60b9      	str	r1, [r7, #8]
   2063a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   2063c:	68fb      	ldr	r3, [r7, #12]
   2063e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   20640:	697b      	ldr	r3, [r7, #20]
   20642:	2241      	movs	r2, #65	; 0x41
   20644:	5c99      	ldrb	r1, [r3, r2]
   20646:	2001      	movs	r0, #1
   20648:	4301      	orrs	r1, r0
   2064a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   2064c:	697b      	ldr	r3, [r7, #20]
   2064e:	2000      	movs	r0, #0
   20650:	5618      	ldrsb	r0, [r3, r0]
   20652:	687b      	ldr	r3, [r7, #4]
   20654:	b29a      	uxth	r2, r3
   20656:	68b9      	ldr	r1, [r7, #8]
   20658:	2300      	movs	r3, #0
   2065a:	4c14      	ldr	r4, [pc, #80]	; (206ac <_http_client_send_wait+0x7c>)
   2065c:	47a0      	blx	r4
   2065e:	0003      	movs	r3, r0
   20660:	613b      	str	r3, [r7, #16]
   20662:	693b      	ldr	r3, [r7, #16]
   20664:	2b00      	cmp	r3, #0
   20666:	da0f      	bge.n	20688 <_http_client_send_wait+0x58>
		module->sending = 0;
   20668:	697b      	ldr	r3, [r7, #20]
   2066a:	2241      	movs	r2, #65	; 0x41
   2066c:	5c99      	ldrb	r1, [r3, r2]
   2066e:	2001      	movs	r0, #1
   20670:	4381      	bics	r1, r0
   20672:	5499      	strb	r1, [r3, r2]
		return result;
   20674:	693b      	ldr	r3, [r7, #16]
   20676:	e014      	b.n	206a2 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   20678:	2000      	movs	r0, #0
   2067a:	4b0d      	ldr	r3, [pc, #52]	; (206b0 <_http_client_send_wait+0x80>)
   2067c:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   2067e:	697b      	ldr	r3, [r7, #20]
   20680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   20682:	0018      	movs	r0, r3
   20684:	4b0b      	ldr	r3, [pc, #44]	; (206b4 <_http_client_send_wait+0x84>)
   20686:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   20688:	697b      	ldr	r3, [r7, #20]
   2068a:	2241      	movs	r2, #65	; 0x41
   2068c:	5c9b      	ldrb	r3, [r3, r2]
   2068e:	2201      	movs	r2, #1
   20690:	4013      	ands	r3, r2
   20692:	b2db      	uxtb	r3, r3
   20694:	2b00      	cmp	r3, #0
   20696:	d003      	beq.n	206a0 <_http_client_send_wait+0x70>
   20698:	697b      	ldr	r3, [r7, #20]
   2069a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2069c:	2b02      	cmp	r3, #2
   2069e:	d8eb      	bhi.n	20678 <_http_client_send_wait+0x48>
	}

	return 0;
   206a0:	2300      	movs	r3, #0
}
   206a2:	0018      	movs	r0, r3
   206a4:	46bd      	mov	sp, r7
   206a6:	b007      	add	sp, #28
   206a8:	bd90      	pop	{r4, r7, pc}
   206aa:	46c0      	nop			; (mov r8, r8)
   206ac:	00014b9d 	.word	0x00014b9d
   206b0:	00011249 	.word	0x00011249
   206b4:	0002193d 	.word	0x0002193d

000206b8 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   206b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   206ba:	46c6      	mov	lr, r8
   206bc:	b500      	push	{lr}
   206be:	b0a0      	sub	sp, #128	; 0x80
   206c0:	af02      	add	r7, sp, #8
   206c2:	61f8      	str	r0, [r7, #28]
   206c4:	4668      	mov	r0, sp
   206c6:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   206c8:	2318      	movs	r3, #24
   206ca:	2218      	movs	r2, #24
   206cc:	18ba      	adds	r2, r7, r2
   206ce:	18d0      	adds	r0, r2, r3
   206d0:	4bbd      	ldr	r3, [pc, #756]	; (209c8 <_http_client_request+0x310>)
   206d2:	469c      	mov	ip, r3
   206d4:	4663      	mov	r3, ip
   206d6:	cb16      	ldmia	r3!, {r1, r2, r4}
   206d8:	c016      	stmia	r0!, {r1, r2, r4}
   206da:	469c      	mov	ip, r3
   206dc:	4663      	mov	r3, ip
   206de:	681b      	ldr	r3, [r3, #0]
   206e0:	469c      	mov	ip, r3
   206e2:	4663      	mov	r3, ip
   206e4:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   206e6:	69f8      	ldr	r0, [r7, #28]
   206e8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   206ea:	4684      	mov	ip, r0
   206ec:	2301      	movs	r3, #1
   206ee:	425b      	negs	r3, r3
   206f0:	4698      	mov	r8, r3
   206f2:	44c4      	add	ip, r8
   206f4:	4663      	mov	r3, ip
   206f6:	66fb      	str	r3, [r7, #108]	; 0x6c
   206f8:	6038      	str	r0, [r7, #0]
   206fa:	2300      	movs	r3, #0
   206fc:	607b      	str	r3, [r7, #4]
   206fe:	6839      	ldr	r1, [r7, #0]
   20700:	687a      	ldr	r2, [r7, #4]
   20702:	000b      	movs	r3, r1
   20704:	0f5b      	lsrs	r3, r3, #29
   20706:	469c      	mov	ip, r3
   20708:	0013      	movs	r3, r2
   2070a:	00db      	lsls	r3, r3, #3
   2070c:	617b      	str	r3, [r7, #20]
   2070e:	4663      	mov	r3, ip
   20710:	697c      	ldr	r4, [r7, #20]
   20712:	431c      	orrs	r4, r3
   20714:	617c      	str	r4, [r7, #20]
   20716:	000b      	movs	r3, r1
   20718:	00db      	lsls	r3, r3, #3
   2071a:	613b      	str	r3, [r7, #16]
   2071c:	0005      	movs	r5, r0
   2071e:	2200      	movs	r2, #0
   20720:	0016      	movs	r6, r2
   20722:	0f6a      	lsrs	r2, r5, #29
   20724:	00f3      	lsls	r3, r6, #3
   20726:	60fb      	str	r3, [r7, #12]
   20728:	68fb      	ldr	r3, [r7, #12]
   2072a:	4313      	orrs	r3, r2
   2072c:	60fb      	str	r3, [r7, #12]
   2072e:	00eb      	lsls	r3, r5, #3
   20730:	60bb      	str	r3, [r7, #8]
   20732:	1dc3      	adds	r3, r0, #7
   20734:	08db      	lsrs	r3, r3, #3
   20736:	00db      	lsls	r3, r3, #3
   20738:	466a      	mov	r2, sp
   2073a:	1ad3      	subs	r3, r2, r3
   2073c:	469d      	mov	sp, r3
   2073e:	ab02      	add	r3, sp, #8
   20740:	3300      	adds	r3, #0
   20742:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   20744:	69fb      	ldr	r3, [r7, #28]
   20746:	2b00      	cmp	r3, #0
   20748:	d100      	bne.n	2074c <_http_client_request+0x94>
   2074a:	e346      	b.n	20dda <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   2074c:	69fb      	ldr	r3, [r7, #28]
   2074e:	2241      	movs	r2, #65	; 0x41
   20750:	5c9b      	ldrb	r3, [r3, r2]
   20752:	2201      	movs	r2, #1
   20754:	4013      	ands	r3, r2
   20756:	b2db      	uxtb	r3, r3
   20758:	2b00      	cmp	r3, #0
   2075a:	d000      	beq.n	2075e <_http_client_request+0xa6>
   2075c:	e33f      	b.n	20dde <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   2075e:	69fb      	ldr	r3, [r7, #28]
   20760:	33b0      	adds	r3, #176	; 0xb0
   20762:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   20764:	69fb      	ldr	r3, [r7, #28]
   20766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   20768:	2b03      	cmp	r3, #3
   2076a:	d003      	beq.n	20774 <_http_client_request+0xbc>
   2076c:	2b04      	cmp	r3, #4
   2076e:	d100      	bne.n	20772 <_http_client_request+0xba>
   20770:	e1b3      	b.n	20ada <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   20772:	e32f      	b.n	20dd4 <_http_client_request+0x71c>
		module->req.content_length = 0;
   20774:	69fb      	ldr	r3, [r7, #28]
   20776:	22cc      	movs	r2, #204	; 0xcc
   20778:	2100      	movs	r1, #0
   2077a:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   2077c:	69fb      	ldr	r3, [r7, #28]
   2077e:	22d0      	movs	r2, #208	; 0xd0
   20780:	2100      	movs	r1, #0
   20782:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   20784:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   20786:	69fb      	ldr	r3, [r7, #28]
   20788:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   2078a:	4c90      	ldr	r4, [pc, #576]	; (209cc <_http_client_request+0x314>)
   2078c:	2334      	movs	r3, #52	; 0x34
   2078e:	2018      	movs	r0, #24
   20790:	1838      	adds	r0, r7, r0
   20792:	18c0      	adds	r0, r0, r3
   20794:	69fb      	ldr	r3, [r7, #28]
   20796:	9300      	str	r3, [sp, #0]
   20798:	0023      	movs	r3, r4
   2079a:	4c8d      	ldr	r4, [pc, #564]	; (209d0 <_http_client_request+0x318>)
   2079c:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   2079e:	69fb      	ldr	r3, [r7, #28]
   207a0:	22c8      	movs	r2, #200	; 0xc8
   207a2:	5c9b      	ldrb	r3, [r3, r2]
   207a4:	2b01      	cmp	r3, #1
   207a6:	d10a      	bne.n	207be <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   207a8:	498a      	ldr	r1, [pc, #552]	; (209d4 <_http_client_request+0x31c>)
   207aa:	2334      	movs	r3, #52	; 0x34
   207ac:	2218      	movs	r2, #24
   207ae:	4694      	mov	ip, r2
   207b0:	44bc      	add	ip, r7
   207b2:	4463      	add	r3, ip
   207b4:	2204      	movs	r2, #4
   207b6:	0018      	movs	r0, r3
   207b8:	4b87      	ldr	r3, [pc, #540]	; (209d8 <_http_client_request+0x320>)
   207ba:	4798      	blx	r3
   207bc:	e04e      	b.n	2085c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   207be:	69fb      	ldr	r3, [r7, #28]
   207c0:	22c8      	movs	r2, #200	; 0xc8
   207c2:	5c9b      	ldrb	r3, [r3, r2]
   207c4:	2b02      	cmp	r3, #2
   207c6:	d10a      	bne.n	207de <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   207c8:	4984      	ldr	r1, [pc, #528]	; (209dc <_http_client_request+0x324>)
   207ca:	2334      	movs	r3, #52	; 0x34
   207cc:	2218      	movs	r2, #24
   207ce:	4694      	mov	ip, r2
   207d0:	44bc      	add	ip, r7
   207d2:	4463      	add	r3, ip
   207d4:	2205      	movs	r2, #5
   207d6:	0018      	movs	r0, r3
   207d8:	4b7f      	ldr	r3, [pc, #508]	; (209d8 <_http_client_request+0x320>)
   207da:	4798      	blx	r3
   207dc:	e03e      	b.n	2085c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   207de:	69fb      	ldr	r3, [r7, #28]
   207e0:	22c8      	movs	r2, #200	; 0xc8
   207e2:	5c9b      	ldrb	r3, [r3, r2]
   207e4:	2b03      	cmp	r3, #3
   207e6:	d10a      	bne.n	207fe <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   207e8:	497d      	ldr	r1, [pc, #500]	; (209e0 <_http_client_request+0x328>)
   207ea:	2334      	movs	r3, #52	; 0x34
   207ec:	2218      	movs	r2, #24
   207ee:	4694      	mov	ip, r2
   207f0:	44bc      	add	ip, r7
   207f2:	4463      	add	r3, ip
   207f4:	2207      	movs	r2, #7
   207f6:	0018      	movs	r0, r3
   207f8:	4b77      	ldr	r3, [pc, #476]	; (209d8 <_http_client_request+0x320>)
   207fa:	4798      	blx	r3
   207fc:	e02e      	b.n	2085c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   207fe:	69fb      	ldr	r3, [r7, #28]
   20800:	22c8      	movs	r2, #200	; 0xc8
   20802:	5c9b      	ldrb	r3, [r3, r2]
   20804:	2b04      	cmp	r3, #4
   20806:	d10a      	bne.n	2081e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   20808:	4976      	ldr	r1, [pc, #472]	; (209e4 <_http_client_request+0x32c>)
   2080a:	2334      	movs	r3, #52	; 0x34
   2080c:	2218      	movs	r2, #24
   2080e:	4694      	mov	ip, r2
   20810:	44bc      	add	ip, r7
   20812:	4463      	add	r3, ip
   20814:	2204      	movs	r2, #4
   20816:	0018      	movs	r0, r3
   20818:	4b6f      	ldr	r3, [pc, #444]	; (209d8 <_http_client_request+0x320>)
   2081a:	4798      	blx	r3
   2081c:	e01e      	b.n	2085c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   2081e:	69fb      	ldr	r3, [r7, #28]
   20820:	22c8      	movs	r2, #200	; 0xc8
   20822:	5c9b      	ldrb	r3, [r3, r2]
   20824:	2b05      	cmp	r3, #5
   20826:	d10a      	bne.n	2083e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   20828:	496f      	ldr	r1, [pc, #444]	; (209e8 <_http_client_request+0x330>)
   2082a:	2334      	movs	r3, #52	; 0x34
   2082c:	2218      	movs	r2, #24
   2082e:	4694      	mov	ip, r2
   20830:	44bc      	add	ip, r7
   20832:	4463      	add	r3, ip
   20834:	2208      	movs	r2, #8
   20836:	0018      	movs	r0, r3
   20838:	4b67      	ldr	r3, [pc, #412]	; (209d8 <_http_client_request+0x320>)
   2083a:	4798      	blx	r3
   2083c:	e00e      	b.n	2085c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   2083e:	69fb      	ldr	r3, [r7, #28]
   20840:	22c8      	movs	r2, #200	; 0xc8
   20842:	5c9b      	ldrb	r3, [r3, r2]
   20844:	2b06      	cmp	r3, #6
   20846:	d109      	bne.n	2085c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   20848:	4968      	ldr	r1, [pc, #416]	; (209ec <_http_client_request+0x334>)
   2084a:	2334      	movs	r3, #52	; 0x34
   2084c:	2218      	movs	r2, #24
   2084e:	4694      	mov	ip, r2
   20850:	44bc      	add	ip, r7
   20852:	4463      	add	r3, ip
   20854:	2205      	movs	r2, #5
   20856:	0018      	movs	r0, r3
   20858:	4b5f      	ldr	r3, [pc, #380]	; (209d8 <_http_client_request+0x320>)
   2085a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   2085c:	69fb      	ldr	r3, [r7, #28]
   2085e:	3370      	adds	r3, #112	; 0x70
   20860:	001c      	movs	r4, r3
   20862:	69fb      	ldr	r3, [r7, #28]
   20864:	3370      	adds	r3, #112	; 0x70
   20866:	0018      	movs	r0, r3
   20868:	4b61      	ldr	r3, [pc, #388]	; (209f0 <_http_client_request+0x338>)
   2086a:	4798      	blx	r3
   2086c:	0002      	movs	r2, r0
   2086e:	2334      	movs	r3, #52	; 0x34
   20870:	2118      	movs	r1, #24
   20872:	468c      	mov	ip, r1
   20874:	44bc      	add	ip, r7
   20876:	4463      	add	r3, ip
   20878:	0021      	movs	r1, r4
   2087a:	0018      	movs	r0, r3
   2087c:	4b56      	ldr	r3, [pc, #344]	; (209d8 <_http_client_request+0x320>)
   2087e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   20880:	495c      	ldr	r1, [pc, #368]	; (209f4 <_http_client_request+0x33c>)
   20882:	2334      	movs	r3, #52	; 0x34
   20884:	2218      	movs	r2, #24
   20886:	4694      	mov	ip, r2
   20888:	44bc      	add	ip, r7
   2088a:	4463      	add	r3, ip
   2088c:	220b      	movs	r2, #11
   2088e:	0018      	movs	r0, r3
   20890:	4b51      	ldr	r3, [pc, #324]	; (209d8 <_http_client_request+0x320>)
   20892:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   20894:	4958      	ldr	r1, [pc, #352]	; (209f8 <_http_client_request+0x340>)
   20896:	2334      	movs	r3, #52	; 0x34
   20898:	2218      	movs	r2, #24
   2089a:	4694      	mov	ip, r2
   2089c:	44bc      	add	ip, r7
   2089e:	4463      	add	r3, ip
   208a0:	220c      	movs	r2, #12
   208a2:	0018      	movs	r0, r3
   208a4:	4b4c      	ldr	r3, [pc, #304]	; (209d8 <_http_client_request+0x320>)
   208a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   208a8:	69fb      	ldr	r3, [r7, #28]
   208aa:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   208ac:	69fb      	ldr	r3, [r7, #28]
   208ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   208b0:	0018      	movs	r0, r3
   208b2:	4b4f      	ldr	r3, [pc, #316]	; (209f0 <_http_client_request+0x338>)
   208b4:	4798      	blx	r3
   208b6:	0002      	movs	r2, r0
   208b8:	2334      	movs	r3, #52	; 0x34
   208ba:	2118      	movs	r1, #24
   208bc:	468c      	mov	ip, r1
   208be:	44bc      	add	ip, r7
   208c0:	4463      	add	r3, ip
   208c2:	0021      	movs	r1, r4
   208c4:	0018      	movs	r0, r3
   208c6:	4b44      	ldr	r3, [pc, #272]	; (209d8 <_http_client_request+0x320>)
   208c8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   208ca:	494c      	ldr	r1, [pc, #304]	; (209fc <_http_client_request+0x344>)
   208cc:	2334      	movs	r3, #52	; 0x34
   208ce:	2218      	movs	r2, #24
   208d0:	4694      	mov	ip, r2
   208d2:	44bc      	add	ip, r7
   208d4:	4463      	add	r3, ip
   208d6:	2202      	movs	r2, #2
   208d8:	0018      	movs	r0, r3
   208da:	4b3f      	ldr	r3, [pc, #252]	; (209d8 <_http_client_request+0x320>)
   208dc:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   208de:	4948      	ldr	r1, [pc, #288]	; (20a00 <_http_client_request+0x348>)
   208e0:	2334      	movs	r3, #52	; 0x34
   208e2:	2218      	movs	r2, #24
   208e4:	4694      	mov	ip, r2
   208e6:	44bc      	add	ip, r7
   208e8:	4463      	add	r3, ip
   208ea:	2206      	movs	r2, #6
   208ec:	0018      	movs	r0, r3
   208ee:	4b3a      	ldr	r3, [pc, #232]	; (209d8 <_http_client_request+0x320>)
   208f0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   208f2:	69fb      	ldr	r3, [r7, #28]
   208f4:	1c5c      	adds	r4, r3, #1
   208f6:	69fb      	ldr	r3, [r7, #28]
   208f8:	3301      	adds	r3, #1
   208fa:	0018      	movs	r0, r3
   208fc:	4b3c      	ldr	r3, [pc, #240]	; (209f0 <_http_client_request+0x338>)
   208fe:	4798      	blx	r3
   20900:	0002      	movs	r2, r0
   20902:	2334      	movs	r3, #52	; 0x34
   20904:	2118      	movs	r1, #24
   20906:	468c      	mov	ip, r1
   20908:	44bc      	add	ip, r7
   2090a:	4463      	add	r3, ip
   2090c:	0021      	movs	r1, r4
   2090e:	0018      	movs	r0, r3
   20910:	4b31      	ldr	r3, [pc, #196]	; (209d8 <_http_client_request+0x320>)
   20912:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   20914:	4939      	ldr	r1, [pc, #228]	; (209fc <_http_client_request+0x344>)
   20916:	2334      	movs	r3, #52	; 0x34
   20918:	2218      	movs	r2, #24
   2091a:	4694      	mov	ip, r2
   2091c:	44bc      	add	ip, r7
   2091e:	4463      	add	r3, ip
   20920:	2202      	movs	r2, #2
   20922:	0018      	movs	r0, r3
   20924:	4b2c      	ldr	r3, [pc, #176]	; (209d8 <_http_client_request+0x320>)
   20926:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   20928:	4936      	ldr	r1, [pc, #216]	; (20a04 <_http_client_request+0x34c>)
   2092a:	2334      	movs	r3, #52	; 0x34
   2092c:	2218      	movs	r2, #24
   2092e:	4694      	mov	ip, r2
   20930:	44bc      	add	ip, r7
   20932:	4463      	add	r3, ip
   20934:	2218      	movs	r2, #24
   20936:	0018      	movs	r0, r3
   20938:	4b27      	ldr	r3, [pc, #156]	; (209d8 <_http_client_request+0x320>)
   2093a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   2093c:	4932      	ldr	r1, [pc, #200]	; (20a08 <_http_client_request+0x350>)
   2093e:	2334      	movs	r3, #52	; 0x34
   20940:	2218      	movs	r2, #24
   20942:	4694      	mov	ip, r2
   20944:	44bc      	add	ip, r7
   20946:	4463      	add	r3, ip
   20948:	2213      	movs	r2, #19
   2094a:	0018      	movs	r0, r3
   2094c:	4b22      	ldr	r3, [pc, #136]	; (209d8 <_http_client_request+0x320>)
   2094e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   20950:	492e      	ldr	r1, [pc, #184]	; (20a0c <_http_client_request+0x354>)
   20952:	2334      	movs	r3, #52	; 0x34
   20954:	2218      	movs	r2, #24
   20956:	4694      	mov	ip, r2
   20958:	44bc      	add	ip, r7
   2095a:	4463      	add	r3, ip
   2095c:	2217      	movs	r2, #23
   2095e:	0018      	movs	r0, r3
   20960:	4b1d      	ldr	r3, [pc, #116]	; (209d8 <_http_client_request+0x320>)
   20962:	4798      	blx	r3
		if (entity->read != NULL) {
   20964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20966:	68db      	ldr	r3, [r3, #12]
   20968:	2b00      	cmp	r3, #0
   2096a:	d100      	bne.n	2096e <_http_client_request+0x2b6>
   2096c:	e088      	b.n	20a80 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   2096e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20970:	781b      	ldrb	r3, [r3, #0]
   20972:	2b00      	cmp	r3, #0
   20974:	d00f      	beq.n	20996 <_http_client_request+0x2de>
				module->req.content_length = -1;
   20976:	69fb      	ldr	r3, [r7, #28]
   20978:	21cc      	movs	r1, #204	; 0xcc
   2097a:	2201      	movs	r2, #1
   2097c:	4252      	negs	r2, r2
   2097e:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   20980:	4923      	ldr	r1, [pc, #140]	; (20a10 <_http_client_request+0x358>)
   20982:	2334      	movs	r3, #52	; 0x34
   20984:	2218      	movs	r2, #24
   20986:	4694      	mov	ip, r2
   20988:	44bc      	add	ip, r7
   2098a:	4463      	add	r3, ip
   2098c:	221c      	movs	r2, #28
   2098e:	0018      	movs	r0, r3
   20990:	4b11      	ldr	r3, [pc, #68]	; (209d8 <_http_client_request+0x320>)
   20992:	4798      	blx	r3
   20994:	e074      	b.n	20a80 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   20996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20998:	689b      	ldr	r3, [r3, #8]
   2099a:	2b00      	cmp	r3, #0
   2099c:	d070      	beq.n	20a80 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   2099e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   209a0:	689a      	ldr	r2, [r3, #8]
   209a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   209a4:	695b      	ldr	r3, [r3, #20]
   209a6:	0018      	movs	r0, r3
   209a8:	4790      	blx	r2
   209aa:	0001      	movs	r1, r0
   209ac:	69fb      	ldr	r3, [r7, #28]
   209ae:	22cc      	movs	r2, #204	; 0xcc
   209b0:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   209b2:	69fb      	ldr	r3, [r7, #28]
   209b4:	22cc      	movs	r2, #204	; 0xcc
   209b6:	589b      	ldr	r3, [r3, r2]
   209b8:	2b00      	cmp	r3, #0
   209ba:	da2b      	bge.n	20a14 <_http_client_request+0x35c>
					module->req.content_length = 0;
   209bc:	69fb      	ldr	r3, [r7, #28]
   209be:	22cc      	movs	r2, #204	; 0xcc
   209c0:	2100      	movs	r1, #0
   209c2:	5099      	str	r1, [r3, r2]
   209c4:	e05c      	b.n	20a80 <_http_client_request+0x3c8>
   209c6:	46c0      	nop			; (mov r8, r8)
   209c8:	00029ba8 	.word	0x00029ba8
   209cc:	00020631 	.word	0x00020631
   209d0:	00021599 	.word	0x00021599
   209d4:	00029acc 	.word	0x00029acc
   209d8:	00021619 	.word	0x00021619
   209dc:	00029ad4 	.word	0x00029ad4
   209e0:	00029adc 	.word	0x00029adc
   209e4:	00029ae4 	.word	0x00029ae4
   209e8:	00029aec 	.word	0x00029aec
   209ec:	00029af8 	.word	0x00029af8
   209f0:	00024b6f 	.word	0x00024b6f
   209f4:	00029b00 	.word	0x00029b00
   209f8:	00029b0c 	.word	0x00029b0c
   209fc:	00029b1c 	.word	0x00029b1c
   20a00:	00029b20 	.word	0x00029b20
   20a04:	00029b28 	.word	0x00029b28
   20a08:	00029b44 	.word	0x00029b44
   20a0c:	00029b58 	.word	0x00029b58
   20a10:	00029b70 	.word	0x00029b70
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   20a14:	69fb      	ldr	r3, [r7, #28]
   20a16:	22cc      	movs	r2, #204	; 0xcc
   20a18:	589b      	ldr	r3, [r3, r2]
   20a1a:	001a      	movs	r2, r3
   20a1c:	49e0      	ldr	r1, [pc, #896]	; (20da0 <_http_client_request+0x6e8>)
   20a1e:	2328      	movs	r3, #40	; 0x28
   20a20:	2018      	movs	r0, #24
   20a22:	4684      	mov	ip, r0
   20a24:	44bc      	add	ip, r7
   20a26:	4463      	add	r3, ip
   20a28:	0018      	movs	r0, r3
   20a2a:	4bde      	ldr	r3, [pc, #888]	; (20da4 <_http_client_request+0x6ec>)
   20a2c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   20a2e:	49de      	ldr	r1, [pc, #888]	; (20da8 <_http_client_request+0x6f0>)
   20a30:	2334      	movs	r3, #52	; 0x34
   20a32:	2218      	movs	r2, #24
   20a34:	4694      	mov	ip, r2
   20a36:	44bc      	add	ip, r7
   20a38:	4463      	add	r3, ip
   20a3a:	2210      	movs	r2, #16
   20a3c:	0018      	movs	r0, r3
   20a3e:	4bdb      	ldr	r3, [pc, #876]	; (20dac <_http_client_request+0x6f4>)
   20a40:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   20a42:	2328      	movs	r3, #40	; 0x28
   20a44:	2218      	movs	r2, #24
   20a46:	4694      	mov	ip, r2
   20a48:	44bc      	add	ip, r7
   20a4a:	4463      	add	r3, ip
   20a4c:	0018      	movs	r0, r3
   20a4e:	4bd8      	ldr	r3, [pc, #864]	; (20db0 <_http_client_request+0x6f8>)
   20a50:	4798      	blx	r3
   20a52:	0002      	movs	r2, r0
   20a54:	2328      	movs	r3, #40	; 0x28
   20a56:	2118      	movs	r1, #24
   20a58:	1879      	adds	r1, r7, r1
   20a5a:	18c9      	adds	r1, r1, r3
   20a5c:	2334      	movs	r3, #52	; 0x34
   20a5e:	2018      	movs	r0, #24
   20a60:	4684      	mov	ip, r0
   20a62:	44bc      	add	ip, r7
   20a64:	4463      	add	r3, ip
   20a66:	0018      	movs	r0, r3
   20a68:	4bd0      	ldr	r3, [pc, #832]	; (20dac <_http_client_request+0x6f4>)
   20a6a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   20a6c:	49d1      	ldr	r1, [pc, #836]	; (20db4 <_http_client_request+0x6fc>)
   20a6e:	2334      	movs	r3, #52	; 0x34
   20a70:	2218      	movs	r2, #24
   20a72:	4694      	mov	ip, r2
   20a74:	44bc      	add	ip, r7
   20a76:	4463      	add	r3, ip
   20a78:	2202      	movs	r2, #2
   20a7a:	0018      	movs	r0, r3
   20a7c:	4bcb      	ldr	r3, [pc, #812]	; (20dac <_http_client_request+0x6f4>)
   20a7e:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   20a80:	69fb      	ldr	r3, [r7, #28]
   20a82:	22d4      	movs	r2, #212	; 0xd4
   20a84:	589b      	ldr	r3, [r3, r2]
   20a86:	2b00      	cmp	r3, #0
   20a88:	d012      	beq.n	20ab0 <_http_client_request+0x3f8>
				module->req.ext_header,
   20a8a:	69fb      	ldr	r3, [r7, #28]
   20a8c:	22d4      	movs	r2, #212	; 0xd4
   20a8e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   20a90:	69fb      	ldr	r3, [r7, #28]
   20a92:	22d4      	movs	r2, #212	; 0xd4
   20a94:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   20a96:	0018      	movs	r0, r3
   20a98:	4bc5      	ldr	r3, [pc, #788]	; (20db0 <_http_client_request+0x6f8>)
   20a9a:	4798      	blx	r3
   20a9c:	0002      	movs	r2, r0
   20a9e:	2334      	movs	r3, #52	; 0x34
   20aa0:	2118      	movs	r1, #24
   20aa2:	468c      	mov	ip, r1
   20aa4:	44bc      	add	ip, r7
   20aa6:	4463      	add	r3, ip
   20aa8:	0021      	movs	r1, r4
   20aaa:	0018      	movs	r0, r3
   20aac:	4bbf      	ldr	r3, [pc, #764]	; (20dac <_http_client_request+0x6f4>)
   20aae:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   20ab0:	49c0      	ldr	r1, [pc, #768]	; (20db4 <_http_client_request+0x6fc>)
   20ab2:	2334      	movs	r3, #52	; 0x34
   20ab4:	2218      	movs	r2, #24
   20ab6:	4694      	mov	ip, r2
   20ab8:	44bc      	add	ip, r7
   20aba:	4463      	add	r3, ip
   20abc:	2202      	movs	r2, #2
   20abe:	0018      	movs	r0, r3
   20ac0:	4bba      	ldr	r3, [pc, #744]	; (20dac <_http_client_request+0x6f4>)
   20ac2:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   20ac4:	2334      	movs	r3, #52	; 0x34
   20ac6:	2218      	movs	r2, #24
   20ac8:	4694      	mov	ip, r2
   20aca:	44bc      	add	ip, r7
   20acc:	4463      	add	r3, ip
   20ace:	0018      	movs	r0, r3
   20ad0:	4bb9      	ldr	r3, [pc, #740]	; (20db8 <_http_client_request+0x700>)
   20ad2:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   20ad4:	69fb      	ldr	r3, [r7, #28]
   20ad6:	2204      	movs	r2, #4
   20ad8:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   20ada:	69fb      	ldr	r3, [r7, #28]
   20adc:	22cc      	movs	r2, #204	; 0xcc
   20ade:	589b      	ldr	r3, [r3, r2]
   20ae0:	2b00      	cmp	r3, #0
   20ae2:	db00      	blt.n	20ae6 <_http_client_request+0x42e>
   20ae4:	e0c6      	b.n	20c74 <_http_client_request+0x5bc>
   20ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20ae8:	68db      	ldr	r3, [r3, #12]
   20aea:	2b00      	cmp	r3, #0
   20aec:	d100      	bne.n	20af0 <_http_client_request+0x438>
   20aee:	e0c1      	b.n	20c74 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   20af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20af2:	68dc      	ldr	r4, [r3, #12]
   20af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20af6:	6958      	ldr	r0, [r3, #20]
   20af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20afa:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   20afc:	69fb      	ldr	r3, [r7, #28]
   20afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   20b00:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   20b02:	69fb      	ldr	r3, [r7, #28]
   20b04:	22d0      	movs	r2, #208	; 0xd0
   20b06:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   20b08:	002a      	movs	r2, r5
   20b0a:	47a0      	blx	r4
   20b0c:	0003      	movs	r3, r0
   20b0e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   20b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20b12:	2b00      	cmp	r3, #0
   20b14:	da01      	bge.n	20b1a <_http_client_request+0x462>
				size = 0;
   20b16:	2300      	movs	r3, #0
   20b18:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   20b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20b1c:	220a      	movs	r2, #10
   20b1e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   20b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20b22:	220d      	movs	r2, #13
   20b24:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   20b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20b28:	3305      	adds	r3, #5
   20b2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   20b2c:	210d      	movs	r1, #13
   20b2e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   20b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20b32:	3306      	adds	r3, #6
   20b34:	6eba      	ldr	r2, [r7, #104]	; 0x68
   20b36:	210a      	movs	r1, #10
   20b38:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   20b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20b3c:	2b00      	cmp	r3, #0
   20b3e:	db14      	blt.n	20b6a <_http_client_request+0x4b2>
				ptr = buffer + 2;
   20b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20b42:	3302      	adds	r3, #2
   20b44:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   20b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20b48:	4a9c      	ldr	r2, [pc, #624]	; (20dbc <_http_client_request+0x704>)
   20b4a:	4013      	ands	r3, r2
   20b4c:	d504      	bpl.n	20b58 <_http_client_request+0x4a0>
   20b4e:	3b01      	subs	r3, #1
   20b50:	2210      	movs	r2, #16
   20b52:	4252      	negs	r2, r2
   20b54:	4313      	orrs	r3, r2
   20b56:	3301      	adds	r3, #1
   20b58:	001a      	movs	r2, r3
   20b5a:	2318      	movs	r3, #24
   20b5c:	2118      	movs	r1, #24
   20b5e:	468c      	mov	ip, r1
   20b60:	44bc      	add	ip, r7
   20b62:	4463      	add	r3, ip
   20b64:	5c9a      	ldrb	r2, [r3, r2]
   20b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   20b68:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   20b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20b6c:	2b0f      	cmp	r3, #15
   20b6e:	dd19      	ble.n	20ba4 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   20b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20b72:	3301      	adds	r3, #1
   20b74:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   20b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20b78:	2b00      	cmp	r3, #0
   20b7a:	da00      	bge.n	20b7e <_http_client_request+0x4c6>
   20b7c:	330f      	adds	r3, #15
   20b7e:	111b      	asrs	r3, r3, #4
   20b80:	001a      	movs	r2, r3
   20b82:	4b8e      	ldr	r3, [pc, #568]	; (20dbc <_http_client_request+0x704>)
   20b84:	4013      	ands	r3, r2
   20b86:	d504      	bpl.n	20b92 <_http_client_request+0x4da>
   20b88:	3b01      	subs	r3, #1
   20b8a:	2210      	movs	r2, #16
   20b8c:	4252      	negs	r2, r2
   20b8e:	4313      	orrs	r3, r2
   20b90:	3301      	adds	r3, #1
   20b92:	001a      	movs	r2, r3
   20b94:	2318      	movs	r3, #24
   20b96:	2118      	movs	r1, #24
   20b98:	468c      	mov	ip, r1
   20b9a:	44bc      	add	ip, r7
   20b9c:	4463      	add	r3, ip
   20b9e:	5c9a      	ldrb	r2, [r3, r2]
   20ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   20ba2:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   20ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20ba6:	2bff      	cmp	r3, #255	; 0xff
   20ba8:	dd18      	ble.n	20bdc <_http_client_request+0x524>
				ptr = buffer;
   20baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20bac:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   20bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20bb0:	2b00      	cmp	r3, #0
   20bb2:	da00      	bge.n	20bb6 <_http_client_request+0x4fe>
   20bb4:	33ff      	adds	r3, #255	; 0xff
   20bb6:	121b      	asrs	r3, r3, #8
   20bb8:	001a      	movs	r2, r3
   20bba:	4b80      	ldr	r3, [pc, #512]	; (20dbc <_http_client_request+0x704>)
   20bbc:	4013      	ands	r3, r2
   20bbe:	d504      	bpl.n	20bca <_http_client_request+0x512>
   20bc0:	3b01      	subs	r3, #1
   20bc2:	2210      	movs	r2, #16
   20bc4:	4252      	negs	r2, r2
   20bc6:	4313      	orrs	r3, r2
   20bc8:	3301      	adds	r3, #1
   20bca:	001a      	movs	r2, r3
   20bcc:	2318      	movs	r3, #24
   20bce:	2118      	movs	r1, #24
   20bd0:	468c      	mov	ip, r1
   20bd2:	44bc      	add	ip, r7
   20bd4:	4463      	add	r3, ip
   20bd6:	5c9a      	ldrb	r2, [r3, r2]
   20bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   20bda:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   20bdc:	69fb      	ldr	r3, [r7, #28]
   20bde:	2000      	movs	r0, #0
   20be0:	5618      	ldrsb	r0, [r3, r0]
   20be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   20be4:	3303      	adds	r3, #3
   20be6:	001a      	movs	r2, r3
   20be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20bea:	1ad3      	subs	r3, r2, r3
   20bec:	b29a      	uxth	r2, r3
   20bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20bf0:	b29b      	uxth	r3, r3
   20bf2:	18d3      	adds	r3, r2, r3
   20bf4:	b29b      	uxth	r3, r3
   20bf6:	3304      	adds	r3, #4
   20bf8:	b29a      	uxth	r2, r3
   20bfa:	6f39      	ldr	r1, [r7, #112]	; 0x70
   20bfc:	2300      	movs	r3, #0
   20bfe:	4c70      	ldr	r4, [pc, #448]	; (20dc0 <_http_client_request+0x708>)
   20c00:	47a0      	blx	r4
   20c02:	0003      	movs	r3, r0
   20c04:	663b      	str	r3, [r7, #96]	; 0x60
   20c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20c08:	2b00      	cmp	r3, #0
   20c0a:	da07      	bge.n	20c1c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   20c0c:	2305      	movs	r3, #5
   20c0e:	425a      	negs	r2, r3
   20c10:	69fb      	ldr	r3, [r7, #28]
   20c12:	0011      	movs	r1, r2
   20c14:	0018      	movs	r0, r3
   20c16:	4b6b      	ldr	r3, [pc, #428]	; (20dc4 <_http_client_request+0x70c>)
   20c18:	4798      	blx	r3
				return;
   20c1a:	e0e1      	b.n	20de0 <_http_client_request+0x728>
			module->req.sent_length += size;
   20c1c:	69fb      	ldr	r3, [r7, #28]
   20c1e:	22d0      	movs	r2, #208	; 0xd0
   20c20:	589a      	ldr	r2, [r3, r2]
   20c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20c24:	18d2      	adds	r2, r2, r3
   20c26:	69fb      	ldr	r3, [r7, #28]
   20c28:	21d0      	movs	r1, #208	; 0xd0
   20c2a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   20c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20c2e:	2b00      	cmp	r3, #0
   20c30:	d000      	beq.n	20c34 <_http_client_request+0x57c>
   20c32:	e0c9      	b.n	20dc8 <_http_client_request+0x710>
				if (module->req.entity.close) {
   20c34:	69fb      	ldr	r3, [r7, #28]
   20c36:	22c0      	movs	r2, #192	; 0xc0
   20c38:	589b      	ldr	r3, [r3, r2]
   20c3a:	2b00      	cmp	r3, #0
   20c3c:	d007      	beq.n	20c4e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   20c3e:	69fb      	ldr	r3, [r7, #28]
   20c40:	22c0      	movs	r2, #192	; 0xc0
   20c42:	589b      	ldr	r3, [r3, r2]
   20c44:	69fa      	ldr	r2, [r7, #28]
   20c46:	21c4      	movs	r1, #196	; 0xc4
   20c48:	5852      	ldr	r2, [r2, r1]
   20c4a:	0010      	movs	r0, r2
   20c4c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   20c4e:	69fb      	ldr	r3, [r7, #28]
   20c50:	2202      	movs	r2, #2
   20c52:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   20c54:	69fb      	ldr	r3, [r7, #28]
   20c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20c58:	2b00      	cmp	r3, #0
   20c5a:	d100      	bne.n	20c5e <_http_client_request+0x5a6>
   20c5c:	e0b5      	b.n	20dca <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   20c5e:	69fb      	ldr	r3, [r7, #28]
   20c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20c62:	220c      	movs	r2, #12
   20c64:	2118      	movs	r1, #24
   20c66:	468c      	mov	ip, r1
   20c68:	44bc      	add	ip, r7
   20c6a:	4462      	add	r2, ip
   20c6c:	69f8      	ldr	r0, [r7, #28]
   20c6e:	2101      	movs	r1, #1
   20c70:	4798      	blx	r3
				break;
   20c72:	e0aa      	b.n	20dca <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   20c74:	69fb      	ldr	r3, [r7, #28]
   20c76:	22cc      	movs	r2, #204	; 0xcc
   20c78:	589b      	ldr	r3, [r3, r2]
   20c7a:	2b00      	cmp	r3, #0
   20c7c:	dc00      	bgt.n	20c80 <_http_client_request+0x5c8>
   20c7e:	e07c      	b.n	20d7a <_http_client_request+0x6c2>
   20c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20c82:	68db      	ldr	r3, [r3, #12]
   20c84:	2b00      	cmp	r3, #0
   20c86:	d100      	bne.n	20c8a <_http_client_request+0x5d2>
   20c88:	e077      	b.n	20d7a <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   20c8a:	69fb      	ldr	r3, [r7, #28]
   20c8c:	22d0      	movs	r2, #208	; 0xd0
   20c8e:	589a      	ldr	r2, [r3, r2]
   20c90:	69fb      	ldr	r3, [r7, #28]
   20c92:	21cc      	movs	r1, #204	; 0xcc
   20c94:	585b      	ldr	r3, [r3, r1]
   20c96:	429a      	cmp	r2, r3
   20c98:	db1f      	blt.n	20cda <_http_client_request+0x622>
				if (module->req.entity.close) {
   20c9a:	69fb      	ldr	r3, [r7, #28]
   20c9c:	22c0      	movs	r2, #192	; 0xc0
   20c9e:	589b      	ldr	r3, [r3, r2]
   20ca0:	2b00      	cmp	r3, #0
   20ca2:	d007      	beq.n	20cb4 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   20ca4:	69fb      	ldr	r3, [r7, #28]
   20ca6:	22c0      	movs	r2, #192	; 0xc0
   20ca8:	589b      	ldr	r3, [r3, r2]
   20caa:	69fa      	ldr	r2, [r7, #28]
   20cac:	21c4      	movs	r1, #196	; 0xc4
   20cae:	5852      	ldr	r2, [r2, r1]
   20cb0:	0010      	movs	r0, r2
   20cb2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   20cb4:	69fb      	ldr	r3, [r7, #28]
   20cb6:	2202      	movs	r2, #2
   20cb8:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   20cba:	69fb      	ldr	r3, [r7, #28]
   20cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20cbe:	2b00      	cmp	r3, #0
   20cc0:	d100      	bne.n	20cc4 <_http_client_request+0x60c>
   20cc2:	e084      	b.n	20dce <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   20cc4:	69fb      	ldr	r3, [r7, #28]
   20cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20cc8:	220c      	movs	r2, #12
   20cca:	2118      	movs	r1, #24
   20ccc:	468c      	mov	ip, r1
   20cce:	44bc      	add	ip, r7
   20cd0:	4462      	add	r2, ip
   20cd2:	69f8      	ldr	r0, [r7, #28]
   20cd4:	2101      	movs	r1, #1
   20cd6:	4798      	blx	r3
				break;
   20cd8:	e079      	b.n	20dce <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   20cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20cdc:	68dc      	ldr	r4, [r3, #12]
   20cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20ce0:	6958      	ldr	r0, [r3, #20]
   20ce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   20ce4:	69fb      	ldr	r3, [r7, #28]
   20ce6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   20ce8:	69fb      	ldr	r3, [r7, #28]
   20cea:	22d0      	movs	r2, #208	; 0xd0
   20cec:	589b      	ldr	r3, [r3, r2]
   20cee:	002a      	movs	r2, r5
   20cf0:	47a0      	blx	r4
   20cf2:	0003      	movs	r3, r0
   20cf4:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   20cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20cf8:	2b00      	cmp	r3, #0
   20cfa:	da0d      	bge.n	20d18 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   20cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20cfe:	2b00      	cmp	r3, #0
   20d00:	d102      	bne.n	20d08 <_http_client_request+0x650>
   20d02:	234d      	movs	r3, #77	; 0x4d
   20d04:	425b      	negs	r3, r3
   20d06:	e001      	b.n	20d0c <_http_client_request+0x654>
   20d08:	2305      	movs	r3, #5
   20d0a:	425b      	negs	r3, r3
   20d0c:	69fa      	ldr	r2, [r7, #28]
   20d0e:	0019      	movs	r1, r3
   20d10:	0010      	movs	r0, r2
   20d12:	4b2c      	ldr	r3, [pc, #176]	; (20dc4 <_http_client_request+0x70c>)
   20d14:	4798      	blx	r3
			if (size < 0) {
   20d16:	e057      	b.n	20dc8 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   20d18:	69fb      	ldr	r3, [r7, #28]
   20d1a:	22cc      	movs	r2, #204	; 0xcc
   20d1c:	589a      	ldr	r2, [r3, r2]
   20d1e:	69fb      	ldr	r3, [r7, #28]
   20d20:	21d0      	movs	r1, #208	; 0xd0
   20d22:	585b      	ldr	r3, [r3, r1]
   20d24:	1ad2      	subs	r2, r2, r3
   20d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20d28:	429a      	cmp	r2, r3
   20d2a:	da07      	bge.n	20d3c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   20d2c:	69fb      	ldr	r3, [r7, #28]
   20d2e:	22cc      	movs	r2, #204	; 0xcc
   20d30:	589a      	ldr	r2, [r3, r2]
   20d32:	69fb      	ldr	r3, [r7, #28]
   20d34:	21d0      	movs	r1, #208	; 0xd0
   20d36:	585b      	ldr	r3, [r3, r1]
   20d38:	1ad3      	subs	r3, r2, r3
   20d3a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   20d3c:	69fb      	ldr	r3, [r7, #28]
   20d3e:	2000      	movs	r0, #0
   20d40:	5618      	ldrsb	r0, [r3, r0]
   20d42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   20d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20d46:	b29a      	uxth	r2, r3
   20d48:	2300      	movs	r3, #0
   20d4a:	4c1d      	ldr	r4, [pc, #116]	; (20dc0 <_http_client_request+0x708>)
   20d4c:	47a0      	blx	r4
   20d4e:	0003      	movs	r3, r0
   20d50:	663b      	str	r3, [r7, #96]	; 0x60
   20d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20d54:	2b00      	cmp	r3, #0
   20d56:	da07      	bge.n	20d68 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   20d58:	2305      	movs	r3, #5
   20d5a:	425a      	negs	r2, r3
   20d5c:	69fb      	ldr	r3, [r7, #28]
   20d5e:	0011      	movs	r1, r2
   20d60:	0018      	movs	r0, r3
   20d62:	4b18      	ldr	r3, [pc, #96]	; (20dc4 <_http_client_request+0x70c>)
   20d64:	4798      	blx	r3
					return;
   20d66:	e03b      	b.n	20de0 <_http_client_request+0x728>
				module->req.sent_length += size;
   20d68:	69fb      	ldr	r3, [r7, #28]
   20d6a:	22d0      	movs	r2, #208	; 0xd0
   20d6c:	589a      	ldr	r2, [r3, r2]
   20d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   20d70:	18d2      	adds	r2, r2, r3
   20d72:	69fb      	ldr	r3, [r7, #28]
   20d74:	21d0      	movs	r1, #208	; 0xd0
   20d76:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   20d78:	e026      	b.n	20dc8 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   20d7a:	69fb      	ldr	r3, [r7, #28]
   20d7c:	2202      	movs	r2, #2
   20d7e:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   20d80:	69fb      	ldr	r3, [r7, #28]
   20d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20d84:	2b00      	cmp	r3, #0
   20d86:	d024      	beq.n	20dd2 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   20d88:	69fb      	ldr	r3, [r7, #28]
   20d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20d8c:	220c      	movs	r2, #12
   20d8e:	2118      	movs	r1, #24
   20d90:	468c      	mov	ip, r1
   20d92:	44bc      	add	ip, r7
   20d94:	4462      	add	r2, ip
   20d96:	69f8      	ldr	r0, [r7, #28]
   20d98:	2101      	movs	r1, #1
   20d9a:	4798      	blx	r3
			break;
   20d9c:	e019      	b.n	20dd2 <_http_client_request+0x71a>
   20d9e:	46c0      	nop			; (mov r8, r8)
   20da0:	00029b90 	.word	0x00029b90
   20da4:	00024a75 	.word	0x00024a75
   20da8:	00029b94 	.word	0x00029b94
   20dac:	00021619 	.word	0x00021619
   20db0:	00024b6f 	.word	0x00024b6f
   20db4:	00029b1c 	.word	0x00029b1c
   20db8:	00021655 	.word	0x00021655
   20dbc:	8000000f 	.word	0x8000000f
   20dc0:	00014b9d 	.word	0x00014b9d
   20dc4:	00020565 	.word	0x00020565
		break;
   20dc8:	e004      	b.n	20dd4 <_http_client_request+0x71c>
				break;
   20dca:	46c0      	nop			; (mov r8, r8)
   20dcc:	e002      	b.n	20dd4 <_http_client_request+0x71c>
				break;
   20dce:	46c0      	nop			; (mov r8, r8)
   20dd0:	e000      	b.n	20dd4 <_http_client_request+0x71c>
			break;
   20dd2:	46c0      	nop			; (mov r8, r8)
   20dd4:	69bb      	ldr	r3, [r7, #24]
   20dd6:	469d      	mov	sp, r3
   20dd8:	e004      	b.n	20de4 <_http_client_request+0x72c>
		return;
   20dda:	46c0      	nop			; (mov r8, r8)
   20ddc:	e000      	b.n	20de0 <_http_client_request+0x728>
		return;
   20dde:	46c0      	nop			; (mov r8, r8)
   20de0:	69bb      	ldr	r3, [r7, #24]
   20de2:	469d      	mov	sp, r3
	}
}
   20de4:	46bd      	mov	sp, r7
   20de6:	b01e      	add	sp, #120	; 0x78
   20de8:	bc04      	pop	{r2}
   20dea:	4690      	mov	r8, r2
   20dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20dee:	46c0      	nop			; (mov r8, r8)

00020df0 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   20df0:	b590      	push	{r4, r7, lr}
   20df2:	b083      	sub	sp, #12
   20df4:	af00      	add	r7, sp, #0
   20df6:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   20df8:	687b      	ldr	r3, [r7, #4]
   20dfa:	2b00      	cmp	r3, #0
   20dfc:	d021      	beq.n	20e42 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   20dfe:	687b      	ldr	r3, [r7, #4]
   20e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20e02:	687b      	ldr	r3, [r7, #4]
   20e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   20e06:	429a      	cmp	r2, r3
   20e08:	d307      	bcc.n	20e1a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   20e0a:	238b      	movs	r3, #139	; 0x8b
   20e0c:	425a      	negs	r2, r3
   20e0e:	687b      	ldr	r3, [r7, #4]
   20e10:	0011      	movs	r1, r2
   20e12:	0018      	movs	r0, r3
   20e14:	4b0d      	ldr	r3, [pc, #52]	; (20e4c <_http_client_recv_packet+0x5c>)
   20e16:	4798      	blx	r3
		return;
   20e18:	e014      	b.n	20e44 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   20e1a:	687b      	ldr	r3, [r7, #4]
   20e1c:	2000      	movs	r0, #0
   20e1e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   20e20:	687b      	ldr	r3, [r7, #4]
   20e22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   20e24:	687b      	ldr	r3, [r7, #4]
   20e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20e28:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   20e2a:	687b      	ldr	r3, [r7, #4]
   20e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   20e2e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   20e30:	687b      	ldr	r3, [r7, #4]
   20e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   20e34:	b29b      	uxth	r3, r3
   20e36:	1ad3      	subs	r3, r2, r3
   20e38:	b29a      	uxth	r2, r3
   20e3a:	2300      	movs	r3, #0
   20e3c:	4c04      	ldr	r4, [pc, #16]	; (20e50 <_http_client_recv_packet+0x60>)
   20e3e:	47a0      	blx	r4
   20e40:	e000      	b.n	20e44 <_http_client_recv_packet+0x54>
		return;
   20e42:	46c0      	nop			; (mov r8, r8)
}
   20e44:	46bd      	mov	sp, r7
   20e46:	b003      	add	sp, #12
   20e48:	bd90      	pop	{r4, r7, pc}
   20e4a:	46c0      	nop			; (mov r8, r8)
   20e4c:	00020565 	.word	0x00020565
   20e50:	00014d01 	.word	0x00014d01

00020e54 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   20e54:	b580      	push	{r7, lr}
   20e56:	b082      	sub	sp, #8
   20e58:	af00      	add	r7, sp, #0
   20e5a:	6078      	str	r0, [r7, #4]
   20e5c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   20e5e:	687b      	ldr	r3, [r7, #4]
   20e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20e62:	683b      	ldr	r3, [r7, #0]
   20e64:	18d2      	adds	r2, r2, r3
   20e66:	687b      	ldr	r3, [r7, #4]
   20e68:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   20e6a:	687b      	ldr	r3, [r7, #4]
   20e6c:	2258      	movs	r2, #88	; 0x58
   20e6e:	5a9b      	ldrh	r3, [r3, r2]
   20e70:	2b00      	cmp	r3, #0
   20e72:	d007      	beq.n	20e84 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   20e74:	687b      	ldr	r3, [r7, #4]
   20e76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   20e78:	687b      	ldr	r3, [r7, #4]
   20e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20e7c:	0019      	movs	r1, r3
   20e7e:	0010      	movs	r0, r2
   20e80:	4b06      	ldr	r3, [pc, #24]	; (20e9c <_http_client_recved_packet+0x48>)
   20e82:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   20e84:	46c0      	nop			; (mov r8, r8)
   20e86:	687b      	ldr	r3, [r7, #4]
   20e88:	0018      	movs	r0, r3
   20e8a:	4b05      	ldr	r3, [pc, #20]	; (20ea0 <_http_client_recved_packet+0x4c>)
   20e8c:	4798      	blx	r3
   20e8e:	1e03      	subs	r3, r0, #0
   20e90:	d1f9      	bne.n	20e86 <_http_client_recved_packet+0x32>
}
   20e92:	46c0      	nop			; (mov r8, r8)
   20e94:	46bd      	mov	sp, r7
   20e96:	b002      	add	sp, #8
   20e98:	bd80      	pop	{r7, pc}
   20e9a:	46c0      	nop			; (mov r8, r8)
   20e9c:	00021911 	.word	0x00021911
   20ea0:	00020ea5 	.word	0x00020ea5

00020ea4 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   20ea4:	b580      	push	{r7, lr}
   20ea6:	b082      	sub	sp, #8
   20ea8:	af00      	add	r7, sp, #0
   20eaa:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   20eac:	687b      	ldr	r3, [r7, #4]
   20eae:	22d8      	movs	r2, #216	; 0xd8
   20eb0:	589b      	ldr	r3, [r3, r2]
   20eb2:	2b00      	cmp	r3, #0
   20eb4:	d002      	beq.n	20ebc <_http_client_handle_response+0x18>
   20eb6:	2b01      	cmp	r3, #1
   20eb8:	d006      	beq.n	20ec8 <_http_client_handle_response+0x24>
   20eba:	e00b      	b.n	20ed4 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   20ebc:	687b      	ldr	r3, [r7, #4]
   20ebe:	0018      	movs	r0, r3
   20ec0:	4b07      	ldr	r3, [pc, #28]	; (20ee0 <_http_client_handle_response+0x3c>)
   20ec2:	4798      	blx	r3
   20ec4:	0003      	movs	r3, r0
   20ec6:	e006      	b.n	20ed6 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   20ec8:	687b      	ldr	r3, [r7, #4]
   20eca:	0018      	movs	r0, r3
   20ecc:	4b05      	ldr	r3, [pc, #20]	; (20ee4 <_http_client_handle_response+0x40>)
   20ece:	4798      	blx	r3
   20ed0:	0003      	movs	r3, r0
   20ed2:	e000      	b.n	20ed6 <_http_client_handle_response+0x32>
	}
	return 0;
   20ed4:	2300      	movs	r3, #0
}
   20ed6:	0018      	movs	r0, r3
   20ed8:	46bd      	mov	sp, r7
   20eda:	b002      	add	sp, #8
   20edc:	bd80      	pop	{r7, pc}
   20ede:	46c0      	nop			; (mov r8, r8)
   20ee0:	00020ee9 	.word	0x00020ee9
   20ee4:	000213a1 	.word	0x000213a1

00020ee8 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   20ee8:	b590      	push	{r4, r7, lr}
   20eea:	b08b      	sub	sp, #44	; 0x2c
   20eec:	af00      	add	r7, sp, #0
   20eee:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   20ef0:	687b      	ldr	r3, [r7, #4]
   20ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   20ef4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   20ef6:	4b9a      	ldr	r3, [pc, #616]	; (21160 <_http_client_handle_header+0x278>)
   20ef8:	681a      	ldr	r2, [r3, #0]
   20efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20efc:	0011      	movs	r1, r2
   20efe:	0018      	movs	r0, r3
   20f00:	4b98      	ldr	r3, [pc, #608]	; (21164 <_http_client_handle_header+0x27c>)
   20f02:	4798      	blx	r3
   20f04:	0003      	movs	r3, r0
   20f06:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   20f08:	69bb      	ldr	r3, [r7, #24]
   20f0a:	2b00      	cmp	r3, #0
   20f0c:	d007      	beq.n	20f1e <_http_client_handle_header+0x36>
   20f0e:	687b      	ldr	r3, [r7, #4]
   20f10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   20f12:	687b      	ldr	r3, [r7, #4]
   20f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20f16:	18d2      	adds	r2, r2, r3
   20f18:	69bb      	ldr	r3, [r7, #24]
   20f1a:	429a      	cmp	r2, r3
   20f1c:	d807      	bhi.n	20f2e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   20f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20f20:	687b      	ldr	r3, [r7, #4]
   20f22:	0011      	movs	r1, r2
   20f24:	0018      	movs	r0, r3
   20f26:	4b90      	ldr	r3, [pc, #576]	; (21168 <_http_client_handle_header+0x280>)
   20f28:	4798      	blx	r3
			return 0;
   20f2a:	2300      	movs	r3, #0
   20f2c:	e114      	b.n	21158 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   20f2e:	4b8c      	ldr	r3, [pc, #560]	; (21160 <_http_client_handle_header+0x278>)
   20f30:	681c      	ldr	r4, [r3, #0]
   20f32:	4b8b      	ldr	r3, [pc, #556]	; (21160 <_http_client_handle_header+0x278>)
   20f34:	681b      	ldr	r3, [r3, #0]
   20f36:	0018      	movs	r0, r3
   20f38:	4b8c      	ldr	r3, [pc, #560]	; (2116c <_http_client_handle_header+0x284>)
   20f3a:	4798      	blx	r3
   20f3c:	0002      	movs	r2, r0
   20f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20f40:	0021      	movs	r1, r4
   20f42:	0018      	movs	r0, r3
   20f44:	4b8a      	ldr	r3, [pc, #552]	; (21170 <_http_client_handle_header+0x288>)
   20f46:	4798      	blx	r3
   20f48:	1e03      	subs	r3, r0, #0
   20f4a:	d15d      	bne.n	21008 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   20f4c:	4b84      	ldr	r3, [pc, #528]	; (21160 <_http_client_handle_header+0x278>)
   20f4e:	681b      	ldr	r3, [r3, #0]
   20f50:	0018      	movs	r0, r3
   20f52:	4b86      	ldr	r3, [pc, #536]	; (2116c <_http_client_handle_header+0x284>)
   20f54:	4798      	blx	r3
   20f56:	0002      	movs	r2, r0
   20f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20f5a:	189a      	adds	r2, r3, r2
   20f5c:	687b      	ldr	r3, [r7, #4]
   20f5e:	0011      	movs	r1, r2
   20f60:	0018      	movs	r0, r3
   20f62:	4b81      	ldr	r3, [pc, #516]	; (21168 <_http_client_handle_header+0x280>)
   20f64:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   20f66:	687b      	ldr	r3, [r7, #4]
   20f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20f6a:	2b00      	cmp	r3, #0
   20f6c:	d046      	beq.n	20ffc <_http_client_handle_header+0x114>
   20f6e:	687b      	ldr	r3, [r7, #4]
   20f70:	22e4      	movs	r2, #228	; 0xe4
   20f72:	5a9b      	ldrh	r3, [r3, r2]
   20f74:	2b00      	cmp	r3, #0
   20f76:	d041      	beq.n	20ffc <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   20f78:	687b      	ldr	r3, [r7, #4]
   20f7a:	22dc      	movs	r2, #220	; 0xdc
   20f7c:	589b      	ldr	r3, [r3, r2]
   20f7e:	2b00      	cmp	r3, #0
   20f80:	da19      	bge.n	20fb6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   20f82:	687b      	ldr	r3, [r7, #4]
   20f84:	22e4      	movs	r2, #228	; 0xe4
   20f86:	5a9a      	ldrh	r2, [r3, r2]
   20f88:	230c      	movs	r3, #12
   20f8a:	18fb      	adds	r3, r7, r3
   20f8c:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   20f8e:	230c      	movs	r3, #12
   20f90:	18fb      	adds	r3, r7, r3
   20f92:	2201      	movs	r2, #1
   20f94:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   20f96:	687b      	ldr	r3, [r7, #4]
   20f98:	22e0      	movs	r2, #224	; 0xe0
   20f9a:	2100      	movs	r1, #0
   20f9c:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   20f9e:	230c      	movs	r3, #12
   20fa0:	18fb      	adds	r3, r7, r3
   20fa2:	2200      	movs	r2, #0
   20fa4:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   20fa6:	687b      	ldr	r3, [r7, #4]
   20fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20faa:	220c      	movs	r2, #12
   20fac:	18ba      	adds	r2, r7, r2
   20fae:	6878      	ldr	r0, [r7, #4]
   20fb0:	2102      	movs	r1, #2
   20fb2:	4798      	blx	r3
   20fb4:	e022      	b.n	20ffc <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   20fb6:	687b      	ldr	r3, [r7, #4]
   20fb8:	22dc      	movs	r2, #220	; 0xdc
   20fba:	589a      	ldr	r2, [r3, r2]
   20fbc:	687b      	ldr	r3, [r7, #4]
   20fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   20fc0:	429a      	cmp	r2, r3
   20fc2:	dd1b      	ble.n	20ffc <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   20fc4:	687b      	ldr	r3, [r7, #4]
   20fc6:	22e4      	movs	r2, #228	; 0xe4
   20fc8:	5a9a      	ldrh	r2, [r3, r2]
   20fca:	230c      	movs	r3, #12
   20fcc:	18fb      	adds	r3, r7, r3
   20fce:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   20fd0:	687b      	ldr	r3, [r7, #4]
   20fd2:	22dc      	movs	r2, #220	; 0xdc
   20fd4:	589b      	ldr	r3, [r3, r2]
   20fd6:	001a      	movs	r2, r3
   20fd8:	230c      	movs	r3, #12
   20fda:	18fb      	adds	r3, r7, r3
   20fdc:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   20fde:	230c      	movs	r3, #12
   20fe0:	18fb      	adds	r3, r7, r3
   20fe2:	2200      	movs	r2, #0
   20fe4:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   20fe6:	687b      	ldr	r3, [r7, #4]
   20fe8:	22e0      	movs	r2, #224	; 0xe0
   20fea:	2100      	movs	r1, #0
   20fec:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   20fee:	687b      	ldr	r3, [r7, #4]
   20ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20ff2:	220c      	movs	r2, #12
   20ff4:	18ba      	adds	r2, r7, r2
   20ff6:	6878      	ldr	r0, [r7, #4]
   20ff8:	2102      	movs	r1, #2
   20ffa:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   20ffc:	687b      	ldr	r3, [r7, #4]
   20ffe:	22d8      	movs	r2, #216	; 0xd8
   21000:	2101      	movs	r1, #1
   21002:	5099      	str	r1, [r3, r2]
			return 1;
   21004:	2301      	movs	r3, #1
   21006:	e0a7      	b.n	21158 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   21008:	495a      	ldr	r1, [pc, #360]	; (21174 <_http_client_handle_header+0x28c>)
   2100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2100c:	2210      	movs	r2, #16
   2100e:	0018      	movs	r0, r3
   21010:	4b57      	ldr	r3, [pc, #348]	; (21170 <_http_client_handle_header+0x288>)
   21012:	4798      	blx	r3
   21014:	1e03      	subs	r3, r0, #0
   21016:	d109      	bne.n	2102c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   21018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2101a:	3310      	adds	r3, #16
   2101c:	0018      	movs	r0, r3
   2101e:	4b56      	ldr	r3, [pc, #344]	; (21178 <_http_client_handle_header+0x290>)
   21020:	4798      	blx	r3
   21022:	0001      	movs	r1, r0
   21024:	687b      	ldr	r3, [r7, #4]
   21026:	22dc      	movs	r2, #220	; 0xdc
   21028:	5099      	str	r1, [r3, r2]
   2102a:	e08b      	b.n	21144 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   2102c:	4953      	ldr	r1, [pc, #332]	; (2117c <_http_client_handle_header+0x294>)
   2102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21030:	2213      	movs	r2, #19
   21032:	0018      	movs	r0, r3
   21034:	4b4e      	ldr	r3, [pc, #312]	; (21170 <_http_client_handle_header+0x288>)
   21036:	4798      	blx	r3
   21038:	1e03      	subs	r3, r0, #0
   2103a:	d127      	bne.n	2108c <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   2103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2103e:	3313      	adds	r3, #19
   21040:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   21042:	e01e      	b.n	21082 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   21044:	6a3b      	ldr	r3, [r7, #32]
   21046:	781b      	ldrb	r3, [r3, #0]
   21048:	2b20      	cmp	r3, #32
   2104a:	d103      	bne.n	21054 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2104c:	6a3b      	ldr	r3, [r7, #32]
   2104e:	3301      	adds	r3, #1
   21050:	623b      	str	r3, [r7, #32]
   21052:	e016      	b.n	21082 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   21054:	6a3b      	ldr	r3, [r7, #32]
   21056:	781b      	ldrb	r3, [r3, #0]
   21058:	2b43      	cmp	r3, #67	; 0x43
   2105a:	d003      	beq.n	21064 <_http_client_handle_header+0x17c>
   2105c:	6a3b      	ldr	r3, [r7, #32]
   2105e:	781b      	ldrb	r3, [r3, #0]
   21060:	2b63      	cmp	r3, #99	; 0x63
   21062:	d105      	bne.n	21070 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   21064:	687b      	ldr	r3, [r7, #4]
   21066:	21cc      	movs	r1, #204	; 0xcc
   21068:	2201      	movs	r2, #1
   2106a:	4252      	negs	r2, r2
   2106c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   2106e:	e069      	b.n	21144 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   21070:	2386      	movs	r3, #134	; 0x86
   21072:	425a      	negs	r2, r3
   21074:	687b      	ldr	r3, [r7, #4]
   21076:	0011      	movs	r1, r2
   21078:	0018      	movs	r0, r3
   2107a:	4b41      	ldr	r3, [pc, #260]	; (21180 <_http_client_handle_header+0x298>)
   2107c:	4798      	blx	r3
					return 0;
   2107e:	2300      	movs	r3, #0
   21080:	e06a      	b.n	21158 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   21082:	69ba      	ldr	r2, [r7, #24]
   21084:	6a3b      	ldr	r3, [r7, #32]
   21086:	429a      	cmp	r2, r3
   21088:	d8dc      	bhi.n	21044 <_http_client_handle_header+0x15c>
   2108a:	e05b      	b.n	21144 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   2108c:	493d      	ldr	r1, [pc, #244]	; (21184 <_http_client_handle_header+0x29c>)
   2108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21090:	220c      	movs	r2, #12
   21092:	0018      	movs	r0, r3
   21094:	4b36      	ldr	r3, [pc, #216]	; (21170 <_http_client_handle_header+0x288>)
   21096:	4798      	blx	r3
   21098:	1e03      	subs	r3, r0, #0
   2109a:	d126      	bne.n	210ea <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   2109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2109e:	330c      	adds	r3, #12
   210a0:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   210a2:	e01d      	b.n	210e0 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   210a4:	69fb      	ldr	r3, [r7, #28]
   210a6:	781b      	ldrb	r3, [r3, #0]
   210a8:	2b20      	cmp	r3, #32
   210aa:	d103      	bne.n	210b4 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   210ac:	69fb      	ldr	r3, [r7, #28]
   210ae:	3301      	adds	r3, #1
   210b0:	61fb      	str	r3, [r7, #28]
   210b2:	e015      	b.n	210e0 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   210b4:	69fb      	ldr	r3, [r7, #28]
   210b6:	781b      	ldrb	r3, [r3, #0]
   210b8:	2b4b      	cmp	r3, #75	; 0x4b
   210ba:	d003      	beq.n	210c4 <_http_client_handle_header+0x1dc>
   210bc:	69fb      	ldr	r3, [r7, #28]
   210be:	781b      	ldrb	r3, [r3, #0]
   210c0:	2b6b      	cmp	r3, #107	; 0x6b
   210c2:	d106      	bne.n	210d2 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   210c4:	687b      	ldr	r3, [r7, #4]
   210c6:	2241      	movs	r2, #65	; 0x41
   210c8:	5c99      	ldrb	r1, [r3, r2]
   210ca:	2002      	movs	r0, #2
   210cc:	4301      	orrs	r1, r0
   210ce:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   210d0:	e038      	b.n	21144 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   210d2:	687b      	ldr	r3, [r7, #4]
   210d4:	2241      	movs	r2, #65	; 0x41
   210d6:	5c99      	ldrb	r1, [r3, r2]
   210d8:	2002      	movs	r0, #2
   210da:	4381      	bics	r1, r0
   210dc:	5499      	strb	r1, [r3, r2]
				break;
   210de:	e031      	b.n	21144 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   210e0:	69ba      	ldr	r2, [r7, #24]
   210e2:	69fb      	ldr	r3, [r7, #28]
   210e4:	429a      	cmp	r2, r3
   210e6:	d8dd      	bhi.n	210a4 <_http_client_handle_header+0x1bc>
   210e8:	e02c      	b.n	21144 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   210ea:	4927      	ldr	r1, [pc, #156]	; (21188 <_http_client_handle_header+0x2a0>)
   210ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   210ee:	2205      	movs	r2, #5
   210f0:	0018      	movs	r0, r3
   210f2:	4b1f      	ldr	r3, [pc, #124]	; (21170 <_http_client_handle_header+0x288>)
   210f4:	4798      	blx	r3
   210f6:	1e03      	subs	r3, r0, #0
   210f8:	d124      	bne.n	21144 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   210fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   210fc:	3309      	adds	r3, #9
   210fe:	0018      	movs	r0, r3
   21100:	4b1d      	ldr	r3, [pc, #116]	; (21178 <_http_client_handle_header+0x290>)
   21102:	4798      	blx	r3
   21104:	0003      	movs	r3, r0
   21106:	b299      	uxth	r1, r3
   21108:	687b      	ldr	r3, [r7, #4]
   2110a:	22e4      	movs	r2, #228	; 0xe4
   2110c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   2110e:	687b      	ldr	r3, [r7, #4]
   21110:	22dc      	movs	r2, #220	; 0xdc
   21112:	2100      	movs	r1, #0
   21114:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   21116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21118:	3305      	adds	r3, #5
   2111a:	781b      	ldrb	r3, [r3, #0]
   2111c:	2b31      	cmp	r3, #49	; 0x31
   2111e:	d804      	bhi.n	2112a <_http_client_handle_header+0x242>
   21120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21122:	3307      	adds	r3, #7
   21124:	781b      	ldrb	r3, [r3, #0]
   21126:	2b30      	cmp	r3, #48	; 0x30
   21128:	d906      	bls.n	21138 <_http_client_handle_header+0x250>
				module->permanent = 1;
   2112a:	687b      	ldr	r3, [r7, #4]
   2112c:	2241      	movs	r2, #65	; 0x41
   2112e:	5c99      	ldrb	r1, [r3, r2]
   21130:	2002      	movs	r0, #2
   21132:	4301      	orrs	r1, r0
   21134:	5499      	strb	r1, [r3, r2]
   21136:	e005      	b.n	21144 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   21138:	687b      	ldr	r3, [r7, #4]
   2113a:	2241      	movs	r2, #65	; 0x41
   2113c:	5c99      	ldrb	r1, [r3, r2]
   2113e:	2002      	movs	r0, #2
   21140:	4381      	bics	r1, r0
   21142:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   21144:	4b06      	ldr	r3, [pc, #24]	; (21160 <_http_client_handle_header+0x278>)
   21146:	681b      	ldr	r3, [r3, #0]
   21148:	0018      	movs	r0, r3
   2114a:	4b08      	ldr	r3, [pc, #32]	; (2116c <_http_client_handle_header+0x284>)
   2114c:	4798      	blx	r3
   2114e:	0002      	movs	r2, r0
   21150:	69bb      	ldr	r3, [r7, #24]
   21152:	189b      	adds	r3, r3, r2
   21154:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   21156:	e6ce      	b.n	20ef6 <_http_client_handle_header+0xe>
	}
}
   21158:	0018      	movs	r0, r3
   2115a:	46bd      	mov	sp, r7
   2115c:	b00b      	add	sp, #44	; 0x2c
   2115e:	bd90      	pop	{r4, r7, pc}
   21160:	20000120 	.word	0x20000120
   21164:	00024bed 	.word	0x00024bed
   21168:	0002154d 	.word	0x0002154d
   2116c:	00024b6f 	.word	0x00024b6f
   21170:	00024b7d 	.word	0x00024b7d
   21174:	00029b94 	.word	0x00029b94
   21178:	00024705 	.word	0x00024705
   2117c:	00029bb8 	.word	0x00029bb8
   21180:	00020565 	.word	0x00020565
   21184:	00029bcc 	.word	0x00029bcc
   21188:	00029bdc 	.word	0x00029bdc

0002118c <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   2118c:	b580      	push	{r7, lr}
   2118e:	b088      	sub	sp, #32
   21190:	af00      	add	r7, sp, #0
   21192:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   21194:	687b      	ldr	r3, [r7, #4]
   21196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21198:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   2119a:	2300      	movs	r3, #0
   2119c:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   2119e:	687b      	ldr	r3, [r7, #4]
   211a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   211a2:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   211a4:	687b      	ldr	r3, [r7, #4]
   211a6:	22e0      	movs	r2, #224	; 0xe0
   211a8:	589b      	ldr	r3, [r3, r2]
   211aa:	2b00      	cmp	r3, #0
   211ac:	db71      	blt.n	21292 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   211ae:	687b      	ldr	r3, [r7, #4]
   211b0:	22e0      	movs	r2, #224	; 0xe0
   211b2:	589b      	ldr	r3, [r3, r2]
   211b4:	2b00      	cmp	r3, #0
   211b6:	d134      	bne.n	21222 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   211b8:	687b      	ldr	r3, [r7, #4]
   211ba:	22d8      	movs	r2, #216	; 0xd8
   211bc:	2100      	movs	r1, #0
   211be:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   211c0:	687b      	ldr	r3, [r7, #4]
   211c2:	22e4      	movs	r2, #228	; 0xe4
   211c4:	2100      	movs	r1, #0
   211c6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   211c8:	2308      	movs	r3, #8
   211ca:	18fb      	adds	r3, r7, r3
   211cc:	2201      	movs	r2, #1
   211ce:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   211d0:	2308      	movs	r3, #8
   211d2:	18fb      	adds	r3, r7, r3
   211d4:	2200      	movs	r2, #0
   211d6:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   211d8:	2308      	movs	r3, #8
   211da:	18fb      	adds	r3, r7, r3
   211dc:	2200      	movs	r2, #0
   211de:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   211e0:	687b      	ldr	r3, [r7, #4]
   211e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   211e4:	2b00      	cmp	r3, #0
   211e6:	d006      	beq.n	211f6 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   211e8:	687b      	ldr	r3, [r7, #4]
   211ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   211ec:	2208      	movs	r2, #8
   211ee:	18ba      	adds	r2, r7, r2
   211f0:	6878      	ldr	r0, [r7, #4]
   211f2:	2103      	movs	r1, #3
   211f4:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   211f6:	687b      	ldr	r3, [r7, #4]
   211f8:	2241      	movs	r2, #65	; 0x41
   211fa:	5c9b      	ldrb	r3, [r3, r2]
   211fc:	2202      	movs	r2, #2
   211fe:	4013      	ands	r3, r2
   21200:	b2db      	uxtb	r3, r3
   21202:	2b00      	cmp	r3, #0
   21204:	d105      	bne.n	21212 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   21206:	687b      	ldr	r3, [r7, #4]
   21208:	2100      	movs	r1, #0
   2120a:	0018      	movs	r0, r3
   2120c:	4b62      	ldr	r3, [pc, #392]	; (21398 <_http_client_read_chuked_entity+0x20c>)
   2120e:	4798      	blx	r3
					return;
   21210:	e0bf      	b.n	21392 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   21212:	697b      	ldr	r3, [r7, #20]
   21214:	1c9a      	adds	r2, r3, #2
   21216:	687b      	ldr	r3, [r7, #4]
   21218:	0011      	movs	r1, r2
   2121a:	0018      	movs	r0, r3
   2121c:	4b5f      	ldr	r3, [pc, #380]	; (2139c <_http_client_read_chuked_entity+0x210>)
   2121e:	4798      	blx	r3
   21220:	e0b2      	b.n	21388 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   21222:	687b      	ldr	r3, [r7, #4]
   21224:	22e0      	movs	r2, #224	; 0xe0
   21226:	589a      	ldr	r2, [r3, r2]
   21228:	69fb      	ldr	r3, [r7, #28]
   2122a:	429a      	cmp	r2, r3
   2122c:	dd00      	ble.n	21230 <_http_client_read_chuked_entity+0xa4>
   2122e:	e0ab      	b.n	21388 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   21230:	687b      	ldr	r3, [r7, #4]
   21232:	22e0      	movs	r2, #224	; 0xe0
   21234:	589b      	ldr	r3, [r3, r2]
   21236:	001a      	movs	r2, r3
   21238:	2308      	movs	r3, #8
   2123a:	18fb      	adds	r3, r7, r3
   2123c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   2123e:	2308      	movs	r3, #8
   21240:	18fb      	adds	r3, r7, r3
   21242:	697a      	ldr	r2, [r7, #20]
   21244:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   21246:	2308      	movs	r3, #8
   21248:	18fb      	adds	r3, r7, r3
   2124a:	2200      	movs	r2, #0
   2124c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   2124e:	687b      	ldr	r3, [r7, #4]
   21250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   21252:	2b00      	cmp	r3, #0
   21254:	d006      	beq.n	21264 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   21256:	687b      	ldr	r3, [r7, #4]
   21258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2125a:	2208      	movs	r2, #8
   2125c:	18ba      	adds	r2, r7, r2
   2125e:	6878      	ldr	r0, [r7, #4]
   21260:	2103      	movs	r1, #3
   21262:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   21264:	687b      	ldr	r3, [r7, #4]
   21266:	22e0      	movs	r2, #224	; 0xe0
   21268:	589b      	ldr	r3, [r3, r2]
   2126a:	3302      	adds	r3, #2
   2126c:	697a      	ldr	r2, [r7, #20]
   2126e:	18d2      	adds	r2, r2, r3
   21270:	687b      	ldr	r3, [r7, #4]
   21272:	0011      	movs	r1, r2
   21274:	0018      	movs	r0, r3
   21276:	4b49      	ldr	r3, [pc, #292]	; (2139c <_http_client_read_chuked_entity+0x210>)
   21278:	4798      	blx	r3
				length = (int)module->recved_size;
   2127a:	687b      	ldr	r3, [r7, #4]
   2127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2127e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   21280:	687b      	ldr	r3, [r7, #4]
   21282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   21284:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   21286:	687b      	ldr	r3, [r7, #4]
   21288:	21e0      	movs	r1, #224	; 0xe0
   2128a:	2201      	movs	r2, #1
   2128c:	4252      	negs	r2, r2
   2128e:	505a      	str	r2, [r3, r1]
   21290:	e07a      	b.n	21388 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   21292:	687b      	ldr	r3, [r7, #4]
   21294:	22e0      	movs	r2, #224	; 0xe0
   21296:	2100      	movs	r1, #0
   21298:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   2129a:	e05a      	b.n	21352 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   2129c:	697b      	ldr	r3, [r7, #20]
   2129e:	781b      	ldrb	r3, [r3, #0]
   212a0:	2b0a      	cmp	r3, #10
   212a2:	d106      	bne.n	212b2 <_http_client_read_chuked_entity+0x126>
					buffer++;
   212a4:	697b      	ldr	r3, [r7, #20]
   212a6:	3301      	adds	r3, #1
   212a8:	617b      	str	r3, [r7, #20]
					length--;
   212aa:	69fb      	ldr	r3, [r7, #28]
   212ac:	3b01      	subs	r3, #1
   212ae:	61fb      	str	r3, [r7, #28]
					break;
   212b0:	e052      	b.n	21358 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   212b2:	69bb      	ldr	r3, [r7, #24]
   212b4:	2b00      	cmp	r3, #0
   212b6:	d145      	bne.n	21344 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   212b8:	697b      	ldr	r3, [r7, #20]
   212ba:	781b      	ldrb	r3, [r3, #0]
   212bc:	2b2f      	cmp	r3, #47	; 0x2f
   212be:	d910      	bls.n	212e2 <_http_client_read_chuked_entity+0x156>
   212c0:	697b      	ldr	r3, [r7, #20]
   212c2:	781b      	ldrb	r3, [r3, #0]
   212c4:	2b39      	cmp	r3, #57	; 0x39
   212c6:	d80c      	bhi.n	212e2 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   212c8:	687b      	ldr	r3, [r7, #4]
   212ca:	22e0      	movs	r2, #224	; 0xe0
   212cc:	589b      	ldr	r3, [r3, r2]
   212ce:	011b      	lsls	r3, r3, #4
   212d0:	697a      	ldr	r2, [r7, #20]
   212d2:	7812      	ldrb	r2, [r2, #0]
   212d4:	189b      	adds	r3, r3, r2
   212d6:	3b30      	subs	r3, #48	; 0x30
   212d8:	001a      	movs	r2, r3
   212da:	687b      	ldr	r3, [r7, #4]
   212dc:	21e0      	movs	r1, #224	; 0xe0
   212de:	505a      	str	r2, [r3, r1]
   212e0:	e031      	b.n	21346 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   212e2:	697b      	ldr	r3, [r7, #20]
   212e4:	781b      	ldrb	r3, [r3, #0]
   212e6:	2b60      	cmp	r3, #96	; 0x60
   212e8:	d910      	bls.n	2130c <_http_client_read_chuked_entity+0x180>
   212ea:	697b      	ldr	r3, [r7, #20]
   212ec:	781b      	ldrb	r3, [r3, #0]
   212ee:	2b66      	cmp	r3, #102	; 0x66
   212f0:	d80c      	bhi.n	2130c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   212f2:	687b      	ldr	r3, [r7, #4]
   212f4:	22e0      	movs	r2, #224	; 0xe0
   212f6:	589b      	ldr	r3, [r3, r2]
   212f8:	011b      	lsls	r3, r3, #4
   212fa:	697a      	ldr	r2, [r7, #20]
   212fc:	7812      	ldrb	r2, [r2, #0]
   212fe:	189b      	adds	r3, r3, r2
   21300:	3b61      	subs	r3, #97	; 0x61
   21302:	001a      	movs	r2, r3
   21304:	687b      	ldr	r3, [r7, #4]
   21306:	21e0      	movs	r1, #224	; 0xe0
   21308:	505a      	str	r2, [r3, r1]
   2130a:	e01c      	b.n	21346 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   2130c:	697b      	ldr	r3, [r7, #20]
   2130e:	781b      	ldrb	r3, [r3, #0]
   21310:	2b40      	cmp	r3, #64	; 0x40
   21312:	d910      	bls.n	21336 <_http_client_read_chuked_entity+0x1aa>
   21314:	697b      	ldr	r3, [r7, #20]
   21316:	781b      	ldrb	r3, [r3, #0]
   21318:	2b46      	cmp	r3, #70	; 0x46
   2131a:	d80c      	bhi.n	21336 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   2131c:	687b      	ldr	r3, [r7, #4]
   2131e:	22e0      	movs	r2, #224	; 0xe0
   21320:	589b      	ldr	r3, [r3, r2]
   21322:	011b      	lsls	r3, r3, #4
   21324:	697a      	ldr	r2, [r7, #20]
   21326:	7812      	ldrb	r2, [r2, #0]
   21328:	189b      	adds	r3, r3, r2
   2132a:	3b41      	subs	r3, #65	; 0x41
   2132c:	001a      	movs	r2, r3
   2132e:	687b      	ldr	r3, [r7, #4]
   21330:	21e0      	movs	r1, #224	; 0xe0
   21332:	505a      	str	r2, [r3, r1]
   21334:	e007      	b.n	21346 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   21336:	697b      	ldr	r3, [r7, #20]
   21338:	781b      	ldrb	r3, [r3, #0]
   2133a:	2b3b      	cmp	r3, #59	; 0x3b
   2133c:	d103      	bne.n	21346 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   2133e:	2301      	movs	r3, #1
   21340:	61bb      	str	r3, [r7, #24]
   21342:	e000      	b.n	21346 <_http_client_read_chuked_entity+0x1ba>
					continue;
   21344:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   21346:	697b      	ldr	r3, [r7, #20]
   21348:	3301      	adds	r3, #1
   2134a:	617b      	str	r3, [r7, #20]
   2134c:	69fb      	ldr	r3, [r7, #28]
   2134e:	3b01      	subs	r3, #1
   21350:	61fb      	str	r3, [r7, #28]
   21352:	69fb      	ldr	r3, [r7, #28]
   21354:	2b00      	cmp	r3, #0
   21356:	dca1      	bgt.n	2129c <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   21358:	687b      	ldr	r3, [r7, #4]
   2135a:	22e0      	movs	r2, #224	; 0xe0
   2135c:	589a      	ldr	r2, [r3, r2]
   2135e:	687b      	ldr	r3, [r7, #4]
   21360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   21362:	429a      	cmp	r2, r3
   21364:	dd07      	ble.n	21376 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   21366:	238b      	movs	r3, #139	; 0x8b
   21368:	425a      	negs	r2, r3
   2136a:	687b      	ldr	r3, [r7, #4]
   2136c:	0011      	movs	r1, r2
   2136e:	0018      	movs	r0, r3
   21370:	4b09      	ldr	r3, [pc, #36]	; (21398 <_http_client_read_chuked_entity+0x20c>)
   21372:	4798      	blx	r3
				return;
   21374:	e00d      	b.n	21392 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   21376:	69fb      	ldr	r3, [r7, #28]
   21378:	2b00      	cmp	r3, #0
   2137a:	d105      	bne.n	21388 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   2137c:	687b      	ldr	r3, [r7, #4]
   2137e:	21e0      	movs	r1, #224	; 0xe0
   21380:	2201      	movs	r2, #1
   21382:	4252      	negs	r2, r2
   21384:	505a      	str	r2, [r3, r1]
				return;
   21386:	e004      	b.n	21392 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   21388:	687b      	ldr	r3, [r7, #4]
   2138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2138c:	2b00      	cmp	r3, #0
   2138e:	d000      	beq.n	21392 <_http_client_read_chuked_entity+0x206>
   21390:	e708      	b.n	211a4 <_http_client_read_chuked_entity+0x18>
}
   21392:	46bd      	mov	sp, r7
   21394:	b008      	add	sp, #32
   21396:	bd80      	pop	{r7, pc}
   21398:	00020565 	.word	0x00020565
   2139c:	0002154d 	.word	0x0002154d

000213a0 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   213a0:	b580      	push	{r7, lr}
   213a2:	b086      	sub	sp, #24
   213a4:	af00      	add	r7, sp, #0
   213a6:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   213a8:	687b      	ldr	r3, [r7, #4]
   213aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   213ac:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   213ae:	687b      	ldr	r3, [r7, #4]
   213b0:	22dc      	movs	r2, #220	; 0xdc
   213b2:	589b      	ldr	r3, [r3, r2]
   213b4:	2b00      	cmp	r3, #0
   213b6:	db58      	blt.n	2146a <_http_client_handle_entity+0xca>
   213b8:	687b      	ldr	r3, [r7, #4]
   213ba:	22dc      	movs	r2, #220	; 0xdc
   213bc:	589a      	ldr	r2, [r3, r2]
   213be:	687b      	ldr	r3, [r7, #4]
   213c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   213c2:	429a      	cmp	r2, r3
   213c4:	dc51      	bgt.n	2146a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   213c6:	687b      	ldr	r3, [r7, #4]
   213c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   213ca:	0019      	movs	r1, r3
   213cc:	687b      	ldr	r3, [r7, #4]
   213ce:	22dc      	movs	r2, #220	; 0xdc
   213d0:	589b      	ldr	r3, [r3, r2]
   213d2:	4299      	cmp	r1, r3
   213d4:	da00      	bge.n	213d8 <_http_client_handle_entity+0x38>
   213d6:	e0a9      	b.n	2152c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   213d8:	687b      	ldr	r3, [r7, #4]
   213da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   213dc:	2b00      	cmp	r3, #0
   213de:	d020      	beq.n	21422 <_http_client_handle_entity+0x82>
   213e0:	687b      	ldr	r3, [r7, #4]
   213e2:	22e4      	movs	r2, #228	; 0xe4
   213e4:	5a9b      	ldrh	r3, [r3, r2]
   213e6:	2b00      	cmp	r3, #0
   213e8:	d01b      	beq.n	21422 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   213ea:	687b      	ldr	r3, [r7, #4]
   213ec:	22e4      	movs	r2, #228	; 0xe4
   213ee:	5a9a      	ldrh	r2, [r3, r2]
   213f0:	2308      	movs	r3, #8
   213f2:	18fb      	adds	r3, r7, r3
   213f4:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   213f6:	2308      	movs	r3, #8
   213f8:	18fb      	adds	r3, r7, r3
   213fa:	2200      	movs	r2, #0
   213fc:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   213fe:	687b      	ldr	r3, [r7, #4]
   21400:	22dc      	movs	r2, #220	; 0xdc
   21402:	589b      	ldr	r3, [r3, r2]
   21404:	001a      	movs	r2, r3
   21406:	2308      	movs	r3, #8
   21408:	18fb      	adds	r3, r7, r3
   2140a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   2140c:	2308      	movs	r3, #8
   2140e:	18fb      	adds	r3, r7, r3
   21410:	697a      	ldr	r2, [r7, #20]
   21412:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   21414:	687b      	ldr	r3, [r7, #4]
   21416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   21418:	2208      	movs	r2, #8
   2141a:	18ba      	adds	r2, r7, r2
   2141c:	6878      	ldr	r0, [r7, #4]
   2141e:	2102      	movs	r1, #2
   21420:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   21422:	687b      	ldr	r3, [r7, #4]
   21424:	22d8      	movs	r2, #216	; 0xd8
   21426:	2100      	movs	r1, #0
   21428:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   2142a:	687b      	ldr	r3, [r7, #4]
   2142c:	22e4      	movs	r2, #228	; 0xe4
   2142e:	2100      	movs	r1, #0
   21430:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   21432:	687b      	ldr	r3, [r7, #4]
   21434:	2241      	movs	r2, #65	; 0x41
   21436:	5c9b      	ldrb	r3, [r3, r2]
   21438:	2202      	movs	r2, #2
   2143a:	4013      	ands	r3, r2
   2143c:	b2db      	uxtb	r3, r3
   2143e:	2b00      	cmp	r3, #0
   21440:	d105      	bne.n	2144e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   21442:	687b      	ldr	r3, [r7, #4]
   21444:	2100      	movs	r1, #0
   21446:	0018      	movs	r0, r3
   21448:	4b3b      	ldr	r3, [pc, #236]	; (21538 <_http_client_handle_entity+0x198>)
   2144a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   2144c:	e06e      	b.n	2152c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   2144e:	687b      	ldr	r3, [r7, #4]
   21450:	22dc      	movs	r2, #220	; 0xdc
   21452:	589b      	ldr	r3, [r3, r2]
   21454:	001a      	movs	r2, r3
   21456:	697b      	ldr	r3, [r7, #20]
   21458:	189a      	adds	r2, r3, r2
   2145a:	687b      	ldr	r3, [r7, #4]
   2145c:	0011      	movs	r1, r2
   2145e:	0018      	movs	r0, r3
   21460:	4b36      	ldr	r3, [pc, #216]	; (2153c <_http_client_handle_entity+0x19c>)
   21462:	4798      	blx	r3
				return module->recved_size;
   21464:	687b      	ldr	r3, [r7, #4]
   21466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21468:	e061      	b.n	2152e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   2146a:	687b      	ldr	r3, [r7, #4]
   2146c:	22dc      	movs	r2, #220	; 0xdc
   2146e:	589b      	ldr	r3, [r3, r2]
   21470:	2b00      	cmp	r3, #0
   21472:	db57      	blt.n	21524 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   21474:	687b      	ldr	r3, [r7, #4]
   21476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   21478:	2308      	movs	r3, #8
   2147a:	18fb      	adds	r3, r7, r3
   2147c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   2147e:	2308      	movs	r3, #8
   21480:	18fb      	adds	r3, r7, r3
   21482:	697a      	ldr	r2, [r7, #20]
   21484:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   21486:	687b      	ldr	r3, [r7, #4]
   21488:	22e0      	movs	r2, #224	; 0xe0
   2148a:	589a      	ldr	r2, [r3, r2]
   2148c:	687b      	ldr	r3, [r7, #4]
   2148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21490:	18d2      	adds	r2, r2, r3
   21492:	687b      	ldr	r3, [r7, #4]
   21494:	21e0      	movs	r1, #224	; 0xe0
   21496:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   21498:	687b      	ldr	r3, [r7, #4]
   2149a:	22dc      	movs	r2, #220	; 0xdc
   2149c:	589a      	ldr	r2, [r3, r2]
   2149e:	687b      	ldr	r3, [r7, #4]
   214a0:	21e0      	movs	r1, #224	; 0xe0
   214a2:	585b      	ldr	r3, [r3, r1]
   214a4:	429a      	cmp	r2, r3
   214a6:	dc0c      	bgt.n	214c2 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   214a8:	687b      	ldr	r3, [r7, #4]
   214aa:	22d8      	movs	r2, #216	; 0xd8
   214ac:	2100      	movs	r1, #0
   214ae:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   214b0:	687b      	ldr	r3, [r7, #4]
   214b2:	22e4      	movs	r2, #228	; 0xe4
   214b4:	2100      	movs	r1, #0
   214b6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   214b8:	2308      	movs	r3, #8
   214ba:	18fb      	adds	r3, r7, r3
   214bc:	2201      	movs	r2, #1
   214be:	721a      	strb	r2, [r3, #8]
   214c0:	e003      	b.n	214ca <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   214c2:	2308      	movs	r3, #8
   214c4:	18fb      	adds	r3, r7, r3
   214c6:	2200      	movs	r2, #0
   214c8:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   214ca:	687b      	ldr	r3, [r7, #4]
   214cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   214ce:	2b00      	cmp	r3, #0
   214d0:	d006      	beq.n	214e0 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   214d2:	687b      	ldr	r3, [r7, #4]
   214d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   214d6:	2208      	movs	r2, #8
   214d8:	18ba      	adds	r2, r7, r2
   214da:	6878      	ldr	r0, [r7, #4]
   214dc:	2103      	movs	r1, #3
   214de:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   214e0:	2308      	movs	r3, #8
   214e2:	18fb      	adds	r3, r7, r3
   214e4:	7a1b      	ldrb	r3, [r3, #8]
   214e6:	2b01      	cmp	r3, #1
   214e8:	d112      	bne.n	21510 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   214ea:	687b      	ldr	r3, [r7, #4]
   214ec:	2241      	movs	r2, #65	; 0x41
   214ee:	5c9b      	ldrb	r3, [r3, r2]
   214f0:	2202      	movs	r2, #2
   214f2:	4013      	ands	r3, r2
   214f4:	b2db      	uxtb	r3, r3
   214f6:	2b00      	cmp	r3, #0
   214f8:	d10a      	bne.n	21510 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   214fa:	4b11      	ldr	r3, [pc, #68]	; (21540 <_http_client_handle_entity+0x1a0>)
   214fc:	0018      	movs	r0, r3
   214fe:	4b11      	ldr	r3, [pc, #68]	; (21544 <_http_client_handle_entity+0x1a4>)
   21500:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   21502:	687b      	ldr	r3, [r7, #4]
   21504:	2100      	movs	r1, #0
   21506:	0018      	movs	r0, r3
   21508:	4b0b      	ldr	r3, [pc, #44]	; (21538 <_http_client_handle_entity+0x198>)
   2150a:	4798      	blx	r3
					return 0;
   2150c:	2300      	movs	r3, #0
   2150e:	e00e      	b.n	2152e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   21510:	687b      	ldr	r3, [r7, #4]
   21512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21514:	697a      	ldr	r2, [r7, #20]
   21516:	18d2      	adds	r2, r2, r3
   21518:	687b      	ldr	r3, [r7, #4]
   2151a:	0011      	movs	r1, r2
   2151c:	0018      	movs	r0, r3
   2151e:	4b07      	ldr	r3, [pc, #28]	; (2153c <_http_client_handle_entity+0x19c>)
   21520:	4798      	blx	r3
   21522:	e003      	b.n	2152c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   21524:	687b      	ldr	r3, [r7, #4]
   21526:	0018      	movs	r0, r3
   21528:	4b07      	ldr	r3, [pc, #28]	; (21548 <_http_client_handle_entity+0x1a8>)
   2152a:	4798      	blx	r3
		}
	}

	return 0;
   2152c:	2300      	movs	r3, #0
}
   2152e:	0018      	movs	r0, r3
   21530:	46bd      	mov	sp, r7
   21532:	b006      	add	sp, #24
   21534:	bd80      	pop	{r7, pc}
   21536:	46c0      	nop			; (mov r8, r8)
   21538:	00020565 	.word	0x00020565
   2153c:	0002154d 	.word	0x0002154d
   21540:	00029be4 	.word	0x00029be4
   21544:	000249d9 	.word	0x000249d9
   21548:	0002118d 	.word	0x0002118d

0002154c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   2154c:	b580      	push	{r7, lr}
   2154e:	b084      	sub	sp, #16
   21550:	af00      	add	r7, sp, #0
   21552:	6078      	str	r0, [r7, #4]
   21554:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   21556:	687b      	ldr	r3, [r7, #4]
   21558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2155a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   2155c:	687b      	ldr	r3, [r7, #4]
   2155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21560:	001a      	movs	r2, r3
   21562:	683b      	ldr	r3, [r7, #0]
   21564:	1ad2      	subs	r2, r2, r3
   21566:	68fb      	ldr	r3, [r7, #12]
   21568:	18d3      	adds	r3, r2, r3
   2156a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   2156c:	68bb      	ldr	r3, [r7, #8]
   2156e:	2b00      	cmp	r3, #0
   21570:	dd09      	ble.n	21586 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   21572:	68ba      	ldr	r2, [r7, #8]
   21574:	6839      	ldr	r1, [r7, #0]
   21576:	68fb      	ldr	r3, [r7, #12]
   21578:	0018      	movs	r0, r3
   2157a:	4b06      	ldr	r3, [pc, #24]	; (21594 <_http_client_move_buffer+0x48>)
   2157c:	4798      	blx	r3
		module->recved_size = remain;
   2157e:	68ba      	ldr	r2, [r7, #8]
   21580:	687b      	ldr	r3, [r7, #4]
   21582:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   21584:	e002      	b.n	2158c <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   21586:	687b      	ldr	r3, [r7, #4]
   21588:	2200      	movs	r2, #0
   2158a:	645a      	str	r2, [r3, #68]	; 0x44
}
   2158c:	46c0      	nop			; (mov r8, r8)
   2158e:	46bd      	mov	sp, r7
   21590:	b004      	add	sp, #16
   21592:	bd80      	pop	{r7, pc}
   21594:	00024793 	.word	0x00024793

00021598 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   21598:	b580      	push	{r7, lr}
   2159a:	b084      	sub	sp, #16
   2159c:	af00      	add	r7, sp, #0
   2159e:	60f8      	str	r0, [r7, #12]
   215a0:	60b9      	str	r1, [r7, #8]
   215a2:	607a      	str	r2, [r7, #4]
   215a4:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   215a6:	68fb      	ldr	r3, [r7, #12]
   215a8:	687a      	ldr	r2, [r7, #4]
   215aa:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   215ac:	68fb      	ldr	r3, [r7, #12]
   215ae:	68ba      	ldr	r2, [r7, #8]
   215b0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   215b2:	68fb      	ldr	r3, [r7, #12]
   215b4:	2200      	movs	r2, #0
   215b6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   215b8:	68fb      	ldr	r3, [r7, #12]
   215ba:	683a      	ldr	r2, [r7, #0]
   215bc:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   215be:	68fb      	ldr	r3, [r7, #12]
   215c0:	69ba      	ldr	r2, [r7, #24]
   215c2:	60da      	str	r2, [r3, #12]
}
   215c4:	46c0      	nop			; (mov r8, r8)
   215c6:	46bd      	mov	sp, r7
   215c8:	b004      	add	sp, #16
   215ca:	bd80      	pop	{r7, pc}

000215cc <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   215cc:	b580      	push	{r7, lr}
   215ce:	b084      	sub	sp, #16
   215d0:	af00      	add	r7, sp, #0
   215d2:	6078      	str	r0, [r7, #4]
   215d4:	000a      	movs	r2, r1
   215d6:	1cfb      	adds	r3, r7, #3
   215d8:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   215da:	687b      	ldr	r3, [r7, #4]
   215dc:	681a      	ldr	r2, [r3, #0]
   215de:	687b      	ldr	r3, [r7, #4]
   215e0:	685b      	ldr	r3, [r3, #4]
   215e2:	1ad3      	subs	r3, r2, r3
   215e4:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   215e6:	68fb      	ldr	r3, [r7, #12]
   215e8:	2b00      	cmp	r3, #0
   215ea:	dc03      	bgt.n	215f4 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   215ec:	687b      	ldr	r3, [r7, #4]
   215ee:	0018      	movs	r0, r3
   215f0:	4b08      	ldr	r3, [pc, #32]	; (21614 <stream_writer_send_8+0x48>)
   215f2:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   215f4:	687b      	ldr	r3, [r7, #4]
   215f6:	6919      	ldr	r1, [r3, #16]
   215f8:	687b      	ldr	r3, [r7, #4]
   215fa:	685b      	ldr	r3, [r3, #4]
   215fc:	1c58      	adds	r0, r3, #1
   215fe:	687a      	ldr	r2, [r7, #4]
   21600:	6050      	str	r0, [r2, #4]
   21602:	18cb      	adds	r3, r1, r3
   21604:	1cfa      	adds	r2, r7, #3
   21606:	7812      	ldrb	r2, [r2, #0]
   21608:	701a      	strb	r2, [r3, #0]
}
   2160a:	46c0      	nop			; (mov r8, r8)
   2160c:	46bd      	mov	sp, r7
   2160e:	b004      	add	sp, #16
   21610:	bd80      	pop	{r7, pc}
   21612:	46c0      	nop			; (mov r8, r8)
   21614:	00021655 	.word	0x00021655

00021618 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   21618:	b580      	push	{r7, lr}
   2161a:	b084      	sub	sp, #16
   2161c:	af00      	add	r7, sp, #0
   2161e:	60f8      	str	r0, [r7, #12]
   21620:	60b9      	str	r1, [r7, #8]
   21622:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   21624:	e00d      	b.n	21642 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   21626:	68bb      	ldr	r3, [r7, #8]
   21628:	781b      	ldrb	r3, [r3, #0]
   2162a:	b25a      	sxtb	r2, r3
   2162c:	68fb      	ldr	r3, [r7, #12]
   2162e:	0011      	movs	r1, r2
   21630:	0018      	movs	r0, r3
   21632:	4b07      	ldr	r3, [pc, #28]	; (21650 <stream_writer_send_buffer+0x38>)
   21634:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   21636:	687b      	ldr	r3, [r7, #4]
   21638:	3b01      	subs	r3, #1
   2163a:	607b      	str	r3, [r7, #4]
   2163c:	68bb      	ldr	r3, [r7, #8]
   2163e:	3301      	adds	r3, #1
   21640:	60bb      	str	r3, [r7, #8]
   21642:	687b      	ldr	r3, [r7, #4]
   21644:	2b00      	cmp	r3, #0
   21646:	d1ee      	bne.n	21626 <stream_writer_send_buffer+0xe>
	}
}
   21648:	46c0      	nop			; (mov r8, r8)
   2164a:	46bd      	mov	sp, r7
   2164c:	b004      	add	sp, #16
   2164e:	bd80      	pop	{r7, pc}
   21650:	000215cd 	.word	0x000215cd

00021654 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   21654:	b590      	push	{r4, r7, lr}
   21656:	b083      	sub	sp, #12
   21658:	af00      	add	r7, sp, #0
   2165a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   2165c:	687b      	ldr	r3, [r7, #4]
   2165e:	685b      	ldr	r3, [r3, #4]
   21660:	2b00      	cmp	r3, #0
   21662:	d00c      	beq.n	2167e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   21664:	687b      	ldr	r3, [r7, #4]
   21666:	689c      	ldr	r4, [r3, #8]
   21668:	687b      	ldr	r3, [r7, #4]
   2166a:	68d8      	ldr	r0, [r3, #12]
   2166c:	687b      	ldr	r3, [r7, #4]
   2166e:	6919      	ldr	r1, [r3, #16]
   21670:	687b      	ldr	r3, [r7, #4]
   21672:	685b      	ldr	r3, [r3, #4]
   21674:	001a      	movs	r2, r3
   21676:	47a0      	blx	r4
		writer->written = 0;
   21678:	687b      	ldr	r3, [r7, #4]
   2167a:	2200      	movs	r2, #0
   2167c:	605a      	str	r2, [r3, #4]
	}
}
   2167e:	46c0      	nop			; (mov r8, r8)
   21680:	46bd      	mov	sp, r7
   21682:	b003      	add	sp, #12
   21684:	bd90      	pop	{r4, r7, pc}
	...

00021688 <system_cpu_clock_get_hz>:
{
   21688:	b580      	push	{r7, lr}
   2168a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   2168c:	2000      	movs	r0, #0
   2168e:	4b05      	ldr	r3, [pc, #20]	; (216a4 <system_cpu_clock_get_hz+0x1c>)
   21690:	4798      	blx	r3
   21692:	0002      	movs	r2, r0
   21694:	4b04      	ldr	r3, [pc, #16]	; (216a8 <system_cpu_clock_get_hz+0x20>)
   21696:	7a1b      	ldrb	r3, [r3, #8]
   21698:	b2db      	uxtb	r3, r3
   2169a:	40da      	lsrs	r2, r3
   2169c:	0013      	movs	r3, r2
}
   2169e:	0018      	movs	r0, r3
   216a0:	46bd      	mov	sp, r7
   216a2:	bd80      	pop	{r7, pc}
   216a4:	00019069 	.word	0x00019069
   216a8:	40000400 	.word	0x40000400

000216ac <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   216ac:	b580      	push	{r7, lr}
   216ae:	b084      	sub	sp, #16
   216b0:	af00      	add	r7, sp, #0
   216b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   216b4:	687b      	ldr	r3, [r7, #4]
   216b6:	681b      	ldr	r3, [r3, #0]
   216b8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   216ba:	46c0      	nop			; (mov r8, r8)
   216bc:	68fb      	ldr	r3, [r7, #12]
   216be:	689b      	ldr	r3, [r3, #8]
   216c0:	2202      	movs	r2, #2
   216c2:	4013      	ands	r3, r2
   216c4:	d1fa      	bne.n	216bc <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   216c6:	68fb      	ldr	r3, [r7, #12]
   216c8:	681b      	ldr	r3, [r3, #0]
   216ca:	2202      	movs	r2, #2
   216cc:	431a      	orrs	r2, r3
   216ce:	68fb      	ldr	r3, [r7, #12]
   216d0:	601a      	str	r2, [r3, #0]
}
   216d2:	46c0      	nop			; (mov r8, r8)
   216d4:	46bd      	mov	sp, r7
   216d6:	b004      	add	sp, #16
   216d8:	bd80      	pop	{r7, pc}
	...

000216dc <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   216dc:	b580      	push	{r7, lr}
   216de:	b082      	sub	sp, #8
   216e0:	af00      	add	r7, sp, #0
   216e2:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   216e4:	4b04      	ldr	r3, [pc, #16]	; (216f8 <sw_timer_tcc_callback+0x1c>)
   216e6:	681b      	ldr	r3, [r3, #0]
   216e8:	1c5a      	adds	r2, r3, #1
   216ea:	4b03      	ldr	r3, [pc, #12]	; (216f8 <sw_timer_tcc_callback+0x1c>)
   216ec:	601a      	str	r2, [r3, #0]
}
   216ee:	46c0      	nop			; (mov r8, r8)
   216f0:	46bd      	mov	sp, r7
   216f2:	b002      	add	sp, #8
   216f4:	bd80      	pop	{r7, pc}
   216f6:	46c0      	nop			; (mov r8, r8)
   216f8:	20004348 	.word	0x20004348

000216fc <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   216fc:	b580      	push	{r7, lr}
   216fe:	b082      	sub	sp, #8
   21700:	af00      	add	r7, sp, #0
   21702:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   21704:	687b      	ldr	r3, [r7, #4]
   21706:	2264      	movs	r2, #100	; 0x64
   21708:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   2170a:	687b      	ldr	r3, [r7, #4]
   2170c:	2200      	movs	r2, #0
   2170e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   21710:	687b      	ldr	r3, [r7, #4]
   21712:	2200      	movs	r2, #0
   21714:	705a      	strb	r2, [r3, #1]
}
   21716:	46c0      	nop			; (mov r8, r8)
   21718:	46bd      	mov	sp, r7
   2171a:	b002      	add	sp, #8
   2171c:	bd80      	pop	{r7, pc}
	...

00021720 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   21720:	b590      	push	{r4, r7, lr}
   21722:	b0b1      	sub	sp, #196	; 0xc4
   21724:	af00      	add	r7, sp, #0
   21726:	6078      	str	r0, [r7, #4]
   21728:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   2172a:	230c      	movs	r3, #12
   2172c:	18fb      	adds	r3, r7, r3
   2172e:	4a2e      	ldr	r2, [pc, #184]	; (217e8 <sw_timer_init+0xc8>)
   21730:	ca13      	ldmia	r2!, {r0, r1, r4}
   21732:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   21734:	683b      	ldr	r3, [r7, #0]
   21736:	885b      	ldrh	r3, [r3, #2]
   21738:	001a      	movs	r2, r3
   2173a:	687b      	ldr	r3, [r7, #4]
   2173c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   2173e:	687b      	ldr	r3, [r7, #4]
   21740:	3314      	adds	r3, #20
   21742:	22bc      	movs	r2, #188	; 0xbc
   21744:	18ba      	adds	r2, r7, r2
   21746:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   21748:	683b      	ldr	r3, [r7, #0]
   2174a:	781b      	ldrb	r3, [r3, #0]
   2174c:	001a      	movs	r2, r3
   2174e:	230c      	movs	r3, #12
   21750:	18fb      	adds	r3, r7, r3
   21752:	0092      	lsls	r2, r2, #2
   21754:	58d2      	ldr	r2, [r2, r3]
   21756:	2318      	movs	r3, #24
   21758:	18fb      	adds	r3, r7, r3
   2175a:	0011      	movs	r1, r2
   2175c:	0018      	movs	r0, r3
   2175e:	4b23      	ldr	r3, [pc, #140]	; (217ec <sw_timer_init+0xcc>)
   21760:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   21762:	4b23      	ldr	r3, [pc, #140]	; (217f0 <sw_timer_init+0xd0>)
   21764:	4798      	blx	r3
   21766:	0004      	movs	r4, r0
   21768:	683b      	ldr	r3, [r7, #0]
   2176a:	885b      	ldrh	r3, [r3, #2]
   2176c:	001a      	movs	r2, r3
   2176e:	4b21      	ldr	r3, [pc, #132]	; (217f4 <sw_timer_init+0xd4>)
   21770:	0011      	movs	r1, r2
   21772:	22fa      	movs	r2, #250	; 0xfa
   21774:	0210      	lsls	r0, r2, #8
   21776:	4798      	blx	r3
   21778:	0003      	movs	r3, r0
   2177a:	001a      	movs	r2, r3
   2177c:	4b1e      	ldr	r3, [pc, #120]	; (217f8 <sw_timer_init+0xd8>)
   2177e:	0011      	movs	r1, r2
   21780:	0020      	movs	r0, r4
   21782:	4798      	blx	r3
   21784:	0003      	movs	r3, r0
   21786:	001a      	movs	r2, r3
   21788:	2318      	movs	r3, #24
   2178a:	18fb      	adds	r3, r7, r3
   2178c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   2178e:	2318      	movs	r3, #24
   21790:	18fb      	adds	r3, r7, r3
   21792:	2205      	movs	r2, #5
   21794:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   21796:	683b      	ldr	r3, [r7, #0]
   21798:	781b      	ldrb	r3, [r3, #0]
   2179a:	001a      	movs	r2, r3
   2179c:	230c      	movs	r3, #12
   2179e:	18fb      	adds	r3, r7, r3
   217a0:	0092      	lsls	r2, r2, #2
   217a2:	58d1      	ldr	r1, [r2, r3]
   217a4:	2318      	movs	r3, #24
   217a6:	18fa      	adds	r2, r7, r3
   217a8:	23bc      	movs	r3, #188	; 0xbc
   217aa:	18fb      	adds	r3, r7, r3
   217ac:	681b      	ldr	r3, [r3, #0]
   217ae:	0018      	movs	r0, r3
   217b0:	4b12      	ldr	r3, [pc, #72]	; (217fc <sw_timer_init+0xdc>)
   217b2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   217b4:	683b      	ldr	r3, [r7, #0]
   217b6:	785b      	ldrb	r3, [r3, #1]
   217b8:	3308      	adds	r3, #8
   217ba:	b2da      	uxtb	r2, r3
   217bc:	4910      	ldr	r1, [pc, #64]	; (21800 <sw_timer_init+0xe0>)
   217be:	23bc      	movs	r3, #188	; 0xbc
   217c0:	18fb      	adds	r3, r7, r3
   217c2:	681b      	ldr	r3, [r3, #0]
   217c4:	0018      	movs	r0, r3
   217c6:	4b0f      	ldr	r3, [pc, #60]	; (21804 <sw_timer_init+0xe4>)
   217c8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   217ca:	683b      	ldr	r3, [r7, #0]
   217cc:	785b      	ldrb	r3, [r3, #1]
   217ce:	3308      	adds	r3, #8
   217d0:	b2da      	uxtb	r2, r3
   217d2:	23bc      	movs	r3, #188	; 0xbc
   217d4:	18fb      	adds	r3, r7, r3
   217d6:	681b      	ldr	r3, [r3, #0]
   217d8:	0011      	movs	r1, r2
   217da:	0018      	movs	r0, r3
   217dc:	4b0a      	ldr	r3, [pc, #40]	; (21808 <sw_timer_init+0xe8>)
   217de:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   217e0:	46c0      	nop			; (mov r8, r8)
   217e2:	46bd      	mov	sp, r7
   217e4:	b031      	add	sp, #196	; 0xc4
   217e6:	bd90      	pop	{r4, r7, pc}
   217e8:	00029c24 	.word	0x00029c24
   217ec:	00019601 	.word	0x00019601
   217f0:	00021689 	.word	0x00021689
   217f4:	00021e11 	.word	0x00021e11
   217f8:	00021cfd 	.word	0x00021cfd
   217fc:	00019c5d 	.word	0x00019c5d
   21800:	000216dd 	.word	0x000216dd
   21804:	0001a075 	.word	0x0001a075
   21808:	0001a0b5 	.word	0x0001a0b5

0002180c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   2180c:	b580      	push	{r7, lr}
   2180e:	b084      	sub	sp, #16
   21810:	af00      	add	r7, sp, #0
   21812:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   21814:	687b      	ldr	r3, [r7, #4]
   21816:	3314      	adds	r3, #20
   21818:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   2181a:	68fb      	ldr	r3, [r7, #12]
   2181c:	0018      	movs	r0, r3
   2181e:	4b03      	ldr	r3, [pc, #12]	; (2182c <sw_timer_enable+0x20>)
   21820:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   21822:	46c0      	nop			; (mov r8, r8)
   21824:	46bd      	mov	sp, r7
   21826:	b004      	add	sp, #16
   21828:	bd80      	pop	{r7, pc}
   2182a:	46c0      	nop			; (mov r8, r8)
   2182c:	000216ad 	.word	0x000216ad

00021830 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   21830:	b580      	push	{r7, lr}
   21832:	b086      	sub	sp, #24
   21834:	af00      	add	r7, sp, #0
   21836:	60f8      	str	r0, [r7, #12]
   21838:	60b9      	str	r1, [r7, #8]
   2183a:	607a      	str	r2, [r7, #4]
   2183c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   2183e:	2300      	movs	r3, #0
   21840:	617b      	str	r3, [r7, #20]
   21842:	e032      	b.n	218aa <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   21844:	68f9      	ldr	r1, [r7, #12]
   21846:	697a      	ldr	r2, [r7, #20]
   21848:	0013      	movs	r3, r2
   2184a:	009b      	lsls	r3, r3, #2
   2184c:	189b      	adds	r3, r3, r2
   2184e:	009b      	lsls	r3, r3, #2
   21850:	5c5b      	ldrb	r3, [r3, r1]
   21852:	07db      	lsls	r3, r3, #31
   21854:	0fdb      	lsrs	r3, r3, #31
   21856:	b2db      	uxtb	r3, r3
   21858:	2b00      	cmp	r3, #0
   2185a:	d123      	bne.n	218a4 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   2185c:	697a      	ldr	r2, [r7, #20]
   2185e:	0013      	movs	r3, r2
   21860:	009b      	lsls	r3, r3, #2
   21862:	189b      	adds	r3, r3, r2
   21864:	009b      	lsls	r3, r3, #2
   21866:	68fa      	ldr	r2, [r7, #12]
   21868:	18d3      	adds	r3, r2, r3
   2186a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   2186c:	693b      	ldr	r3, [r7, #16]
   2186e:	68ba      	ldr	r2, [r7, #8]
   21870:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   21872:	693b      	ldr	r3, [r7, #16]
   21874:	781a      	ldrb	r2, [r3, #0]
   21876:	2102      	movs	r1, #2
   21878:	438a      	bics	r2, r1
   2187a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   2187c:	693b      	ldr	r3, [r7, #16]
   2187e:	687a      	ldr	r2, [r7, #4]
   21880:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   21882:	68fb      	ldr	r3, [r7, #12]
   21884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   21886:	4b0d      	ldr	r3, [pc, #52]	; (218bc <sw_timer_register_callback+0x8c>)
   21888:	0011      	movs	r1, r2
   2188a:	6838      	ldr	r0, [r7, #0]
   2188c:	4798      	blx	r3
   2188e:	0003      	movs	r3, r0
   21890:	001a      	movs	r2, r3
   21892:	693b      	ldr	r3, [r7, #16]
   21894:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   21896:	693b      	ldr	r3, [r7, #16]
   21898:	781a      	ldrb	r2, [r3, #0]
   2189a:	2101      	movs	r1, #1
   2189c:	430a      	orrs	r2, r1
   2189e:	701a      	strb	r2, [r3, #0]
			return index;
   218a0:	697b      	ldr	r3, [r7, #20]
   218a2:	e007      	b.n	218b4 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   218a4:	697b      	ldr	r3, [r7, #20]
   218a6:	3301      	adds	r3, #1
   218a8:	617b      	str	r3, [r7, #20]
   218aa:	697b      	ldr	r3, [r7, #20]
   218ac:	2b00      	cmp	r3, #0
   218ae:	ddc9      	ble.n	21844 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   218b0:	2301      	movs	r3, #1
   218b2:	425b      	negs	r3, r3
}
   218b4:	0018      	movs	r0, r3
   218b6:	46bd      	mov	sp, r7
   218b8:	b006      	add	sp, #24
   218ba:	bd80      	pop	{r7, pc}
   218bc:	00021cfd 	.word	0x00021cfd

000218c0 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   218c0:	b580      	push	{r7, lr}
   218c2:	b086      	sub	sp, #24
   218c4:	af00      	add	r7, sp, #0
   218c6:	60f8      	str	r0, [r7, #12]
   218c8:	60b9      	str	r1, [r7, #8]
   218ca:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   218cc:	68ba      	ldr	r2, [r7, #8]
   218ce:	0013      	movs	r3, r2
   218d0:	009b      	lsls	r3, r3, #2
   218d2:	189b      	adds	r3, r3, r2
   218d4:	009b      	lsls	r3, r3, #2
   218d6:	68fa      	ldr	r2, [r7, #12]
   218d8:	18d3      	adds	r3, r2, r3
   218da:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   218dc:	697b      	ldr	r3, [r7, #20]
   218de:	781a      	ldrb	r2, [r3, #0]
   218e0:	2102      	movs	r1, #2
   218e2:	430a      	orrs	r2, r1
   218e4:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   218e6:	68fb      	ldr	r3, [r7, #12]
   218e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   218ea:	4b07      	ldr	r3, [pc, #28]	; (21908 <sw_timer_enable_callback+0x48>)
   218ec:	0011      	movs	r1, r2
   218ee:	6878      	ldr	r0, [r7, #4]
   218f0:	4798      	blx	r3
   218f2:	0003      	movs	r3, r0
   218f4:	001a      	movs	r2, r3
   218f6:	4b05      	ldr	r3, [pc, #20]	; (2190c <sw_timer_enable_callback+0x4c>)
   218f8:	681b      	ldr	r3, [r3, #0]
   218fa:	18d2      	adds	r2, r2, r3
   218fc:	697b      	ldr	r3, [r7, #20]
   218fe:	611a      	str	r2, [r3, #16]
}
   21900:	46c0      	nop			; (mov r8, r8)
   21902:	46bd      	mov	sp, r7
   21904:	b006      	add	sp, #24
   21906:	bd80      	pop	{r7, pc}
   21908:	00021cfd 	.word	0x00021cfd
   2190c:	20004348 	.word	0x20004348

00021910 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   21910:	b580      	push	{r7, lr}
   21912:	b084      	sub	sp, #16
   21914:	af00      	add	r7, sp, #0
   21916:	6078      	str	r0, [r7, #4]
   21918:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   2191a:	683a      	ldr	r2, [r7, #0]
   2191c:	0013      	movs	r3, r2
   2191e:	009b      	lsls	r3, r3, #2
   21920:	189b      	adds	r3, r3, r2
   21922:	009b      	lsls	r3, r3, #2
   21924:	687a      	ldr	r2, [r7, #4]
   21926:	18d3      	adds	r3, r2, r3
   21928:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   2192a:	68fb      	ldr	r3, [r7, #12]
   2192c:	781a      	ldrb	r2, [r3, #0]
   2192e:	2102      	movs	r1, #2
   21930:	438a      	bics	r2, r1
   21932:	701a      	strb	r2, [r3, #0]
}
   21934:	46c0      	nop			; (mov r8, r8)
   21936:	46bd      	mov	sp, r7
   21938:	b004      	add	sp, #16
   2193a:	bd80      	pop	{r7, pc}

0002193c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   2193c:	b590      	push	{r4, r7, lr}
   2193e:	b085      	sub	sp, #20
   21940:	af00      	add	r7, sp, #0
   21942:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   21944:	2300      	movs	r3, #0
   21946:	60fb      	str	r3, [r7, #12]
   21948:	e053      	b.n	219f2 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   2194a:	6879      	ldr	r1, [r7, #4]
   2194c:	68fa      	ldr	r2, [r7, #12]
   2194e:	0013      	movs	r3, r2
   21950:	009b      	lsls	r3, r3, #2
   21952:	189b      	adds	r3, r3, r2
   21954:	009b      	lsls	r3, r3, #2
   21956:	5c5b      	ldrb	r3, [r3, r1]
   21958:	07db      	lsls	r3, r3, #31
   2195a:	0fdb      	lsrs	r3, r3, #31
   2195c:	b2db      	uxtb	r3, r3
   2195e:	2b00      	cmp	r3, #0
   21960:	d044      	beq.n	219ec <sw_timer_task+0xb0>
   21962:	6879      	ldr	r1, [r7, #4]
   21964:	68fa      	ldr	r2, [r7, #12]
   21966:	0013      	movs	r3, r2
   21968:	009b      	lsls	r3, r3, #2
   2196a:	189b      	adds	r3, r3, r2
   2196c:	009b      	lsls	r3, r3, #2
   2196e:	5c5b      	ldrb	r3, [r3, r1]
   21970:	079b      	lsls	r3, r3, #30
   21972:	0fdb      	lsrs	r3, r3, #31
   21974:	b2db      	uxtb	r3, r3
   21976:	2b00      	cmp	r3, #0
   21978:	d038      	beq.n	219ec <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   2197a:	68fa      	ldr	r2, [r7, #12]
   2197c:	0013      	movs	r3, r2
   2197e:	009b      	lsls	r3, r3, #2
   21980:	189b      	adds	r3, r3, r2
   21982:	009b      	lsls	r3, r3, #2
   21984:	687a      	ldr	r2, [r7, #4]
   21986:	18d3      	adds	r3, r2, r3
   21988:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   2198a:	68bb      	ldr	r3, [r7, #8]
   2198c:	691a      	ldr	r2, [r3, #16]
   2198e:	4b1c      	ldr	r3, [pc, #112]	; (21a00 <sw_timer_task+0xc4>)
   21990:	681b      	ldr	r3, [r3, #0]
   21992:	1ad3      	subs	r3, r2, r3
   21994:	d52a      	bpl.n	219ec <sw_timer_task+0xb0>
   21996:	68bb      	ldr	r3, [r7, #8]
   21998:	781b      	ldrb	r3, [r3, #0]
   2199a:	2204      	movs	r2, #4
   2199c:	4013      	ands	r3, r2
   2199e:	b2db      	uxtb	r3, r3
   219a0:	2b00      	cmp	r3, #0
   219a2:	d123      	bne.n	219ec <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   219a4:	68bb      	ldr	r3, [r7, #8]
   219a6:	781a      	ldrb	r2, [r3, #0]
   219a8:	2104      	movs	r1, #4
   219aa:	430a      	orrs	r2, r1
   219ac:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   219ae:	68bb      	ldr	r3, [r7, #8]
   219b0:	68db      	ldr	r3, [r3, #12]
   219b2:	2b00      	cmp	r3, #0
   219b4:	d007      	beq.n	219c6 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   219b6:	68bb      	ldr	r3, [r7, #8]
   219b8:	68da      	ldr	r2, [r3, #12]
   219ba:	4b11      	ldr	r3, [pc, #68]	; (21a00 <sw_timer_task+0xc4>)
   219bc:	681b      	ldr	r3, [r3, #0]
   219be:	18d2      	adds	r2, r2, r3
   219c0:	68bb      	ldr	r3, [r7, #8]
   219c2:	611a      	str	r2, [r3, #16]
   219c4:	e004      	b.n	219d0 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   219c6:	68bb      	ldr	r3, [r7, #8]
   219c8:	781a      	ldrb	r2, [r3, #0]
   219ca:	2102      	movs	r1, #2
   219cc:	438a      	bics	r2, r1
   219ce:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   219d0:	68bb      	ldr	r3, [r7, #8]
   219d2:	685c      	ldr	r4, [r3, #4]
   219d4:	68bb      	ldr	r3, [r7, #8]
   219d6:	689a      	ldr	r2, [r3, #8]
   219d8:	68bb      	ldr	r3, [r7, #8]
   219da:	68db      	ldr	r3, [r3, #12]
   219dc:	68f9      	ldr	r1, [r7, #12]
   219de:	6878      	ldr	r0, [r7, #4]
   219e0:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   219e2:	68bb      	ldr	r3, [r7, #8]
   219e4:	781a      	ldrb	r2, [r3, #0]
   219e6:	2104      	movs	r1, #4
   219e8:	438a      	bics	r2, r1
   219ea:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   219ec:	68fb      	ldr	r3, [r7, #12]
   219ee:	3301      	adds	r3, #1
   219f0:	60fb      	str	r3, [r7, #12]
   219f2:	68fb      	ldr	r3, [r7, #12]
   219f4:	2b00      	cmp	r3, #0
   219f6:	dda8      	ble.n	2194a <sw_timer_task+0xe>
			}
		}
	}
}
   219f8:	46c0      	nop			; (mov r8, r8)
   219fa:	46bd      	mov	sp, r7
   219fc:	b005      	add	sp, #20
   219fe:	bd90      	pop	{r4, r7, pc}
   21a00:	20004348 	.word	0x20004348

00021a04 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   21a04:	b580      	push	{r7, lr}
   21a06:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   21a08:	4b06      	ldr	r3, [pc, #24]	; (21a24 <main+0x20>)
   21a0a:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   21a0c:	4b06      	ldr	r3, [pc, #24]	; (21a28 <main+0x24>)
   21a0e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   21a10:	2001      	movs	r0, #1
   21a12:	4b06      	ldr	r3, [pc, #24]	; (21a2c <main+0x28>)
   21a14:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   21a16:	4b06      	ldr	r3, [pc, #24]	; (21a30 <main+0x2c>)
   21a18:	4798      	blx	r3

    return 0;  // Will not get here
   21a1a:	2300      	movs	r3, #0
}
   21a1c:	0018      	movs	r0, r3
   21a1e:	46bd      	mov	sp, r7
   21a20:	bd80      	pop	{r7, pc}
   21a22:	46c0      	nop			; (mov r8, r8)
   21a24:	000194f5 	.word	0x000194f5
   21a28:	0000cf99 	.word	0x0000cf99
   21a2c:	00007661 	.word	0x00007661
   21a30:	0000b5f1 	.word	0x0000b5f1

00021a34 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   21a34:	b580      	push	{r7, lr}
   21a36:	b082      	sub	sp, #8
   21a38:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   21a3a:	4b2e      	ldr	r3, [pc, #184]	; (21af4 <vApplicationDaemonTaskStartupHook+0xc0>)
   21a3c:	0018      	movs	r0, r3
   21a3e:	4b2e      	ldr	r3, [pc, #184]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21a40:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   21a42:	4b2e      	ldr	r3, [pc, #184]	; (21afc <vApplicationDaemonTaskStartupHook+0xc8>)
   21a44:	0018      	movs	r0, r3
   21a46:	4b2c      	ldr	r3, [pc, #176]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21a48:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   21a4a:	4b2d      	ldr	r3, [pc, #180]	; (21b00 <vApplicationDaemonTaskStartupHook+0xcc>)
   21a4c:	4798      	blx	r3
   21a4e:	1e03      	subs	r3, r0, #0
   21a50:	d004      	beq.n	21a5c <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   21a52:	4b2c      	ldr	r3, [pc, #176]	; (21b04 <vApplicationDaemonTaskStartupHook+0xd0>)
   21a54:	0018      	movs	r0, r3
   21a56:	4b28      	ldr	r3, [pc, #160]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21a58:	4798      	blx	r3
   21a5a:	e003      	b.n	21a64 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   21a5c:	4b2a      	ldr	r3, [pc, #168]	; (21b08 <vApplicationDaemonTaskStartupHook+0xd4>)
   21a5e:	0018      	movs	r0, r3
   21a60:	4b25      	ldr	r3, [pc, #148]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21a62:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   21a64:	4b29      	ldr	r3, [pc, #164]	; (21b0c <vApplicationDaemonTaskStartupHook+0xd8>)
   21a66:	4798      	blx	r3
   21a68:	1e03      	subs	r3, r0, #0
   21a6a:	d004      	beq.n	21a76 <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   21a6c:	4b28      	ldr	r3, [pc, #160]	; (21b10 <vApplicationDaemonTaskStartupHook+0xdc>)
   21a6e:	0018      	movs	r0, r3
   21a70:	4b21      	ldr	r3, [pc, #132]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21a72:	4798      	blx	r3
   21a74:	e003      	b.n	21a7e <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   21a76:	4b27      	ldr	r3, [pc, #156]	; (21b14 <vApplicationDaemonTaskStartupHook+0xe0>)
   21a78:	0018      	movs	r0, r3
   21a7a:	4b1f      	ldr	r3, [pc, #124]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21a7c:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   21a7e:	1dfb      	adds	r3, r7, #7
   21a80:	2200      	movs	r2, #0
   21a82:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   21a84:	4b24      	ldr	r3, [pc, #144]	; (21b18 <vApplicationDaemonTaskStartupHook+0xe4>)
   21a86:	4798      	blx	r3
   21a88:	0002      	movs	r2, r0
   21a8a:	1dfb      	adds	r3, r7, #7
   21a8c:	0019      	movs	r1, r3
   21a8e:	0010      	movs	r0, r2
   21a90:	4b22      	ldr	r3, [pc, #136]	; (21b1c <vApplicationDaemonTaskStartupHook+0xe8>)
   21a92:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   21a94:	1dfb      	adds	r3, r7, #7
   21a96:	781b      	ldrb	r3, [r3, #0]
   21a98:	2b6c      	cmp	r3, #108	; 0x6c
   21a9a:	d004      	beq.n	21aa6 <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   21a9c:	4b20      	ldr	r3, [pc, #128]	; (21b20 <vApplicationDaemonTaskStartupHook+0xec>)
   21a9e:	0018      	movs	r0, r3
   21aa0:	4b15      	ldr	r3, [pc, #84]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21aa2:	4798      	blx	r3
   21aa4:	e010      	b.n	21ac8 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   21aa6:	4b1f      	ldr	r3, [pc, #124]	; (21b24 <vApplicationDaemonTaskStartupHook+0xf0>)
   21aa8:	0018      	movs	r0, r3
   21aaa:	4b13      	ldr	r3, [pc, #76]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21aac:	4798      	blx	r3
        if (InitImu() == 0) {
   21aae:	4b1e      	ldr	r3, [pc, #120]	; (21b28 <vApplicationDaemonTaskStartupHook+0xf4>)
   21ab0:	4798      	blx	r3
   21ab2:	1e03      	subs	r3, r0, #0
   21ab4:	d104      	bne.n	21ac0 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   21ab6:	4b1d      	ldr	r3, [pc, #116]	; (21b2c <vApplicationDaemonTaskStartupHook+0xf8>)
   21ab8:	0018      	movs	r0, r3
   21aba:	4b0f      	ldr	r3, [pc, #60]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21abc:	4798      	blx	r3
   21abe:	e003      	b.n	21ac8 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   21ac0:	4b1b      	ldr	r3, [pc, #108]	; (21b30 <vApplicationDaemonTaskStartupHook+0xfc>)
   21ac2:	0018      	movs	r0, r3
   21ac4:	4b0c      	ldr	r3, [pc, #48]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21ac6:	4798      	blx	r3
        }
    }

    SerialConsoleWriteString("Initializing distance sensor\r\n");
   21ac8:	4b1a      	ldr	r3, [pc, #104]	; (21b34 <vApplicationDaemonTaskStartupHook+0x100>)
   21aca:	0018      	movs	r0, r3
   21acc:	4b0a      	ldr	r3, [pc, #40]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21ace:	4798      	blx	r3
    InitializeDistanceSensor();
   21ad0:	4b19      	ldr	r3, [pc, #100]	; (21b38 <vApplicationDaemonTaskStartupHook+0x104>)
   21ad2:	4798      	blx	r3
    SerialConsoleWriteString("Distance sensor initialized\r\n");
   21ad4:	4b19      	ldr	r3, [pc, #100]	; (21b3c <vApplicationDaemonTaskStartupHook+0x108>)
   21ad6:	0018      	movs	r0, r3
   21ad8:	4b07      	ldr	r3, [pc, #28]	; (21af8 <vApplicationDaemonTaskStartupHook+0xc4>)
   21ada:	4798      	blx	r3

    StartTasks();
   21adc:	4b18      	ldr	r3, [pc, #96]	; (21b40 <vApplicationDaemonTaskStartupHook+0x10c>)
   21ade:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   21ae0:	4b18      	ldr	r3, [pc, #96]	; (21b44 <vApplicationDaemonTaskStartupHook+0x110>)
   21ae2:	681b      	ldr	r3, [r3, #0]
   21ae4:	0018      	movs	r0, r3
   21ae6:	4b18      	ldr	r3, [pc, #96]	; (21b48 <vApplicationDaemonTaskStartupHook+0x114>)
   21ae8:	4798      	blx	r3
}
   21aea:	46c0      	nop			; (mov r8, r8)
   21aec:	46bd      	mov	sp, r7
   21aee:	b002      	add	sp, #8
   21af0:	bd80      	pop	{r7, pc}
   21af2:	46c0      	nop			; (mov r8, r8)
   21af4:	00029c30 	.word	0x00029c30
   21af8:	0000d009 	.word	0x0000d009
   21afc:	00029c54 	.word	0x00029c54
   21b00:	00002e89 	.word	0x00002e89
   21b04:	00029c6c 	.word	0x00029c6c
   21b08:	00029c90 	.word	0x00029c90
   21b0c:	00004645 	.word	0x00004645
   21b10:	00029cac 	.word	0x00029cac
   21b14:	00029ccc 	.word	0x00029ccc
   21b18:	00003ff5 	.word	0x00003ff5
   21b1c:	00003bf9 	.word	0x00003bf9
   21b20:	00029ce4 	.word	0x00029ce4
   21b24:	00029cf8 	.word	0x00029cf8
   21b28:	00004005 	.word	0x00004005
   21b2c:	00029d08 	.word	0x00029d08
   21b30:	00029d1c 	.word	0x00029d1c
   21b34:	00029d38 	.word	0x00029d38
   21b38:	00002855 	.word	0x00002855
   21b3c:	00029d58 	.word	0x00029d58
   21b40:	00021b4d 	.word	0x00021b4d
   21b44:	20004350 	.word	0x20004350
   21b48:	0000b495 	.word	0x0000b495

00021b4c <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   21b4c:	b590      	push	{r4, r7, lr}
   21b4e:	b083      	sub	sp, #12
   21b50:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   21b52:	4b44      	ldr	r3, [pc, #272]	; (21c64 <StartTasks+0x118>)
   21b54:	4798      	blx	r3
   21b56:	0003      	movs	r3, r0
   21b58:	4a43      	ldr	r2, [pc, #268]	; (21c68 <StartTasks+0x11c>)
   21b5a:	4844      	ldr	r0, [pc, #272]	; (21c6c <StartTasks+0x120>)
   21b5c:	2140      	movs	r1, #64	; 0x40
   21b5e:	4c44      	ldr	r4, [pc, #272]	; (21c70 <StartTasks+0x124>)
   21b60:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   21b62:	4b42      	ldr	r3, [pc, #264]	; (21c6c <StartTasks+0x120>)
   21b64:	0018      	movs	r0, r3
   21b66:	4b43      	ldr	r3, [pc, #268]	; (21c74 <StartTasks+0x128>)
   21b68:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   21b6a:	23c8      	movs	r3, #200	; 0xc8
   21b6c:	005a      	lsls	r2, r3, #1
   21b6e:	4942      	ldr	r1, [pc, #264]	; (21c78 <StartTasks+0x12c>)
   21b70:	4842      	ldr	r0, [pc, #264]	; (21c7c <StartTasks+0x130>)
   21b72:	4b43      	ldr	r3, [pc, #268]	; (21c80 <StartTasks+0x134>)
   21b74:	9301      	str	r3, [sp, #4]
   21b76:	2304      	movs	r3, #4
   21b78:	9300      	str	r3, [sp, #0]
   21b7a:	2300      	movs	r3, #0
   21b7c:	4c41      	ldr	r4, [pc, #260]	; (21c84 <StartTasks+0x138>)
   21b7e:	47a0      	blx	r4
   21b80:	0003      	movs	r3, r0
   21b82:	2b01      	cmp	r3, #1
   21b84:	d003      	beq.n	21b8e <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   21b86:	4b40      	ldr	r3, [pc, #256]	; (21c88 <StartTasks+0x13c>)
   21b88:	0018      	movs	r0, r3
   21b8a:	4b3a      	ldr	r3, [pc, #232]	; (21c74 <StartTasks+0x128>)
   21b8c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   21b8e:	4b35      	ldr	r3, [pc, #212]	; (21c64 <StartTasks+0x118>)
   21b90:	4798      	blx	r3
   21b92:	0003      	movs	r3, r0
   21b94:	4a3d      	ldr	r2, [pc, #244]	; (21c8c <StartTasks+0x140>)
   21b96:	4835      	ldr	r0, [pc, #212]	; (21c6c <StartTasks+0x120>)
   21b98:	2140      	movs	r1, #64	; 0x40
   21b9a:	4c35      	ldr	r4, [pc, #212]	; (21c70 <StartTasks+0x124>)
   21b9c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   21b9e:	4b33      	ldr	r3, [pc, #204]	; (21c6c <StartTasks+0x120>)
   21ba0:	0018      	movs	r0, r3
   21ba2:	4b34      	ldr	r3, [pc, #208]	; (21c74 <StartTasks+0x128>)
   21ba4:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   21ba6:	23fa      	movs	r3, #250	; 0xfa
   21ba8:	009a      	lsls	r2, r3, #2
   21baa:	4939      	ldr	r1, [pc, #228]	; (21c90 <StartTasks+0x144>)
   21bac:	4839      	ldr	r0, [pc, #228]	; (21c94 <StartTasks+0x148>)
   21bae:	4b3a      	ldr	r3, [pc, #232]	; (21c98 <StartTasks+0x14c>)
   21bb0:	9301      	str	r3, [sp, #4]
   21bb2:	2303      	movs	r3, #3
   21bb4:	9300      	str	r3, [sp, #0]
   21bb6:	2300      	movs	r3, #0
   21bb8:	4c32      	ldr	r4, [pc, #200]	; (21c84 <StartTasks+0x138>)
   21bba:	47a0      	blx	r4
   21bbc:	0003      	movs	r3, r0
   21bbe:	2b01      	cmp	r3, #1
   21bc0:	d003      	beq.n	21bca <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   21bc2:	4b36      	ldr	r3, [pc, #216]	; (21c9c <StartTasks+0x150>)
   21bc4:	0018      	movs	r0, r3
   21bc6:	4b2b      	ldr	r3, [pc, #172]	; (21c74 <StartTasks+0x128>)
   21bc8:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   21bca:	4b26      	ldr	r3, [pc, #152]	; (21c64 <StartTasks+0x118>)
   21bcc:	4798      	blx	r3
   21bce:	0003      	movs	r3, r0
   21bd0:	4a33      	ldr	r2, [pc, #204]	; (21ca0 <StartTasks+0x154>)
   21bd2:	4826      	ldr	r0, [pc, #152]	; (21c6c <StartTasks+0x120>)
   21bd4:	2140      	movs	r1, #64	; 0x40
   21bd6:	4c26      	ldr	r4, [pc, #152]	; (21c70 <StartTasks+0x124>)
   21bd8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   21bda:	4b24      	ldr	r3, [pc, #144]	; (21c6c <StartTasks+0x120>)
   21bdc:	0018      	movs	r0, r3
   21bde:	4b25      	ldr	r3, [pc, #148]	; (21c74 <StartTasks+0x128>)
   21be0:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   21be2:	23c8      	movs	r3, #200	; 0xc8
   21be4:	005a      	lsls	r2, r3, #1
   21be6:	492f      	ldr	r1, [pc, #188]	; (21ca4 <StartTasks+0x158>)
   21be8:	482f      	ldr	r0, [pc, #188]	; (21ca8 <StartTasks+0x15c>)
   21bea:	4b30      	ldr	r3, [pc, #192]	; (21cac <StartTasks+0x160>)
   21bec:	9301      	str	r3, [sp, #4]
   21bee:	2302      	movs	r3, #2
   21bf0:	9300      	str	r3, [sp, #0]
   21bf2:	2300      	movs	r3, #0
   21bf4:	4c23      	ldr	r4, [pc, #140]	; (21c84 <StartTasks+0x138>)
   21bf6:	47a0      	blx	r4
   21bf8:	0003      	movs	r3, r0
   21bfa:	2b01      	cmp	r3, #1
   21bfc:	d003      	beq.n	21c06 <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   21bfe:	4b2c      	ldr	r3, [pc, #176]	; (21cb0 <StartTasks+0x164>)
   21c00:	0018      	movs	r0, r3
   21c02:	4b1c      	ldr	r3, [pc, #112]	; (21c74 <StartTasks+0x128>)
   21c04:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   21c06:	4b17      	ldr	r3, [pc, #92]	; (21c64 <StartTasks+0x118>)
   21c08:	4798      	blx	r3
   21c0a:	0003      	movs	r3, r0
   21c0c:	4a29      	ldr	r2, [pc, #164]	; (21cb4 <StartTasks+0x168>)
   21c0e:	4817      	ldr	r0, [pc, #92]	; (21c6c <StartTasks+0x120>)
   21c10:	2140      	movs	r1, #64	; 0x40
   21c12:	4c17      	ldr	r4, [pc, #92]	; (21c70 <StartTasks+0x124>)
   21c14:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   21c16:	4b15      	ldr	r3, [pc, #84]	; (21c6c <StartTasks+0x120>)
   21c18:	0018      	movs	r0, r3
   21c1a:	4b16      	ldr	r3, [pc, #88]	; (21c74 <StartTasks+0x128>)
   21c1c:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   21c1e:	2380      	movs	r3, #128	; 0x80
   21c20:	005a      	lsls	r2, r3, #1
   21c22:	4925      	ldr	r1, [pc, #148]	; (21cb8 <StartTasks+0x16c>)
   21c24:	4825      	ldr	r0, [pc, #148]	; (21cbc <StartTasks+0x170>)
   21c26:	4b26      	ldr	r3, [pc, #152]	; (21cc0 <StartTasks+0x174>)
   21c28:	9301      	str	r3, [sp, #4]
   21c2a:	2304      	movs	r3, #4
   21c2c:	9300      	str	r3, [sp, #0]
   21c2e:	2300      	movs	r3, #0
   21c30:	4c14      	ldr	r4, [pc, #80]	; (21c84 <StartTasks+0x138>)
   21c32:	47a0      	blx	r4
   21c34:	0003      	movs	r3, r0
   21c36:	2b01      	cmp	r3, #1
   21c38:	d003      	beq.n	21c42 <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   21c3a:	4b22      	ldr	r3, [pc, #136]	; (21cc4 <StartTasks+0x178>)
   21c3c:	0018      	movs	r0, r3
   21c3e:	4b0d      	ldr	r3, [pc, #52]	; (21c74 <StartTasks+0x128>)
   21c40:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   21c42:	4b08      	ldr	r3, [pc, #32]	; (21c64 <StartTasks+0x118>)
   21c44:	4798      	blx	r3
   21c46:	0003      	movs	r3, r0
   21c48:	4a1f      	ldr	r2, [pc, #124]	; (21cc8 <StartTasks+0x17c>)
   21c4a:	4808      	ldr	r0, [pc, #32]	; (21c6c <StartTasks+0x120>)
   21c4c:	2140      	movs	r1, #64	; 0x40
   21c4e:	4c08      	ldr	r4, [pc, #32]	; (21c70 <StartTasks+0x124>)
   21c50:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   21c52:	4b06      	ldr	r3, [pc, #24]	; (21c6c <StartTasks+0x120>)
   21c54:	0018      	movs	r0, r3
   21c56:	4b07      	ldr	r3, [pc, #28]	; (21c74 <StartTasks+0x128>)
   21c58:	4798      	blx	r3
}
   21c5a:	46c0      	nop			; (mov r8, r8)
   21c5c:	46bd      	mov	sp, r7
   21c5e:	b001      	add	sp, #4
   21c60:	bd90      	pop	{r4, r7, pc}
   21c62:	46c0      	nop			; (mov r8, r8)
   21c64:	000095d1 	.word	0x000095d1
   21c68:	00029d78 	.word	0x00029d78
   21c6c:	200058d0 	.word	0x200058d0
   21c70:	00024a11 	.word	0x00024a11
   21c74:	0000d009 	.word	0x0000d009
   21c78:	00029d9c 	.word	0x00029d9c
   21c7c:	00001b95 	.word	0x00001b95
   21c80:	2000434c 	.word	0x2000434c
   21c84:	0000b019 	.word	0x0000b019
   21c88:	00029da8 	.word	0x00029da8
   21c8c:	00029dd4 	.word	0x00029dd4
   21c90:	00029df4 	.word	0x00029df4
   21c94:	00006441 	.word	0x00006441
   21c98:	20004354 	.word	0x20004354
   21c9c:	00029e00 	.word	0x00029e00
   21ca0:	00029e2c 	.word	0x00029e2c
   21ca4:	00029e4c 	.word	0x00029e4c
   21ca8:	00004b59 	.word	0x00004b59
   21cac:	20004358 	.word	0x20004358
   21cb0:	00029e54 	.word	0x00029e54
   21cb4:	00029e80 	.word	0x00029e80
   21cb8:	00029ea4 	.word	0x00029ea4
   21cbc:	000024e1 	.word	0x000024e1
   21cc0:	2000435c 	.word	0x2000435c
   21cc4:	00029eb4 	.word	0x00029eb4
   21cc8:	00029ee4 	.word	0x00029ee4

00021ccc <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   21ccc:	b580      	push	{r7, lr}
   21cce:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   21cd0:	4b02      	ldr	r3, [pc, #8]	; (21cdc <vApplicationMallocFailedHook+0x10>)
   21cd2:	0018      	movs	r0, r3
   21cd4:	4b02      	ldr	r3, [pc, #8]	; (21ce0 <vApplicationMallocFailedHook+0x14>)
   21cd6:	4798      	blx	r3
    while (1)
   21cd8:	e7fe      	b.n	21cd8 <vApplicationMallocFailedHook+0xc>
   21cda:	46c0      	nop			; (mov r8, r8)
   21cdc:	00029f0c 	.word	0x00029f0c
   21ce0:	0000d009 	.word	0x0000d009

00021ce4 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   21ce4:	b580      	push	{r7, lr}
   21ce6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   21ce8:	4b02      	ldr	r3, [pc, #8]	; (21cf4 <vApplicationStackOverflowHook+0x10>)
   21cea:	0018      	movs	r0, r3
   21cec:	4b02      	ldr	r3, [pc, #8]	; (21cf8 <vApplicationStackOverflowHook+0x14>)
   21cee:	4798      	blx	r3
    while (1)
   21cf0:	e7fe      	b.n	21cf0 <vApplicationStackOverflowHook+0xc>
   21cf2:	46c0      	nop			; (mov r8, r8)
   21cf4:	00029f38 	.word	0x00029f38
   21cf8:	0000d009 	.word	0x0000d009

00021cfc <__udivsi3>:
   21cfc:	2200      	movs	r2, #0
   21cfe:	0843      	lsrs	r3, r0, #1
   21d00:	428b      	cmp	r3, r1
   21d02:	d374      	bcc.n	21dee <__udivsi3+0xf2>
   21d04:	0903      	lsrs	r3, r0, #4
   21d06:	428b      	cmp	r3, r1
   21d08:	d35f      	bcc.n	21dca <__udivsi3+0xce>
   21d0a:	0a03      	lsrs	r3, r0, #8
   21d0c:	428b      	cmp	r3, r1
   21d0e:	d344      	bcc.n	21d9a <__udivsi3+0x9e>
   21d10:	0b03      	lsrs	r3, r0, #12
   21d12:	428b      	cmp	r3, r1
   21d14:	d328      	bcc.n	21d68 <__udivsi3+0x6c>
   21d16:	0c03      	lsrs	r3, r0, #16
   21d18:	428b      	cmp	r3, r1
   21d1a:	d30d      	bcc.n	21d38 <__udivsi3+0x3c>
   21d1c:	22ff      	movs	r2, #255	; 0xff
   21d1e:	0209      	lsls	r1, r1, #8
   21d20:	ba12      	rev	r2, r2
   21d22:	0c03      	lsrs	r3, r0, #16
   21d24:	428b      	cmp	r3, r1
   21d26:	d302      	bcc.n	21d2e <__udivsi3+0x32>
   21d28:	1212      	asrs	r2, r2, #8
   21d2a:	0209      	lsls	r1, r1, #8
   21d2c:	d065      	beq.n	21dfa <__udivsi3+0xfe>
   21d2e:	0b03      	lsrs	r3, r0, #12
   21d30:	428b      	cmp	r3, r1
   21d32:	d319      	bcc.n	21d68 <__udivsi3+0x6c>
   21d34:	e000      	b.n	21d38 <__udivsi3+0x3c>
   21d36:	0a09      	lsrs	r1, r1, #8
   21d38:	0bc3      	lsrs	r3, r0, #15
   21d3a:	428b      	cmp	r3, r1
   21d3c:	d301      	bcc.n	21d42 <__udivsi3+0x46>
   21d3e:	03cb      	lsls	r3, r1, #15
   21d40:	1ac0      	subs	r0, r0, r3
   21d42:	4152      	adcs	r2, r2
   21d44:	0b83      	lsrs	r3, r0, #14
   21d46:	428b      	cmp	r3, r1
   21d48:	d301      	bcc.n	21d4e <__udivsi3+0x52>
   21d4a:	038b      	lsls	r3, r1, #14
   21d4c:	1ac0      	subs	r0, r0, r3
   21d4e:	4152      	adcs	r2, r2
   21d50:	0b43      	lsrs	r3, r0, #13
   21d52:	428b      	cmp	r3, r1
   21d54:	d301      	bcc.n	21d5a <__udivsi3+0x5e>
   21d56:	034b      	lsls	r3, r1, #13
   21d58:	1ac0      	subs	r0, r0, r3
   21d5a:	4152      	adcs	r2, r2
   21d5c:	0b03      	lsrs	r3, r0, #12
   21d5e:	428b      	cmp	r3, r1
   21d60:	d301      	bcc.n	21d66 <__udivsi3+0x6a>
   21d62:	030b      	lsls	r3, r1, #12
   21d64:	1ac0      	subs	r0, r0, r3
   21d66:	4152      	adcs	r2, r2
   21d68:	0ac3      	lsrs	r3, r0, #11
   21d6a:	428b      	cmp	r3, r1
   21d6c:	d301      	bcc.n	21d72 <__udivsi3+0x76>
   21d6e:	02cb      	lsls	r3, r1, #11
   21d70:	1ac0      	subs	r0, r0, r3
   21d72:	4152      	adcs	r2, r2
   21d74:	0a83      	lsrs	r3, r0, #10
   21d76:	428b      	cmp	r3, r1
   21d78:	d301      	bcc.n	21d7e <__udivsi3+0x82>
   21d7a:	028b      	lsls	r3, r1, #10
   21d7c:	1ac0      	subs	r0, r0, r3
   21d7e:	4152      	adcs	r2, r2
   21d80:	0a43      	lsrs	r3, r0, #9
   21d82:	428b      	cmp	r3, r1
   21d84:	d301      	bcc.n	21d8a <__udivsi3+0x8e>
   21d86:	024b      	lsls	r3, r1, #9
   21d88:	1ac0      	subs	r0, r0, r3
   21d8a:	4152      	adcs	r2, r2
   21d8c:	0a03      	lsrs	r3, r0, #8
   21d8e:	428b      	cmp	r3, r1
   21d90:	d301      	bcc.n	21d96 <__udivsi3+0x9a>
   21d92:	020b      	lsls	r3, r1, #8
   21d94:	1ac0      	subs	r0, r0, r3
   21d96:	4152      	adcs	r2, r2
   21d98:	d2cd      	bcs.n	21d36 <__udivsi3+0x3a>
   21d9a:	09c3      	lsrs	r3, r0, #7
   21d9c:	428b      	cmp	r3, r1
   21d9e:	d301      	bcc.n	21da4 <__udivsi3+0xa8>
   21da0:	01cb      	lsls	r3, r1, #7
   21da2:	1ac0      	subs	r0, r0, r3
   21da4:	4152      	adcs	r2, r2
   21da6:	0983      	lsrs	r3, r0, #6
   21da8:	428b      	cmp	r3, r1
   21daa:	d301      	bcc.n	21db0 <__udivsi3+0xb4>
   21dac:	018b      	lsls	r3, r1, #6
   21dae:	1ac0      	subs	r0, r0, r3
   21db0:	4152      	adcs	r2, r2
   21db2:	0943      	lsrs	r3, r0, #5
   21db4:	428b      	cmp	r3, r1
   21db6:	d301      	bcc.n	21dbc <__udivsi3+0xc0>
   21db8:	014b      	lsls	r3, r1, #5
   21dba:	1ac0      	subs	r0, r0, r3
   21dbc:	4152      	adcs	r2, r2
   21dbe:	0903      	lsrs	r3, r0, #4
   21dc0:	428b      	cmp	r3, r1
   21dc2:	d301      	bcc.n	21dc8 <__udivsi3+0xcc>
   21dc4:	010b      	lsls	r3, r1, #4
   21dc6:	1ac0      	subs	r0, r0, r3
   21dc8:	4152      	adcs	r2, r2
   21dca:	08c3      	lsrs	r3, r0, #3
   21dcc:	428b      	cmp	r3, r1
   21dce:	d301      	bcc.n	21dd4 <__udivsi3+0xd8>
   21dd0:	00cb      	lsls	r3, r1, #3
   21dd2:	1ac0      	subs	r0, r0, r3
   21dd4:	4152      	adcs	r2, r2
   21dd6:	0883      	lsrs	r3, r0, #2
   21dd8:	428b      	cmp	r3, r1
   21dda:	d301      	bcc.n	21de0 <__udivsi3+0xe4>
   21ddc:	008b      	lsls	r3, r1, #2
   21dde:	1ac0      	subs	r0, r0, r3
   21de0:	4152      	adcs	r2, r2
   21de2:	0843      	lsrs	r3, r0, #1
   21de4:	428b      	cmp	r3, r1
   21de6:	d301      	bcc.n	21dec <__udivsi3+0xf0>
   21de8:	004b      	lsls	r3, r1, #1
   21dea:	1ac0      	subs	r0, r0, r3
   21dec:	4152      	adcs	r2, r2
   21dee:	1a41      	subs	r1, r0, r1
   21df0:	d200      	bcs.n	21df4 <__udivsi3+0xf8>
   21df2:	4601      	mov	r1, r0
   21df4:	4152      	adcs	r2, r2
   21df6:	4610      	mov	r0, r2
   21df8:	4770      	bx	lr
   21dfa:	e7ff      	b.n	21dfc <__udivsi3+0x100>
   21dfc:	b501      	push	{r0, lr}
   21dfe:	2000      	movs	r0, #0
   21e00:	f000 f8f0 	bl	21fe4 <__aeabi_idiv0>
   21e04:	bd02      	pop	{r1, pc}
   21e06:	46c0      	nop			; (mov r8, r8)

00021e08 <__aeabi_uidivmod>:
   21e08:	2900      	cmp	r1, #0
   21e0a:	d0f7      	beq.n	21dfc <__udivsi3+0x100>
   21e0c:	e776      	b.n	21cfc <__udivsi3>
   21e0e:	4770      	bx	lr

00021e10 <__divsi3>:
   21e10:	4603      	mov	r3, r0
   21e12:	430b      	orrs	r3, r1
   21e14:	d47f      	bmi.n	21f16 <__divsi3+0x106>
   21e16:	2200      	movs	r2, #0
   21e18:	0843      	lsrs	r3, r0, #1
   21e1a:	428b      	cmp	r3, r1
   21e1c:	d374      	bcc.n	21f08 <__divsi3+0xf8>
   21e1e:	0903      	lsrs	r3, r0, #4
   21e20:	428b      	cmp	r3, r1
   21e22:	d35f      	bcc.n	21ee4 <__divsi3+0xd4>
   21e24:	0a03      	lsrs	r3, r0, #8
   21e26:	428b      	cmp	r3, r1
   21e28:	d344      	bcc.n	21eb4 <__divsi3+0xa4>
   21e2a:	0b03      	lsrs	r3, r0, #12
   21e2c:	428b      	cmp	r3, r1
   21e2e:	d328      	bcc.n	21e82 <__divsi3+0x72>
   21e30:	0c03      	lsrs	r3, r0, #16
   21e32:	428b      	cmp	r3, r1
   21e34:	d30d      	bcc.n	21e52 <__divsi3+0x42>
   21e36:	22ff      	movs	r2, #255	; 0xff
   21e38:	0209      	lsls	r1, r1, #8
   21e3a:	ba12      	rev	r2, r2
   21e3c:	0c03      	lsrs	r3, r0, #16
   21e3e:	428b      	cmp	r3, r1
   21e40:	d302      	bcc.n	21e48 <__divsi3+0x38>
   21e42:	1212      	asrs	r2, r2, #8
   21e44:	0209      	lsls	r1, r1, #8
   21e46:	d065      	beq.n	21f14 <__divsi3+0x104>
   21e48:	0b03      	lsrs	r3, r0, #12
   21e4a:	428b      	cmp	r3, r1
   21e4c:	d319      	bcc.n	21e82 <__divsi3+0x72>
   21e4e:	e000      	b.n	21e52 <__divsi3+0x42>
   21e50:	0a09      	lsrs	r1, r1, #8
   21e52:	0bc3      	lsrs	r3, r0, #15
   21e54:	428b      	cmp	r3, r1
   21e56:	d301      	bcc.n	21e5c <__divsi3+0x4c>
   21e58:	03cb      	lsls	r3, r1, #15
   21e5a:	1ac0      	subs	r0, r0, r3
   21e5c:	4152      	adcs	r2, r2
   21e5e:	0b83      	lsrs	r3, r0, #14
   21e60:	428b      	cmp	r3, r1
   21e62:	d301      	bcc.n	21e68 <__divsi3+0x58>
   21e64:	038b      	lsls	r3, r1, #14
   21e66:	1ac0      	subs	r0, r0, r3
   21e68:	4152      	adcs	r2, r2
   21e6a:	0b43      	lsrs	r3, r0, #13
   21e6c:	428b      	cmp	r3, r1
   21e6e:	d301      	bcc.n	21e74 <__divsi3+0x64>
   21e70:	034b      	lsls	r3, r1, #13
   21e72:	1ac0      	subs	r0, r0, r3
   21e74:	4152      	adcs	r2, r2
   21e76:	0b03      	lsrs	r3, r0, #12
   21e78:	428b      	cmp	r3, r1
   21e7a:	d301      	bcc.n	21e80 <__divsi3+0x70>
   21e7c:	030b      	lsls	r3, r1, #12
   21e7e:	1ac0      	subs	r0, r0, r3
   21e80:	4152      	adcs	r2, r2
   21e82:	0ac3      	lsrs	r3, r0, #11
   21e84:	428b      	cmp	r3, r1
   21e86:	d301      	bcc.n	21e8c <__divsi3+0x7c>
   21e88:	02cb      	lsls	r3, r1, #11
   21e8a:	1ac0      	subs	r0, r0, r3
   21e8c:	4152      	adcs	r2, r2
   21e8e:	0a83      	lsrs	r3, r0, #10
   21e90:	428b      	cmp	r3, r1
   21e92:	d301      	bcc.n	21e98 <__divsi3+0x88>
   21e94:	028b      	lsls	r3, r1, #10
   21e96:	1ac0      	subs	r0, r0, r3
   21e98:	4152      	adcs	r2, r2
   21e9a:	0a43      	lsrs	r3, r0, #9
   21e9c:	428b      	cmp	r3, r1
   21e9e:	d301      	bcc.n	21ea4 <__divsi3+0x94>
   21ea0:	024b      	lsls	r3, r1, #9
   21ea2:	1ac0      	subs	r0, r0, r3
   21ea4:	4152      	adcs	r2, r2
   21ea6:	0a03      	lsrs	r3, r0, #8
   21ea8:	428b      	cmp	r3, r1
   21eaa:	d301      	bcc.n	21eb0 <__divsi3+0xa0>
   21eac:	020b      	lsls	r3, r1, #8
   21eae:	1ac0      	subs	r0, r0, r3
   21eb0:	4152      	adcs	r2, r2
   21eb2:	d2cd      	bcs.n	21e50 <__divsi3+0x40>
   21eb4:	09c3      	lsrs	r3, r0, #7
   21eb6:	428b      	cmp	r3, r1
   21eb8:	d301      	bcc.n	21ebe <__divsi3+0xae>
   21eba:	01cb      	lsls	r3, r1, #7
   21ebc:	1ac0      	subs	r0, r0, r3
   21ebe:	4152      	adcs	r2, r2
   21ec0:	0983      	lsrs	r3, r0, #6
   21ec2:	428b      	cmp	r3, r1
   21ec4:	d301      	bcc.n	21eca <__divsi3+0xba>
   21ec6:	018b      	lsls	r3, r1, #6
   21ec8:	1ac0      	subs	r0, r0, r3
   21eca:	4152      	adcs	r2, r2
   21ecc:	0943      	lsrs	r3, r0, #5
   21ece:	428b      	cmp	r3, r1
   21ed0:	d301      	bcc.n	21ed6 <__divsi3+0xc6>
   21ed2:	014b      	lsls	r3, r1, #5
   21ed4:	1ac0      	subs	r0, r0, r3
   21ed6:	4152      	adcs	r2, r2
   21ed8:	0903      	lsrs	r3, r0, #4
   21eda:	428b      	cmp	r3, r1
   21edc:	d301      	bcc.n	21ee2 <__divsi3+0xd2>
   21ede:	010b      	lsls	r3, r1, #4
   21ee0:	1ac0      	subs	r0, r0, r3
   21ee2:	4152      	adcs	r2, r2
   21ee4:	08c3      	lsrs	r3, r0, #3
   21ee6:	428b      	cmp	r3, r1
   21ee8:	d301      	bcc.n	21eee <__divsi3+0xde>
   21eea:	00cb      	lsls	r3, r1, #3
   21eec:	1ac0      	subs	r0, r0, r3
   21eee:	4152      	adcs	r2, r2
   21ef0:	0883      	lsrs	r3, r0, #2
   21ef2:	428b      	cmp	r3, r1
   21ef4:	d301      	bcc.n	21efa <__divsi3+0xea>
   21ef6:	008b      	lsls	r3, r1, #2
   21ef8:	1ac0      	subs	r0, r0, r3
   21efa:	4152      	adcs	r2, r2
   21efc:	0843      	lsrs	r3, r0, #1
   21efe:	428b      	cmp	r3, r1
   21f00:	d301      	bcc.n	21f06 <__divsi3+0xf6>
   21f02:	004b      	lsls	r3, r1, #1
   21f04:	1ac0      	subs	r0, r0, r3
   21f06:	4152      	adcs	r2, r2
   21f08:	1a41      	subs	r1, r0, r1
   21f0a:	d200      	bcs.n	21f0e <__divsi3+0xfe>
   21f0c:	4601      	mov	r1, r0
   21f0e:	4152      	adcs	r2, r2
   21f10:	4610      	mov	r0, r2
   21f12:	4770      	bx	lr
   21f14:	e05d      	b.n	21fd2 <__divsi3+0x1c2>
   21f16:	0fca      	lsrs	r2, r1, #31
   21f18:	d000      	beq.n	21f1c <__divsi3+0x10c>
   21f1a:	4249      	negs	r1, r1
   21f1c:	1003      	asrs	r3, r0, #32
   21f1e:	d300      	bcc.n	21f22 <__divsi3+0x112>
   21f20:	4240      	negs	r0, r0
   21f22:	4053      	eors	r3, r2
   21f24:	2200      	movs	r2, #0
   21f26:	469c      	mov	ip, r3
   21f28:	0903      	lsrs	r3, r0, #4
   21f2a:	428b      	cmp	r3, r1
   21f2c:	d32d      	bcc.n	21f8a <__divsi3+0x17a>
   21f2e:	0a03      	lsrs	r3, r0, #8
   21f30:	428b      	cmp	r3, r1
   21f32:	d312      	bcc.n	21f5a <__divsi3+0x14a>
   21f34:	22fc      	movs	r2, #252	; 0xfc
   21f36:	0189      	lsls	r1, r1, #6
   21f38:	ba12      	rev	r2, r2
   21f3a:	0a03      	lsrs	r3, r0, #8
   21f3c:	428b      	cmp	r3, r1
   21f3e:	d30c      	bcc.n	21f5a <__divsi3+0x14a>
   21f40:	0189      	lsls	r1, r1, #6
   21f42:	1192      	asrs	r2, r2, #6
   21f44:	428b      	cmp	r3, r1
   21f46:	d308      	bcc.n	21f5a <__divsi3+0x14a>
   21f48:	0189      	lsls	r1, r1, #6
   21f4a:	1192      	asrs	r2, r2, #6
   21f4c:	428b      	cmp	r3, r1
   21f4e:	d304      	bcc.n	21f5a <__divsi3+0x14a>
   21f50:	0189      	lsls	r1, r1, #6
   21f52:	d03a      	beq.n	21fca <__divsi3+0x1ba>
   21f54:	1192      	asrs	r2, r2, #6
   21f56:	e000      	b.n	21f5a <__divsi3+0x14a>
   21f58:	0989      	lsrs	r1, r1, #6
   21f5a:	09c3      	lsrs	r3, r0, #7
   21f5c:	428b      	cmp	r3, r1
   21f5e:	d301      	bcc.n	21f64 <__divsi3+0x154>
   21f60:	01cb      	lsls	r3, r1, #7
   21f62:	1ac0      	subs	r0, r0, r3
   21f64:	4152      	adcs	r2, r2
   21f66:	0983      	lsrs	r3, r0, #6
   21f68:	428b      	cmp	r3, r1
   21f6a:	d301      	bcc.n	21f70 <__divsi3+0x160>
   21f6c:	018b      	lsls	r3, r1, #6
   21f6e:	1ac0      	subs	r0, r0, r3
   21f70:	4152      	adcs	r2, r2
   21f72:	0943      	lsrs	r3, r0, #5
   21f74:	428b      	cmp	r3, r1
   21f76:	d301      	bcc.n	21f7c <__divsi3+0x16c>
   21f78:	014b      	lsls	r3, r1, #5
   21f7a:	1ac0      	subs	r0, r0, r3
   21f7c:	4152      	adcs	r2, r2
   21f7e:	0903      	lsrs	r3, r0, #4
   21f80:	428b      	cmp	r3, r1
   21f82:	d301      	bcc.n	21f88 <__divsi3+0x178>
   21f84:	010b      	lsls	r3, r1, #4
   21f86:	1ac0      	subs	r0, r0, r3
   21f88:	4152      	adcs	r2, r2
   21f8a:	08c3      	lsrs	r3, r0, #3
   21f8c:	428b      	cmp	r3, r1
   21f8e:	d301      	bcc.n	21f94 <__divsi3+0x184>
   21f90:	00cb      	lsls	r3, r1, #3
   21f92:	1ac0      	subs	r0, r0, r3
   21f94:	4152      	adcs	r2, r2
   21f96:	0883      	lsrs	r3, r0, #2
   21f98:	428b      	cmp	r3, r1
   21f9a:	d301      	bcc.n	21fa0 <__divsi3+0x190>
   21f9c:	008b      	lsls	r3, r1, #2
   21f9e:	1ac0      	subs	r0, r0, r3
   21fa0:	4152      	adcs	r2, r2
   21fa2:	d2d9      	bcs.n	21f58 <__divsi3+0x148>
   21fa4:	0843      	lsrs	r3, r0, #1
   21fa6:	428b      	cmp	r3, r1
   21fa8:	d301      	bcc.n	21fae <__divsi3+0x19e>
   21faa:	004b      	lsls	r3, r1, #1
   21fac:	1ac0      	subs	r0, r0, r3
   21fae:	4152      	adcs	r2, r2
   21fb0:	1a41      	subs	r1, r0, r1
   21fb2:	d200      	bcs.n	21fb6 <__divsi3+0x1a6>
   21fb4:	4601      	mov	r1, r0
   21fb6:	4663      	mov	r3, ip
   21fb8:	4152      	adcs	r2, r2
   21fba:	105b      	asrs	r3, r3, #1
   21fbc:	4610      	mov	r0, r2
   21fbe:	d301      	bcc.n	21fc4 <__divsi3+0x1b4>
   21fc0:	4240      	negs	r0, r0
   21fc2:	2b00      	cmp	r3, #0
   21fc4:	d500      	bpl.n	21fc8 <__divsi3+0x1b8>
   21fc6:	4249      	negs	r1, r1
   21fc8:	4770      	bx	lr
   21fca:	4663      	mov	r3, ip
   21fcc:	105b      	asrs	r3, r3, #1
   21fce:	d300      	bcc.n	21fd2 <__divsi3+0x1c2>
   21fd0:	4240      	negs	r0, r0
   21fd2:	b501      	push	{r0, lr}
   21fd4:	2000      	movs	r0, #0
   21fd6:	f000 f805 	bl	21fe4 <__aeabi_idiv0>
   21fda:	bd02      	pop	{r1, pc}

00021fdc <__aeabi_idivmod>:
   21fdc:	2900      	cmp	r1, #0
   21fde:	d0f8      	beq.n	21fd2 <__divsi3+0x1c2>
   21fe0:	e716      	b.n	21e10 <__divsi3>
   21fe2:	4770      	bx	lr

00021fe4 <__aeabi_idiv0>:
   21fe4:	4770      	bx	lr
   21fe6:	46c0      	nop			; (mov r8, r8)

00021fe8 <__aeabi_lmul>:
   21fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21fea:	46ce      	mov	lr, r9
   21fec:	4647      	mov	r7, r8
   21fee:	0415      	lsls	r5, r2, #16
   21ff0:	0c2d      	lsrs	r5, r5, #16
   21ff2:	002e      	movs	r6, r5
   21ff4:	b580      	push	{r7, lr}
   21ff6:	0407      	lsls	r7, r0, #16
   21ff8:	0c14      	lsrs	r4, r2, #16
   21ffa:	0c3f      	lsrs	r7, r7, #16
   21ffc:	4699      	mov	r9, r3
   21ffe:	0c03      	lsrs	r3, r0, #16
   22000:	437e      	muls	r6, r7
   22002:	435d      	muls	r5, r3
   22004:	4367      	muls	r7, r4
   22006:	4363      	muls	r3, r4
   22008:	197f      	adds	r7, r7, r5
   2200a:	0c34      	lsrs	r4, r6, #16
   2200c:	19e4      	adds	r4, r4, r7
   2200e:	469c      	mov	ip, r3
   22010:	42a5      	cmp	r5, r4
   22012:	d903      	bls.n	2201c <__aeabi_lmul+0x34>
   22014:	2380      	movs	r3, #128	; 0x80
   22016:	025b      	lsls	r3, r3, #9
   22018:	4698      	mov	r8, r3
   2201a:	44c4      	add	ip, r8
   2201c:	464b      	mov	r3, r9
   2201e:	4351      	muls	r1, r2
   22020:	4343      	muls	r3, r0
   22022:	0436      	lsls	r6, r6, #16
   22024:	0c36      	lsrs	r6, r6, #16
   22026:	0c25      	lsrs	r5, r4, #16
   22028:	0424      	lsls	r4, r4, #16
   2202a:	4465      	add	r5, ip
   2202c:	19a4      	adds	r4, r4, r6
   2202e:	1859      	adds	r1, r3, r1
   22030:	1949      	adds	r1, r1, r5
   22032:	0020      	movs	r0, r4
   22034:	bc0c      	pop	{r2, r3}
   22036:	4690      	mov	r8, r2
   22038:	4699      	mov	r9, r3
   2203a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002203c <__aeabi_f2uiz>:
   2203c:	219e      	movs	r1, #158	; 0x9e
   2203e:	b510      	push	{r4, lr}
   22040:	05c9      	lsls	r1, r1, #23
   22042:	1c04      	adds	r4, r0, #0
   22044:	f002 fa8e 	bl	24564 <__aeabi_fcmpge>
   22048:	2800      	cmp	r0, #0
   2204a:	d103      	bne.n	22054 <__aeabi_f2uiz+0x18>
   2204c:	1c20      	adds	r0, r4, #0
   2204e:	f000 fda3 	bl	22b98 <__aeabi_f2iz>
   22052:	bd10      	pop	{r4, pc}
   22054:	219e      	movs	r1, #158	; 0x9e
   22056:	1c20      	adds	r0, r4, #0
   22058:	05c9      	lsls	r1, r1, #23
   2205a:	f000 fc01 	bl	22860 <__aeabi_fsub>
   2205e:	f000 fd9b 	bl	22b98 <__aeabi_f2iz>
   22062:	2380      	movs	r3, #128	; 0x80
   22064:	061b      	lsls	r3, r3, #24
   22066:	469c      	mov	ip, r3
   22068:	4460      	add	r0, ip
   2206a:	e7f2      	b.n	22052 <__aeabi_f2uiz+0x16>

0002206c <__aeabi_fadd>:
   2206c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2206e:	46c6      	mov	lr, r8
   22070:	024e      	lsls	r6, r1, #9
   22072:	0247      	lsls	r7, r0, #9
   22074:	0a76      	lsrs	r6, r6, #9
   22076:	0a7b      	lsrs	r3, r7, #9
   22078:	0044      	lsls	r4, r0, #1
   2207a:	0fc5      	lsrs	r5, r0, #31
   2207c:	00f7      	lsls	r7, r6, #3
   2207e:	0048      	lsls	r0, r1, #1
   22080:	4698      	mov	r8, r3
   22082:	b500      	push	{lr}
   22084:	0e24      	lsrs	r4, r4, #24
   22086:	002a      	movs	r2, r5
   22088:	00db      	lsls	r3, r3, #3
   2208a:	0e00      	lsrs	r0, r0, #24
   2208c:	0fc9      	lsrs	r1, r1, #31
   2208e:	46bc      	mov	ip, r7
   22090:	428d      	cmp	r5, r1
   22092:	d067      	beq.n	22164 <__aeabi_fadd+0xf8>
   22094:	1a22      	subs	r2, r4, r0
   22096:	2a00      	cmp	r2, #0
   22098:	dc00      	bgt.n	2209c <__aeabi_fadd+0x30>
   2209a:	e0a5      	b.n	221e8 <__aeabi_fadd+0x17c>
   2209c:	2800      	cmp	r0, #0
   2209e:	d13a      	bne.n	22116 <__aeabi_fadd+0xaa>
   220a0:	2f00      	cmp	r7, #0
   220a2:	d100      	bne.n	220a6 <__aeabi_fadd+0x3a>
   220a4:	e093      	b.n	221ce <__aeabi_fadd+0x162>
   220a6:	1e51      	subs	r1, r2, #1
   220a8:	2900      	cmp	r1, #0
   220aa:	d000      	beq.n	220ae <__aeabi_fadd+0x42>
   220ac:	e0bc      	b.n	22228 <__aeabi_fadd+0x1bc>
   220ae:	2401      	movs	r4, #1
   220b0:	1bdb      	subs	r3, r3, r7
   220b2:	015a      	lsls	r2, r3, #5
   220b4:	d546      	bpl.n	22144 <__aeabi_fadd+0xd8>
   220b6:	019b      	lsls	r3, r3, #6
   220b8:	099e      	lsrs	r6, r3, #6
   220ba:	0030      	movs	r0, r6
   220bc:	f002 fa5c 	bl	24578 <__clzsi2>
   220c0:	3805      	subs	r0, #5
   220c2:	4086      	lsls	r6, r0
   220c4:	4284      	cmp	r4, r0
   220c6:	dd00      	ble.n	220ca <__aeabi_fadd+0x5e>
   220c8:	e09d      	b.n	22206 <__aeabi_fadd+0x19a>
   220ca:	1b04      	subs	r4, r0, r4
   220cc:	0032      	movs	r2, r6
   220ce:	2020      	movs	r0, #32
   220d0:	3401      	adds	r4, #1
   220d2:	40e2      	lsrs	r2, r4
   220d4:	1b04      	subs	r4, r0, r4
   220d6:	40a6      	lsls	r6, r4
   220d8:	0033      	movs	r3, r6
   220da:	1e5e      	subs	r6, r3, #1
   220dc:	41b3      	sbcs	r3, r6
   220de:	2400      	movs	r4, #0
   220e0:	4313      	orrs	r3, r2
   220e2:	075a      	lsls	r2, r3, #29
   220e4:	d004      	beq.n	220f0 <__aeabi_fadd+0x84>
   220e6:	220f      	movs	r2, #15
   220e8:	401a      	ands	r2, r3
   220ea:	2a04      	cmp	r2, #4
   220ec:	d000      	beq.n	220f0 <__aeabi_fadd+0x84>
   220ee:	3304      	adds	r3, #4
   220f0:	015a      	lsls	r2, r3, #5
   220f2:	d529      	bpl.n	22148 <__aeabi_fadd+0xdc>
   220f4:	3401      	adds	r4, #1
   220f6:	2cff      	cmp	r4, #255	; 0xff
   220f8:	d100      	bne.n	220fc <__aeabi_fadd+0x90>
   220fa:	e081      	b.n	22200 <__aeabi_fadd+0x194>
   220fc:	002a      	movs	r2, r5
   220fe:	019b      	lsls	r3, r3, #6
   22100:	0a5b      	lsrs	r3, r3, #9
   22102:	b2e4      	uxtb	r4, r4
   22104:	025b      	lsls	r3, r3, #9
   22106:	05e4      	lsls	r4, r4, #23
   22108:	0a58      	lsrs	r0, r3, #9
   2210a:	07d2      	lsls	r2, r2, #31
   2210c:	4320      	orrs	r0, r4
   2210e:	4310      	orrs	r0, r2
   22110:	bc04      	pop	{r2}
   22112:	4690      	mov	r8, r2
   22114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22116:	2cff      	cmp	r4, #255	; 0xff
   22118:	d0e3      	beq.n	220e2 <__aeabi_fadd+0x76>
   2211a:	2180      	movs	r1, #128	; 0x80
   2211c:	0038      	movs	r0, r7
   2211e:	04c9      	lsls	r1, r1, #19
   22120:	4308      	orrs	r0, r1
   22122:	4684      	mov	ip, r0
   22124:	2a1b      	cmp	r2, #27
   22126:	dd00      	ble.n	2212a <__aeabi_fadd+0xbe>
   22128:	e082      	b.n	22230 <__aeabi_fadd+0x1c4>
   2212a:	2020      	movs	r0, #32
   2212c:	4661      	mov	r1, ip
   2212e:	40d1      	lsrs	r1, r2
   22130:	1a82      	subs	r2, r0, r2
   22132:	4660      	mov	r0, ip
   22134:	4090      	lsls	r0, r2
   22136:	0002      	movs	r2, r0
   22138:	1e50      	subs	r0, r2, #1
   2213a:	4182      	sbcs	r2, r0
   2213c:	430a      	orrs	r2, r1
   2213e:	1a9b      	subs	r3, r3, r2
   22140:	015a      	lsls	r2, r3, #5
   22142:	d4b8      	bmi.n	220b6 <__aeabi_fadd+0x4a>
   22144:	075a      	lsls	r2, r3, #29
   22146:	d1ce      	bne.n	220e6 <__aeabi_fadd+0x7a>
   22148:	08de      	lsrs	r6, r3, #3
   2214a:	002a      	movs	r2, r5
   2214c:	2cff      	cmp	r4, #255	; 0xff
   2214e:	d13a      	bne.n	221c6 <__aeabi_fadd+0x15a>
   22150:	2e00      	cmp	r6, #0
   22152:	d100      	bne.n	22156 <__aeabi_fadd+0xea>
   22154:	e0ae      	b.n	222b4 <__aeabi_fadd+0x248>
   22156:	2380      	movs	r3, #128	; 0x80
   22158:	03db      	lsls	r3, r3, #15
   2215a:	4333      	orrs	r3, r6
   2215c:	025b      	lsls	r3, r3, #9
   2215e:	0a5b      	lsrs	r3, r3, #9
   22160:	24ff      	movs	r4, #255	; 0xff
   22162:	e7cf      	b.n	22104 <__aeabi_fadd+0x98>
   22164:	1a21      	subs	r1, r4, r0
   22166:	2900      	cmp	r1, #0
   22168:	dd52      	ble.n	22210 <__aeabi_fadd+0x1a4>
   2216a:	2800      	cmp	r0, #0
   2216c:	d031      	beq.n	221d2 <__aeabi_fadd+0x166>
   2216e:	2cff      	cmp	r4, #255	; 0xff
   22170:	d0b7      	beq.n	220e2 <__aeabi_fadd+0x76>
   22172:	2080      	movs	r0, #128	; 0x80
   22174:	003e      	movs	r6, r7
   22176:	04c0      	lsls	r0, r0, #19
   22178:	4306      	orrs	r6, r0
   2217a:	46b4      	mov	ip, r6
   2217c:	291b      	cmp	r1, #27
   2217e:	dd00      	ble.n	22182 <__aeabi_fadd+0x116>
   22180:	e0aa      	b.n	222d8 <__aeabi_fadd+0x26c>
   22182:	2620      	movs	r6, #32
   22184:	4660      	mov	r0, ip
   22186:	40c8      	lsrs	r0, r1
   22188:	1a71      	subs	r1, r6, r1
   2218a:	4666      	mov	r6, ip
   2218c:	408e      	lsls	r6, r1
   2218e:	0031      	movs	r1, r6
   22190:	1e4e      	subs	r6, r1, #1
   22192:	41b1      	sbcs	r1, r6
   22194:	4301      	orrs	r1, r0
   22196:	185b      	adds	r3, r3, r1
   22198:	0159      	lsls	r1, r3, #5
   2219a:	d5d3      	bpl.n	22144 <__aeabi_fadd+0xd8>
   2219c:	3401      	adds	r4, #1
   2219e:	2cff      	cmp	r4, #255	; 0xff
   221a0:	d100      	bne.n	221a4 <__aeabi_fadd+0x138>
   221a2:	e087      	b.n	222b4 <__aeabi_fadd+0x248>
   221a4:	2201      	movs	r2, #1
   221a6:	4978      	ldr	r1, [pc, #480]	; (22388 <__aeabi_fadd+0x31c>)
   221a8:	401a      	ands	r2, r3
   221aa:	085b      	lsrs	r3, r3, #1
   221ac:	400b      	ands	r3, r1
   221ae:	4313      	orrs	r3, r2
   221b0:	e797      	b.n	220e2 <__aeabi_fadd+0x76>
   221b2:	2c00      	cmp	r4, #0
   221b4:	d000      	beq.n	221b8 <__aeabi_fadd+0x14c>
   221b6:	e0a7      	b.n	22308 <__aeabi_fadd+0x29c>
   221b8:	2b00      	cmp	r3, #0
   221ba:	d000      	beq.n	221be <__aeabi_fadd+0x152>
   221bc:	e0b6      	b.n	2232c <__aeabi_fadd+0x2c0>
   221be:	1e3b      	subs	r3, r7, #0
   221c0:	d162      	bne.n	22288 <__aeabi_fadd+0x21c>
   221c2:	2600      	movs	r6, #0
   221c4:	2200      	movs	r2, #0
   221c6:	0273      	lsls	r3, r6, #9
   221c8:	0a5b      	lsrs	r3, r3, #9
   221ca:	b2e4      	uxtb	r4, r4
   221cc:	e79a      	b.n	22104 <__aeabi_fadd+0x98>
   221ce:	0014      	movs	r4, r2
   221d0:	e787      	b.n	220e2 <__aeabi_fadd+0x76>
   221d2:	2f00      	cmp	r7, #0
   221d4:	d04d      	beq.n	22272 <__aeabi_fadd+0x206>
   221d6:	1e48      	subs	r0, r1, #1
   221d8:	2800      	cmp	r0, #0
   221da:	d157      	bne.n	2228c <__aeabi_fadd+0x220>
   221dc:	4463      	add	r3, ip
   221de:	2401      	movs	r4, #1
   221e0:	015a      	lsls	r2, r3, #5
   221e2:	d5af      	bpl.n	22144 <__aeabi_fadd+0xd8>
   221e4:	2402      	movs	r4, #2
   221e6:	e7dd      	b.n	221a4 <__aeabi_fadd+0x138>
   221e8:	2a00      	cmp	r2, #0
   221ea:	d124      	bne.n	22236 <__aeabi_fadd+0x1ca>
   221ec:	1c62      	adds	r2, r4, #1
   221ee:	b2d2      	uxtb	r2, r2
   221f0:	2a01      	cmp	r2, #1
   221f2:	ddde      	ble.n	221b2 <__aeabi_fadd+0x146>
   221f4:	1bde      	subs	r6, r3, r7
   221f6:	0172      	lsls	r2, r6, #5
   221f8:	d535      	bpl.n	22266 <__aeabi_fadd+0x1fa>
   221fa:	1afe      	subs	r6, r7, r3
   221fc:	000d      	movs	r5, r1
   221fe:	e75c      	b.n	220ba <__aeabi_fadd+0x4e>
   22200:	002a      	movs	r2, r5
   22202:	2300      	movs	r3, #0
   22204:	e77e      	b.n	22104 <__aeabi_fadd+0x98>
   22206:	0033      	movs	r3, r6
   22208:	4a60      	ldr	r2, [pc, #384]	; (2238c <__aeabi_fadd+0x320>)
   2220a:	1a24      	subs	r4, r4, r0
   2220c:	4013      	ands	r3, r2
   2220e:	e768      	b.n	220e2 <__aeabi_fadd+0x76>
   22210:	2900      	cmp	r1, #0
   22212:	d163      	bne.n	222dc <__aeabi_fadd+0x270>
   22214:	1c61      	adds	r1, r4, #1
   22216:	b2c8      	uxtb	r0, r1
   22218:	2801      	cmp	r0, #1
   2221a:	dd4e      	ble.n	222ba <__aeabi_fadd+0x24e>
   2221c:	29ff      	cmp	r1, #255	; 0xff
   2221e:	d049      	beq.n	222b4 <__aeabi_fadd+0x248>
   22220:	4463      	add	r3, ip
   22222:	085b      	lsrs	r3, r3, #1
   22224:	000c      	movs	r4, r1
   22226:	e75c      	b.n	220e2 <__aeabi_fadd+0x76>
   22228:	2aff      	cmp	r2, #255	; 0xff
   2222a:	d041      	beq.n	222b0 <__aeabi_fadd+0x244>
   2222c:	000a      	movs	r2, r1
   2222e:	e779      	b.n	22124 <__aeabi_fadd+0xb8>
   22230:	2201      	movs	r2, #1
   22232:	1a9b      	subs	r3, r3, r2
   22234:	e784      	b.n	22140 <__aeabi_fadd+0xd4>
   22236:	2c00      	cmp	r4, #0
   22238:	d01d      	beq.n	22276 <__aeabi_fadd+0x20a>
   2223a:	28ff      	cmp	r0, #255	; 0xff
   2223c:	d022      	beq.n	22284 <__aeabi_fadd+0x218>
   2223e:	2480      	movs	r4, #128	; 0x80
   22240:	04e4      	lsls	r4, r4, #19
   22242:	4252      	negs	r2, r2
   22244:	4323      	orrs	r3, r4
   22246:	2a1b      	cmp	r2, #27
   22248:	dd00      	ble.n	2224c <__aeabi_fadd+0x1e0>
   2224a:	e08a      	b.n	22362 <__aeabi_fadd+0x2f6>
   2224c:	001c      	movs	r4, r3
   2224e:	2520      	movs	r5, #32
   22250:	40d4      	lsrs	r4, r2
   22252:	1aaa      	subs	r2, r5, r2
   22254:	4093      	lsls	r3, r2
   22256:	1e5a      	subs	r2, r3, #1
   22258:	4193      	sbcs	r3, r2
   2225a:	4323      	orrs	r3, r4
   2225c:	4662      	mov	r2, ip
   2225e:	0004      	movs	r4, r0
   22260:	1ad3      	subs	r3, r2, r3
   22262:	000d      	movs	r5, r1
   22264:	e725      	b.n	220b2 <__aeabi_fadd+0x46>
   22266:	2e00      	cmp	r6, #0
   22268:	d000      	beq.n	2226c <__aeabi_fadd+0x200>
   2226a:	e726      	b.n	220ba <__aeabi_fadd+0x4e>
   2226c:	2200      	movs	r2, #0
   2226e:	2400      	movs	r4, #0
   22270:	e7a9      	b.n	221c6 <__aeabi_fadd+0x15a>
   22272:	000c      	movs	r4, r1
   22274:	e735      	b.n	220e2 <__aeabi_fadd+0x76>
   22276:	2b00      	cmp	r3, #0
   22278:	d04d      	beq.n	22316 <__aeabi_fadd+0x2aa>
   2227a:	43d2      	mvns	r2, r2
   2227c:	2a00      	cmp	r2, #0
   2227e:	d0ed      	beq.n	2225c <__aeabi_fadd+0x1f0>
   22280:	28ff      	cmp	r0, #255	; 0xff
   22282:	d1e0      	bne.n	22246 <__aeabi_fadd+0x1da>
   22284:	4663      	mov	r3, ip
   22286:	24ff      	movs	r4, #255	; 0xff
   22288:	000d      	movs	r5, r1
   2228a:	e72a      	b.n	220e2 <__aeabi_fadd+0x76>
   2228c:	29ff      	cmp	r1, #255	; 0xff
   2228e:	d00f      	beq.n	222b0 <__aeabi_fadd+0x244>
   22290:	0001      	movs	r1, r0
   22292:	e773      	b.n	2217c <__aeabi_fadd+0x110>
   22294:	2b00      	cmp	r3, #0
   22296:	d061      	beq.n	2235c <__aeabi_fadd+0x2f0>
   22298:	24ff      	movs	r4, #255	; 0xff
   2229a:	2f00      	cmp	r7, #0
   2229c:	d100      	bne.n	222a0 <__aeabi_fadd+0x234>
   2229e:	e720      	b.n	220e2 <__aeabi_fadd+0x76>
   222a0:	2280      	movs	r2, #128	; 0x80
   222a2:	4641      	mov	r1, r8
   222a4:	03d2      	lsls	r2, r2, #15
   222a6:	4211      	tst	r1, r2
   222a8:	d002      	beq.n	222b0 <__aeabi_fadd+0x244>
   222aa:	4216      	tst	r6, r2
   222ac:	d100      	bne.n	222b0 <__aeabi_fadd+0x244>
   222ae:	003b      	movs	r3, r7
   222b0:	24ff      	movs	r4, #255	; 0xff
   222b2:	e716      	b.n	220e2 <__aeabi_fadd+0x76>
   222b4:	24ff      	movs	r4, #255	; 0xff
   222b6:	2300      	movs	r3, #0
   222b8:	e724      	b.n	22104 <__aeabi_fadd+0x98>
   222ba:	2c00      	cmp	r4, #0
   222bc:	d1ea      	bne.n	22294 <__aeabi_fadd+0x228>
   222be:	2b00      	cmp	r3, #0
   222c0:	d058      	beq.n	22374 <__aeabi_fadd+0x308>
   222c2:	2f00      	cmp	r7, #0
   222c4:	d100      	bne.n	222c8 <__aeabi_fadd+0x25c>
   222c6:	e70c      	b.n	220e2 <__aeabi_fadd+0x76>
   222c8:	4463      	add	r3, ip
   222ca:	015a      	lsls	r2, r3, #5
   222cc:	d400      	bmi.n	222d0 <__aeabi_fadd+0x264>
   222ce:	e739      	b.n	22144 <__aeabi_fadd+0xd8>
   222d0:	4a2e      	ldr	r2, [pc, #184]	; (2238c <__aeabi_fadd+0x320>)
   222d2:	000c      	movs	r4, r1
   222d4:	4013      	ands	r3, r2
   222d6:	e704      	b.n	220e2 <__aeabi_fadd+0x76>
   222d8:	2101      	movs	r1, #1
   222da:	e75c      	b.n	22196 <__aeabi_fadd+0x12a>
   222dc:	2c00      	cmp	r4, #0
   222de:	d11e      	bne.n	2231e <__aeabi_fadd+0x2b2>
   222e0:	2b00      	cmp	r3, #0
   222e2:	d040      	beq.n	22366 <__aeabi_fadd+0x2fa>
   222e4:	43c9      	mvns	r1, r1
   222e6:	2900      	cmp	r1, #0
   222e8:	d00b      	beq.n	22302 <__aeabi_fadd+0x296>
   222ea:	28ff      	cmp	r0, #255	; 0xff
   222ec:	d036      	beq.n	2235c <__aeabi_fadd+0x2f0>
   222ee:	291b      	cmp	r1, #27
   222f0:	dc47      	bgt.n	22382 <__aeabi_fadd+0x316>
   222f2:	001c      	movs	r4, r3
   222f4:	2620      	movs	r6, #32
   222f6:	40cc      	lsrs	r4, r1
   222f8:	1a71      	subs	r1, r6, r1
   222fa:	408b      	lsls	r3, r1
   222fc:	1e59      	subs	r1, r3, #1
   222fe:	418b      	sbcs	r3, r1
   22300:	4323      	orrs	r3, r4
   22302:	4463      	add	r3, ip
   22304:	0004      	movs	r4, r0
   22306:	e747      	b.n	22198 <__aeabi_fadd+0x12c>
   22308:	2b00      	cmp	r3, #0
   2230a:	d118      	bne.n	2233e <__aeabi_fadd+0x2d2>
   2230c:	1e3b      	subs	r3, r7, #0
   2230e:	d02d      	beq.n	2236c <__aeabi_fadd+0x300>
   22310:	000d      	movs	r5, r1
   22312:	24ff      	movs	r4, #255	; 0xff
   22314:	e6e5      	b.n	220e2 <__aeabi_fadd+0x76>
   22316:	003b      	movs	r3, r7
   22318:	0004      	movs	r4, r0
   2231a:	000d      	movs	r5, r1
   2231c:	e6e1      	b.n	220e2 <__aeabi_fadd+0x76>
   2231e:	28ff      	cmp	r0, #255	; 0xff
   22320:	d01c      	beq.n	2235c <__aeabi_fadd+0x2f0>
   22322:	2480      	movs	r4, #128	; 0x80
   22324:	04e4      	lsls	r4, r4, #19
   22326:	4249      	negs	r1, r1
   22328:	4323      	orrs	r3, r4
   2232a:	e7e0      	b.n	222ee <__aeabi_fadd+0x282>
   2232c:	2f00      	cmp	r7, #0
   2232e:	d100      	bne.n	22332 <__aeabi_fadd+0x2c6>
   22330:	e6d7      	b.n	220e2 <__aeabi_fadd+0x76>
   22332:	1bde      	subs	r6, r3, r7
   22334:	0172      	lsls	r2, r6, #5
   22336:	d51f      	bpl.n	22378 <__aeabi_fadd+0x30c>
   22338:	1afb      	subs	r3, r7, r3
   2233a:	000d      	movs	r5, r1
   2233c:	e6d1      	b.n	220e2 <__aeabi_fadd+0x76>
   2233e:	24ff      	movs	r4, #255	; 0xff
   22340:	2f00      	cmp	r7, #0
   22342:	d100      	bne.n	22346 <__aeabi_fadd+0x2da>
   22344:	e6cd      	b.n	220e2 <__aeabi_fadd+0x76>
   22346:	2280      	movs	r2, #128	; 0x80
   22348:	4640      	mov	r0, r8
   2234a:	03d2      	lsls	r2, r2, #15
   2234c:	4210      	tst	r0, r2
   2234e:	d0af      	beq.n	222b0 <__aeabi_fadd+0x244>
   22350:	4216      	tst	r6, r2
   22352:	d1ad      	bne.n	222b0 <__aeabi_fadd+0x244>
   22354:	003b      	movs	r3, r7
   22356:	000d      	movs	r5, r1
   22358:	24ff      	movs	r4, #255	; 0xff
   2235a:	e6c2      	b.n	220e2 <__aeabi_fadd+0x76>
   2235c:	4663      	mov	r3, ip
   2235e:	24ff      	movs	r4, #255	; 0xff
   22360:	e6bf      	b.n	220e2 <__aeabi_fadd+0x76>
   22362:	2301      	movs	r3, #1
   22364:	e77a      	b.n	2225c <__aeabi_fadd+0x1f0>
   22366:	003b      	movs	r3, r7
   22368:	0004      	movs	r4, r0
   2236a:	e6ba      	b.n	220e2 <__aeabi_fadd+0x76>
   2236c:	2680      	movs	r6, #128	; 0x80
   2236e:	2200      	movs	r2, #0
   22370:	03f6      	lsls	r6, r6, #15
   22372:	e6f0      	b.n	22156 <__aeabi_fadd+0xea>
   22374:	003b      	movs	r3, r7
   22376:	e6b4      	b.n	220e2 <__aeabi_fadd+0x76>
   22378:	1e33      	subs	r3, r6, #0
   2237a:	d000      	beq.n	2237e <__aeabi_fadd+0x312>
   2237c:	e6e2      	b.n	22144 <__aeabi_fadd+0xd8>
   2237e:	2200      	movs	r2, #0
   22380:	e721      	b.n	221c6 <__aeabi_fadd+0x15a>
   22382:	2301      	movs	r3, #1
   22384:	e7bd      	b.n	22302 <__aeabi_fadd+0x296>
   22386:	46c0      	nop			; (mov r8, r8)
   22388:	7dffffff 	.word	0x7dffffff
   2238c:	fbffffff 	.word	0xfbffffff

00022390 <__aeabi_fdiv>:
   22390:	b5f0      	push	{r4, r5, r6, r7, lr}
   22392:	4657      	mov	r7, sl
   22394:	464e      	mov	r6, r9
   22396:	46de      	mov	lr, fp
   22398:	4645      	mov	r5, r8
   2239a:	b5e0      	push	{r5, r6, r7, lr}
   2239c:	0244      	lsls	r4, r0, #9
   2239e:	0043      	lsls	r3, r0, #1
   223a0:	0fc6      	lsrs	r6, r0, #31
   223a2:	b083      	sub	sp, #12
   223a4:	1c0f      	adds	r7, r1, #0
   223a6:	0a64      	lsrs	r4, r4, #9
   223a8:	0e1b      	lsrs	r3, r3, #24
   223aa:	46b2      	mov	sl, r6
   223ac:	d053      	beq.n	22456 <__aeabi_fdiv+0xc6>
   223ae:	2bff      	cmp	r3, #255	; 0xff
   223b0:	d027      	beq.n	22402 <__aeabi_fdiv+0x72>
   223b2:	2280      	movs	r2, #128	; 0x80
   223b4:	00e4      	lsls	r4, r4, #3
   223b6:	04d2      	lsls	r2, r2, #19
   223b8:	4314      	orrs	r4, r2
   223ba:	227f      	movs	r2, #127	; 0x7f
   223bc:	4252      	negs	r2, r2
   223be:	4690      	mov	r8, r2
   223c0:	4498      	add	r8, r3
   223c2:	2300      	movs	r3, #0
   223c4:	4699      	mov	r9, r3
   223c6:	469b      	mov	fp, r3
   223c8:	027d      	lsls	r5, r7, #9
   223ca:	0078      	lsls	r0, r7, #1
   223cc:	0ffb      	lsrs	r3, r7, #31
   223ce:	0a6d      	lsrs	r5, r5, #9
   223d0:	0e00      	lsrs	r0, r0, #24
   223d2:	9300      	str	r3, [sp, #0]
   223d4:	d024      	beq.n	22420 <__aeabi_fdiv+0x90>
   223d6:	28ff      	cmp	r0, #255	; 0xff
   223d8:	d046      	beq.n	22468 <__aeabi_fdiv+0xd8>
   223da:	2380      	movs	r3, #128	; 0x80
   223dc:	2100      	movs	r1, #0
   223de:	00ed      	lsls	r5, r5, #3
   223e0:	04db      	lsls	r3, r3, #19
   223e2:	431d      	orrs	r5, r3
   223e4:	387f      	subs	r0, #127	; 0x7f
   223e6:	4647      	mov	r7, r8
   223e8:	1a38      	subs	r0, r7, r0
   223ea:	464f      	mov	r7, r9
   223ec:	430f      	orrs	r7, r1
   223ee:	00bf      	lsls	r7, r7, #2
   223f0:	46b9      	mov	r9, r7
   223f2:	0033      	movs	r3, r6
   223f4:	9a00      	ldr	r2, [sp, #0]
   223f6:	4f87      	ldr	r7, [pc, #540]	; (22614 <__aeabi_fdiv+0x284>)
   223f8:	4053      	eors	r3, r2
   223fa:	464a      	mov	r2, r9
   223fc:	58ba      	ldr	r2, [r7, r2]
   223fe:	9301      	str	r3, [sp, #4]
   22400:	4697      	mov	pc, r2
   22402:	2c00      	cmp	r4, #0
   22404:	d14e      	bne.n	224a4 <__aeabi_fdiv+0x114>
   22406:	2308      	movs	r3, #8
   22408:	4699      	mov	r9, r3
   2240a:	33f7      	adds	r3, #247	; 0xf7
   2240c:	4698      	mov	r8, r3
   2240e:	3bfd      	subs	r3, #253	; 0xfd
   22410:	469b      	mov	fp, r3
   22412:	027d      	lsls	r5, r7, #9
   22414:	0078      	lsls	r0, r7, #1
   22416:	0ffb      	lsrs	r3, r7, #31
   22418:	0a6d      	lsrs	r5, r5, #9
   2241a:	0e00      	lsrs	r0, r0, #24
   2241c:	9300      	str	r3, [sp, #0]
   2241e:	d1da      	bne.n	223d6 <__aeabi_fdiv+0x46>
   22420:	2d00      	cmp	r5, #0
   22422:	d126      	bne.n	22472 <__aeabi_fdiv+0xe2>
   22424:	2000      	movs	r0, #0
   22426:	2101      	movs	r1, #1
   22428:	0033      	movs	r3, r6
   2242a:	9a00      	ldr	r2, [sp, #0]
   2242c:	4f7a      	ldr	r7, [pc, #488]	; (22618 <__aeabi_fdiv+0x288>)
   2242e:	4053      	eors	r3, r2
   22430:	4642      	mov	r2, r8
   22432:	1a10      	subs	r0, r2, r0
   22434:	464a      	mov	r2, r9
   22436:	430a      	orrs	r2, r1
   22438:	0092      	lsls	r2, r2, #2
   2243a:	58ba      	ldr	r2, [r7, r2]
   2243c:	001d      	movs	r5, r3
   2243e:	4697      	mov	pc, r2
   22440:	9b00      	ldr	r3, [sp, #0]
   22442:	002c      	movs	r4, r5
   22444:	469a      	mov	sl, r3
   22446:	468b      	mov	fp, r1
   22448:	465b      	mov	r3, fp
   2244a:	2b02      	cmp	r3, #2
   2244c:	d131      	bne.n	224b2 <__aeabi_fdiv+0x122>
   2244e:	4653      	mov	r3, sl
   22450:	21ff      	movs	r1, #255	; 0xff
   22452:	2400      	movs	r4, #0
   22454:	e038      	b.n	224c8 <__aeabi_fdiv+0x138>
   22456:	2c00      	cmp	r4, #0
   22458:	d117      	bne.n	2248a <__aeabi_fdiv+0xfa>
   2245a:	2304      	movs	r3, #4
   2245c:	4699      	mov	r9, r3
   2245e:	2300      	movs	r3, #0
   22460:	4698      	mov	r8, r3
   22462:	3301      	adds	r3, #1
   22464:	469b      	mov	fp, r3
   22466:	e7af      	b.n	223c8 <__aeabi_fdiv+0x38>
   22468:	20ff      	movs	r0, #255	; 0xff
   2246a:	2d00      	cmp	r5, #0
   2246c:	d10b      	bne.n	22486 <__aeabi_fdiv+0xf6>
   2246e:	2102      	movs	r1, #2
   22470:	e7da      	b.n	22428 <__aeabi_fdiv+0x98>
   22472:	0028      	movs	r0, r5
   22474:	f002 f880 	bl	24578 <__clzsi2>
   22478:	1f43      	subs	r3, r0, #5
   2247a:	409d      	lsls	r5, r3
   2247c:	2376      	movs	r3, #118	; 0x76
   2247e:	425b      	negs	r3, r3
   22480:	1a18      	subs	r0, r3, r0
   22482:	2100      	movs	r1, #0
   22484:	e7af      	b.n	223e6 <__aeabi_fdiv+0x56>
   22486:	2103      	movs	r1, #3
   22488:	e7ad      	b.n	223e6 <__aeabi_fdiv+0x56>
   2248a:	0020      	movs	r0, r4
   2248c:	f002 f874 	bl	24578 <__clzsi2>
   22490:	1f43      	subs	r3, r0, #5
   22492:	409c      	lsls	r4, r3
   22494:	2376      	movs	r3, #118	; 0x76
   22496:	425b      	negs	r3, r3
   22498:	1a1b      	subs	r3, r3, r0
   2249a:	4698      	mov	r8, r3
   2249c:	2300      	movs	r3, #0
   2249e:	4699      	mov	r9, r3
   224a0:	469b      	mov	fp, r3
   224a2:	e791      	b.n	223c8 <__aeabi_fdiv+0x38>
   224a4:	230c      	movs	r3, #12
   224a6:	4699      	mov	r9, r3
   224a8:	33f3      	adds	r3, #243	; 0xf3
   224aa:	4698      	mov	r8, r3
   224ac:	3bfc      	subs	r3, #252	; 0xfc
   224ae:	469b      	mov	fp, r3
   224b0:	e78a      	b.n	223c8 <__aeabi_fdiv+0x38>
   224b2:	2b03      	cmp	r3, #3
   224b4:	d100      	bne.n	224b8 <__aeabi_fdiv+0x128>
   224b6:	e0a5      	b.n	22604 <__aeabi_fdiv+0x274>
   224b8:	4655      	mov	r5, sl
   224ba:	2b01      	cmp	r3, #1
   224bc:	d000      	beq.n	224c0 <__aeabi_fdiv+0x130>
   224be:	e081      	b.n	225c4 <__aeabi_fdiv+0x234>
   224c0:	2301      	movs	r3, #1
   224c2:	2100      	movs	r1, #0
   224c4:	2400      	movs	r4, #0
   224c6:	402b      	ands	r3, r5
   224c8:	0264      	lsls	r4, r4, #9
   224ca:	05c9      	lsls	r1, r1, #23
   224cc:	0a60      	lsrs	r0, r4, #9
   224ce:	07db      	lsls	r3, r3, #31
   224d0:	4308      	orrs	r0, r1
   224d2:	4318      	orrs	r0, r3
   224d4:	b003      	add	sp, #12
   224d6:	bc3c      	pop	{r2, r3, r4, r5}
   224d8:	4690      	mov	r8, r2
   224da:	4699      	mov	r9, r3
   224dc:	46a2      	mov	sl, r4
   224de:	46ab      	mov	fp, r5
   224e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   224e2:	2480      	movs	r4, #128	; 0x80
   224e4:	2300      	movs	r3, #0
   224e6:	03e4      	lsls	r4, r4, #15
   224e8:	21ff      	movs	r1, #255	; 0xff
   224ea:	e7ed      	b.n	224c8 <__aeabi_fdiv+0x138>
   224ec:	21ff      	movs	r1, #255	; 0xff
   224ee:	2400      	movs	r4, #0
   224f0:	e7ea      	b.n	224c8 <__aeabi_fdiv+0x138>
   224f2:	2301      	movs	r3, #1
   224f4:	1a59      	subs	r1, r3, r1
   224f6:	291b      	cmp	r1, #27
   224f8:	dd66      	ble.n	225c8 <__aeabi_fdiv+0x238>
   224fa:	9a01      	ldr	r2, [sp, #4]
   224fc:	4013      	ands	r3, r2
   224fe:	2100      	movs	r1, #0
   22500:	2400      	movs	r4, #0
   22502:	e7e1      	b.n	224c8 <__aeabi_fdiv+0x138>
   22504:	2380      	movs	r3, #128	; 0x80
   22506:	03db      	lsls	r3, r3, #15
   22508:	421c      	tst	r4, r3
   2250a:	d038      	beq.n	2257e <__aeabi_fdiv+0x1ee>
   2250c:	421d      	tst	r5, r3
   2250e:	d051      	beq.n	225b4 <__aeabi_fdiv+0x224>
   22510:	431c      	orrs	r4, r3
   22512:	0264      	lsls	r4, r4, #9
   22514:	0a64      	lsrs	r4, r4, #9
   22516:	0033      	movs	r3, r6
   22518:	21ff      	movs	r1, #255	; 0xff
   2251a:	e7d5      	b.n	224c8 <__aeabi_fdiv+0x138>
   2251c:	0163      	lsls	r3, r4, #5
   2251e:	016c      	lsls	r4, r5, #5
   22520:	42a3      	cmp	r3, r4
   22522:	d23b      	bcs.n	2259c <__aeabi_fdiv+0x20c>
   22524:	261b      	movs	r6, #27
   22526:	2100      	movs	r1, #0
   22528:	3801      	subs	r0, #1
   2252a:	2501      	movs	r5, #1
   2252c:	001f      	movs	r7, r3
   2252e:	0049      	lsls	r1, r1, #1
   22530:	005b      	lsls	r3, r3, #1
   22532:	2f00      	cmp	r7, #0
   22534:	db01      	blt.n	2253a <__aeabi_fdiv+0x1aa>
   22536:	429c      	cmp	r4, r3
   22538:	d801      	bhi.n	2253e <__aeabi_fdiv+0x1ae>
   2253a:	1b1b      	subs	r3, r3, r4
   2253c:	4329      	orrs	r1, r5
   2253e:	3e01      	subs	r6, #1
   22540:	2e00      	cmp	r6, #0
   22542:	d1f3      	bne.n	2252c <__aeabi_fdiv+0x19c>
   22544:	001c      	movs	r4, r3
   22546:	1e63      	subs	r3, r4, #1
   22548:	419c      	sbcs	r4, r3
   2254a:	430c      	orrs	r4, r1
   2254c:	0001      	movs	r1, r0
   2254e:	317f      	adds	r1, #127	; 0x7f
   22550:	2900      	cmp	r1, #0
   22552:	ddce      	ble.n	224f2 <__aeabi_fdiv+0x162>
   22554:	0763      	lsls	r3, r4, #29
   22556:	d004      	beq.n	22562 <__aeabi_fdiv+0x1d2>
   22558:	230f      	movs	r3, #15
   2255a:	4023      	ands	r3, r4
   2255c:	2b04      	cmp	r3, #4
   2255e:	d000      	beq.n	22562 <__aeabi_fdiv+0x1d2>
   22560:	3404      	adds	r4, #4
   22562:	0123      	lsls	r3, r4, #4
   22564:	d503      	bpl.n	2256e <__aeabi_fdiv+0x1de>
   22566:	0001      	movs	r1, r0
   22568:	4b2c      	ldr	r3, [pc, #176]	; (2261c <__aeabi_fdiv+0x28c>)
   2256a:	3180      	adds	r1, #128	; 0x80
   2256c:	401c      	ands	r4, r3
   2256e:	29fe      	cmp	r1, #254	; 0xfe
   22570:	dd0d      	ble.n	2258e <__aeabi_fdiv+0x1fe>
   22572:	2301      	movs	r3, #1
   22574:	9a01      	ldr	r2, [sp, #4]
   22576:	21ff      	movs	r1, #255	; 0xff
   22578:	4013      	ands	r3, r2
   2257a:	2400      	movs	r4, #0
   2257c:	e7a4      	b.n	224c8 <__aeabi_fdiv+0x138>
   2257e:	2380      	movs	r3, #128	; 0x80
   22580:	03db      	lsls	r3, r3, #15
   22582:	431c      	orrs	r4, r3
   22584:	0264      	lsls	r4, r4, #9
   22586:	0a64      	lsrs	r4, r4, #9
   22588:	0033      	movs	r3, r6
   2258a:	21ff      	movs	r1, #255	; 0xff
   2258c:	e79c      	b.n	224c8 <__aeabi_fdiv+0x138>
   2258e:	2301      	movs	r3, #1
   22590:	9a01      	ldr	r2, [sp, #4]
   22592:	01a4      	lsls	r4, r4, #6
   22594:	0a64      	lsrs	r4, r4, #9
   22596:	b2c9      	uxtb	r1, r1
   22598:	4013      	ands	r3, r2
   2259a:	e795      	b.n	224c8 <__aeabi_fdiv+0x138>
   2259c:	1b1b      	subs	r3, r3, r4
   2259e:	261a      	movs	r6, #26
   225a0:	2101      	movs	r1, #1
   225a2:	e7c2      	b.n	2252a <__aeabi_fdiv+0x19a>
   225a4:	9b00      	ldr	r3, [sp, #0]
   225a6:	468b      	mov	fp, r1
   225a8:	469a      	mov	sl, r3
   225aa:	2400      	movs	r4, #0
   225ac:	e74c      	b.n	22448 <__aeabi_fdiv+0xb8>
   225ae:	0263      	lsls	r3, r4, #9
   225b0:	d5e5      	bpl.n	2257e <__aeabi_fdiv+0x1ee>
   225b2:	2500      	movs	r5, #0
   225b4:	2480      	movs	r4, #128	; 0x80
   225b6:	03e4      	lsls	r4, r4, #15
   225b8:	432c      	orrs	r4, r5
   225ba:	0264      	lsls	r4, r4, #9
   225bc:	0a64      	lsrs	r4, r4, #9
   225be:	9b00      	ldr	r3, [sp, #0]
   225c0:	21ff      	movs	r1, #255	; 0xff
   225c2:	e781      	b.n	224c8 <__aeabi_fdiv+0x138>
   225c4:	9501      	str	r5, [sp, #4]
   225c6:	e7c1      	b.n	2254c <__aeabi_fdiv+0x1bc>
   225c8:	0023      	movs	r3, r4
   225ca:	2020      	movs	r0, #32
   225cc:	40cb      	lsrs	r3, r1
   225ce:	1a41      	subs	r1, r0, r1
   225d0:	408c      	lsls	r4, r1
   225d2:	1e61      	subs	r1, r4, #1
   225d4:	418c      	sbcs	r4, r1
   225d6:	431c      	orrs	r4, r3
   225d8:	0763      	lsls	r3, r4, #29
   225da:	d004      	beq.n	225e6 <__aeabi_fdiv+0x256>
   225dc:	230f      	movs	r3, #15
   225de:	4023      	ands	r3, r4
   225e0:	2b04      	cmp	r3, #4
   225e2:	d000      	beq.n	225e6 <__aeabi_fdiv+0x256>
   225e4:	3404      	adds	r4, #4
   225e6:	0163      	lsls	r3, r4, #5
   225e8:	d505      	bpl.n	225f6 <__aeabi_fdiv+0x266>
   225ea:	2301      	movs	r3, #1
   225ec:	9a01      	ldr	r2, [sp, #4]
   225ee:	2101      	movs	r1, #1
   225f0:	4013      	ands	r3, r2
   225f2:	2400      	movs	r4, #0
   225f4:	e768      	b.n	224c8 <__aeabi_fdiv+0x138>
   225f6:	2301      	movs	r3, #1
   225f8:	9a01      	ldr	r2, [sp, #4]
   225fa:	01a4      	lsls	r4, r4, #6
   225fc:	0a64      	lsrs	r4, r4, #9
   225fe:	4013      	ands	r3, r2
   22600:	2100      	movs	r1, #0
   22602:	e761      	b.n	224c8 <__aeabi_fdiv+0x138>
   22604:	2380      	movs	r3, #128	; 0x80
   22606:	03db      	lsls	r3, r3, #15
   22608:	431c      	orrs	r4, r3
   2260a:	0264      	lsls	r4, r4, #9
   2260c:	0a64      	lsrs	r4, r4, #9
   2260e:	4653      	mov	r3, sl
   22610:	21ff      	movs	r1, #255	; 0xff
   22612:	e759      	b.n	224c8 <__aeabi_fdiv+0x138>
   22614:	00029f60 	.word	0x00029f60
   22618:	00029fa0 	.word	0x00029fa0
   2261c:	f7ffffff 	.word	0xf7ffffff

00022620 <__aeabi_fmul>:
   22620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22622:	4657      	mov	r7, sl
   22624:	464e      	mov	r6, r9
   22626:	4645      	mov	r5, r8
   22628:	46de      	mov	lr, fp
   2262a:	b5e0      	push	{r5, r6, r7, lr}
   2262c:	0247      	lsls	r7, r0, #9
   2262e:	0046      	lsls	r6, r0, #1
   22630:	4688      	mov	r8, r1
   22632:	0a7f      	lsrs	r7, r7, #9
   22634:	0e36      	lsrs	r6, r6, #24
   22636:	0fc4      	lsrs	r4, r0, #31
   22638:	2e00      	cmp	r6, #0
   2263a:	d047      	beq.n	226cc <__aeabi_fmul+0xac>
   2263c:	2eff      	cmp	r6, #255	; 0xff
   2263e:	d024      	beq.n	2268a <__aeabi_fmul+0x6a>
   22640:	00fb      	lsls	r3, r7, #3
   22642:	2780      	movs	r7, #128	; 0x80
   22644:	04ff      	lsls	r7, r7, #19
   22646:	431f      	orrs	r7, r3
   22648:	2300      	movs	r3, #0
   2264a:	4699      	mov	r9, r3
   2264c:	469a      	mov	sl, r3
   2264e:	3e7f      	subs	r6, #127	; 0x7f
   22650:	4643      	mov	r3, r8
   22652:	025d      	lsls	r5, r3, #9
   22654:	0058      	lsls	r0, r3, #1
   22656:	0fdb      	lsrs	r3, r3, #31
   22658:	0a6d      	lsrs	r5, r5, #9
   2265a:	0e00      	lsrs	r0, r0, #24
   2265c:	4698      	mov	r8, r3
   2265e:	d043      	beq.n	226e8 <__aeabi_fmul+0xc8>
   22660:	28ff      	cmp	r0, #255	; 0xff
   22662:	d03b      	beq.n	226dc <__aeabi_fmul+0xbc>
   22664:	00eb      	lsls	r3, r5, #3
   22666:	2580      	movs	r5, #128	; 0x80
   22668:	2200      	movs	r2, #0
   2266a:	04ed      	lsls	r5, r5, #19
   2266c:	431d      	orrs	r5, r3
   2266e:	387f      	subs	r0, #127	; 0x7f
   22670:	1836      	adds	r6, r6, r0
   22672:	1c73      	adds	r3, r6, #1
   22674:	4641      	mov	r1, r8
   22676:	469b      	mov	fp, r3
   22678:	464b      	mov	r3, r9
   2267a:	4061      	eors	r1, r4
   2267c:	4313      	orrs	r3, r2
   2267e:	2b0f      	cmp	r3, #15
   22680:	d864      	bhi.n	2274c <__aeabi_fmul+0x12c>
   22682:	4875      	ldr	r0, [pc, #468]	; (22858 <__aeabi_fmul+0x238>)
   22684:	009b      	lsls	r3, r3, #2
   22686:	58c3      	ldr	r3, [r0, r3]
   22688:	469f      	mov	pc, r3
   2268a:	2f00      	cmp	r7, #0
   2268c:	d142      	bne.n	22714 <__aeabi_fmul+0xf4>
   2268e:	2308      	movs	r3, #8
   22690:	4699      	mov	r9, r3
   22692:	3b06      	subs	r3, #6
   22694:	26ff      	movs	r6, #255	; 0xff
   22696:	469a      	mov	sl, r3
   22698:	e7da      	b.n	22650 <__aeabi_fmul+0x30>
   2269a:	4641      	mov	r1, r8
   2269c:	2a02      	cmp	r2, #2
   2269e:	d028      	beq.n	226f2 <__aeabi_fmul+0xd2>
   226a0:	2a03      	cmp	r2, #3
   226a2:	d100      	bne.n	226a6 <__aeabi_fmul+0x86>
   226a4:	e0ce      	b.n	22844 <__aeabi_fmul+0x224>
   226a6:	2a01      	cmp	r2, #1
   226a8:	d000      	beq.n	226ac <__aeabi_fmul+0x8c>
   226aa:	e0ac      	b.n	22806 <__aeabi_fmul+0x1e6>
   226ac:	4011      	ands	r1, r2
   226ae:	2000      	movs	r0, #0
   226b0:	2200      	movs	r2, #0
   226b2:	b2cc      	uxtb	r4, r1
   226b4:	0240      	lsls	r0, r0, #9
   226b6:	05d2      	lsls	r2, r2, #23
   226b8:	0a40      	lsrs	r0, r0, #9
   226ba:	07e4      	lsls	r4, r4, #31
   226bc:	4310      	orrs	r0, r2
   226be:	4320      	orrs	r0, r4
   226c0:	bc3c      	pop	{r2, r3, r4, r5}
   226c2:	4690      	mov	r8, r2
   226c4:	4699      	mov	r9, r3
   226c6:	46a2      	mov	sl, r4
   226c8:	46ab      	mov	fp, r5
   226ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   226cc:	2f00      	cmp	r7, #0
   226ce:	d115      	bne.n	226fc <__aeabi_fmul+0xdc>
   226d0:	2304      	movs	r3, #4
   226d2:	4699      	mov	r9, r3
   226d4:	3b03      	subs	r3, #3
   226d6:	2600      	movs	r6, #0
   226d8:	469a      	mov	sl, r3
   226da:	e7b9      	b.n	22650 <__aeabi_fmul+0x30>
   226dc:	20ff      	movs	r0, #255	; 0xff
   226de:	2202      	movs	r2, #2
   226e0:	2d00      	cmp	r5, #0
   226e2:	d0c5      	beq.n	22670 <__aeabi_fmul+0x50>
   226e4:	2203      	movs	r2, #3
   226e6:	e7c3      	b.n	22670 <__aeabi_fmul+0x50>
   226e8:	2d00      	cmp	r5, #0
   226ea:	d119      	bne.n	22720 <__aeabi_fmul+0x100>
   226ec:	2000      	movs	r0, #0
   226ee:	2201      	movs	r2, #1
   226f0:	e7be      	b.n	22670 <__aeabi_fmul+0x50>
   226f2:	2401      	movs	r4, #1
   226f4:	22ff      	movs	r2, #255	; 0xff
   226f6:	400c      	ands	r4, r1
   226f8:	2000      	movs	r0, #0
   226fa:	e7db      	b.n	226b4 <__aeabi_fmul+0x94>
   226fc:	0038      	movs	r0, r7
   226fe:	f001 ff3b 	bl	24578 <__clzsi2>
   22702:	2676      	movs	r6, #118	; 0x76
   22704:	1f43      	subs	r3, r0, #5
   22706:	409f      	lsls	r7, r3
   22708:	2300      	movs	r3, #0
   2270a:	4276      	negs	r6, r6
   2270c:	1a36      	subs	r6, r6, r0
   2270e:	4699      	mov	r9, r3
   22710:	469a      	mov	sl, r3
   22712:	e79d      	b.n	22650 <__aeabi_fmul+0x30>
   22714:	230c      	movs	r3, #12
   22716:	4699      	mov	r9, r3
   22718:	3b09      	subs	r3, #9
   2271a:	26ff      	movs	r6, #255	; 0xff
   2271c:	469a      	mov	sl, r3
   2271e:	e797      	b.n	22650 <__aeabi_fmul+0x30>
   22720:	0028      	movs	r0, r5
   22722:	f001 ff29 	bl	24578 <__clzsi2>
   22726:	1f43      	subs	r3, r0, #5
   22728:	409d      	lsls	r5, r3
   2272a:	2376      	movs	r3, #118	; 0x76
   2272c:	425b      	negs	r3, r3
   2272e:	1a18      	subs	r0, r3, r0
   22730:	2200      	movs	r2, #0
   22732:	e79d      	b.n	22670 <__aeabi_fmul+0x50>
   22734:	2080      	movs	r0, #128	; 0x80
   22736:	2400      	movs	r4, #0
   22738:	03c0      	lsls	r0, r0, #15
   2273a:	22ff      	movs	r2, #255	; 0xff
   2273c:	e7ba      	b.n	226b4 <__aeabi_fmul+0x94>
   2273e:	003d      	movs	r5, r7
   22740:	4652      	mov	r2, sl
   22742:	e7ab      	b.n	2269c <__aeabi_fmul+0x7c>
   22744:	003d      	movs	r5, r7
   22746:	0021      	movs	r1, r4
   22748:	4652      	mov	r2, sl
   2274a:	e7a7      	b.n	2269c <__aeabi_fmul+0x7c>
   2274c:	0c3b      	lsrs	r3, r7, #16
   2274e:	469c      	mov	ip, r3
   22750:	042a      	lsls	r2, r5, #16
   22752:	0c12      	lsrs	r2, r2, #16
   22754:	0c2b      	lsrs	r3, r5, #16
   22756:	0014      	movs	r4, r2
   22758:	4660      	mov	r0, ip
   2275a:	4665      	mov	r5, ip
   2275c:	043f      	lsls	r7, r7, #16
   2275e:	0c3f      	lsrs	r7, r7, #16
   22760:	437c      	muls	r4, r7
   22762:	4342      	muls	r2, r0
   22764:	435d      	muls	r5, r3
   22766:	437b      	muls	r3, r7
   22768:	0c27      	lsrs	r7, r4, #16
   2276a:	189b      	adds	r3, r3, r2
   2276c:	18ff      	adds	r7, r7, r3
   2276e:	42ba      	cmp	r2, r7
   22770:	d903      	bls.n	2277a <__aeabi_fmul+0x15a>
   22772:	2380      	movs	r3, #128	; 0x80
   22774:	025b      	lsls	r3, r3, #9
   22776:	469c      	mov	ip, r3
   22778:	4465      	add	r5, ip
   2277a:	0424      	lsls	r4, r4, #16
   2277c:	043a      	lsls	r2, r7, #16
   2277e:	0c24      	lsrs	r4, r4, #16
   22780:	1912      	adds	r2, r2, r4
   22782:	0193      	lsls	r3, r2, #6
   22784:	1e5c      	subs	r4, r3, #1
   22786:	41a3      	sbcs	r3, r4
   22788:	0c3f      	lsrs	r7, r7, #16
   2278a:	0e92      	lsrs	r2, r2, #26
   2278c:	197d      	adds	r5, r7, r5
   2278e:	431a      	orrs	r2, r3
   22790:	01ad      	lsls	r5, r5, #6
   22792:	4315      	orrs	r5, r2
   22794:	012b      	lsls	r3, r5, #4
   22796:	d504      	bpl.n	227a2 <__aeabi_fmul+0x182>
   22798:	2301      	movs	r3, #1
   2279a:	465e      	mov	r6, fp
   2279c:	086a      	lsrs	r2, r5, #1
   2279e:	401d      	ands	r5, r3
   227a0:	4315      	orrs	r5, r2
   227a2:	0032      	movs	r2, r6
   227a4:	327f      	adds	r2, #127	; 0x7f
   227a6:	2a00      	cmp	r2, #0
   227a8:	dd25      	ble.n	227f6 <__aeabi_fmul+0x1d6>
   227aa:	076b      	lsls	r3, r5, #29
   227ac:	d004      	beq.n	227b8 <__aeabi_fmul+0x198>
   227ae:	230f      	movs	r3, #15
   227b0:	402b      	ands	r3, r5
   227b2:	2b04      	cmp	r3, #4
   227b4:	d000      	beq.n	227b8 <__aeabi_fmul+0x198>
   227b6:	3504      	adds	r5, #4
   227b8:	012b      	lsls	r3, r5, #4
   227ba:	d503      	bpl.n	227c4 <__aeabi_fmul+0x1a4>
   227bc:	0032      	movs	r2, r6
   227be:	4b27      	ldr	r3, [pc, #156]	; (2285c <__aeabi_fmul+0x23c>)
   227c0:	3280      	adds	r2, #128	; 0x80
   227c2:	401d      	ands	r5, r3
   227c4:	2afe      	cmp	r2, #254	; 0xfe
   227c6:	dc94      	bgt.n	226f2 <__aeabi_fmul+0xd2>
   227c8:	2401      	movs	r4, #1
   227ca:	01a8      	lsls	r0, r5, #6
   227cc:	0a40      	lsrs	r0, r0, #9
   227ce:	b2d2      	uxtb	r2, r2
   227d0:	400c      	ands	r4, r1
   227d2:	e76f      	b.n	226b4 <__aeabi_fmul+0x94>
   227d4:	2080      	movs	r0, #128	; 0x80
   227d6:	03c0      	lsls	r0, r0, #15
   227d8:	4207      	tst	r7, r0
   227da:	d007      	beq.n	227ec <__aeabi_fmul+0x1cc>
   227dc:	4205      	tst	r5, r0
   227de:	d105      	bne.n	227ec <__aeabi_fmul+0x1cc>
   227e0:	4328      	orrs	r0, r5
   227e2:	0240      	lsls	r0, r0, #9
   227e4:	0a40      	lsrs	r0, r0, #9
   227e6:	4644      	mov	r4, r8
   227e8:	22ff      	movs	r2, #255	; 0xff
   227ea:	e763      	b.n	226b4 <__aeabi_fmul+0x94>
   227ec:	4338      	orrs	r0, r7
   227ee:	0240      	lsls	r0, r0, #9
   227f0:	0a40      	lsrs	r0, r0, #9
   227f2:	22ff      	movs	r2, #255	; 0xff
   227f4:	e75e      	b.n	226b4 <__aeabi_fmul+0x94>
   227f6:	2401      	movs	r4, #1
   227f8:	1aa3      	subs	r3, r4, r2
   227fa:	2b1b      	cmp	r3, #27
   227fc:	dd05      	ble.n	2280a <__aeabi_fmul+0x1ea>
   227fe:	400c      	ands	r4, r1
   22800:	2200      	movs	r2, #0
   22802:	2000      	movs	r0, #0
   22804:	e756      	b.n	226b4 <__aeabi_fmul+0x94>
   22806:	465e      	mov	r6, fp
   22808:	e7cb      	b.n	227a2 <__aeabi_fmul+0x182>
   2280a:	002a      	movs	r2, r5
   2280c:	2020      	movs	r0, #32
   2280e:	40da      	lsrs	r2, r3
   22810:	1ac3      	subs	r3, r0, r3
   22812:	409d      	lsls	r5, r3
   22814:	002b      	movs	r3, r5
   22816:	1e5d      	subs	r5, r3, #1
   22818:	41ab      	sbcs	r3, r5
   2281a:	4313      	orrs	r3, r2
   2281c:	075a      	lsls	r2, r3, #29
   2281e:	d004      	beq.n	2282a <__aeabi_fmul+0x20a>
   22820:	220f      	movs	r2, #15
   22822:	401a      	ands	r2, r3
   22824:	2a04      	cmp	r2, #4
   22826:	d000      	beq.n	2282a <__aeabi_fmul+0x20a>
   22828:	3304      	adds	r3, #4
   2282a:	015a      	lsls	r2, r3, #5
   2282c:	d504      	bpl.n	22838 <__aeabi_fmul+0x218>
   2282e:	2401      	movs	r4, #1
   22830:	2201      	movs	r2, #1
   22832:	400c      	ands	r4, r1
   22834:	2000      	movs	r0, #0
   22836:	e73d      	b.n	226b4 <__aeabi_fmul+0x94>
   22838:	2401      	movs	r4, #1
   2283a:	019b      	lsls	r3, r3, #6
   2283c:	0a58      	lsrs	r0, r3, #9
   2283e:	400c      	ands	r4, r1
   22840:	2200      	movs	r2, #0
   22842:	e737      	b.n	226b4 <__aeabi_fmul+0x94>
   22844:	2080      	movs	r0, #128	; 0x80
   22846:	2401      	movs	r4, #1
   22848:	03c0      	lsls	r0, r0, #15
   2284a:	4328      	orrs	r0, r5
   2284c:	0240      	lsls	r0, r0, #9
   2284e:	0a40      	lsrs	r0, r0, #9
   22850:	400c      	ands	r4, r1
   22852:	22ff      	movs	r2, #255	; 0xff
   22854:	e72e      	b.n	226b4 <__aeabi_fmul+0x94>
   22856:	46c0      	nop			; (mov r8, r8)
   22858:	00029fe0 	.word	0x00029fe0
   2285c:	f7ffffff 	.word	0xf7ffffff

00022860 <__aeabi_fsub>:
   22860:	b5f0      	push	{r4, r5, r6, r7, lr}
   22862:	464f      	mov	r7, r9
   22864:	46d6      	mov	lr, sl
   22866:	4646      	mov	r6, r8
   22868:	0044      	lsls	r4, r0, #1
   2286a:	b5c0      	push	{r6, r7, lr}
   2286c:	0fc2      	lsrs	r2, r0, #31
   2286e:	0247      	lsls	r7, r0, #9
   22870:	0248      	lsls	r0, r1, #9
   22872:	0a40      	lsrs	r0, r0, #9
   22874:	4684      	mov	ip, r0
   22876:	4666      	mov	r6, ip
   22878:	0a7b      	lsrs	r3, r7, #9
   2287a:	0048      	lsls	r0, r1, #1
   2287c:	0fc9      	lsrs	r1, r1, #31
   2287e:	469a      	mov	sl, r3
   22880:	0e24      	lsrs	r4, r4, #24
   22882:	0015      	movs	r5, r2
   22884:	00db      	lsls	r3, r3, #3
   22886:	0e00      	lsrs	r0, r0, #24
   22888:	4689      	mov	r9, r1
   2288a:	00f6      	lsls	r6, r6, #3
   2288c:	28ff      	cmp	r0, #255	; 0xff
   2288e:	d100      	bne.n	22892 <__aeabi_fsub+0x32>
   22890:	e08f      	b.n	229b2 <__aeabi_fsub+0x152>
   22892:	2101      	movs	r1, #1
   22894:	464f      	mov	r7, r9
   22896:	404f      	eors	r7, r1
   22898:	0039      	movs	r1, r7
   2289a:	4291      	cmp	r1, r2
   2289c:	d066      	beq.n	2296c <__aeabi_fsub+0x10c>
   2289e:	1a22      	subs	r2, r4, r0
   228a0:	2a00      	cmp	r2, #0
   228a2:	dc00      	bgt.n	228a6 <__aeabi_fsub+0x46>
   228a4:	e09d      	b.n	229e2 <__aeabi_fsub+0x182>
   228a6:	2800      	cmp	r0, #0
   228a8:	d13d      	bne.n	22926 <__aeabi_fsub+0xc6>
   228aa:	2e00      	cmp	r6, #0
   228ac:	d100      	bne.n	228b0 <__aeabi_fsub+0x50>
   228ae:	e08b      	b.n	229c8 <__aeabi_fsub+0x168>
   228b0:	1e51      	subs	r1, r2, #1
   228b2:	2900      	cmp	r1, #0
   228b4:	d000      	beq.n	228b8 <__aeabi_fsub+0x58>
   228b6:	e0b5      	b.n	22a24 <__aeabi_fsub+0x1c4>
   228b8:	2401      	movs	r4, #1
   228ba:	1b9b      	subs	r3, r3, r6
   228bc:	015a      	lsls	r2, r3, #5
   228be:	d544      	bpl.n	2294a <__aeabi_fsub+0xea>
   228c0:	019b      	lsls	r3, r3, #6
   228c2:	099f      	lsrs	r7, r3, #6
   228c4:	0038      	movs	r0, r7
   228c6:	f001 fe57 	bl	24578 <__clzsi2>
   228ca:	3805      	subs	r0, #5
   228cc:	4087      	lsls	r7, r0
   228ce:	4284      	cmp	r4, r0
   228d0:	dd00      	ble.n	228d4 <__aeabi_fsub+0x74>
   228d2:	e096      	b.n	22a02 <__aeabi_fsub+0x1a2>
   228d4:	1b04      	subs	r4, r0, r4
   228d6:	003a      	movs	r2, r7
   228d8:	2020      	movs	r0, #32
   228da:	3401      	adds	r4, #1
   228dc:	40e2      	lsrs	r2, r4
   228de:	1b04      	subs	r4, r0, r4
   228e0:	40a7      	lsls	r7, r4
   228e2:	003b      	movs	r3, r7
   228e4:	1e5f      	subs	r7, r3, #1
   228e6:	41bb      	sbcs	r3, r7
   228e8:	2400      	movs	r4, #0
   228ea:	4313      	orrs	r3, r2
   228ec:	075a      	lsls	r2, r3, #29
   228ee:	d004      	beq.n	228fa <__aeabi_fsub+0x9a>
   228f0:	220f      	movs	r2, #15
   228f2:	401a      	ands	r2, r3
   228f4:	2a04      	cmp	r2, #4
   228f6:	d000      	beq.n	228fa <__aeabi_fsub+0x9a>
   228f8:	3304      	adds	r3, #4
   228fa:	015a      	lsls	r2, r3, #5
   228fc:	d527      	bpl.n	2294e <__aeabi_fsub+0xee>
   228fe:	3401      	adds	r4, #1
   22900:	2cff      	cmp	r4, #255	; 0xff
   22902:	d100      	bne.n	22906 <__aeabi_fsub+0xa6>
   22904:	e079      	b.n	229fa <__aeabi_fsub+0x19a>
   22906:	2201      	movs	r2, #1
   22908:	019b      	lsls	r3, r3, #6
   2290a:	0a5b      	lsrs	r3, r3, #9
   2290c:	b2e4      	uxtb	r4, r4
   2290e:	402a      	ands	r2, r5
   22910:	025b      	lsls	r3, r3, #9
   22912:	05e4      	lsls	r4, r4, #23
   22914:	0a58      	lsrs	r0, r3, #9
   22916:	07d2      	lsls	r2, r2, #31
   22918:	4320      	orrs	r0, r4
   2291a:	4310      	orrs	r0, r2
   2291c:	bc1c      	pop	{r2, r3, r4}
   2291e:	4690      	mov	r8, r2
   22920:	4699      	mov	r9, r3
   22922:	46a2      	mov	sl, r4
   22924:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22926:	2cff      	cmp	r4, #255	; 0xff
   22928:	d0e0      	beq.n	228ec <__aeabi_fsub+0x8c>
   2292a:	2180      	movs	r1, #128	; 0x80
   2292c:	04c9      	lsls	r1, r1, #19
   2292e:	430e      	orrs	r6, r1
   22930:	2a1b      	cmp	r2, #27
   22932:	dc7b      	bgt.n	22a2c <__aeabi_fsub+0x1cc>
   22934:	0031      	movs	r1, r6
   22936:	2020      	movs	r0, #32
   22938:	40d1      	lsrs	r1, r2
   2293a:	1a82      	subs	r2, r0, r2
   2293c:	4096      	lsls	r6, r2
   2293e:	1e72      	subs	r2, r6, #1
   22940:	4196      	sbcs	r6, r2
   22942:	430e      	orrs	r6, r1
   22944:	1b9b      	subs	r3, r3, r6
   22946:	015a      	lsls	r2, r3, #5
   22948:	d4ba      	bmi.n	228c0 <__aeabi_fsub+0x60>
   2294a:	075a      	lsls	r2, r3, #29
   2294c:	d1d0      	bne.n	228f0 <__aeabi_fsub+0x90>
   2294e:	2201      	movs	r2, #1
   22950:	08df      	lsrs	r7, r3, #3
   22952:	402a      	ands	r2, r5
   22954:	2cff      	cmp	r4, #255	; 0xff
   22956:	d133      	bne.n	229c0 <__aeabi_fsub+0x160>
   22958:	2f00      	cmp	r7, #0
   2295a:	d100      	bne.n	2295e <__aeabi_fsub+0xfe>
   2295c:	e0a8      	b.n	22ab0 <__aeabi_fsub+0x250>
   2295e:	2380      	movs	r3, #128	; 0x80
   22960:	03db      	lsls	r3, r3, #15
   22962:	433b      	orrs	r3, r7
   22964:	025b      	lsls	r3, r3, #9
   22966:	0a5b      	lsrs	r3, r3, #9
   22968:	24ff      	movs	r4, #255	; 0xff
   2296a:	e7d1      	b.n	22910 <__aeabi_fsub+0xb0>
   2296c:	1a21      	subs	r1, r4, r0
   2296e:	2900      	cmp	r1, #0
   22970:	dd4c      	ble.n	22a0c <__aeabi_fsub+0x1ac>
   22972:	2800      	cmp	r0, #0
   22974:	d02a      	beq.n	229cc <__aeabi_fsub+0x16c>
   22976:	2cff      	cmp	r4, #255	; 0xff
   22978:	d0b8      	beq.n	228ec <__aeabi_fsub+0x8c>
   2297a:	2080      	movs	r0, #128	; 0x80
   2297c:	04c0      	lsls	r0, r0, #19
   2297e:	4306      	orrs	r6, r0
   22980:	291b      	cmp	r1, #27
   22982:	dd00      	ble.n	22986 <__aeabi_fsub+0x126>
   22984:	e0af      	b.n	22ae6 <__aeabi_fsub+0x286>
   22986:	0030      	movs	r0, r6
   22988:	2720      	movs	r7, #32
   2298a:	40c8      	lsrs	r0, r1
   2298c:	1a79      	subs	r1, r7, r1
   2298e:	408e      	lsls	r6, r1
   22990:	1e71      	subs	r1, r6, #1
   22992:	418e      	sbcs	r6, r1
   22994:	4306      	orrs	r6, r0
   22996:	199b      	adds	r3, r3, r6
   22998:	0159      	lsls	r1, r3, #5
   2299a:	d5d6      	bpl.n	2294a <__aeabi_fsub+0xea>
   2299c:	3401      	adds	r4, #1
   2299e:	2cff      	cmp	r4, #255	; 0xff
   229a0:	d100      	bne.n	229a4 <__aeabi_fsub+0x144>
   229a2:	e085      	b.n	22ab0 <__aeabi_fsub+0x250>
   229a4:	2201      	movs	r2, #1
   229a6:	497a      	ldr	r1, [pc, #488]	; (22b90 <__aeabi_fsub+0x330>)
   229a8:	401a      	ands	r2, r3
   229aa:	085b      	lsrs	r3, r3, #1
   229ac:	400b      	ands	r3, r1
   229ae:	4313      	orrs	r3, r2
   229b0:	e79c      	b.n	228ec <__aeabi_fsub+0x8c>
   229b2:	2e00      	cmp	r6, #0
   229b4:	d000      	beq.n	229b8 <__aeabi_fsub+0x158>
   229b6:	e770      	b.n	2289a <__aeabi_fsub+0x3a>
   229b8:	e76b      	b.n	22892 <__aeabi_fsub+0x32>
   229ba:	1e3b      	subs	r3, r7, #0
   229bc:	d1c5      	bne.n	2294a <__aeabi_fsub+0xea>
   229be:	2200      	movs	r2, #0
   229c0:	027b      	lsls	r3, r7, #9
   229c2:	0a5b      	lsrs	r3, r3, #9
   229c4:	b2e4      	uxtb	r4, r4
   229c6:	e7a3      	b.n	22910 <__aeabi_fsub+0xb0>
   229c8:	0014      	movs	r4, r2
   229ca:	e78f      	b.n	228ec <__aeabi_fsub+0x8c>
   229cc:	2e00      	cmp	r6, #0
   229ce:	d04d      	beq.n	22a6c <__aeabi_fsub+0x20c>
   229d0:	1e48      	subs	r0, r1, #1
   229d2:	2800      	cmp	r0, #0
   229d4:	d157      	bne.n	22a86 <__aeabi_fsub+0x226>
   229d6:	199b      	adds	r3, r3, r6
   229d8:	2401      	movs	r4, #1
   229da:	015a      	lsls	r2, r3, #5
   229dc:	d5b5      	bpl.n	2294a <__aeabi_fsub+0xea>
   229de:	2402      	movs	r4, #2
   229e0:	e7e0      	b.n	229a4 <__aeabi_fsub+0x144>
   229e2:	2a00      	cmp	r2, #0
   229e4:	d125      	bne.n	22a32 <__aeabi_fsub+0x1d2>
   229e6:	1c62      	adds	r2, r4, #1
   229e8:	b2d2      	uxtb	r2, r2
   229ea:	2a01      	cmp	r2, #1
   229ec:	dd72      	ble.n	22ad4 <__aeabi_fsub+0x274>
   229ee:	1b9f      	subs	r7, r3, r6
   229f0:	017a      	lsls	r2, r7, #5
   229f2:	d535      	bpl.n	22a60 <__aeabi_fsub+0x200>
   229f4:	1af7      	subs	r7, r6, r3
   229f6:	000d      	movs	r5, r1
   229f8:	e764      	b.n	228c4 <__aeabi_fsub+0x64>
   229fa:	2201      	movs	r2, #1
   229fc:	2300      	movs	r3, #0
   229fe:	402a      	ands	r2, r5
   22a00:	e786      	b.n	22910 <__aeabi_fsub+0xb0>
   22a02:	003b      	movs	r3, r7
   22a04:	4a63      	ldr	r2, [pc, #396]	; (22b94 <__aeabi_fsub+0x334>)
   22a06:	1a24      	subs	r4, r4, r0
   22a08:	4013      	ands	r3, r2
   22a0a:	e76f      	b.n	228ec <__aeabi_fsub+0x8c>
   22a0c:	2900      	cmp	r1, #0
   22a0e:	d16c      	bne.n	22aea <__aeabi_fsub+0x28a>
   22a10:	1c61      	adds	r1, r4, #1
   22a12:	b2c8      	uxtb	r0, r1
   22a14:	2801      	cmp	r0, #1
   22a16:	dd4e      	ble.n	22ab6 <__aeabi_fsub+0x256>
   22a18:	29ff      	cmp	r1, #255	; 0xff
   22a1a:	d049      	beq.n	22ab0 <__aeabi_fsub+0x250>
   22a1c:	199b      	adds	r3, r3, r6
   22a1e:	085b      	lsrs	r3, r3, #1
   22a20:	000c      	movs	r4, r1
   22a22:	e763      	b.n	228ec <__aeabi_fsub+0x8c>
   22a24:	2aff      	cmp	r2, #255	; 0xff
   22a26:	d041      	beq.n	22aac <__aeabi_fsub+0x24c>
   22a28:	000a      	movs	r2, r1
   22a2a:	e781      	b.n	22930 <__aeabi_fsub+0xd0>
   22a2c:	2601      	movs	r6, #1
   22a2e:	1b9b      	subs	r3, r3, r6
   22a30:	e789      	b.n	22946 <__aeabi_fsub+0xe6>
   22a32:	2c00      	cmp	r4, #0
   22a34:	d01c      	beq.n	22a70 <__aeabi_fsub+0x210>
   22a36:	28ff      	cmp	r0, #255	; 0xff
   22a38:	d021      	beq.n	22a7e <__aeabi_fsub+0x21e>
   22a3a:	2480      	movs	r4, #128	; 0x80
   22a3c:	04e4      	lsls	r4, r4, #19
   22a3e:	4252      	negs	r2, r2
   22a40:	4323      	orrs	r3, r4
   22a42:	2a1b      	cmp	r2, #27
   22a44:	dd00      	ble.n	22a48 <__aeabi_fsub+0x1e8>
   22a46:	e096      	b.n	22b76 <__aeabi_fsub+0x316>
   22a48:	001c      	movs	r4, r3
   22a4a:	2520      	movs	r5, #32
   22a4c:	40d4      	lsrs	r4, r2
   22a4e:	1aaa      	subs	r2, r5, r2
   22a50:	4093      	lsls	r3, r2
   22a52:	1e5a      	subs	r2, r3, #1
   22a54:	4193      	sbcs	r3, r2
   22a56:	4323      	orrs	r3, r4
   22a58:	1af3      	subs	r3, r6, r3
   22a5a:	0004      	movs	r4, r0
   22a5c:	000d      	movs	r5, r1
   22a5e:	e72d      	b.n	228bc <__aeabi_fsub+0x5c>
   22a60:	2f00      	cmp	r7, #0
   22a62:	d000      	beq.n	22a66 <__aeabi_fsub+0x206>
   22a64:	e72e      	b.n	228c4 <__aeabi_fsub+0x64>
   22a66:	2200      	movs	r2, #0
   22a68:	2400      	movs	r4, #0
   22a6a:	e7a9      	b.n	229c0 <__aeabi_fsub+0x160>
   22a6c:	000c      	movs	r4, r1
   22a6e:	e73d      	b.n	228ec <__aeabi_fsub+0x8c>
   22a70:	2b00      	cmp	r3, #0
   22a72:	d058      	beq.n	22b26 <__aeabi_fsub+0x2c6>
   22a74:	43d2      	mvns	r2, r2
   22a76:	2a00      	cmp	r2, #0
   22a78:	d0ee      	beq.n	22a58 <__aeabi_fsub+0x1f8>
   22a7a:	28ff      	cmp	r0, #255	; 0xff
   22a7c:	d1e1      	bne.n	22a42 <__aeabi_fsub+0x1e2>
   22a7e:	0033      	movs	r3, r6
   22a80:	24ff      	movs	r4, #255	; 0xff
   22a82:	000d      	movs	r5, r1
   22a84:	e732      	b.n	228ec <__aeabi_fsub+0x8c>
   22a86:	29ff      	cmp	r1, #255	; 0xff
   22a88:	d010      	beq.n	22aac <__aeabi_fsub+0x24c>
   22a8a:	0001      	movs	r1, r0
   22a8c:	e778      	b.n	22980 <__aeabi_fsub+0x120>
   22a8e:	2b00      	cmp	r3, #0
   22a90:	d06e      	beq.n	22b70 <__aeabi_fsub+0x310>
   22a92:	24ff      	movs	r4, #255	; 0xff
   22a94:	2e00      	cmp	r6, #0
   22a96:	d100      	bne.n	22a9a <__aeabi_fsub+0x23a>
   22a98:	e728      	b.n	228ec <__aeabi_fsub+0x8c>
   22a9a:	2280      	movs	r2, #128	; 0x80
   22a9c:	4651      	mov	r1, sl
   22a9e:	03d2      	lsls	r2, r2, #15
   22aa0:	4211      	tst	r1, r2
   22aa2:	d003      	beq.n	22aac <__aeabi_fsub+0x24c>
   22aa4:	4661      	mov	r1, ip
   22aa6:	4211      	tst	r1, r2
   22aa8:	d100      	bne.n	22aac <__aeabi_fsub+0x24c>
   22aaa:	0033      	movs	r3, r6
   22aac:	24ff      	movs	r4, #255	; 0xff
   22aae:	e71d      	b.n	228ec <__aeabi_fsub+0x8c>
   22ab0:	24ff      	movs	r4, #255	; 0xff
   22ab2:	2300      	movs	r3, #0
   22ab4:	e72c      	b.n	22910 <__aeabi_fsub+0xb0>
   22ab6:	2c00      	cmp	r4, #0
   22ab8:	d1e9      	bne.n	22a8e <__aeabi_fsub+0x22e>
   22aba:	2b00      	cmp	r3, #0
   22abc:	d063      	beq.n	22b86 <__aeabi_fsub+0x326>
   22abe:	2e00      	cmp	r6, #0
   22ac0:	d100      	bne.n	22ac4 <__aeabi_fsub+0x264>
   22ac2:	e713      	b.n	228ec <__aeabi_fsub+0x8c>
   22ac4:	199b      	adds	r3, r3, r6
   22ac6:	015a      	lsls	r2, r3, #5
   22ac8:	d400      	bmi.n	22acc <__aeabi_fsub+0x26c>
   22aca:	e73e      	b.n	2294a <__aeabi_fsub+0xea>
   22acc:	4a31      	ldr	r2, [pc, #196]	; (22b94 <__aeabi_fsub+0x334>)
   22ace:	000c      	movs	r4, r1
   22ad0:	4013      	ands	r3, r2
   22ad2:	e70b      	b.n	228ec <__aeabi_fsub+0x8c>
   22ad4:	2c00      	cmp	r4, #0
   22ad6:	d11e      	bne.n	22b16 <__aeabi_fsub+0x2b6>
   22ad8:	2b00      	cmp	r3, #0
   22ada:	d12f      	bne.n	22b3c <__aeabi_fsub+0x2dc>
   22adc:	2e00      	cmp	r6, #0
   22ade:	d04f      	beq.n	22b80 <__aeabi_fsub+0x320>
   22ae0:	0033      	movs	r3, r6
   22ae2:	000d      	movs	r5, r1
   22ae4:	e702      	b.n	228ec <__aeabi_fsub+0x8c>
   22ae6:	2601      	movs	r6, #1
   22ae8:	e755      	b.n	22996 <__aeabi_fsub+0x136>
   22aea:	2c00      	cmp	r4, #0
   22aec:	d11f      	bne.n	22b2e <__aeabi_fsub+0x2ce>
   22aee:	2b00      	cmp	r3, #0
   22af0:	d043      	beq.n	22b7a <__aeabi_fsub+0x31a>
   22af2:	43c9      	mvns	r1, r1
   22af4:	2900      	cmp	r1, #0
   22af6:	d00b      	beq.n	22b10 <__aeabi_fsub+0x2b0>
   22af8:	28ff      	cmp	r0, #255	; 0xff
   22afa:	d039      	beq.n	22b70 <__aeabi_fsub+0x310>
   22afc:	291b      	cmp	r1, #27
   22afe:	dc44      	bgt.n	22b8a <__aeabi_fsub+0x32a>
   22b00:	001c      	movs	r4, r3
   22b02:	2720      	movs	r7, #32
   22b04:	40cc      	lsrs	r4, r1
   22b06:	1a79      	subs	r1, r7, r1
   22b08:	408b      	lsls	r3, r1
   22b0a:	1e59      	subs	r1, r3, #1
   22b0c:	418b      	sbcs	r3, r1
   22b0e:	4323      	orrs	r3, r4
   22b10:	199b      	adds	r3, r3, r6
   22b12:	0004      	movs	r4, r0
   22b14:	e740      	b.n	22998 <__aeabi_fsub+0x138>
   22b16:	2b00      	cmp	r3, #0
   22b18:	d11a      	bne.n	22b50 <__aeabi_fsub+0x2f0>
   22b1a:	2e00      	cmp	r6, #0
   22b1c:	d124      	bne.n	22b68 <__aeabi_fsub+0x308>
   22b1e:	2780      	movs	r7, #128	; 0x80
   22b20:	2200      	movs	r2, #0
   22b22:	03ff      	lsls	r7, r7, #15
   22b24:	e71b      	b.n	2295e <__aeabi_fsub+0xfe>
   22b26:	0033      	movs	r3, r6
   22b28:	0004      	movs	r4, r0
   22b2a:	000d      	movs	r5, r1
   22b2c:	e6de      	b.n	228ec <__aeabi_fsub+0x8c>
   22b2e:	28ff      	cmp	r0, #255	; 0xff
   22b30:	d01e      	beq.n	22b70 <__aeabi_fsub+0x310>
   22b32:	2480      	movs	r4, #128	; 0x80
   22b34:	04e4      	lsls	r4, r4, #19
   22b36:	4249      	negs	r1, r1
   22b38:	4323      	orrs	r3, r4
   22b3a:	e7df      	b.n	22afc <__aeabi_fsub+0x29c>
   22b3c:	2e00      	cmp	r6, #0
   22b3e:	d100      	bne.n	22b42 <__aeabi_fsub+0x2e2>
   22b40:	e6d4      	b.n	228ec <__aeabi_fsub+0x8c>
   22b42:	1b9f      	subs	r7, r3, r6
   22b44:	017a      	lsls	r2, r7, #5
   22b46:	d400      	bmi.n	22b4a <__aeabi_fsub+0x2ea>
   22b48:	e737      	b.n	229ba <__aeabi_fsub+0x15a>
   22b4a:	1af3      	subs	r3, r6, r3
   22b4c:	000d      	movs	r5, r1
   22b4e:	e6cd      	b.n	228ec <__aeabi_fsub+0x8c>
   22b50:	24ff      	movs	r4, #255	; 0xff
   22b52:	2e00      	cmp	r6, #0
   22b54:	d100      	bne.n	22b58 <__aeabi_fsub+0x2f8>
   22b56:	e6c9      	b.n	228ec <__aeabi_fsub+0x8c>
   22b58:	2280      	movs	r2, #128	; 0x80
   22b5a:	4650      	mov	r0, sl
   22b5c:	03d2      	lsls	r2, r2, #15
   22b5e:	4210      	tst	r0, r2
   22b60:	d0a4      	beq.n	22aac <__aeabi_fsub+0x24c>
   22b62:	4660      	mov	r0, ip
   22b64:	4210      	tst	r0, r2
   22b66:	d1a1      	bne.n	22aac <__aeabi_fsub+0x24c>
   22b68:	0033      	movs	r3, r6
   22b6a:	000d      	movs	r5, r1
   22b6c:	24ff      	movs	r4, #255	; 0xff
   22b6e:	e6bd      	b.n	228ec <__aeabi_fsub+0x8c>
   22b70:	0033      	movs	r3, r6
   22b72:	24ff      	movs	r4, #255	; 0xff
   22b74:	e6ba      	b.n	228ec <__aeabi_fsub+0x8c>
   22b76:	2301      	movs	r3, #1
   22b78:	e76e      	b.n	22a58 <__aeabi_fsub+0x1f8>
   22b7a:	0033      	movs	r3, r6
   22b7c:	0004      	movs	r4, r0
   22b7e:	e6b5      	b.n	228ec <__aeabi_fsub+0x8c>
   22b80:	2700      	movs	r7, #0
   22b82:	2200      	movs	r2, #0
   22b84:	e71c      	b.n	229c0 <__aeabi_fsub+0x160>
   22b86:	0033      	movs	r3, r6
   22b88:	e6b0      	b.n	228ec <__aeabi_fsub+0x8c>
   22b8a:	2301      	movs	r3, #1
   22b8c:	e7c0      	b.n	22b10 <__aeabi_fsub+0x2b0>
   22b8e:	46c0      	nop			; (mov r8, r8)
   22b90:	7dffffff 	.word	0x7dffffff
   22b94:	fbffffff 	.word	0xfbffffff

00022b98 <__aeabi_f2iz>:
   22b98:	0241      	lsls	r1, r0, #9
   22b9a:	0043      	lsls	r3, r0, #1
   22b9c:	0fc2      	lsrs	r2, r0, #31
   22b9e:	0a49      	lsrs	r1, r1, #9
   22ba0:	0e1b      	lsrs	r3, r3, #24
   22ba2:	2000      	movs	r0, #0
   22ba4:	2b7e      	cmp	r3, #126	; 0x7e
   22ba6:	dd0d      	ble.n	22bc4 <__aeabi_f2iz+0x2c>
   22ba8:	2b9d      	cmp	r3, #157	; 0x9d
   22baa:	dc0c      	bgt.n	22bc6 <__aeabi_f2iz+0x2e>
   22bac:	2080      	movs	r0, #128	; 0x80
   22bae:	0400      	lsls	r0, r0, #16
   22bb0:	4301      	orrs	r1, r0
   22bb2:	2b95      	cmp	r3, #149	; 0x95
   22bb4:	dc0a      	bgt.n	22bcc <__aeabi_f2iz+0x34>
   22bb6:	2096      	movs	r0, #150	; 0x96
   22bb8:	1ac3      	subs	r3, r0, r3
   22bba:	40d9      	lsrs	r1, r3
   22bbc:	4248      	negs	r0, r1
   22bbe:	2a00      	cmp	r2, #0
   22bc0:	d100      	bne.n	22bc4 <__aeabi_f2iz+0x2c>
   22bc2:	0008      	movs	r0, r1
   22bc4:	4770      	bx	lr
   22bc6:	4b03      	ldr	r3, [pc, #12]	; (22bd4 <__aeabi_f2iz+0x3c>)
   22bc8:	18d0      	adds	r0, r2, r3
   22bca:	e7fb      	b.n	22bc4 <__aeabi_f2iz+0x2c>
   22bcc:	3b96      	subs	r3, #150	; 0x96
   22bce:	4099      	lsls	r1, r3
   22bd0:	e7f4      	b.n	22bbc <__aeabi_f2iz+0x24>
   22bd2:	46c0      	nop			; (mov r8, r8)
   22bd4:	7fffffff 	.word	0x7fffffff

00022bd8 <__aeabi_i2f>:
   22bd8:	b570      	push	{r4, r5, r6, lr}
   22bda:	2800      	cmp	r0, #0
   22bdc:	d030      	beq.n	22c40 <__aeabi_i2f+0x68>
   22bde:	17c3      	asrs	r3, r0, #31
   22be0:	18c4      	adds	r4, r0, r3
   22be2:	405c      	eors	r4, r3
   22be4:	0fc5      	lsrs	r5, r0, #31
   22be6:	0020      	movs	r0, r4
   22be8:	f001 fcc6 	bl	24578 <__clzsi2>
   22bec:	239e      	movs	r3, #158	; 0x9e
   22bee:	1a1b      	subs	r3, r3, r0
   22bf0:	2b96      	cmp	r3, #150	; 0x96
   22bf2:	dc0d      	bgt.n	22c10 <__aeabi_i2f+0x38>
   22bf4:	2296      	movs	r2, #150	; 0x96
   22bf6:	1ad2      	subs	r2, r2, r3
   22bf8:	4094      	lsls	r4, r2
   22bfa:	002a      	movs	r2, r5
   22bfc:	0264      	lsls	r4, r4, #9
   22bfe:	0a64      	lsrs	r4, r4, #9
   22c00:	b2db      	uxtb	r3, r3
   22c02:	0264      	lsls	r4, r4, #9
   22c04:	05db      	lsls	r3, r3, #23
   22c06:	0a60      	lsrs	r0, r4, #9
   22c08:	07d2      	lsls	r2, r2, #31
   22c0a:	4318      	orrs	r0, r3
   22c0c:	4310      	orrs	r0, r2
   22c0e:	bd70      	pop	{r4, r5, r6, pc}
   22c10:	2b99      	cmp	r3, #153	; 0x99
   22c12:	dc19      	bgt.n	22c48 <__aeabi_i2f+0x70>
   22c14:	2299      	movs	r2, #153	; 0x99
   22c16:	1ad2      	subs	r2, r2, r3
   22c18:	2a00      	cmp	r2, #0
   22c1a:	dd29      	ble.n	22c70 <__aeabi_i2f+0x98>
   22c1c:	4094      	lsls	r4, r2
   22c1e:	0022      	movs	r2, r4
   22c20:	4c14      	ldr	r4, [pc, #80]	; (22c74 <__aeabi_i2f+0x9c>)
   22c22:	4014      	ands	r4, r2
   22c24:	0751      	lsls	r1, r2, #29
   22c26:	d004      	beq.n	22c32 <__aeabi_i2f+0x5a>
   22c28:	210f      	movs	r1, #15
   22c2a:	400a      	ands	r2, r1
   22c2c:	2a04      	cmp	r2, #4
   22c2e:	d000      	beq.n	22c32 <__aeabi_i2f+0x5a>
   22c30:	3404      	adds	r4, #4
   22c32:	0162      	lsls	r2, r4, #5
   22c34:	d413      	bmi.n	22c5e <__aeabi_i2f+0x86>
   22c36:	01a4      	lsls	r4, r4, #6
   22c38:	0a64      	lsrs	r4, r4, #9
   22c3a:	b2db      	uxtb	r3, r3
   22c3c:	002a      	movs	r2, r5
   22c3e:	e7e0      	b.n	22c02 <__aeabi_i2f+0x2a>
   22c40:	2200      	movs	r2, #0
   22c42:	2300      	movs	r3, #0
   22c44:	2400      	movs	r4, #0
   22c46:	e7dc      	b.n	22c02 <__aeabi_i2f+0x2a>
   22c48:	2205      	movs	r2, #5
   22c4a:	0021      	movs	r1, r4
   22c4c:	1a12      	subs	r2, r2, r0
   22c4e:	40d1      	lsrs	r1, r2
   22c50:	22b9      	movs	r2, #185	; 0xb9
   22c52:	1ad2      	subs	r2, r2, r3
   22c54:	4094      	lsls	r4, r2
   22c56:	1e62      	subs	r2, r4, #1
   22c58:	4194      	sbcs	r4, r2
   22c5a:	430c      	orrs	r4, r1
   22c5c:	e7da      	b.n	22c14 <__aeabi_i2f+0x3c>
   22c5e:	4b05      	ldr	r3, [pc, #20]	; (22c74 <__aeabi_i2f+0x9c>)
   22c60:	002a      	movs	r2, r5
   22c62:	401c      	ands	r4, r3
   22c64:	239f      	movs	r3, #159	; 0x9f
   22c66:	01a4      	lsls	r4, r4, #6
   22c68:	1a1b      	subs	r3, r3, r0
   22c6a:	0a64      	lsrs	r4, r4, #9
   22c6c:	b2db      	uxtb	r3, r3
   22c6e:	e7c8      	b.n	22c02 <__aeabi_i2f+0x2a>
   22c70:	0022      	movs	r2, r4
   22c72:	e7d5      	b.n	22c20 <__aeabi_i2f+0x48>
   22c74:	fbffffff 	.word	0xfbffffff

00022c78 <__aeabi_dadd>:
   22c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c7a:	4645      	mov	r5, r8
   22c7c:	46de      	mov	lr, fp
   22c7e:	4657      	mov	r7, sl
   22c80:	464e      	mov	r6, r9
   22c82:	030c      	lsls	r4, r1, #12
   22c84:	b5e0      	push	{r5, r6, r7, lr}
   22c86:	004e      	lsls	r6, r1, #1
   22c88:	0fc9      	lsrs	r1, r1, #31
   22c8a:	4688      	mov	r8, r1
   22c8c:	000d      	movs	r5, r1
   22c8e:	0a61      	lsrs	r1, r4, #9
   22c90:	0f44      	lsrs	r4, r0, #29
   22c92:	430c      	orrs	r4, r1
   22c94:	00c7      	lsls	r7, r0, #3
   22c96:	0319      	lsls	r1, r3, #12
   22c98:	0058      	lsls	r0, r3, #1
   22c9a:	0fdb      	lsrs	r3, r3, #31
   22c9c:	469b      	mov	fp, r3
   22c9e:	0a4b      	lsrs	r3, r1, #9
   22ca0:	0f51      	lsrs	r1, r2, #29
   22ca2:	430b      	orrs	r3, r1
   22ca4:	0d76      	lsrs	r6, r6, #21
   22ca6:	0d40      	lsrs	r0, r0, #21
   22ca8:	0019      	movs	r1, r3
   22caa:	00d2      	lsls	r2, r2, #3
   22cac:	45d8      	cmp	r8, fp
   22cae:	d100      	bne.n	22cb2 <__aeabi_dadd+0x3a>
   22cb0:	e0ae      	b.n	22e10 <__aeabi_dadd+0x198>
   22cb2:	1a35      	subs	r5, r6, r0
   22cb4:	2d00      	cmp	r5, #0
   22cb6:	dc00      	bgt.n	22cba <__aeabi_dadd+0x42>
   22cb8:	e0f6      	b.n	22ea8 <__aeabi_dadd+0x230>
   22cba:	2800      	cmp	r0, #0
   22cbc:	d10f      	bne.n	22cde <__aeabi_dadd+0x66>
   22cbe:	4313      	orrs	r3, r2
   22cc0:	d100      	bne.n	22cc4 <__aeabi_dadd+0x4c>
   22cc2:	e0db      	b.n	22e7c <__aeabi_dadd+0x204>
   22cc4:	1e6b      	subs	r3, r5, #1
   22cc6:	2b00      	cmp	r3, #0
   22cc8:	d000      	beq.n	22ccc <__aeabi_dadd+0x54>
   22cca:	e137      	b.n	22f3c <__aeabi_dadd+0x2c4>
   22ccc:	1aba      	subs	r2, r7, r2
   22cce:	4297      	cmp	r7, r2
   22cd0:	41bf      	sbcs	r7, r7
   22cd2:	1a64      	subs	r4, r4, r1
   22cd4:	427f      	negs	r7, r7
   22cd6:	1be4      	subs	r4, r4, r7
   22cd8:	2601      	movs	r6, #1
   22cda:	0017      	movs	r7, r2
   22cdc:	e024      	b.n	22d28 <__aeabi_dadd+0xb0>
   22cde:	4bc6      	ldr	r3, [pc, #792]	; (22ff8 <__aeabi_dadd+0x380>)
   22ce0:	429e      	cmp	r6, r3
   22ce2:	d04d      	beq.n	22d80 <__aeabi_dadd+0x108>
   22ce4:	2380      	movs	r3, #128	; 0x80
   22ce6:	041b      	lsls	r3, r3, #16
   22ce8:	4319      	orrs	r1, r3
   22cea:	2d38      	cmp	r5, #56	; 0x38
   22cec:	dd00      	ble.n	22cf0 <__aeabi_dadd+0x78>
   22cee:	e107      	b.n	22f00 <__aeabi_dadd+0x288>
   22cf0:	2d1f      	cmp	r5, #31
   22cf2:	dd00      	ble.n	22cf6 <__aeabi_dadd+0x7e>
   22cf4:	e138      	b.n	22f68 <__aeabi_dadd+0x2f0>
   22cf6:	2020      	movs	r0, #32
   22cf8:	1b43      	subs	r3, r0, r5
   22cfa:	469a      	mov	sl, r3
   22cfc:	000b      	movs	r3, r1
   22cfe:	4650      	mov	r0, sl
   22d00:	4083      	lsls	r3, r0
   22d02:	4699      	mov	r9, r3
   22d04:	0013      	movs	r3, r2
   22d06:	4648      	mov	r0, r9
   22d08:	40eb      	lsrs	r3, r5
   22d0a:	4318      	orrs	r0, r3
   22d0c:	0003      	movs	r3, r0
   22d0e:	4650      	mov	r0, sl
   22d10:	4082      	lsls	r2, r0
   22d12:	1e50      	subs	r0, r2, #1
   22d14:	4182      	sbcs	r2, r0
   22d16:	40e9      	lsrs	r1, r5
   22d18:	431a      	orrs	r2, r3
   22d1a:	1aba      	subs	r2, r7, r2
   22d1c:	1a61      	subs	r1, r4, r1
   22d1e:	4297      	cmp	r7, r2
   22d20:	41a4      	sbcs	r4, r4
   22d22:	0017      	movs	r7, r2
   22d24:	4264      	negs	r4, r4
   22d26:	1b0c      	subs	r4, r1, r4
   22d28:	0223      	lsls	r3, r4, #8
   22d2a:	d562      	bpl.n	22df2 <__aeabi_dadd+0x17a>
   22d2c:	0264      	lsls	r4, r4, #9
   22d2e:	0a65      	lsrs	r5, r4, #9
   22d30:	2d00      	cmp	r5, #0
   22d32:	d100      	bne.n	22d36 <__aeabi_dadd+0xbe>
   22d34:	e0df      	b.n	22ef6 <__aeabi_dadd+0x27e>
   22d36:	0028      	movs	r0, r5
   22d38:	f001 fc1e 	bl	24578 <__clzsi2>
   22d3c:	0003      	movs	r3, r0
   22d3e:	3b08      	subs	r3, #8
   22d40:	2b1f      	cmp	r3, #31
   22d42:	dd00      	ble.n	22d46 <__aeabi_dadd+0xce>
   22d44:	e0d2      	b.n	22eec <__aeabi_dadd+0x274>
   22d46:	2220      	movs	r2, #32
   22d48:	003c      	movs	r4, r7
   22d4a:	1ad2      	subs	r2, r2, r3
   22d4c:	409d      	lsls	r5, r3
   22d4e:	40d4      	lsrs	r4, r2
   22d50:	409f      	lsls	r7, r3
   22d52:	4325      	orrs	r5, r4
   22d54:	429e      	cmp	r6, r3
   22d56:	dd00      	ble.n	22d5a <__aeabi_dadd+0xe2>
   22d58:	e0c4      	b.n	22ee4 <__aeabi_dadd+0x26c>
   22d5a:	1b9e      	subs	r6, r3, r6
   22d5c:	1c73      	adds	r3, r6, #1
   22d5e:	2b1f      	cmp	r3, #31
   22d60:	dd00      	ble.n	22d64 <__aeabi_dadd+0xec>
   22d62:	e0f1      	b.n	22f48 <__aeabi_dadd+0x2d0>
   22d64:	2220      	movs	r2, #32
   22d66:	0038      	movs	r0, r7
   22d68:	0029      	movs	r1, r5
   22d6a:	1ad2      	subs	r2, r2, r3
   22d6c:	40d8      	lsrs	r0, r3
   22d6e:	4091      	lsls	r1, r2
   22d70:	4097      	lsls	r7, r2
   22d72:	002c      	movs	r4, r5
   22d74:	4301      	orrs	r1, r0
   22d76:	1e78      	subs	r0, r7, #1
   22d78:	4187      	sbcs	r7, r0
   22d7a:	40dc      	lsrs	r4, r3
   22d7c:	2600      	movs	r6, #0
   22d7e:	430f      	orrs	r7, r1
   22d80:	077b      	lsls	r3, r7, #29
   22d82:	d009      	beq.n	22d98 <__aeabi_dadd+0x120>
   22d84:	230f      	movs	r3, #15
   22d86:	403b      	ands	r3, r7
   22d88:	2b04      	cmp	r3, #4
   22d8a:	d005      	beq.n	22d98 <__aeabi_dadd+0x120>
   22d8c:	1d3b      	adds	r3, r7, #4
   22d8e:	42bb      	cmp	r3, r7
   22d90:	41bf      	sbcs	r7, r7
   22d92:	427f      	negs	r7, r7
   22d94:	19e4      	adds	r4, r4, r7
   22d96:	001f      	movs	r7, r3
   22d98:	0223      	lsls	r3, r4, #8
   22d9a:	d52c      	bpl.n	22df6 <__aeabi_dadd+0x17e>
   22d9c:	4b96      	ldr	r3, [pc, #600]	; (22ff8 <__aeabi_dadd+0x380>)
   22d9e:	3601      	adds	r6, #1
   22da0:	429e      	cmp	r6, r3
   22da2:	d100      	bne.n	22da6 <__aeabi_dadd+0x12e>
   22da4:	e09a      	b.n	22edc <__aeabi_dadd+0x264>
   22da6:	4645      	mov	r5, r8
   22da8:	4b94      	ldr	r3, [pc, #592]	; (22ffc <__aeabi_dadd+0x384>)
   22daa:	08ff      	lsrs	r7, r7, #3
   22dac:	401c      	ands	r4, r3
   22dae:	0760      	lsls	r0, r4, #29
   22db0:	0576      	lsls	r6, r6, #21
   22db2:	0264      	lsls	r4, r4, #9
   22db4:	4307      	orrs	r7, r0
   22db6:	0b24      	lsrs	r4, r4, #12
   22db8:	0d76      	lsrs	r6, r6, #21
   22dba:	2100      	movs	r1, #0
   22dbc:	0324      	lsls	r4, r4, #12
   22dbe:	0b23      	lsrs	r3, r4, #12
   22dc0:	0d0c      	lsrs	r4, r1, #20
   22dc2:	4a8f      	ldr	r2, [pc, #572]	; (23000 <__aeabi_dadd+0x388>)
   22dc4:	0524      	lsls	r4, r4, #20
   22dc6:	431c      	orrs	r4, r3
   22dc8:	4014      	ands	r4, r2
   22dca:	0533      	lsls	r3, r6, #20
   22dcc:	4323      	orrs	r3, r4
   22dce:	005b      	lsls	r3, r3, #1
   22dd0:	07ed      	lsls	r5, r5, #31
   22dd2:	085b      	lsrs	r3, r3, #1
   22dd4:	432b      	orrs	r3, r5
   22dd6:	0038      	movs	r0, r7
   22dd8:	0019      	movs	r1, r3
   22dda:	bc3c      	pop	{r2, r3, r4, r5}
   22ddc:	4690      	mov	r8, r2
   22dde:	4699      	mov	r9, r3
   22de0:	46a2      	mov	sl, r4
   22de2:	46ab      	mov	fp, r5
   22de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22de6:	4664      	mov	r4, ip
   22de8:	4304      	orrs	r4, r0
   22dea:	d100      	bne.n	22dee <__aeabi_dadd+0x176>
   22dec:	e211      	b.n	23212 <__aeabi_dadd+0x59a>
   22dee:	0004      	movs	r4, r0
   22df0:	4667      	mov	r7, ip
   22df2:	077b      	lsls	r3, r7, #29
   22df4:	d1c6      	bne.n	22d84 <__aeabi_dadd+0x10c>
   22df6:	4645      	mov	r5, r8
   22df8:	0760      	lsls	r0, r4, #29
   22dfa:	08ff      	lsrs	r7, r7, #3
   22dfc:	4307      	orrs	r7, r0
   22dfe:	08e4      	lsrs	r4, r4, #3
   22e00:	4b7d      	ldr	r3, [pc, #500]	; (22ff8 <__aeabi_dadd+0x380>)
   22e02:	429e      	cmp	r6, r3
   22e04:	d030      	beq.n	22e68 <__aeabi_dadd+0x1f0>
   22e06:	0324      	lsls	r4, r4, #12
   22e08:	0576      	lsls	r6, r6, #21
   22e0a:	0b24      	lsrs	r4, r4, #12
   22e0c:	0d76      	lsrs	r6, r6, #21
   22e0e:	e7d4      	b.n	22dba <__aeabi_dadd+0x142>
   22e10:	1a33      	subs	r3, r6, r0
   22e12:	469a      	mov	sl, r3
   22e14:	2b00      	cmp	r3, #0
   22e16:	dd78      	ble.n	22f0a <__aeabi_dadd+0x292>
   22e18:	2800      	cmp	r0, #0
   22e1a:	d031      	beq.n	22e80 <__aeabi_dadd+0x208>
   22e1c:	4876      	ldr	r0, [pc, #472]	; (22ff8 <__aeabi_dadd+0x380>)
   22e1e:	4286      	cmp	r6, r0
   22e20:	d0ae      	beq.n	22d80 <__aeabi_dadd+0x108>
   22e22:	2080      	movs	r0, #128	; 0x80
   22e24:	0400      	lsls	r0, r0, #16
   22e26:	4301      	orrs	r1, r0
   22e28:	4653      	mov	r3, sl
   22e2a:	2b38      	cmp	r3, #56	; 0x38
   22e2c:	dc00      	bgt.n	22e30 <__aeabi_dadd+0x1b8>
   22e2e:	e0e9      	b.n	23004 <__aeabi_dadd+0x38c>
   22e30:	430a      	orrs	r2, r1
   22e32:	1e51      	subs	r1, r2, #1
   22e34:	418a      	sbcs	r2, r1
   22e36:	2100      	movs	r1, #0
   22e38:	19d2      	adds	r2, r2, r7
   22e3a:	42ba      	cmp	r2, r7
   22e3c:	41bf      	sbcs	r7, r7
   22e3e:	1909      	adds	r1, r1, r4
   22e40:	427c      	negs	r4, r7
   22e42:	0017      	movs	r7, r2
   22e44:	190c      	adds	r4, r1, r4
   22e46:	0223      	lsls	r3, r4, #8
   22e48:	d5d3      	bpl.n	22df2 <__aeabi_dadd+0x17a>
   22e4a:	4b6b      	ldr	r3, [pc, #428]	; (22ff8 <__aeabi_dadd+0x380>)
   22e4c:	3601      	adds	r6, #1
   22e4e:	429e      	cmp	r6, r3
   22e50:	d100      	bne.n	22e54 <__aeabi_dadd+0x1dc>
   22e52:	e13a      	b.n	230ca <__aeabi_dadd+0x452>
   22e54:	2001      	movs	r0, #1
   22e56:	4b69      	ldr	r3, [pc, #420]	; (22ffc <__aeabi_dadd+0x384>)
   22e58:	401c      	ands	r4, r3
   22e5a:	087b      	lsrs	r3, r7, #1
   22e5c:	4007      	ands	r7, r0
   22e5e:	431f      	orrs	r7, r3
   22e60:	07e0      	lsls	r0, r4, #31
   22e62:	4307      	orrs	r7, r0
   22e64:	0864      	lsrs	r4, r4, #1
   22e66:	e78b      	b.n	22d80 <__aeabi_dadd+0x108>
   22e68:	0023      	movs	r3, r4
   22e6a:	433b      	orrs	r3, r7
   22e6c:	d100      	bne.n	22e70 <__aeabi_dadd+0x1f8>
   22e6e:	e1cb      	b.n	23208 <__aeabi_dadd+0x590>
   22e70:	2280      	movs	r2, #128	; 0x80
   22e72:	0312      	lsls	r2, r2, #12
   22e74:	4314      	orrs	r4, r2
   22e76:	0324      	lsls	r4, r4, #12
   22e78:	0b24      	lsrs	r4, r4, #12
   22e7a:	e79e      	b.n	22dba <__aeabi_dadd+0x142>
   22e7c:	002e      	movs	r6, r5
   22e7e:	e77f      	b.n	22d80 <__aeabi_dadd+0x108>
   22e80:	0008      	movs	r0, r1
   22e82:	4310      	orrs	r0, r2
   22e84:	d100      	bne.n	22e88 <__aeabi_dadd+0x210>
   22e86:	e0b4      	b.n	22ff2 <__aeabi_dadd+0x37a>
   22e88:	1e58      	subs	r0, r3, #1
   22e8a:	2800      	cmp	r0, #0
   22e8c:	d000      	beq.n	22e90 <__aeabi_dadd+0x218>
   22e8e:	e0de      	b.n	2304e <__aeabi_dadd+0x3d6>
   22e90:	18ba      	adds	r2, r7, r2
   22e92:	42ba      	cmp	r2, r7
   22e94:	419b      	sbcs	r3, r3
   22e96:	1864      	adds	r4, r4, r1
   22e98:	425b      	negs	r3, r3
   22e9a:	18e4      	adds	r4, r4, r3
   22e9c:	0017      	movs	r7, r2
   22e9e:	2601      	movs	r6, #1
   22ea0:	0223      	lsls	r3, r4, #8
   22ea2:	d5a6      	bpl.n	22df2 <__aeabi_dadd+0x17a>
   22ea4:	2602      	movs	r6, #2
   22ea6:	e7d5      	b.n	22e54 <__aeabi_dadd+0x1dc>
   22ea8:	2d00      	cmp	r5, #0
   22eaa:	d16e      	bne.n	22f8a <__aeabi_dadd+0x312>
   22eac:	1c70      	adds	r0, r6, #1
   22eae:	0540      	lsls	r0, r0, #21
   22eb0:	0d40      	lsrs	r0, r0, #21
   22eb2:	2801      	cmp	r0, #1
   22eb4:	dc00      	bgt.n	22eb8 <__aeabi_dadd+0x240>
   22eb6:	e0f9      	b.n	230ac <__aeabi_dadd+0x434>
   22eb8:	1ab8      	subs	r0, r7, r2
   22eba:	4684      	mov	ip, r0
   22ebc:	4287      	cmp	r7, r0
   22ebe:	4180      	sbcs	r0, r0
   22ec0:	1ae5      	subs	r5, r4, r3
   22ec2:	4240      	negs	r0, r0
   22ec4:	1a2d      	subs	r5, r5, r0
   22ec6:	0228      	lsls	r0, r5, #8
   22ec8:	d400      	bmi.n	22ecc <__aeabi_dadd+0x254>
   22eca:	e089      	b.n	22fe0 <__aeabi_dadd+0x368>
   22ecc:	1bd7      	subs	r7, r2, r7
   22ece:	42ba      	cmp	r2, r7
   22ed0:	4192      	sbcs	r2, r2
   22ed2:	1b1c      	subs	r4, r3, r4
   22ed4:	4252      	negs	r2, r2
   22ed6:	1aa5      	subs	r5, r4, r2
   22ed8:	46d8      	mov	r8, fp
   22eda:	e729      	b.n	22d30 <__aeabi_dadd+0xb8>
   22edc:	4645      	mov	r5, r8
   22ede:	2400      	movs	r4, #0
   22ee0:	2700      	movs	r7, #0
   22ee2:	e76a      	b.n	22dba <__aeabi_dadd+0x142>
   22ee4:	4c45      	ldr	r4, [pc, #276]	; (22ffc <__aeabi_dadd+0x384>)
   22ee6:	1af6      	subs	r6, r6, r3
   22ee8:	402c      	ands	r4, r5
   22eea:	e749      	b.n	22d80 <__aeabi_dadd+0x108>
   22eec:	003d      	movs	r5, r7
   22eee:	3828      	subs	r0, #40	; 0x28
   22ef0:	4085      	lsls	r5, r0
   22ef2:	2700      	movs	r7, #0
   22ef4:	e72e      	b.n	22d54 <__aeabi_dadd+0xdc>
   22ef6:	0038      	movs	r0, r7
   22ef8:	f001 fb3e 	bl	24578 <__clzsi2>
   22efc:	3020      	adds	r0, #32
   22efe:	e71d      	b.n	22d3c <__aeabi_dadd+0xc4>
   22f00:	430a      	orrs	r2, r1
   22f02:	1e51      	subs	r1, r2, #1
   22f04:	418a      	sbcs	r2, r1
   22f06:	2100      	movs	r1, #0
   22f08:	e707      	b.n	22d1a <__aeabi_dadd+0xa2>
   22f0a:	2b00      	cmp	r3, #0
   22f0c:	d000      	beq.n	22f10 <__aeabi_dadd+0x298>
   22f0e:	e0f3      	b.n	230f8 <__aeabi_dadd+0x480>
   22f10:	1c70      	adds	r0, r6, #1
   22f12:	0543      	lsls	r3, r0, #21
   22f14:	0d5b      	lsrs	r3, r3, #21
   22f16:	2b01      	cmp	r3, #1
   22f18:	dc00      	bgt.n	22f1c <__aeabi_dadd+0x2a4>
   22f1a:	e0ad      	b.n	23078 <__aeabi_dadd+0x400>
   22f1c:	4b36      	ldr	r3, [pc, #216]	; (22ff8 <__aeabi_dadd+0x380>)
   22f1e:	4298      	cmp	r0, r3
   22f20:	d100      	bne.n	22f24 <__aeabi_dadd+0x2ac>
   22f22:	e0d1      	b.n	230c8 <__aeabi_dadd+0x450>
   22f24:	18ba      	adds	r2, r7, r2
   22f26:	42ba      	cmp	r2, r7
   22f28:	41bf      	sbcs	r7, r7
   22f2a:	1864      	adds	r4, r4, r1
   22f2c:	427f      	negs	r7, r7
   22f2e:	19e4      	adds	r4, r4, r7
   22f30:	07e7      	lsls	r7, r4, #31
   22f32:	0852      	lsrs	r2, r2, #1
   22f34:	4317      	orrs	r7, r2
   22f36:	0864      	lsrs	r4, r4, #1
   22f38:	0006      	movs	r6, r0
   22f3a:	e721      	b.n	22d80 <__aeabi_dadd+0x108>
   22f3c:	482e      	ldr	r0, [pc, #184]	; (22ff8 <__aeabi_dadd+0x380>)
   22f3e:	4285      	cmp	r5, r0
   22f40:	d100      	bne.n	22f44 <__aeabi_dadd+0x2cc>
   22f42:	e093      	b.n	2306c <__aeabi_dadd+0x3f4>
   22f44:	001d      	movs	r5, r3
   22f46:	e6d0      	b.n	22cea <__aeabi_dadd+0x72>
   22f48:	0029      	movs	r1, r5
   22f4a:	3e1f      	subs	r6, #31
   22f4c:	40f1      	lsrs	r1, r6
   22f4e:	2b20      	cmp	r3, #32
   22f50:	d100      	bne.n	22f54 <__aeabi_dadd+0x2dc>
   22f52:	e08d      	b.n	23070 <__aeabi_dadd+0x3f8>
   22f54:	2240      	movs	r2, #64	; 0x40
   22f56:	1ad3      	subs	r3, r2, r3
   22f58:	409d      	lsls	r5, r3
   22f5a:	432f      	orrs	r7, r5
   22f5c:	1e7d      	subs	r5, r7, #1
   22f5e:	41af      	sbcs	r7, r5
   22f60:	2400      	movs	r4, #0
   22f62:	430f      	orrs	r7, r1
   22f64:	2600      	movs	r6, #0
   22f66:	e744      	b.n	22df2 <__aeabi_dadd+0x17a>
   22f68:	002b      	movs	r3, r5
   22f6a:	0008      	movs	r0, r1
   22f6c:	3b20      	subs	r3, #32
   22f6e:	40d8      	lsrs	r0, r3
   22f70:	0003      	movs	r3, r0
   22f72:	2d20      	cmp	r5, #32
   22f74:	d100      	bne.n	22f78 <__aeabi_dadd+0x300>
   22f76:	e07d      	b.n	23074 <__aeabi_dadd+0x3fc>
   22f78:	2040      	movs	r0, #64	; 0x40
   22f7a:	1b45      	subs	r5, r0, r5
   22f7c:	40a9      	lsls	r1, r5
   22f7e:	430a      	orrs	r2, r1
   22f80:	1e51      	subs	r1, r2, #1
   22f82:	418a      	sbcs	r2, r1
   22f84:	2100      	movs	r1, #0
   22f86:	431a      	orrs	r2, r3
   22f88:	e6c7      	b.n	22d1a <__aeabi_dadd+0xa2>
   22f8a:	2e00      	cmp	r6, #0
   22f8c:	d050      	beq.n	23030 <__aeabi_dadd+0x3b8>
   22f8e:	4e1a      	ldr	r6, [pc, #104]	; (22ff8 <__aeabi_dadd+0x380>)
   22f90:	42b0      	cmp	r0, r6
   22f92:	d057      	beq.n	23044 <__aeabi_dadd+0x3cc>
   22f94:	2680      	movs	r6, #128	; 0x80
   22f96:	426b      	negs	r3, r5
   22f98:	4699      	mov	r9, r3
   22f9a:	0436      	lsls	r6, r6, #16
   22f9c:	4334      	orrs	r4, r6
   22f9e:	464b      	mov	r3, r9
   22fa0:	2b38      	cmp	r3, #56	; 0x38
   22fa2:	dd00      	ble.n	22fa6 <__aeabi_dadd+0x32e>
   22fa4:	e0d6      	b.n	23154 <__aeabi_dadd+0x4dc>
   22fa6:	2b1f      	cmp	r3, #31
   22fa8:	dd00      	ble.n	22fac <__aeabi_dadd+0x334>
   22faa:	e135      	b.n	23218 <__aeabi_dadd+0x5a0>
   22fac:	2620      	movs	r6, #32
   22fae:	1af5      	subs	r5, r6, r3
   22fb0:	0026      	movs	r6, r4
   22fb2:	40ae      	lsls	r6, r5
   22fb4:	46b2      	mov	sl, r6
   22fb6:	003e      	movs	r6, r7
   22fb8:	40de      	lsrs	r6, r3
   22fba:	46ac      	mov	ip, r5
   22fbc:	0035      	movs	r5, r6
   22fbe:	4656      	mov	r6, sl
   22fc0:	432e      	orrs	r6, r5
   22fc2:	4665      	mov	r5, ip
   22fc4:	40af      	lsls	r7, r5
   22fc6:	1e7d      	subs	r5, r7, #1
   22fc8:	41af      	sbcs	r7, r5
   22fca:	40dc      	lsrs	r4, r3
   22fcc:	4337      	orrs	r7, r6
   22fce:	1bd7      	subs	r7, r2, r7
   22fd0:	42ba      	cmp	r2, r7
   22fd2:	4192      	sbcs	r2, r2
   22fd4:	1b0c      	subs	r4, r1, r4
   22fd6:	4252      	negs	r2, r2
   22fd8:	1aa4      	subs	r4, r4, r2
   22fda:	0006      	movs	r6, r0
   22fdc:	46d8      	mov	r8, fp
   22fde:	e6a3      	b.n	22d28 <__aeabi_dadd+0xb0>
   22fe0:	4664      	mov	r4, ip
   22fe2:	4667      	mov	r7, ip
   22fe4:	432c      	orrs	r4, r5
   22fe6:	d000      	beq.n	22fea <__aeabi_dadd+0x372>
   22fe8:	e6a2      	b.n	22d30 <__aeabi_dadd+0xb8>
   22fea:	2500      	movs	r5, #0
   22fec:	2600      	movs	r6, #0
   22fee:	2700      	movs	r7, #0
   22ff0:	e706      	b.n	22e00 <__aeabi_dadd+0x188>
   22ff2:	001e      	movs	r6, r3
   22ff4:	e6c4      	b.n	22d80 <__aeabi_dadd+0x108>
   22ff6:	46c0      	nop			; (mov r8, r8)
   22ff8:	000007ff 	.word	0x000007ff
   22ffc:	ff7fffff 	.word	0xff7fffff
   23000:	800fffff 	.word	0x800fffff
   23004:	2b1f      	cmp	r3, #31
   23006:	dc63      	bgt.n	230d0 <__aeabi_dadd+0x458>
   23008:	2020      	movs	r0, #32
   2300a:	1ac3      	subs	r3, r0, r3
   2300c:	0008      	movs	r0, r1
   2300e:	4098      	lsls	r0, r3
   23010:	469c      	mov	ip, r3
   23012:	4683      	mov	fp, r0
   23014:	4653      	mov	r3, sl
   23016:	0010      	movs	r0, r2
   23018:	40d8      	lsrs	r0, r3
   2301a:	0003      	movs	r3, r0
   2301c:	4658      	mov	r0, fp
   2301e:	4318      	orrs	r0, r3
   23020:	4663      	mov	r3, ip
   23022:	409a      	lsls	r2, r3
   23024:	1e53      	subs	r3, r2, #1
   23026:	419a      	sbcs	r2, r3
   23028:	4653      	mov	r3, sl
   2302a:	4302      	orrs	r2, r0
   2302c:	40d9      	lsrs	r1, r3
   2302e:	e703      	b.n	22e38 <__aeabi_dadd+0x1c0>
   23030:	0026      	movs	r6, r4
   23032:	433e      	orrs	r6, r7
   23034:	d006      	beq.n	23044 <__aeabi_dadd+0x3cc>
   23036:	43eb      	mvns	r3, r5
   23038:	4699      	mov	r9, r3
   2303a:	2b00      	cmp	r3, #0
   2303c:	d0c7      	beq.n	22fce <__aeabi_dadd+0x356>
   2303e:	4e94      	ldr	r6, [pc, #592]	; (23290 <__aeabi_dadd+0x618>)
   23040:	42b0      	cmp	r0, r6
   23042:	d1ac      	bne.n	22f9e <__aeabi_dadd+0x326>
   23044:	000c      	movs	r4, r1
   23046:	0017      	movs	r7, r2
   23048:	0006      	movs	r6, r0
   2304a:	46d8      	mov	r8, fp
   2304c:	e698      	b.n	22d80 <__aeabi_dadd+0x108>
   2304e:	4b90      	ldr	r3, [pc, #576]	; (23290 <__aeabi_dadd+0x618>)
   23050:	459a      	cmp	sl, r3
   23052:	d00b      	beq.n	2306c <__aeabi_dadd+0x3f4>
   23054:	4682      	mov	sl, r0
   23056:	e6e7      	b.n	22e28 <__aeabi_dadd+0x1b0>
   23058:	2800      	cmp	r0, #0
   2305a:	d000      	beq.n	2305e <__aeabi_dadd+0x3e6>
   2305c:	e09e      	b.n	2319c <__aeabi_dadd+0x524>
   2305e:	0018      	movs	r0, r3
   23060:	4310      	orrs	r0, r2
   23062:	d100      	bne.n	23066 <__aeabi_dadd+0x3ee>
   23064:	e0e9      	b.n	2323a <__aeabi_dadd+0x5c2>
   23066:	001c      	movs	r4, r3
   23068:	0017      	movs	r7, r2
   2306a:	46d8      	mov	r8, fp
   2306c:	4e88      	ldr	r6, [pc, #544]	; (23290 <__aeabi_dadd+0x618>)
   2306e:	e687      	b.n	22d80 <__aeabi_dadd+0x108>
   23070:	2500      	movs	r5, #0
   23072:	e772      	b.n	22f5a <__aeabi_dadd+0x2e2>
   23074:	2100      	movs	r1, #0
   23076:	e782      	b.n	22f7e <__aeabi_dadd+0x306>
   23078:	0023      	movs	r3, r4
   2307a:	433b      	orrs	r3, r7
   2307c:	2e00      	cmp	r6, #0
   2307e:	d000      	beq.n	23082 <__aeabi_dadd+0x40a>
   23080:	e0ab      	b.n	231da <__aeabi_dadd+0x562>
   23082:	2b00      	cmp	r3, #0
   23084:	d100      	bne.n	23088 <__aeabi_dadd+0x410>
   23086:	e0e7      	b.n	23258 <__aeabi_dadd+0x5e0>
   23088:	000b      	movs	r3, r1
   2308a:	4313      	orrs	r3, r2
   2308c:	d100      	bne.n	23090 <__aeabi_dadd+0x418>
   2308e:	e677      	b.n	22d80 <__aeabi_dadd+0x108>
   23090:	18ba      	adds	r2, r7, r2
   23092:	42ba      	cmp	r2, r7
   23094:	41bf      	sbcs	r7, r7
   23096:	1864      	adds	r4, r4, r1
   23098:	427f      	negs	r7, r7
   2309a:	19e4      	adds	r4, r4, r7
   2309c:	0223      	lsls	r3, r4, #8
   2309e:	d400      	bmi.n	230a2 <__aeabi_dadd+0x42a>
   230a0:	e0f2      	b.n	23288 <__aeabi_dadd+0x610>
   230a2:	4b7c      	ldr	r3, [pc, #496]	; (23294 <__aeabi_dadd+0x61c>)
   230a4:	0017      	movs	r7, r2
   230a6:	401c      	ands	r4, r3
   230a8:	0006      	movs	r6, r0
   230aa:	e669      	b.n	22d80 <__aeabi_dadd+0x108>
   230ac:	0020      	movs	r0, r4
   230ae:	4338      	orrs	r0, r7
   230b0:	2e00      	cmp	r6, #0
   230b2:	d1d1      	bne.n	23058 <__aeabi_dadd+0x3e0>
   230b4:	2800      	cmp	r0, #0
   230b6:	d15b      	bne.n	23170 <__aeabi_dadd+0x4f8>
   230b8:	001c      	movs	r4, r3
   230ba:	4314      	orrs	r4, r2
   230bc:	d100      	bne.n	230c0 <__aeabi_dadd+0x448>
   230be:	e0a8      	b.n	23212 <__aeabi_dadd+0x59a>
   230c0:	001c      	movs	r4, r3
   230c2:	0017      	movs	r7, r2
   230c4:	46d8      	mov	r8, fp
   230c6:	e65b      	b.n	22d80 <__aeabi_dadd+0x108>
   230c8:	0006      	movs	r6, r0
   230ca:	2400      	movs	r4, #0
   230cc:	2700      	movs	r7, #0
   230ce:	e697      	b.n	22e00 <__aeabi_dadd+0x188>
   230d0:	4650      	mov	r0, sl
   230d2:	000b      	movs	r3, r1
   230d4:	3820      	subs	r0, #32
   230d6:	40c3      	lsrs	r3, r0
   230d8:	4699      	mov	r9, r3
   230da:	4653      	mov	r3, sl
   230dc:	2b20      	cmp	r3, #32
   230de:	d100      	bne.n	230e2 <__aeabi_dadd+0x46a>
   230e0:	e095      	b.n	2320e <__aeabi_dadd+0x596>
   230e2:	2340      	movs	r3, #64	; 0x40
   230e4:	4650      	mov	r0, sl
   230e6:	1a1b      	subs	r3, r3, r0
   230e8:	4099      	lsls	r1, r3
   230ea:	430a      	orrs	r2, r1
   230ec:	1e51      	subs	r1, r2, #1
   230ee:	418a      	sbcs	r2, r1
   230f0:	464b      	mov	r3, r9
   230f2:	2100      	movs	r1, #0
   230f4:	431a      	orrs	r2, r3
   230f6:	e69f      	b.n	22e38 <__aeabi_dadd+0x1c0>
   230f8:	2e00      	cmp	r6, #0
   230fa:	d130      	bne.n	2315e <__aeabi_dadd+0x4e6>
   230fc:	0026      	movs	r6, r4
   230fe:	433e      	orrs	r6, r7
   23100:	d067      	beq.n	231d2 <__aeabi_dadd+0x55a>
   23102:	43db      	mvns	r3, r3
   23104:	469a      	mov	sl, r3
   23106:	2b00      	cmp	r3, #0
   23108:	d01c      	beq.n	23144 <__aeabi_dadd+0x4cc>
   2310a:	4e61      	ldr	r6, [pc, #388]	; (23290 <__aeabi_dadd+0x618>)
   2310c:	42b0      	cmp	r0, r6
   2310e:	d060      	beq.n	231d2 <__aeabi_dadd+0x55a>
   23110:	4653      	mov	r3, sl
   23112:	2b38      	cmp	r3, #56	; 0x38
   23114:	dd00      	ble.n	23118 <__aeabi_dadd+0x4a0>
   23116:	e096      	b.n	23246 <__aeabi_dadd+0x5ce>
   23118:	2b1f      	cmp	r3, #31
   2311a:	dd00      	ble.n	2311e <__aeabi_dadd+0x4a6>
   2311c:	e09f      	b.n	2325e <__aeabi_dadd+0x5e6>
   2311e:	2620      	movs	r6, #32
   23120:	1af3      	subs	r3, r6, r3
   23122:	0026      	movs	r6, r4
   23124:	409e      	lsls	r6, r3
   23126:	469c      	mov	ip, r3
   23128:	46b3      	mov	fp, r6
   2312a:	4653      	mov	r3, sl
   2312c:	003e      	movs	r6, r7
   2312e:	40de      	lsrs	r6, r3
   23130:	0033      	movs	r3, r6
   23132:	465e      	mov	r6, fp
   23134:	431e      	orrs	r6, r3
   23136:	4663      	mov	r3, ip
   23138:	409f      	lsls	r7, r3
   2313a:	1e7b      	subs	r3, r7, #1
   2313c:	419f      	sbcs	r7, r3
   2313e:	4653      	mov	r3, sl
   23140:	40dc      	lsrs	r4, r3
   23142:	4337      	orrs	r7, r6
   23144:	18bf      	adds	r7, r7, r2
   23146:	4297      	cmp	r7, r2
   23148:	4192      	sbcs	r2, r2
   2314a:	1864      	adds	r4, r4, r1
   2314c:	4252      	negs	r2, r2
   2314e:	18a4      	adds	r4, r4, r2
   23150:	0006      	movs	r6, r0
   23152:	e678      	b.n	22e46 <__aeabi_dadd+0x1ce>
   23154:	4327      	orrs	r7, r4
   23156:	1e7c      	subs	r4, r7, #1
   23158:	41a7      	sbcs	r7, r4
   2315a:	2400      	movs	r4, #0
   2315c:	e737      	b.n	22fce <__aeabi_dadd+0x356>
   2315e:	4e4c      	ldr	r6, [pc, #304]	; (23290 <__aeabi_dadd+0x618>)
   23160:	42b0      	cmp	r0, r6
   23162:	d036      	beq.n	231d2 <__aeabi_dadd+0x55a>
   23164:	2680      	movs	r6, #128	; 0x80
   23166:	425b      	negs	r3, r3
   23168:	0436      	lsls	r6, r6, #16
   2316a:	469a      	mov	sl, r3
   2316c:	4334      	orrs	r4, r6
   2316e:	e7cf      	b.n	23110 <__aeabi_dadd+0x498>
   23170:	0018      	movs	r0, r3
   23172:	4310      	orrs	r0, r2
   23174:	d100      	bne.n	23178 <__aeabi_dadd+0x500>
   23176:	e603      	b.n	22d80 <__aeabi_dadd+0x108>
   23178:	1ab8      	subs	r0, r7, r2
   2317a:	4684      	mov	ip, r0
   2317c:	4567      	cmp	r7, ip
   2317e:	41ad      	sbcs	r5, r5
   23180:	1ae0      	subs	r0, r4, r3
   23182:	426d      	negs	r5, r5
   23184:	1b40      	subs	r0, r0, r5
   23186:	0205      	lsls	r5, r0, #8
   23188:	d400      	bmi.n	2318c <__aeabi_dadd+0x514>
   2318a:	e62c      	b.n	22de6 <__aeabi_dadd+0x16e>
   2318c:	1bd7      	subs	r7, r2, r7
   2318e:	42ba      	cmp	r2, r7
   23190:	4192      	sbcs	r2, r2
   23192:	1b1c      	subs	r4, r3, r4
   23194:	4252      	negs	r2, r2
   23196:	1aa4      	subs	r4, r4, r2
   23198:	46d8      	mov	r8, fp
   2319a:	e5f1      	b.n	22d80 <__aeabi_dadd+0x108>
   2319c:	0018      	movs	r0, r3
   2319e:	4310      	orrs	r0, r2
   231a0:	d100      	bne.n	231a4 <__aeabi_dadd+0x52c>
   231a2:	e763      	b.n	2306c <__aeabi_dadd+0x3f4>
   231a4:	08f8      	lsrs	r0, r7, #3
   231a6:	0767      	lsls	r7, r4, #29
   231a8:	4307      	orrs	r7, r0
   231aa:	2080      	movs	r0, #128	; 0x80
   231ac:	08e4      	lsrs	r4, r4, #3
   231ae:	0300      	lsls	r0, r0, #12
   231b0:	4204      	tst	r4, r0
   231b2:	d008      	beq.n	231c6 <__aeabi_dadd+0x54e>
   231b4:	08dd      	lsrs	r5, r3, #3
   231b6:	4205      	tst	r5, r0
   231b8:	d105      	bne.n	231c6 <__aeabi_dadd+0x54e>
   231ba:	08d2      	lsrs	r2, r2, #3
   231bc:	0759      	lsls	r1, r3, #29
   231be:	4311      	orrs	r1, r2
   231c0:	000f      	movs	r7, r1
   231c2:	002c      	movs	r4, r5
   231c4:	46d8      	mov	r8, fp
   231c6:	0f7b      	lsrs	r3, r7, #29
   231c8:	00e4      	lsls	r4, r4, #3
   231ca:	431c      	orrs	r4, r3
   231cc:	00ff      	lsls	r7, r7, #3
   231ce:	4e30      	ldr	r6, [pc, #192]	; (23290 <__aeabi_dadd+0x618>)
   231d0:	e5d6      	b.n	22d80 <__aeabi_dadd+0x108>
   231d2:	000c      	movs	r4, r1
   231d4:	0017      	movs	r7, r2
   231d6:	0006      	movs	r6, r0
   231d8:	e5d2      	b.n	22d80 <__aeabi_dadd+0x108>
   231da:	2b00      	cmp	r3, #0
   231dc:	d038      	beq.n	23250 <__aeabi_dadd+0x5d8>
   231de:	000b      	movs	r3, r1
   231e0:	4313      	orrs	r3, r2
   231e2:	d100      	bne.n	231e6 <__aeabi_dadd+0x56e>
   231e4:	e742      	b.n	2306c <__aeabi_dadd+0x3f4>
   231e6:	08f8      	lsrs	r0, r7, #3
   231e8:	0767      	lsls	r7, r4, #29
   231ea:	4307      	orrs	r7, r0
   231ec:	2080      	movs	r0, #128	; 0x80
   231ee:	08e4      	lsrs	r4, r4, #3
   231f0:	0300      	lsls	r0, r0, #12
   231f2:	4204      	tst	r4, r0
   231f4:	d0e7      	beq.n	231c6 <__aeabi_dadd+0x54e>
   231f6:	08cb      	lsrs	r3, r1, #3
   231f8:	4203      	tst	r3, r0
   231fa:	d1e4      	bne.n	231c6 <__aeabi_dadd+0x54e>
   231fc:	08d2      	lsrs	r2, r2, #3
   231fe:	0749      	lsls	r1, r1, #29
   23200:	4311      	orrs	r1, r2
   23202:	000f      	movs	r7, r1
   23204:	001c      	movs	r4, r3
   23206:	e7de      	b.n	231c6 <__aeabi_dadd+0x54e>
   23208:	2700      	movs	r7, #0
   2320a:	2400      	movs	r4, #0
   2320c:	e5d5      	b.n	22dba <__aeabi_dadd+0x142>
   2320e:	2100      	movs	r1, #0
   23210:	e76b      	b.n	230ea <__aeabi_dadd+0x472>
   23212:	2500      	movs	r5, #0
   23214:	2700      	movs	r7, #0
   23216:	e5f3      	b.n	22e00 <__aeabi_dadd+0x188>
   23218:	464e      	mov	r6, r9
   2321a:	0025      	movs	r5, r4
   2321c:	3e20      	subs	r6, #32
   2321e:	40f5      	lsrs	r5, r6
   23220:	464b      	mov	r3, r9
   23222:	002e      	movs	r6, r5
   23224:	2b20      	cmp	r3, #32
   23226:	d02d      	beq.n	23284 <__aeabi_dadd+0x60c>
   23228:	2540      	movs	r5, #64	; 0x40
   2322a:	1aed      	subs	r5, r5, r3
   2322c:	40ac      	lsls	r4, r5
   2322e:	4327      	orrs	r7, r4
   23230:	1e7c      	subs	r4, r7, #1
   23232:	41a7      	sbcs	r7, r4
   23234:	2400      	movs	r4, #0
   23236:	4337      	orrs	r7, r6
   23238:	e6c9      	b.n	22fce <__aeabi_dadd+0x356>
   2323a:	2480      	movs	r4, #128	; 0x80
   2323c:	2500      	movs	r5, #0
   2323e:	0324      	lsls	r4, r4, #12
   23240:	4e13      	ldr	r6, [pc, #76]	; (23290 <__aeabi_dadd+0x618>)
   23242:	2700      	movs	r7, #0
   23244:	e5dc      	b.n	22e00 <__aeabi_dadd+0x188>
   23246:	4327      	orrs	r7, r4
   23248:	1e7c      	subs	r4, r7, #1
   2324a:	41a7      	sbcs	r7, r4
   2324c:	2400      	movs	r4, #0
   2324e:	e779      	b.n	23144 <__aeabi_dadd+0x4cc>
   23250:	000c      	movs	r4, r1
   23252:	0017      	movs	r7, r2
   23254:	4e0e      	ldr	r6, [pc, #56]	; (23290 <__aeabi_dadd+0x618>)
   23256:	e593      	b.n	22d80 <__aeabi_dadd+0x108>
   23258:	000c      	movs	r4, r1
   2325a:	0017      	movs	r7, r2
   2325c:	e590      	b.n	22d80 <__aeabi_dadd+0x108>
   2325e:	4656      	mov	r6, sl
   23260:	0023      	movs	r3, r4
   23262:	3e20      	subs	r6, #32
   23264:	40f3      	lsrs	r3, r6
   23266:	4699      	mov	r9, r3
   23268:	4653      	mov	r3, sl
   2326a:	2b20      	cmp	r3, #32
   2326c:	d00e      	beq.n	2328c <__aeabi_dadd+0x614>
   2326e:	2340      	movs	r3, #64	; 0x40
   23270:	4656      	mov	r6, sl
   23272:	1b9b      	subs	r3, r3, r6
   23274:	409c      	lsls	r4, r3
   23276:	4327      	orrs	r7, r4
   23278:	1e7c      	subs	r4, r7, #1
   2327a:	41a7      	sbcs	r7, r4
   2327c:	464b      	mov	r3, r9
   2327e:	2400      	movs	r4, #0
   23280:	431f      	orrs	r7, r3
   23282:	e75f      	b.n	23144 <__aeabi_dadd+0x4cc>
   23284:	2400      	movs	r4, #0
   23286:	e7d2      	b.n	2322e <__aeabi_dadd+0x5b6>
   23288:	0017      	movs	r7, r2
   2328a:	e5b2      	b.n	22df2 <__aeabi_dadd+0x17a>
   2328c:	2400      	movs	r4, #0
   2328e:	e7f2      	b.n	23276 <__aeabi_dadd+0x5fe>
   23290:	000007ff 	.word	0x000007ff
   23294:	ff7fffff 	.word	0xff7fffff

00023298 <__aeabi_ddiv>:
   23298:	b5f0      	push	{r4, r5, r6, r7, lr}
   2329a:	4657      	mov	r7, sl
   2329c:	4645      	mov	r5, r8
   2329e:	46de      	mov	lr, fp
   232a0:	464e      	mov	r6, r9
   232a2:	b5e0      	push	{r5, r6, r7, lr}
   232a4:	004c      	lsls	r4, r1, #1
   232a6:	030e      	lsls	r6, r1, #12
   232a8:	b087      	sub	sp, #28
   232aa:	4683      	mov	fp, r0
   232ac:	4692      	mov	sl, r2
   232ae:	001d      	movs	r5, r3
   232b0:	4680      	mov	r8, r0
   232b2:	0b36      	lsrs	r6, r6, #12
   232b4:	0d64      	lsrs	r4, r4, #21
   232b6:	0fcf      	lsrs	r7, r1, #31
   232b8:	2c00      	cmp	r4, #0
   232ba:	d04f      	beq.n	2335c <__aeabi_ddiv+0xc4>
   232bc:	4b6f      	ldr	r3, [pc, #444]	; (2347c <__aeabi_ddiv+0x1e4>)
   232be:	429c      	cmp	r4, r3
   232c0:	d035      	beq.n	2332e <__aeabi_ddiv+0x96>
   232c2:	2380      	movs	r3, #128	; 0x80
   232c4:	0f42      	lsrs	r2, r0, #29
   232c6:	041b      	lsls	r3, r3, #16
   232c8:	00f6      	lsls	r6, r6, #3
   232ca:	4313      	orrs	r3, r2
   232cc:	4333      	orrs	r3, r6
   232ce:	4699      	mov	r9, r3
   232d0:	00c3      	lsls	r3, r0, #3
   232d2:	4698      	mov	r8, r3
   232d4:	4b6a      	ldr	r3, [pc, #424]	; (23480 <__aeabi_ddiv+0x1e8>)
   232d6:	2600      	movs	r6, #0
   232d8:	469c      	mov	ip, r3
   232da:	2300      	movs	r3, #0
   232dc:	4464      	add	r4, ip
   232de:	9303      	str	r3, [sp, #12]
   232e0:	032b      	lsls	r3, r5, #12
   232e2:	0b1b      	lsrs	r3, r3, #12
   232e4:	469b      	mov	fp, r3
   232e6:	006b      	lsls	r3, r5, #1
   232e8:	0fed      	lsrs	r5, r5, #31
   232ea:	4650      	mov	r0, sl
   232ec:	0d5b      	lsrs	r3, r3, #21
   232ee:	9501      	str	r5, [sp, #4]
   232f0:	d05e      	beq.n	233b0 <__aeabi_ddiv+0x118>
   232f2:	4a62      	ldr	r2, [pc, #392]	; (2347c <__aeabi_ddiv+0x1e4>)
   232f4:	4293      	cmp	r3, r2
   232f6:	d053      	beq.n	233a0 <__aeabi_ddiv+0x108>
   232f8:	465a      	mov	r2, fp
   232fa:	00d1      	lsls	r1, r2, #3
   232fc:	2280      	movs	r2, #128	; 0x80
   232fe:	0f40      	lsrs	r0, r0, #29
   23300:	0412      	lsls	r2, r2, #16
   23302:	4302      	orrs	r2, r0
   23304:	430a      	orrs	r2, r1
   23306:	4693      	mov	fp, r2
   23308:	4652      	mov	r2, sl
   2330a:	00d1      	lsls	r1, r2, #3
   2330c:	4a5c      	ldr	r2, [pc, #368]	; (23480 <__aeabi_ddiv+0x1e8>)
   2330e:	4694      	mov	ip, r2
   23310:	2200      	movs	r2, #0
   23312:	4463      	add	r3, ip
   23314:	0038      	movs	r0, r7
   23316:	4068      	eors	r0, r5
   23318:	4684      	mov	ip, r0
   2331a:	9002      	str	r0, [sp, #8]
   2331c:	1ae4      	subs	r4, r4, r3
   2331e:	4316      	orrs	r6, r2
   23320:	2e0f      	cmp	r6, #15
   23322:	d900      	bls.n	23326 <__aeabi_ddiv+0x8e>
   23324:	e0b4      	b.n	23490 <__aeabi_ddiv+0x1f8>
   23326:	4b57      	ldr	r3, [pc, #348]	; (23484 <__aeabi_ddiv+0x1ec>)
   23328:	00b6      	lsls	r6, r6, #2
   2332a:	599b      	ldr	r3, [r3, r6]
   2332c:	469f      	mov	pc, r3
   2332e:	0003      	movs	r3, r0
   23330:	4333      	orrs	r3, r6
   23332:	4699      	mov	r9, r3
   23334:	d16c      	bne.n	23410 <__aeabi_ddiv+0x178>
   23336:	2300      	movs	r3, #0
   23338:	4698      	mov	r8, r3
   2333a:	3302      	adds	r3, #2
   2333c:	2608      	movs	r6, #8
   2333e:	9303      	str	r3, [sp, #12]
   23340:	e7ce      	b.n	232e0 <__aeabi_ddiv+0x48>
   23342:	46cb      	mov	fp, r9
   23344:	4641      	mov	r1, r8
   23346:	9a03      	ldr	r2, [sp, #12]
   23348:	9701      	str	r7, [sp, #4]
   2334a:	2a02      	cmp	r2, #2
   2334c:	d165      	bne.n	2341a <__aeabi_ddiv+0x182>
   2334e:	9b01      	ldr	r3, [sp, #4]
   23350:	4c4a      	ldr	r4, [pc, #296]	; (2347c <__aeabi_ddiv+0x1e4>)
   23352:	469c      	mov	ip, r3
   23354:	2300      	movs	r3, #0
   23356:	2200      	movs	r2, #0
   23358:	4698      	mov	r8, r3
   2335a:	e06b      	b.n	23434 <__aeabi_ddiv+0x19c>
   2335c:	0003      	movs	r3, r0
   2335e:	4333      	orrs	r3, r6
   23360:	4699      	mov	r9, r3
   23362:	d04e      	beq.n	23402 <__aeabi_ddiv+0x16a>
   23364:	2e00      	cmp	r6, #0
   23366:	d100      	bne.n	2336a <__aeabi_ddiv+0xd2>
   23368:	e1bc      	b.n	236e4 <__aeabi_ddiv+0x44c>
   2336a:	0030      	movs	r0, r6
   2336c:	f001 f904 	bl	24578 <__clzsi2>
   23370:	0003      	movs	r3, r0
   23372:	3b0b      	subs	r3, #11
   23374:	2b1c      	cmp	r3, #28
   23376:	dd00      	ble.n	2337a <__aeabi_ddiv+0xe2>
   23378:	e1ac      	b.n	236d4 <__aeabi_ddiv+0x43c>
   2337a:	221d      	movs	r2, #29
   2337c:	1ad3      	subs	r3, r2, r3
   2337e:	465a      	mov	r2, fp
   23380:	0001      	movs	r1, r0
   23382:	40da      	lsrs	r2, r3
   23384:	3908      	subs	r1, #8
   23386:	408e      	lsls	r6, r1
   23388:	0013      	movs	r3, r2
   2338a:	4333      	orrs	r3, r6
   2338c:	4699      	mov	r9, r3
   2338e:	465b      	mov	r3, fp
   23390:	408b      	lsls	r3, r1
   23392:	4698      	mov	r8, r3
   23394:	2300      	movs	r3, #0
   23396:	4c3c      	ldr	r4, [pc, #240]	; (23488 <__aeabi_ddiv+0x1f0>)
   23398:	2600      	movs	r6, #0
   2339a:	1a24      	subs	r4, r4, r0
   2339c:	9303      	str	r3, [sp, #12]
   2339e:	e79f      	b.n	232e0 <__aeabi_ddiv+0x48>
   233a0:	4651      	mov	r1, sl
   233a2:	465a      	mov	r2, fp
   233a4:	4311      	orrs	r1, r2
   233a6:	d129      	bne.n	233fc <__aeabi_ddiv+0x164>
   233a8:	2200      	movs	r2, #0
   233aa:	4693      	mov	fp, r2
   233ac:	3202      	adds	r2, #2
   233ae:	e7b1      	b.n	23314 <__aeabi_ddiv+0x7c>
   233b0:	4659      	mov	r1, fp
   233b2:	4301      	orrs	r1, r0
   233b4:	d01e      	beq.n	233f4 <__aeabi_ddiv+0x15c>
   233b6:	465b      	mov	r3, fp
   233b8:	2b00      	cmp	r3, #0
   233ba:	d100      	bne.n	233be <__aeabi_ddiv+0x126>
   233bc:	e19e      	b.n	236fc <__aeabi_ddiv+0x464>
   233be:	4658      	mov	r0, fp
   233c0:	f001 f8da 	bl	24578 <__clzsi2>
   233c4:	0003      	movs	r3, r0
   233c6:	3b0b      	subs	r3, #11
   233c8:	2b1c      	cmp	r3, #28
   233ca:	dd00      	ble.n	233ce <__aeabi_ddiv+0x136>
   233cc:	e18f      	b.n	236ee <__aeabi_ddiv+0x456>
   233ce:	0002      	movs	r2, r0
   233d0:	4659      	mov	r1, fp
   233d2:	3a08      	subs	r2, #8
   233d4:	4091      	lsls	r1, r2
   233d6:	468b      	mov	fp, r1
   233d8:	211d      	movs	r1, #29
   233da:	1acb      	subs	r3, r1, r3
   233dc:	4651      	mov	r1, sl
   233de:	40d9      	lsrs	r1, r3
   233e0:	000b      	movs	r3, r1
   233e2:	4659      	mov	r1, fp
   233e4:	430b      	orrs	r3, r1
   233e6:	4651      	mov	r1, sl
   233e8:	469b      	mov	fp, r3
   233ea:	4091      	lsls	r1, r2
   233ec:	4b26      	ldr	r3, [pc, #152]	; (23488 <__aeabi_ddiv+0x1f0>)
   233ee:	2200      	movs	r2, #0
   233f0:	1a1b      	subs	r3, r3, r0
   233f2:	e78f      	b.n	23314 <__aeabi_ddiv+0x7c>
   233f4:	2300      	movs	r3, #0
   233f6:	2201      	movs	r2, #1
   233f8:	469b      	mov	fp, r3
   233fa:	e78b      	b.n	23314 <__aeabi_ddiv+0x7c>
   233fc:	4651      	mov	r1, sl
   233fe:	2203      	movs	r2, #3
   23400:	e788      	b.n	23314 <__aeabi_ddiv+0x7c>
   23402:	2300      	movs	r3, #0
   23404:	4698      	mov	r8, r3
   23406:	3301      	adds	r3, #1
   23408:	2604      	movs	r6, #4
   2340a:	2400      	movs	r4, #0
   2340c:	9303      	str	r3, [sp, #12]
   2340e:	e767      	b.n	232e0 <__aeabi_ddiv+0x48>
   23410:	2303      	movs	r3, #3
   23412:	46b1      	mov	r9, r6
   23414:	9303      	str	r3, [sp, #12]
   23416:	260c      	movs	r6, #12
   23418:	e762      	b.n	232e0 <__aeabi_ddiv+0x48>
   2341a:	2a03      	cmp	r2, #3
   2341c:	d100      	bne.n	23420 <__aeabi_ddiv+0x188>
   2341e:	e25c      	b.n	238da <__aeabi_ddiv+0x642>
   23420:	9b01      	ldr	r3, [sp, #4]
   23422:	2a01      	cmp	r2, #1
   23424:	d000      	beq.n	23428 <__aeabi_ddiv+0x190>
   23426:	e1e4      	b.n	237f2 <__aeabi_ddiv+0x55a>
   23428:	4013      	ands	r3, r2
   2342a:	469c      	mov	ip, r3
   2342c:	2300      	movs	r3, #0
   2342e:	2400      	movs	r4, #0
   23430:	2200      	movs	r2, #0
   23432:	4698      	mov	r8, r3
   23434:	2100      	movs	r1, #0
   23436:	0312      	lsls	r2, r2, #12
   23438:	0b13      	lsrs	r3, r2, #12
   2343a:	0d0a      	lsrs	r2, r1, #20
   2343c:	0512      	lsls	r2, r2, #20
   2343e:	431a      	orrs	r2, r3
   23440:	0523      	lsls	r3, r4, #20
   23442:	4c12      	ldr	r4, [pc, #72]	; (2348c <__aeabi_ddiv+0x1f4>)
   23444:	4640      	mov	r0, r8
   23446:	4022      	ands	r2, r4
   23448:	4313      	orrs	r3, r2
   2344a:	4662      	mov	r2, ip
   2344c:	005b      	lsls	r3, r3, #1
   2344e:	07d2      	lsls	r2, r2, #31
   23450:	085b      	lsrs	r3, r3, #1
   23452:	4313      	orrs	r3, r2
   23454:	0019      	movs	r1, r3
   23456:	b007      	add	sp, #28
   23458:	bc3c      	pop	{r2, r3, r4, r5}
   2345a:	4690      	mov	r8, r2
   2345c:	4699      	mov	r9, r3
   2345e:	46a2      	mov	sl, r4
   23460:	46ab      	mov	fp, r5
   23462:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23464:	2300      	movs	r3, #0
   23466:	2280      	movs	r2, #128	; 0x80
   23468:	469c      	mov	ip, r3
   2346a:	0312      	lsls	r2, r2, #12
   2346c:	4698      	mov	r8, r3
   2346e:	4c03      	ldr	r4, [pc, #12]	; (2347c <__aeabi_ddiv+0x1e4>)
   23470:	e7e0      	b.n	23434 <__aeabi_ddiv+0x19c>
   23472:	2300      	movs	r3, #0
   23474:	4c01      	ldr	r4, [pc, #4]	; (2347c <__aeabi_ddiv+0x1e4>)
   23476:	2200      	movs	r2, #0
   23478:	4698      	mov	r8, r3
   2347a:	e7db      	b.n	23434 <__aeabi_ddiv+0x19c>
   2347c:	000007ff 	.word	0x000007ff
   23480:	fffffc01 	.word	0xfffffc01
   23484:	0002a020 	.word	0x0002a020
   23488:	fffffc0d 	.word	0xfffffc0d
   2348c:	800fffff 	.word	0x800fffff
   23490:	45d9      	cmp	r9, fp
   23492:	d900      	bls.n	23496 <__aeabi_ddiv+0x1fe>
   23494:	e139      	b.n	2370a <__aeabi_ddiv+0x472>
   23496:	d100      	bne.n	2349a <__aeabi_ddiv+0x202>
   23498:	e134      	b.n	23704 <__aeabi_ddiv+0x46c>
   2349a:	2300      	movs	r3, #0
   2349c:	4646      	mov	r6, r8
   2349e:	464d      	mov	r5, r9
   234a0:	469a      	mov	sl, r3
   234a2:	3c01      	subs	r4, #1
   234a4:	465b      	mov	r3, fp
   234a6:	0e0a      	lsrs	r2, r1, #24
   234a8:	021b      	lsls	r3, r3, #8
   234aa:	431a      	orrs	r2, r3
   234ac:	020b      	lsls	r3, r1, #8
   234ae:	0c17      	lsrs	r7, r2, #16
   234b0:	9303      	str	r3, [sp, #12]
   234b2:	0413      	lsls	r3, r2, #16
   234b4:	0c1b      	lsrs	r3, r3, #16
   234b6:	0039      	movs	r1, r7
   234b8:	0028      	movs	r0, r5
   234ba:	4690      	mov	r8, r2
   234bc:	9301      	str	r3, [sp, #4]
   234be:	f7fe fc1d 	bl	21cfc <__udivsi3>
   234c2:	0002      	movs	r2, r0
   234c4:	9b01      	ldr	r3, [sp, #4]
   234c6:	4683      	mov	fp, r0
   234c8:	435a      	muls	r2, r3
   234ca:	0028      	movs	r0, r5
   234cc:	0039      	movs	r1, r7
   234ce:	4691      	mov	r9, r2
   234d0:	f7fe fc9a 	bl	21e08 <__aeabi_uidivmod>
   234d4:	0c35      	lsrs	r5, r6, #16
   234d6:	0409      	lsls	r1, r1, #16
   234d8:	430d      	orrs	r5, r1
   234da:	45a9      	cmp	r9, r5
   234dc:	d90d      	bls.n	234fa <__aeabi_ddiv+0x262>
   234de:	465b      	mov	r3, fp
   234e0:	4445      	add	r5, r8
   234e2:	3b01      	subs	r3, #1
   234e4:	45a8      	cmp	r8, r5
   234e6:	d900      	bls.n	234ea <__aeabi_ddiv+0x252>
   234e8:	e13a      	b.n	23760 <__aeabi_ddiv+0x4c8>
   234ea:	45a9      	cmp	r9, r5
   234ec:	d800      	bhi.n	234f0 <__aeabi_ddiv+0x258>
   234ee:	e137      	b.n	23760 <__aeabi_ddiv+0x4c8>
   234f0:	2302      	movs	r3, #2
   234f2:	425b      	negs	r3, r3
   234f4:	469c      	mov	ip, r3
   234f6:	4445      	add	r5, r8
   234f8:	44e3      	add	fp, ip
   234fa:	464b      	mov	r3, r9
   234fc:	1aeb      	subs	r3, r5, r3
   234fe:	0039      	movs	r1, r7
   23500:	0018      	movs	r0, r3
   23502:	9304      	str	r3, [sp, #16]
   23504:	f7fe fbfa 	bl	21cfc <__udivsi3>
   23508:	9b01      	ldr	r3, [sp, #4]
   2350a:	0005      	movs	r5, r0
   2350c:	4343      	muls	r3, r0
   2350e:	0039      	movs	r1, r7
   23510:	9804      	ldr	r0, [sp, #16]
   23512:	4699      	mov	r9, r3
   23514:	f7fe fc78 	bl	21e08 <__aeabi_uidivmod>
   23518:	0433      	lsls	r3, r6, #16
   2351a:	0409      	lsls	r1, r1, #16
   2351c:	0c1b      	lsrs	r3, r3, #16
   2351e:	430b      	orrs	r3, r1
   23520:	4599      	cmp	r9, r3
   23522:	d909      	bls.n	23538 <__aeabi_ddiv+0x2a0>
   23524:	4443      	add	r3, r8
   23526:	1e6a      	subs	r2, r5, #1
   23528:	4598      	cmp	r8, r3
   2352a:	d900      	bls.n	2352e <__aeabi_ddiv+0x296>
   2352c:	e11a      	b.n	23764 <__aeabi_ddiv+0x4cc>
   2352e:	4599      	cmp	r9, r3
   23530:	d800      	bhi.n	23534 <__aeabi_ddiv+0x29c>
   23532:	e117      	b.n	23764 <__aeabi_ddiv+0x4cc>
   23534:	3d02      	subs	r5, #2
   23536:	4443      	add	r3, r8
   23538:	464a      	mov	r2, r9
   2353a:	1a9b      	subs	r3, r3, r2
   2353c:	465a      	mov	r2, fp
   2353e:	0412      	lsls	r2, r2, #16
   23540:	432a      	orrs	r2, r5
   23542:	9903      	ldr	r1, [sp, #12]
   23544:	4693      	mov	fp, r2
   23546:	0c10      	lsrs	r0, r2, #16
   23548:	0c0a      	lsrs	r2, r1, #16
   2354a:	4691      	mov	r9, r2
   2354c:	0409      	lsls	r1, r1, #16
   2354e:	465a      	mov	r2, fp
   23550:	0c09      	lsrs	r1, r1, #16
   23552:	464e      	mov	r6, r9
   23554:	000d      	movs	r5, r1
   23556:	0412      	lsls	r2, r2, #16
   23558:	0c12      	lsrs	r2, r2, #16
   2355a:	4345      	muls	r5, r0
   2355c:	9105      	str	r1, [sp, #20]
   2355e:	4351      	muls	r1, r2
   23560:	4372      	muls	r2, r6
   23562:	4370      	muls	r0, r6
   23564:	1952      	adds	r2, r2, r5
   23566:	0c0e      	lsrs	r6, r1, #16
   23568:	18b2      	adds	r2, r6, r2
   2356a:	4295      	cmp	r5, r2
   2356c:	d903      	bls.n	23576 <__aeabi_ddiv+0x2de>
   2356e:	2580      	movs	r5, #128	; 0x80
   23570:	026d      	lsls	r5, r5, #9
   23572:	46ac      	mov	ip, r5
   23574:	4460      	add	r0, ip
   23576:	0c15      	lsrs	r5, r2, #16
   23578:	0409      	lsls	r1, r1, #16
   2357a:	0412      	lsls	r2, r2, #16
   2357c:	0c09      	lsrs	r1, r1, #16
   2357e:	1828      	adds	r0, r5, r0
   23580:	1852      	adds	r2, r2, r1
   23582:	4283      	cmp	r3, r0
   23584:	d200      	bcs.n	23588 <__aeabi_ddiv+0x2f0>
   23586:	e0ce      	b.n	23726 <__aeabi_ddiv+0x48e>
   23588:	d100      	bne.n	2358c <__aeabi_ddiv+0x2f4>
   2358a:	e0c8      	b.n	2371e <__aeabi_ddiv+0x486>
   2358c:	1a1d      	subs	r5, r3, r0
   2358e:	4653      	mov	r3, sl
   23590:	1a9e      	subs	r6, r3, r2
   23592:	45b2      	cmp	sl, r6
   23594:	4192      	sbcs	r2, r2
   23596:	4252      	negs	r2, r2
   23598:	1aab      	subs	r3, r5, r2
   2359a:	469a      	mov	sl, r3
   2359c:	4598      	cmp	r8, r3
   2359e:	d100      	bne.n	235a2 <__aeabi_ddiv+0x30a>
   235a0:	e117      	b.n	237d2 <__aeabi_ddiv+0x53a>
   235a2:	0039      	movs	r1, r7
   235a4:	0018      	movs	r0, r3
   235a6:	f7fe fba9 	bl	21cfc <__udivsi3>
   235aa:	9b01      	ldr	r3, [sp, #4]
   235ac:	0005      	movs	r5, r0
   235ae:	4343      	muls	r3, r0
   235b0:	0039      	movs	r1, r7
   235b2:	4650      	mov	r0, sl
   235b4:	9304      	str	r3, [sp, #16]
   235b6:	f7fe fc27 	bl	21e08 <__aeabi_uidivmod>
   235ba:	9804      	ldr	r0, [sp, #16]
   235bc:	040b      	lsls	r3, r1, #16
   235be:	0c31      	lsrs	r1, r6, #16
   235c0:	4319      	orrs	r1, r3
   235c2:	4288      	cmp	r0, r1
   235c4:	d909      	bls.n	235da <__aeabi_ddiv+0x342>
   235c6:	4441      	add	r1, r8
   235c8:	1e6b      	subs	r3, r5, #1
   235ca:	4588      	cmp	r8, r1
   235cc:	d900      	bls.n	235d0 <__aeabi_ddiv+0x338>
   235ce:	e107      	b.n	237e0 <__aeabi_ddiv+0x548>
   235d0:	4288      	cmp	r0, r1
   235d2:	d800      	bhi.n	235d6 <__aeabi_ddiv+0x33e>
   235d4:	e104      	b.n	237e0 <__aeabi_ddiv+0x548>
   235d6:	3d02      	subs	r5, #2
   235d8:	4441      	add	r1, r8
   235da:	9b04      	ldr	r3, [sp, #16]
   235dc:	1acb      	subs	r3, r1, r3
   235de:	0018      	movs	r0, r3
   235e0:	0039      	movs	r1, r7
   235e2:	9304      	str	r3, [sp, #16]
   235e4:	f7fe fb8a 	bl	21cfc <__udivsi3>
   235e8:	9b01      	ldr	r3, [sp, #4]
   235ea:	4682      	mov	sl, r0
   235ec:	4343      	muls	r3, r0
   235ee:	0039      	movs	r1, r7
   235f0:	9804      	ldr	r0, [sp, #16]
   235f2:	9301      	str	r3, [sp, #4]
   235f4:	f7fe fc08 	bl	21e08 <__aeabi_uidivmod>
   235f8:	9801      	ldr	r0, [sp, #4]
   235fa:	040b      	lsls	r3, r1, #16
   235fc:	0431      	lsls	r1, r6, #16
   235fe:	0c09      	lsrs	r1, r1, #16
   23600:	4319      	orrs	r1, r3
   23602:	4288      	cmp	r0, r1
   23604:	d90d      	bls.n	23622 <__aeabi_ddiv+0x38a>
   23606:	4653      	mov	r3, sl
   23608:	4441      	add	r1, r8
   2360a:	3b01      	subs	r3, #1
   2360c:	4588      	cmp	r8, r1
   2360e:	d900      	bls.n	23612 <__aeabi_ddiv+0x37a>
   23610:	e0e8      	b.n	237e4 <__aeabi_ddiv+0x54c>
   23612:	4288      	cmp	r0, r1
   23614:	d800      	bhi.n	23618 <__aeabi_ddiv+0x380>
   23616:	e0e5      	b.n	237e4 <__aeabi_ddiv+0x54c>
   23618:	2302      	movs	r3, #2
   2361a:	425b      	negs	r3, r3
   2361c:	469c      	mov	ip, r3
   2361e:	4441      	add	r1, r8
   23620:	44e2      	add	sl, ip
   23622:	9b01      	ldr	r3, [sp, #4]
   23624:	042d      	lsls	r5, r5, #16
   23626:	1ace      	subs	r6, r1, r3
   23628:	4651      	mov	r1, sl
   2362a:	4329      	orrs	r1, r5
   2362c:	9d05      	ldr	r5, [sp, #20]
   2362e:	464f      	mov	r7, r9
   23630:	002a      	movs	r2, r5
   23632:	040b      	lsls	r3, r1, #16
   23634:	0c08      	lsrs	r0, r1, #16
   23636:	0c1b      	lsrs	r3, r3, #16
   23638:	435a      	muls	r2, r3
   2363a:	4345      	muls	r5, r0
   2363c:	437b      	muls	r3, r7
   2363e:	4378      	muls	r0, r7
   23640:	195b      	adds	r3, r3, r5
   23642:	0c17      	lsrs	r7, r2, #16
   23644:	18fb      	adds	r3, r7, r3
   23646:	429d      	cmp	r5, r3
   23648:	d903      	bls.n	23652 <__aeabi_ddiv+0x3ba>
   2364a:	2580      	movs	r5, #128	; 0x80
   2364c:	026d      	lsls	r5, r5, #9
   2364e:	46ac      	mov	ip, r5
   23650:	4460      	add	r0, ip
   23652:	0c1d      	lsrs	r5, r3, #16
   23654:	0412      	lsls	r2, r2, #16
   23656:	041b      	lsls	r3, r3, #16
   23658:	0c12      	lsrs	r2, r2, #16
   2365a:	1828      	adds	r0, r5, r0
   2365c:	189b      	adds	r3, r3, r2
   2365e:	4286      	cmp	r6, r0
   23660:	d200      	bcs.n	23664 <__aeabi_ddiv+0x3cc>
   23662:	e093      	b.n	2378c <__aeabi_ddiv+0x4f4>
   23664:	d100      	bne.n	23668 <__aeabi_ddiv+0x3d0>
   23666:	e08e      	b.n	23786 <__aeabi_ddiv+0x4ee>
   23668:	2301      	movs	r3, #1
   2366a:	4319      	orrs	r1, r3
   2366c:	4ba0      	ldr	r3, [pc, #640]	; (238f0 <__aeabi_ddiv+0x658>)
   2366e:	18e3      	adds	r3, r4, r3
   23670:	2b00      	cmp	r3, #0
   23672:	dc00      	bgt.n	23676 <__aeabi_ddiv+0x3de>
   23674:	e099      	b.n	237aa <__aeabi_ddiv+0x512>
   23676:	074a      	lsls	r2, r1, #29
   23678:	d000      	beq.n	2367c <__aeabi_ddiv+0x3e4>
   2367a:	e09e      	b.n	237ba <__aeabi_ddiv+0x522>
   2367c:	465a      	mov	r2, fp
   2367e:	01d2      	lsls	r2, r2, #7
   23680:	d506      	bpl.n	23690 <__aeabi_ddiv+0x3f8>
   23682:	465a      	mov	r2, fp
   23684:	4b9b      	ldr	r3, [pc, #620]	; (238f4 <__aeabi_ddiv+0x65c>)
   23686:	401a      	ands	r2, r3
   23688:	2380      	movs	r3, #128	; 0x80
   2368a:	4693      	mov	fp, r2
   2368c:	00db      	lsls	r3, r3, #3
   2368e:	18e3      	adds	r3, r4, r3
   23690:	4a99      	ldr	r2, [pc, #612]	; (238f8 <__aeabi_ddiv+0x660>)
   23692:	4293      	cmp	r3, r2
   23694:	dd68      	ble.n	23768 <__aeabi_ddiv+0x4d0>
   23696:	2301      	movs	r3, #1
   23698:	9a02      	ldr	r2, [sp, #8]
   2369a:	4c98      	ldr	r4, [pc, #608]	; (238fc <__aeabi_ddiv+0x664>)
   2369c:	401a      	ands	r2, r3
   2369e:	2300      	movs	r3, #0
   236a0:	4694      	mov	ip, r2
   236a2:	4698      	mov	r8, r3
   236a4:	2200      	movs	r2, #0
   236a6:	e6c5      	b.n	23434 <__aeabi_ddiv+0x19c>
   236a8:	2280      	movs	r2, #128	; 0x80
   236aa:	464b      	mov	r3, r9
   236ac:	0312      	lsls	r2, r2, #12
   236ae:	4213      	tst	r3, r2
   236b0:	d00a      	beq.n	236c8 <__aeabi_ddiv+0x430>
   236b2:	465b      	mov	r3, fp
   236b4:	4213      	tst	r3, r2
   236b6:	d106      	bne.n	236c6 <__aeabi_ddiv+0x42e>
   236b8:	431a      	orrs	r2, r3
   236ba:	0312      	lsls	r2, r2, #12
   236bc:	0b12      	lsrs	r2, r2, #12
   236be:	46ac      	mov	ip, r5
   236c0:	4688      	mov	r8, r1
   236c2:	4c8e      	ldr	r4, [pc, #568]	; (238fc <__aeabi_ddiv+0x664>)
   236c4:	e6b6      	b.n	23434 <__aeabi_ddiv+0x19c>
   236c6:	464b      	mov	r3, r9
   236c8:	431a      	orrs	r2, r3
   236ca:	0312      	lsls	r2, r2, #12
   236cc:	0b12      	lsrs	r2, r2, #12
   236ce:	46bc      	mov	ip, r7
   236d0:	4c8a      	ldr	r4, [pc, #552]	; (238fc <__aeabi_ddiv+0x664>)
   236d2:	e6af      	b.n	23434 <__aeabi_ddiv+0x19c>
   236d4:	0003      	movs	r3, r0
   236d6:	465a      	mov	r2, fp
   236d8:	3b28      	subs	r3, #40	; 0x28
   236da:	409a      	lsls	r2, r3
   236dc:	2300      	movs	r3, #0
   236de:	4691      	mov	r9, r2
   236e0:	4698      	mov	r8, r3
   236e2:	e657      	b.n	23394 <__aeabi_ddiv+0xfc>
   236e4:	4658      	mov	r0, fp
   236e6:	f000 ff47 	bl	24578 <__clzsi2>
   236ea:	3020      	adds	r0, #32
   236ec:	e640      	b.n	23370 <__aeabi_ddiv+0xd8>
   236ee:	0003      	movs	r3, r0
   236f0:	4652      	mov	r2, sl
   236f2:	3b28      	subs	r3, #40	; 0x28
   236f4:	409a      	lsls	r2, r3
   236f6:	2100      	movs	r1, #0
   236f8:	4693      	mov	fp, r2
   236fa:	e677      	b.n	233ec <__aeabi_ddiv+0x154>
   236fc:	f000 ff3c 	bl	24578 <__clzsi2>
   23700:	3020      	adds	r0, #32
   23702:	e65f      	b.n	233c4 <__aeabi_ddiv+0x12c>
   23704:	4588      	cmp	r8, r1
   23706:	d200      	bcs.n	2370a <__aeabi_ddiv+0x472>
   23708:	e6c7      	b.n	2349a <__aeabi_ddiv+0x202>
   2370a:	464b      	mov	r3, r9
   2370c:	07de      	lsls	r6, r3, #31
   2370e:	085d      	lsrs	r5, r3, #1
   23710:	4643      	mov	r3, r8
   23712:	085b      	lsrs	r3, r3, #1
   23714:	431e      	orrs	r6, r3
   23716:	4643      	mov	r3, r8
   23718:	07db      	lsls	r3, r3, #31
   2371a:	469a      	mov	sl, r3
   2371c:	e6c2      	b.n	234a4 <__aeabi_ddiv+0x20c>
   2371e:	2500      	movs	r5, #0
   23720:	4592      	cmp	sl, r2
   23722:	d300      	bcc.n	23726 <__aeabi_ddiv+0x48e>
   23724:	e733      	b.n	2358e <__aeabi_ddiv+0x2f6>
   23726:	9e03      	ldr	r6, [sp, #12]
   23728:	4659      	mov	r1, fp
   2372a:	46b4      	mov	ip, r6
   2372c:	44e2      	add	sl, ip
   2372e:	45b2      	cmp	sl, r6
   23730:	41ad      	sbcs	r5, r5
   23732:	426d      	negs	r5, r5
   23734:	4445      	add	r5, r8
   23736:	18eb      	adds	r3, r5, r3
   23738:	3901      	subs	r1, #1
   2373a:	4598      	cmp	r8, r3
   2373c:	d207      	bcs.n	2374e <__aeabi_ddiv+0x4b6>
   2373e:	4298      	cmp	r0, r3
   23740:	d900      	bls.n	23744 <__aeabi_ddiv+0x4ac>
   23742:	e07f      	b.n	23844 <__aeabi_ddiv+0x5ac>
   23744:	d100      	bne.n	23748 <__aeabi_ddiv+0x4b0>
   23746:	e0bc      	b.n	238c2 <__aeabi_ddiv+0x62a>
   23748:	1a1d      	subs	r5, r3, r0
   2374a:	468b      	mov	fp, r1
   2374c:	e71f      	b.n	2358e <__aeabi_ddiv+0x2f6>
   2374e:	4598      	cmp	r8, r3
   23750:	d1fa      	bne.n	23748 <__aeabi_ddiv+0x4b0>
   23752:	9d03      	ldr	r5, [sp, #12]
   23754:	4555      	cmp	r5, sl
   23756:	d9f2      	bls.n	2373e <__aeabi_ddiv+0x4a6>
   23758:	4643      	mov	r3, r8
   2375a:	468b      	mov	fp, r1
   2375c:	1a1d      	subs	r5, r3, r0
   2375e:	e716      	b.n	2358e <__aeabi_ddiv+0x2f6>
   23760:	469b      	mov	fp, r3
   23762:	e6ca      	b.n	234fa <__aeabi_ddiv+0x262>
   23764:	0015      	movs	r5, r2
   23766:	e6e7      	b.n	23538 <__aeabi_ddiv+0x2a0>
   23768:	465a      	mov	r2, fp
   2376a:	08c9      	lsrs	r1, r1, #3
   2376c:	0752      	lsls	r2, r2, #29
   2376e:	430a      	orrs	r2, r1
   23770:	055b      	lsls	r3, r3, #21
   23772:	4690      	mov	r8, r2
   23774:	0d5c      	lsrs	r4, r3, #21
   23776:	465a      	mov	r2, fp
   23778:	2301      	movs	r3, #1
   2377a:	9902      	ldr	r1, [sp, #8]
   2377c:	0252      	lsls	r2, r2, #9
   2377e:	4019      	ands	r1, r3
   23780:	0b12      	lsrs	r2, r2, #12
   23782:	468c      	mov	ip, r1
   23784:	e656      	b.n	23434 <__aeabi_ddiv+0x19c>
   23786:	2b00      	cmp	r3, #0
   23788:	d100      	bne.n	2378c <__aeabi_ddiv+0x4f4>
   2378a:	e76f      	b.n	2366c <__aeabi_ddiv+0x3d4>
   2378c:	4446      	add	r6, r8
   2378e:	1e4a      	subs	r2, r1, #1
   23790:	45b0      	cmp	r8, r6
   23792:	d929      	bls.n	237e8 <__aeabi_ddiv+0x550>
   23794:	0011      	movs	r1, r2
   23796:	4286      	cmp	r6, r0
   23798:	d000      	beq.n	2379c <__aeabi_ddiv+0x504>
   2379a:	e765      	b.n	23668 <__aeabi_ddiv+0x3d0>
   2379c:	9a03      	ldr	r2, [sp, #12]
   2379e:	4293      	cmp	r3, r2
   237a0:	d000      	beq.n	237a4 <__aeabi_ddiv+0x50c>
   237a2:	e761      	b.n	23668 <__aeabi_ddiv+0x3d0>
   237a4:	e762      	b.n	2366c <__aeabi_ddiv+0x3d4>
   237a6:	2101      	movs	r1, #1
   237a8:	4249      	negs	r1, r1
   237aa:	2001      	movs	r0, #1
   237ac:	1ac2      	subs	r2, r0, r3
   237ae:	2a38      	cmp	r2, #56	; 0x38
   237b0:	dd21      	ble.n	237f6 <__aeabi_ddiv+0x55e>
   237b2:	9b02      	ldr	r3, [sp, #8]
   237b4:	4003      	ands	r3, r0
   237b6:	469c      	mov	ip, r3
   237b8:	e638      	b.n	2342c <__aeabi_ddiv+0x194>
   237ba:	220f      	movs	r2, #15
   237bc:	400a      	ands	r2, r1
   237be:	2a04      	cmp	r2, #4
   237c0:	d100      	bne.n	237c4 <__aeabi_ddiv+0x52c>
   237c2:	e75b      	b.n	2367c <__aeabi_ddiv+0x3e4>
   237c4:	000a      	movs	r2, r1
   237c6:	1d11      	adds	r1, r2, #4
   237c8:	4291      	cmp	r1, r2
   237ca:	4192      	sbcs	r2, r2
   237cc:	4252      	negs	r2, r2
   237ce:	4493      	add	fp, r2
   237d0:	e754      	b.n	2367c <__aeabi_ddiv+0x3e4>
   237d2:	4b47      	ldr	r3, [pc, #284]	; (238f0 <__aeabi_ddiv+0x658>)
   237d4:	18e3      	adds	r3, r4, r3
   237d6:	2b00      	cmp	r3, #0
   237d8:	dde5      	ble.n	237a6 <__aeabi_ddiv+0x50e>
   237da:	2201      	movs	r2, #1
   237dc:	4252      	negs	r2, r2
   237de:	e7f2      	b.n	237c6 <__aeabi_ddiv+0x52e>
   237e0:	001d      	movs	r5, r3
   237e2:	e6fa      	b.n	235da <__aeabi_ddiv+0x342>
   237e4:	469a      	mov	sl, r3
   237e6:	e71c      	b.n	23622 <__aeabi_ddiv+0x38a>
   237e8:	42b0      	cmp	r0, r6
   237ea:	d839      	bhi.n	23860 <__aeabi_ddiv+0x5c8>
   237ec:	d06e      	beq.n	238cc <__aeabi_ddiv+0x634>
   237ee:	0011      	movs	r1, r2
   237f0:	e73a      	b.n	23668 <__aeabi_ddiv+0x3d0>
   237f2:	9302      	str	r3, [sp, #8]
   237f4:	e73a      	b.n	2366c <__aeabi_ddiv+0x3d4>
   237f6:	2a1f      	cmp	r2, #31
   237f8:	dc3c      	bgt.n	23874 <__aeabi_ddiv+0x5dc>
   237fa:	2320      	movs	r3, #32
   237fc:	1a9b      	subs	r3, r3, r2
   237fe:	000c      	movs	r4, r1
   23800:	4658      	mov	r0, fp
   23802:	4099      	lsls	r1, r3
   23804:	4098      	lsls	r0, r3
   23806:	1e4b      	subs	r3, r1, #1
   23808:	4199      	sbcs	r1, r3
   2380a:	465b      	mov	r3, fp
   2380c:	40d4      	lsrs	r4, r2
   2380e:	40d3      	lsrs	r3, r2
   23810:	4320      	orrs	r0, r4
   23812:	4308      	orrs	r0, r1
   23814:	001a      	movs	r2, r3
   23816:	0743      	lsls	r3, r0, #29
   23818:	d009      	beq.n	2382e <__aeabi_ddiv+0x596>
   2381a:	230f      	movs	r3, #15
   2381c:	4003      	ands	r3, r0
   2381e:	2b04      	cmp	r3, #4
   23820:	d005      	beq.n	2382e <__aeabi_ddiv+0x596>
   23822:	0001      	movs	r1, r0
   23824:	1d08      	adds	r0, r1, #4
   23826:	4288      	cmp	r0, r1
   23828:	419b      	sbcs	r3, r3
   2382a:	425b      	negs	r3, r3
   2382c:	18d2      	adds	r2, r2, r3
   2382e:	0213      	lsls	r3, r2, #8
   23830:	d53a      	bpl.n	238a8 <__aeabi_ddiv+0x610>
   23832:	2301      	movs	r3, #1
   23834:	9a02      	ldr	r2, [sp, #8]
   23836:	2401      	movs	r4, #1
   23838:	401a      	ands	r2, r3
   2383a:	2300      	movs	r3, #0
   2383c:	4694      	mov	ip, r2
   2383e:	4698      	mov	r8, r3
   23840:	2200      	movs	r2, #0
   23842:	e5f7      	b.n	23434 <__aeabi_ddiv+0x19c>
   23844:	2102      	movs	r1, #2
   23846:	4249      	negs	r1, r1
   23848:	468c      	mov	ip, r1
   2384a:	9d03      	ldr	r5, [sp, #12]
   2384c:	44e3      	add	fp, ip
   2384e:	46ac      	mov	ip, r5
   23850:	44e2      	add	sl, ip
   23852:	45aa      	cmp	sl, r5
   23854:	41ad      	sbcs	r5, r5
   23856:	426d      	negs	r5, r5
   23858:	4445      	add	r5, r8
   2385a:	18ed      	adds	r5, r5, r3
   2385c:	1a2d      	subs	r5, r5, r0
   2385e:	e696      	b.n	2358e <__aeabi_ddiv+0x2f6>
   23860:	1e8a      	subs	r2, r1, #2
   23862:	9903      	ldr	r1, [sp, #12]
   23864:	004d      	lsls	r5, r1, #1
   23866:	428d      	cmp	r5, r1
   23868:	4189      	sbcs	r1, r1
   2386a:	4249      	negs	r1, r1
   2386c:	4441      	add	r1, r8
   2386e:	1876      	adds	r6, r6, r1
   23870:	9503      	str	r5, [sp, #12]
   23872:	e78f      	b.n	23794 <__aeabi_ddiv+0x4fc>
   23874:	201f      	movs	r0, #31
   23876:	4240      	negs	r0, r0
   23878:	1ac3      	subs	r3, r0, r3
   2387a:	4658      	mov	r0, fp
   2387c:	40d8      	lsrs	r0, r3
   2387e:	0003      	movs	r3, r0
   23880:	2a20      	cmp	r2, #32
   23882:	d028      	beq.n	238d6 <__aeabi_ddiv+0x63e>
   23884:	2040      	movs	r0, #64	; 0x40
   23886:	465d      	mov	r5, fp
   23888:	1a82      	subs	r2, r0, r2
   2388a:	4095      	lsls	r5, r2
   2388c:	4329      	orrs	r1, r5
   2388e:	1e4a      	subs	r2, r1, #1
   23890:	4191      	sbcs	r1, r2
   23892:	4319      	orrs	r1, r3
   23894:	2307      	movs	r3, #7
   23896:	2200      	movs	r2, #0
   23898:	400b      	ands	r3, r1
   2389a:	d009      	beq.n	238b0 <__aeabi_ddiv+0x618>
   2389c:	230f      	movs	r3, #15
   2389e:	2200      	movs	r2, #0
   238a0:	400b      	ands	r3, r1
   238a2:	0008      	movs	r0, r1
   238a4:	2b04      	cmp	r3, #4
   238a6:	d1bd      	bne.n	23824 <__aeabi_ddiv+0x58c>
   238a8:	0001      	movs	r1, r0
   238aa:	0753      	lsls	r3, r2, #29
   238ac:	0252      	lsls	r2, r2, #9
   238ae:	0b12      	lsrs	r2, r2, #12
   238b0:	08c9      	lsrs	r1, r1, #3
   238b2:	4319      	orrs	r1, r3
   238b4:	2301      	movs	r3, #1
   238b6:	4688      	mov	r8, r1
   238b8:	9902      	ldr	r1, [sp, #8]
   238ba:	2400      	movs	r4, #0
   238bc:	4019      	ands	r1, r3
   238be:	468c      	mov	ip, r1
   238c0:	e5b8      	b.n	23434 <__aeabi_ddiv+0x19c>
   238c2:	4552      	cmp	r2, sl
   238c4:	d8be      	bhi.n	23844 <__aeabi_ddiv+0x5ac>
   238c6:	468b      	mov	fp, r1
   238c8:	2500      	movs	r5, #0
   238ca:	e660      	b.n	2358e <__aeabi_ddiv+0x2f6>
   238cc:	9d03      	ldr	r5, [sp, #12]
   238ce:	429d      	cmp	r5, r3
   238d0:	d3c6      	bcc.n	23860 <__aeabi_ddiv+0x5c8>
   238d2:	0011      	movs	r1, r2
   238d4:	e762      	b.n	2379c <__aeabi_ddiv+0x504>
   238d6:	2500      	movs	r5, #0
   238d8:	e7d8      	b.n	2388c <__aeabi_ddiv+0x5f4>
   238da:	2280      	movs	r2, #128	; 0x80
   238dc:	465b      	mov	r3, fp
   238de:	0312      	lsls	r2, r2, #12
   238e0:	431a      	orrs	r2, r3
   238e2:	9b01      	ldr	r3, [sp, #4]
   238e4:	0312      	lsls	r2, r2, #12
   238e6:	0b12      	lsrs	r2, r2, #12
   238e8:	469c      	mov	ip, r3
   238ea:	4688      	mov	r8, r1
   238ec:	4c03      	ldr	r4, [pc, #12]	; (238fc <__aeabi_ddiv+0x664>)
   238ee:	e5a1      	b.n	23434 <__aeabi_ddiv+0x19c>
   238f0:	000003ff 	.word	0x000003ff
   238f4:	feffffff 	.word	0xfeffffff
   238f8:	000007fe 	.word	0x000007fe
   238fc:	000007ff 	.word	0x000007ff

00023900 <__aeabi_dmul>:
   23900:	b5f0      	push	{r4, r5, r6, r7, lr}
   23902:	4657      	mov	r7, sl
   23904:	4645      	mov	r5, r8
   23906:	46de      	mov	lr, fp
   23908:	464e      	mov	r6, r9
   2390a:	b5e0      	push	{r5, r6, r7, lr}
   2390c:	030c      	lsls	r4, r1, #12
   2390e:	4698      	mov	r8, r3
   23910:	004e      	lsls	r6, r1, #1
   23912:	0b23      	lsrs	r3, r4, #12
   23914:	b087      	sub	sp, #28
   23916:	0007      	movs	r7, r0
   23918:	4692      	mov	sl, r2
   2391a:	469b      	mov	fp, r3
   2391c:	0d76      	lsrs	r6, r6, #21
   2391e:	0fcd      	lsrs	r5, r1, #31
   23920:	2e00      	cmp	r6, #0
   23922:	d06b      	beq.n	239fc <__aeabi_dmul+0xfc>
   23924:	4b6d      	ldr	r3, [pc, #436]	; (23adc <__aeabi_dmul+0x1dc>)
   23926:	429e      	cmp	r6, r3
   23928:	d035      	beq.n	23996 <__aeabi_dmul+0x96>
   2392a:	2480      	movs	r4, #128	; 0x80
   2392c:	465b      	mov	r3, fp
   2392e:	0f42      	lsrs	r2, r0, #29
   23930:	0424      	lsls	r4, r4, #16
   23932:	00db      	lsls	r3, r3, #3
   23934:	4314      	orrs	r4, r2
   23936:	431c      	orrs	r4, r3
   23938:	00c3      	lsls	r3, r0, #3
   2393a:	4699      	mov	r9, r3
   2393c:	4b68      	ldr	r3, [pc, #416]	; (23ae0 <__aeabi_dmul+0x1e0>)
   2393e:	46a3      	mov	fp, r4
   23940:	469c      	mov	ip, r3
   23942:	2300      	movs	r3, #0
   23944:	2700      	movs	r7, #0
   23946:	4466      	add	r6, ip
   23948:	9302      	str	r3, [sp, #8]
   2394a:	4643      	mov	r3, r8
   2394c:	031c      	lsls	r4, r3, #12
   2394e:	005a      	lsls	r2, r3, #1
   23950:	0fdb      	lsrs	r3, r3, #31
   23952:	4650      	mov	r0, sl
   23954:	0b24      	lsrs	r4, r4, #12
   23956:	0d52      	lsrs	r2, r2, #21
   23958:	4698      	mov	r8, r3
   2395a:	d100      	bne.n	2395e <__aeabi_dmul+0x5e>
   2395c:	e076      	b.n	23a4c <__aeabi_dmul+0x14c>
   2395e:	4b5f      	ldr	r3, [pc, #380]	; (23adc <__aeabi_dmul+0x1dc>)
   23960:	429a      	cmp	r2, r3
   23962:	d06d      	beq.n	23a40 <__aeabi_dmul+0x140>
   23964:	2380      	movs	r3, #128	; 0x80
   23966:	0f41      	lsrs	r1, r0, #29
   23968:	041b      	lsls	r3, r3, #16
   2396a:	430b      	orrs	r3, r1
   2396c:	495c      	ldr	r1, [pc, #368]	; (23ae0 <__aeabi_dmul+0x1e0>)
   2396e:	00e4      	lsls	r4, r4, #3
   23970:	468c      	mov	ip, r1
   23972:	431c      	orrs	r4, r3
   23974:	00c3      	lsls	r3, r0, #3
   23976:	2000      	movs	r0, #0
   23978:	4462      	add	r2, ip
   2397a:	4641      	mov	r1, r8
   2397c:	18b6      	adds	r6, r6, r2
   2397e:	4069      	eors	r1, r5
   23980:	1c72      	adds	r2, r6, #1
   23982:	9101      	str	r1, [sp, #4]
   23984:	4694      	mov	ip, r2
   23986:	4307      	orrs	r7, r0
   23988:	2f0f      	cmp	r7, #15
   2398a:	d900      	bls.n	2398e <__aeabi_dmul+0x8e>
   2398c:	e0b0      	b.n	23af0 <__aeabi_dmul+0x1f0>
   2398e:	4a55      	ldr	r2, [pc, #340]	; (23ae4 <__aeabi_dmul+0x1e4>)
   23990:	00bf      	lsls	r7, r7, #2
   23992:	59d2      	ldr	r2, [r2, r7]
   23994:	4697      	mov	pc, r2
   23996:	465b      	mov	r3, fp
   23998:	4303      	orrs	r3, r0
   2399a:	4699      	mov	r9, r3
   2399c:	d000      	beq.n	239a0 <__aeabi_dmul+0xa0>
   2399e:	e087      	b.n	23ab0 <__aeabi_dmul+0x1b0>
   239a0:	2300      	movs	r3, #0
   239a2:	469b      	mov	fp, r3
   239a4:	3302      	adds	r3, #2
   239a6:	2708      	movs	r7, #8
   239a8:	9302      	str	r3, [sp, #8]
   239aa:	e7ce      	b.n	2394a <__aeabi_dmul+0x4a>
   239ac:	4642      	mov	r2, r8
   239ae:	9201      	str	r2, [sp, #4]
   239b0:	2802      	cmp	r0, #2
   239b2:	d067      	beq.n	23a84 <__aeabi_dmul+0x184>
   239b4:	2803      	cmp	r0, #3
   239b6:	d100      	bne.n	239ba <__aeabi_dmul+0xba>
   239b8:	e20e      	b.n	23dd8 <__aeabi_dmul+0x4d8>
   239ba:	2801      	cmp	r0, #1
   239bc:	d000      	beq.n	239c0 <__aeabi_dmul+0xc0>
   239be:	e162      	b.n	23c86 <__aeabi_dmul+0x386>
   239c0:	2300      	movs	r3, #0
   239c2:	2400      	movs	r4, #0
   239c4:	2200      	movs	r2, #0
   239c6:	4699      	mov	r9, r3
   239c8:	9901      	ldr	r1, [sp, #4]
   239ca:	4001      	ands	r1, r0
   239cc:	b2cd      	uxtb	r5, r1
   239ce:	2100      	movs	r1, #0
   239d0:	0312      	lsls	r2, r2, #12
   239d2:	0d0b      	lsrs	r3, r1, #20
   239d4:	0b12      	lsrs	r2, r2, #12
   239d6:	051b      	lsls	r3, r3, #20
   239d8:	4313      	orrs	r3, r2
   239da:	4a43      	ldr	r2, [pc, #268]	; (23ae8 <__aeabi_dmul+0x1e8>)
   239dc:	0524      	lsls	r4, r4, #20
   239de:	4013      	ands	r3, r2
   239e0:	431c      	orrs	r4, r3
   239e2:	0064      	lsls	r4, r4, #1
   239e4:	07ed      	lsls	r5, r5, #31
   239e6:	0864      	lsrs	r4, r4, #1
   239e8:	432c      	orrs	r4, r5
   239ea:	4648      	mov	r0, r9
   239ec:	0021      	movs	r1, r4
   239ee:	b007      	add	sp, #28
   239f0:	bc3c      	pop	{r2, r3, r4, r5}
   239f2:	4690      	mov	r8, r2
   239f4:	4699      	mov	r9, r3
   239f6:	46a2      	mov	sl, r4
   239f8:	46ab      	mov	fp, r5
   239fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   239fc:	4303      	orrs	r3, r0
   239fe:	4699      	mov	r9, r3
   23a00:	d04f      	beq.n	23aa2 <__aeabi_dmul+0x1a2>
   23a02:	465b      	mov	r3, fp
   23a04:	2b00      	cmp	r3, #0
   23a06:	d100      	bne.n	23a0a <__aeabi_dmul+0x10a>
   23a08:	e189      	b.n	23d1e <__aeabi_dmul+0x41e>
   23a0a:	4658      	mov	r0, fp
   23a0c:	f000 fdb4 	bl	24578 <__clzsi2>
   23a10:	0003      	movs	r3, r0
   23a12:	3b0b      	subs	r3, #11
   23a14:	2b1c      	cmp	r3, #28
   23a16:	dd00      	ble.n	23a1a <__aeabi_dmul+0x11a>
   23a18:	e17a      	b.n	23d10 <__aeabi_dmul+0x410>
   23a1a:	221d      	movs	r2, #29
   23a1c:	1ad3      	subs	r3, r2, r3
   23a1e:	003a      	movs	r2, r7
   23a20:	0001      	movs	r1, r0
   23a22:	465c      	mov	r4, fp
   23a24:	40da      	lsrs	r2, r3
   23a26:	3908      	subs	r1, #8
   23a28:	408c      	lsls	r4, r1
   23a2a:	0013      	movs	r3, r2
   23a2c:	408f      	lsls	r7, r1
   23a2e:	4323      	orrs	r3, r4
   23a30:	469b      	mov	fp, r3
   23a32:	46b9      	mov	r9, r7
   23a34:	2300      	movs	r3, #0
   23a36:	4e2d      	ldr	r6, [pc, #180]	; (23aec <__aeabi_dmul+0x1ec>)
   23a38:	2700      	movs	r7, #0
   23a3a:	1a36      	subs	r6, r6, r0
   23a3c:	9302      	str	r3, [sp, #8]
   23a3e:	e784      	b.n	2394a <__aeabi_dmul+0x4a>
   23a40:	4653      	mov	r3, sl
   23a42:	4323      	orrs	r3, r4
   23a44:	d12a      	bne.n	23a9c <__aeabi_dmul+0x19c>
   23a46:	2400      	movs	r4, #0
   23a48:	2002      	movs	r0, #2
   23a4a:	e796      	b.n	2397a <__aeabi_dmul+0x7a>
   23a4c:	4653      	mov	r3, sl
   23a4e:	4323      	orrs	r3, r4
   23a50:	d020      	beq.n	23a94 <__aeabi_dmul+0x194>
   23a52:	2c00      	cmp	r4, #0
   23a54:	d100      	bne.n	23a58 <__aeabi_dmul+0x158>
   23a56:	e157      	b.n	23d08 <__aeabi_dmul+0x408>
   23a58:	0020      	movs	r0, r4
   23a5a:	f000 fd8d 	bl	24578 <__clzsi2>
   23a5e:	0003      	movs	r3, r0
   23a60:	3b0b      	subs	r3, #11
   23a62:	2b1c      	cmp	r3, #28
   23a64:	dd00      	ble.n	23a68 <__aeabi_dmul+0x168>
   23a66:	e149      	b.n	23cfc <__aeabi_dmul+0x3fc>
   23a68:	211d      	movs	r1, #29
   23a6a:	1acb      	subs	r3, r1, r3
   23a6c:	4651      	mov	r1, sl
   23a6e:	0002      	movs	r2, r0
   23a70:	40d9      	lsrs	r1, r3
   23a72:	4653      	mov	r3, sl
   23a74:	3a08      	subs	r2, #8
   23a76:	4094      	lsls	r4, r2
   23a78:	4093      	lsls	r3, r2
   23a7a:	430c      	orrs	r4, r1
   23a7c:	4a1b      	ldr	r2, [pc, #108]	; (23aec <__aeabi_dmul+0x1ec>)
   23a7e:	1a12      	subs	r2, r2, r0
   23a80:	2000      	movs	r0, #0
   23a82:	e77a      	b.n	2397a <__aeabi_dmul+0x7a>
   23a84:	2501      	movs	r5, #1
   23a86:	9b01      	ldr	r3, [sp, #4]
   23a88:	4c14      	ldr	r4, [pc, #80]	; (23adc <__aeabi_dmul+0x1dc>)
   23a8a:	401d      	ands	r5, r3
   23a8c:	2300      	movs	r3, #0
   23a8e:	2200      	movs	r2, #0
   23a90:	4699      	mov	r9, r3
   23a92:	e79c      	b.n	239ce <__aeabi_dmul+0xce>
   23a94:	2400      	movs	r4, #0
   23a96:	2200      	movs	r2, #0
   23a98:	2001      	movs	r0, #1
   23a9a:	e76e      	b.n	2397a <__aeabi_dmul+0x7a>
   23a9c:	4653      	mov	r3, sl
   23a9e:	2003      	movs	r0, #3
   23aa0:	e76b      	b.n	2397a <__aeabi_dmul+0x7a>
   23aa2:	2300      	movs	r3, #0
   23aa4:	469b      	mov	fp, r3
   23aa6:	3301      	adds	r3, #1
   23aa8:	2704      	movs	r7, #4
   23aaa:	2600      	movs	r6, #0
   23aac:	9302      	str	r3, [sp, #8]
   23aae:	e74c      	b.n	2394a <__aeabi_dmul+0x4a>
   23ab0:	2303      	movs	r3, #3
   23ab2:	4681      	mov	r9, r0
   23ab4:	270c      	movs	r7, #12
   23ab6:	9302      	str	r3, [sp, #8]
   23ab8:	e747      	b.n	2394a <__aeabi_dmul+0x4a>
   23aba:	2280      	movs	r2, #128	; 0x80
   23abc:	2300      	movs	r3, #0
   23abe:	2500      	movs	r5, #0
   23ac0:	0312      	lsls	r2, r2, #12
   23ac2:	4699      	mov	r9, r3
   23ac4:	4c05      	ldr	r4, [pc, #20]	; (23adc <__aeabi_dmul+0x1dc>)
   23ac6:	e782      	b.n	239ce <__aeabi_dmul+0xce>
   23ac8:	465c      	mov	r4, fp
   23aca:	464b      	mov	r3, r9
   23acc:	9802      	ldr	r0, [sp, #8]
   23ace:	e76f      	b.n	239b0 <__aeabi_dmul+0xb0>
   23ad0:	465c      	mov	r4, fp
   23ad2:	464b      	mov	r3, r9
   23ad4:	9501      	str	r5, [sp, #4]
   23ad6:	9802      	ldr	r0, [sp, #8]
   23ad8:	e76a      	b.n	239b0 <__aeabi_dmul+0xb0>
   23ada:	46c0      	nop			; (mov r8, r8)
   23adc:	000007ff 	.word	0x000007ff
   23ae0:	fffffc01 	.word	0xfffffc01
   23ae4:	0002a060 	.word	0x0002a060
   23ae8:	800fffff 	.word	0x800fffff
   23aec:	fffffc0d 	.word	0xfffffc0d
   23af0:	464a      	mov	r2, r9
   23af2:	4649      	mov	r1, r9
   23af4:	0c17      	lsrs	r7, r2, #16
   23af6:	0c1a      	lsrs	r2, r3, #16
   23af8:	041b      	lsls	r3, r3, #16
   23afa:	0c1b      	lsrs	r3, r3, #16
   23afc:	0408      	lsls	r0, r1, #16
   23afe:	0019      	movs	r1, r3
   23b00:	0c00      	lsrs	r0, r0, #16
   23b02:	4341      	muls	r1, r0
   23b04:	0015      	movs	r5, r2
   23b06:	4688      	mov	r8, r1
   23b08:	0019      	movs	r1, r3
   23b0a:	437d      	muls	r5, r7
   23b0c:	4379      	muls	r1, r7
   23b0e:	9503      	str	r5, [sp, #12]
   23b10:	4689      	mov	r9, r1
   23b12:	0029      	movs	r1, r5
   23b14:	0015      	movs	r5, r2
   23b16:	4345      	muls	r5, r0
   23b18:	444d      	add	r5, r9
   23b1a:	9502      	str	r5, [sp, #8]
   23b1c:	4645      	mov	r5, r8
   23b1e:	0c2d      	lsrs	r5, r5, #16
   23b20:	46aa      	mov	sl, r5
   23b22:	9d02      	ldr	r5, [sp, #8]
   23b24:	4455      	add	r5, sl
   23b26:	45a9      	cmp	r9, r5
   23b28:	d906      	bls.n	23b38 <__aeabi_dmul+0x238>
   23b2a:	468a      	mov	sl, r1
   23b2c:	2180      	movs	r1, #128	; 0x80
   23b2e:	0249      	lsls	r1, r1, #9
   23b30:	4689      	mov	r9, r1
   23b32:	44ca      	add	sl, r9
   23b34:	4651      	mov	r1, sl
   23b36:	9103      	str	r1, [sp, #12]
   23b38:	0c29      	lsrs	r1, r5, #16
   23b3a:	9104      	str	r1, [sp, #16]
   23b3c:	4641      	mov	r1, r8
   23b3e:	0409      	lsls	r1, r1, #16
   23b40:	042d      	lsls	r5, r5, #16
   23b42:	0c09      	lsrs	r1, r1, #16
   23b44:	4688      	mov	r8, r1
   23b46:	0029      	movs	r1, r5
   23b48:	0c25      	lsrs	r5, r4, #16
   23b4a:	0424      	lsls	r4, r4, #16
   23b4c:	4441      	add	r1, r8
   23b4e:	0c24      	lsrs	r4, r4, #16
   23b50:	9105      	str	r1, [sp, #20]
   23b52:	0021      	movs	r1, r4
   23b54:	4341      	muls	r1, r0
   23b56:	4688      	mov	r8, r1
   23b58:	0021      	movs	r1, r4
   23b5a:	4379      	muls	r1, r7
   23b5c:	468a      	mov	sl, r1
   23b5e:	4368      	muls	r0, r5
   23b60:	4641      	mov	r1, r8
   23b62:	4450      	add	r0, sl
   23b64:	4681      	mov	r9, r0
   23b66:	0c08      	lsrs	r0, r1, #16
   23b68:	4448      	add	r0, r9
   23b6a:	436f      	muls	r7, r5
   23b6c:	4582      	cmp	sl, r0
   23b6e:	d903      	bls.n	23b78 <__aeabi_dmul+0x278>
   23b70:	2180      	movs	r1, #128	; 0x80
   23b72:	0249      	lsls	r1, r1, #9
   23b74:	4689      	mov	r9, r1
   23b76:	444f      	add	r7, r9
   23b78:	0c01      	lsrs	r1, r0, #16
   23b7a:	4689      	mov	r9, r1
   23b7c:	0039      	movs	r1, r7
   23b7e:	4449      	add	r1, r9
   23b80:	9102      	str	r1, [sp, #8]
   23b82:	4641      	mov	r1, r8
   23b84:	040f      	lsls	r7, r1, #16
   23b86:	9904      	ldr	r1, [sp, #16]
   23b88:	0c3f      	lsrs	r7, r7, #16
   23b8a:	4688      	mov	r8, r1
   23b8c:	0400      	lsls	r0, r0, #16
   23b8e:	19c0      	adds	r0, r0, r7
   23b90:	4480      	add	r8, r0
   23b92:	4641      	mov	r1, r8
   23b94:	9104      	str	r1, [sp, #16]
   23b96:	4659      	mov	r1, fp
   23b98:	0c0f      	lsrs	r7, r1, #16
   23b9a:	0409      	lsls	r1, r1, #16
   23b9c:	0c09      	lsrs	r1, r1, #16
   23b9e:	4688      	mov	r8, r1
   23ba0:	4359      	muls	r1, r3
   23ba2:	468a      	mov	sl, r1
   23ba4:	0039      	movs	r1, r7
   23ba6:	4351      	muls	r1, r2
   23ba8:	4689      	mov	r9, r1
   23baa:	4641      	mov	r1, r8
   23bac:	434a      	muls	r2, r1
   23bae:	4651      	mov	r1, sl
   23bb0:	0c09      	lsrs	r1, r1, #16
   23bb2:	468b      	mov	fp, r1
   23bb4:	437b      	muls	r3, r7
   23bb6:	18d2      	adds	r2, r2, r3
   23bb8:	445a      	add	r2, fp
   23bba:	4293      	cmp	r3, r2
   23bbc:	d903      	bls.n	23bc6 <__aeabi_dmul+0x2c6>
   23bbe:	2380      	movs	r3, #128	; 0x80
   23bc0:	025b      	lsls	r3, r3, #9
   23bc2:	469b      	mov	fp, r3
   23bc4:	44d9      	add	r9, fp
   23bc6:	4651      	mov	r1, sl
   23bc8:	0409      	lsls	r1, r1, #16
   23bca:	0c09      	lsrs	r1, r1, #16
   23bcc:	468a      	mov	sl, r1
   23bce:	4641      	mov	r1, r8
   23bd0:	4361      	muls	r1, r4
   23bd2:	437c      	muls	r4, r7
   23bd4:	0c13      	lsrs	r3, r2, #16
   23bd6:	0412      	lsls	r2, r2, #16
   23bd8:	444b      	add	r3, r9
   23bda:	4452      	add	r2, sl
   23bdc:	46a1      	mov	r9, r4
   23bde:	468a      	mov	sl, r1
   23be0:	003c      	movs	r4, r7
   23be2:	4641      	mov	r1, r8
   23be4:	436c      	muls	r4, r5
   23be6:	434d      	muls	r5, r1
   23be8:	4651      	mov	r1, sl
   23bea:	444d      	add	r5, r9
   23bec:	0c0f      	lsrs	r7, r1, #16
   23bee:	197d      	adds	r5, r7, r5
   23bf0:	45a9      	cmp	r9, r5
   23bf2:	d903      	bls.n	23bfc <__aeabi_dmul+0x2fc>
   23bf4:	2180      	movs	r1, #128	; 0x80
   23bf6:	0249      	lsls	r1, r1, #9
   23bf8:	4688      	mov	r8, r1
   23bfa:	4444      	add	r4, r8
   23bfc:	9f04      	ldr	r7, [sp, #16]
   23bfe:	9903      	ldr	r1, [sp, #12]
   23c00:	46b8      	mov	r8, r7
   23c02:	4441      	add	r1, r8
   23c04:	468b      	mov	fp, r1
   23c06:	4583      	cmp	fp, r0
   23c08:	4180      	sbcs	r0, r0
   23c0a:	4241      	negs	r1, r0
   23c0c:	4688      	mov	r8, r1
   23c0e:	4651      	mov	r1, sl
   23c10:	0408      	lsls	r0, r1, #16
   23c12:	042f      	lsls	r7, r5, #16
   23c14:	0c00      	lsrs	r0, r0, #16
   23c16:	183f      	adds	r7, r7, r0
   23c18:	4658      	mov	r0, fp
   23c1a:	9902      	ldr	r1, [sp, #8]
   23c1c:	1810      	adds	r0, r2, r0
   23c1e:	4689      	mov	r9, r1
   23c20:	4290      	cmp	r0, r2
   23c22:	4192      	sbcs	r2, r2
   23c24:	444f      	add	r7, r9
   23c26:	46ba      	mov	sl, r7
   23c28:	4252      	negs	r2, r2
   23c2a:	4699      	mov	r9, r3
   23c2c:	4693      	mov	fp, r2
   23c2e:	44c2      	add	sl, r8
   23c30:	44d1      	add	r9, sl
   23c32:	44cb      	add	fp, r9
   23c34:	428f      	cmp	r7, r1
   23c36:	41bf      	sbcs	r7, r7
   23c38:	45c2      	cmp	sl, r8
   23c3a:	4189      	sbcs	r1, r1
   23c3c:	4599      	cmp	r9, r3
   23c3e:	419b      	sbcs	r3, r3
   23c40:	4593      	cmp	fp, r2
   23c42:	4192      	sbcs	r2, r2
   23c44:	427f      	negs	r7, r7
   23c46:	4249      	negs	r1, r1
   23c48:	0c2d      	lsrs	r5, r5, #16
   23c4a:	4252      	negs	r2, r2
   23c4c:	430f      	orrs	r7, r1
   23c4e:	425b      	negs	r3, r3
   23c50:	4313      	orrs	r3, r2
   23c52:	197f      	adds	r7, r7, r5
   23c54:	18ff      	adds	r7, r7, r3
   23c56:	465b      	mov	r3, fp
   23c58:	193c      	adds	r4, r7, r4
   23c5a:	0ddb      	lsrs	r3, r3, #23
   23c5c:	9a05      	ldr	r2, [sp, #20]
   23c5e:	0264      	lsls	r4, r4, #9
   23c60:	431c      	orrs	r4, r3
   23c62:	0243      	lsls	r3, r0, #9
   23c64:	4313      	orrs	r3, r2
   23c66:	1e5d      	subs	r5, r3, #1
   23c68:	41ab      	sbcs	r3, r5
   23c6a:	465a      	mov	r2, fp
   23c6c:	0dc0      	lsrs	r0, r0, #23
   23c6e:	4303      	orrs	r3, r0
   23c70:	0252      	lsls	r2, r2, #9
   23c72:	4313      	orrs	r3, r2
   23c74:	01e2      	lsls	r2, r4, #7
   23c76:	d556      	bpl.n	23d26 <__aeabi_dmul+0x426>
   23c78:	2001      	movs	r0, #1
   23c7a:	085a      	lsrs	r2, r3, #1
   23c7c:	4003      	ands	r3, r0
   23c7e:	4313      	orrs	r3, r2
   23c80:	07e2      	lsls	r2, r4, #31
   23c82:	4313      	orrs	r3, r2
   23c84:	0864      	lsrs	r4, r4, #1
   23c86:	485a      	ldr	r0, [pc, #360]	; (23df0 <__aeabi_dmul+0x4f0>)
   23c88:	4460      	add	r0, ip
   23c8a:	2800      	cmp	r0, #0
   23c8c:	dd4d      	ble.n	23d2a <__aeabi_dmul+0x42a>
   23c8e:	075a      	lsls	r2, r3, #29
   23c90:	d009      	beq.n	23ca6 <__aeabi_dmul+0x3a6>
   23c92:	220f      	movs	r2, #15
   23c94:	401a      	ands	r2, r3
   23c96:	2a04      	cmp	r2, #4
   23c98:	d005      	beq.n	23ca6 <__aeabi_dmul+0x3a6>
   23c9a:	1d1a      	adds	r2, r3, #4
   23c9c:	429a      	cmp	r2, r3
   23c9e:	419b      	sbcs	r3, r3
   23ca0:	425b      	negs	r3, r3
   23ca2:	18e4      	adds	r4, r4, r3
   23ca4:	0013      	movs	r3, r2
   23ca6:	01e2      	lsls	r2, r4, #7
   23ca8:	d504      	bpl.n	23cb4 <__aeabi_dmul+0x3b4>
   23caa:	2080      	movs	r0, #128	; 0x80
   23cac:	4a51      	ldr	r2, [pc, #324]	; (23df4 <__aeabi_dmul+0x4f4>)
   23cae:	00c0      	lsls	r0, r0, #3
   23cb0:	4014      	ands	r4, r2
   23cb2:	4460      	add	r0, ip
   23cb4:	4a50      	ldr	r2, [pc, #320]	; (23df8 <__aeabi_dmul+0x4f8>)
   23cb6:	4290      	cmp	r0, r2
   23cb8:	dd00      	ble.n	23cbc <__aeabi_dmul+0x3bc>
   23cba:	e6e3      	b.n	23a84 <__aeabi_dmul+0x184>
   23cbc:	2501      	movs	r5, #1
   23cbe:	08db      	lsrs	r3, r3, #3
   23cc0:	0762      	lsls	r2, r4, #29
   23cc2:	431a      	orrs	r2, r3
   23cc4:	0264      	lsls	r4, r4, #9
   23cc6:	9b01      	ldr	r3, [sp, #4]
   23cc8:	4691      	mov	r9, r2
   23cca:	0b22      	lsrs	r2, r4, #12
   23ccc:	0544      	lsls	r4, r0, #21
   23cce:	0d64      	lsrs	r4, r4, #21
   23cd0:	401d      	ands	r5, r3
   23cd2:	e67c      	b.n	239ce <__aeabi_dmul+0xce>
   23cd4:	2280      	movs	r2, #128	; 0x80
   23cd6:	4659      	mov	r1, fp
   23cd8:	0312      	lsls	r2, r2, #12
   23cda:	4211      	tst	r1, r2
   23cdc:	d008      	beq.n	23cf0 <__aeabi_dmul+0x3f0>
   23cde:	4214      	tst	r4, r2
   23ce0:	d106      	bne.n	23cf0 <__aeabi_dmul+0x3f0>
   23ce2:	4322      	orrs	r2, r4
   23ce4:	0312      	lsls	r2, r2, #12
   23ce6:	0b12      	lsrs	r2, r2, #12
   23ce8:	4645      	mov	r5, r8
   23cea:	4699      	mov	r9, r3
   23cec:	4c43      	ldr	r4, [pc, #268]	; (23dfc <__aeabi_dmul+0x4fc>)
   23cee:	e66e      	b.n	239ce <__aeabi_dmul+0xce>
   23cf0:	465b      	mov	r3, fp
   23cf2:	431a      	orrs	r2, r3
   23cf4:	0312      	lsls	r2, r2, #12
   23cf6:	0b12      	lsrs	r2, r2, #12
   23cf8:	4c40      	ldr	r4, [pc, #256]	; (23dfc <__aeabi_dmul+0x4fc>)
   23cfa:	e668      	b.n	239ce <__aeabi_dmul+0xce>
   23cfc:	0003      	movs	r3, r0
   23cfe:	4654      	mov	r4, sl
   23d00:	3b28      	subs	r3, #40	; 0x28
   23d02:	409c      	lsls	r4, r3
   23d04:	2300      	movs	r3, #0
   23d06:	e6b9      	b.n	23a7c <__aeabi_dmul+0x17c>
   23d08:	f000 fc36 	bl	24578 <__clzsi2>
   23d0c:	3020      	adds	r0, #32
   23d0e:	e6a6      	b.n	23a5e <__aeabi_dmul+0x15e>
   23d10:	0003      	movs	r3, r0
   23d12:	3b28      	subs	r3, #40	; 0x28
   23d14:	409f      	lsls	r7, r3
   23d16:	2300      	movs	r3, #0
   23d18:	46bb      	mov	fp, r7
   23d1a:	4699      	mov	r9, r3
   23d1c:	e68a      	b.n	23a34 <__aeabi_dmul+0x134>
   23d1e:	f000 fc2b 	bl	24578 <__clzsi2>
   23d22:	3020      	adds	r0, #32
   23d24:	e674      	b.n	23a10 <__aeabi_dmul+0x110>
   23d26:	46b4      	mov	ip, r6
   23d28:	e7ad      	b.n	23c86 <__aeabi_dmul+0x386>
   23d2a:	2501      	movs	r5, #1
   23d2c:	1a2a      	subs	r2, r5, r0
   23d2e:	2a38      	cmp	r2, #56	; 0x38
   23d30:	dd06      	ble.n	23d40 <__aeabi_dmul+0x440>
   23d32:	9b01      	ldr	r3, [sp, #4]
   23d34:	2400      	movs	r4, #0
   23d36:	401d      	ands	r5, r3
   23d38:	2300      	movs	r3, #0
   23d3a:	2200      	movs	r2, #0
   23d3c:	4699      	mov	r9, r3
   23d3e:	e646      	b.n	239ce <__aeabi_dmul+0xce>
   23d40:	2a1f      	cmp	r2, #31
   23d42:	dc21      	bgt.n	23d88 <__aeabi_dmul+0x488>
   23d44:	2520      	movs	r5, #32
   23d46:	0020      	movs	r0, r4
   23d48:	1aad      	subs	r5, r5, r2
   23d4a:	001e      	movs	r6, r3
   23d4c:	40ab      	lsls	r3, r5
   23d4e:	40a8      	lsls	r0, r5
   23d50:	40d6      	lsrs	r6, r2
   23d52:	1e5d      	subs	r5, r3, #1
   23d54:	41ab      	sbcs	r3, r5
   23d56:	4330      	orrs	r0, r6
   23d58:	4318      	orrs	r0, r3
   23d5a:	40d4      	lsrs	r4, r2
   23d5c:	0743      	lsls	r3, r0, #29
   23d5e:	d009      	beq.n	23d74 <__aeabi_dmul+0x474>
   23d60:	230f      	movs	r3, #15
   23d62:	4003      	ands	r3, r0
   23d64:	2b04      	cmp	r3, #4
   23d66:	d005      	beq.n	23d74 <__aeabi_dmul+0x474>
   23d68:	0003      	movs	r3, r0
   23d6a:	1d18      	adds	r0, r3, #4
   23d6c:	4298      	cmp	r0, r3
   23d6e:	419b      	sbcs	r3, r3
   23d70:	425b      	negs	r3, r3
   23d72:	18e4      	adds	r4, r4, r3
   23d74:	0223      	lsls	r3, r4, #8
   23d76:	d521      	bpl.n	23dbc <__aeabi_dmul+0x4bc>
   23d78:	2501      	movs	r5, #1
   23d7a:	9b01      	ldr	r3, [sp, #4]
   23d7c:	2401      	movs	r4, #1
   23d7e:	401d      	ands	r5, r3
   23d80:	2300      	movs	r3, #0
   23d82:	2200      	movs	r2, #0
   23d84:	4699      	mov	r9, r3
   23d86:	e622      	b.n	239ce <__aeabi_dmul+0xce>
   23d88:	251f      	movs	r5, #31
   23d8a:	0021      	movs	r1, r4
   23d8c:	426d      	negs	r5, r5
   23d8e:	1a28      	subs	r0, r5, r0
   23d90:	40c1      	lsrs	r1, r0
   23d92:	0008      	movs	r0, r1
   23d94:	2a20      	cmp	r2, #32
   23d96:	d01d      	beq.n	23dd4 <__aeabi_dmul+0x4d4>
   23d98:	355f      	adds	r5, #95	; 0x5f
   23d9a:	1aaa      	subs	r2, r5, r2
   23d9c:	4094      	lsls	r4, r2
   23d9e:	4323      	orrs	r3, r4
   23da0:	1e5c      	subs	r4, r3, #1
   23da2:	41a3      	sbcs	r3, r4
   23da4:	2507      	movs	r5, #7
   23da6:	4303      	orrs	r3, r0
   23da8:	401d      	ands	r5, r3
   23daa:	2200      	movs	r2, #0
   23dac:	2d00      	cmp	r5, #0
   23dae:	d009      	beq.n	23dc4 <__aeabi_dmul+0x4c4>
   23db0:	220f      	movs	r2, #15
   23db2:	2400      	movs	r4, #0
   23db4:	401a      	ands	r2, r3
   23db6:	0018      	movs	r0, r3
   23db8:	2a04      	cmp	r2, #4
   23dba:	d1d6      	bne.n	23d6a <__aeabi_dmul+0x46a>
   23dbc:	0003      	movs	r3, r0
   23dbe:	0765      	lsls	r5, r4, #29
   23dc0:	0264      	lsls	r4, r4, #9
   23dc2:	0b22      	lsrs	r2, r4, #12
   23dc4:	08db      	lsrs	r3, r3, #3
   23dc6:	432b      	orrs	r3, r5
   23dc8:	2501      	movs	r5, #1
   23dca:	4699      	mov	r9, r3
   23dcc:	9b01      	ldr	r3, [sp, #4]
   23dce:	2400      	movs	r4, #0
   23dd0:	401d      	ands	r5, r3
   23dd2:	e5fc      	b.n	239ce <__aeabi_dmul+0xce>
   23dd4:	2400      	movs	r4, #0
   23dd6:	e7e2      	b.n	23d9e <__aeabi_dmul+0x49e>
   23dd8:	2280      	movs	r2, #128	; 0x80
   23dda:	2501      	movs	r5, #1
   23ddc:	0312      	lsls	r2, r2, #12
   23dde:	4322      	orrs	r2, r4
   23de0:	9901      	ldr	r1, [sp, #4]
   23de2:	0312      	lsls	r2, r2, #12
   23de4:	0b12      	lsrs	r2, r2, #12
   23de6:	400d      	ands	r5, r1
   23de8:	4699      	mov	r9, r3
   23dea:	4c04      	ldr	r4, [pc, #16]	; (23dfc <__aeabi_dmul+0x4fc>)
   23dec:	e5ef      	b.n	239ce <__aeabi_dmul+0xce>
   23dee:	46c0      	nop			; (mov r8, r8)
   23df0:	000003ff 	.word	0x000003ff
   23df4:	feffffff 	.word	0xfeffffff
   23df8:	000007fe 	.word	0x000007fe
   23dfc:	000007ff 	.word	0x000007ff

00023e00 <__aeabi_dsub>:
   23e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e02:	4646      	mov	r6, r8
   23e04:	46d6      	mov	lr, sl
   23e06:	464f      	mov	r7, r9
   23e08:	030c      	lsls	r4, r1, #12
   23e0a:	b5c0      	push	{r6, r7, lr}
   23e0c:	0fcd      	lsrs	r5, r1, #31
   23e0e:	004e      	lsls	r6, r1, #1
   23e10:	0a61      	lsrs	r1, r4, #9
   23e12:	0f44      	lsrs	r4, r0, #29
   23e14:	430c      	orrs	r4, r1
   23e16:	00c1      	lsls	r1, r0, #3
   23e18:	0058      	lsls	r0, r3, #1
   23e1a:	0d40      	lsrs	r0, r0, #21
   23e1c:	4684      	mov	ip, r0
   23e1e:	468a      	mov	sl, r1
   23e20:	000f      	movs	r7, r1
   23e22:	0319      	lsls	r1, r3, #12
   23e24:	0f50      	lsrs	r0, r2, #29
   23e26:	0a49      	lsrs	r1, r1, #9
   23e28:	4301      	orrs	r1, r0
   23e2a:	48c6      	ldr	r0, [pc, #792]	; (24144 <__aeabi_dsub+0x344>)
   23e2c:	0d76      	lsrs	r6, r6, #21
   23e2e:	46a8      	mov	r8, r5
   23e30:	0fdb      	lsrs	r3, r3, #31
   23e32:	00d2      	lsls	r2, r2, #3
   23e34:	4584      	cmp	ip, r0
   23e36:	d100      	bne.n	23e3a <__aeabi_dsub+0x3a>
   23e38:	e0d8      	b.n	23fec <__aeabi_dsub+0x1ec>
   23e3a:	2001      	movs	r0, #1
   23e3c:	4043      	eors	r3, r0
   23e3e:	42ab      	cmp	r3, r5
   23e40:	d100      	bne.n	23e44 <__aeabi_dsub+0x44>
   23e42:	e0a6      	b.n	23f92 <__aeabi_dsub+0x192>
   23e44:	4660      	mov	r0, ip
   23e46:	1a35      	subs	r5, r6, r0
   23e48:	2d00      	cmp	r5, #0
   23e4a:	dc00      	bgt.n	23e4e <__aeabi_dsub+0x4e>
   23e4c:	e105      	b.n	2405a <__aeabi_dsub+0x25a>
   23e4e:	2800      	cmp	r0, #0
   23e50:	d110      	bne.n	23e74 <__aeabi_dsub+0x74>
   23e52:	000b      	movs	r3, r1
   23e54:	4313      	orrs	r3, r2
   23e56:	d100      	bne.n	23e5a <__aeabi_dsub+0x5a>
   23e58:	e0d7      	b.n	2400a <__aeabi_dsub+0x20a>
   23e5a:	1e6b      	subs	r3, r5, #1
   23e5c:	2b00      	cmp	r3, #0
   23e5e:	d000      	beq.n	23e62 <__aeabi_dsub+0x62>
   23e60:	e14b      	b.n	240fa <__aeabi_dsub+0x2fa>
   23e62:	4653      	mov	r3, sl
   23e64:	1a9f      	subs	r7, r3, r2
   23e66:	45ba      	cmp	sl, r7
   23e68:	4180      	sbcs	r0, r0
   23e6a:	1a64      	subs	r4, r4, r1
   23e6c:	4240      	negs	r0, r0
   23e6e:	1a24      	subs	r4, r4, r0
   23e70:	2601      	movs	r6, #1
   23e72:	e01e      	b.n	23eb2 <__aeabi_dsub+0xb2>
   23e74:	4bb3      	ldr	r3, [pc, #716]	; (24144 <__aeabi_dsub+0x344>)
   23e76:	429e      	cmp	r6, r3
   23e78:	d048      	beq.n	23f0c <__aeabi_dsub+0x10c>
   23e7a:	2380      	movs	r3, #128	; 0x80
   23e7c:	041b      	lsls	r3, r3, #16
   23e7e:	4319      	orrs	r1, r3
   23e80:	2d38      	cmp	r5, #56	; 0x38
   23e82:	dd00      	ble.n	23e86 <__aeabi_dsub+0x86>
   23e84:	e119      	b.n	240ba <__aeabi_dsub+0x2ba>
   23e86:	2d1f      	cmp	r5, #31
   23e88:	dd00      	ble.n	23e8c <__aeabi_dsub+0x8c>
   23e8a:	e14c      	b.n	24126 <__aeabi_dsub+0x326>
   23e8c:	2320      	movs	r3, #32
   23e8e:	000f      	movs	r7, r1
   23e90:	1b5b      	subs	r3, r3, r5
   23e92:	0010      	movs	r0, r2
   23e94:	409a      	lsls	r2, r3
   23e96:	409f      	lsls	r7, r3
   23e98:	40e8      	lsrs	r0, r5
   23e9a:	1e53      	subs	r3, r2, #1
   23e9c:	419a      	sbcs	r2, r3
   23e9e:	40e9      	lsrs	r1, r5
   23ea0:	4307      	orrs	r7, r0
   23ea2:	4317      	orrs	r7, r2
   23ea4:	4653      	mov	r3, sl
   23ea6:	1bdf      	subs	r7, r3, r7
   23ea8:	1a61      	subs	r1, r4, r1
   23eaa:	45ba      	cmp	sl, r7
   23eac:	41a4      	sbcs	r4, r4
   23eae:	4264      	negs	r4, r4
   23eb0:	1b0c      	subs	r4, r1, r4
   23eb2:	0223      	lsls	r3, r4, #8
   23eb4:	d400      	bmi.n	23eb8 <__aeabi_dsub+0xb8>
   23eb6:	e0c5      	b.n	24044 <__aeabi_dsub+0x244>
   23eb8:	0264      	lsls	r4, r4, #9
   23eba:	0a65      	lsrs	r5, r4, #9
   23ebc:	2d00      	cmp	r5, #0
   23ebe:	d100      	bne.n	23ec2 <__aeabi_dsub+0xc2>
   23ec0:	e0f6      	b.n	240b0 <__aeabi_dsub+0x2b0>
   23ec2:	0028      	movs	r0, r5
   23ec4:	f000 fb58 	bl	24578 <__clzsi2>
   23ec8:	0003      	movs	r3, r0
   23eca:	3b08      	subs	r3, #8
   23ecc:	2b1f      	cmp	r3, #31
   23ece:	dd00      	ble.n	23ed2 <__aeabi_dsub+0xd2>
   23ed0:	e0e9      	b.n	240a6 <__aeabi_dsub+0x2a6>
   23ed2:	2220      	movs	r2, #32
   23ed4:	003c      	movs	r4, r7
   23ed6:	1ad2      	subs	r2, r2, r3
   23ed8:	409d      	lsls	r5, r3
   23eda:	40d4      	lsrs	r4, r2
   23edc:	409f      	lsls	r7, r3
   23ede:	4325      	orrs	r5, r4
   23ee0:	429e      	cmp	r6, r3
   23ee2:	dd00      	ble.n	23ee6 <__aeabi_dsub+0xe6>
   23ee4:	e0db      	b.n	2409e <__aeabi_dsub+0x29e>
   23ee6:	1b9e      	subs	r6, r3, r6
   23ee8:	1c73      	adds	r3, r6, #1
   23eea:	2b1f      	cmp	r3, #31
   23eec:	dd00      	ble.n	23ef0 <__aeabi_dsub+0xf0>
   23eee:	e10a      	b.n	24106 <__aeabi_dsub+0x306>
   23ef0:	2220      	movs	r2, #32
   23ef2:	0038      	movs	r0, r7
   23ef4:	1ad2      	subs	r2, r2, r3
   23ef6:	0029      	movs	r1, r5
   23ef8:	4097      	lsls	r7, r2
   23efa:	002c      	movs	r4, r5
   23efc:	4091      	lsls	r1, r2
   23efe:	40d8      	lsrs	r0, r3
   23f00:	1e7a      	subs	r2, r7, #1
   23f02:	4197      	sbcs	r7, r2
   23f04:	40dc      	lsrs	r4, r3
   23f06:	2600      	movs	r6, #0
   23f08:	4301      	orrs	r1, r0
   23f0a:	430f      	orrs	r7, r1
   23f0c:	077b      	lsls	r3, r7, #29
   23f0e:	d009      	beq.n	23f24 <__aeabi_dsub+0x124>
   23f10:	230f      	movs	r3, #15
   23f12:	403b      	ands	r3, r7
   23f14:	2b04      	cmp	r3, #4
   23f16:	d005      	beq.n	23f24 <__aeabi_dsub+0x124>
   23f18:	1d3b      	adds	r3, r7, #4
   23f1a:	42bb      	cmp	r3, r7
   23f1c:	41bf      	sbcs	r7, r7
   23f1e:	427f      	negs	r7, r7
   23f20:	19e4      	adds	r4, r4, r7
   23f22:	001f      	movs	r7, r3
   23f24:	0223      	lsls	r3, r4, #8
   23f26:	d525      	bpl.n	23f74 <__aeabi_dsub+0x174>
   23f28:	4b86      	ldr	r3, [pc, #536]	; (24144 <__aeabi_dsub+0x344>)
   23f2a:	3601      	adds	r6, #1
   23f2c:	429e      	cmp	r6, r3
   23f2e:	d100      	bne.n	23f32 <__aeabi_dsub+0x132>
   23f30:	e0af      	b.n	24092 <__aeabi_dsub+0x292>
   23f32:	4b85      	ldr	r3, [pc, #532]	; (24148 <__aeabi_dsub+0x348>)
   23f34:	2501      	movs	r5, #1
   23f36:	401c      	ands	r4, r3
   23f38:	4643      	mov	r3, r8
   23f3a:	0762      	lsls	r2, r4, #29
   23f3c:	08ff      	lsrs	r7, r7, #3
   23f3e:	0264      	lsls	r4, r4, #9
   23f40:	0576      	lsls	r6, r6, #21
   23f42:	4317      	orrs	r7, r2
   23f44:	0b24      	lsrs	r4, r4, #12
   23f46:	0d76      	lsrs	r6, r6, #21
   23f48:	401d      	ands	r5, r3
   23f4a:	2100      	movs	r1, #0
   23f4c:	0324      	lsls	r4, r4, #12
   23f4e:	0b23      	lsrs	r3, r4, #12
   23f50:	0d0c      	lsrs	r4, r1, #20
   23f52:	4a7e      	ldr	r2, [pc, #504]	; (2414c <__aeabi_dsub+0x34c>)
   23f54:	0524      	lsls	r4, r4, #20
   23f56:	431c      	orrs	r4, r3
   23f58:	4014      	ands	r4, r2
   23f5a:	0533      	lsls	r3, r6, #20
   23f5c:	4323      	orrs	r3, r4
   23f5e:	005b      	lsls	r3, r3, #1
   23f60:	07ed      	lsls	r5, r5, #31
   23f62:	085b      	lsrs	r3, r3, #1
   23f64:	432b      	orrs	r3, r5
   23f66:	0038      	movs	r0, r7
   23f68:	0019      	movs	r1, r3
   23f6a:	bc1c      	pop	{r2, r3, r4}
   23f6c:	4690      	mov	r8, r2
   23f6e:	4699      	mov	r9, r3
   23f70:	46a2      	mov	sl, r4
   23f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23f74:	2501      	movs	r5, #1
   23f76:	4643      	mov	r3, r8
   23f78:	0762      	lsls	r2, r4, #29
   23f7a:	08ff      	lsrs	r7, r7, #3
   23f7c:	4317      	orrs	r7, r2
   23f7e:	08e4      	lsrs	r4, r4, #3
   23f80:	401d      	ands	r5, r3
   23f82:	4b70      	ldr	r3, [pc, #448]	; (24144 <__aeabi_dsub+0x344>)
   23f84:	429e      	cmp	r6, r3
   23f86:	d036      	beq.n	23ff6 <__aeabi_dsub+0x1f6>
   23f88:	0324      	lsls	r4, r4, #12
   23f8a:	0576      	lsls	r6, r6, #21
   23f8c:	0b24      	lsrs	r4, r4, #12
   23f8e:	0d76      	lsrs	r6, r6, #21
   23f90:	e7db      	b.n	23f4a <__aeabi_dsub+0x14a>
   23f92:	4663      	mov	r3, ip
   23f94:	1af3      	subs	r3, r6, r3
   23f96:	2b00      	cmp	r3, #0
   23f98:	dc00      	bgt.n	23f9c <__aeabi_dsub+0x19c>
   23f9a:	e094      	b.n	240c6 <__aeabi_dsub+0x2c6>
   23f9c:	4660      	mov	r0, ip
   23f9e:	2800      	cmp	r0, #0
   23fa0:	d035      	beq.n	2400e <__aeabi_dsub+0x20e>
   23fa2:	4868      	ldr	r0, [pc, #416]	; (24144 <__aeabi_dsub+0x344>)
   23fa4:	4286      	cmp	r6, r0
   23fa6:	d0b1      	beq.n	23f0c <__aeabi_dsub+0x10c>
   23fa8:	2780      	movs	r7, #128	; 0x80
   23faa:	043f      	lsls	r7, r7, #16
   23fac:	4339      	orrs	r1, r7
   23fae:	2b38      	cmp	r3, #56	; 0x38
   23fb0:	dc00      	bgt.n	23fb4 <__aeabi_dsub+0x1b4>
   23fb2:	e0fd      	b.n	241b0 <__aeabi_dsub+0x3b0>
   23fb4:	430a      	orrs	r2, r1
   23fb6:	0017      	movs	r7, r2
   23fb8:	2100      	movs	r1, #0
   23fba:	1e7a      	subs	r2, r7, #1
   23fbc:	4197      	sbcs	r7, r2
   23fbe:	4457      	add	r7, sl
   23fc0:	4557      	cmp	r7, sl
   23fc2:	4180      	sbcs	r0, r0
   23fc4:	1909      	adds	r1, r1, r4
   23fc6:	4244      	negs	r4, r0
   23fc8:	190c      	adds	r4, r1, r4
   23fca:	0223      	lsls	r3, r4, #8
   23fcc:	d53a      	bpl.n	24044 <__aeabi_dsub+0x244>
   23fce:	4b5d      	ldr	r3, [pc, #372]	; (24144 <__aeabi_dsub+0x344>)
   23fd0:	3601      	adds	r6, #1
   23fd2:	429e      	cmp	r6, r3
   23fd4:	d100      	bne.n	23fd8 <__aeabi_dsub+0x1d8>
   23fd6:	e14b      	b.n	24270 <__aeabi_dsub+0x470>
   23fd8:	2201      	movs	r2, #1
   23fda:	4b5b      	ldr	r3, [pc, #364]	; (24148 <__aeabi_dsub+0x348>)
   23fdc:	401c      	ands	r4, r3
   23fde:	087b      	lsrs	r3, r7, #1
   23fe0:	4017      	ands	r7, r2
   23fe2:	431f      	orrs	r7, r3
   23fe4:	07e2      	lsls	r2, r4, #31
   23fe6:	4317      	orrs	r7, r2
   23fe8:	0864      	lsrs	r4, r4, #1
   23fea:	e78f      	b.n	23f0c <__aeabi_dsub+0x10c>
   23fec:	0008      	movs	r0, r1
   23fee:	4310      	orrs	r0, r2
   23ff0:	d000      	beq.n	23ff4 <__aeabi_dsub+0x1f4>
   23ff2:	e724      	b.n	23e3e <__aeabi_dsub+0x3e>
   23ff4:	e721      	b.n	23e3a <__aeabi_dsub+0x3a>
   23ff6:	0023      	movs	r3, r4
   23ff8:	433b      	orrs	r3, r7
   23ffa:	d100      	bne.n	23ffe <__aeabi_dsub+0x1fe>
   23ffc:	e1b9      	b.n	24372 <__aeabi_dsub+0x572>
   23ffe:	2280      	movs	r2, #128	; 0x80
   24000:	0312      	lsls	r2, r2, #12
   24002:	4314      	orrs	r4, r2
   24004:	0324      	lsls	r4, r4, #12
   24006:	0b24      	lsrs	r4, r4, #12
   24008:	e79f      	b.n	23f4a <__aeabi_dsub+0x14a>
   2400a:	002e      	movs	r6, r5
   2400c:	e77e      	b.n	23f0c <__aeabi_dsub+0x10c>
   2400e:	0008      	movs	r0, r1
   24010:	4310      	orrs	r0, r2
   24012:	d100      	bne.n	24016 <__aeabi_dsub+0x216>
   24014:	e0ca      	b.n	241ac <__aeabi_dsub+0x3ac>
   24016:	1e58      	subs	r0, r3, #1
   24018:	4684      	mov	ip, r0
   2401a:	2800      	cmp	r0, #0
   2401c:	d000      	beq.n	24020 <__aeabi_dsub+0x220>
   2401e:	e0e7      	b.n	241f0 <__aeabi_dsub+0x3f0>
   24020:	4452      	add	r2, sl
   24022:	4552      	cmp	r2, sl
   24024:	4180      	sbcs	r0, r0
   24026:	1864      	adds	r4, r4, r1
   24028:	4240      	negs	r0, r0
   2402a:	1824      	adds	r4, r4, r0
   2402c:	0017      	movs	r7, r2
   2402e:	2601      	movs	r6, #1
   24030:	0223      	lsls	r3, r4, #8
   24032:	d507      	bpl.n	24044 <__aeabi_dsub+0x244>
   24034:	2602      	movs	r6, #2
   24036:	e7cf      	b.n	23fd8 <__aeabi_dsub+0x1d8>
   24038:	4664      	mov	r4, ip
   2403a:	432c      	orrs	r4, r5
   2403c:	d100      	bne.n	24040 <__aeabi_dsub+0x240>
   2403e:	e1b3      	b.n	243a8 <__aeabi_dsub+0x5a8>
   24040:	002c      	movs	r4, r5
   24042:	4667      	mov	r7, ip
   24044:	077b      	lsls	r3, r7, #29
   24046:	d000      	beq.n	2404a <__aeabi_dsub+0x24a>
   24048:	e762      	b.n	23f10 <__aeabi_dsub+0x110>
   2404a:	0763      	lsls	r3, r4, #29
   2404c:	08ff      	lsrs	r7, r7, #3
   2404e:	431f      	orrs	r7, r3
   24050:	2501      	movs	r5, #1
   24052:	4643      	mov	r3, r8
   24054:	08e4      	lsrs	r4, r4, #3
   24056:	401d      	ands	r5, r3
   24058:	e793      	b.n	23f82 <__aeabi_dsub+0x182>
   2405a:	2d00      	cmp	r5, #0
   2405c:	d178      	bne.n	24150 <__aeabi_dsub+0x350>
   2405e:	1c75      	adds	r5, r6, #1
   24060:	056d      	lsls	r5, r5, #21
   24062:	0d6d      	lsrs	r5, r5, #21
   24064:	2d01      	cmp	r5, #1
   24066:	dc00      	bgt.n	2406a <__aeabi_dsub+0x26a>
   24068:	e0f2      	b.n	24250 <__aeabi_dsub+0x450>
   2406a:	4650      	mov	r0, sl
   2406c:	1a80      	subs	r0, r0, r2
   2406e:	4582      	cmp	sl, r0
   24070:	41bf      	sbcs	r7, r7
   24072:	1a65      	subs	r5, r4, r1
   24074:	427f      	negs	r7, r7
   24076:	1bed      	subs	r5, r5, r7
   24078:	4684      	mov	ip, r0
   2407a:	0228      	lsls	r0, r5, #8
   2407c:	d400      	bmi.n	24080 <__aeabi_dsub+0x280>
   2407e:	e08c      	b.n	2419a <__aeabi_dsub+0x39a>
   24080:	4650      	mov	r0, sl
   24082:	1a17      	subs	r7, r2, r0
   24084:	42ba      	cmp	r2, r7
   24086:	4192      	sbcs	r2, r2
   24088:	1b0c      	subs	r4, r1, r4
   2408a:	4255      	negs	r5, r2
   2408c:	1b65      	subs	r5, r4, r5
   2408e:	4698      	mov	r8, r3
   24090:	e714      	b.n	23ebc <__aeabi_dsub+0xbc>
   24092:	2501      	movs	r5, #1
   24094:	4643      	mov	r3, r8
   24096:	2400      	movs	r4, #0
   24098:	401d      	ands	r5, r3
   2409a:	2700      	movs	r7, #0
   2409c:	e755      	b.n	23f4a <__aeabi_dsub+0x14a>
   2409e:	4c2a      	ldr	r4, [pc, #168]	; (24148 <__aeabi_dsub+0x348>)
   240a0:	1af6      	subs	r6, r6, r3
   240a2:	402c      	ands	r4, r5
   240a4:	e732      	b.n	23f0c <__aeabi_dsub+0x10c>
   240a6:	003d      	movs	r5, r7
   240a8:	3828      	subs	r0, #40	; 0x28
   240aa:	4085      	lsls	r5, r0
   240ac:	2700      	movs	r7, #0
   240ae:	e717      	b.n	23ee0 <__aeabi_dsub+0xe0>
   240b0:	0038      	movs	r0, r7
   240b2:	f000 fa61 	bl	24578 <__clzsi2>
   240b6:	3020      	adds	r0, #32
   240b8:	e706      	b.n	23ec8 <__aeabi_dsub+0xc8>
   240ba:	430a      	orrs	r2, r1
   240bc:	0017      	movs	r7, r2
   240be:	2100      	movs	r1, #0
   240c0:	1e7a      	subs	r2, r7, #1
   240c2:	4197      	sbcs	r7, r2
   240c4:	e6ee      	b.n	23ea4 <__aeabi_dsub+0xa4>
   240c6:	2b00      	cmp	r3, #0
   240c8:	d000      	beq.n	240cc <__aeabi_dsub+0x2cc>
   240ca:	e0e5      	b.n	24298 <__aeabi_dsub+0x498>
   240cc:	1c73      	adds	r3, r6, #1
   240ce:	469c      	mov	ip, r3
   240d0:	055b      	lsls	r3, r3, #21
   240d2:	0d5b      	lsrs	r3, r3, #21
   240d4:	2b01      	cmp	r3, #1
   240d6:	dc00      	bgt.n	240da <__aeabi_dsub+0x2da>
   240d8:	e09f      	b.n	2421a <__aeabi_dsub+0x41a>
   240da:	4b1a      	ldr	r3, [pc, #104]	; (24144 <__aeabi_dsub+0x344>)
   240dc:	459c      	cmp	ip, r3
   240de:	d100      	bne.n	240e2 <__aeabi_dsub+0x2e2>
   240e0:	e0c5      	b.n	2426e <__aeabi_dsub+0x46e>
   240e2:	4452      	add	r2, sl
   240e4:	4552      	cmp	r2, sl
   240e6:	4180      	sbcs	r0, r0
   240e8:	1864      	adds	r4, r4, r1
   240ea:	4240      	negs	r0, r0
   240ec:	1824      	adds	r4, r4, r0
   240ee:	07e7      	lsls	r7, r4, #31
   240f0:	0852      	lsrs	r2, r2, #1
   240f2:	4317      	orrs	r7, r2
   240f4:	0864      	lsrs	r4, r4, #1
   240f6:	4666      	mov	r6, ip
   240f8:	e708      	b.n	23f0c <__aeabi_dsub+0x10c>
   240fa:	4812      	ldr	r0, [pc, #72]	; (24144 <__aeabi_dsub+0x344>)
   240fc:	4285      	cmp	r5, r0
   240fe:	d100      	bne.n	24102 <__aeabi_dsub+0x302>
   24100:	e085      	b.n	2420e <__aeabi_dsub+0x40e>
   24102:	001d      	movs	r5, r3
   24104:	e6bc      	b.n	23e80 <__aeabi_dsub+0x80>
   24106:	0029      	movs	r1, r5
   24108:	3e1f      	subs	r6, #31
   2410a:	40f1      	lsrs	r1, r6
   2410c:	2b20      	cmp	r3, #32
   2410e:	d100      	bne.n	24112 <__aeabi_dsub+0x312>
   24110:	e07f      	b.n	24212 <__aeabi_dsub+0x412>
   24112:	2240      	movs	r2, #64	; 0x40
   24114:	1ad3      	subs	r3, r2, r3
   24116:	409d      	lsls	r5, r3
   24118:	432f      	orrs	r7, r5
   2411a:	1e7d      	subs	r5, r7, #1
   2411c:	41af      	sbcs	r7, r5
   2411e:	2400      	movs	r4, #0
   24120:	430f      	orrs	r7, r1
   24122:	2600      	movs	r6, #0
   24124:	e78e      	b.n	24044 <__aeabi_dsub+0x244>
   24126:	002b      	movs	r3, r5
   24128:	000f      	movs	r7, r1
   2412a:	3b20      	subs	r3, #32
   2412c:	40df      	lsrs	r7, r3
   2412e:	2d20      	cmp	r5, #32
   24130:	d071      	beq.n	24216 <__aeabi_dsub+0x416>
   24132:	2340      	movs	r3, #64	; 0x40
   24134:	1b5d      	subs	r5, r3, r5
   24136:	40a9      	lsls	r1, r5
   24138:	430a      	orrs	r2, r1
   2413a:	1e51      	subs	r1, r2, #1
   2413c:	418a      	sbcs	r2, r1
   2413e:	2100      	movs	r1, #0
   24140:	4317      	orrs	r7, r2
   24142:	e6af      	b.n	23ea4 <__aeabi_dsub+0xa4>
   24144:	000007ff 	.word	0x000007ff
   24148:	ff7fffff 	.word	0xff7fffff
   2414c:	800fffff 	.word	0x800fffff
   24150:	2e00      	cmp	r6, #0
   24152:	d03e      	beq.n	241d2 <__aeabi_dsub+0x3d2>
   24154:	4eb3      	ldr	r6, [pc, #716]	; (24424 <__aeabi_dsub+0x624>)
   24156:	45b4      	cmp	ip, r6
   24158:	d045      	beq.n	241e6 <__aeabi_dsub+0x3e6>
   2415a:	2680      	movs	r6, #128	; 0x80
   2415c:	0436      	lsls	r6, r6, #16
   2415e:	426d      	negs	r5, r5
   24160:	4334      	orrs	r4, r6
   24162:	2d38      	cmp	r5, #56	; 0x38
   24164:	dd00      	ble.n	24168 <__aeabi_dsub+0x368>
   24166:	e0a8      	b.n	242ba <__aeabi_dsub+0x4ba>
   24168:	2d1f      	cmp	r5, #31
   2416a:	dd00      	ble.n	2416e <__aeabi_dsub+0x36e>
   2416c:	e11f      	b.n	243ae <__aeabi_dsub+0x5ae>
   2416e:	2620      	movs	r6, #32
   24170:	0027      	movs	r7, r4
   24172:	4650      	mov	r0, sl
   24174:	1b76      	subs	r6, r6, r5
   24176:	40b7      	lsls	r7, r6
   24178:	40e8      	lsrs	r0, r5
   2417a:	4307      	orrs	r7, r0
   2417c:	4650      	mov	r0, sl
   2417e:	40b0      	lsls	r0, r6
   24180:	1e46      	subs	r6, r0, #1
   24182:	41b0      	sbcs	r0, r6
   24184:	40ec      	lsrs	r4, r5
   24186:	4338      	orrs	r0, r7
   24188:	1a17      	subs	r7, r2, r0
   2418a:	42ba      	cmp	r2, r7
   2418c:	4192      	sbcs	r2, r2
   2418e:	1b0c      	subs	r4, r1, r4
   24190:	4252      	negs	r2, r2
   24192:	1aa4      	subs	r4, r4, r2
   24194:	4666      	mov	r6, ip
   24196:	4698      	mov	r8, r3
   24198:	e68b      	b.n	23eb2 <__aeabi_dsub+0xb2>
   2419a:	4664      	mov	r4, ip
   2419c:	4667      	mov	r7, ip
   2419e:	432c      	orrs	r4, r5
   241a0:	d000      	beq.n	241a4 <__aeabi_dsub+0x3a4>
   241a2:	e68b      	b.n	23ebc <__aeabi_dsub+0xbc>
   241a4:	2500      	movs	r5, #0
   241a6:	2600      	movs	r6, #0
   241a8:	2700      	movs	r7, #0
   241aa:	e6ea      	b.n	23f82 <__aeabi_dsub+0x182>
   241ac:	001e      	movs	r6, r3
   241ae:	e6ad      	b.n	23f0c <__aeabi_dsub+0x10c>
   241b0:	2b1f      	cmp	r3, #31
   241b2:	dc60      	bgt.n	24276 <__aeabi_dsub+0x476>
   241b4:	2720      	movs	r7, #32
   241b6:	1af8      	subs	r0, r7, r3
   241b8:	000f      	movs	r7, r1
   241ba:	4684      	mov	ip, r0
   241bc:	4087      	lsls	r7, r0
   241be:	0010      	movs	r0, r2
   241c0:	40d8      	lsrs	r0, r3
   241c2:	4307      	orrs	r7, r0
   241c4:	4660      	mov	r0, ip
   241c6:	4082      	lsls	r2, r0
   241c8:	1e50      	subs	r0, r2, #1
   241ca:	4182      	sbcs	r2, r0
   241cc:	40d9      	lsrs	r1, r3
   241ce:	4317      	orrs	r7, r2
   241d0:	e6f5      	b.n	23fbe <__aeabi_dsub+0x1be>
   241d2:	0026      	movs	r6, r4
   241d4:	4650      	mov	r0, sl
   241d6:	4306      	orrs	r6, r0
   241d8:	d005      	beq.n	241e6 <__aeabi_dsub+0x3e6>
   241da:	43ed      	mvns	r5, r5
   241dc:	2d00      	cmp	r5, #0
   241de:	d0d3      	beq.n	24188 <__aeabi_dsub+0x388>
   241e0:	4e90      	ldr	r6, [pc, #576]	; (24424 <__aeabi_dsub+0x624>)
   241e2:	45b4      	cmp	ip, r6
   241e4:	d1bd      	bne.n	24162 <__aeabi_dsub+0x362>
   241e6:	000c      	movs	r4, r1
   241e8:	0017      	movs	r7, r2
   241ea:	4666      	mov	r6, ip
   241ec:	4698      	mov	r8, r3
   241ee:	e68d      	b.n	23f0c <__aeabi_dsub+0x10c>
   241f0:	488c      	ldr	r0, [pc, #560]	; (24424 <__aeabi_dsub+0x624>)
   241f2:	4283      	cmp	r3, r0
   241f4:	d00b      	beq.n	2420e <__aeabi_dsub+0x40e>
   241f6:	4663      	mov	r3, ip
   241f8:	e6d9      	b.n	23fae <__aeabi_dsub+0x1ae>
   241fa:	2d00      	cmp	r5, #0
   241fc:	d000      	beq.n	24200 <__aeabi_dsub+0x400>
   241fe:	e096      	b.n	2432e <__aeabi_dsub+0x52e>
   24200:	0008      	movs	r0, r1
   24202:	4310      	orrs	r0, r2
   24204:	d100      	bne.n	24208 <__aeabi_dsub+0x408>
   24206:	e0e2      	b.n	243ce <__aeabi_dsub+0x5ce>
   24208:	000c      	movs	r4, r1
   2420a:	0017      	movs	r7, r2
   2420c:	4698      	mov	r8, r3
   2420e:	4e85      	ldr	r6, [pc, #532]	; (24424 <__aeabi_dsub+0x624>)
   24210:	e67c      	b.n	23f0c <__aeabi_dsub+0x10c>
   24212:	2500      	movs	r5, #0
   24214:	e780      	b.n	24118 <__aeabi_dsub+0x318>
   24216:	2100      	movs	r1, #0
   24218:	e78e      	b.n	24138 <__aeabi_dsub+0x338>
   2421a:	0023      	movs	r3, r4
   2421c:	4650      	mov	r0, sl
   2421e:	4303      	orrs	r3, r0
   24220:	2e00      	cmp	r6, #0
   24222:	d000      	beq.n	24226 <__aeabi_dsub+0x426>
   24224:	e0a8      	b.n	24378 <__aeabi_dsub+0x578>
   24226:	2b00      	cmp	r3, #0
   24228:	d100      	bne.n	2422c <__aeabi_dsub+0x42c>
   2422a:	e0de      	b.n	243ea <__aeabi_dsub+0x5ea>
   2422c:	000b      	movs	r3, r1
   2422e:	4313      	orrs	r3, r2
   24230:	d100      	bne.n	24234 <__aeabi_dsub+0x434>
   24232:	e66b      	b.n	23f0c <__aeabi_dsub+0x10c>
   24234:	4452      	add	r2, sl
   24236:	4552      	cmp	r2, sl
   24238:	4180      	sbcs	r0, r0
   2423a:	1864      	adds	r4, r4, r1
   2423c:	4240      	negs	r0, r0
   2423e:	1824      	adds	r4, r4, r0
   24240:	0017      	movs	r7, r2
   24242:	0223      	lsls	r3, r4, #8
   24244:	d400      	bmi.n	24248 <__aeabi_dsub+0x448>
   24246:	e6fd      	b.n	24044 <__aeabi_dsub+0x244>
   24248:	4b77      	ldr	r3, [pc, #476]	; (24428 <__aeabi_dsub+0x628>)
   2424a:	4666      	mov	r6, ip
   2424c:	401c      	ands	r4, r3
   2424e:	e65d      	b.n	23f0c <__aeabi_dsub+0x10c>
   24250:	0025      	movs	r5, r4
   24252:	4650      	mov	r0, sl
   24254:	4305      	orrs	r5, r0
   24256:	2e00      	cmp	r6, #0
   24258:	d1cf      	bne.n	241fa <__aeabi_dsub+0x3fa>
   2425a:	2d00      	cmp	r5, #0
   2425c:	d14f      	bne.n	242fe <__aeabi_dsub+0x4fe>
   2425e:	000c      	movs	r4, r1
   24260:	4314      	orrs	r4, r2
   24262:	d100      	bne.n	24266 <__aeabi_dsub+0x466>
   24264:	e0a0      	b.n	243a8 <__aeabi_dsub+0x5a8>
   24266:	000c      	movs	r4, r1
   24268:	0017      	movs	r7, r2
   2426a:	4698      	mov	r8, r3
   2426c:	e64e      	b.n	23f0c <__aeabi_dsub+0x10c>
   2426e:	4666      	mov	r6, ip
   24270:	2400      	movs	r4, #0
   24272:	2700      	movs	r7, #0
   24274:	e685      	b.n	23f82 <__aeabi_dsub+0x182>
   24276:	001f      	movs	r7, r3
   24278:	0008      	movs	r0, r1
   2427a:	3f20      	subs	r7, #32
   2427c:	40f8      	lsrs	r0, r7
   2427e:	0007      	movs	r7, r0
   24280:	2b20      	cmp	r3, #32
   24282:	d100      	bne.n	24286 <__aeabi_dsub+0x486>
   24284:	e08e      	b.n	243a4 <__aeabi_dsub+0x5a4>
   24286:	2040      	movs	r0, #64	; 0x40
   24288:	1ac3      	subs	r3, r0, r3
   2428a:	4099      	lsls	r1, r3
   2428c:	430a      	orrs	r2, r1
   2428e:	1e51      	subs	r1, r2, #1
   24290:	418a      	sbcs	r2, r1
   24292:	2100      	movs	r1, #0
   24294:	4317      	orrs	r7, r2
   24296:	e692      	b.n	23fbe <__aeabi_dsub+0x1be>
   24298:	2e00      	cmp	r6, #0
   2429a:	d114      	bne.n	242c6 <__aeabi_dsub+0x4c6>
   2429c:	0026      	movs	r6, r4
   2429e:	4650      	mov	r0, sl
   242a0:	4306      	orrs	r6, r0
   242a2:	d062      	beq.n	2436a <__aeabi_dsub+0x56a>
   242a4:	43db      	mvns	r3, r3
   242a6:	2b00      	cmp	r3, #0
   242a8:	d15c      	bne.n	24364 <__aeabi_dsub+0x564>
   242aa:	1887      	adds	r7, r0, r2
   242ac:	4297      	cmp	r7, r2
   242ae:	4192      	sbcs	r2, r2
   242b0:	1864      	adds	r4, r4, r1
   242b2:	4252      	negs	r2, r2
   242b4:	18a4      	adds	r4, r4, r2
   242b6:	4666      	mov	r6, ip
   242b8:	e687      	b.n	23fca <__aeabi_dsub+0x1ca>
   242ba:	4650      	mov	r0, sl
   242bc:	4320      	orrs	r0, r4
   242be:	1e44      	subs	r4, r0, #1
   242c0:	41a0      	sbcs	r0, r4
   242c2:	2400      	movs	r4, #0
   242c4:	e760      	b.n	24188 <__aeabi_dsub+0x388>
   242c6:	4e57      	ldr	r6, [pc, #348]	; (24424 <__aeabi_dsub+0x624>)
   242c8:	45b4      	cmp	ip, r6
   242ca:	d04e      	beq.n	2436a <__aeabi_dsub+0x56a>
   242cc:	2680      	movs	r6, #128	; 0x80
   242ce:	0436      	lsls	r6, r6, #16
   242d0:	425b      	negs	r3, r3
   242d2:	4334      	orrs	r4, r6
   242d4:	2b38      	cmp	r3, #56	; 0x38
   242d6:	dd00      	ble.n	242da <__aeabi_dsub+0x4da>
   242d8:	e07f      	b.n	243da <__aeabi_dsub+0x5da>
   242da:	2b1f      	cmp	r3, #31
   242dc:	dd00      	ble.n	242e0 <__aeabi_dsub+0x4e0>
   242de:	e08b      	b.n	243f8 <__aeabi_dsub+0x5f8>
   242e0:	2620      	movs	r6, #32
   242e2:	0027      	movs	r7, r4
   242e4:	4650      	mov	r0, sl
   242e6:	1af6      	subs	r6, r6, r3
   242e8:	40b7      	lsls	r7, r6
   242ea:	40d8      	lsrs	r0, r3
   242ec:	4307      	orrs	r7, r0
   242ee:	4650      	mov	r0, sl
   242f0:	40b0      	lsls	r0, r6
   242f2:	1e46      	subs	r6, r0, #1
   242f4:	41b0      	sbcs	r0, r6
   242f6:	4307      	orrs	r7, r0
   242f8:	40dc      	lsrs	r4, r3
   242fa:	18bf      	adds	r7, r7, r2
   242fc:	e7d6      	b.n	242ac <__aeabi_dsub+0x4ac>
   242fe:	000d      	movs	r5, r1
   24300:	4315      	orrs	r5, r2
   24302:	d100      	bne.n	24306 <__aeabi_dsub+0x506>
   24304:	e602      	b.n	23f0c <__aeabi_dsub+0x10c>
   24306:	4650      	mov	r0, sl
   24308:	1a80      	subs	r0, r0, r2
   2430a:	4582      	cmp	sl, r0
   2430c:	41bf      	sbcs	r7, r7
   2430e:	1a65      	subs	r5, r4, r1
   24310:	427f      	negs	r7, r7
   24312:	1bed      	subs	r5, r5, r7
   24314:	4684      	mov	ip, r0
   24316:	0228      	lsls	r0, r5, #8
   24318:	d400      	bmi.n	2431c <__aeabi_dsub+0x51c>
   2431a:	e68d      	b.n	24038 <__aeabi_dsub+0x238>
   2431c:	4650      	mov	r0, sl
   2431e:	1a17      	subs	r7, r2, r0
   24320:	42ba      	cmp	r2, r7
   24322:	4192      	sbcs	r2, r2
   24324:	1b0c      	subs	r4, r1, r4
   24326:	4252      	negs	r2, r2
   24328:	1aa4      	subs	r4, r4, r2
   2432a:	4698      	mov	r8, r3
   2432c:	e5ee      	b.n	23f0c <__aeabi_dsub+0x10c>
   2432e:	000d      	movs	r5, r1
   24330:	4315      	orrs	r5, r2
   24332:	d100      	bne.n	24336 <__aeabi_dsub+0x536>
   24334:	e76b      	b.n	2420e <__aeabi_dsub+0x40e>
   24336:	4650      	mov	r0, sl
   24338:	0767      	lsls	r7, r4, #29
   2433a:	08c0      	lsrs	r0, r0, #3
   2433c:	4307      	orrs	r7, r0
   2433e:	2080      	movs	r0, #128	; 0x80
   24340:	08e4      	lsrs	r4, r4, #3
   24342:	0300      	lsls	r0, r0, #12
   24344:	4204      	tst	r4, r0
   24346:	d007      	beq.n	24358 <__aeabi_dsub+0x558>
   24348:	08cd      	lsrs	r5, r1, #3
   2434a:	4205      	tst	r5, r0
   2434c:	d104      	bne.n	24358 <__aeabi_dsub+0x558>
   2434e:	002c      	movs	r4, r5
   24350:	4698      	mov	r8, r3
   24352:	08d7      	lsrs	r7, r2, #3
   24354:	0749      	lsls	r1, r1, #29
   24356:	430f      	orrs	r7, r1
   24358:	0f7b      	lsrs	r3, r7, #29
   2435a:	00e4      	lsls	r4, r4, #3
   2435c:	431c      	orrs	r4, r3
   2435e:	00ff      	lsls	r7, r7, #3
   24360:	4e30      	ldr	r6, [pc, #192]	; (24424 <__aeabi_dsub+0x624>)
   24362:	e5d3      	b.n	23f0c <__aeabi_dsub+0x10c>
   24364:	4e2f      	ldr	r6, [pc, #188]	; (24424 <__aeabi_dsub+0x624>)
   24366:	45b4      	cmp	ip, r6
   24368:	d1b4      	bne.n	242d4 <__aeabi_dsub+0x4d4>
   2436a:	000c      	movs	r4, r1
   2436c:	0017      	movs	r7, r2
   2436e:	4666      	mov	r6, ip
   24370:	e5cc      	b.n	23f0c <__aeabi_dsub+0x10c>
   24372:	2700      	movs	r7, #0
   24374:	2400      	movs	r4, #0
   24376:	e5e8      	b.n	23f4a <__aeabi_dsub+0x14a>
   24378:	2b00      	cmp	r3, #0
   2437a:	d039      	beq.n	243f0 <__aeabi_dsub+0x5f0>
   2437c:	000b      	movs	r3, r1
   2437e:	4313      	orrs	r3, r2
   24380:	d100      	bne.n	24384 <__aeabi_dsub+0x584>
   24382:	e744      	b.n	2420e <__aeabi_dsub+0x40e>
   24384:	08c0      	lsrs	r0, r0, #3
   24386:	0767      	lsls	r7, r4, #29
   24388:	4307      	orrs	r7, r0
   2438a:	2080      	movs	r0, #128	; 0x80
   2438c:	08e4      	lsrs	r4, r4, #3
   2438e:	0300      	lsls	r0, r0, #12
   24390:	4204      	tst	r4, r0
   24392:	d0e1      	beq.n	24358 <__aeabi_dsub+0x558>
   24394:	08cb      	lsrs	r3, r1, #3
   24396:	4203      	tst	r3, r0
   24398:	d1de      	bne.n	24358 <__aeabi_dsub+0x558>
   2439a:	08d7      	lsrs	r7, r2, #3
   2439c:	0749      	lsls	r1, r1, #29
   2439e:	430f      	orrs	r7, r1
   243a0:	001c      	movs	r4, r3
   243a2:	e7d9      	b.n	24358 <__aeabi_dsub+0x558>
   243a4:	2100      	movs	r1, #0
   243a6:	e771      	b.n	2428c <__aeabi_dsub+0x48c>
   243a8:	2500      	movs	r5, #0
   243aa:	2700      	movs	r7, #0
   243ac:	e5e9      	b.n	23f82 <__aeabi_dsub+0x182>
   243ae:	002e      	movs	r6, r5
   243b0:	0027      	movs	r7, r4
   243b2:	3e20      	subs	r6, #32
   243b4:	40f7      	lsrs	r7, r6
   243b6:	2d20      	cmp	r5, #32
   243b8:	d02f      	beq.n	2441a <__aeabi_dsub+0x61a>
   243ba:	2640      	movs	r6, #64	; 0x40
   243bc:	1b75      	subs	r5, r6, r5
   243be:	40ac      	lsls	r4, r5
   243c0:	4650      	mov	r0, sl
   243c2:	4320      	orrs	r0, r4
   243c4:	1e44      	subs	r4, r0, #1
   243c6:	41a0      	sbcs	r0, r4
   243c8:	2400      	movs	r4, #0
   243ca:	4338      	orrs	r0, r7
   243cc:	e6dc      	b.n	24188 <__aeabi_dsub+0x388>
   243ce:	2480      	movs	r4, #128	; 0x80
   243d0:	2500      	movs	r5, #0
   243d2:	0324      	lsls	r4, r4, #12
   243d4:	4e13      	ldr	r6, [pc, #76]	; (24424 <__aeabi_dsub+0x624>)
   243d6:	2700      	movs	r7, #0
   243d8:	e5d3      	b.n	23f82 <__aeabi_dsub+0x182>
   243da:	4650      	mov	r0, sl
   243dc:	4320      	orrs	r0, r4
   243de:	0007      	movs	r7, r0
   243e0:	1e78      	subs	r0, r7, #1
   243e2:	4187      	sbcs	r7, r0
   243e4:	2400      	movs	r4, #0
   243e6:	18bf      	adds	r7, r7, r2
   243e8:	e760      	b.n	242ac <__aeabi_dsub+0x4ac>
   243ea:	000c      	movs	r4, r1
   243ec:	0017      	movs	r7, r2
   243ee:	e58d      	b.n	23f0c <__aeabi_dsub+0x10c>
   243f0:	000c      	movs	r4, r1
   243f2:	0017      	movs	r7, r2
   243f4:	4e0b      	ldr	r6, [pc, #44]	; (24424 <__aeabi_dsub+0x624>)
   243f6:	e589      	b.n	23f0c <__aeabi_dsub+0x10c>
   243f8:	001e      	movs	r6, r3
   243fa:	0027      	movs	r7, r4
   243fc:	3e20      	subs	r6, #32
   243fe:	40f7      	lsrs	r7, r6
   24400:	2b20      	cmp	r3, #32
   24402:	d00c      	beq.n	2441e <__aeabi_dsub+0x61e>
   24404:	2640      	movs	r6, #64	; 0x40
   24406:	1af3      	subs	r3, r6, r3
   24408:	409c      	lsls	r4, r3
   2440a:	4650      	mov	r0, sl
   2440c:	4320      	orrs	r0, r4
   2440e:	1e44      	subs	r4, r0, #1
   24410:	41a0      	sbcs	r0, r4
   24412:	4307      	orrs	r7, r0
   24414:	2400      	movs	r4, #0
   24416:	18bf      	adds	r7, r7, r2
   24418:	e748      	b.n	242ac <__aeabi_dsub+0x4ac>
   2441a:	2400      	movs	r4, #0
   2441c:	e7d0      	b.n	243c0 <__aeabi_dsub+0x5c0>
   2441e:	2400      	movs	r4, #0
   24420:	e7f3      	b.n	2440a <__aeabi_dsub+0x60a>
   24422:	46c0      	nop			; (mov r8, r8)
   24424:	000007ff 	.word	0x000007ff
   24428:	ff7fffff 	.word	0xff7fffff

0002442c <__aeabi_d2iz>:
   2442c:	b530      	push	{r4, r5, lr}
   2442e:	4d13      	ldr	r5, [pc, #76]	; (2447c <__aeabi_d2iz+0x50>)
   24430:	030a      	lsls	r2, r1, #12
   24432:	004b      	lsls	r3, r1, #1
   24434:	0b12      	lsrs	r2, r2, #12
   24436:	0d5b      	lsrs	r3, r3, #21
   24438:	0fc9      	lsrs	r1, r1, #31
   2443a:	2400      	movs	r4, #0
   2443c:	42ab      	cmp	r3, r5
   2443e:	dd10      	ble.n	24462 <__aeabi_d2iz+0x36>
   24440:	4c0f      	ldr	r4, [pc, #60]	; (24480 <__aeabi_d2iz+0x54>)
   24442:	42a3      	cmp	r3, r4
   24444:	dc0f      	bgt.n	24466 <__aeabi_d2iz+0x3a>
   24446:	2480      	movs	r4, #128	; 0x80
   24448:	4d0e      	ldr	r5, [pc, #56]	; (24484 <__aeabi_d2iz+0x58>)
   2444a:	0364      	lsls	r4, r4, #13
   2444c:	4322      	orrs	r2, r4
   2444e:	1aed      	subs	r5, r5, r3
   24450:	2d1f      	cmp	r5, #31
   24452:	dd0b      	ble.n	2446c <__aeabi_d2iz+0x40>
   24454:	480c      	ldr	r0, [pc, #48]	; (24488 <__aeabi_d2iz+0x5c>)
   24456:	1ac3      	subs	r3, r0, r3
   24458:	40da      	lsrs	r2, r3
   2445a:	4254      	negs	r4, r2
   2445c:	2900      	cmp	r1, #0
   2445e:	d100      	bne.n	24462 <__aeabi_d2iz+0x36>
   24460:	0014      	movs	r4, r2
   24462:	0020      	movs	r0, r4
   24464:	bd30      	pop	{r4, r5, pc}
   24466:	4b09      	ldr	r3, [pc, #36]	; (2448c <__aeabi_d2iz+0x60>)
   24468:	18cc      	adds	r4, r1, r3
   2446a:	e7fa      	b.n	24462 <__aeabi_d2iz+0x36>
   2446c:	4c08      	ldr	r4, [pc, #32]	; (24490 <__aeabi_d2iz+0x64>)
   2446e:	40e8      	lsrs	r0, r5
   24470:	46a4      	mov	ip, r4
   24472:	4463      	add	r3, ip
   24474:	409a      	lsls	r2, r3
   24476:	4302      	orrs	r2, r0
   24478:	e7ef      	b.n	2445a <__aeabi_d2iz+0x2e>
   2447a:	46c0      	nop			; (mov r8, r8)
   2447c:	000003fe 	.word	0x000003fe
   24480:	0000041d 	.word	0x0000041d
   24484:	00000433 	.word	0x00000433
   24488:	00000413 	.word	0x00000413
   2448c:	7fffffff 	.word	0x7fffffff
   24490:	fffffbed 	.word	0xfffffbed

00024494 <__aeabi_ui2d>:
   24494:	b510      	push	{r4, lr}
   24496:	1e04      	subs	r4, r0, #0
   24498:	d028      	beq.n	244ec <__aeabi_ui2d+0x58>
   2449a:	f000 f86d 	bl	24578 <__clzsi2>
   2449e:	4b15      	ldr	r3, [pc, #84]	; (244f4 <__aeabi_ui2d+0x60>)
   244a0:	4a15      	ldr	r2, [pc, #84]	; (244f8 <__aeabi_ui2d+0x64>)
   244a2:	1a1b      	subs	r3, r3, r0
   244a4:	1ad2      	subs	r2, r2, r3
   244a6:	2a1f      	cmp	r2, #31
   244a8:	dd15      	ble.n	244d6 <__aeabi_ui2d+0x42>
   244aa:	4a14      	ldr	r2, [pc, #80]	; (244fc <__aeabi_ui2d+0x68>)
   244ac:	1ad2      	subs	r2, r2, r3
   244ae:	4094      	lsls	r4, r2
   244b0:	2200      	movs	r2, #0
   244b2:	0324      	lsls	r4, r4, #12
   244b4:	055b      	lsls	r3, r3, #21
   244b6:	0b24      	lsrs	r4, r4, #12
   244b8:	0d5b      	lsrs	r3, r3, #21
   244ba:	2100      	movs	r1, #0
   244bc:	0010      	movs	r0, r2
   244be:	0324      	lsls	r4, r4, #12
   244c0:	0d0a      	lsrs	r2, r1, #20
   244c2:	0b24      	lsrs	r4, r4, #12
   244c4:	0512      	lsls	r2, r2, #20
   244c6:	4322      	orrs	r2, r4
   244c8:	4c0d      	ldr	r4, [pc, #52]	; (24500 <__aeabi_ui2d+0x6c>)
   244ca:	051b      	lsls	r3, r3, #20
   244cc:	4022      	ands	r2, r4
   244ce:	4313      	orrs	r3, r2
   244d0:	005b      	lsls	r3, r3, #1
   244d2:	0859      	lsrs	r1, r3, #1
   244d4:	bd10      	pop	{r4, pc}
   244d6:	0021      	movs	r1, r4
   244d8:	4091      	lsls	r1, r2
   244da:	000a      	movs	r2, r1
   244dc:	210b      	movs	r1, #11
   244de:	1a08      	subs	r0, r1, r0
   244e0:	40c4      	lsrs	r4, r0
   244e2:	055b      	lsls	r3, r3, #21
   244e4:	0324      	lsls	r4, r4, #12
   244e6:	0b24      	lsrs	r4, r4, #12
   244e8:	0d5b      	lsrs	r3, r3, #21
   244ea:	e7e6      	b.n	244ba <__aeabi_ui2d+0x26>
   244ec:	2300      	movs	r3, #0
   244ee:	2400      	movs	r4, #0
   244f0:	2200      	movs	r2, #0
   244f2:	e7e2      	b.n	244ba <__aeabi_ui2d+0x26>
   244f4:	0000041e 	.word	0x0000041e
   244f8:	00000433 	.word	0x00000433
   244fc:	00000413 	.word	0x00000413
   24500:	800fffff 	.word	0x800fffff

00024504 <__aeabi_cfrcmple>:
   24504:	4684      	mov	ip, r0
   24506:	1c08      	adds	r0, r1, #0
   24508:	4661      	mov	r1, ip
   2450a:	e7ff      	b.n	2450c <__aeabi_cfcmpeq>

0002450c <__aeabi_cfcmpeq>:
   2450c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2450e:	f000 f8b7 	bl	24680 <__lesf2>
   24512:	2800      	cmp	r0, #0
   24514:	d401      	bmi.n	2451a <__aeabi_cfcmpeq+0xe>
   24516:	2100      	movs	r1, #0
   24518:	42c8      	cmn	r0, r1
   2451a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0002451c <__aeabi_fcmpeq>:
   2451c:	b510      	push	{r4, lr}
   2451e:	f000 f849 	bl	245b4 <__eqsf2>
   24522:	4240      	negs	r0, r0
   24524:	3001      	adds	r0, #1
   24526:	bd10      	pop	{r4, pc}

00024528 <__aeabi_fcmplt>:
   24528:	b510      	push	{r4, lr}
   2452a:	f000 f8a9 	bl	24680 <__lesf2>
   2452e:	2800      	cmp	r0, #0
   24530:	db01      	blt.n	24536 <__aeabi_fcmplt+0xe>
   24532:	2000      	movs	r0, #0
   24534:	bd10      	pop	{r4, pc}
   24536:	2001      	movs	r0, #1
   24538:	bd10      	pop	{r4, pc}
   2453a:	46c0      	nop			; (mov r8, r8)

0002453c <__aeabi_fcmple>:
   2453c:	b510      	push	{r4, lr}
   2453e:	f000 f89f 	bl	24680 <__lesf2>
   24542:	2800      	cmp	r0, #0
   24544:	dd01      	ble.n	2454a <__aeabi_fcmple+0xe>
   24546:	2000      	movs	r0, #0
   24548:	bd10      	pop	{r4, pc}
   2454a:	2001      	movs	r0, #1
   2454c:	bd10      	pop	{r4, pc}
   2454e:	46c0      	nop			; (mov r8, r8)

00024550 <__aeabi_fcmpgt>:
   24550:	b510      	push	{r4, lr}
   24552:	f000 f855 	bl	24600 <__gesf2>
   24556:	2800      	cmp	r0, #0
   24558:	dc01      	bgt.n	2455e <__aeabi_fcmpgt+0xe>
   2455a:	2000      	movs	r0, #0
   2455c:	bd10      	pop	{r4, pc}
   2455e:	2001      	movs	r0, #1
   24560:	bd10      	pop	{r4, pc}
   24562:	46c0      	nop			; (mov r8, r8)

00024564 <__aeabi_fcmpge>:
   24564:	b510      	push	{r4, lr}
   24566:	f000 f84b 	bl	24600 <__gesf2>
   2456a:	2800      	cmp	r0, #0
   2456c:	da01      	bge.n	24572 <__aeabi_fcmpge+0xe>
   2456e:	2000      	movs	r0, #0
   24570:	bd10      	pop	{r4, pc}
   24572:	2001      	movs	r0, #1
   24574:	bd10      	pop	{r4, pc}
   24576:	46c0      	nop			; (mov r8, r8)

00024578 <__clzsi2>:
   24578:	211c      	movs	r1, #28
   2457a:	2301      	movs	r3, #1
   2457c:	041b      	lsls	r3, r3, #16
   2457e:	4298      	cmp	r0, r3
   24580:	d301      	bcc.n	24586 <__clzsi2+0xe>
   24582:	0c00      	lsrs	r0, r0, #16
   24584:	3910      	subs	r1, #16
   24586:	0a1b      	lsrs	r3, r3, #8
   24588:	4298      	cmp	r0, r3
   2458a:	d301      	bcc.n	24590 <__clzsi2+0x18>
   2458c:	0a00      	lsrs	r0, r0, #8
   2458e:	3908      	subs	r1, #8
   24590:	091b      	lsrs	r3, r3, #4
   24592:	4298      	cmp	r0, r3
   24594:	d301      	bcc.n	2459a <__clzsi2+0x22>
   24596:	0900      	lsrs	r0, r0, #4
   24598:	3904      	subs	r1, #4
   2459a:	a202      	add	r2, pc, #8	; (adr r2, 245a4 <__clzsi2+0x2c>)
   2459c:	5c10      	ldrb	r0, [r2, r0]
   2459e:	1840      	adds	r0, r0, r1
   245a0:	4770      	bx	lr
   245a2:	46c0      	nop			; (mov r8, r8)
   245a4:	02020304 	.word	0x02020304
   245a8:	01010101 	.word	0x01010101
	...

000245b4 <__eqsf2>:
   245b4:	b570      	push	{r4, r5, r6, lr}
   245b6:	0042      	lsls	r2, r0, #1
   245b8:	0245      	lsls	r5, r0, #9
   245ba:	024e      	lsls	r6, r1, #9
   245bc:	004c      	lsls	r4, r1, #1
   245be:	0fc3      	lsrs	r3, r0, #31
   245c0:	0a6d      	lsrs	r5, r5, #9
   245c2:	0e12      	lsrs	r2, r2, #24
   245c4:	0a76      	lsrs	r6, r6, #9
   245c6:	0e24      	lsrs	r4, r4, #24
   245c8:	0fc9      	lsrs	r1, r1, #31
   245ca:	2001      	movs	r0, #1
   245cc:	2aff      	cmp	r2, #255	; 0xff
   245ce:	d006      	beq.n	245de <__eqsf2+0x2a>
   245d0:	2cff      	cmp	r4, #255	; 0xff
   245d2:	d003      	beq.n	245dc <__eqsf2+0x28>
   245d4:	42a2      	cmp	r2, r4
   245d6:	d101      	bne.n	245dc <__eqsf2+0x28>
   245d8:	42b5      	cmp	r5, r6
   245da:	d006      	beq.n	245ea <__eqsf2+0x36>
   245dc:	bd70      	pop	{r4, r5, r6, pc}
   245de:	2d00      	cmp	r5, #0
   245e0:	d1fc      	bne.n	245dc <__eqsf2+0x28>
   245e2:	2cff      	cmp	r4, #255	; 0xff
   245e4:	d1fa      	bne.n	245dc <__eqsf2+0x28>
   245e6:	2e00      	cmp	r6, #0
   245e8:	d1f8      	bne.n	245dc <__eqsf2+0x28>
   245ea:	428b      	cmp	r3, r1
   245ec:	d006      	beq.n	245fc <__eqsf2+0x48>
   245ee:	2001      	movs	r0, #1
   245f0:	2a00      	cmp	r2, #0
   245f2:	d1f3      	bne.n	245dc <__eqsf2+0x28>
   245f4:	0028      	movs	r0, r5
   245f6:	1e45      	subs	r5, r0, #1
   245f8:	41a8      	sbcs	r0, r5
   245fa:	e7ef      	b.n	245dc <__eqsf2+0x28>
   245fc:	2000      	movs	r0, #0
   245fe:	e7ed      	b.n	245dc <__eqsf2+0x28>

00024600 <__gesf2>:
   24600:	b5f0      	push	{r4, r5, r6, r7, lr}
   24602:	0042      	lsls	r2, r0, #1
   24604:	0245      	lsls	r5, r0, #9
   24606:	024c      	lsls	r4, r1, #9
   24608:	0fc3      	lsrs	r3, r0, #31
   2460a:	0048      	lsls	r0, r1, #1
   2460c:	0a6d      	lsrs	r5, r5, #9
   2460e:	0e12      	lsrs	r2, r2, #24
   24610:	0a64      	lsrs	r4, r4, #9
   24612:	0e00      	lsrs	r0, r0, #24
   24614:	0fc9      	lsrs	r1, r1, #31
   24616:	2aff      	cmp	r2, #255	; 0xff
   24618:	d01e      	beq.n	24658 <__gesf2+0x58>
   2461a:	28ff      	cmp	r0, #255	; 0xff
   2461c:	d021      	beq.n	24662 <__gesf2+0x62>
   2461e:	2a00      	cmp	r2, #0
   24620:	d10a      	bne.n	24638 <__gesf2+0x38>
   24622:	426e      	negs	r6, r5
   24624:	416e      	adcs	r6, r5
   24626:	b2f6      	uxtb	r6, r6
   24628:	2800      	cmp	r0, #0
   2462a:	d10f      	bne.n	2464c <__gesf2+0x4c>
   2462c:	2c00      	cmp	r4, #0
   2462e:	d10d      	bne.n	2464c <__gesf2+0x4c>
   24630:	2000      	movs	r0, #0
   24632:	2d00      	cmp	r5, #0
   24634:	d009      	beq.n	2464a <__gesf2+0x4a>
   24636:	e005      	b.n	24644 <__gesf2+0x44>
   24638:	2800      	cmp	r0, #0
   2463a:	d101      	bne.n	24640 <__gesf2+0x40>
   2463c:	2c00      	cmp	r4, #0
   2463e:	d001      	beq.n	24644 <__gesf2+0x44>
   24640:	428b      	cmp	r3, r1
   24642:	d011      	beq.n	24668 <__gesf2+0x68>
   24644:	2101      	movs	r1, #1
   24646:	4258      	negs	r0, r3
   24648:	4308      	orrs	r0, r1
   2464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2464c:	2e00      	cmp	r6, #0
   2464e:	d0f7      	beq.n	24640 <__gesf2+0x40>
   24650:	2001      	movs	r0, #1
   24652:	3901      	subs	r1, #1
   24654:	4308      	orrs	r0, r1
   24656:	e7f8      	b.n	2464a <__gesf2+0x4a>
   24658:	2d00      	cmp	r5, #0
   2465a:	d0de      	beq.n	2461a <__gesf2+0x1a>
   2465c:	2002      	movs	r0, #2
   2465e:	4240      	negs	r0, r0
   24660:	e7f3      	b.n	2464a <__gesf2+0x4a>
   24662:	2c00      	cmp	r4, #0
   24664:	d0db      	beq.n	2461e <__gesf2+0x1e>
   24666:	e7f9      	b.n	2465c <__gesf2+0x5c>
   24668:	4282      	cmp	r2, r0
   2466a:	dceb      	bgt.n	24644 <__gesf2+0x44>
   2466c:	db04      	blt.n	24678 <__gesf2+0x78>
   2466e:	42a5      	cmp	r5, r4
   24670:	d8e8      	bhi.n	24644 <__gesf2+0x44>
   24672:	2000      	movs	r0, #0
   24674:	42a5      	cmp	r5, r4
   24676:	d2e8      	bcs.n	2464a <__gesf2+0x4a>
   24678:	2101      	movs	r1, #1
   2467a:	1e58      	subs	r0, r3, #1
   2467c:	4308      	orrs	r0, r1
   2467e:	e7e4      	b.n	2464a <__gesf2+0x4a>

00024680 <__lesf2>:
   24680:	b5f0      	push	{r4, r5, r6, r7, lr}
   24682:	0042      	lsls	r2, r0, #1
   24684:	024d      	lsls	r5, r1, #9
   24686:	004c      	lsls	r4, r1, #1
   24688:	0246      	lsls	r6, r0, #9
   2468a:	0a76      	lsrs	r6, r6, #9
   2468c:	0e12      	lsrs	r2, r2, #24
   2468e:	0fc3      	lsrs	r3, r0, #31
   24690:	0a6d      	lsrs	r5, r5, #9
   24692:	0e24      	lsrs	r4, r4, #24
   24694:	0fc9      	lsrs	r1, r1, #31
   24696:	2aff      	cmp	r2, #255	; 0xff
   24698:	d016      	beq.n	246c8 <__lesf2+0x48>
   2469a:	2cff      	cmp	r4, #255	; 0xff
   2469c:	d018      	beq.n	246d0 <__lesf2+0x50>
   2469e:	2a00      	cmp	r2, #0
   246a0:	d10a      	bne.n	246b8 <__lesf2+0x38>
   246a2:	4270      	negs	r0, r6
   246a4:	4170      	adcs	r0, r6
   246a6:	b2c0      	uxtb	r0, r0
   246a8:	2c00      	cmp	r4, #0
   246aa:	d015      	beq.n	246d8 <__lesf2+0x58>
   246ac:	2800      	cmp	r0, #0
   246ae:	d005      	beq.n	246bc <__lesf2+0x3c>
   246b0:	2001      	movs	r0, #1
   246b2:	3901      	subs	r1, #1
   246b4:	4308      	orrs	r0, r1
   246b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   246b8:	2c00      	cmp	r4, #0
   246ba:	d013      	beq.n	246e4 <__lesf2+0x64>
   246bc:	4299      	cmp	r1, r3
   246be:	d014      	beq.n	246ea <__lesf2+0x6a>
   246c0:	2001      	movs	r0, #1
   246c2:	425b      	negs	r3, r3
   246c4:	4318      	orrs	r0, r3
   246c6:	e7f6      	b.n	246b6 <__lesf2+0x36>
   246c8:	2002      	movs	r0, #2
   246ca:	2e00      	cmp	r6, #0
   246cc:	d1f3      	bne.n	246b6 <__lesf2+0x36>
   246ce:	e7e4      	b.n	2469a <__lesf2+0x1a>
   246d0:	2002      	movs	r0, #2
   246d2:	2d00      	cmp	r5, #0
   246d4:	d1ef      	bne.n	246b6 <__lesf2+0x36>
   246d6:	e7e2      	b.n	2469e <__lesf2+0x1e>
   246d8:	2d00      	cmp	r5, #0
   246da:	d1e7      	bne.n	246ac <__lesf2+0x2c>
   246dc:	2000      	movs	r0, #0
   246de:	2e00      	cmp	r6, #0
   246e0:	d0e9      	beq.n	246b6 <__lesf2+0x36>
   246e2:	e7ed      	b.n	246c0 <__lesf2+0x40>
   246e4:	2d00      	cmp	r5, #0
   246e6:	d1e9      	bne.n	246bc <__lesf2+0x3c>
   246e8:	e7ea      	b.n	246c0 <__lesf2+0x40>
   246ea:	42a2      	cmp	r2, r4
   246ec:	dc06      	bgt.n	246fc <__lesf2+0x7c>
   246ee:	dbdf      	blt.n	246b0 <__lesf2+0x30>
   246f0:	42ae      	cmp	r6, r5
   246f2:	d803      	bhi.n	246fc <__lesf2+0x7c>
   246f4:	2000      	movs	r0, #0
   246f6:	42ae      	cmp	r6, r5
   246f8:	d3da      	bcc.n	246b0 <__lesf2+0x30>
   246fa:	e7dc      	b.n	246b6 <__lesf2+0x36>
   246fc:	2001      	movs	r0, #1
   246fe:	4249      	negs	r1, r1
   24700:	4308      	orrs	r0, r1
   24702:	e7d8      	b.n	246b6 <__lesf2+0x36>

00024704 <atoi>:
   24704:	b510      	push	{r4, lr}
   24706:	220a      	movs	r2, #10
   24708:	2100      	movs	r1, #0
   2470a:	f000 fb0d 	bl	24d28 <strtol>
   2470e:	bd10      	pop	{r4, pc}

00024710 <__libc_init_array>:
   24710:	b570      	push	{r4, r5, r6, lr}
   24712:	2600      	movs	r6, #0
   24714:	4d0c      	ldr	r5, [pc, #48]	; (24748 <__libc_init_array+0x38>)
   24716:	4c0d      	ldr	r4, [pc, #52]	; (2474c <__libc_init_array+0x3c>)
   24718:	1b64      	subs	r4, r4, r5
   2471a:	10a4      	asrs	r4, r4, #2
   2471c:	42a6      	cmp	r6, r4
   2471e:	d109      	bne.n	24734 <__libc_init_array+0x24>
   24720:	2600      	movs	r6, #0
   24722:	f005 fd8f 	bl	2a244 <_init>
   24726:	4d0a      	ldr	r5, [pc, #40]	; (24750 <__libc_init_array+0x40>)
   24728:	4c0a      	ldr	r4, [pc, #40]	; (24754 <__libc_init_array+0x44>)
   2472a:	1b64      	subs	r4, r4, r5
   2472c:	10a4      	asrs	r4, r4, #2
   2472e:	42a6      	cmp	r6, r4
   24730:	d105      	bne.n	2473e <__libc_init_array+0x2e>
   24732:	bd70      	pop	{r4, r5, r6, pc}
   24734:	00b3      	lsls	r3, r6, #2
   24736:	58eb      	ldr	r3, [r5, r3]
   24738:	4798      	blx	r3
   2473a:	3601      	adds	r6, #1
   2473c:	e7ee      	b.n	2471c <__libc_init_array+0xc>
   2473e:	00b3      	lsls	r3, r6, #2
   24740:	58eb      	ldr	r3, [r5, r3]
   24742:	4798      	blx	r3
   24744:	3601      	adds	r6, #1
   24746:	e7f2      	b.n	2472e <__libc_init_array+0x1e>
   24748:	0002a250 	.word	0x0002a250
   2474c:	0002a250 	.word	0x0002a250
   24750:	0002a250 	.word	0x0002a250
   24754:	0002a254 	.word	0x0002a254

00024758 <malloc>:
   24758:	b510      	push	{r4, lr}
   2475a:	4b03      	ldr	r3, [pc, #12]	; (24768 <malloc+0x10>)
   2475c:	0001      	movs	r1, r0
   2475e:	6818      	ldr	r0, [r3, #0]
   24760:	f000 f87c 	bl	2485c <_malloc_r>
   24764:	bd10      	pop	{r4, pc}
   24766:	46c0      	nop			; (mov r8, r8)
   24768:	20000124 	.word	0x20000124

0002476c <free>:
   2476c:	b510      	push	{r4, lr}
   2476e:	4b03      	ldr	r3, [pc, #12]	; (2477c <free+0x10>)
   24770:	0001      	movs	r1, r0
   24772:	6818      	ldr	r0, [r3, #0]
   24774:	f000 f828 	bl	247c8 <_free_r>
   24778:	bd10      	pop	{r4, pc}
   2477a:	46c0      	nop			; (mov r8, r8)
   2477c:	20000124 	.word	0x20000124

00024780 <memcpy>:
   24780:	2300      	movs	r3, #0
   24782:	b510      	push	{r4, lr}
   24784:	429a      	cmp	r2, r3
   24786:	d100      	bne.n	2478a <memcpy+0xa>
   24788:	bd10      	pop	{r4, pc}
   2478a:	5ccc      	ldrb	r4, [r1, r3]
   2478c:	54c4      	strb	r4, [r0, r3]
   2478e:	3301      	adds	r3, #1
   24790:	e7f8      	b.n	24784 <memcpy+0x4>

00024792 <memmove>:
   24792:	b510      	push	{r4, lr}
   24794:	4288      	cmp	r0, r1
   24796:	d902      	bls.n	2479e <memmove+0xc>
   24798:	188b      	adds	r3, r1, r2
   2479a:	4298      	cmp	r0, r3
   2479c:	d308      	bcc.n	247b0 <memmove+0x1e>
   2479e:	2300      	movs	r3, #0
   247a0:	429a      	cmp	r2, r3
   247a2:	d007      	beq.n	247b4 <memmove+0x22>
   247a4:	5ccc      	ldrb	r4, [r1, r3]
   247a6:	54c4      	strb	r4, [r0, r3]
   247a8:	3301      	adds	r3, #1
   247aa:	e7f9      	b.n	247a0 <memmove+0xe>
   247ac:	5c8b      	ldrb	r3, [r1, r2]
   247ae:	5483      	strb	r3, [r0, r2]
   247b0:	3a01      	subs	r2, #1
   247b2:	d2fb      	bcs.n	247ac <memmove+0x1a>
   247b4:	bd10      	pop	{r4, pc}

000247b6 <memset>:
   247b6:	0003      	movs	r3, r0
   247b8:	1882      	adds	r2, r0, r2
   247ba:	4293      	cmp	r3, r2
   247bc:	d100      	bne.n	247c0 <memset+0xa>
   247be:	4770      	bx	lr
   247c0:	7019      	strb	r1, [r3, #0]
   247c2:	3301      	adds	r3, #1
   247c4:	e7f9      	b.n	247ba <memset+0x4>
	...

000247c8 <_free_r>:
   247c8:	b570      	push	{r4, r5, r6, lr}
   247ca:	0005      	movs	r5, r0
   247cc:	2900      	cmp	r1, #0
   247ce:	d010      	beq.n	247f2 <_free_r+0x2a>
   247d0:	1f0c      	subs	r4, r1, #4
   247d2:	6823      	ldr	r3, [r4, #0]
   247d4:	2b00      	cmp	r3, #0
   247d6:	da00      	bge.n	247da <_free_r+0x12>
   247d8:	18e4      	adds	r4, r4, r3
   247da:	0028      	movs	r0, r5
   247dc:	f000 fdd8 	bl	25390 <__malloc_lock>
   247e0:	4a1d      	ldr	r2, [pc, #116]	; (24858 <_free_r+0x90>)
   247e2:	6813      	ldr	r3, [r2, #0]
   247e4:	2b00      	cmp	r3, #0
   247e6:	d105      	bne.n	247f4 <_free_r+0x2c>
   247e8:	6063      	str	r3, [r4, #4]
   247ea:	6014      	str	r4, [r2, #0]
   247ec:	0028      	movs	r0, r5
   247ee:	f000 fdd0 	bl	25392 <__malloc_unlock>
   247f2:	bd70      	pop	{r4, r5, r6, pc}
   247f4:	42a3      	cmp	r3, r4
   247f6:	d909      	bls.n	2480c <_free_r+0x44>
   247f8:	6821      	ldr	r1, [r4, #0]
   247fa:	1860      	adds	r0, r4, r1
   247fc:	4283      	cmp	r3, r0
   247fe:	d1f3      	bne.n	247e8 <_free_r+0x20>
   24800:	6818      	ldr	r0, [r3, #0]
   24802:	685b      	ldr	r3, [r3, #4]
   24804:	1841      	adds	r1, r0, r1
   24806:	6021      	str	r1, [r4, #0]
   24808:	e7ee      	b.n	247e8 <_free_r+0x20>
   2480a:	0013      	movs	r3, r2
   2480c:	685a      	ldr	r2, [r3, #4]
   2480e:	2a00      	cmp	r2, #0
   24810:	d001      	beq.n	24816 <_free_r+0x4e>
   24812:	42a2      	cmp	r2, r4
   24814:	d9f9      	bls.n	2480a <_free_r+0x42>
   24816:	6819      	ldr	r1, [r3, #0]
   24818:	1858      	adds	r0, r3, r1
   2481a:	42a0      	cmp	r0, r4
   2481c:	d10b      	bne.n	24836 <_free_r+0x6e>
   2481e:	6820      	ldr	r0, [r4, #0]
   24820:	1809      	adds	r1, r1, r0
   24822:	1858      	adds	r0, r3, r1
   24824:	6019      	str	r1, [r3, #0]
   24826:	4282      	cmp	r2, r0
   24828:	d1e0      	bne.n	247ec <_free_r+0x24>
   2482a:	6810      	ldr	r0, [r2, #0]
   2482c:	6852      	ldr	r2, [r2, #4]
   2482e:	1841      	adds	r1, r0, r1
   24830:	6019      	str	r1, [r3, #0]
   24832:	605a      	str	r2, [r3, #4]
   24834:	e7da      	b.n	247ec <_free_r+0x24>
   24836:	42a0      	cmp	r0, r4
   24838:	d902      	bls.n	24840 <_free_r+0x78>
   2483a:	230c      	movs	r3, #12
   2483c:	602b      	str	r3, [r5, #0]
   2483e:	e7d5      	b.n	247ec <_free_r+0x24>
   24840:	6821      	ldr	r1, [r4, #0]
   24842:	1860      	adds	r0, r4, r1
   24844:	4282      	cmp	r2, r0
   24846:	d103      	bne.n	24850 <_free_r+0x88>
   24848:	6810      	ldr	r0, [r2, #0]
   2484a:	6852      	ldr	r2, [r2, #4]
   2484c:	1841      	adds	r1, r0, r1
   2484e:	6021      	str	r1, [r4, #0]
   24850:	6062      	str	r2, [r4, #4]
   24852:	605c      	str	r4, [r3, #4]
   24854:	e7ca      	b.n	247ec <_free_r+0x24>
   24856:	46c0      	nop			; (mov r8, r8)
   24858:	20004360 	.word	0x20004360

0002485c <_malloc_r>:
   2485c:	2303      	movs	r3, #3
   2485e:	b570      	push	{r4, r5, r6, lr}
   24860:	1ccd      	adds	r5, r1, #3
   24862:	439d      	bics	r5, r3
   24864:	3508      	adds	r5, #8
   24866:	0006      	movs	r6, r0
   24868:	2d0c      	cmp	r5, #12
   2486a:	d21e      	bcs.n	248aa <_malloc_r+0x4e>
   2486c:	250c      	movs	r5, #12
   2486e:	42a9      	cmp	r1, r5
   24870:	d81d      	bhi.n	248ae <_malloc_r+0x52>
   24872:	0030      	movs	r0, r6
   24874:	f000 fd8c 	bl	25390 <__malloc_lock>
   24878:	4a25      	ldr	r2, [pc, #148]	; (24910 <_malloc_r+0xb4>)
   2487a:	6814      	ldr	r4, [r2, #0]
   2487c:	0021      	movs	r1, r4
   2487e:	2900      	cmp	r1, #0
   24880:	d119      	bne.n	248b6 <_malloc_r+0x5a>
   24882:	4c24      	ldr	r4, [pc, #144]	; (24914 <_malloc_r+0xb8>)
   24884:	6823      	ldr	r3, [r4, #0]
   24886:	2b00      	cmp	r3, #0
   24888:	d103      	bne.n	24892 <_malloc_r+0x36>
   2488a:	0030      	movs	r0, r6
   2488c:	f000 f8ae 	bl	249ec <_sbrk_r>
   24890:	6020      	str	r0, [r4, #0]
   24892:	0029      	movs	r1, r5
   24894:	0030      	movs	r0, r6
   24896:	f000 f8a9 	bl	249ec <_sbrk_r>
   2489a:	1c43      	adds	r3, r0, #1
   2489c:	d12c      	bne.n	248f8 <_malloc_r+0x9c>
   2489e:	230c      	movs	r3, #12
   248a0:	0030      	movs	r0, r6
   248a2:	6033      	str	r3, [r6, #0]
   248a4:	f000 fd75 	bl	25392 <__malloc_unlock>
   248a8:	e003      	b.n	248b2 <_malloc_r+0x56>
   248aa:	2d00      	cmp	r5, #0
   248ac:	dadf      	bge.n	2486e <_malloc_r+0x12>
   248ae:	230c      	movs	r3, #12
   248b0:	6033      	str	r3, [r6, #0]
   248b2:	2000      	movs	r0, #0
   248b4:	bd70      	pop	{r4, r5, r6, pc}
   248b6:	680b      	ldr	r3, [r1, #0]
   248b8:	1b5b      	subs	r3, r3, r5
   248ba:	d41a      	bmi.n	248f2 <_malloc_r+0x96>
   248bc:	2b0b      	cmp	r3, #11
   248be:	d903      	bls.n	248c8 <_malloc_r+0x6c>
   248c0:	600b      	str	r3, [r1, #0]
   248c2:	18cc      	adds	r4, r1, r3
   248c4:	6025      	str	r5, [r4, #0]
   248c6:	e003      	b.n	248d0 <_malloc_r+0x74>
   248c8:	428c      	cmp	r4, r1
   248ca:	d10e      	bne.n	248ea <_malloc_r+0x8e>
   248cc:	6863      	ldr	r3, [r4, #4]
   248ce:	6013      	str	r3, [r2, #0]
   248d0:	0030      	movs	r0, r6
   248d2:	f000 fd5e 	bl	25392 <__malloc_unlock>
   248d6:	0020      	movs	r0, r4
   248d8:	2207      	movs	r2, #7
   248da:	300b      	adds	r0, #11
   248dc:	1d23      	adds	r3, r4, #4
   248de:	4390      	bics	r0, r2
   248e0:	1ac3      	subs	r3, r0, r3
   248e2:	d0e7      	beq.n	248b4 <_malloc_r+0x58>
   248e4:	425a      	negs	r2, r3
   248e6:	50e2      	str	r2, [r4, r3]
   248e8:	e7e4      	b.n	248b4 <_malloc_r+0x58>
   248ea:	684b      	ldr	r3, [r1, #4]
   248ec:	6063      	str	r3, [r4, #4]
   248ee:	000c      	movs	r4, r1
   248f0:	e7ee      	b.n	248d0 <_malloc_r+0x74>
   248f2:	000c      	movs	r4, r1
   248f4:	6849      	ldr	r1, [r1, #4]
   248f6:	e7c2      	b.n	2487e <_malloc_r+0x22>
   248f8:	2303      	movs	r3, #3
   248fa:	1cc4      	adds	r4, r0, #3
   248fc:	439c      	bics	r4, r3
   248fe:	42a0      	cmp	r0, r4
   24900:	d0e0      	beq.n	248c4 <_malloc_r+0x68>
   24902:	1a21      	subs	r1, r4, r0
   24904:	0030      	movs	r0, r6
   24906:	f000 f871 	bl	249ec <_sbrk_r>
   2490a:	1c43      	adds	r3, r0, #1
   2490c:	d1da      	bne.n	248c4 <_malloc_r+0x68>
   2490e:	e7c6      	b.n	2489e <_malloc_r+0x42>
   24910:	20004360 	.word	0x20004360
   24914:	20004364 	.word	0x20004364

00024918 <_puts_r>:
   24918:	b570      	push	{r4, r5, r6, lr}
   2491a:	0005      	movs	r5, r0
   2491c:	000e      	movs	r6, r1
   2491e:	2800      	cmp	r0, #0
   24920:	d004      	beq.n	2492c <_puts_r+0x14>
   24922:	6983      	ldr	r3, [r0, #24]
   24924:	2b00      	cmp	r3, #0
   24926:	d101      	bne.n	2492c <_puts_r+0x14>
   24928:	f000 fc0e 	bl	25148 <__sinit>
   2492c:	69ab      	ldr	r3, [r5, #24]
   2492e:	68ac      	ldr	r4, [r5, #8]
   24930:	2b00      	cmp	r3, #0
   24932:	d102      	bne.n	2493a <_puts_r+0x22>
   24934:	0028      	movs	r0, r5
   24936:	f000 fc07 	bl	25148 <__sinit>
   2493a:	4b24      	ldr	r3, [pc, #144]	; (249cc <_puts_r+0xb4>)
   2493c:	429c      	cmp	r4, r3
   2493e:	d10f      	bne.n	24960 <_puts_r+0x48>
   24940:	686c      	ldr	r4, [r5, #4]
   24942:	89a3      	ldrh	r3, [r4, #12]
   24944:	071b      	lsls	r3, r3, #28
   24946:	d502      	bpl.n	2494e <_puts_r+0x36>
   24948:	6923      	ldr	r3, [r4, #16]
   2494a:	2b00      	cmp	r3, #0
   2494c:	d120      	bne.n	24990 <_puts_r+0x78>
   2494e:	0021      	movs	r1, r4
   24950:	0028      	movs	r0, r5
   24952:	f000 fa8b 	bl	24e6c <__swsetup_r>
   24956:	2800      	cmp	r0, #0
   24958:	d01a      	beq.n	24990 <_puts_r+0x78>
   2495a:	2001      	movs	r0, #1
   2495c:	4240      	negs	r0, r0
   2495e:	bd70      	pop	{r4, r5, r6, pc}
   24960:	4b1b      	ldr	r3, [pc, #108]	; (249d0 <_puts_r+0xb8>)
   24962:	429c      	cmp	r4, r3
   24964:	d101      	bne.n	2496a <_puts_r+0x52>
   24966:	68ac      	ldr	r4, [r5, #8]
   24968:	e7eb      	b.n	24942 <_puts_r+0x2a>
   2496a:	4b1a      	ldr	r3, [pc, #104]	; (249d4 <_puts_r+0xbc>)
   2496c:	429c      	cmp	r4, r3
   2496e:	d1e8      	bne.n	24942 <_puts_r+0x2a>
   24970:	68ec      	ldr	r4, [r5, #12]
   24972:	e7e6      	b.n	24942 <_puts_r+0x2a>
   24974:	3b01      	subs	r3, #1
   24976:	3601      	adds	r6, #1
   24978:	60a3      	str	r3, [r4, #8]
   2497a:	2b00      	cmp	r3, #0
   2497c:	da04      	bge.n	24988 <_puts_r+0x70>
   2497e:	69a2      	ldr	r2, [r4, #24]
   24980:	4293      	cmp	r3, r2
   24982:	db16      	blt.n	249b2 <_puts_r+0x9a>
   24984:	290a      	cmp	r1, #10
   24986:	d014      	beq.n	249b2 <_puts_r+0x9a>
   24988:	6823      	ldr	r3, [r4, #0]
   2498a:	1c5a      	adds	r2, r3, #1
   2498c:	6022      	str	r2, [r4, #0]
   2498e:	7019      	strb	r1, [r3, #0]
   24990:	7831      	ldrb	r1, [r6, #0]
   24992:	68a3      	ldr	r3, [r4, #8]
   24994:	2900      	cmp	r1, #0
   24996:	d1ed      	bne.n	24974 <_puts_r+0x5c>
   24998:	3b01      	subs	r3, #1
   2499a:	60a3      	str	r3, [r4, #8]
   2499c:	2b00      	cmp	r3, #0
   2499e:	da0f      	bge.n	249c0 <_puts_r+0xa8>
   249a0:	0022      	movs	r2, r4
   249a2:	310a      	adds	r1, #10
   249a4:	0028      	movs	r0, r5
   249a6:	f000 fa0b 	bl	24dc0 <__swbuf_r>
   249aa:	1c43      	adds	r3, r0, #1
   249ac:	d0d5      	beq.n	2495a <_puts_r+0x42>
   249ae:	200a      	movs	r0, #10
   249b0:	e7d5      	b.n	2495e <_puts_r+0x46>
   249b2:	0022      	movs	r2, r4
   249b4:	0028      	movs	r0, r5
   249b6:	f000 fa03 	bl	24dc0 <__swbuf_r>
   249ba:	1c43      	adds	r3, r0, #1
   249bc:	d1e8      	bne.n	24990 <_puts_r+0x78>
   249be:	e7cc      	b.n	2495a <_puts_r+0x42>
   249c0:	200a      	movs	r0, #10
   249c2:	6823      	ldr	r3, [r4, #0]
   249c4:	1c5a      	adds	r2, r3, #1
   249c6:	6022      	str	r2, [r4, #0]
   249c8:	7018      	strb	r0, [r3, #0]
   249ca:	e7c8      	b.n	2495e <_puts_r+0x46>
   249cc:	0002a0c4 	.word	0x0002a0c4
   249d0:	0002a0e4 	.word	0x0002a0e4
   249d4:	0002a0a4 	.word	0x0002a0a4

000249d8 <puts>:
   249d8:	b510      	push	{r4, lr}
   249da:	4b03      	ldr	r3, [pc, #12]	; (249e8 <puts+0x10>)
   249dc:	0001      	movs	r1, r0
   249de:	6818      	ldr	r0, [r3, #0]
   249e0:	f7ff ff9a 	bl	24918 <_puts_r>
   249e4:	bd10      	pop	{r4, pc}
   249e6:	46c0      	nop			; (mov r8, r8)
   249e8:	20000124 	.word	0x20000124

000249ec <_sbrk_r>:
   249ec:	2300      	movs	r3, #0
   249ee:	b570      	push	{r4, r5, r6, lr}
   249f0:	4c06      	ldr	r4, [pc, #24]	; (24a0c <_sbrk_r+0x20>)
   249f2:	0005      	movs	r5, r0
   249f4:	0008      	movs	r0, r1
   249f6:	6023      	str	r3, [r4, #0]
   249f8:	f7f5 fd18 	bl	1a42c <_sbrk>
   249fc:	1c43      	adds	r3, r0, #1
   249fe:	d103      	bne.n	24a08 <_sbrk_r+0x1c>
   24a00:	6823      	ldr	r3, [r4, #0]
   24a02:	2b00      	cmp	r3, #0
   24a04:	d000      	beq.n	24a08 <_sbrk_r+0x1c>
   24a06:	602b      	str	r3, [r5, #0]
   24a08:	bd70      	pop	{r4, r5, r6, pc}
   24a0a:	46c0      	nop			; (mov r8, r8)
   24a0c:	20005910 	.word	0x20005910

00024a10 <sniprintf>:
   24a10:	b40c      	push	{r2, r3}
   24a12:	b530      	push	{r4, r5, lr}
   24a14:	4b16      	ldr	r3, [pc, #88]	; (24a70 <sniprintf+0x60>)
   24a16:	b09d      	sub	sp, #116	; 0x74
   24a18:	1e0c      	subs	r4, r1, #0
   24a1a:	681d      	ldr	r5, [r3, #0]
   24a1c:	da08      	bge.n	24a30 <sniprintf+0x20>
   24a1e:	238b      	movs	r3, #139	; 0x8b
   24a20:	2001      	movs	r0, #1
   24a22:	602b      	str	r3, [r5, #0]
   24a24:	4240      	negs	r0, r0
   24a26:	b01d      	add	sp, #116	; 0x74
   24a28:	bc30      	pop	{r4, r5}
   24a2a:	bc08      	pop	{r3}
   24a2c:	b002      	add	sp, #8
   24a2e:	4718      	bx	r3
   24a30:	2382      	movs	r3, #130	; 0x82
   24a32:	a902      	add	r1, sp, #8
   24a34:	009b      	lsls	r3, r3, #2
   24a36:	818b      	strh	r3, [r1, #12]
   24a38:	2300      	movs	r3, #0
   24a3a:	9002      	str	r0, [sp, #8]
   24a3c:	6108      	str	r0, [r1, #16]
   24a3e:	429c      	cmp	r4, r3
   24a40:	d000      	beq.n	24a44 <sniprintf+0x34>
   24a42:	1e63      	subs	r3, r4, #1
   24a44:	608b      	str	r3, [r1, #8]
   24a46:	614b      	str	r3, [r1, #20]
   24a48:	2301      	movs	r3, #1
   24a4a:	425b      	negs	r3, r3
   24a4c:	81cb      	strh	r3, [r1, #14]
   24a4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   24a50:	ab21      	add	r3, sp, #132	; 0x84
   24a52:	0028      	movs	r0, r5
   24a54:	9301      	str	r3, [sp, #4]
   24a56:	f000 fcff 	bl	25458 <_svfiprintf_r>
   24a5a:	1c43      	adds	r3, r0, #1
   24a5c:	da01      	bge.n	24a62 <sniprintf+0x52>
   24a5e:	238b      	movs	r3, #139	; 0x8b
   24a60:	602b      	str	r3, [r5, #0]
   24a62:	2c00      	cmp	r4, #0
   24a64:	d0df      	beq.n	24a26 <sniprintf+0x16>
   24a66:	2300      	movs	r3, #0
   24a68:	9a02      	ldr	r2, [sp, #8]
   24a6a:	7013      	strb	r3, [r2, #0]
   24a6c:	e7db      	b.n	24a26 <sniprintf+0x16>
   24a6e:	46c0      	nop			; (mov r8, r8)
   24a70:	20000124 	.word	0x20000124

00024a74 <siprintf>:
   24a74:	b40e      	push	{r1, r2, r3}
   24a76:	b510      	push	{r4, lr}
   24a78:	b09d      	sub	sp, #116	; 0x74
   24a7a:	a902      	add	r1, sp, #8
   24a7c:	9002      	str	r0, [sp, #8]
   24a7e:	6108      	str	r0, [r1, #16]
   24a80:	480b      	ldr	r0, [pc, #44]	; (24ab0 <siprintf+0x3c>)
   24a82:	2482      	movs	r4, #130	; 0x82
   24a84:	6088      	str	r0, [r1, #8]
   24a86:	6148      	str	r0, [r1, #20]
   24a88:	2001      	movs	r0, #1
   24a8a:	4240      	negs	r0, r0
   24a8c:	ab1f      	add	r3, sp, #124	; 0x7c
   24a8e:	81c8      	strh	r0, [r1, #14]
   24a90:	4808      	ldr	r0, [pc, #32]	; (24ab4 <siprintf+0x40>)
   24a92:	cb04      	ldmia	r3!, {r2}
   24a94:	00a4      	lsls	r4, r4, #2
   24a96:	6800      	ldr	r0, [r0, #0]
   24a98:	9301      	str	r3, [sp, #4]
   24a9a:	818c      	strh	r4, [r1, #12]
   24a9c:	f000 fcdc 	bl	25458 <_svfiprintf_r>
   24aa0:	2300      	movs	r3, #0
   24aa2:	9a02      	ldr	r2, [sp, #8]
   24aa4:	7013      	strb	r3, [r2, #0]
   24aa6:	b01d      	add	sp, #116	; 0x74
   24aa8:	bc10      	pop	{r4}
   24aaa:	bc08      	pop	{r3}
   24aac:	b003      	add	sp, #12
   24aae:	4718      	bx	r3
   24ab0:	7fffffff 	.word	0x7fffffff
   24ab4:	20000124 	.word	0x20000124

00024ab8 <strcasecmp>:
   24ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24aba:	0007      	movs	r7, r0
   24abc:	000e      	movs	r6, r1
   24abe:	783c      	ldrb	r4, [r7, #0]
   24ac0:	f000 fbda 	bl	25278 <__locale_ctype_ptr>
   24ac4:	2203      	movs	r2, #3
   24ac6:	1900      	adds	r0, r0, r4
   24ac8:	7843      	ldrb	r3, [r0, #1]
   24aca:	4013      	ands	r3, r2
   24acc:	2b01      	cmp	r3, #1
   24ace:	d100      	bne.n	24ad2 <strcasecmp+0x1a>
   24ad0:	3420      	adds	r4, #32
   24ad2:	7835      	ldrb	r5, [r6, #0]
   24ad4:	f000 fbd0 	bl	25278 <__locale_ctype_ptr>
   24ad8:	2203      	movs	r2, #3
   24ada:	1940      	adds	r0, r0, r5
   24adc:	7843      	ldrb	r3, [r0, #1]
   24ade:	4013      	ands	r3, r2
   24ae0:	2b01      	cmp	r3, #1
   24ae2:	d100      	bne.n	24ae6 <strcasecmp+0x2e>
   24ae4:	3520      	adds	r5, #32
   24ae6:	1b60      	subs	r0, r4, r5
   24ae8:	d103      	bne.n	24af2 <strcasecmp+0x3a>
   24aea:	3701      	adds	r7, #1
   24aec:	3601      	adds	r6, #1
   24aee:	2d00      	cmp	r5, #0
   24af0:	d1e5      	bne.n	24abe <strcasecmp+0x6>
   24af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024af4 <strcat>:
   24af4:	0002      	movs	r2, r0
   24af6:	b510      	push	{r4, lr}
   24af8:	7813      	ldrb	r3, [r2, #0]
   24afa:	2b00      	cmp	r3, #0
   24afc:	d105      	bne.n	24b0a <strcat+0x16>
   24afe:	5ccc      	ldrb	r4, [r1, r3]
   24b00:	54d4      	strb	r4, [r2, r3]
   24b02:	3301      	adds	r3, #1
   24b04:	2c00      	cmp	r4, #0
   24b06:	d1fa      	bne.n	24afe <strcat+0xa>
   24b08:	bd10      	pop	{r4, pc}
   24b0a:	3201      	adds	r2, #1
   24b0c:	e7f4      	b.n	24af8 <strcat+0x4>

00024b0e <strcmp>:
   24b0e:	7802      	ldrb	r2, [r0, #0]
   24b10:	780b      	ldrb	r3, [r1, #0]
   24b12:	2a00      	cmp	r2, #0
   24b14:	d003      	beq.n	24b1e <strcmp+0x10>
   24b16:	3001      	adds	r0, #1
   24b18:	3101      	adds	r1, #1
   24b1a:	429a      	cmp	r2, r3
   24b1c:	d0f7      	beq.n	24b0e <strcmp>
   24b1e:	1ad0      	subs	r0, r2, r3
   24b20:	4770      	bx	lr

00024b22 <strcpy>:
   24b22:	1c03      	adds	r3, r0, #0
   24b24:	780a      	ldrb	r2, [r1, #0]
   24b26:	3101      	adds	r1, #1
   24b28:	701a      	strb	r2, [r3, #0]
   24b2a:	3301      	adds	r3, #1
   24b2c:	2a00      	cmp	r2, #0
   24b2e:	d1f9      	bne.n	24b24 <strcpy+0x2>
   24b30:	4770      	bx	lr
	...

00024b34 <strdup>:
   24b34:	b510      	push	{r4, lr}
   24b36:	4b03      	ldr	r3, [pc, #12]	; (24b44 <strdup+0x10>)
   24b38:	0001      	movs	r1, r0
   24b3a:	6818      	ldr	r0, [r3, #0]
   24b3c:	f000 f804 	bl	24b48 <_strdup_r>
   24b40:	bd10      	pop	{r4, pc}
   24b42:	46c0      	nop			; (mov r8, r8)
   24b44:	20000124 	.word	0x20000124

00024b48 <_strdup_r>:
   24b48:	b570      	push	{r4, r5, r6, lr}
   24b4a:	0005      	movs	r5, r0
   24b4c:	0008      	movs	r0, r1
   24b4e:	000e      	movs	r6, r1
   24b50:	f000 f80d 	bl	24b6e <strlen>
   24b54:	1c44      	adds	r4, r0, #1
   24b56:	0021      	movs	r1, r4
   24b58:	0028      	movs	r0, r5
   24b5a:	f7ff fe7f 	bl	2485c <_malloc_r>
   24b5e:	1e05      	subs	r5, r0, #0
   24b60:	d003      	beq.n	24b6a <_strdup_r+0x22>
   24b62:	0022      	movs	r2, r4
   24b64:	0031      	movs	r1, r6
   24b66:	f7ff fe0b 	bl	24780 <memcpy>
   24b6a:	0028      	movs	r0, r5
   24b6c:	bd70      	pop	{r4, r5, r6, pc}

00024b6e <strlen>:
   24b6e:	2300      	movs	r3, #0
   24b70:	5cc2      	ldrb	r2, [r0, r3]
   24b72:	3301      	adds	r3, #1
   24b74:	2a00      	cmp	r2, #0
   24b76:	d1fb      	bne.n	24b70 <strlen+0x2>
   24b78:	1e58      	subs	r0, r3, #1
   24b7a:	4770      	bx	lr

00024b7c <strncmp>:
   24b7c:	2300      	movs	r3, #0
   24b7e:	b530      	push	{r4, r5, lr}
   24b80:	429a      	cmp	r2, r3
   24b82:	d00a      	beq.n	24b9a <strncmp+0x1e>
   24b84:	3a01      	subs	r2, #1
   24b86:	5cc4      	ldrb	r4, [r0, r3]
   24b88:	5ccd      	ldrb	r5, [r1, r3]
   24b8a:	42ac      	cmp	r4, r5
   24b8c:	d104      	bne.n	24b98 <strncmp+0x1c>
   24b8e:	429a      	cmp	r2, r3
   24b90:	d002      	beq.n	24b98 <strncmp+0x1c>
   24b92:	3301      	adds	r3, #1
   24b94:	2c00      	cmp	r4, #0
   24b96:	d1f6      	bne.n	24b86 <strncmp+0xa>
   24b98:	1b63      	subs	r3, r4, r5
   24b9a:	0018      	movs	r0, r3
   24b9c:	bd30      	pop	{r4, r5, pc}

00024b9e <strncpy>:
   24b9e:	b570      	push	{r4, r5, r6, lr}
   24ba0:	0004      	movs	r4, r0
   24ba2:	2a00      	cmp	r2, #0
   24ba4:	d100      	bne.n	24ba8 <strncpy+0xa>
   24ba6:	bd70      	pop	{r4, r5, r6, pc}
   24ba8:	780d      	ldrb	r5, [r1, #0]
   24baa:	1e56      	subs	r6, r2, #1
   24bac:	1c63      	adds	r3, r4, #1
   24bae:	7025      	strb	r5, [r4, #0]
   24bb0:	3101      	adds	r1, #1
   24bb2:	2d00      	cmp	r5, #0
   24bb4:	d105      	bne.n	24bc2 <strncpy+0x24>
   24bb6:	18a4      	adds	r4, r4, r2
   24bb8:	429c      	cmp	r4, r3
   24bba:	d0f4      	beq.n	24ba6 <strncpy+0x8>
   24bbc:	701d      	strb	r5, [r3, #0]
   24bbe:	3301      	adds	r3, #1
   24bc0:	e7fa      	b.n	24bb8 <strncpy+0x1a>
   24bc2:	001c      	movs	r4, r3
   24bc4:	0032      	movs	r2, r6
   24bc6:	e7ec      	b.n	24ba2 <strncpy+0x4>

00024bc8 <strrchr>:
   24bc8:	b570      	push	{r4, r5, r6, lr}
   24bca:	000d      	movs	r5, r1
   24bcc:	2400      	movs	r4, #0
   24bce:	2900      	cmp	r1, #0
   24bd0:	d105      	bne.n	24bde <strrchr+0x16>
   24bd2:	f000 ff19 	bl	25a08 <strchr>
   24bd6:	0004      	movs	r4, r0
   24bd8:	e006      	b.n	24be8 <strrchr+0x20>
   24bda:	001c      	movs	r4, r3
   24bdc:	1c58      	adds	r0, r3, #1
   24bde:	0029      	movs	r1, r5
   24be0:	f000 ff12 	bl	25a08 <strchr>
   24be4:	1e03      	subs	r3, r0, #0
   24be6:	d1f8      	bne.n	24bda <strrchr+0x12>
   24be8:	0020      	movs	r0, r4
   24bea:	bd70      	pop	{r4, r5, r6, pc}

00024bec <strstr>:
   24bec:	b510      	push	{r4, lr}
   24bee:	0002      	movs	r2, r0
   24bf0:	7800      	ldrb	r0, [r0, #0]
   24bf2:	2800      	cmp	r0, #0
   24bf4:	d104      	bne.n	24c00 <strstr+0x14>
   24bf6:	7809      	ldrb	r1, [r1, #0]
   24bf8:	2900      	cmp	r1, #0
   24bfa:	d00d      	beq.n	24c18 <strstr+0x2c>
   24bfc:	bd10      	pop	{r4, pc}
   24bfe:	3201      	adds	r2, #1
   24c00:	7810      	ldrb	r0, [r2, #0]
   24c02:	2800      	cmp	r0, #0
   24c04:	d0fa      	beq.n	24bfc <strstr+0x10>
   24c06:	2300      	movs	r3, #0
   24c08:	5cc8      	ldrb	r0, [r1, r3]
   24c0a:	2800      	cmp	r0, #0
   24c0c:	d004      	beq.n	24c18 <strstr+0x2c>
   24c0e:	5cd4      	ldrb	r4, [r2, r3]
   24c10:	4284      	cmp	r4, r0
   24c12:	d1f4      	bne.n	24bfe <strstr+0x12>
   24c14:	3301      	adds	r3, #1
   24c16:	e7f7      	b.n	24c08 <strstr+0x1c>
   24c18:	0010      	movs	r0, r2
   24c1a:	e7ef      	b.n	24bfc <strstr+0x10>

00024c1c <_strtol_l.isra.0>:
   24c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24c1e:	001f      	movs	r7, r3
   24c20:	000e      	movs	r6, r1
   24c22:	b087      	sub	sp, #28
   24c24:	9005      	str	r0, [sp, #20]
   24c26:	9103      	str	r1, [sp, #12]
   24c28:	9202      	str	r2, [sp, #8]
   24c2a:	980c      	ldr	r0, [sp, #48]	; 0x30
   24c2c:	7834      	ldrb	r4, [r6, #0]
   24c2e:	f000 fb20 	bl	25272 <__locale_ctype_ptr_l>
   24c32:	2208      	movs	r2, #8
   24c34:	1900      	adds	r0, r0, r4
   24c36:	7843      	ldrb	r3, [r0, #1]
   24c38:	1c75      	adds	r5, r6, #1
   24c3a:	4013      	ands	r3, r2
   24c3c:	d10c      	bne.n	24c58 <_strtol_l.isra.0+0x3c>
   24c3e:	2c2d      	cmp	r4, #45	; 0x2d
   24c40:	d10c      	bne.n	24c5c <_strtol_l.isra.0+0x40>
   24c42:	3301      	adds	r3, #1
   24c44:	782c      	ldrb	r4, [r5, #0]
   24c46:	9301      	str	r3, [sp, #4]
   24c48:	1cb5      	adds	r5, r6, #2
   24c4a:	2f00      	cmp	r7, #0
   24c4c:	d00c      	beq.n	24c68 <_strtol_l.isra.0+0x4c>
   24c4e:	2f10      	cmp	r7, #16
   24c50:	d114      	bne.n	24c7c <_strtol_l.isra.0+0x60>
   24c52:	2c30      	cmp	r4, #48	; 0x30
   24c54:	d00a      	beq.n	24c6c <_strtol_l.isra.0+0x50>
   24c56:	e011      	b.n	24c7c <_strtol_l.isra.0+0x60>
   24c58:	002e      	movs	r6, r5
   24c5a:	e7e6      	b.n	24c2a <_strtol_l.isra.0+0xe>
   24c5c:	9301      	str	r3, [sp, #4]
   24c5e:	2c2b      	cmp	r4, #43	; 0x2b
   24c60:	d1f3      	bne.n	24c4a <_strtol_l.isra.0+0x2e>
   24c62:	782c      	ldrb	r4, [r5, #0]
   24c64:	1cb5      	adds	r5, r6, #2
   24c66:	e7f0      	b.n	24c4a <_strtol_l.isra.0+0x2e>
   24c68:	2c30      	cmp	r4, #48	; 0x30
   24c6a:	d12f      	bne.n	24ccc <_strtol_l.isra.0+0xb0>
   24c6c:	2220      	movs	r2, #32
   24c6e:	782b      	ldrb	r3, [r5, #0]
   24c70:	4393      	bics	r3, r2
   24c72:	2b58      	cmp	r3, #88	; 0x58
   24c74:	d151      	bne.n	24d1a <_strtol_l.isra.0+0xfe>
   24c76:	2710      	movs	r7, #16
   24c78:	786c      	ldrb	r4, [r5, #1]
   24c7a:	3502      	adds	r5, #2
   24c7c:	9b01      	ldr	r3, [sp, #4]
   24c7e:	4a29      	ldr	r2, [pc, #164]	; (24d24 <_strtol_l.isra.0+0x108>)
   24c80:	0039      	movs	r1, r7
   24c82:	189e      	adds	r6, r3, r2
   24c84:	0030      	movs	r0, r6
   24c86:	f7fd f8bf 	bl	21e08 <__aeabi_uidivmod>
   24c8a:	0030      	movs	r0, r6
   24c8c:	9104      	str	r1, [sp, #16]
   24c8e:	0039      	movs	r1, r7
   24c90:	f7fd f834 	bl	21cfc <__udivsi3>
   24c94:	2101      	movs	r1, #1
   24c96:	2300      	movs	r3, #0
   24c98:	4249      	negs	r1, r1
   24c9a:	0002      	movs	r2, r0
   24c9c:	468c      	mov	ip, r1
   24c9e:	0018      	movs	r0, r3
   24ca0:	0021      	movs	r1, r4
   24ca2:	3930      	subs	r1, #48	; 0x30
   24ca4:	2909      	cmp	r1, #9
   24ca6:	d813      	bhi.n	24cd0 <_strtol_l.isra.0+0xb4>
   24ca8:	000c      	movs	r4, r1
   24caa:	42a7      	cmp	r7, r4
   24cac:	dd1c      	ble.n	24ce8 <_strtol_l.isra.0+0xcc>
   24cae:	1c59      	adds	r1, r3, #1
   24cb0:	d009      	beq.n	24cc6 <_strtol_l.isra.0+0xaa>
   24cb2:	4663      	mov	r3, ip
   24cb4:	4282      	cmp	r2, r0
   24cb6:	d306      	bcc.n	24cc6 <_strtol_l.isra.0+0xaa>
   24cb8:	d102      	bne.n	24cc0 <_strtol_l.isra.0+0xa4>
   24cba:	9904      	ldr	r1, [sp, #16]
   24cbc:	42a1      	cmp	r1, r4
   24cbe:	db02      	blt.n	24cc6 <_strtol_l.isra.0+0xaa>
   24cc0:	2301      	movs	r3, #1
   24cc2:	4378      	muls	r0, r7
   24cc4:	1820      	adds	r0, r4, r0
   24cc6:	782c      	ldrb	r4, [r5, #0]
   24cc8:	3501      	adds	r5, #1
   24cca:	e7e9      	b.n	24ca0 <_strtol_l.isra.0+0x84>
   24ccc:	270a      	movs	r7, #10
   24cce:	e7d5      	b.n	24c7c <_strtol_l.isra.0+0x60>
   24cd0:	0021      	movs	r1, r4
   24cd2:	3941      	subs	r1, #65	; 0x41
   24cd4:	2919      	cmp	r1, #25
   24cd6:	d801      	bhi.n	24cdc <_strtol_l.isra.0+0xc0>
   24cd8:	3c37      	subs	r4, #55	; 0x37
   24cda:	e7e6      	b.n	24caa <_strtol_l.isra.0+0x8e>
   24cdc:	0021      	movs	r1, r4
   24cde:	3961      	subs	r1, #97	; 0x61
   24ce0:	2919      	cmp	r1, #25
   24ce2:	d801      	bhi.n	24ce8 <_strtol_l.isra.0+0xcc>
   24ce4:	3c57      	subs	r4, #87	; 0x57
   24ce6:	e7e0      	b.n	24caa <_strtol_l.isra.0+0x8e>
   24ce8:	1c5a      	adds	r2, r3, #1
   24cea:	d108      	bne.n	24cfe <_strtol_l.isra.0+0xe2>
   24cec:	9a05      	ldr	r2, [sp, #20]
   24cee:	3323      	adds	r3, #35	; 0x23
   24cf0:	6013      	str	r3, [r2, #0]
   24cf2:	9b02      	ldr	r3, [sp, #8]
   24cf4:	0030      	movs	r0, r6
   24cf6:	2b00      	cmp	r3, #0
   24cf8:	d10b      	bne.n	24d12 <_strtol_l.isra.0+0xf6>
   24cfa:	b007      	add	sp, #28
   24cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24cfe:	9a01      	ldr	r2, [sp, #4]
   24d00:	2a00      	cmp	r2, #0
   24d02:	d000      	beq.n	24d06 <_strtol_l.isra.0+0xea>
   24d04:	4240      	negs	r0, r0
   24d06:	9a02      	ldr	r2, [sp, #8]
   24d08:	2a00      	cmp	r2, #0
   24d0a:	d0f6      	beq.n	24cfa <_strtol_l.isra.0+0xde>
   24d0c:	9a03      	ldr	r2, [sp, #12]
   24d0e:	2b00      	cmp	r3, #0
   24d10:	d000      	beq.n	24d14 <_strtol_l.isra.0+0xf8>
   24d12:	1e6a      	subs	r2, r5, #1
   24d14:	9b02      	ldr	r3, [sp, #8]
   24d16:	601a      	str	r2, [r3, #0]
   24d18:	e7ef      	b.n	24cfa <_strtol_l.isra.0+0xde>
   24d1a:	2430      	movs	r4, #48	; 0x30
   24d1c:	2f00      	cmp	r7, #0
   24d1e:	d1ad      	bne.n	24c7c <_strtol_l.isra.0+0x60>
   24d20:	3708      	adds	r7, #8
   24d22:	e7ab      	b.n	24c7c <_strtol_l.isra.0+0x60>
   24d24:	7fffffff 	.word	0x7fffffff

00024d28 <strtol>:
   24d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24d2a:	0013      	movs	r3, r2
   24d2c:	4a06      	ldr	r2, [pc, #24]	; (24d48 <strtol+0x20>)
   24d2e:	0005      	movs	r5, r0
   24d30:	6810      	ldr	r0, [r2, #0]
   24d32:	6a04      	ldr	r4, [r0, #32]
   24d34:	2c00      	cmp	r4, #0
   24d36:	d100      	bne.n	24d3a <strtol+0x12>
   24d38:	4c04      	ldr	r4, [pc, #16]	; (24d4c <strtol+0x24>)
   24d3a:	000a      	movs	r2, r1
   24d3c:	9400      	str	r4, [sp, #0]
   24d3e:	0029      	movs	r1, r5
   24d40:	f7ff ff6c 	bl	24c1c <_strtol_l.isra.0>
   24d44:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   24d46:	46c0      	nop			; (mov r8, r8)
   24d48:	20000124 	.word	0x20000124
   24d4c:	20000188 	.word	0x20000188

00024d50 <_vsniprintf_r>:
   24d50:	b530      	push	{r4, r5, lr}
   24d52:	0014      	movs	r4, r2
   24d54:	b09b      	sub	sp, #108	; 0x6c
   24d56:	0005      	movs	r5, r0
   24d58:	001a      	movs	r2, r3
   24d5a:	2c00      	cmp	r4, #0
   24d5c:	da05      	bge.n	24d6a <_vsniprintf_r+0x1a>
   24d5e:	238b      	movs	r3, #139	; 0x8b
   24d60:	6003      	str	r3, [r0, #0]
   24d62:	2001      	movs	r0, #1
   24d64:	4240      	negs	r0, r0
   24d66:	b01b      	add	sp, #108	; 0x6c
   24d68:	bd30      	pop	{r4, r5, pc}
   24d6a:	2382      	movs	r3, #130	; 0x82
   24d6c:	4668      	mov	r0, sp
   24d6e:	009b      	lsls	r3, r3, #2
   24d70:	8183      	strh	r3, [r0, #12]
   24d72:	2300      	movs	r3, #0
   24d74:	9100      	str	r1, [sp, #0]
   24d76:	9104      	str	r1, [sp, #16]
   24d78:	429c      	cmp	r4, r3
   24d7a:	d000      	beq.n	24d7e <_vsniprintf_r+0x2e>
   24d7c:	1e63      	subs	r3, r4, #1
   24d7e:	9302      	str	r3, [sp, #8]
   24d80:	9305      	str	r3, [sp, #20]
   24d82:	2301      	movs	r3, #1
   24d84:	4669      	mov	r1, sp
   24d86:	425b      	negs	r3, r3
   24d88:	81cb      	strh	r3, [r1, #14]
   24d8a:	0028      	movs	r0, r5
   24d8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   24d8e:	f000 fb63 	bl	25458 <_svfiprintf_r>
   24d92:	1c43      	adds	r3, r0, #1
   24d94:	da01      	bge.n	24d9a <_vsniprintf_r+0x4a>
   24d96:	238b      	movs	r3, #139	; 0x8b
   24d98:	602b      	str	r3, [r5, #0]
   24d9a:	2c00      	cmp	r4, #0
   24d9c:	d0e3      	beq.n	24d66 <_vsniprintf_r+0x16>
   24d9e:	2300      	movs	r3, #0
   24da0:	9a00      	ldr	r2, [sp, #0]
   24da2:	7013      	strb	r3, [r2, #0]
   24da4:	e7df      	b.n	24d66 <_vsniprintf_r+0x16>
	...

00024da8 <vsniprintf>:
   24da8:	b507      	push	{r0, r1, r2, lr}
   24daa:	9300      	str	r3, [sp, #0]
   24dac:	0013      	movs	r3, r2
   24dae:	000a      	movs	r2, r1
   24db0:	0001      	movs	r1, r0
   24db2:	4802      	ldr	r0, [pc, #8]	; (24dbc <vsniprintf+0x14>)
   24db4:	6800      	ldr	r0, [r0, #0]
   24db6:	f7ff ffcb 	bl	24d50 <_vsniprintf_r>
   24dba:	bd0e      	pop	{r1, r2, r3, pc}
   24dbc:	20000124 	.word	0x20000124

00024dc0 <__swbuf_r>:
   24dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24dc2:	0005      	movs	r5, r0
   24dc4:	000e      	movs	r6, r1
   24dc6:	0014      	movs	r4, r2
   24dc8:	2800      	cmp	r0, #0
   24dca:	d004      	beq.n	24dd6 <__swbuf_r+0x16>
   24dcc:	6983      	ldr	r3, [r0, #24]
   24dce:	2b00      	cmp	r3, #0
   24dd0:	d101      	bne.n	24dd6 <__swbuf_r+0x16>
   24dd2:	f000 f9b9 	bl	25148 <__sinit>
   24dd6:	4b22      	ldr	r3, [pc, #136]	; (24e60 <__swbuf_r+0xa0>)
   24dd8:	429c      	cmp	r4, r3
   24dda:	d12d      	bne.n	24e38 <__swbuf_r+0x78>
   24ddc:	686c      	ldr	r4, [r5, #4]
   24dde:	69a3      	ldr	r3, [r4, #24]
   24de0:	60a3      	str	r3, [r4, #8]
   24de2:	89a3      	ldrh	r3, [r4, #12]
   24de4:	071b      	lsls	r3, r3, #28
   24de6:	d531      	bpl.n	24e4c <__swbuf_r+0x8c>
   24de8:	6923      	ldr	r3, [r4, #16]
   24dea:	2b00      	cmp	r3, #0
   24dec:	d02e      	beq.n	24e4c <__swbuf_r+0x8c>
   24dee:	6823      	ldr	r3, [r4, #0]
   24df0:	6922      	ldr	r2, [r4, #16]
   24df2:	b2f7      	uxtb	r7, r6
   24df4:	1a98      	subs	r0, r3, r2
   24df6:	6963      	ldr	r3, [r4, #20]
   24df8:	b2f6      	uxtb	r6, r6
   24dfa:	4298      	cmp	r0, r3
   24dfc:	db05      	blt.n	24e0a <__swbuf_r+0x4a>
   24dfe:	0021      	movs	r1, r4
   24e00:	0028      	movs	r0, r5
   24e02:	f000 f933 	bl	2506c <_fflush_r>
   24e06:	2800      	cmp	r0, #0
   24e08:	d126      	bne.n	24e58 <__swbuf_r+0x98>
   24e0a:	68a3      	ldr	r3, [r4, #8]
   24e0c:	3001      	adds	r0, #1
   24e0e:	3b01      	subs	r3, #1
   24e10:	60a3      	str	r3, [r4, #8]
   24e12:	6823      	ldr	r3, [r4, #0]
   24e14:	1c5a      	adds	r2, r3, #1
   24e16:	6022      	str	r2, [r4, #0]
   24e18:	701f      	strb	r7, [r3, #0]
   24e1a:	6963      	ldr	r3, [r4, #20]
   24e1c:	4298      	cmp	r0, r3
   24e1e:	d004      	beq.n	24e2a <__swbuf_r+0x6a>
   24e20:	89a3      	ldrh	r3, [r4, #12]
   24e22:	07db      	lsls	r3, r3, #31
   24e24:	d51a      	bpl.n	24e5c <__swbuf_r+0x9c>
   24e26:	2e0a      	cmp	r6, #10
   24e28:	d118      	bne.n	24e5c <__swbuf_r+0x9c>
   24e2a:	0021      	movs	r1, r4
   24e2c:	0028      	movs	r0, r5
   24e2e:	f000 f91d 	bl	2506c <_fflush_r>
   24e32:	2800      	cmp	r0, #0
   24e34:	d012      	beq.n	24e5c <__swbuf_r+0x9c>
   24e36:	e00f      	b.n	24e58 <__swbuf_r+0x98>
   24e38:	4b0a      	ldr	r3, [pc, #40]	; (24e64 <__swbuf_r+0xa4>)
   24e3a:	429c      	cmp	r4, r3
   24e3c:	d101      	bne.n	24e42 <__swbuf_r+0x82>
   24e3e:	68ac      	ldr	r4, [r5, #8]
   24e40:	e7cd      	b.n	24dde <__swbuf_r+0x1e>
   24e42:	4b09      	ldr	r3, [pc, #36]	; (24e68 <__swbuf_r+0xa8>)
   24e44:	429c      	cmp	r4, r3
   24e46:	d1ca      	bne.n	24dde <__swbuf_r+0x1e>
   24e48:	68ec      	ldr	r4, [r5, #12]
   24e4a:	e7c8      	b.n	24dde <__swbuf_r+0x1e>
   24e4c:	0021      	movs	r1, r4
   24e4e:	0028      	movs	r0, r5
   24e50:	f000 f80c 	bl	24e6c <__swsetup_r>
   24e54:	2800      	cmp	r0, #0
   24e56:	d0ca      	beq.n	24dee <__swbuf_r+0x2e>
   24e58:	2601      	movs	r6, #1
   24e5a:	4276      	negs	r6, r6
   24e5c:	0030      	movs	r0, r6
   24e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24e60:	0002a0c4 	.word	0x0002a0c4
   24e64:	0002a0e4 	.word	0x0002a0e4
   24e68:	0002a0a4 	.word	0x0002a0a4

00024e6c <__swsetup_r>:
   24e6c:	4b36      	ldr	r3, [pc, #216]	; (24f48 <__swsetup_r+0xdc>)
   24e6e:	b570      	push	{r4, r5, r6, lr}
   24e70:	681d      	ldr	r5, [r3, #0]
   24e72:	0006      	movs	r6, r0
   24e74:	000c      	movs	r4, r1
   24e76:	2d00      	cmp	r5, #0
   24e78:	d005      	beq.n	24e86 <__swsetup_r+0x1a>
   24e7a:	69ab      	ldr	r3, [r5, #24]
   24e7c:	2b00      	cmp	r3, #0
   24e7e:	d102      	bne.n	24e86 <__swsetup_r+0x1a>
   24e80:	0028      	movs	r0, r5
   24e82:	f000 f961 	bl	25148 <__sinit>
   24e86:	4b31      	ldr	r3, [pc, #196]	; (24f4c <__swsetup_r+0xe0>)
   24e88:	429c      	cmp	r4, r3
   24e8a:	d10f      	bne.n	24eac <__swsetup_r+0x40>
   24e8c:	686c      	ldr	r4, [r5, #4]
   24e8e:	230c      	movs	r3, #12
   24e90:	5ee2      	ldrsh	r2, [r4, r3]
   24e92:	b293      	uxth	r3, r2
   24e94:	0719      	lsls	r1, r3, #28
   24e96:	d42d      	bmi.n	24ef4 <__swsetup_r+0x88>
   24e98:	06d9      	lsls	r1, r3, #27
   24e9a:	d411      	bmi.n	24ec0 <__swsetup_r+0x54>
   24e9c:	2309      	movs	r3, #9
   24e9e:	2001      	movs	r0, #1
   24ea0:	6033      	str	r3, [r6, #0]
   24ea2:	3337      	adds	r3, #55	; 0x37
   24ea4:	4313      	orrs	r3, r2
   24ea6:	81a3      	strh	r3, [r4, #12]
   24ea8:	4240      	negs	r0, r0
   24eaa:	bd70      	pop	{r4, r5, r6, pc}
   24eac:	4b28      	ldr	r3, [pc, #160]	; (24f50 <__swsetup_r+0xe4>)
   24eae:	429c      	cmp	r4, r3
   24eb0:	d101      	bne.n	24eb6 <__swsetup_r+0x4a>
   24eb2:	68ac      	ldr	r4, [r5, #8]
   24eb4:	e7eb      	b.n	24e8e <__swsetup_r+0x22>
   24eb6:	4b27      	ldr	r3, [pc, #156]	; (24f54 <__swsetup_r+0xe8>)
   24eb8:	429c      	cmp	r4, r3
   24eba:	d1e8      	bne.n	24e8e <__swsetup_r+0x22>
   24ebc:	68ec      	ldr	r4, [r5, #12]
   24ebe:	e7e6      	b.n	24e8e <__swsetup_r+0x22>
   24ec0:	075b      	lsls	r3, r3, #29
   24ec2:	d513      	bpl.n	24eec <__swsetup_r+0x80>
   24ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24ec6:	2900      	cmp	r1, #0
   24ec8:	d008      	beq.n	24edc <__swsetup_r+0x70>
   24eca:	0023      	movs	r3, r4
   24ecc:	3344      	adds	r3, #68	; 0x44
   24ece:	4299      	cmp	r1, r3
   24ed0:	d002      	beq.n	24ed8 <__swsetup_r+0x6c>
   24ed2:	0030      	movs	r0, r6
   24ed4:	f7ff fc78 	bl	247c8 <_free_r>
   24ed8:	2300      	movs	r3, #0
   24eda:	6363      	str	r3, [r4, #52]	; 0x34
   24edc:	2224      	movs	r2, #36	; 0x24
   24ede:	89a3      	ldrh	r3, [r4, #12]
   24ee0:	4393      	bics	r3, r2
   24ee2:	81a3      	strh	r3, [r4, #12]
   24ee4:	2300      	movs	r3, #0
   24ee6:	6063      	str	r3, [r4, #4]
   24ee8:	6923      	ldr	r3, [r4, #16]
   24eea:	6023      	str	r3, [r4, #0]
   24eec:	2308      	movs	r3, #8
   24eee:	89a2      	ldrh	r2, [r4, #12]
   24ef0:	4313      	orrs	r3, r2
   24ef2:	81a3      	strh	r3, [r4, #12]
   24ef4:	6923      	ldr	r3, [r4, #16]
   24ef6:	2b00      	cmp	r3, #0
   24ef8:	d10b      	bne.n	24f12 <__swsetup_r+0xa6>
   24efa:	21a0      	movs	r1, #160	; 0xa0
   24efc:	2280      	movs	r2, #128	; 0x80
   24efe:	89a3      	ldrh	r3, [r4, #12]
   24f00:	0089      	lsls	r1, r1, #2
   24f02:	0092      	lsls	r2, r2, #2
   24f04:	400b      	ands	r3, r1
   24f06:	4293      	cmp	r3, r2
   24f08:	d003      	beq.n	24f12 <__swsetup_r+0xa6>
   24f0a:	0021      	movs	r1, r4
   24f0c:	0030      	movs	r0, r6
   24f0e:	f000 f9e9 	bl	252e4 <__smakebuf_r>
   24f12:	2301      	movs	r3, #1
   24f14:	89a2      	ldrh	r2, [r4, #12]
   24f16:	4013      	ands	r3, r2
   24f18:	d011      	beq.n	24f3e <__swsetup_r+0xd2>
   24f1a:	2300      	movs	r3, #0
   24f1c:	60a3      	str	r3, [r4, #8]
   24f1e:	6963      	ldr	r3, [r4, #20]
   24f20:	425b      	negs	r3, r3
   24f22:	61a3      	str	r3, [r4, #24]
   24f24:	2000      	movs	r0, #0
   24f26:	6923      	ldr	r3, [r4, #16]
   24f28:	4283      	cmp	r3, r0
   24f2a:	d1be      	bne.n	24eaa <__swsetup_r+0x3e>
   24f2c:	230c      	movs	r3, #12
   24f2e:	5ee2      	ldrsh	r2, [r4, r3]
   24f30:	0613      	lsls	r3, r2, #24
   24f32:	d5ba      	bpl.n	24eaa <__swsetup_r+0x3e>
   24f34:	2340      	movs	r3, #64	; 0x40
   24f36:	4313      	orrs	r3, r2
   24f38:	81a3      	strh	r3, [r4, #12]
   24f3a:	3801      	subs	r0, #1
   24f3c:	e7b5      	b.n	24eaa <__swsetup_r+0x3e>
   24f3e:	0792      	lsls	r2, r2, #30
   24f40:	d400      	bmi.n	24f44 <__swsetup_r+0xd8>
   24f42:	6963      	ldr	r3, [r4, #20]
   24f44:	60a3      	str	r3, [r4, #8]
   24f46:	e7ed      	b.n	24f24 <__swsetup_r+0xb8>
   24f48:	20000124 	.word	0x20000124
   24f4c:	0002a0c4 	.word	0x0002a0c4
   24f50:	0002a0e4 	.word	0x0002a0e4
   24f54:	0002a0a4 	.word	0x0002a0a4

00024f58 <__sflush_r>:
   24f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24f5a:	898a      	ldrh	r2, [r1, #12]
   24f5c:	0005      	movs	r5, r0
   24f5e:	000c      	movs	r4, r1
   24f60:	0713      	lsls	r3, r2, #28
   24f62:	d460      	bmi.n	25026 <__sflush_r+0xce>
   24f64:	684b      	ldr	r3, [r1, #4]
   24f66:	2b00      	cmp	r3, #0
   24f68:	dc04      	bgt.n	24f74 <__sflush_r+0x1c>
   24f6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   24f6c:	2b00      	cmp	r3, #0
   24f6e:	dc01      	bgt.n	24f74 <__sflush_r+0x1c>
   24f70:	2000      	movs	r0, #0
   24f72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   24f74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   24f76:	2f00      	cmp	r7, #0
   24f78:	d0fa      	beq.n	24f70 <__sflush_r+0x18>
   24f7a:	2300      	movs	r3, #0
   24f7c:	682e      	ldr	r6, [r5, #0]
   24f7e:	602b      	str	r3, [r5, #0]
   24f80:	2380      	movs	r3, #128	; 0x80
   24f82:	015b      	lsls	r3, r3, #5
   24f84:	401a      	ands	r2, r3
   24f86:	d034      	beq.n	24ff2 <__sflush_r+0x9a>
   24f88:	6d60      	ldr	r0, [r4, #84]	; 0x54
   24f8a:	89a3      	ldrh	r3, [r4, #12]
   24f8c:	075b      	lsls	r3, r3, #29
   24f8e:	d506      	bpl.n	24f9e <__sflush_r+0x46>
   24f90:	6863      	ldr	r3, [r4, #4]
   24f92:	1ac0      	subs	r0, r0, r3
   24f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24f96:	2b00      	cmp	r3, #0
   24f98:	d001      	beq.n	24f9e <__sflush_r+0x46>
   24f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   24f9c:	1ac0      	subs	r0, r0, r3
   24f9e:	0002      	movs	r2, r0
   24fa0:	6a21      	ldr	r1, [r4, #32]
   24fa2:	2300      	movs	r3, #0
   24fa4:	0028      	movs	r0, r5
   24fa6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   24fa8:	47b8      	blx	r7
   24faa:	89a1      	ldrh	r1, [r4, #12]
   24fac:	1c43      	adds	r3, r0, #1
   24fae:	d106      	bne.n	24fbe <__sflush_r+0x66>
   24fb0:	682b      	ldr	r3, [r5, #0]
   24fb2:	2b1d      	cmp	r3, #29
   24fb4:	d831      	bhi.n	2501a <__sflush_r+0xc2>
   24fb6:	4a2c      	ldr	r2, [pc, #176]	; (25068 <__sflush_r+0x110>)
   24fb8:	40da      	lsrs	r2, r3
   24fba:	07d3      	lsls	r3, r2, #31
   24fbc:	d52d      	bpl.n	2501a <__sflush_r+0xc2>
   24fbe:	2300      	movs	r3, #0
   24fc0:	6063      	str	r3, [r4, #4]
   24fc2:	6923      	ldr	r3, [r4, #16]
   24fc4:	6023      	str	r3, [r4, #0]
   24fc6:	04cb      	lsls	r3, r1, #19
   24fc8:	d505      	bpl.n	24fd6 <__sflush_r+0x7e>
   24fca:	1c43      	adds	r3, r0, #1
   24fcc:	d102      	bne.n	24fd4 <__sflush_r+0x7c>
   24fce:	682b      	ldr	r3, [r5, #0]
   24fd0:	2b00      	cmp	r3, #0
   24fd2:	d100      	bne.n	24fd6 <__sflush_r+0x7e>
   24fd4:	6560      	str	r0, [r4, #84]	; 0x54
   24fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24fd8:	602e      	str	r6, [r5, #0]
   24fda:	2900      	cmp	r1, #0
   24fdc:	d0c8      	beq.n	24f70 <__sflush_r+0x18>
   24fde:	0023      	movs	r3, r4
   24fe0:	3344      	adds	r3, #68	; 0x44
   24fe2:	4299      	cmp	r1, r3
   24fe4:	d002      	beq.n	24fec <__sflush_r+0x94>
   24fe6:	0028      	movs	r0, r5
   24fe8:	f7ff fbee 	bl	247c8 <_free_r>
   24fec:	2000      	movs	r0, #0
   24fee:	6360      	str	r0, [r4, #52]	; 0x34
   24ff0:	e7bf      	b.n	24f72 <__sflush_r+0x1a>
   24ff2:	2301      	movs	r3, #1
   24ff4:	6a21      	ldr	r1, [r4, #32]
   24ff6:	0028      	movs	r0, r5
   24ff8:	47b8      	blx	r7
   24ffa:	1c43      	adds	r3, r0, #1
   24ffc:	d1c5      	bne.n	24f8a <__sflush_r+0x32>
   24ffe:	682b      	ldr	r3, [r5, #0]
   25000:	2b00      	cmp	r3, #0
   25002:	d0c2      	beq.n	24f8a <__sflush_r+0x32>
   25004:	2b1d      	cmp	r3, #29
   25006:	d001      	beq.n	2500c <__sflush_r+0xb4>
   25008:	2b16      	cmp	r3, #22
   2500a:	d101      	bne.n	25010 <__sflush_r+0xb8>
   2500c:	602e      	str	r6, [r5, #0]
   2500e:	e7af      	b.n	24f70 <__sflush_r+0x18>
   25010:	2340      	movs	r3, #64	; 0x40
   25012:	89a2      	ldrh	r2, [r4, #12]
   25014:	4313      	orrs	r3, r2
   25016:	81a3      	strh	r3, [r4, #12]
   25018:	e7ab      	b.n	24f72 <__sflush_r+0x1a>
   2501a:	2340      	movs	r3, #64	; 0x40
   2501c:	430b      	orrs	r3, r1
   2501e:	2001      	movs	r0, #1
   25020:	81a3      	strh	r3, [r4, #12]
   25022:	4240      	negs	r0, r0
   25024:	e7a5      	b.n	24f72 <__sflush_r+0x1a>
   25026:	690f      	ldr	r7, [r1, #16]
   25028:	2f00      	cmp	r7, #0
   2502a:	d0a1      	beq.n	24f70 <__sflush_r+0x18>
   2502c:	680b      	ldr	r3, [r1, #0]
   2502e:	600f      	str	r7, [r1, #0]
   25030:	1bdb      	subs	r3, r3, r7
   25032:	9301      	str	r3, [sp, #4]
   25034:	2300      	movs	r3, #0
   25036:	0792      	lsls	r2, r2, #30
   25038:	d100      	bne.n	2503c <__sflush_r+0xe4>
   2503a:	694b      	ldr	r3, [r1, #20]
   2503c:	60a3      	str	r3, [r4, #8]
   2503e:	9b01      	ldr	r3, [sp, #4]
   25040:	2b00      	cmp	r3, #0
   25042:	dc00      	bgt.n	25046 <__sflush_r+0xee>
   25044:	e794      	b.n	24f70 <__sflush_r+0x18>
   25046:	9b01      	ldr	r3, [sp, #4]
   25048:	003a      	movs	r2, r7
   2504a:	6a21      	ldr	r1, [r4, #32]
   2504c:	0028      	movs	r0, r5
   2504e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   25050:	47b0      	blx	r6
   25052:	2800      	cmp	r0, #0
   25054:	dc03      	bgt.n	2505e <__sflush_r+0x106>
   25056:	2340      	movs	r3, #64	; 0x40
   25058:	89a2      	ldrh	r2, [r4, #12]
   2505a:	4313      	orrs	r3, r2
   2505c:	e7df      	b.n	2501e <__sflush_r+0xc6>
   2505e:	9b01      	ldr	r3, [sp, #4]
   25060:	183f      	adds	r7, r7, r0
   25062:	1a1b      	subs	r3, r3, r0
   25064:	9301      	str	r3, [sp, #4]
   25066:	e7ea      	b.n	2503e <__sflush_r+0xe6>
   25068:	20400001 	.word	0x20400001

0002506c <_fflush_r>:
   2506c:	690b      	ldr	r3, [r1, #16]
   2506e:	b570      	push	{r4, r5, r6, lr}
   25070:	0005      	movs	r5, r0
   25072:	000c      	movs	r4, r1
   25074:	2b00      	cmp	r3, #0
   25076:	d101      	bne.n	2507c <_fflush_r+0x10>
   25078:	2000      	movs	r0, #0
   2507a:	bd70      	pop	{r4, r5, r6, pc}
   2507c:	2800      	cmp	r0, #0
   2507e:	d004      	beq.n	2508a <_fflush_r+0x1e>
   25080:	6983      	ldr	r3, [r0, #24]
   25082:	2b00      	cmp	r3, #0
   25084:	d101      	bne.n	2508a <_fflush_r+0x1e>
   25086:	f000 f85f 	bl	25148 <__sinit>
   2508a:	4b0b      	ldr	r3, [pc, #44]	; (250b8 <_fflush_r+0x4c>)
   2508c:	429c      	cmp	r4, r3
   2508e:	d109      	bne.n	250a4 <_fflush_r+0x38>
   25090:	686c      	ldr	r4, [r5, #4]
   25092:	220c      	movs	r2, #12
   25094:	5ea3      	ldrsh	r3, [r4, r2]
   25096:	2b00      	cmp	r3, #0
   25098:	d0ee      	beq.n	25078 <_fflush_r+0xc>
   2509a:	0021      	movs	r1, r4
   2509c:	0028      	movs	r0, r5
   2509e:	f7ff ff5b 	bl	24f58 <__sflush_r>
   250a2:	e7ea      	b.n	2507a <_fflush_r+0xe>
   250a4:	4b05      	ldr	r3, [pc, #20]	; (250bc <_fflush_r+0x50>)
   250a6:	429c      	cmp	r4, r3
   250a8:	d101      	bne.n	250ae <_fflush_r+0x42>
   250aa:	68ac      	ldr	r4, [r5, #8]
   250ac:	e7f1      	b.n	25092 <_fflush_r+0x26>
   250ae:	4b04      	ldr	r3, [pc, #16]	; (250c0 <_fflush_r+0x54>)
   250b0:	429c      	cmp	r4, r3
   250b2:	d1ee      	bne.n	25092 <_fflush_r+0x26>
   250b4:	68ec      	ldr	r4, [r5, #12]
   250b6:	e7ec      	b.n	25092 <_fflush_r+0x26>
   250b8:	0002a0c4 	.word	0x0002a0c4
   250bc:	0002a0e4 	.word	0x0002a0e4
   250c0:	0002a0a4 	.word	0x0002a0a4

000250c4 <_cleanup_r>:
   250c4:	b510      	push	{r4, lr}
   250c6:	4902      	ldr	r1, [pc, #8]	; (250d0 <_cleanup_r+0xc>)
   250c8:	f000 f8b2 	bl	25230 <_fwalk_reent>
   250cc:	bd10      	pop	{r4, pc}
   250ce:	46c0      	nop			; (mov r8, r8)
   250d0:	0002506d 	.word	0x0002506d

000250d4 <std.isra.0>:
   250d4:	2300      	movs	r3, #0
   250d6:	b510      	push	{r4, lr}
   250d8:	0004      	movs	r4, r0
   250da:	6003      	str	r3, [r0, #0]
   250dc:	6043      	str	r3, [r0, #4]
   250de:	6083      	str	r3, [r0, #8]
   250e0:	8181      	strh	r1, [r0, #12]
   250e2:	6643      	str	r3, [r0, #100]	; 0x64
   250e4:	81c2      	strh	r2, [r0, #14]
   250e6:	6103      	str	r3, [r0, #16]
   250e8:	6143      	str	r3, [r0, #20]
   250ea:	6183      	str	r3, [r0, #24]
   250ec:	0019      	movs	r1, r3
   250ee:	2208      	movs	r2, #8
   250f0:	305c      	adds	r0, #92	; 0x5c
   250f2:	f7ff fb60 	bl	247b6 <memset>
   250f6:	4b05      	ldr	r3, [pc, #20]	; (2510c <std.isra.0+0x38>)
   250f8:	6224      	str	r4, [r4, #32]
   250fa:	6263      	str	r3, [r4, #36]	; 0x24
   250fc:	4b04      	ldr	r3, [pc, #16]	; (25110 <std.isra.0+0x3c>)
   250fe:	62a3      	str	r3, [r4, #40]	; 0x28
   25100:	4b04      	ldr	r3, [pc, #16]	; (25114 <std.isra.0+0x40>)
   25102:	62e3      	str	r3, [r4, #44]	; 0x2c
   25104:	4b04      	ldr	r3, [pc, #16]	; (25118 <std.isra.0+0x44>)
   25106:	6323      	str	r3, [r4, #48]	; 0x30
   25108:	bd10      	pop	{r4, pc}
   2510a:	46c0      	nop			; (mov r8, r8)
   2510c:	00025971 	.word	0x00025971
   25110:	00025999 	.word	0x00025999
   25114:	000259d1 	.word	0x000259d1
   25118:	000259fd 	.word	0x000259fd

0002511c <__sfmoreglue>:
   2511c:	b570      	push	{r4, r5, r6, lr}
   2511e:	2568      	movs	r5, #104	; 0x68
   25120:	1e4a      	subs	r2, r1, #1
   25122:	4355      	muls	r5, r2
   25124:	000e      	movs	r6, r1
   25126:	0029      	movs	r1, r5
   25128:	3174      	adds	r1, #116	; 0x74
   2512a:	f7ff fb97 	bl	2485c <_malloc_r>
   2512e:	1e04      	subs	r4, r0, #0
   25130:	d008      	beq.n	25144 <__sfmoreglue+0x28>
   25132:	2100      	movs	r1, #0
   25134:	002a      	movs	r2, r5
   25136:	6001      	str	r1, [r0, #0]
   25138:	6046      	str	r6, [r0, #4]
   2513a:	300c      	adds	r0, #12
   2513c:	60a0      	str	r0, [r4, #8]
   2513e:	3268      	adds	r2, #104	; 0x68
   25140:	f7ff fb39 	bl	247b6 <memset>
   25144:	0020      	movs	r0, r4
   25146:	bd70      	pop	{r4, r5, r6, pc}

00025148 <__sinit>:
   25148:	6983      	ldr	r3, [r0, #24]
   2514a:	b513      	push	{r0, r1, r4, lr}
   2514c:	0004      	movs	r4, r0
   2514e:	2b00      	cmp	r3, #0
   25150:	d128      	bne.n	251a4 <__sinit+0x5c>
   25152:	6483      	str	r3, [r0, #72]	; 0x48
   25154:	64c3      	str	r3, [r0, #76]	; 0x4c
   25156:	6503      	str	r3, [r0, #80]	; 0x50
   25158:	4b13      	ldr	r3, [pc, #76]	; (251a8 <__sinit+0x60>)
   2515a:	4a14      	ldr	r2, [pc, #80]	; (251ac <__sinit+0x64>)
   2515c:	681b      	ldr	r3, [r3, #0]
   2515e:	6282      	str	r2, [r0, #40]	; 0x28
   25160:	9301      	str	r3, [sp, #4]
   25162:	4298      	cmp	r0, r3
   25164:	d101      	bne.n	2516a <__sinit+0x22>
   25166:	2301      	movs	r3, #1
   25168:	6183      	str	r3, [r0, #24]
   2516a:	0020      	movs	r0, r4
   2516c:	f000 f820 	bl	251b0 <__sfp>
   25170:	6060      	str	r0, [r4, #4]
   25172:	0020      	movs	r0, r4
   25174:	f000 f81c 	bl	251b0 <__sfp>
   25178:	60a0      	str	r0, [r4, #8]
   2517a:	0020      	movs	r0, r4
   2517c:	f000 f818 	bl	251b0 <__sfp>
   25180:	2200      	movs	r2, #0
   25182:	60e0      	str	r0, [r4, #12]
   25184:	2104      	movs	r1, #4
   25186:	6860      	ldr	r0, [r4, #4]
   25188:	f7ff ffa4 	bl	250d4 <std.isra.0>
   2518c:	2201      	movs	r2, #1
   2518e:	2109      	movs	r1, #9
   25190:	68a0      	ldr	r0, [r4, #8]
   25192:	f7ff ff9f 	bl	250d4 <std.isra.0>
   25196:	2202      	movs	r2, #2
   25198:	2112      	movs	r1, #18
   2519a:	68e0      	ldr	r0, [r4, #12]
   2519c:	f7ff ff9a 	bl	250d4 <std.isra.0>
   251a0:	2301      	movs	r3, #1
   251a2:	61a3      	str	r3, [r4, #24]
   251a4:	bd13      	pop	{r0, r1, r4, pc}
   251a6:	46c0      	nop			; (mov r8, r8)
   251a8:	0002a0a0 	.word	0x0002a0a0
   251ac:	000250c5 	.word	0x000250c5

000251b0 <__sfp>:
   251b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251b2:	4b1e      	ldr	r3, [pc, #120]	; (2522c <__sfp+0x7c>)
   251b4:	0007      	movs	r7, r0
   251b6:	681e      	ldr	r6, [r3, #0]
   251b8:	69b3      	ldr	r3, [r6, #24]
   251ba:	2b00      	cmp	r3, #0
   251bc:	d102      	bne.n	251c4 <__sfp+0x14>
   251be:	0030      	movs	r0, r6
   251c0:	f7ff ffc2 	bl	25148 <__sinit>
   251c4:	3648      	adds	r6, #72	; 0x48
   251c6:	68b4      	ldr	r4, [r6, #8]
   251c8:	6873      	ldr	r3, [r6, #4]
   251ca:	3b01      	subs	r3, #1
   251cc:	d504      	bpl.n	251d8 <__sfp+0x28>
   251ce:	6833      	ldr	r3, [r6, #0]
   251d0:	2b00      	cmp	r3, #0
   251d2:	d007      	beq.n	251e4 <__sfp+0x34>
   251d4:	6836      	ldr	r6, [r6, #0]
   251d6:	e7f6      	b.n	251c6 <__sfp+0x16>
   251d8:	220c      	movs	r2, #12
   251da:	5ea5      	ldrsh	r5, [r4, r2]
   251dc:	2d00      	cmp	r5, #0
   251de:	d00d      	beq.n	251fc <__sfp+0x4c>
   251e0:	3468      	adds	r4, #104	; 0x68
   251e2:	e7f2      	b.n	251ca <__sfp+0x1a>
   251e4:	2104      	movs	r1, #4
   251e6:	0038      	movs	r0, r7
   251e8:	f7ff ff98 	bl	2511c <__sfmoreglue>
   251ec:	6030      	str	r0, [r6, #0]
   251ee:	2800      	cmp	r0, #0
   251f0:	d1f0      	bne.n	251d4 <__sfp+0x24>
   251f2:	230c      	movs	r3, #12
   251f4:	0004      	movs	r4, r0
   251f6:	603b      	str	r3, [r7, #0]
   251f8:	0020      	movs	r0, r4
   251fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   251fc:	2301      	movs	r3, #1
   251fe:	0020      	movs	r0, r4
   25200:	425b      	negs	r3, r3
   25202:	81e3      	strh	r3, [r4, #14]
   25204:	3302      	adds	r3, #2
   25206:	81a3      	strh	r3, [r4, #12]
   25208:	6665      	str	r5, [r4, #100]	; 0x64
   2520a:	6025      	str	r5, [r4, #0]
   2520c:	60a5      	str	r5, [r4, #8]
   2520e:	6065      	str	r5, [r4, #4]
   25210:	6125      	str	r5, [r4, #16]
   25212:	6165      	str	r5, [r4, #20]
   25214:	61a5      	str	r5, [r4, #24]
   25216:	2208      	movs	r2, #8
   25218:	0029      	movs	r1, r5
   2521a:	305c      	adds	r0, #92	; 0x5c
   2521c:	f7ff facb 	bl	247b6 <memset>
   25220:	6365      	str	r5, [r4, #52]	; 0x34
   25222:	63a5      	str	r5, [r4, #56]	; 0x38
   25224:	64a5      	str	r5, [r4, #72]	; 0x48
   25226:	64e5      	str	r5, [r4, #76]	; 0x4c
   25228:	e7e6      	b.n	251f8 <__sfp+0x48>
   2522a:	46c0      	nop			; (mov r8, r8)
   2522c:	0002a0a0 	.word	0x0002a0a0

00025230 <_fwalk_reent>:
   25230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25232:	0004      	movs	r4, r0
   25234:	0007      	movs	r7, r0
   25236:	2600      	movs	r6, #0
   25238:	9101      	str	r1, [sp, #4]
   2523a:	3448      	adds	r4, #72	; 0x48
   2523c:	2c00      	cmp	r4, #0
   2523e:	d101      	bne.n	25244 <_fwalk_reent+0x14>
   25240:	0030      	movs	r0, r6
   25242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   25244:	6863      	ldr	r3, [r4, #4]
   25246:	68a5      	ldr	r5, [r4, #8]
   25248:	9300      	str	r3, [sp, #0]
   2524a:	9b00      	ldr	r3, [sp, #0]
   2524c:	3b01      	subs	r3, #1
   2524e:	9300      	str	r3, [sp, #0]
   25250:	d501      	bpl.n	25256 <_fwalk_reent+0x26>
   25252:	6824      	ldr	r4, [r4, #0]
   25254:	e7f2      	b.n	2523c <_fwalk_reent+0xc>
   25256:	89ab      	ldrh	r3, [r5, #12]
   25258:	2b01      	cmp	r3, #1
   2525a:	d908      	bls.n	2526e <_fwalk_reent+0x3e>
   2525c:	220e      	movs	r2, #14
   2525e:	5eab      	ldrsh	r3, [r5, r2]
   25260:	3301      	adds	r3, #1
   25262:	d004      	beq.n	2526e <_fwalk_reent+0x3e>
   25264:	0029      	movs	r1, r5
   25266:	0038      	movs	r0, r7
   25268:	9b01      	ldr	r3, [sp, #4]
   2526a:	4798      	blx	r3
   2526c:	4306      	orrs	r6, r0
   2526e:	3568      	adds	r5, #104	; 0x68
   25270:	e7eb      	b.n	2524a <_fwalk_reent+0x1a>

00025272 <__locale_ctype_ptr_l>:
   25272:	30ec      	adds	r0, #236	; 0xec
   25274:	6800      	ldr	r0, [r0, #0]
   25276:	4770      	bx	lr

00025278 <__locale_ctype_ptr>:
   25278:	4b04      	ldr	r3, [pc, #16]	; (2528c <__locale_ctype_ptr+0x14>)
   2527a:	681b      	ldr	r3, [r3, #0]
   2527c:	6a1b      	ldr	r3, [r3, #32]
   2527e:	2b00      	cmp	r3, #0
   25280:	d100      	bne.n	25284 <__locale_ctype_ptr+0xc>
   25282:	4b03      	ldr	r3, [pc, #12]	; (25290 <__locale_ctype_ptr+0x18>)
   25284:	33ec      	adds	r3, #236	; 0xec
   25286:	6818      	ldr	r0, [r3, #0]
   25288:	4770      	bx	lr
   2528a:	46c0      	nop			; (mov r8, r8)
   2528c:	20000124 	.word	0x20000124
   25290:	20000188 	.word	0x20000188

00025294 <__swhatbuf_r>:
   25294:	b570      	push	{r4, r5, r6, lr}
   25296:	000e      	movs	r6, r1
   25298:	001d      	movs	r5, r3
   2529a:	230e      	movs	r3, #14
   2529c:	5ec9      	ldrsh	r1, [r1, r3]
   2529e:	b090      	sub	sp, #64	; 0x40
   252a0:	0014      	movs	r4, r2
   252a2:	2900      	cmp	r1, #0
   252a4:	da07      	bge.n	252b6 <__swhatbuf_r+0x22>
   252a6:	2300      	movs	r3, #0
   252a8:	602b      	str	r3, [r5, #0]
   252aa:	89b3      	ldrh	r3, [r6, #12]
   252ac:	061b      	lsls	r3, r3, #24
   252ae:	d411      	bmi.n	252d4 <__swhatbuf_r+0x40>
   252b0:	2380      	movs	r3, #128	; 0x80
   252b2:	00db      	lsls	r3, r3, #3
   252b4:	e00f      	b.n	252d6 <__swhatbuf_r+0x42>
   252b6:	aa01      	add	r2, sp, #4
   252b8:	f000 fbe6 	bl	25a88 <_fstat_r>
   252bc:	2800      	cmp	r0, #0
   252be:	dbf2      	blt.n	252a6 <__swhatbuf_r+0x12>
   252c0:	22f0      	movs	r2, #240	; 0xf0
   252c2:	9b02      	ldr	r3, [sp, #8]
   252c4:	0212      	lsls	r2, r2, #8
   252c6:	4013      	ands	r3, r2
   252c8:	4a05      	ldr	r2, [pc, #20]	; (252e0 <__swhatbuf_r+0x4c>)
   252ca:	189b      	adds	r3, r3, r2
   252cc:	425a      	negs	r2, r3
   252ce:	4153      	adcs	r3, r2
   252d0:	602b      	str	r3, [r5, #0]
   252d2:	e7ed      	b.n	252b0 <__swhatbuf_r+0x1c>
   252d4:	2340      	movs	r3, #64	; 0x40
   252d6:	2000      	movs	r0, #0
   252d8:	6023      	str	r3, [r4, #0]
   252da:	b010      	add	sp, #64	; 0x40
   252dc:	bd70      	pop	{r4, r5, r6, pc}
   252de:	46c0      	nop			; (mov r8, r8)
   252e0:	ffffe000 	.word	0xffffe000

000252e4 <__smakebuf_r>:
   252e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   252e6:	2602      	movs	r6, #2
   252e8:	898b      	ldrh	r3, [r1, #12]
   252ea:	0005      	movs	r5, r0
   252ec:	000c      	movs	r4, r1
   252ee:	4233      	tst	r3, r6
   252f0:	d006      	beq.n	25300 <__smakebuf_r+0x1c>
   252f2:	0023      	movs	r3, r4
   252f4:	3347      	adds	r3, #71	; 0x47
   252f6:	6023      	str	r3, [r4, #0]
   252f8:	6123      	str	r3, [r4, #16]
   252fa:	2301      	movs	r3, #1
   252fc:	6163      	str	r3, [r4, #20]
   252fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   25300:	ab01      	add	r3, sp, #4
   25302:	466a      	mov	r2, sp
   25304:	f7ff ffc6 	bl	25294 <__swhatbuf_r>
   25308:	9900      	ldr	r1, [sp, #0]
   2530a:	0007      	movs	r7, r0
   2530c:	0028      	movs	r0, r5
   2530e:	f7ff faa5 	bl	2485c <_malloc_r>
   25312:	2800      	cmp	r0, #0
   25314:	d108      	bne.n	25328 <__smakebuf_r+0x44>
   25316:	220c      	movs	r2, #12
   25318:	5ea3      	ldrsh	r3, [r4, r2]
   2531a:	059a      	lsls	r2, r3, #22
   2531c:	d4ef      	bmi.n	252fe <__smakebuf_r+0x1a>
   2531e:	2203      	movs	r2, #3
   25320:	4393      	bics	r3, r2
   25322:	431e      	orrs	r6, r3
   25324:	81a6      	strh	r6, [r4, #12]
   25326:	e7e4      	b.n	252f2 <__smakebuf_r+0xe>
   25328:	4b0f      	ldr	r3, [pc, #60]	; (25368 <__smakebuf_r+0x84>)
   2532a:	62ab      	str	r3, [r5, #40]	; 0x28
   2532c:	2380      	movs	r3, #128	; 0x80
   2532e:	89a2      	ldrh	r2, [r4, #12]
   25330:	6020      	str	r0, [r4, #0]
   25332:	4313      	orrs	r3, r2
   25334:	81a3      	strh	r3, [r4, #12]
   25336:	9b00      	ldr	r3, [sp, #0]
   25338:	6120      	str	r0, [r4, #16]
   2533a:	6163      	str	r3, [r4, #20]
   2533c:	9b01      	ldr	r3, [sp, #4]
   2533e:	2b00      	cmp	r3, #0
   25340:	d00d      	beq.n	2535e <__smakebuf_r+0x7a>
   25342:	230e      	movs	r3, #14
   25344:	5ee1      	ldrsh	r1, [r4, r3]
   25346:	0028      	movs	r0, r5
   25348:	f000 fbb0 	bl	25aac <_isatty_r>
   2534c:	2800      	cmp	r0, #0
   2534e:	d006      	beq.n	2535e <__smakebuf_r+0x7a>
   25350:	2203      	movs	r2, #3
   25352:	89a3      	ldrh	r3, [r4, #12]
   25354:	4393      	bics	r3, r2
   25356:	001a      	movs	r2, r3
   25358:	2301      	movs	r3, #1
   2535a:	4313      	orrs	r3, r2
   2535c:	81a3      	strh	r3, [r4, #12]
   2535e:	89a0      	ldrh	r0, [r4, #12]
   25360:	4338      	orrs	r0, r7
   25362:	81a0      	strh	r0, [r4, #12]
   25364:	e7cb      	b.n	252fe <__smakebuf_r+0x1a>
   25366:	46c0      	nop			; (mov r8, r8)
   25368:	000250c5 	.word	0x000250c5

0002536c <__ascii_mbtowc>:
   2536c:	b082      	sub	sp, #8
   2536e:	2900      	cmp	r1, #0
   25370:	d100      	bne.n	25374 <__ascii_mbtowc+0x8>
   25372:	a901      	add	r1, sp, #4
   25374:	1e10      	subs	r0, r2, #0
   25376:	d006      	beq.n	25386 <__ascii_mbtowc+0x1a>
   25378:	2b00      	cmp	r3, #0
   2537a:	d006      	beq.n	2538a <__ascii_mbtowc+0x1e>
   2537c:	7813      	ldrb	r3, [r2, #0]
   2537e:	600b      	str	r3, [r1, #0]
   25380:	7810      	ldrb	r0, [r2, #0]
   25382:	1e43      	subs	r3, r0, #1
   25384:	4198      	sbcs	r0, r3
   25386:	b002      	add	sp, #8
   25388:	4770      	bx	lr
   2538a:	2002      	movs	r0, #2
   2538c:	4240      	negs	r0, r0
   2538e:	e7fa      	b.n	25386 <__ascii_mbtowc+0x1a>

00025390 <__malloc_lock>:
   25390:	4770      	bx	lr

00025392 <__malloc_unlock>:
   25392:	4770      	bx	lr

00025394 <__ssputs_r>:
   25394:	b5f0      	push	{r4, r5, r6, r7, lr}
   25396:	688e      	ldr	r6, [r1, #8]
   25398:	b085      	sub	sp, #20
   2539a:	0007      	movs	r7, r0
   2539c:	000c      	movs	r4, r1
   2539e:	9203      	str	r2, [sp, #12]
   253a0:	9301      	str	r3, [sp, #4]
   253a2:	429e      	cmp	r6, r3
   253a4:	d839      	bhi.n	2541a <__ssputs_r+0x86>
   253a6:	2390      	movs	r3, #144	; 0x90
   253a8:	898a      	ldrh	r2, [r1, #12]
   253aa:	00db      	lsls	r3, r3, #3
   253ac:	421a      	tst	r2, r3
   253ae:	d034      	beq.n	2541a <__ssputs_r+0x86>
   253b0:	2503      	movs	r5, #3
   253b2:	6909      	ldr	r1, [r1, #16]
   253b4:	6823      	ldr	r3, [r4, #0]
   253b6:	1a5b      	subs	r3, r3, r1
   253b8:	9302      	str	r3, [sp, #8]
   253ba:	6963      	ldr	r3, [r4, #20]
   253bc:	9802      	ldr	r0, [sp, #8]
   253be:	435d      	muls	r5, r3
   253c0:	0feb      	lsrs	r3, r5, #31
   253c2:	195d      	adds	r5, r3, r5
   253c4:	9b01      	ldr	r3, [sp, #4]
   253c6:	106d      	asrs	r5, r5, #1
   253c8:	3301      	adds	r3, #1
   253ca:	181b      	adds	r3, r3, r0
   253cc:	42ab      	cmp	r3, r5
   253ce:	d900      	bls.n	253d2 <__ssputs_r+0x3e>
   253d0:	001d      	movs	r5, r3
   253d2:	0553      	lsls	r3, r2, #21
   253d4:	d532      	bpl.n	2543c <__ssputs_r+0xa8>
   253d6:	0029      	movs	r1, r5
   253d8:	0038      	movs	r0, r7
   253da:	f7ff fa3f 	bl	2485c <_malloc_r>
   253de:	1e06      	subs	r6, r0, #0
   253e0:	d109      	bne.n	253f6 <__ssputs_r+0x62>
   253e2:	230c      	movs	r3, #12
   253e4:	603b      	str	r3, [r7, #0]
   253e6:	2340      	movs	r3, #64	; 0x40
   253e8:	2001      	movs	r0, #1
   253ea:	89a2      	ldrh	r2, [r4, #12]
   253ec:	4240      	negs	r0, r0
   253ee:	4313      	orrs	r3, r2
   253f0:	81a3      	strh	r3, [r4, #12]
   253f2:	b005      	add	sp, #20
   253f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   253f6:	9a02      	ldr	r2, [sp, #8]
   253f8:	6921      	ldr	r1, [r4, #16]
   253fa:	f7ff f9c1 	bl	24780 <memcpy>
   253fe:	89a3      	ldrh	r3, [r4, #12]
   25400:	4a14      	ldr	r2, [pc, #80]	; (25454 <__ssputs_r+0xc0>)
   25402:	401a      	ands	r2, r3
   25404:	2380      	movs	r3, #128	; 0x80
   25406:	4313      	orrs	r3, r2
   25408:	81a3      	strh	r3, [r4, #12]
   2540a:	9b02      	ldr	r3, [sp, #8]
   2540c:	6126      	str	r6, [r4, #16]
   2540e:	18f6      	adds	r6, r6, r3
   25410:	6026      	str	r6, [r4, #0]
   25412:	6165      	str	r5, [r4, #20]
   25414:	9e01      	ldr	r6, [sp, #4]
   25416:	1aed      	subs	r5, r5, r3
   25418:	60a5      	str	r5, [r4, #8]
   2541a:	9b01      	ldr	r3, [sp, #4]
   2541c:	42b3      	cmp	r3, r6
   2541e:	d200      	bcs.n	25422 <__ssputs_r+0x8e>
   25420:	001e      	movs	r6, r3
   25422:	0032      	movs	r2, r6
   25424:	9903      	ldr	r1, [sp, #12]
   25426:	6820      	ldr	r0, [r4, #0]
   25428:	f7ff f9b3 	bl	24792 <memmove>
   2542c:	68a3      	ldr	r3, [r4, #8]
   2542e:	2000      	movs	r0, #0
   25430:	1b9b      	subs	r3, r3, r6
   25432:	60a3      	str	r3, [r4, #8]
   25434:	6823      	ldr	r3, [r4, #0]
   25436:	199e      	adds	r6, r3, r6
   25438:	6026      	str	r6, [r4, #0]
   2543a:	e7da      	b.n	253f2 <__ssputs_r+0x5e>
   2543c:	002a      	movs	r2, r5
   2543e:	0038      	movs	r0, r7
   25440:	f000 fb65 	bl	25b0e <_realloc_r>
   25444:	1e06      	subs	r6, r0, #0
   25446:	d1e0      	bne.n	2540a <__ssputs_r+0x76>
   25448:	6921      	ldr	r1, [r4, #16]
   2544a:	0038      	movs	r0, r7
   2544c:	f7ff f9bc 	bl	247c8 <_free_r>
   25450:	e7c7      	b.n	253e2 <__ssputs_r+0x4e>
   25452:	46c0      	nop			; (mov r8, r8)
   25454:	fffffb7f 	.word	0xfffffb7f

00025458 <_svfiprintf_r>:
   25458:	b5f0      	push	{r4, r5, r6, r7, lr}
   2545a:	b09f      	sub	sp, #124	; 0x7c
   2545c:	9002      	str	r0, [sp, #8]
   2545e:	9305      	str	r3, [sp, #20]
   25460:	898b      	ldrh	r3, [r1, #12]
   25462:	000f      	movs	r7, r1
   25464:	0016      	movs	r6, r2
   25466:	061b      	lsls	r3, r3, #24
   25468:	d511      	bpl.n	2548e <_svfiprintf_r+0x36>
   2546a:	690b      	ldr	r3, [r1, #16]
   2546c:	2b00      	cmp	r3, #0
   2546e:	d10e      	bne.n	2548e <_svfiprintf_r+0x36>
   25470:	2140      	movs	r1, #64	; 0x40
   25472:	f7ff f9f3 	bl	2485c <_malloc_r>
   25476:	6038      	str	r0, [r7, #0]
   25478:	6138      	str	r0, [r7, #16]
   2547a:	2800      	cmp	r0, #0
   2547c:	d105      	bne.n	2548a <_svfiprintf_r+0x32>
   2547e:	230c      	movs	r3, #12
   25480:	9a02      	ldr	r2, [sp, #8]
   25482:	3801      	subs	r0, #1
   25484:	6013      	str	r3, [r2, #0]
   25486:	b01f      	add	sp, #124	; 0x7c
   25488:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2548a:	2340      	movs	r3, #64	; 0x40
   2548c:	617b      	str	r3, [r7, #20]
   2548e:	2300      	movs	r3, #0
   25490:	ad06      	add	r5, sp, #24
   25492:	616b      	str	r3, [r5, #20]
   25494:	3320      	adds	r3, #32
   25496:	766b      	strb	r3, [r5, #25]
   25498:	3310      	adds	r3, #16
   2549a:	76ab      	strb	r3, [r5, #26]
   2549c:	0034      	movs	r4, r6
   2549e:	7823      	ldrb	r3, [r4, #0]
   254a0:	2b00      	cmp	r3, #0
   254a2:	d147      	bne.n	25534 <_svfiprintf_r+0xdc>
   254a4:	1ba3      	subs	r3, r4, r6
   254a6:	9304      	str	r3, [sp, #16]
   254a8:	d00d      	beq.n	254c6 <_svfiprintf_r+0x6e>
   254aa:	1ba3      	subs	r3, r4, r6
   254ac:	0032      	movs	r2, r6
   254ae:	0039      	movs	r1, r7
   254b0:	9802      	ldr	r0, [sp, #8]
   254b2:	f7ff ff6f 	bl	25394 <__ssputs_r>
   254b6:	1c43      	adds	r3, r0, #1
   254b8:	d100      	bne.n	254bc <_svfiprintf_r+0x64>
   254ba:	e0b5      	b.n	25628 <_svfiprintf_r+0x1d0>
   254bc:	696a      	ldr	r2, [r5, #20]
   254be:	9b04      	ldr	r3, [sp, #16]
   254c0:	4694      	mov	ip, r2
   254c2:	4463      	add	r3, ip
   254c4:	616b      	str	r3, [r5, #20]
   254c6:	7823      	ldrb	r3, [r4, #0]
   254c8:	2b00      	cmp	r3, #0
   254ca:	d100      	bne.n	254ce <_svfiprintf_r+0x76>
   254cc:	e0ac      	b.n	25628 <_svfiprintf_r+0x1d0>
   254ce:	2201      	movs	r2, #1
   254d0:	2300      	movs	r3, #0
   254d2:	4252      	negs	r2, r2
   254d4:	606a      	str	r2, [r5, #4]
   254d6:	a902      	add	r1, sp, #8
   254d8:	3254      	adds	r2, #84	; 0x54
   254da:	1852      	adds	r2, r2, r1
   254dc:	3401      	adds	r4, #1
   254de:	602b      	str	r3, [r5, #0]
   254e0:	60eb      	str	r3, [r5, #12]
   254e2:	60ab      	str	r3, [r5, #8]
   254e4:	7013      	strb	r3, [r2, #0]
   254e6:	65ab      	str	r3, [r5, #88]	; 0x58
   254e8:	4e58      	ldr	r6, [pc, #352]	; (2564c <_svfiprintf_r+0x1f4>)
   254ea:	2205      	movs	r2, #5
   254ec:	7821      	ldrb	r1, [r4, #0]
   254ee:	0030      	movs	r0, r6
   254f0:	f000 fb02 	bl	25af8 <memchr>
   254f4:	1c62      	adds	r2, r4, #1
   254f6:	2800      	cmp	r0, #0
   254f8:	d120      	bne.n	2553c <_svfiprintf_r+0xe4>
   254fa:	6829      	ldr	r1, [r5, #0]
   254fc:	06cb      	lsls	r3, r1, #27
   254fe:	d504      	bpl.n	2550a <_svfiprintf_r+0xb2>
   25500:	2353      	movs	r3, #83	; 0x53
   25502:	ae02      	add	r6, sp, #8
   25504:	3020      	adds	r0, #32
   25506:	199b      	adds	r3, r3, r6
   25508:	7018      	strb	r0, [r3, #0]
   2550a:	070b      	lsls	r3, r1, #28
   2550c:	d504      	bpl.n	25518 <_svfiprintf_r+0xc0>
   2550e:	2353      	movs	r3, #83	; 0x53
   25510:	202b      	movs	r0, #43	; 0x2b
   25512:	ae02      	add	r6, sp, #8
   25514:	199b      	adds	r3, r3, r6
   25516:	7018      	strb	r0, [r3, #0]
   25518:	7823      	ldrb	r3, [r4, #0]
   2551a:	2b2a      	cmp	r3, #42	; 0x2a
   2551c:	d016      	beq.n	2554c <_svfiprintf_r+0xf4>
   2551e:	2000      	movs	r0, #0
   25520:	210a      	movs	r1, #10
   25522:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25524:	7822      	ldrb	r2, [r4, #0]
   25526:	3a30      	subs	r2, #48	; 0x30
   25528:	2a09      	cmp	r2, #9
   2552a:	d955      	bls.n	255d8 <_svfiprintf_r+0x180>
   2552c:	2800      	cmp	r0, #0
   2552e:	d015      	beq.n	2555c <_svfiprintf_r+0x104>
   25530:	9309      	str	r3, [sp, #36]	; 0x24
   25532:	e013      	b.n	2555c <_svfiprintf_r+0x104>
   25534:	2b25      	cmp	r3, #37	; 0x25
   25536:	d0b5      	beq.n	254a4 <_svfiprintf_r+0x4c>
   25538:	3401      	adds	r4, #1
   2553a:	e7b0      	b.n	2549e <_svfiprintf_r+0x46>
   2553c:	2301      	movs	r3, #1
   2553e:	1b80      	subs	r0, r0, r6
   25540:	4083      	lsls	r3, r0
   25542:	6829      	ldr	r1, [r5, #0]
   25544:	0014      	movs	r4, r2
   25546:	430b      	orrs	r3, r1
   25548:	602b      	str	r3, [r5, #0]
   2554a:	e7cd      	b.n	254e8 <_svfiprintf_r+0x90>
   2554c:	9b05      	ldr	r3, [sp, #20]
   2554e:	1d18      	adds	r0, r3, #4
   25550:	681b      	ldr	r3, [r3, #0]
   25552:	9005      	str	r0, [sp, #20]
   25554:	2b00      	cmp	r3, #0
   25556:	db39      	blt.n	255cc <_svfiprintf_r+0x174>
   25558:	9309      	str	r3, [sp, #36]	; 0x24
   2555a:	0014      	movs	r4, r2
   2555c:	7823      	ldrb	r3, [r4, #0]
   2555e:	2b2e      	cmp	r3, #46	; 0x2e
   25560:	d10b      	bne.n	2557a <_svfiprintf_r+0x122>
   25562:	7863      	ldrb	r3, [r4, #1]
   25564:	1c62      	adds	r2, r4, #1
   25566:	2b2a      	cmp	r3, #42	; 0x2a
   25568:	d13e      	bne.n	255e8 <_svfiprintf_r+0x190>
   2556a:	9b05      	ldr	r3, [sp, #20]
   2556c:	3402      	adds	r4, #2
   2556e:	1d1a      	adds	r2, r3, #4
   25570:	681b      	ldr	r3, [r3, #0]
   25572:	9205      	str	r2, [sp, #20]
   25574:	2b00      	cmp	r3, #0
   25576:	db34      	blt.n	255e2 <_svfiprintf_r+0x18a>
   25578:	9307      	str	r3, [sp, #28]
   2557a:	4e35      	ldr	r6, [pc, #212]	; (25650 <_svfiprintf_r+0x1f8>)
   2557c:	7821      	ldrb	r1, [r4, #0]
   2557e:	2203      	movs	r2, #3
   25580:	0030      	movs	r0, r6
   25582:	f000 fab9 	bl	25af8 <memchr>
   25586:	2800      	cmp	r0, #0
   25588:	d006      	beq.n	25598 <_svfiprintf_r+0x140>
   2558a:	2340      	movs	r3, #64	; 0x40
   2558c:	1b80      	subs	r0, r0, r6
   2558e:	4083      	lsls	r3, r0
   25590:	682a      	ldr	r2, [r5, #0]
   25592:	3401      	adds	r4, #1
   25594:	4313      	orrs	r3, r2
   25596:	602b      	str	r3, [r5, #0]
   25598:	7821      	ldrb	r1, [r4, #0]
   2559a:	2206      	movs	r2, #6
   2559c:	482d      	ldr	r0, [pc, #180]	; (25654 <_svfiprintf_r+0x1fc>)
   2559e:	1c66      	adds	r6, r4, #1
   255a0:	7629      	strb	r1, [r5, #24]
   255a2:	f000 faa9 	bl	25af8 <memchr>
   255a6:	2800      	cmp	r0, #0
   255a8:	d046      	beq.n	25638 <_svfiprintf_r+0x1e0>
   255aa:	4b2b      	ldr	r3, [pc, #172]	; (25658 <_svfiprintf_r+0x200>)
   255ac:	2b00      	cmp	r3, #0
   255ae:	d12f      	bne.n	25610 <_svfiprintf_r+0x1b8>
   255b0:	6829      	ldr	r1, [r5, #0]
   255b2:	9b05      	ldr	r3, [sp, #20]
   255b4:	2207      	movs	r2, #7
   255b6:	05c9      	lsls	r1, r1, #23
   255b8:	d528      	bpl.n	2560c <_svfiprintf_r+0x1b4>
   255ba:	189b      	adds	r3, r3, r2
   255bc:	4393      	bics	r3, r2
   255be:	3308      	adds	r3, #8
   255c0:	9305      	str	r3, [sp, #20]
   255c2:	696b      	ldr	r3, [r5, #20]
   255c4:	9a03      	ldr	r2, [sp, #12]
   255c6:	189b      	adds	r3, r3, r2
   255c8:	616b      	str	r3, [r5, #20]
   255ca:	e767      	b.n	2549c <_svfiprintf_r+0x44>
   255cc:	425b      	negs	r3, r3
   255ce:	60eb      	str	r3, [r5, #12]
   255d0:	2302      	movs	r3, #2
   255d2:	430b      	orrs	r3, r1
   255d4:	602b      	str	r3, [r5, #0]
   255d6:	e7c0      	b.n	2555a <_svfiprintf_r+0x102>
   255d8:	434b      	muls	r3, r1
   255da:	3401      	adds	r4, #1
   255dc:	189b      	adds	r3, r3, r2
   255de:	2001      	movs	r0, #1
   255e0:	e7a0      	b.n	25524 <_svfiprintf_r+0xcc>
   255e2:	2301      	movs	r3, #1
   255e4:	425b      	negs	r3, r3
   255e6:	e7c7      	b.n	25578 <_svfiprintf_r+0x120>
   255e8:	2300      	movs	r3, #0
   255ea:	0014      	movs	r4, r2
   255ec:	200a      	movs	r0, #10
   255ee:	001a      	movs	r2, r3
   255f0:	606b      	str	r3, [r5, #4]
   255f2:	7821      	ldrb	r1, [r4, #0]
   255f4:	3930      	subs	r1, #48	; 0x30
   255f6:	2909      	cmp	r1, #9
   255f8:	d903      	bls.n	25602 <_svfiprintf_r+0x1aa>
   255fa:	2b00      	cmp	r3, #0
   255fc:	d0bd      	beq.n	2557a <_svfiprintf_r+0x122>
   255fe:	9207      	str	r2, [sp, #28]
   25600:	e7bb      	b.n	2557a <_svfiprintf_r+0x122>
   25602:	4342      	muls	r2, r0
   25604:	3401      	adds	r4, #1
   25606:	1852      	adds	r2, r2, r1
   25608:	2301      	movs	r3, #1
   2560a:	e7f2      	b.n	255f2 <_svfiprintf_r+0x19a>
   2560c:	3307      	adds	r3, #7
   2560e:	e7d5      	b.n	255bc <_svfiprintf_r+0x164>
   25610:	ab05      	add	r3, sp, #20
   25612:	9300      	str	r3, [sp, #0]
   25614:	003a      	movs	r2, r7
   25616:	4b11      	ldr	r3, [pc, #68]	; (2565c <_svfiprintf_r+0x204>)
   25618:	0029      	movs	r1, r5
   2561a:	9802      	ldr	r0, [sp, #8]
   2561c:	e000      	b.n	25620 <_svfiprintf_r+0x1c8>
   2561e:	bf00      	nop
   25620:	9003      	str	r0, [sp, #12]
   25622:	9b03      	ldr	r3, [sp, #12]
   25624:	3301      	adds	r3, #1
   25626:	d1cc      	bne.n	255c2 <_svfiprintf_r+0x16a>
   25628:	89bb      	ldrh	r3, [r7, #12]
   2562a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2562c:	065b      	lsls	r3, r3, #25
   2562e:	d400      	bmi.n	25632 <_svfiprintf_r+0x1da>
   25630:	e729      	b.n	25486 <_svfiprintf_r+0x2e>
   25632:	2001      	movs	r0, #1
   25634:	4240      	negs	r0, r0
   25636:	e726      	b.n	25486 <_svfiprintf_r+0x2e>
   25638:	ab05      	add	r3, sp, #20
   2563a:	9300      	str	r3, [sp, #0]
   2563c:	003a      	movs	r2, r7
   2563e:	4b07      	ldr	r3, [pc, #28]	; (2565c <_svfiprintf_r+0x204>)
   25640:	0029      	movs	r1, r5
   25642:	9802      	ldr	r0, [sp, #8]
   25644:	f000 f87a 	bl	2573c <_printf_i>
   25648:	e7ea      	b.n	25620 <_svfiprintf_r+0x1c8>
   2564a:	46c0      	nop			; (mov r8, r8)
   2564c:	0002a10e 	.word	0x0002a10e
   25650:	0002a114 	.word	0x0002a114
   25654:	0002a118 	.word	0x0002a118
   25658:	00000000 	.word	0x00000000
   2565c:	00025395 	.word	0x00025395

00025660 <_printf_common>:
   25660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25662:	0015      	movs	r5, r2
   25664:	9301      	str	r3, [sp, #4]
   25666:	688a      	ldr	r2, [r1, #8]
   25668:	690b      	ldr	r3, [r1, #16]
   2566a:	9000      	str	r0, [sp, #0]
   2566c:	000c      	movs	r4, r1
   2566e:	4293      	cmp	r3, r2
   25670:	da00      	bge.n	25674 <_printf_common+0x14>
   25672:	0013      	movs	r3, r2
   25674:	0022      	movs	r2, r4
   25676:	602b      	str	r3, [r5, #0]
   25678:	3243      	adds	r2, #67	; 0x43
   2567a:	7812      	ldrb	r2, [r2, #0]
   2567c:	2a00      	cmp	r2, #0
   2567e:	d001      	beq.n	25684 <_printf_common+0x24>
   25680:	3301      	adds	r3, #1
   25682:	602b      	str	r3, [r5, #0]
   25684:	6823      	ldr	r3, [r4, #0]
   25686:	069b      	lsls	r3, r3, #26
   25688:	d502      	bpl.n	25690 <_printf_common+0x30>
   2568a:	682b      	ldr	r3, [r5, #0]
   2568c:	3302      	adds	r3, #2
   2568e:	602b      	str	r3, [r5, #0]
   25690:	2706      	movs	r7, #6
   25692:	6823      	ldr	r3, [r4, #0]
   25694:	401f      	ands	r7, r3
   25696:	d027      	beq.n	256e8 <_printf_common+0x88>
   25698:	0023      	movs	r3, r4
   2569a:	3343      	adds	r3, #67	; 0x43
   2569c:	781b      	ldrb	r3, [r3, #0]
   2569e:	1e5a      	subs	r2, r3, #1
   256a0:	4193      	sbcs	r3, r2
   256a2:	6822      	ldr	r2, [r4, #0]
   256a4:	0692      	lsls	r2, r2, #26
   256a6:	d430      	bmi.n	2570a <_printf_common+0xaa>
   256a8:	0022      	movs	r2, r4
   256aa:	9901      	ldr	r1, [sp, #4]
   256ac:	3243      	adds	r2, #67	; 0x43
   256ae:	9800      	ldr	r0, [sp, #0]
   256b0:	9e08      	ldr	r6, [sp, #32]
   256b2:	47b0      	blx	r6
   256b4:	1c43      	adds	r3, r0, #1
   256b6:	d025      	beq.n	25704 <_printf_common+0xa4>
   256b8:	2306      	movs	r3, #6
   256ba:	6820      	ldr	r0, [r4, #0]
   256bc:	682a      	ldr	r2, [r5, #0]
   256be:	68e1      	ldr	r1, [r4, #12]
   256c0:	4003      	ands	r3, r0
   256c2:	2500      	movs	r5, #0
   256c4:	2b04      	cmp	r3, #4
   256c6:	d103      	bne.n	256d0 <_printf_common+0x70>
   256c8:	1a8d      	subs	r5, r1, r2
   256ca:	43eb      	mvns	r3, r5
   256cc:	17db      	asrs	r3, r3, #31
   256ce:	401d      	ands	r5, r3
   256d0:	68a3      	ldr	r3, [r4, #8]
   256d2:	6922      	ldr	r2, [r4, #16]
   256d4:	4293      	cmp	r3, r2
   256d6:	dd01      	ble.n	256dc <_printf_common+0x7c>
   256d8:	1a9b      	subs	r3, r3, r2
   256da:	18ed      	adds	r5, r5, r3
   256dc:	2700      	movs	r7, #0
   256de:	42bd      	cmp	r5, r7
   256e0:	d120      	bne.n	25724 <_printf_common+0xc4>
   256e2:	2000      	movs	r0, #0
   256e4:	e010      	b.n	25708 <_printf_common+0xa8>
   256e6:	3701      	adds	r7, #1
   256e8:	68e3      	ldr	r3, [r4, #12]
   256ea:	682a      	ldr	r2, [r5, #0]
   256ec:	1a9b      	subs	r3, r3, r2
   256ee:	429f      	cmp	r7, r3
   256f0:	dad2      	bge.n	25698 <_printf_common+0x38>
   256f2:	0022      	movs	r2, r4
   256f4:	2301      	movs	r3, #1
   256f6:	3219      	adds	r2, #25
   256f8:	9901      	ldr	r1, [sp, #4]
   256fa:	9800      	ldr	r0, [sp, #0]
   256fc:	9e08      	ldr	r6, [sp, #32]
   256fe:	47b0      	blx	r6
   25700:	1c43      	adds	r3, r0, #1
   25702:	d1f0      	bne.n	256e6 <_printf_common+0x86>
   25704:	2001      	movs	r0, #1
   25706:	4240      	negs	r0, r0
   25708:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2570a:	2030      	movs	r0, #48	; 0x30
   2570c:	18e1      	adds	r1, r4, r3
   2570e:	3143      	adds	r1, #67	; 0x43
   25710:	7008      	strb	r0, [r1, #0]
   25712:	0021      	movs	r1, r4
   25714:	1c5a      	adds	r2, r3, #1
   25716:	3145      	adds	r1, #69	; 0x45
   25718:	7809      	ldrb	r1, [r1, #0]
   2571a:	18a2      	adds	r2, r4, r2
   2571c:	3243      	adds	r2, #67	; 0x43
   2571e:	3302      	adds	r3, #2
   25720:	7011      	strb	r1, [r2, #0]
   25722:	e7c1      	b.n	256a8 <_printf_common+0x48>
   25724:	0022      	movs	r2, r4
   25726:	2301      	movs	r3, #1
   25728:	321a      	adds	r2, #26
   2572a:	9901      	ldr	r1, [sp, #4]
   2572c:	9800      	ldr	r0, [sp, #0]
   2572e:	9e08      	ldr	r6, [sp, #32]
   25730:	47b0      	blx	r6
   25732:	1c43      	adds	r3, r0, #1
   25734:	d0e6      	beq.n	25704 <_printf_common+0xa4>
   25736:	3701      	adds	r7, #1
   25738:	e7d1      	b.n	256de <_printf_common+0x7e>
	...

0002573c <_printf_i>:
   2573c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2573e:	b08b      	sub	sp, #44	; 0x2c
   25740:	9206      	str	r2, [sp, #24]
   25742:	000a      	movs	r2, r1
   25744:	3243      	adds	r2, #67	; 0x43
   25746:	9307      	str	r3, [sp, #28]
   25748:	9005      	str	r0, [sp, #20]
   2574a:	9204      	str	r2, [sp, #16]
   2574c:	7e0a      	ldrb	r2, [r1, #24]
   2574e:	000c      	movs	r4, r1
   25750:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25752:	2a6e      	cmp	r2, #110	; 0x6e
   25754:	d100      	bne.n	25758 <_printf_i+0x1c>
   25756:	e08f      	b.n	25878 <_printf_i+0x13c>
   25758:	d817      	bhi.n	2578a <_printf_i+0x4e>
   2575a:	2a63      	cmp	r2, #99	; 0x63
   2575c:	d02c      	beq.n	257b8 <_printf_i+0x7c>
   2575e:	d808      	bhi.n	25772 <_printf_i+0x36>
   25760:	2a00      	cmp	r2, #0
   25762:	d100      	bne.n	25766 <_printf_i+0x2a>
   25764:	e099      	b.n	2589a <_printf_i+0x15e>
   25766:	2a58      	cmp	r2, #88	; 0x58
   25768:	d054      	beq.n	25814 <_printf_i+0xd8>
   2576a:	0026      	movs	r6, r4
   2576c:	3642      	adds	r6, #66	; 0x42
   2576e:	7032      	strb	r2, [r6, #0]
   25770:	e029      	b.n	257c6 <_printf_i+0x8a>
   25772:	2a64      	cmp	r2, #100	; 0x64
   25774:	d001      	beq.n	2577a <_printf_i+0x3e>
   25776:	2a69      	cmp	r2, #105	; 0x69
   25778:	d1f7      	bne.n	2576a <_printf_i+0x2e>
   2577a:	6821      	ldr	r1, [r4, #0]
   2577c:	681a      	ldr	r2, [r3, #0]
   2577e:	0608      	lsls	r0, r1, #24
   25780:	d523      	bpl.n	257ca <_printf_i+0x8e>
   25782:	1d11      	adds	r1, r2, #4
   25784:	6019      	str	r1, [r3, #0]
   25786:	6815      	ldr	r5, [r2, #0]
   25788:	e025      	b.n	257d6 <_printf_i+0x9a>
   2578a:	2a73      	cmp	r2, #115	; 0x73
   2578c:	d100      	bne.n	25790 <_printf_i+0x54>
   2578e:	e088      	b.n	258a2 <_printf_i+0x166>
   25790:	d808      	bhi.n	257a4 <_printf_i+0x68>
   25792:	2a6f      	cmp	r2, #111	; 0x6f
   25794:	d029      	beq.n	257ea <_printf_i+0xae>
   25796:	2a70      	cmp	r2, #112	; 0x70
   25798:	d1e7      	bne.n	2576a <_printf_i+0x2e>
   2579a:	2220      	movs	r2, #32
   2579c:	6809      	ldr	r1, [r1, #0]
   2579e:	430a      	orrs	r2, r1
   257a0:	6022      	str	r2, [r4, #0]
   257a2:	e003      	b.n	257ac <_printf_i+0x70>
   257a4:	2a75      	cmp	r2, #117	; 0x75
   257a6:	d020      	beq.n	257ea <_printf_i+0xae>
   257a8:	2a78      	cmp	r2, #120	; 0x78
   257aa:	d1de      	bne.n	2576a <_printf_i+0x2e>
   257ac:	0022      	movs	r2, r4
   257ae:	2178      	movs	r1, #120	; 0x78
   257b0:	3245      	adds	r2, #69	; 0x45
   257b2:	7011      	strb	r1, [r2, #0]
   257b4:	4a6c      	ldr	r2, [pc, #432]	; (25968 <_printf_i+0x22c>)
   257b6:	e030      	b.n	2581a <_printf_i+0xde>
   257b8:	000e      	movs	r6, r1
   257ba:	681a      	ldr	r2, [r3, #0]
   257bc:	3642      	adds	r6, #66	; 0x42
   257be:	1d11      	adds	r1, r2, #4
   257c0:	6019      	str	r1, [r3, #0]
   257c2:	6813      	ldr	r3, [r2, #0]
   257c4:	7033      	strb	r3, [r6, #0]
   257c6:	2301      	movs	r3, #1
   257c8:	e079      	b.n	258be <_printf_i+0x182>
   257ca:	0649      	lsls	r1, r1, #25
   257cc:	d5d9      	bpl.n	25782 <_printf_i+0x46>
   257ce:	1d11      	adds	r1, r2, #4
   257d0:	6019      	str	r1, [r3, #0]
   257d2:	2300      	movs	r3, #0
   257d4:	5ed5      	ldrsh	r5, [r2, r3]
   257d6:	2d00      	cmp	r5, #0
   257d8:	da03      	bge.n	257e2 <_printf_i+0xa6>
   257da:	232d      	movs	r3, #45	; 0x2d
   257dc:	9a04      	ldr	r2, [sp, #16]
   257de:	426d      	negs	r5, r5
   257e0:	7013      	strb	r3, [r2, #0]
   257e2:	4b62      	ldr	r3, [pc, #392]	; (2596c <_printf_i+0x230>)
   257e4:	270a      	movs	r7, #10
   257e6:	9303      	str	r3, [sp, #12]
   257e8:	e02f      	b.n	2584a <_printf_i+0x10e>
   257ea:	6820      	ldr	r0, [r4, #0]
   257ec:	6819      	ldr	r1, [r3, #0]
   257ee:	0605      	lsls	r5, r0, #24
   257f0:	d503      	bpl.n	257fa <_printf_i+0xbe>
   257f2:	1d08      	adds	r0, r1, #4
   257f4:	6018      	str	r0, [r3, #0]
   257f6:	680d      	ldr	r5, [r1, #0]
   257f8:	e005      	b.n	25806 <_printf_i+0xca>
   257fa:	0640      	lsls	r0, r0, #25
   257fc:	d5f9      	bpl.n	257f2 <_printf_i+0xb6>
   257fe:	680d      	ldr	r5, [r1, #0]
   25800:	1d08      	adds	r0, r1, #4
   25802:	6018      	str	r0, [r3, #0]
   25804:	b2ad      	uxth	r5, r5
   25806:	4b59      	ldr	r3, [pc, #356]	; (2596c <_printf_i+0x230>)
   25808:	2708      	movs	r7, #8
   2580a:	9303      	str	r3, [sp, #12]
   2580c:	2a6f      	cmp	r2, #111	; 0x6f
   2580e:	d018      	beq.n	25842 <_printf_i+0x106>
   25810:	270a      	movs	r7, #10
   25812:	e016      	b.n	25842 <_printf_i+0x106>
   25814:	3145      	adds	r1, #69	; 0x45
   25816:	700a      	strb	r2, [r1, #0]
   25818:	4a54      	ldr	r2, [pc, #336]	; (2596c <_printf_i+0x230>)
   2581a:	9203      	str	r2, [sp, #12]
   2581c:	681a      	ldr	r2, [r3, #0]
   2581e:	6821      	ldr	r1, [r4, #0]
   25820:	1d10      	adds	r0, r2, #4
   25822:	6018      	str	r0, [r3, #0]
   25824:	6815      	ldr	r5, [r2, #0]
   25826:	0608      	lsls	r0, r1, #24
   25828:	d522      	bpl.n	25870 <_printf_i+0x134>
   2582a:	07cb      	lsls	r3, r1, #31
   2582c:	d502      	bpl.n	25834 <_printf_i+0xf8>
   2582e:	2320      	movs	r3, #32
   25830:	4319      	orrs	r1, r3
   25832:	6021      	str	r1, [r4, #0]
   25834:	2710      	movs	r7, #16
   25836:	2d00      	cmp	r5, #0
   25838:	d103      	bne.n	25842 <_printf_i+0x106>
   2583a:	2320      	movs	r3, #32
   2583c:	6822      	ldr	r2, [r4, #0]
   2583e:	439a      	bics	r2, r3
   25840:	6022      	str	r2, [r4, #0]
   25842:	0023      	movs	r3, r4
   25844:	2200      	movs	r2, #0
   25846:	3343      	adds	r3, #67	; 0x43
   25848:	701a      	strb	r2, [r3, #0]
   2584a:	6863      	ldr	r3, [r4, #4]
   2584c:	60a3      	str	r3, [r4, #8]
   2584e:	2b00      	cmp	r3, #0
   25850:	db5c      	blt.n	2590c <_printf_i+0x1d0>
   25852:	2204      	movs	r2, #4
   25854:	6821      	ldr	r1, [r4, #0]
   25856:	4391      	bics	r1, r2
   25858:	6021      	str	r1, [r4, #0]
   2585a:	2d00      	cmp	r5, #0
   2585c:	d158      	bne.n	25910 <_printf_i+0x1d4>
   2585e:	9e04      	ldr	r6, [sp, #16]
   25860:	2b00      	cmp	r3, #0
   25862:	d064      	beq.n	2592e <_printf_i+0x1f2>
   25864:	0026      	movs	r6, r4
   25866:	9b03      	ldr	r3, [sp, #12]
   25868:	3642      	adds	r6, #66	; 0x42
   2586a:	781b      	ldrb	r3, [r3, #0]
   2586c:	7033      	strb	r3, [r6, #0]
   2586e:	e05e      	b.n	2592e <_printf_i+0x1f2>
   25870:	0648      	lsls	r0, r1, #25
   25872:	d5da      	bpl.n	2582a <_printf_i+0xee>
   25874:	b2ad      	uxth	r5, r5
   25876:	e7d8      	b.n	2582a <_printf_i+0xee>
   25878:	6809      	ldr	r1, [r1, #0]
   2587a:	681a      	ldr	r2, [r3, #0]
   2587c:	0608      	lsls	r0, r1, #24
   2587e:	d505      	bpl.n	2588c <_printf_i+0x150>
   25880:	1d11      	adds	r1, r2, #4
   25882:	6019      	str	r1, [r3, #0]
   25884:	6813      	ldr	r3, [r2, #0]
   25886:	6962      	ldr	r2, [r4, #20]
   25888:	601a      	str	r2, [r3, #0]
   2588a:	e006      	b.n	2589a <_printf_i+0x15e>
   2588c:	0649      	lsls	r1, r1, #25
   2588e:	d5f7      	bpl.n	25880 <_printf_i+0x144>
   25890:	1d11      	adds	r1, r2, #4
   25892:	6019      	str	r1, [r3, #0]
   25894:	6813      	ldr	r3, [r2, #0]
   25896:	8aa2      	ldrh	r2, [r4, #20]
   25898:	801a      	strh	r2, [r3, #0]
   2589a:	2300      	movs	r3, #0
   2589c:	9e04      	ldr	r6, [sp, #16]
   2589e:	6123      	str	r3, [r4, #16]
   258a0:	e054      	b.n	2594c <_printf_i+0x210>
   258a2:	681a      	ldr	r2, [r3, #0]
   258a4:	1d11      	adds	r1, r2, #4
   258a6:	6019      	str	r1, [r3, #0]
   258a8:	6816      	ldr	r6, [r2, #0]
   258aa:	2100      	movs	r1, #0
   258ac:	6862      	ldr	r2, [r4, #4]
   258ae:	0030      	movs	r0, r6
   258b0:	f000 f922 	bl	25af8 <memchr>
   258b4:	2800      	cmp	r0, #0
   258b6:	d001      	beq.n	258bc <_printf_i+0x180>
   258b8:	1b80      	subs	r0, r0, r6
   258ba:	6060      	str	r0, [r4, #4]
   258bc:	6863      	ldr	r3, [r4, #4]
   258be:	6123      	str	r3, [r4, #16]
   258c0:	2300      	movs	r3, #0
   258c2:	9a04      	ldr	r2, [sp, #16]
   258c4:	7013      	strb	r3, [r2, #0]
   258c6:	e041      	b.n	2594c <_printf_i+0x210>
   258c8:	6923      	ldr	r3, [r4, #16]
   258ca:	0032      	movs	r2, r6
   258cc:	9906      	ldr	r1, [sp, #24]
   258ce:	9805      	ldr	r0, [sp, #20]
   258d0:	9d07      	ldr	r5, [sp, #28]
   258d2:	47a8      	blx	r5
   258d4:	1c43      	adds	r3, r0, #1
   258d6:	d043      	beq.n	25960 <_printf_i+0x224>
   258d8:	6823      	ldr	r3, [r4, #0]
   258da:	2500      	movs	r5, #0
   258dc:	079b      	lsls	r3, r3, #30
   258de:	d40f      	bmi.n	25900 <_printf_i+0x1c4>
   258e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   258e2:	68e0      	ldr	r0, [r4, #12]
   258e4:	4298      	cmp	r0, r3
   258e6:	da3d      	bge.n	25964 <_printf_i+0x228>
   258e8:	0018      	movs	r0, r3
   258ea:	e03b      	b.n	25964 <_printf_i+0x228>
   258ec:	0022      	movs	r2, r4
   258ee:	2301      	movs	r3, #1
   258f0:	3219      	adds	r2, #25
   258f2:	9906      	ldr	r1, [sp, #24]
   258f4:	9805      	ldr	r0, [sp, #20]
   258f6:	9e07      	ldr	r6, [sp, #28]
   258f8:	47b0      	blx	r6
   258fa:	1c43      	adds	r3, r0, #1
   258fc:	d030      	beq.n	25960 <_printf_i+0x224>
   258fe:	3501      	adds	r5, #1
   25900:	68e3      	ldr	r3, [r4, #12]
   25902:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25904:	1a9b      	subs	r3, r3, r2
   25906:	429d      	cmp	r5, r3
   25908:	dbf0      	blt.n	258ec <_printf_i+0x1b0>
   2590a:	e7e9      	b.n	258e0 <_printf_i+0x1a4>
   2590c:	2d00      	cmp	r5, #0
   2590e:	d0a9      	beq.n	25864 <_printf_i+0x128>
   25910:	9e04      	ldr	r6, [sp, #16]
   25912:	0028      	movs	r0, r5
   25914:	0039      	movs	r1, r7
   25916:	f7fc fa77 	bl	21e08 <__aeabi_uidivmod>
   2591a:	9b03      	ldr	r3, [sp, #12]
   2591c:	3e01      	subs	r6, #1
   2591e:	5c5b      	ldrb	r3, [r3, r1]
   25920:	0028      	movs	r0, r5
   25922:	7033      	strb	r3, [r6, #0]
   25924:	0039      	movs	r1, r7
   25926:	f7fc f9e9 	bl	21cfc <__udivsi3>
   2592a:	1e05      	subs	r5, r0, #0
   2592c:	d1f1      	bne.n	25912 <_printf_i+0x1d6>
   2592e:	2f08      	cmp	r7, #8
   25930:	d109      	bne.n	25946 <_printf_i+0x20a>
   25932:	6823      	ldr	r3, [r4, #0]
   25934:	07db      	lsls	r3, r3, #31
   25936:	d506      	bpl.n	25946 <_printf_i+0x20a>
   25938:	6863      	ldr	r3, [r4, #4]
   2593a:	6922      	ldr	r2, [r4, #16]
   2593c:	4293      	cmp	r3, r2
   2593e:	dc02      	bgt.n	25946 <_printf_i+0x20a>
   25940:	2330      	movs	r3, #48	; 0x30
   25942:	3e01      	subs	r6, #1
   25944:	7033      	strb	r3, [r6, #0]
   25946:	9b04      	ldr	r3, [sp, #16]
   25948:	1b9b      	subs	r3, r3, r6
   2594a:	6123      	str	r3, [r4, #16]
   2594c:	9b07      	ldr	r3, [sp, #28]
   2594e:	aa09      	add	r2, sp, #36	; 0x24
   25950:	9300      	str	r3, [sp, #0]
   25952:	0021      	movs	r1, r4
   25954:	9b06      	ldr	r3, [sp, #24]
   25956:	9805      	ldr	r0, [sp, #20]
   25958:	f7ff fe82 	bl	25660 <_printf_common>
   2595c:	1c43      	adds	r3, r0, #1
   2595e:	d1b3      	bne.n	258c8 <_printf_i+0x18c>
   25960:	2001      	movs	r0, #1
   25962:	4240      	negs	r0, r0
   25964:	b00b      	add	sp, #44	; 0x2c
   25966:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25968:	0002a130 	.word	0x0002a130
   2596c:	0002a11f 	.word	0x0002a11f

00025970 <__sread>:
   25970:	b570      	push	{r4, r5, r6, lr}
   25972:	000c      	movs	r4, r1
   25974:	250e      	movs	r5, #14
   25976:	5f49      	ldrsh	r1, [r1, r5]
   25978:	f000 f8f0 	bl	25b5c <_read_r>
   2597c:	2800      	cmp	r0, #0
   2597e:	db03      	blt.n	25988 <__sread+0x18>
   25980:	6d63      	ldr	r3, [r4, #84]	; 0x54
   25982:	181b      	adds	r3, r3, r0
   25984:	6563      	str	r3, [r4, #84]	; 0x54
   25986:	bd70      	pop	{r4, r5, r6, pc}
   25988:	89a3      	ldrh	r3, [r4, #12]
   2598a:	4a02      	ldr	r2, [pc, #8]	; (25994 <__sread+0x24>)
   2598c:	4013      	ands	r3, r2
   2598e:	81a3      	strh	r3, [r4, #12]
   25990:	e7f9      	b.n	25986 <__sread+0x16>
   25992:	46c0      	nop			; (mov r8, r8)
   25994:	ffffefff 	.word	0xffffefff

00025998 <__swrite>:
   25998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2599a:	001f      	movs	r7, r3
   2599c:	898b      	ldrh	r3, [r1, #12]
   2599e:	0005      	movs	r5, r0
   259a0:	000c      	movs	r4, r1
   259a2:	0016      	movs	r6, r2
   259a4:	05db      	lsls	r3, r3, #23
   259a6:	d505      	bpl.n	259b4 <__swrite+0x1c>
   259a8:	230e      	movs	r3, #14
   259aa:	5ec9      	ldrsh	r1, [r1, r3]
   259ac:	2200      	movs	r2, #0
   259ae:	2302      	movs	r3, #2
   259b0:	f000 f88e 	bl	25ad0 <_lseek_r>
   259b4:	89a3      	ldrh	r3, [r4, #12]
   259b6:	4a05      	ldr	r2, [pc, #20]	; (259cc <__swrite+0x34>)
   259b8:	0028      	movs	r0, r5
   259ba:	4013      	ands	r3, r2
   259bc:	81a3      	strh	r3, [r4, #12]
   259be:	0032      	movs	r2, r6
   259c0:	230e      	movs	r3, #14
   259c2:	5ee1      	ldrsh	r1, [r4, r3]
   259c4:	003b      	movs	r3, r7
   259c6:	f000 f839 	bl	25a3c <_write_r>
   259ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   259cc:	ffffefff 	.word	0xffffefff

000259d0 <__sseek>:
   259d0:	b570      	push	{r4, r5, r6, lr}
   259d2:	000c      	movs	r4, r1
   259d4:	250e      	movs	r5, #14
   259d6:	5f49      	ldrsh	r1, [r1, r5]
   259d8:	f000 f87a 	bl	25ad0 <_lseek_r>
   259dc:	89a3      	ldrh	r3, [r4, #12]
   259de:	1c42      	adds	r2, r0, #1
   259e0:	d103      	bne.n	259ea <__sseek+0x1a>
   259e2:	4a05      	ldr	r2, [pc, #20]	; (259f8 <__sseek+0x28>)
   259e4:	4013      	ands	r3, r2
   259e6:	81a3      	strh	r3, [r4, #12]
   259e8:	bd70      	pop	{r4, r5, r6, pc}
   259ea:	2280      	movs	r2, #128	; 0x80
   259ec:	0152      	lsls	r2, r2, #5
   259ee:	4313      	orrs	r3, r2
   259f0:	81a3      	strh	r3, [r4, #12]
   259f2:	6560      	str	r0, [r4, #84]	; 0x54
   259f4:	e7f8      	b.n	259e8 <__sseek+0x18>
   259f6:	46c0      	nop			; (mov r8, r8)
   259f8:	ffffefff 	.word	0xffffefff

000259fc <__sclose>:
   259fc:	b510      	push	{r4, lr}
   259fe:	230e      	movs	r3, #14
   25a00:	5ec9      	ldrsh	r1, [r1, r3]
   25a02:	f000 f82f 	bl	25a64 <_close_r>
   25a06:	bd10      	pop	{r4, pc}

00025a08 <strchr>:
   25a08:	b2c9      	uxtb	r1, r1
   25a0a:	7803      	ldrb	r3, [r0, #0]
   25a0c:	2b00      	cmp	r3, #0
   25a0e:	d004      	beq.n	25a1a <strchr+0x12>
   25a10:	4299      	cmp	r1, r3
   25a12:	d100      	bne.n	25a16 <strchr+0xe>
   25a14:	4770      	bx	lr
   25a16:	3001      	adds	r0, #1
   25a18:	e7f7      	b.n	25a0a <strchr+0x2>
   25a1a:	424b      	negs	r3, r1
   25a1c:	4159      	adcs	r1, r3
   25a1e:	4249      	negs	r1, r1
   25a20:	4008      	ands	r0, r1
   25a22:	e7f7      	b.n	25a14 <strchr+0xc>

00025a24 <__ascii_wctomb>:
   25a24:	1e0b      	subs	r3, r1, #0
   25a26:	d004      	beq.n	25a32 <__ascii_wctomb+0xe>
   25a28:	2aff      	cmp	r2, #255	; 0xff
   25a2a:	d904      	bls.n	25a36 <__ascii_wctomb+0x12>
   25a2c:	238a      	movs	r3, #138	; 0x8a
   25a2e:	6003      	str	r3, [r0, #0]
   25a30:	3b8b      	subs	r3, #139	; 0x8b
   25a32:	0018      	movs	r0, r3
   25a34:	4770      	bx	lr
   25a36:	700a      	strb	r2, [r1, #0]
   25a38:	2301      	movs	r3, #1
   25a3a:	e7fa      	b.n	25a32 <__ascii_wctomb+0xe>

00025a3c <_write_r>:
   25a3c:	b570      	push	{r4, r5, r6, lr}
   25a3e:	0005      	movs	r5, r0
   25a40:	0008      	movs	r0, r1
   25a42:	0011      	movs	r1, r2
   25a44:	2200      	movs	r2, #0
   25a46:	4c06      	ldr	r4, [pc, #24]	; (25a60 <_write_r+0x24>)
   25a48:	6022      	str	r2, [r4, #0]
   25a4a:	001a      	movs	r2, r3
   25a4c:	f7f4 fcb8 	bl	1a3c0 <_write>
   25a50:	1c43      	adds	r3, r0, #1
   25a52:	d103      	bne.n	25a5c <_write_r+0x20>
   25a54:	6823      	ldr	r3, [r4, #0]
   25a56:	2b00      	cmp	r3, #0
   25a58:	d000      	beq.n	25a5c <_write_r+0x20>
   25a5a:	602b      	str	r3, [r5, #0]
   25a5c:	bd70      	pop	{r4, r5, r6, pc}
   25a5e:	46c0      	nop			; (mov r8, r8)
   25a60:	20005910 	.word	0x20005910

00025a64 <_close_r>:
   25a64:	2300      	movs	r3, #0
   25a66:	b570      	push	{r4, r5, r6, lr}
   25a68:	4c06      	ldr	r4, [pc, #24]	; (25a84 <_close_r+0x20>)
   25a6a:	0005      	movs	r5, r0
   25a6c:	0008      	movs	r0, r1
   25a6e:	6023      	str	r3, [r4, #0]
   25a70:	f7f4 fcfa 	bl	1a468 <_close>
   25a74:	1c43      	adds	r3, r0, #1
   25a76:	d103      	bne.n	25a80 <_close_r+0x1c>
   25a78:	6823      	ldr	r3, [r4, #0]
   25a7a:	2b00      	cmp	r3, #0
   25a7c:	d000      	beq.n	25a80 <_close_r+0x1c>
   25a7e:	602b      	str	r3, [r5, #0]
   25a80:	bd70      	pop	{r4, r5, r6, pc}
   25a82:	46c0      	nop			; (mov r8, r8)
   25a84:	20005910 	.word	0x20005910

00025a88 <_fstat_r>:
   25a88:	2300      	movs	r3, #0
   25a8a:	b570      	push	{r4, r5, r6, lr}
   25a8c:	4c06      	ldr	r4, [pc, #24]	; (25aa8 <_fstat_r+0x20>)
   25a8e:	0005      	movs	r5, r0
   25a90:	0008      	movs	r0, r1
   25a92:	0011      	movs	r1, r2
   25a94:	6023      	str	r3, [r4, #0]
   25a96:	f7f4 fcf1 	bl	1a47c <_fstat>
   25a9a:	1c43      	adds	r3, r0, #1
   25a9c:	d103      	bne.n	25aa6 <_fstat_r+0x1e>
   25a9e:	6823      	ldr	r3, [r4, #0]
   25aa0:	2b00      	cmp	r3, #0
   25aa2:	d000      	beq.n	25aa6 <_fstat_r+0x1e>
   25aa4:	602b      	str	r3, [r5, #0]
   25aa6:	bd70      	pop	{r4, r5, r6, pc}
   25aa8:	20005910 	.word	0x20005910

00025aac <_isatty_r>:
   25aac:	2300      	movs	r3, #0
   25aae:	b570      	push	{r4, r5, r6, lr}
   25ab0:	4c06      	ldr	r4, [pc, #24]	; (25acc <_isatty_r+0x20>)
   25ab2:	0005      	movs	r5, r0
   25ab4:	0008      	movs	r0, r1
   25ab6:	6023      	str	r3, [r4, #0]
   25ab8:	f7f4 fcee 	bl	1a498 <_isatty>
   25abc:	1c43      	adds	r3, r0, #1
   25abe:	d103      	bne.n	25ac8 <_isatty_r+0x1c>
   25ac0:	6823      	ldr	r3, [r4, #0]
   25ac2:	2b00      	cmp	r3, #0
   25ac4:	d000      	beq.n	25ac8 <_isatty_r+0x1c>
   25ac6:	602b      	str	r3, [r5, #0]
   25ac8:	bd70      	pop	{r4, r5, r6, pc}
   25aca:	46c0      	nop			; (mov r8, r8)
   25acc:	20005910 	.word	0x20005910

00025ad0 <_lseek_r>:
   25ad0:	b570      	push	{r4, r5, r6, lr}
   25ad2:	0005      	movs	r5, r0
   25ad4:	0008      	movs	r0, r1
   25ad6:	0011      	movs	r1, r2
   25ad8:	2200      	movs	r2, #0
   25ada:	4c06      	ldr	r4, [pc, #24]	; (25af4 <_lseek_r+0x24>)
   25adc:	6022      	str	r2, [r4, #0]
   25ade:	001a      	movs	r2, r3
   25ae0:	f7f4 fce3 	bl	1a4aa <_lseek>
   25ae4:	1c43      	adds	r3, r0, #1
   25ae6:	d103      	bne.n	25af0 <_lseek_r+0x20>
   25ae8:	6823      	ldr	r3, [r4, #0]
   25aea:	2b00      	cmp	r3, #0
   25aec:	d000      	beq.n	25af0 <_lseek_r+0x20>
   25aee:	602b      	str	r3, [r5, #0]
   25af0:	bd70      	pop	{r4, r5, r6, pc}
   25af2:	46c0      	nop			; (mov r8, r8)
   25af4:	20005910 	.word	0x20005910

00025af8 <memchr>:
   25af8:	b2c9      	uxtb	r1, r1
   25afa:	1882      	adds	r2, r0, r2
   25afc:	4290      	cmp	r0, r2
   25afe:	d101      	bne.n	25b04 <memchr+0xc>
   25b00:	2000      	movs	r0, #0
   25b02:	4770      	bx	lr
   25b04:	7803      	ldrb	r3, [r0, #0]
   25b06:	428b      	cmp	r3, r1
   25b08:	d0fb      	beq.n	25b02 <memchr+0xa>
   25b0a:	3001      	adds	r0, #1
   25b0c:	e7f6      	b.n	25afc <memchr+0x4>

00025b0e <_realloc_r>:
   25b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b10:	0007      	movs	r7, r0
   25b12:	000d      	movs	r5, r1
   25b14:	0016      	movs	r6, r2
   25b16:	2900      	cmp	r1, #0
   25b18:	d105      	bne.n	25b26 <_realloc_r+0x18>
   25b1a:	0011      	movs	r1, r2
   25b1c:	f7fe fe9e 	bl	2485c <_malloc_r>
   25b20:	0004      	movs	r4, r0
   25b22:	0020      	movs	r0, r4
   25b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25b26:	2a00      	cmp	r2, #0
   25b28:	d103      	bne.n	25b32 <_realloc_r+0x24>
   25b2a:	f7fe fe4d 	bl	247c8 <_free_r>
   25b2e:	0034      	movs	r4, r6
   25b30:	e7f7      	b.n	25b22 <_realloc_r+0x14>
   25b32:	f000 f827 	bl	25b84 <_malloc_usable_size_r>
   25b36:	002c      	movs	r4, r5
   25b38:	4286      	cmp	r6, r0
   25b3a:	d9f2      	bls.n	25b22 <_realloc_r+0x14>
   25b3c:	0031      	movs	r1, r6
   25b3e:	0038      	movs	r0, r7
   25b40:	f7fe fe8c 	bl	2485c <_malloc_r>
   25b44:	1e04      	subs	r4, r0, #0
   25b46:	d0ec      	beq.n	25b22 <_realloc_r+0x14>
   25b48:	0029      	movs	r1, r5
   25b4a:	0032      	movs	r2, r6
   25b4c:	f7fe fe18 	bl	24780 <memcpy>
   25b50:	0029      	movs	r1, r5
   25b52:	0038      	movs	r0, r7
   25b54:	f7fe fe38 	bl	247c8 <_free_r>
   25b58:	e7e3      	b.n	25b22 <_realloc_r+0x14>
	...

00025b5c <_read_r>:
   25b5c:	b570      	push	{r4, r5, r6, lr}
   25b5e:	0005      	movs	r5, r0
   25b60:	0008      	movs	r0, r1
   25b62:	0011      	movs	r1, r2
   25b64:	2200      	movs	r2, #0
   25b66:	4c06      	ldr	r4, [pc, #24]	; (25b80 <_read_r+0x24>)
   25b68:	6022      	str	r2, [r4, #0]
   25b6a:	001a      	movs	r2, r3
   25b6c:	f7f4 fbfe 	bl	1a36c <_read>
   25b70:	1c43      	adds	r3, r0, #1
   25b72:	d103      	bne.n	25b7c <_read_r+0x20>
   25b74:	6823      	ldr	r3, [r4, #0]
   25b76:	2b00      	cmp	r3, #0
   25b78:	d000      	beq.n	25b7c <_read_r+0x20>
   25b7a:	602b      	str	r3, [r5, #0]
   25b7c:	bd70      	pop	{r4, r5, r6, pc}
   25b7e:	46c0      	nop			; (mov r8, r8)
   25b80:	20005910 	.word	0x20005910

00025b84 <_malloc_usable_size_r>:
   25b84:	1f0b      	subs	r3, r1, #4
   25b86:	681b      	ldr	r3, [r3, #0]
   25b88:	1f18      	subs	r0, r3, #4
   25b8a:	2b00      	cmp	r3, #0
   25b8c:	da01      	bge.n	25b92 <_malloc_usable_size_r+0xe>
   25b8e:	580b      	ldr	r3, [r1, r0]
   25b90:	18c0      	adds	r0, r0, r3
   25b92:	4770      	bx	lr

00025b94 <pcWelcomeMessage>:
   25b94:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   25ba4:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   25bb4:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   25bc4:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   25bd4:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   25be4:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   25bf4:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   25c04:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   25c14:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   25c24:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   25c34:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   25c44:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   25c54:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   25c64:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   25c74:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   25c84:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   25c94:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   25ca4:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   25cb4:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   25cc4:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   25cd4:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   25ce4:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   25cf4:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   25d04:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   25d14:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   25d24:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   25d34:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   25d44:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   25d54:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   25d64:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   25d74:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   25d84:	0000 0000 6577 6769 7468 0000 6577 6769     ....weight..weig
   25d94:	7468 203a 6567 2074 6874 2065 6577 6769     ht: get the weig
   25da4:	7468 6620 6f72 206d 414e 3755 3038 2032     ht from NAU7802 
   25db4:	0a0d 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   25dc4:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   25dd4:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   25de4:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   25df4:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   25e04:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   25e14:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   25e24:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   25e34:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   25e44:	2179 0d20 000a 0000 6325 325b 004a 0000     y! .....%c[2J...
   25e54:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   25e64:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   25e74:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   25e84:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   25e94:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   25ea4:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   25eb4:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   25ec4:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   25ed4:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   25ee4:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   25ef4:	514d 5454 5020 736f 0d74 000a 2030 3120     MQTT Post...0  1
   25f04:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   25f14:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   25f24:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   25f34:	3025 7832 203a 0000 2058 0000 6854 2065     %02x: ..X ..The 
   25f44:	6577 6769 7468 6920 2073 6425 0d20 000a     weight is %d ...

00025f54 <xImuGetCommand>:
   25f54:	5bd8 0002 5bdc 0002 1f39 0000 0000 0000     .[...[..9.......

00025f64 <xOTAUCommand>:
   25f64:	5c00 0002 5c04 0002 2075 0000 0000 0000     .\...\..u ......

00025f74 <xResetCommand>:
   25f74:	5c34 0002 5c3c 0002 2095 0000 0000 0000     4\..<\... ......

00025f84 <xNeotrellisTurnLEDCommand>:
   25f84:	5c58 0002 5c5c 0002 20ad 0000 0004 0000     X\..\\... ......

00025f94 <xNeotrellisProcessButtonCommand>:
   25f94:	5ca4 0002 5cb0 0002 20d9 0000 0000 0000     .\...\... ......

00025fa4 <xDistanceSensorGetDistance>:
   25fa4:	5cfc 0002 5d08 0002 2221 0000 0000 0000     .\...]..!"......

00025fb4 <xSendDummyGameData>:
   25fb4:	5d44 0002 5d4c 0002 22c5 0000 0000 0000     D]..L]..."......

00025fc4 <xI2cScan>:
   25fc4:	5d6c 0002 5d70 0002 2361 0000 0000 0000     l]..p]..a#......

00025fd4 <xGetWeight>:
   25fd4:	5d88 0002 5d90 0002 248d 0000 0000 0000     .]...]...$......

00025fe4 <xClearScreen>:
   25fe4:	5db8 0002 5dbc 0002 202d 0000 0000 0000     .]...]..- ......
   25ff4:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   26004:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   26014:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   26024:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   26034:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   26044:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   26054:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   26064:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   26074:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   26084:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   26094:	000a 0000 6f43 6c75 2064 6f6e 2074 6e69     ....Could not in
   260a4:	7469 6169 696c 657a 4420 7369 6174 636e     itialize Distanc
   260b4:	2065 6553 736e 726f 0021 0000               e Sensor!...

000260c0 <msgBaseGetHWID>:
   260c0:	0100 0000                                   ....

000260c4 <msgNeopixelPin>:
   260c4:	010e 0003                                   ....

000260c8 <msgNeopixelSpeed>:
   260c8:	020e 0001                                   ....

000260cc <msgNeopixelBufLength>:
   260cc:	030e 3000                                   ...0

000260d0 <msgKeypadEnableInt>:
   260d0:	0210 0001                                   ....

000260d4 <msgKeypadGetCount>:
   260d4:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   260e4:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   260f4:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   26104:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   26114:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   26124:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   26134:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   26144:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   26154:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   26164:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   26174:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   26184:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   26194:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   261a4:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   261b4:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   261c4:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   261d4:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   261e4:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   261f4:	6574 2164 0000 0000                         ted!....

000261fc <main_mqtt_broker>:
   261fc:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   2620c:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   2621c:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   2622c:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   2623c:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   2624c:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   2625c:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   2626c:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   2627c:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   2628c:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   2629c:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   262ac:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   262bc:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   262cc:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   262dc:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   262ec:	2e2e 0d2e 000a 0000 7468 7074 2f3a 312f     ........http://1
   262fc:	3237 312e 3437 322e 3531 372e 2f38 6554     72.174.215.78/Te
   2630c:	7473 2e41 6962 006e 7473 726f 5f65 6966     stA.bin.store_fi
   2631c:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   2632c:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   2633c:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   2634c:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   2635c:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   2636c:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   2637c:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   2638c:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   2639c:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   263ac:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   263bc:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   263cc:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   263dc:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   263ec:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   263fc:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   2640c:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   2641c:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   2642c:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   2643c:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   2644c:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   2645c:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   2646c:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   2647c:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   2648c:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   2649c:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   264ac:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   264bc:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   264cc:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   264dc:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   264ec:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   264fc:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   2650c:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   2651c:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   2652c:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   2653c:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   2654c:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   2655c:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   2656c:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   2657c:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   2658c:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   2659c:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   265ac:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   265bc:	6570 6e6e 3731 3034 6977 6966 0000 0000     penn1740wifi....
   265cc:	6941 5072 6e65 4e6e 7465 442d 7665 6369     AirPennNet-Devic
   265dc:	0065 0000 6977 6966 635f 3a62 4920 2050     e...wifi_cb: IP 
   265ec:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   265fc:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   2660c:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   2661c:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   2662c:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   2663c:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   2664c:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   2665c:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   2666c:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   2667c:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   2668c:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   2669c:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   266ac:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   266bc:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   266cc:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   266dc:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   266ec:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   266fc:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   2670c:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   2671c:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   2672c:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   2673c:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   2674c:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   2675c:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   2676c:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   2677c:	0000 0000 0a0d 2520 2a2e 0073 6772 2862     ...... %.*s.rgb(
   2678c:	0000 0000 0a0d 4752 2042 6425 2520 2064     ......RGB %d %d 
   2679c:	6425 0a0d 0000 0000 227b 6167 656d 3a22     %d......{"game":
   267ac:	005b 0000 0a0d 6147 656d 6d20 7365 6173     [.....Game messa
   267bc:	6567 7220 6365 6965 6576 2164 0a0d 0000     ge received!....
   267cc:	2e25 732a 0000 0000 0a0d 6150 7372 6465     %.*s......Parsed
   267dc:	4320 6d6f 616d 646e 203a 0000 6425 002c      Command: ..%d,.
   267ec:	0a0d 6553 746e 7020 616c 2079 6f74 6320     ..Sent play to c
   267fc:	6e6f 7274 6c6f 0d21 000a 0000 0a0d 6147     ontrol!.......Ga
   2680c:	656d 6d20 7365 6173 6567 7220 6365 6965     me message recei
   2681c:	6576 2064 7562 2074 6f6e 2074 6e75 6564     ved but not unde
   2682c:	7372 6f74 646f 0d21 000a 0000 0a0d 4d49     rstood!.......IM
   2683c:	2055 6f74 6970 2063 6572 6563 7669 6465     U topic received
   2684c:	0d21 000a 0a0d 6944 7473 6e61 6563 7420     !.....Distance t
   2685c:	706f 6369 7220 6365 6965 6576 2164 0a0d     opic received!..
   2686c:	0000 0000 3e20 203e 0000 0000 3150 4c5f     .... >> ....P1_L
   2687c:	4445 455f 4553 3135 5f36 3054 0000 0000     ED_ESE516_T0....
   2688c:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   2689c:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   268ac:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   268bc:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   268cc:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   268dc:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   268ec:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   268fc:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   2690c:	206f 7262 6b6f 7265 0a0d 0000 6f43 6e6e     o broker....Conn
   2691c:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   2692c:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   2693c:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   2694c:	000a 0000 3150 475f 4d41 5f45 5345 3545     ....P1_GAME_ESE5
   2695c:	3631 545f 0030 0000 3150 495f 554d 455f     16_T0...P1_IMU_E
   2696c:	4553 3135 5f36 3054 0000 0000 514d 5454     SE516_T0....MQTT
   2697c:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   2698c:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   2699c:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   269ac:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   269bc:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   269cc:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   269dc:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   269ec:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   269fc:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   26a0c:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   26a1c:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   26a2c:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   26a3c:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   26a4c:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   26a5c:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   26a6c:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   26a7c:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   26a8c:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   26a9c:	227b 6d69 7875 3a22 6425 202c 6922 756d     {"imux":%d, "imu
   26aac:	2279 203a 6425 202c 6922 756d 227a 203a     y": %d, "imuz": 
   26abc:	6425 007d 6425 0000 7d5d 0000 0a0d 0000     %d}.%d..]}......
   26acc:	3250 475f 4d41 5f45 5345 3545 3631 545f     P2_GAME_ESE516_T
   26adc:	0030 0000 5245 4f52 2052 6e49 7469 6169     0...ERROR Initia
   26aec:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   26afc:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   26b0c:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   26b1c:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   26b2c:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   26b3c:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   26b4c:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   26b5c:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   26b6c:	7325 2e2e 0d2e 000a 3150 545f 4d45 4550     %s......P1_TEMPE
   26b7c:	4152 5554 4552 455f 4553 3135 5f36 3054     RATURE_ESE516_T0
   26b8c:	0000 0000 514d 5454 7320 6e65 2064 7325     ....MQTT send %s
   26b9c:	0a0d 0000 55dc 0000 55e8 0000 55fa 0000     .....U...U...U..
   26bac:	5650 0000 5670 0000 6568 706c 0000 0000     PV..pV..help....
   26bbc:	0a0d 6568 706c 0d3a 200a 694c 7473 2073     ..help:.. Lists 
   26bcc:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
   26bdc:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
   26bec:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   26bfc:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   26c0c:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   26c1c:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   26c2c:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   26c3c:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   26c4c:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   26c5c:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   26c6c:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   26c7c:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   26c8c:	7364 0d2e 0d0a 000a                         ds......

00026c94 <xHelpCommand>:
   26c94:	6bb4 0002 6bbc 0002 7275 0000 0000 0000     .k...k..ur......
   26ca4:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   26cb4:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   26cc4:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   26cd4:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   26ce4:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   26cf4:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   26d04:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   26d14:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   26d24:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   26d34:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   26d44:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   26d54:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   26d64:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   26d74:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   26d84:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   26d94:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   26da4:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   26db4:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   26dc4:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   26dd4:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   26de4:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   26df4:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   26e04:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   26e14:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   26e24:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   26e34:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   26e44:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   26e54:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   26e64:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   26e74:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   26e84:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   26e94:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   26ea4:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   26eb4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   26ec4:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   26ed4:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   26ee4:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   26ef4:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   26f04:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   26f14:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   26f24:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   26f34:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   26f44:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   26f54:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   26f64:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   26f74:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   26f84:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   26f94:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   26fa4:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   26fb4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   26fc4:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   26fd4:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   26fe4:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   26ff4:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   27004:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   27014:	6365 6374 616c 7373 0021 0000 799a 0000     ectclass!....y..
   27024:	7992 0000 7996 0000 798a 0000 798e 0000     .y...y...y...y..
   27034:	799e 0000 79a2 0000 79a6 0000 79aa 0000     .y...y...y...y..
   27044:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   27054:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   27064:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   27074:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   27084:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   27094:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   270a4:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   270b4:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   270c4:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   270d4:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   270e4:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   270f4:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   27104:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   27114:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   27124:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   27134:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   27144:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   27154:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   27164:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   27174:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   27184:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   27194:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   271a4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   271b4:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   271c4:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   271d4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   271e4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   271f4:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   27204:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   27214:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   27224:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   27234:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   27244:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   27254:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   27264:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   27274:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   27284:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   27294:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   272a4:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   272b4:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   272c4:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   272d4:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   272e4:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   272f4:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   27304:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   27314:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   27324:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   27334:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   27344:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   27354:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   27364:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   27374:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   27384:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   27394:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   273a4:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   273b4:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   273c4:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   273d4:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   273e4:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   273f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   27404:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   27414:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   27424:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   27434:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   27444:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   27454:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   27464:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   27474:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   27484:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   27494:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   274a4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   274b4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   274c4:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   274d4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   274e4:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   274f4:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   27504:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   27514:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   27524:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   27534:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   27544:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   27554:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   27564:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   27574:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   27584:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   27594:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   275a4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   275b4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   275c4:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   275d4:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   275e4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   275f4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   27604:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   27614:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   27624:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   27634:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   27644:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   27654:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   27664:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   27674:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   27684:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   27694:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   276a4:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   276b4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   276c4:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   276d4:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   276e4:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   276f4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27704:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   27714:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   27724:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   27734:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   27744:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   27754:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   27764:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   27774:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   27784:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27794:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   277a4:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   277b4:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   277c4:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   277d4:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   277e4:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   277f4:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   27804:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   27814:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   27824:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   27834:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   27844:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   27854:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   27864:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   27874:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   27884:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   27894:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   278a4:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   278b4:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   278c4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   278d4:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   278e4:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   278f4:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   27904:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   27914:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   27924:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   27934:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   27944:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   27954:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   27964:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27974:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   27984:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   27994:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   279a4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   279b4:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   279c4:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   279d4:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   279e4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   279f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   27a04:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   27a14:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   27a24:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   27a34:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   27a44:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   27a54:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   27a64:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   27a74:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27a84:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   27a94:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   27aa4:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   27ab4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   27ac4:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   27ad4:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   27ae4:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   27af4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27b04:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   27b14:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   27b24:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   27b34:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   27b44:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   27b54:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   27b64:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   27b74:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   27b84:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   27b94:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   27ba4:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   27bb4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   27bc4:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   27bd4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   27be4:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   27bf4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   27c04:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   27c14:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   27c24:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   27c34:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   27c44:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   27c54:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   27c64:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   27c74:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27c84:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   27c94:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   27ca4:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   27cb4:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   27cc4:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   27cd4:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   27ce4:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   27cf4:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   27d04:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27d14:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   27d24:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   27d34:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   27d44:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   27d54:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   27d64:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   27d74:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   27d84:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   27d94:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   27da4:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   27db4:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   27dc4:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   27dd4:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   27de4:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   27df4:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   27e04:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   27e14:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   27e24:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   27e34:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   27e44:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   27e54:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   27e64:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   27e74:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   27e84:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   27e94:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27ea4:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   27eb4:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   27ec4:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   27ed4:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   27ee4:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   27ef4:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   27f04:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   27f14:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   27f24:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   27f34:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   27f44:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   27f54:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   27f64:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   27f74:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   27f84:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   27f94:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   27fa4:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   27fb4:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   27fc4:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   27fd4:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   27fe4:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   27ff4:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   28004:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   28014:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   28024:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   28034:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   28044:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   28054:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   28064:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   28074:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   28084:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   28094:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   280a4:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   280b4:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   280c4:	0000 0000 6d54 2072 7653 0063 ca3c 0000     ....Tmr Svc.<...
   280d4:	ca3c 0000 ca3c 0000 caca 0000 ca94 0000     <...<...........
   280e4:	cabe 0000 ca3c 0000 ca3c 0000 caca 0000     ....<...<.......
   280f4:	ca94 0000                                   ....

000280f8 <sd_mmc_trans_units>:
   280f8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00028114 <sd_trans_multipliers>:
   28114:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   28124:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   28134:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   28144:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00028154 <mmc_trans_multipliers>:
   28154:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   28164:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   28174:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   28184:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   28194:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   281a4:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   281b4:	746c 6320 646d 000a 000d 0000               lt cmd......

000281c0 <__FUNCTION__.17099>:
   281c0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   281d0:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   281e0:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   281f0:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   28200:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   28210:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   28220:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   28230:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   28240:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   28250:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   28260:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   28270:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   28280:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   28290:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   282a0:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   282b0:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   282c0:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   282d0:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   282e0:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   282f0:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   28300:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   28310:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   28320:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   28330:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   28340:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   28350:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   28360:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   28370:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   28380:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   28390:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   283a0:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   283b0:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   283c0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   283d0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   283e0:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   283f0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   28400:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   28410:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   28420:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   28430:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   28440:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   28450:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   28460:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   28470:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   28480:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   28490:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   284a0:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   284b0:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   284c0:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   284d0:	203f 6425 000a 0000 0c40 0001 0c10 0001     ? %d....@.......
   284e0:	0c08 0001 0c20 0001 0c18 0001 0c38 0001     .... .......8...
   284f0:	0c28 0001 0c30 0001                         (...0...

000284f8 <__FUNCTION__.17967>:
   284f8:	6968 5f66 6573 646e 0000 0000               hif_send....

00028504 <__FUNCTION__.17977>:
   28504:	6968 5f66 7369 0072                         hif_isr.

0002850c <__FUNCTION__.17986>:
   2850c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0002851c <__FUNCTION__.17998>:
   2851c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00028528 <__FUNCTION__.18014>:
   28528:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   28538:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   28548:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   28558:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   28568:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   28578:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   28588:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   28598:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   285a8:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   285b8:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   285c8:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   285d8:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   285e8:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   285f8:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   28608:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   28618:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   28628:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   28638:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   28648:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   28658:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   28668:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   28678:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   28688:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   28698:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   286a8:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   286b8:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   286c8:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   286d8:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   286e8:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   286f8:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   28708:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   28718:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   28728:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   28738:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   28748:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   28758:	000a 0000 3332 303a 3a35 3335 0000 0000     ....23:05:53....
   28768:	6f4e 2076 3632 3220 3230 0033 7244 7669     Nov 26 2023.Driv
   28778:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   28788:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   28798:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   287a8:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   287b8:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   287c8:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   287d8:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   287e8:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   287f8:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   28808:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   28818:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   28828:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   28838:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   28848:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   28858:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   28868:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   28878:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   28888:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   28898:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   288a8:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   288b8:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   288c8:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   288d8:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   288e8:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   288f8:	4220 6675 6566 0a72 0000 0000                Buffer.....

00028904 <__FUNCTION__.17949>:
   28904:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00028910 <__FUNCTION__.17978>:
   28910:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00028920 <__FUNCTION__.18009>:
   28920:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   28930:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   28940:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   28950:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   28960:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   28970:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   28980:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   28990:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   289a0:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   289b0:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

000289c0 <__FUNCTION__.17806>:
   289c0:	6863 7069 775f 6b61 0065 0000               chip_wake...

000289cc <__FUNCTION__.17855>:
   289cc:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   289dc:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   289ec:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   289fc:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   28a0c:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   28a1c:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   28a2c:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   28a3c:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   28a4c:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   28a5c:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   28a6c:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   28a7c:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   28a8c:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   28a9c:	6920 696e 2074 7562 0a73 0000                init bus...

00028aa8 <__FUNCTION__.17853>:
   28aa8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00028ab4 <__FUNCTION__.17860>:
   28ab4:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00028ac4 <crc7_syndrome_table>:
   28ac4:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   28ad4:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   28ae4:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   28af4:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   28b04:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   28b14:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   28b24:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   28b34:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   28b44:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   28b54:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   28b64:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   28b74:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   28b84:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   28b94:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   28ba4:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   28bb4:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   28bc4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   28bd4:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   28be4:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   28bf4:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   28c04:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   28c14:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   28c24:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   28c34:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   28c44:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   28c54:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   28c64:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   28c74:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   28c84:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   28c94:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   28ca4:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   28cb4:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   28cc4:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   28cd4:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   28ce4:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   28cf4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   28d04:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   28d14:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   28d24:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   28d34:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   28d44:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   28d54:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   28d64:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   28d74:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   28d84:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   28d94:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   28da4:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   28db4:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   28dc4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   28dd4:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   28de4:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   28df4:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   28e04:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   28e14:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   28e24:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   28e34:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   28e44:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   28e54:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   28e64:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   28e74:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   28e84:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   28e94:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   28ea4:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   28eb4:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   28ec4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   28ed4:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   28ee4:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   28ef4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   28f04:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   28f14:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   28f24:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   28f34:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   28f44:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   28f54:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   28f64:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   28f74:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   28f84:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   28f94:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   28fa4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   28fb4:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   28fc4:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   28fd4:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   28fe4:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   28ff4:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   29004:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   29014:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   29024:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   29034:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   29044:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   29054:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   29064:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   29074:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   29084:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   29094:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   290a4:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   290b4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   290c4:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   290d4:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   290e4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   290f4:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   29104:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   29114:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   29124:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   29134:	2e2e 0a2e 0000 0000 2868 0001 2868 0001     ........h(..h(..
   29144:	28f8 0001 27bc 0001 2802 0001 2824 0001     .(...'...(..$(..
   29154:	28aa 0001 28aa 0001 2964 0001 2790 0001     .(...(..d)...'..
   29164:	29be 0001 29be 0001 29be 0001 29be 0001     .)...)...)...)..
   29174:	2846 0001 2dc8 0001 2dc8 0001 2e50 0001     F(...-...-..P...
   29184:	2d2c 0001 2d6e 0001 2d8c 0001 2e06 0001     ,-..n-...-......
   29194:	2e06 0001 2eb2 0001 2d04 0001 2f02 0001     .........-.../..
   291a4:	2f02 0001 2f02 0001 2f02 0001 2daa 0001     ./.../.../...-..

000291b4 <__FUNCTION__.17128>:
   291b4:	7073 5f69 6d63 0064                         spi_cmd.

000291bc <__FUNCTION__.17135>:
   291bc:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

000291cc <__FUNCTION__.17144>:
   291cc:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

000291d8 <__FUNCTION__.17177>:
   291d8:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   291e8:	0000 0000                                   ....

000291ec <__FUNCTION__.17223>:
   291ec:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

000291fc <__FUNCTION__.17235>:
   291fc:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0002920c <__FUNCTION__.17246>:
   2920c:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0002921c <__FUNCTION__.17258>:
   2921c:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0002922c <__FUNCTION__.17269>:
   2922c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00029238 <__FUNCTION__.17290>:
   29238:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   29248:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   29258:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   29268:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   29278:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   29288:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   29298:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   292a8:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   292b8:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   292c8:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   292d8:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   292e8:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   292f8:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   29308:	2074 2230 0000 0000                         t 0"....

00029310 <lun_desc>:
   29310:	e461 0000 e4b9 0000 e505 0000 e551 0000     a...........Q...
   29320:	e581 0000 e605 0000 e695 0000 92f8 0002     ................
   29330:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   29340:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   29350:	87e6 0001 8860 0001 8860 0001 8804 0001     ....`...`.......
   29360:	87fe 0001 880a 0001 87ec 0001 8810 0001     ................
   29370:	8846 0001 8a48 0001 8a98 0001 8a98 0001     F...H...........
   29380:	8a94 0001 8a3a 0001 8a5a 0001 8a2a 0001     ....:...Z...*...
   29390:	8a6c 0001 8a7e 0001 8ae6 0001 8b14 0001     l...~...........
   293a0:	8b14 0001 8b10 0001 8ae0 0001 8aec 0001     ................
   293b0:	8ada 0001 8af2 0001 8af8 0001               ............

000293bc <tcc_modules>:
   293bc:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000293c8 <_tcc_gclk_ids>:
   293c8:	1a1a 001b                                   ....

000293cc <_tcc_apbcmasks>:
   293cc:	0100 0000 0200 0000 0400 0000               ............

000293d8 <_tcc_maxs>:
   293d8:	ffff 00ff ffff 00ff ffff 0000               ............

000293e4 <_tcc_cc_nums>:
   293e4:	0204 0002                                   ....

000293e8 <_tcc_ow_nums>:
   293e8:	0408 0002                                   ....

000293ec <_tcc_intflag>:
   293ec:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   293fc:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   2940c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0002941c <LfnOfs>:
   2941c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   2942c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   2943c:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   2944c:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   2945c:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   2946c:	5441 2020 2020 0020                         AT     .

00029474 <excvt.4558>:
   29474:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   29484:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   29494:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   294a4:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   294b4:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   294c4:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   294d4:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   294e4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

000294f4 <Tbl>:
   294f4:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   29504:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   29514:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   29524:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   29534:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   29544:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   29554:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   29564:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   29574:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   29584:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   29594:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   295a4:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   295b4:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   295c4:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   295d4:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   295e4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

000295f4 <tbl_lower.4308>:
   295f4:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   29604:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   29614:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   29624:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   29634:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   29644:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   29654:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   29664:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   29674:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   29684:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   29694:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   296a4:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   296b4:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   296c4:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   296d4:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   296e4:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   296f4:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   29704:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   29714:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   29724:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   29734:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   29744:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   29754:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   29764:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   29774:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   29784:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   29794:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   297a4:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   297b4:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   297c4:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

000297d4 <tbl_upper.4309>:
   297d4:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   297e4:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   297f4:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   29804:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   29814:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   29824:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   29834:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   29844:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   29854:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   29864:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   29874:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   29884:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   29894:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   298a4:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   298b4:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   298c4:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   298d4:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   298e4:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   298f4:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   29904:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   29914:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   29924:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   29934:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   29944:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   29954:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   29964:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   29974:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   29984:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   29994:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   299a4:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   299b4:	de52 0001 de52 0001 de52 0001 dce0 0001     R...R...R.......
   299c4:	de52 0001 ddca 0001 de52 0001 de52 0001     R.......R...R...
   299d4:	de52 0001 de52 0001 de52 0001 de52 0001     R...R...R...R...
   299e4:	de52 0001 de44 0001 514d 4354 0000 0000     R...D...MQTC....
   299f4:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   29a04:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   29a44:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   29a5c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   29a9c:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   29aac:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   29abc:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   29acc:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   29adc:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   29aec:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   29afc:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   29b0c:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   29b1c:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   29b2c:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   29b3c:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   29b4c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   29b5c:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   29b6c:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   29b7c:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   29b8c:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   29b9c:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   29bac:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   29bbc:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   29bcc:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   29bdc:	5448 5054 002f 0000 0d31 0000 ff46 0001     HTTP/...1...F...
   29bec:	ff40 0001 ff3a 0001 ff34 0001 ff4c 0001     @...:...4...L...
   29bfc:	ff2e 0001 ff4c 0001 ff28 0001 ff22 0001     ....L...(..."...
   29c0c:	ff4c 0001 ff1c 0001 ff1c 0001 ff16 0001     L...............
   29c1c:	ff10 0001 ff0a 0001 2000 4200 2400 4200     ......... .B.$.B
   29c2c:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   29c3c:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   29c4c:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   29c5c:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   29c6c:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   29c7c:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   29c8c:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   29c9c:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   29cac:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   29cbc:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   29ccc:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   29cdc:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   29cec:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   29cfc:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   29d0c:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   29d1c:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   29d2c:	696c 657a 4920 554d 0a0d 0000 6e49 7469     lize IMU....Init
   29d3c:	6169 696c 697a 676e 6420 7369 6174 636e     ializing distanc
   29d4c:	2065 6573 736e 726f 0a0d 0000 6944 7473     e sensor....Dist
   29d5c:	6e61 6563 7320 6e65 6f73 2072 6e69 7469     ance sensor init
   29d6c:	6169 696c 657a 0d64 000a 0000 6548 7061     ialized.....Heap
   29d7c:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   29d8c:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   29d9c:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   29dac:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   29dbc:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   29dcc:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   29ddc:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   29dec:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   29dfc:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   29e0c:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   29e1c:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   29e2c:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   29e3c:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   29e4c:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   29e5c:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   29e6c:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   29e7c:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   29e8c:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   29e9c:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   29eac:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   29ebc:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   29ecc:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   29edc:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   29eec:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   29efc:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   29f0c:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   29f1c:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   29f2c:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   29f3c:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   29f4c:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   29f5c:	0a0d 0000 251c 0002 24ec 0002 24fe 0002     .....%...$...$..
   29f6c:	2440 0002 24fe 0002 24e2 0002 24fe 0002     @$...$...$...$..
   29f7c:	2440 0002 24ec 0002 24ec 0002 24e2 0002     @$...$...$...$..
   29f8c:	2440 0002 2448 0002 2448 0002 2448 0002     @$..H$..H$..H$..
   29f9c:	2504 0002 24ec 0002 24ec 0002 24c0 0002     .%...$...$...$..
   29fac:	25a4 0002 24c0 0002 24e2 0002 24c0 0002     .%...$...$...$..
   29fbc:	25a4 0002 24ec 0002 24ec 0002 24e2 0002     .%...$...$...$..
   29fcc:	25a4 0002 2448 0002 2448 0002 2448 0002     .%..H$..H$..H$..
   29fdc:	25ae 0002 274c 0002 269c 0002 269c 0002     .%..L'...&...&..
   29fec:	269a 0002 273e 0002 273e 0002 2734 0002     .&..>'..>'..4'..
   29ffc:	269a 0002 273e 0002 2734 0002 273e 0002     .&..>'..4'..>'..
   2a00c:	269a 0002 2744 0002 2744 0002 2744 0002     .&..D'..D'..D'..
   2a01c:	27d4 0002 3490 0002 3472 0002 342c 0002     .'...4..r4..,4..
   2a02c:	334a 0002 342c 0002 3464 0002 342c 0002     J3..,4..d4..,4..
   2a03c:	334a 0002 3472 0002 3472 0002 3464 0002     J3..r4..r4..d4..
   2a04c:	334a 0002 3342 0002 3342 0002 3342 0002     J3..B3..B3..B3..
   2a05c:	36a8 0002 3af0 0002 39b0 0002 39b0 0002     .6...:...9...9..
   2a06c:	39ac 0002 3ac8 0002 3ac8 0002 3aba 0002     .9...:...:...:..
   2a07c:	39ac 0002 3ac8 0002 3aba 0002 3ac8 0002     .9...:...:...:..
   2a08c:	39ac 0002 3ad0 0002 3ad0 0002 3ad0 0002     .9...:...:...:..
   2a09c:	3cd4 0002                                   .<..

0002a0a0 <_global_impure_ptr>:
   2a0a0:	0128 2000                                   (.. 

0002a0a4 <__sf_fake_stderr>:
	...

0002a0c4 <__sf_fake_stdin>:
	...

0002a0e4 <__sf_fake_stdout>:
	...
   2a104:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   2a114:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   2a124:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   2a134:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0002a141 <_ctype_>:
   2a141:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   2a151:	2020 2020 2020 2020 2020 2020 2020 2020                     
   2a161:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   2a171:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   2a181:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   2a191:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   2a1a1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   2a1b1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   2a1c1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0002a244 <_init>:
   2a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a246:	46c0      	nop			; (mov r8, r8)
   2a248:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2a24a:	bc08      	pop	{r3}
   2a24c:	469e      	mov	lr, r3
   2a24e:	4770      	bx	lr

0002a250 <__init_array_start>:
   2a250:	000000dd 	.word	0x000000dd

0002a254 <_fini>:
   2a254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a256:	46c0      	nop			; (mov r8, r8)
   2a258:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2a25a:	bc08      	pop	{r3}
   2a25c:	469e      	mov	lr, r3
   2a25e:	4770      	bx	lr

0002a260 <__fini_array_start>:
   2a260:	000000b5 	.word	0x000000b5
